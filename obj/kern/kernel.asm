
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 40 23 04 80 	movabs $0x8004234038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 40 23 04 80 	movabs $0x8004234000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 47 23 04 80 	movabs $0x8004234760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 95 85 21 04 80 	movabs $0x8004218595,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 e0 71 04 80 	movabs $0x800471e010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 70 bb 4d 04 80 	movabs $0x80044dbb70,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf 70 bb 4d 04 80 	movabs $0x80044dbb70,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 9a 11 20 04 80 	movabs $0x800420119a,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf 60 de 21 04 80 	movabs $0x800421de60,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 e0 71 04 80 	movabs $0x800471e010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 29 6c 21 04 80 	movabs $0x8004216c29,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 b5 6d 04 80 	movabs $0x80046db5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 31 26 20 04 80 	movabs $0x8004202631,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 61 7f 20 04 80 	movabs $0x8004207f61,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 0b 9e 20 04 80 	movabs $0x8004209e0b,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 b5 7b 21 04 80 	movabs $0x8004217bb5,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 13 80 21 04 80 	movabs $0x8004218013,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 93 99 20 04 80 	movabs $0x8004209993,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 30 9a 21 04 80 	movabs $0x8004219a30,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 f4 99 21 04 80 	movabs $0x80042199f4,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 fc 01 20 04 80 	movabs $0x80042001fc,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf b0 e3 2b 04 80 	movabs $0x80042be3b0,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 ce 8f 20 04 80 	movabs $0x8004208fce,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	be 00 00 00 00       	mov    $0x0,%esi
  80042001ce:	48 bf 00 61 2a 04 80 	movabs $0x80042a6100,%rdi
  80042001d5:	00 00 00 
  80042001d8:	48 b8 ce 8f 20 04 80 	movabs $0x8004208fce,%rax
  80042001df:	00 00 00 
  80042001e2:	ff d0                	callq  *%rax
  80042001e4:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax

00000080042001fc <boot_aps>:
  80042001fc:	55                   	push   %rbp
  80042001fd:	48 89 e5             	mov    %rsp,%rbp
  8004200200:	48 83 ec 30          	sub    $0x30,%rsp
  8004200204:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  800420020b:	00 
  800420020c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200210:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200214:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200217:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420021a:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004200221:	00 00 00 
  8004200224:	48 8b 00             	mov    (%rax),%rax
  8004200227:	48 39 c2             	cmp    %rax,%rdx
  800420022a:	72 32                	jb     800420025e <boot_aps+0x62>
  800420022c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200230:	48 89 c1             	mov    %rax,%rcx
  8004200233:	48 ba 80 de 21 04 80 	movabs $0x800421de80,%rdx
  800420023a:	00 00 00 
  800420023d:	be 01 01 00 00       	mov    $0x101,%esi
  8004200242:	48 bf a3 de 21 04 80 	movabs $0x800421dea3,%rdi
  8004200249:	00 00 00 
  800420024c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200251:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200258:	00 00 00 
  800420025b:	41 ff d0             	callq  *%r8
  800420025e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200265:	00 00 00 
  8004200268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420026c:	48 01 d0             	add    %rdx,%rax
  800420026f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004200273:	48 ba de 76 21 04 80 	movabs $0x80042176de,%rdx
  800420027a:	00 00 00 
  800420027d:	48 b8 f8 75 21 04 80 	movabs $0x80042175f8,%rax
  8004200284:	00 00 00 
  8004200287:	48 29 c2             	sub    %rax,%rdx
  800420028a:	48 89 d0             	mov    %rdx,%rax
  800420028d:	48 89 c2             	mov    %rax,%rdx
  8004200290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200294:	48 be f8 75 21 04 80 	movabs $0x80042175f8,%rsi
  800420029b:	00 00 00 
  800420029e:	48 89 c7             	mov    %rax,%rdi
  80042002a1:	48 b8 94 12 21 04 80 	movabs $0x8004211294,%rax
  80042002a8:	00 00 00 
  80042002ab:	ff d0                	callq  *%rax
  80042002ad:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  80042002b4:	00 00 00 
  80042002b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002bb:	e9 0e 01 00 00       	jmpq   80042003ce <boot_aps+0x1d2>
  80042002c0:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042002c7:	00 00 00 
  80042002ca:	ff d0                	callq  *%rax
  80042002cc:	48 98                	cltq   
  80042002ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042002d2:	48 89 c2             	mov    %rax,%rdx
  80042002d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002d9:	48 01 c2             	add    %rax,%rdx
  80042002dc:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  80042002e3:	00 00 00 
  80042002e6:	48 01 d0             	add    %rdx,%rax
  80042002e9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002ed:	75 05                	jne    80042002f4 <boot_aps+0xf8>
  80042002ef:	e9 d2 00 00 00       	jmpq   80042003c6 <boot_aps+0x1ca>
  80042002f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042002f8:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  80042002ff:	00 00 00 
  8004200302:	48 29 c2             	sub    %rax,%rdx
  8004200305:	48 89 d0             	mov    %rdx,%rax
  8004200308:	48 c1 f8 03          	sar    $0x3,%rax
  800420030c:	48 89 c2             	mov    %rax,%rdx
  800420030f:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200316:	f0 f0 f0 
  8004200319:	48 0f af c2          	imul   %rdx,%rax
  800420031d:	48 83 c0 01          	add    $0x1,%rax
  8004200321:	48 c1 e0 10          	shl    $0x10,%rax
  8004200325:	48 89 c2             	mov    %rax,%rdx
  8004200328:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  800420032f:	00 00 00 
  8004200332:	48 01 c2             	add    %rax,%rdx
  8004200335:	48 b8 e0 b5 6d 04 80 	movabs $0x80046db5e0,%rax
  800420033c:	00 00 00 
  800420033f:	48 89 10             	mov    %rdx,(%rax)
  8004200342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200346:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420034a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004200351:	00 00 00 
  8004200354:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200358:	77 32                	ja     800420038c <boot_aps+0x190>
  800420035a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420035e:	48 89 c1             	mov    %rax,%rcx
  8004200361:	48 ba b8 de 21 04 80 	movabs $0x800421deb8,%rdx
  8004200368:	00 00 00 
  800420036b:	be 0b 01 00 00       	mov    $0x10b,%esi
  8004200370:	48 bf a3 de 21 04 80 	movabs $0x800421dea3,%rdi
  8004200377:	00 00 00 
  800420037a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420037f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200386:	00 00 00 
  8004200389:	41 ff d0             	callq  *%r8
  800420038c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004200393:	ff ff ff 
  8004200396:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420039a:	48 01 d0             	add    %rdx,%rax
  800420039d:	89 c2                	mov    %eax,%edx
  800420039f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003a3:	0f b6 00             	movzbl (%rax),%eax
  80042003a6:	0f b6 c0             	movzbl %al,%eax
  80042003a9:	89 d6                	mov    %edx,%esi
  80042003ab:	89 c7                	mov    %eax,%edi
  80042003ad:	48 b8 7a 82 21 04 80 	movabs $0x800421827a,%rax
  80042003b4:	00 00 00 
  80042003b7:	ff d0                	callq  *%rax
  80042003b9:	90                   	nop
  80042003ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003be:	8b 40 04             	mov    0x4(%rax),%eax
  80042003c1:	83 f8 01             	cmp    $0x1,%eax
  80042003c4:	75 f4                	jne    80042003ba <boot_aps+0x1be>
  80042003c6:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003cd:	00 
  80042003ce:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  80042003d5:	00 00 00 
  80042003d8:	8b 00                	mov    (%rax),%eax
  80042003da:	48 98                	cltq   
  80042003dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042003e0:	48 89 c2             	mov    %rax,%rdx
  80042003e3:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003e7:	48 01 c2             	add    %rax,%rdx
  80042003ea:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  80042003f1:	00 00 00 
  80042003f4:	48 01 d0             	add    %rdx,%rax
  80042003f7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042003fb:	0f 87 bf fe ff ff    	ja     80042002c0 <boot_aps+0xc4>
  8004200401:	c9                   	leaveq 
  8004200402:	c3                   	retq   

0000008004200403 <mp_main>:
  8004200403:	55                   	push   %rbp
  8004200404:	48 89 e5             	mov    %rsp,%rbp
  8004200407:	48 83 ec 10          	sub    $0x10,%rsp
  800420040b:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  8004200412:	00 00 00 
  8004200415:	48 8b 00             	mov    (%rax),%rax
  8004200418:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420041c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200420:	0f 22 d8             	mov    %rax,%cr3
  8004200423:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420042a:	00 00 00 
  800420042d:	ff d0                	callq  *%rax
  800420042f:	89 c6                	mov    %eax,%esi
  8004200431:	48 bf dc de 21 04 80 	movabs $0x800421dedc,%rdi
  8004200438:	00 00 00 
  800420043b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200440:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004200447:	00 00 00 
  800420044a:	ff d2                	callq  *%rdx
  800420044c:	48 b8 13 80 21 04 80 	movabs $0x8004218013,%rax
  8004200453:	00 00 00 
  8004200456:	ff d0                	callq  *%rax
  8004200458:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 0e c5 20 04 80 	movabs $0x800420c50e,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 98                	cltq   
  800420047e:	48 c1 e0 03          	shl    $0x3,%rax
  8004200482:	48 89 c2             	mov    %rax,%rdx
  8004200485:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200489:	48 01 d0             	add    %rdx,%rax
  800420048c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004200493:	00 00 00 
  8004200496:	48 01 d0             	add    %rdx,%rax
  8004200499:	48 83 c0 04          	add    $0x4,%rax
  800420049d:	be 01 00 00 00       	mov    $0x1,%esi
  80042004a2:	48 89 c7             	mov    %rax,%rdi
  80042004a5:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004ac:	00 00 00 
  80042004af:	ff d0                	callq  *%rax
  80042004b1:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax

00000080042004c9 <_panic>:
  80042004c9:	55                   	push   %rbp
  80042004ca:	48 89 e5             	mov    %rsp,%rbp
  80042004cd:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004d4:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004db:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004e1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004e8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004ef:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042004f6:	84 c0                	test   %al,%al
  80042004f8:	74 20                	je     800420051a <_panic+0x51>
  80042004fa:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042004fe:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200502:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200506:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420050a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420050e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200512:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200516:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420051a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200521:	48 b8 d8 b5 6d 04 80 	movabs $0x80046db5d8,%rax
  8004200528:	00 00 00 
  800420052b:	48 8b 00             	mov    (%rax),%rax
  800420052e:	48 85 c0             	test   %rax,%rax
  8004200531:	74 05                	je     8004200538 <_panic+0x6f>
  8004200533:	e9 b5 00 00 00       	jmpq   80042005ed <_panic+0x124>
  8004200538:	48 b8 d8 b5 6d 04 80 	movabs $0x80046db5d8,%rax
  800420053f:	00 00 00 
  8004200542:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200549:	48 89 10             	mov    %rdx,(%rax)
  800420054c:	fa                   	cli    
  800420054d:	fc                   	cld    
  800420054e:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200555:	00 00 00 
  8004200558:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420055f:	00 00 00 
  8004200562:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200566:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420056d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200574:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420057b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004200582:	00 00 00 
  8004200585:	ff d0                	callq  *%rax
  8004200587:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  800420058d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004200594:	89 c6                	mov    %eax,%esi
  8004200596:	48 bf f8 de 21 04 80 	movabs $0x800421def8,%rdi
  800420059d:	00 00 00 
  80042005a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005a5:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  80042005ac:	00 00 00 
  80042005af:	41 ff d0             	callq  *%r8
  80042005b2:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005b9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005c0:	48 89 d6             	mov    %rdx,%rsi
  80042005c3:	48 89 c7             	mov    %rax,%rdi
  80042005c6:	48 b8 34 9c 20 04 80 	movabs $0x8004209c34,%rax
  80042005cd:	00 00 00 
  80042005d0:	ff d0                	callq  *%rax
  80042005d2:	48 bf 1a df 21 04 80 	movabs $0x800421df1a,%rdi
  80042005d9:	00 00 00 
  80042005dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005e1:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042005e8:	00 00 00 
  80042005eb:	ff d2                	callq  *%rdx
  80042005ed:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005f2:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  80042005f9:	00 00 00 
  80042005fc:	ff d0                	callq  *%rax
  80042005fe:	eb ed                	jmp    80042005ed <_panic+0x124>

0000008004200600 <_warn>:
  8004200600:	55                   	push   %rbp
  8004200601:	48 89 e5             	mov    %rsp,%rbp
  8004200604:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420060b:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004200612:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200618:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420061f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200626:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420062d:	84 c0                	test   %al,%al
  800420062f:	74 20                	je     8004200651 <_warn+0x51>
  8004200631:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200635:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200639:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420063d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200641:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200645:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200649:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420064d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200651:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200658:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420065f:	00 00 00 
  8004200662:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200669:	00 00 00 
  800420066c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200670:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200677:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420067e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200685:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800420068b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004200692:	48 89 c6             	mov    %rax,%rsi
  8004200695:	48 bf 1c df 21 04 80 	movabs $0x800421df1c,%rdi
  800420069c:	00 00 00 
  800420069f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006a4:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  80042006ab:	00 00 00 
  80042006ae:	ff d1                	callq  *%rcx
  80042006b0:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006b7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006be:	48 89 d6             	mov    %rdx,%rsi
  80042006c1:	48 89 c7             	mov    %rax,%rdi
  80042006c4:	48 b8 34 9c 20 04 80 	movabs $0x8004209c34,%rax
  80042006cb:	00 00 00 
  80042006ce:	ff d0                	callq  *%rax
  80042006d0:	48 bf 1a df 21 04 80 	movabs $0x800421df1a,%rdi
  80042006d7:	00 00 00 
  80042006da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006df:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042006e6:	00 00 00 
  80042006e9:	ff d2                	callq  *%rdx
  80042006eb:	c9                   	leaveq 
  80042006ec:	c3                   	retq   

00000080042006ed <delay>:
  80042006ed:	55                   	push   %rbp
  80042006ee:	48 89 e5             	mov    %rsp,%rbp
  80042006f1:	48 83 ec 20          	sub    $0x20,%rsp
  80042006f5:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042006fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042006ff:	89 c2                	mov    %eax,%edx
  8004200701:	ec                   	in     (%dx),%al
  8004200702:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200705:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  800420070c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420070f:	89 c2                	mov    %eax,%edx
  8004200711:	ec                   	in     (%dx),%al
  8004200712:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200715:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  800420071c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420071f:	89 c2                	mov    %eax,%edx
  8004200721:	ec                   	in     (%dx),%al
  8004200722:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200725:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  800420072c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420072f:	89 c2                	mov    %eax,%edx
  8004200731:	ec                   	in     (%dx),%al
  8004200732:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200735:	c9                   	leaveq 
  8004200736:	c3                   	retq   

0000008004200737 <serial_proc_data>:
  8004200737:	55                   	push   %rbp
  8004200738:	48 89 e5             	mov    %rsp,%rbp
  800420073b:	48 83 ec 10          	sub    $0x10,%rsp
  800420073f:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200746:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200749:	89 c2                	mov    %eax,%edx
  800420074b:	ec                   	in     (%dx),%al
  800420074c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420074f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200753:	0f b6 c0             	movzbl %al,%eax
  8004200756:	83 e0 01             	and    $0x1,%eax
  8004200759:	85 c0                	test   %eax,%eax
  800420075b:	75 07                	jne    8004200764 <serial_proc_data+0x2d>
  800420075d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200762:	eb 17                	jmp    800420077b <serial_proc_data+0x44>
  8004200764:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420076b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420076e:	89 c2                	mov    %eax,%edx
  8004200770:	ec                   	in     (%dx),%al
  8004200771:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200774:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200778:	0f b6 c0             	movzbl %al,%eax
  800420077b:	c9                   	leaveq 
  800420077c:	c3                   	retq   

000000800420077d <serial_intr>:
  800420077d:	55                   	push   %rbp
  800420077e:	48 89 e5             	mov    %rsp,%rbp
  8004200781:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  8004200788:	00 00 00 
  800420078b:	0f b6 00             	movzbl (%rax),%eax
  800420078e:	84 c0                	test   %al,%al
  8004200790:	74 16                	je     80042007a8 <serial_intr+0x2b>
  8004200792:	48 bf 37 07 20 04 80 	movabs $0x8004200737,%rdi
  8004200799:	00 00 00 
  800420079c:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  80042007a3:	00 00 00 
  80042007a6:	ff d0                	callq  *%rax
  80042007a8:	5d                   	pop    %rbp
  80042007a9:	c3                   	retq   

00000080042007aa <serial_putc>:
  80042007aa:	55                   	push   %rbp
  80042007ab:	48 89 e5             	mov    %rsp,%rbp
  80042007ae:	48 83 ec 28          	sub    $0x28,%rsp
  80042007b2:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007bc:	eb 10                	jmp    80042007ce <serial_putc+0x24>
  80042007be:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  80042007c5:	00 00 00 
  80042007c8:	ff d0                	callq  *%rax
  80042007ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007ce:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007d8:	89 c2                	mov    %eax,%edx
  80042007da:	ec                   	in     (%dx),%al
  80042007db:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007de:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007e2:	0f b6 c0             	movzbl %al,%eax
  80042007e5:	83 e0 20             	and    $0x20,%eax
  80042007e8:	85 c0                	test   %eax,%eax
  80042007ea:	75 09                	jne    80042007f5 <serial_putc+0x4b>
  80042007ec:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007f3:	7e c9                	jle    80042007be <serial_putc+0x14>
  80042007f5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042007f8:	0f b6 c0             	movzbl %al,%eax
  80042007fb:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  8004200802:	88 45 ef             	mov    %al,-0x11(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200805:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200809:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420080c:	ee                   	out    %al,(%dx)
  800420080d:	c9                   	leaveq 
  800420080e:	c3                   	retq   

000000800420080f <serial_init>:
  800420080f:	55                   	push   %rbp
  8004200810:	48 89 e5             	mov    %rsp,%rbp
  8004200813:	48 83 ec 50          	sub    $0x50,%rsp
  8004200817:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420081e:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  8004200822:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200826:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200829:	ee                   	out    %al,(%dx)
  800420082a:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  8004200831:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200835:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200839:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420083c:	ee                   	out    %al,(%dx)
  800420083d:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200844:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200848:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420084c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420084f:	ee                   	out    %al,(%dx)
  8004200850:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200857:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  800420085b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420085f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200862:	ee                   	out    %al,(%dx)
  8004200863:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  800420086a:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420086e:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200872:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200875:	ee                   	out    %al,(%dx)
  8004200876:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  800420087d:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  8004200881:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200885:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200888:	ee                   	out    %al,(%dx)
  8004200889:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  8004200890:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  8004200894:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004200898:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420089b:	ee                   	out    %al,(%dx)
  800420089c:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008a3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008a6:	89 c2                	mov    %eax,%edx
  80042008a8:	ec                   	in     (%dx),%al
  80042008a9:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008ac:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008b0:	3c ff                	cmp    $0xff,%al
  80042008b2:	0f 95 c2             	setne  %dl
  80042008b5:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  80042008bc:	00 00 00 
  80042008bf:	88 10                	mov    %dl,(%rax)
  80042008c1:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008c8:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008cb:	89 c2                	mov    %eax,%edx
  80042008cd:	ec                   	in     (%dx),%al
  80042008ce:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008d1:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008d8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008db:	89 c2                	mov    %eax,%edx
  80042008dd:	ec                   	in     (%dx),%al
  80042008de:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008e1:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  80042008e8:	00 00 00 
  80042008eb:	0f b6 00             	movzbl (%rax),%eax
  80042008ee:	84 c0                	test   %al,%al
  80042008f0:	74 23                	je     8004200915 <serial_init+0x106>
  80042008f2:	48 b8 72 46 23 04 80 	movabs $0x8004234672,%rax
  80042008f9:	00 00 00 
  80042008fc:	0f b7 00             	movzwl (%rax),%eax
  80042008ff:	0f b7 c0             	movzwl %ax,%eax
  8004200902:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200907:	89 c7                	mov    %eax,%edi
  8004200909:	48 b8 e5 9a 20 04 80 	movabs $0x8004209ae5,%rax
  8004200910:	00 00 00 
  8004200913:	ff d0                	callq  *%rax
  8004200915:	c9                   	leaveq 
  8004200916:	c3                   	retq   

0000008004200917 <lpt_putc>:
  8004200917:	55                   	push   %rbp
  8004200918:	48 89 e5             	mov    %rsp,%rbp
  800420091b:	48 83 ec 38          	sub    $0x38,%rsp
  800420091f:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200922:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200929:	eb 10                	jmp    800420093b <lpt_putc+0x24>
  800420092b:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  8004200932:	00 00 00 
  8004200935:	ff d0                	callq  *%rax
  8004200937:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420093b:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200942:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200945:	89 c2                	mov    %eax,%edx
  8004200947:	ec                   	in     (%dx),%al
  8004200948:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  800420094b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420094f:	84 c0                	test   %al,%al
  8004200951:	78 09                	js     800420095c <lpt_putc+0x45>
  8004200953:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420095a:	7e cf                	jle    800420092b <lpt_putc+0x14>
  800420095c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420095f:	0f b6 c0             	movzbl %al,%eax
  8004200962:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200969:	88 45 ef             	mov    %al,-0x11(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420096c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200970:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200973:	ee                   	out    %al,(%dx)
  8004200974:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  800420097b:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420097f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200983:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200986:	ee                   	out    %al,(%dx)
  8004200987:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420098e:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200992:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200996:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200999:	ee                   	out    %al,(%dx)
  800420099a:	c9                   	leaveq 
  800420099b:	c3                   	retq   

000000800420099c <cga_init>:
  800420099c:	55                   	push   %rbp
  800420099d:	48 89 e5             	mov    %rsp,%rbp
  80042009a0:	48 83 ec 30          	sub    $0x30,%rsp
  80042009a4:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009ab:	00 00 00 
  80042009ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009b6:	0f b7 00             	movzwl (%rax),%eax
  80042009b9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c1:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009ca:	0f b7 00             	movzwl (%rax),%eax
  80042009cd:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009d1:	74 20                	je     80042009f3 <cga_init+0x57>
  80042009d3:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009da:	00 00 00 
  80042009dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009e1:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  80042009e8:	00 00 00 
  80042009eb:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009f1:	eb 1b                	jmp    8004200a0e <cga_init+0x72>
  80042009f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009f7:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042009fb:	66 89 10             	mov    %dx,(%rax)
  80042009fe:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a05:	00 00 00 
  8004200a08:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a0e:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a15:	00 00 00 
  8004200a18:	8b 00                	mov    (%rax),%eax
  8004200a1a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a1d:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a21:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a25:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a28:	ee                   	out    %al,(%dx)
  8004200a29:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a30:	00 00 00 
  8004200a33:	8b 00                	mov    (%rax),%eax
  8004200a35:	83 c0 01             	add    $0x1,%eax
  8004200a38:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a3e:	89 c2                	mov    %eax,%edx
  8004200a40:	ec                   	in     (%dx),%al
  8004200a41:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a44:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a48:	0f b6 c0             	movzbl %al,%eax
  8004200a4b:	c1 e0 08             	shl    $0x8,%eax
  8004200a4e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a51:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a58:	00 00 00 
  8004200a5b:	8b 00                	mov    (%rax),%eax
  8004200a5d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a60:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a64:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a68:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a6b:	ee                   	out    %al,(%dx)
  8004200a6c:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a73:	00 00 00 
  8004200a76:	8b 00                	mov    (%rax),%eax
  8004200a78:	83 c0 01             	add    $0x1,%eax
  8004200a7b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a7e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a81:	89 c2                	mov    %eax,%edx
  8004200a83:	ec                   	in     (%dx),%al
  8004200a84:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a87:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a8b:	0f b6 c0             	movzbl %al,%eax
  8004200a8e:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a91:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200a98:	00 00 00 
  8004200a9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200a9f:	48 89 10             	mov    %rdx,(%rax)
  8004200aa2:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200aa5:	89 c2                	mov    %eax,%edx
  8004200aa7:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200aae:	00 00 00 
  8004200ab1:	66 89 10             	mov    %dx,(%rax)
  8004200ab4:	c9                   	leaveq 
  8004200ab5:	c3                   	retq   

0000008004200ab6 <cga_putc>:
  8004200ab6:	55                   	push   %rbp
  8004200ab7:	48 89 e5             	mov    %rsp,%rbp
  8004200aba:	48 83 ec 40          	sub    $0x40,%rsp
  8004200abe:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200ac1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ac4:	b0 00                	mov    $0x0,%al
  8004200ac6:	85 c0                	test   %eax,%eax
  8004200ac8:	75 07                	jne    8004200ad1 <cga_putc+0x1b>
  8004200aca:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200ad1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad4:	0f b6 c0             	movzbl %al,%eax
  8004200ad7:	83 f8 09             	cmp    $0x9,%eax
  8004200ada:	0f 84 f6 00 00 00    	je     8004200bd6 <cga_putc+0x120>
  8004200ae0:	83 f8 09             	cmp    $0x9,%eax
  8004200ae3:	7f 0a                	jg     8004200aef <cga_putc+0x39>
  8004200ae5:	83 f8 08             	cmp    $0x8,%eax
  8004200ae8:	74 18                	je     8004200b02 <cga_putc+0x4c>
  8004200aea:	e9 3e 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200aef:	83 f8 0a             	cmp    $0xa,%eax
  8004200af2:	74 75                	je     8004200b69 <cga_putc+0xb3>
  8004200af4:	83 f8 0d             	cmp    $0xd,%eax
  8004200af7:	0f 84 89 00 00 00    	je     8004200b86 <cga_putc+0xd0>
  8004200afd:	e9 2b 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200b02:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b09:	00 00 00 
  8004200b0c:	0f b7 00             	movzwl (%rax),%eax
  8004200b0f:	66 85 c0             	test   %ax,%ax
  8004200b12:	74 50                	je     8004200b64 <cga_putc+0xae>
  8004200b14:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b1b:	00 00 00 
  8004200b1e:	0f b7 00             	movzwl (%rax),%eax
  8004200b21:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b24:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b2b:	00 00 00 
  8004200b2e:	66 89 10             	mov    %dx,(%rax)
  8004200b31:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200b38:	00 00 00 
  8004200b3b:	48 8b 10             	mov    (%rax),%rdx
  8004200b3e:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b45:	00 00 00 
  8004200b48:	0f b7 00             	movzwl (%rax),%eax
  8004200b4b:	0f b7 c0             	movzwl %ax,%eax
  8004200b4e:	48 01 c0             	add    %rax,%rax
  8004200b51:	48 01 c2             	add    %rax,%rdx
  8004200b54:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b57:	b0 00                	mov    $0x0,%al
  8004200b59:	83 c8 20             	or     $0x20,%eax
  8004200b5c:	66 89 02             	mov    %ax,(%rdx)
  8004200b5f:	e9 04 01 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b64:	e9 ff 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b69:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b70:	00 00 00 
  8004200b73:	0f b7 00             	movzwl (%rax),%eax
  8004200b76:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b79:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b80:	00 00 00 
  8004200b83:	66 89 10             	mov    %dx,(%rax)
  8004200b86:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b8d:	00 00 00 
  8004200b90:	0f b7 30             	movzwl (%rax),%esi
  8004200b93:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b9a:	00 00 00 
  8004200b9d:	0f b7 08             	movzwl (%rax),%ecx
  8004200ba0:	0f b7 c1             	movzwl %cx,%eax
  8004200ba3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200ba9:	c1 e8 10             	shr    $0x10,%eax
  8004200bac:	89 c2                	mov    %eax,%edx
  8004200bae:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bb2:	89 d0                	mov    %edx,%eax
  8004200bb4:	c1 e0 02             	shl    $0x2,%eax
  8004200bb7:	01 d0                	add    %edx,%eax
  8004200bb9:	c1 e0 04             	shl    $0x4,%eax
  8004200bbc:	29 c1                	sub    %eax,%ecx
  8004200bbe:	89 ca                	mov    %ecx,%edx
  8004200bc0:	29 d6                	sub    %edx,%esi
  8004200bc2:	89 f2                	mov    %esi,%edx
  8004200bc4:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200bcb:	00 00 00 
  8004200bce:	66 89 10             	mov    %dx,(%rax)
  8004200bd1:	e9 92 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200bd6:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bdb:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200be2:	00 00 00 
  8004200be5:	ff d0                	callq  *%rax
  8004200be7:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bec:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200bf3:	00 00 00 
  8004200bf6:	ff d0                	callq  *%rax
  8004200bf8:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bfd:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c04:	00 00 00 
  8004200c07:	ff d0                	callq  *%rax
  8004200c09:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c0e:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c15:	00 00 00 
  8004200c18:	ff d0                	callq  *%rax
  8004200c1a:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1f:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c26:	00 00 00 
  8004200c29:	ff d0                	callq  *%rax
  8004200c2b:	eb 3b                	jmp    8004200c68 <cga_putc+0x1b2>
  8004200c2d:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200c34:	00 00 00 
  8004200c37:	48 8b 30             	mov    (%rax),%rsi
  8004200c3a:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200c41:	00 00 00 
  8004200c44:	0f b7 00             	movzwl (%rax),%eax
  8004200c47:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c4a:	48 ba 10 c0 4d 04 80 	movabs $0x80044dc010,%rdx
  8004200c51:	00 00 00 
  8004200c54:	66 89 0a             	mov    %cx,(%rdx)
  8004200c57:	0f b7 c0             	movzwl %ax,%eax
  8004200c5a:	48 01 c0             	add    %rax,%rax
  8004200c5d:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c61:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c64:	66 89 02             	mov    %ax,(%rdx)
  8004200c67:	90                   	nop
  8004200c68:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200c6f:	00 00 00 
  8004200c72:	0f b7 00             	movzwl (%rax),%eax
  8004200c75:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c79:	0f 86 89 00 00 00    	jbe    8004200d08 <cga_putc+0x252>
  8004200c7f:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200c86:	00 00 00 
  8004200c89:	48 8b 00             	mov    (%rax),%rax
  8004200c8c:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c93:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200c9a:	00 00 00 
  8004200c9d:	48 8b 00             	mov    (%rax),%rax
  8004200ca0:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200ca5:	48 89 ce             	mov    %rcx,%rsi
  8004200ca8:	48 89 c7             	mov    %rax,%rdi
  8004200cab:	48 b8 94 12 21 04 80 	movabs $0x8004211294,%rax
  8004200cb2:	00 00 00 
  8004200cb5:	ff d0                	callq  *%rax
  8004200cb7:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cbe:	eb 22                	jmp    8004200ce2 <cga_putc+0x22c>
  8004200cc0:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200cc7:	00 00 00 
  8004200cca:	48 8b 00             	mov    (%rax),%rax
  8004200ccd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cd0:	48 63 d2             	movslq %edx,%rdx
  8004200cd3:	48 01 d2             	add    %rdx,%rdx
  8004200cd6:	48 01 d0             	add    %rdx,%rax
  8004200cd9:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cde:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200ce2:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200ce9:	7e d5                	jle    8004200cc0 <cga_putc+0x20a>
  8004200ceb:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200cf2:	00 00 00 
  8004200cf5:	0f b7 00             	movzwl (%rax),%eax
  8004200cf8:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200cfb:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200d02:	00 00 00 
  8004200d05:	66 89 10             	mov    %dx,(%rax)
  8004200d08:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200d0f:	00 00 00 
  8004200d12:	8b 00                	mov    (%rax),%eax
  8004200d14:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d17:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d1b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d1f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d22:	ee                   	out    %al,(%dx)
  8004200d23:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200d2a:	00 00 00 
  8004200d2d:	0f b7 00             	movzwl (%rax),%eax
  8004200d30:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d34:	0f b6 c0             	movzbl %al,%eax
  8004200d37:	48 ba 04 c0 4d 04 80 	movabs $0x80044dc004,%rdx
  8004200d3e:	00 00 00 
  8004200d41:	8b 12                	mov    (%rdx),%edx
  8004200d43:	83 c2 01             	add    $0x1,%edx
  8004200d46:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d49:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d4c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d50:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d53:	ee                   	out    %al,(%dx)
  8004200d54:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200d5b:	00 00 00 
  8004200d5e:	8b 00                	mov    (%rax),%eax
  8004200d60:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d63:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d67:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d6b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d6e:	ee                   	out    %al,(%dx)
  8004200d6f:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200d76:	00 00 00 
  8004200d79:	0f b7 00             	movzwl (%rax),%eax
  8004200d7c:	0f b6 c0             	movzbl %al,%eax
  8004200d7f:	48 ba 04 c0 4d 04 80 	movabs $0x80044dc004,%rdx
  8004200d86:	00 00 00 
  8004200d89:	8b 12                	mov    (%rdx),%edx
  8004200d8b:	83 c2 01             	add    $0x1,%edx
  8004200d8e:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d91:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200d94:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200d98:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200d9b:	ee                   	out    %al,(%dx)
  8004200d9c:	c9                   	leaveq 
  8004200d9d:	c3                   	retq   

0000008004200d9e <kbd_proc_data>:
  8004200d9e:	55                   	push   %rbp
  8004200d9f:	48 89 e5             	mov    %rsp,%rbp
  8004200da2:	48 83 ec 20          	sub    $0x20,%rsp
  8004200da6:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dad:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200db0:	89 c2                	mov    %eax,%edx
  8004200db2:	ec                   	in     (%dx),%al
  8004200db3:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200db6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dba:	0f b6 c0             	movzbl %al,%eax
  8004200dbd:	83 e0 01             	and    $0x1,%eax
  8004200dc0:	85 c0                	test   %eax,%eax
  8004200dc2:	75 0a                	jne    8004200dce <kbd_proc_data+0x30>
  8004200dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dc9:	e9 fc 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200dce:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dd5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200dd8:	89 c2                	mov    %eax,%edx
  8004200dda:	ec                   	in     (%dx),%al
  8004200ddb:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dde:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200de2:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200de5:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200de9:	75 27                	jne    8004200e12 <kbd_proc_data+0x74>
  8004200deb:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200df2:	00 00 00 
  8004200df5:	8b 00                	mov    (%rax),%eax
  8004200df7:	83 c8 40             	or     $0x40,%eax
  8004200dfa:	89 c2                	mov    %eax,%edx
  8004200dfc:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e03:	00 00 00 
  8004200e06:	89 10                	mov    %edx,(%rax)
  8004200e08:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e0d:	e9 b8 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e12:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e16:	84 c0                	test   %al,%al
  8004200e18:	79 65                	jns    8004200e7f <kbd_proc_data+0xe1>
  8004200e1a:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e21:	00 00 00 
  8004200e24:	8b 00                	mov    (%rax),%eax
  8004200e26:	83 e0 40             	and    $0x40,%eax
  8004200e29:	85 c0                	test   %eax,%eax
  8004200e2b:	75 09                	jne    8004200e36 <kbd_proc_data+0x98>
  8004200e2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e31:	83 e0 7f             	and    $0x7f,%eax
  8004200e34:	eb 04                	jmp    8004200e3a <kbd_proc_data+0x9c>
  8004200e36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3a:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e3d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e41:	48 ba 60 40 23 04 80 	movabs $0x8004234060,%rdx
  8004200e48:	00 00 00 
  8004200e4b:	48 98                	cltq   
  8004200e4d:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e51:	83 c8 40             	or     $0x40,%eax
  8004200e54:	0f b6 c0             	movzbl %al,%eax
  8004200e57:	f7 d0                	not    %eax
  8004200e59:	89 c2                	mov    %eax,%edx
  8004200e5b:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e62:	00 00 00 
  8004200e65:	8b 00                	mov    (%rax),%eax
  8004200e67:	21 c2                	and    %eax,%edx
  8004200e69:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e70:	00 00 00 
  8004200e73:	89 10                	mov    %edx,(%rax)
  8004200e75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e7a:	e9 4b 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e7f:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e86:	00 00 00 
  8004200e89:	8b 00                	mov    (%rax),%eax
  8004200e8b:	83 e0 40             	and    $0x40,%eax
  8004200e8e:	85 c0                	test   %eax,%eax
  8004200e90:	74 21                	je     8004200eb3 <kbd_proc_data+0x115>
  8004200e92:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200e96:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e9d:	00 00 00 
  8004200ea0:	8b 00                	mov    (%rax),%eax
  8004200ea2:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200ea5:	89 c2                	mov    %eax,%edx
  8004200ea7:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200eae:	00 00 00 
  8004200eb1:	89 10                	mov    %edx,(%rax)
  8004200eb3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200eb7:	48 ba 60 40 23 04 80 	movabs $0x8004234060,%rdx
  8004200ebe:	00 00 00 
  8004200ec1:	48 98                	cltq   
  8004200ec3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ec7:	0f b6 d0             	movzbl %al,%edx
  8004200eca:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200ed1:	00 00 00 
  8004200ed4:	8b 00                	mov    (%rax),%eax
  8004200ed6:	09 c2                	or     %eax,%edx
  8004200ed8:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200edf:	00 00 00 
  8004200ee2:	89 10                	mov    %edx,(%rax)
  8004200ee4:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ee8:	48 ba 60 41 23 04 80 	movabs $0x8004234160,%rdx
  8004200eef:	00 00 00 
  8004200ef2:	48 98                	cltq   
  8004200ef4:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ef8:	0f b6 d0             	movzbl %al,%edx
  8004200efb:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f02:	00 00 00 
  8004200f05:	8b 00                	mov    (%rax),%eax
  8004200f07:	31 c2                	xor    %eax,%edx
  8004200f09:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f10:	00 00 00 
  8004200f13:	89 10                	mov    %edx,(%rax)
  8004200f15:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	8b 00                	mov    (%rax),%eax
  8004200f21:	83 e0 03             	and    $0x3,%eax
  8004200f24:	89 c2                	mov    %eax,%edx
  8004200f26:	48 b8 60 45 23 04 80 	movabs $0x8004234560,%rax
  8004200f2d:	00 00 00 
  8004200f30:	89 d2                	mov    %edx,%edx
  8004200f32:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f3a:	48 01 d0             	add    %rdx,%rax
  8004200f3d:	0f b6 00             	movzbl (%rax),%eax
  8004200f40:	0f b6 c0             	movzbl %al,%eax
  8004200f43:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f46:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f4d:	00 00 00 
  8004200f50:	8b 00                	mov    (%rax),%eax
  8004200f52:	83 e0 08             	and    $0x8,%eax
  8004200f55:	85 c0                	test   %eax,%eax
  8004200f57:	74 22                	je     8004200f7b <kbd_proc_data+0x1dd>
  8004200f59:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f5d:	7e 0c                	jle    8004200f6b <kbd_proc_data+0x1cd>
  8004200f5f:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f63:	7f 06                	jg     8004200f6b <kbd_proc_data+0x1cd>
  8004200f65:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f69:	eb 10                	jmp    8004200f7b <kbd_proc_data+0x1dd>
  8004200f6b:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f6f:	7e 0a                	jle    8004200f7b <kbd_proc_data+0x1dd>
  8004200f71:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f75:	7f 04                	jg     8004200f7b <kbd_proc_data+0x1dd>
  8004200f77:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f7b:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f82:	00 00 00 
  8004200f85:	8b 00                	mov    (%rax),%eax
  8004200f87:	f7 d0                	not    %eax
  8004200f89:	83 e0 06             	and    $0x6,%eax
  8004200f8c:	85 c0                	test   %eax,%eax
  8004200f8e:	75 37                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f90:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200f97:	75 2e                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f99:	48 bf 36 df 21 04 80 	movabs $0x800421df36,%rdi
  8004200fa0:	00 00 00 
  8004200fa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fa8:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004200faf:	00 00 00 
  8004200fb2:	ff d2                	callq  *%rdx
  8004200fb4:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fbb:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fbf:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fc3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fc6:	ee                   	out    %al,(%dx)
  8004200fc7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fca:	c9                   	leaveq 
  8004200fcb:	c3                   	retq   

0000008004200fcc <kbd_intr>:
  8004200fcc:	55                   	push   %rbp
  8004200fcd:	48 89 e5             	mov    %rsp,%rbp
  8004200fd0:	48 bf 9e 0d 20 04 80 	movabs $0x8004200d9e,%rdi
  8004200fd7:	00 00 00 
  8004200fda:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  8004200fe1:	00 00 00 
  8004200fe4:	ff d0                	callq  *%rax
  8004200fe6:	5d                   	pop    %rbp
  8004200fe7:	c3                   	retq   

0000008004200fe8 <kbd_init>:
  8004200fe8:	55                   	push   %rbp
  8004200fe9:	48 89 e5             	mov    %rsp,%rbp
  8004200fec:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  8004200ff3:	00 00 00 
  8004200ff6:	ff d0                	callq  *%rax
  8004200ff8:	48 b8 72 46 23 04 80 	movabs $0x8004234672,%rax
  8004200fff:	00 00 00 
  8004201002:	0f b7 00             	movzwl (%rax),%eax
  8004201005:	0f b7 c0             	movzwl %ax,%eax
  8004201008:	25 fd ff 00 00       	and    $0xfffd,%eax
  800420100d:	89 c7                	mov    %eax,%edi
  800420100f:	48 b8 e5 9a 20 04 80 	movabs $0x8004209ae5,%rax
  8004201016:	00 00 00 
  8004201019:	ff d0                	callq  *%rax
  800420101b:	5d                   	pop    %rbp
  800420101c:	c3                   	retq   

000000800420101d <cons_intr>:
  800420101d:	55                   	push   %rbp
  800420101e:	48 89 e5             	mov    %rsp,%rbp
  8004201021:	48 83 ec 20          	sub    $0x20,%rsp
  8004201025:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201029:	eb 6a                	jmp    8004201095 <cons_intr+0x78>
  800420102b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420102f:	75 02                	jne    8004201033 <cons_intr+0x16>
  8004201031:	eb 62                	jmp    8004201095 <cons_intr+0x78>
  8004201033:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  800420103a:	00 00 00 
  800420103d:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201043:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201046:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  800420104d:	00 00 00 
  8004201050:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201056:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201059:	89 d1                	mov    %edx,%ecx
  800420105b:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  8004201062:	00 00 00 
  8004201065:	89 c0                	mov    %eax,%eax
  8004201067:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420106a:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  8004201071:	00 00 00 
  8004201074:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420107a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420107f:	75 14                	jne    8004201095 <cons_intr+0x78>
  8004201081:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  8004201088:	00 00 00 
  800420108b:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  8004201092:	00 00 00 
  8004201095:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201099:	ff d0                	callq  *%rax
  800420109b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420109e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010a2:	75 87                	jne    800420102b <cons_intr+0xe>
  80042010a4:	c9                   	leaveq 
  80042010a5:	c3                   	retq   

00000080042010a6 <cons_getc>:
  80042010a6:	55                   	push   %rbp
  80042010a7:	48 89 e5             	mov    %rsp,%rbp
  80042010aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ae:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  80042010b5:	00 00 00 
  80042010b8:	ff d0                	callq  *%rax
  80042010ba:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  80042010cd:	00 00 00 
  80042010d0:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010d6:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  80042010dd:	00 00 00 
  80042010e0:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010e6:	39 c2                	cmp    %eax,%edx
  80042010e8:	74 69                	je     8004201153 <cons_getc+0xad>
  80042010ea:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  80042010f1:	00 00 00 
  80042010f4:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  80042010fa:	8d 48 01             	lea    0x1(%rax),%ecx
  80042010fd:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  8004201104:	00 00 00 
  8004201107:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  800420110d:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  8004201114:	00 00 00 
  8004201117:	89 c0                	mov    %eax,%eax
  8004201119:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420111d:	0f b6 c0             	movzbl %al,%eax
  8004201120:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201123:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  800420112a:	00 00 00 
  800420112d:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201133:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201138:	75 14                	jne    800420114e <cons_getc+0xa8>
  800420113a:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  8004201141:	00 00 00 
  8004201144:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  800420114b:	00 00 00 
  800420114e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201151:	eb 05                	jmp    8004201158 <cons_getc+0xb2>
  8004201153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201158:	c9                   	leaveq 
  8004201159:	c3                   	retq   

000000800420115a <cons_putc>:
  800420115a:	55                   	push   %rbp
  800420115b:	48 89 e5             	mov    %rsp,%rbp
  800420115e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201162:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201165:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201168:	89 c7                	mov    %eax,%edi
  800420116a:	48 b8 aa 07 20 04 80 	movabs $0x80042007aa,%rax
  8004201171:	00 00 00 
  8004201174:	ff d0                	callq  *%rax
  8004201176:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201179:	89 c7                	mov    %eax,%edi
  800420117b:	48 b8 17 09 20 04 80 	movabs $0x8004200917,%rax
  8004201182:	00 00 00 
  8004201185:	ff d0                	callq  *%rax
  8004201187:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420118a:	89 c7                	mov    %eax,%edi
  800420118c:	48 b8 b6 0a 20 04 80 	movabs $0x8004200ab6,%rax
  8004201193:	00 00 00 
  8004201196:	ff d0                	callq  *%rax
  8004201198:	c9                   	leaveq 
  8004201199:	c3                   	retq   

000000800420119a <cons_init>:
  800420119a:	55                   	push   %rbp
  800420119b:	48 89 e5             	mov    %rsp,%rbp
  800420119e:	48 b8 9c 09 20 04 80 	movabs $0x800420099c,%rax
  80042011a5:	00 00 00 
  80042011a8:	ff d0                	callq  *%rax
  80042011aa:	48 b8 e8 0f 20 04 80 	movabs $0x8004200fe8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 0f 08 20 04 80 	movabs $0x800420080f,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  80042011c9:	00 00 00 
  80042011cc:	0f b6 00             	movzbl (%rax),%eax
  80042011cf:	83 f0 01             	xor    $0x1,%eax
  80042011d2:	84 c0                	test   %al,%al
  80042011d4:	74 1b                	je     80042011f1 <cons_init+0x57>
  80042011d6:	48 bf 42 df 21 04 80 	movabs $0x800421df42,%rdi
  80042011dd:	00 00 00 
  80042011e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011e5:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042011ec:	00 00 00 
  80042011ef:	ff d2                	callq  *%rdx
  80042011f1:	5d                   	pop    %rbp
  80042011f2:	c3                   	retq   

00000080042011f3 <cputchar>:
  80042011f3:	55                   	push   %rbp
  80042011f4:	48 89 e5             	mov    %rsp,%rbp
  80042011f7:	48 83 ec 10          	sub    $0x10,%rsp
  80042011fb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042011fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201201:	89 c7                	mov    %eax,%edi
  8004201203:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  800420120a:	00 00 00 
  800420120d:	ff d0                	callq  *%rax
  800420120f:	c9                   	leaveq 
  8004201210:	c3                   	retq   

0000008004201211 <getchar>:
  8004201211:	55                   	push   %rbp
  8004201212:	48 89 e5             	mov    %rsp,%rbp
  8004201215:	48 83 ec 10          	sub    $0x10,%rsp
  8004201219:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  8004201220:	00 00 00 
  8004201223:	ff d0                	callq  *%rax
  8004201225:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201228:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420122c:	74 eb                	je     8004201219 <getchar+0x8>
  800420122e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201231:	c9                   	leaveq 
  8004201232:	c3                   	retq   

0000008004201233 <iscons>:
  8004201233:	55                   	push   %rbp
  8004201234:	48 89 e5             	mov    %rsp,%rbp
  8004201237:	48 83 ec 04          	sub    $0x4,%rsp
  800420123b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420123e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201243:	c9                   	leaveq 
  8004201244:	c3                   	retq   

0000008004201245 <mon_help>:
  8004201245:	55                   	push   %rbp
  8004201246:	48 89 e5             	mov    %rsp,%rbp
  8004201249:	48 83 ec 30          	sub    $0x30,%rsp
  800420124d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201250:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201254:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201258:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420125f:	eb 6c                	jmp    80042012cd <mon_help+0x88>
  8004201261:	48 b9 80 45 23 04 80 	movabs $0x8004234580,%rcx
  8004201268:	00 00 00 
  800420126b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420126e:	48 63 d0             	movslq %eax,%rdx
  8004201271:	48 89 d0             	mov    %rdx,%rax
  8004201274:	48 01 c0             	add    %rax,%rax
  8004201277:	48 01 d0             	add    %rdx,%rax
  800420127a:	48 c1 e0 03          	shl    $0x3,%rax
  800420127e:	48 01 c8             	add    %rcx,%rax
  8004201281:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201285:	48 be 80 45 23 04 80 	movabs $0x8004234580,%rsi
  800420128c:	00 00 00 
  800420128f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201292:	48 63 d0             	movslq %eax,%rdx
  8004201295:	48 89 d0             	mov    %rdx,%rax
  8004201298:	48 01 c0             	add    %rax,%rax
  800420129b:	48 01 d0             	add    %rdx,%rax
  800420129e:	48 c1 e0 03          	shl    $0x3,%rax
  80042012a2:	48 01 f0             	add    %rsi,%rax
  80042012a5:	48 8b 00             	mov    (%rax),%rax
  80042012a8:	48 89 ca             	mov    %rcx,%rdx
  80042012ab:	48 89 c6             	mov    %rax,%rsi
  80042012ae:	48 bf f6 df 21 04 80 	movabs $0x800421dff6,%rdi
  80042012b5:	00 00 00 
  80042012b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012bd:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  80042012c4:	00 00 00 
  80042012c7:	ff d1                	callq  *%rcx
  80042012c9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d0:	83 f8 03             	cmp    $0x3,%eax
  80042012d3:	76 8c                	jbe    8004201261 <mon_help+0x1c>
  80042012d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012da:	c9                   	leaveq 
  80042012db:	c3                   	retq   

00000080042012dc <mon_kerninfo>:
  80042012dc:	55                   	push   %rbp
  80042012dd:	48 89 e5             	mov    %rsp,%rbp
  80042012e0:	48 83 ec 30          	sub    $0x30,%rsp
  80042012e4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012ef:	48 bf ff df 21 04 80 	movabs $0x800421dfff,%rdi
  80042012f6:	00 00 00 
  80042012f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012fe:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201305:	00 00 00 
  8004201308:	ff d2                	callq  *%rdx
  800420130a:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201311:	00 00 00 
  8004201314:	48 bf 18 e0 21 04 80 	movabs $0x800421e018,%rdi
  800420131b:	00 00 00 
  800420131e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201323:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420132a:	00 00 00 
  800420132d:	ff d2                	callq  *%rdx
  800420132f:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201336:	00 00 00 
  8004201339:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201340:	00 00 00 
  8004201343:	48 bf 40 e0 21 04 80 	movabs $0x800421e040,%rdi
  800420134a:	00 00 00 
  800420134d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201352:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  8004201359:	00 00 00 
  800420135c:	ff d1                	callq  *%rcx
  800420135e:	48 ba 58 de 21 00 00 	movabs $0x21de58,%rdx
  8004201365:	00 00 00 
  8004201368:	48 be 58 de 21 04 80 	movabs $0x800421de58,%rsi
  800420136f:	00 00 00 
  8004201372:	48 bf 68 e0 21 04 80 	movabs $0x800421e068,%rdi
  8004201379:	00 00 00 
  800420137c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201381:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  8004201388:	00 00 00 
  800420138b:	ff d1                	callq  *%rcx
  800420138d:	48 ba 70 bb 4d 00 00 	movabs $0x4dbb70,%rdx
  8004201394:	00 00 00 
  8004201397:	48 be 70 bb 4d 04 80 	movabs $0x80044dbb70,%rsi
  800420139e:	00 00 00 
  80042013a1:	48 bf 90 e0 21 04 80 	movabs $0x800421e090,%rdi
  80042013a8:	00 00 00 
  80042013ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013b0:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  80042013b7:	00 00 00 
  80042013ba:	ff d1                	callq  *%rcx
  80042013bc:	48 ba 10 e0 71 00 00 	movabs $0x71e010,%rdx
  80042013c3:	00 00 00 
  80042013c6:	48 be 10 e0 71 04 80 	movabs $0x800471e010,%rsi
  80042013cd:	00 00 00 
  80042013d0:	48 bf b8 e0 21 04 80 	movabs $0x800421e0b8,%rdi
  80042013d7:	00 00 00 
  80042013da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013df:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  80042013e6:	00 00 00 
  80042013e9:	ff d1                	callq  *%rcx
  80042013eb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013f2:	00 
  80042013f3:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  80042013fa:	00 00 00 
  80042013fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201401:	48 29 c2             	sub    %rax,%rdx
  8004201404:	48 b8 10 e0 71 04 80 	movabs $0x800471e010,%rax
  800420140b:	00 00 00 
  800420140e:	48 83 e8 01          	sub    $0x1,%rax
  8004201412:	48 01 d0             	add    %rdx,%rax
  8004201415:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420141d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201422:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201426:	48 89 d0             	mov    %rdx,%rax
  8004201429:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420142d:	48 29 c2             	sub    %rax,%rdx
  8004201430:	48 89 d0             	mov    %rdx,%rax
  8004201433:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800420143a:	48 85 c0             	test   %rax,%rax
  800420143d:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201441:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201445:	48 89 c6             	mov    %rax,%rsi
  8004201448:	48 bf e0 e0 21 04 80 	movabs $0x800421e0e0,%rdi
  800420144f:	00 00 00 
  8004201452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201457:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420145e:	00 00 00 
  8004201461:	ff d2                	callq  *%rdx
  8004201463:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201468:	c9                   	leaveq 
  8004201469:	c3                   	retq   

000000800420146a <mon_backtrace>:
  800420146a:	55                   	push   %rbp
  800420146b:	48 89 e5             	mov    %rsp,%rbp
  800420146e:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201475:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  800420147b:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  8004201482:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201489:	48 89 e8             	mov    %rbp,%rax
  800420148c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  8004201490:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201494:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  8004201498:	48 89 e0             	mov    %rsp,%rax
  800420149b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  800420149f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014a7:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ae:	00 
  80042014af:	74 21                	je     80042014d2 <mon_backtrace+0x68>
  80042014b1:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014b8:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014c0:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c7:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014d9 <mon_backtrace+0x6f>
  80042014d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014dd:	48 bf 0a e1 21 04 80 	movabs $0x800421e10a,%rdi
  80042014e4:	00 00 00 
  80042014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ec:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042014f3:	00 00 00 
  80042014f6:	ff d2                	callq  *%rdx
  80042014f8:	e9 17 03 00 00       	jmpq   8004201814 <mon_backtrace+0x3aa>
  80042014fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201505:	48 89 c6             	mov    %rax,%rsi
  8004201508:	48 bf 1c e1 21 04 80 	movabs $0x800421e11c,%rdi
  800420150f:	00 00 00 
  8004201512:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201517:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800420151e:	00 00 00 
  8004201521:	ff d1                	callq  *%rcx
  8004201523:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  800420152a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420152e:	48 89 d6             	mov    %rdx,%rsi
  8004201531:	48 89 c7             	mov    %rax,%rdi
  8004201534:	48 b8 75 fe 20 04 80 	movabs $0x800420fe75,%rax
  800420153b:	00 00 00 
  800420153e:	ff d0                	callq  *%rax
  8004201540:	85 c0                	test   %eax,%eax
  8004201542:	0f 88 9a 02 00 00    	js     80042017e2 <mon_backtrace+0x378>
  8004201548:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420154f:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201555:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201559:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  8004201560:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201564:	48 89 d7             	mov    %rdx,%rdi
  8004201567:	48 29 c7             	sub    %rax,%rdi
  800420156a:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  8004201571:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201577:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  800420157d:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201584:	49 89 f9             	mov    %rdi,%r9
  8004201587:	49 89 f0             	mov    %rsi,%r8
  800420158a:	48 89 c6             	mov    %rax,%rsi
  800420158d:	48 bf 38 e1 21 04 80 	movabs $0x800421e138,%rdi
  8004201594:	00 00 00 
  8004201597:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159c:	49 ba 93 9c 20 04 80 	movabs $0x8004209c93,%r10
  80042015a3:	00 00 00 
  80042015a6:	41 ff d2             	callq  *%r10
  80042015a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ad:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015b1:	66 83 f8 06          	cmp    $0x6,%ax
  80042015b5:	75 15                	jne    80042015cc <mon_backtrace+0x162>
  80042015b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015bb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015c3:	48 01 d0             	add    %rdx,%rax
  80042015c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ca:	eb 28                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015d0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015d4:	66 83 f8 07          	cmp    $0x7,%ax
  80042015d8:	75 15                	jne    80042015ef <mon_backtrace+0x185>
  80042015da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015de:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015e6:	48 01 d0             	add    %rdx,%rax
  80042015e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ed:	eb 05                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015ef:	e9 ee 01 00 00       	jmpq   80042017e2 <mon_backtrace+0x378>
  80042015f4:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  80042015fa:	89 c6                	mov    %eax,%esi
  80042015fc:	48 bf 53 e1 21 04 80 	movabs $0x800421e153,%rdi
  8004201603:	00 00 00 
  8004201606:	b8 00 00 00 00       	mov    $0x0,%eax
  800420160b:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201612:	00 00 00 
  8004201615:	ff d2                	callq  *%rdx
  8004201617:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420161e:	e9 f2 00 00 00       	jmpq   8004201715 <mon_backtrace+0x2ab>
  8004201623:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201626:	48 98                	cltq   
  8004201628:	48 83 c0 0a          	add    $0xa,%rax
  800420162c:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  8004201633:	ff 
  8004201634:	48 85 c0             	test   %rax,%rax
  8004201637:	75 35                	jne    800420166e <mon_backtrace+0x204>
  8004201639:	48 b9 5e e1 21 04 80 	movabs $0x800421e15e,%rcx
  8004201640:	00 00 00 
  8004201643:	48 ba 74 e1 21 04 80 	movabs $0x800421e174,%rdx
  800420164a:	00 00 00 
  800420164d:	be 78 00 00 00       	mov    $0x78,%esi
  8004201652:	48 bf 89 e1 21 04 80 	movabs $0x800421e189,%rdi
  8004201659:	00 00 00 
  800420165c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201661:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201668:	00 00 00 
  800420166b:	41 ff d0             	callq  *%r8
  800420166e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201671:	48 98                	cltq   
  8004201673:	48 83 c0 0a          	add    $0xa,%rax
  8004201677:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420167e:	ff 
  800420167f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201683:	48 01 d0             	add    %rdx,%rax
  8004201686:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420168a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420168d:	48 98                	cltq   
  800420168f:	48 83 c0 08          	add    $0x8,%rax
  8004201693:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  800420169a:	83 f8 02             	cmp    $0x2,%eax
  800420169d:	74 31                	je     80042016d0 <mon_backtrace+0x266>
  800420169f:	83 f8 02             	cmp    $0x2,%eax
  80042016a2:	7f 07                	jg     80042016ab <mon_backtrace+0x241>
  80042016a4:	83 f8 01             	cmp    $0x1,%eax
  80042016a7:	74 37                	je     80042016e0 <mon_backtrace+0x276>
  80042016a9:	eb 44                	jmp    80042016ef <mon_backtrace+0x285>
  80042016ab:	83 f8 04             	cmp    $0x4,%eax
  80042016ae:	74 12                	je     80042016c2 <mon_backtrace+0x258>
  80042016b0:	83 f8 08             	cmp    $0x8,%eax
  80042016b3:	75 3a                	jne    80042016ef <mon_backtrace+0x285>
  80042016b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016b9:	48 8b 00             	mov    (%rax),%rax
  80042016bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016c0:	eb 2d                	jmp    80042016ef <mon_backtrace+0x285>
  80042016c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c6:	8b 00                	mov    (%rax),%eax
  80042016c8:	89 c0                	mov    %eax,%eax
  80042016ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ce:	eb 1f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d4:	0f b7 00             	movzwl (%rax),%eax
  80042016d7:	0f b7 c0             	movzwl %ax,%eax
  80042016da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016de:	eb 0f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e4:	0f b6 00             	movzbl (%rax),%eax
  80042016e7:	0f b6 c0             	movzbl %al,%eax
  80042016ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ee:	90                   	nop
  80042016ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016f3:	48 89 c6             	mov    %rax,%rsi
  80042016f6:	48 bf 9b e1 21 04 80 	movabs $0x800421e19b,%rdi
  80042016fd:	00 00 00 
  8004201700:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201705:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420170c:	00 00 00 
  800420170f:	ff d2                	callq  *%rdx
  8004201711:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201715:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  800420171b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420171e:	0f 8f ff fe ff ff    	jg     8004201623 <mon_backtrace+0x1b9>
  8004201724:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  800420172b:	0f b7 c0             	movzwl %ax,%eax
  800420172e:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201733:	74 48                	je     800420177d <mon_backtrace+0x313>
  8004201735:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  800420173a:	75 17                	jne    8004201753 <mon_backtrace+0x2e9>
  800420173c:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  8004201743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201747:	48 01 d0             	add    %rdx,%rax
  800420174a:	48 8b 00             	mov    (%rax),%rax
  800420174d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201751:	eb 2b                	jmp    800420177e <mon_backtrace+0x314>
  8004201753:	48 ba a2 e1 21 04 80 	movabs $0x800421e1a2,%rdx
  800420175a:	00 00 00 
  800420175d:	be 92 00 00 00       	mov    $0x92,%esi
  8004201762:	48 bf 89 e1 21 04 80 	movabs $0x800421e189,%rdi
  8004201769:	00 00 00 
  800420176c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201771:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201778:	00 00 00 
  800420177b:	ff d1                	callq  *%rcx
  800420177d:	90                   	nop
  800420177e:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201785:	0f b7 c0             	movzwl %ax,%eax
  8004201788:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420178d:	74 48                	je     80042017d7 <mon_backtrace+0x36d>
  800420178f:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201794:	75 17                	jne    80042017ad <mon_backtrace+0x343>
  8004201796:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  800420179d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017a1:	48 01 d0             	add    %rdx,%rax
  80042017a4:	48 8b 00             	mov    (%rax),%rax
  80042017a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ab:	eb 2b                	jmp    80042017d8 <mon_backtrace+0x36e>
  80042017ad:	48 ba a2 e1 21 04 80 	movabs $0x800421e1a2,%rdx
  80042017b4:	00 00 00 
  80042017b7:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017bc:	48 bf 89 e1 21 04 80 	movabs $0x800421e189,%rdi
  80042017c3:	00 00 00 
  80042017c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017cb:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042017d2:	00 00 00 
  80042017d5:	ff d1                	callq  *%rcx
  80042017d7:	90                   	nop
  80042017d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017e0:	eb 17                	jmp    80042017f9 <mon_backtrace+0x38f>
  80042017e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 00             	mov    (%rax),%rax
  80042017f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042017f9:	48 bf b3 e1 21 04 80 	movabs $0x800421e1b3,%rdi
  8004201800:	00 00 00 
  8004201803:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201808:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420180f:	00 00 00 
  8004201812:	ff d2                	callq  *%rdx
  8004201814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201819:	0f 85 de fc ff ff    	jne    80042014fd <mon_backtrace+0x93>
  800420181f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201824:	c9                   	leaveq 
  8004201825:	c3                   	retq   

0000008004201826 <mon_exit>:
  8004201826:	55                   	push   %rbp
  8004201827:	48 89 e5             	mov    %rsp,%rbp
  800420182a:	48 83 ec 18          	sub    $0x18,%rsp
  800420182e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201831:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201835:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201839:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420183e:	c9                   	leaveq 
  800420183f:	c3                   	retq   

0000008004201840 <runcmd>:
  8004201840:	55                   	push   %rbp
  8004201841:	48 89 e5             	mov    %rsp,%rbp
  8004201844:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420184b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004201852:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201859:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201860:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201863:	48 98                	cltq   
  8004201865:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  800420186c:	ff 00 00 00 00 
  8004201871:	eb 15                	jmp    8004201888 <runcmd+0x48>
  8004201873:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420187a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420187e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201885:	c6 00 00             	movb   $0x0,(%rax)
  8004201888:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420188f:	0f b6 00             	movzbl (%rax),%eax
  8004201892:	84 c0                	test   %al,%al
  8004201894:	74 2a                	je     80042018c0 <runcmd+0x80>
  8004201896:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189d:	0f b6 00             	movzbl (%rax),%eax
  80042018a0:	0f be c0             	movsbl %al,%eax
  80042018a3:	89 c6                	mov    %eax,%esi
  80042018a5:	48 bf b5 e1 21 04 80 	movabs $0x800421e1b5,%rdi
  80042018ac:	00 00 00 
  80042018af:	48 b8 96 11 21 04 80 	movabs $0x8004211196,%rax
  80042018b6:	00 00 00 
  80042018b9:	ff d0                	callq  *%rax
  80042018bb:	48 85 c0             	test   %rax,%rax
  80042018be:	75 b3                	jne    8004201873 <runcmd+0x33>
  80042018c0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018c7:	0f b6 00             	movzbl (%rax),%eax
  80042018ca:	84 c0                	test   %al,%al
  80042018cc:	75 21                	jne    80042018ef <runcmd+0xaf>
  80042018ce:	90                   	nop
  80042018cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018d2:	48 98                	cltq   
  80042018d4:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018db:	ff 00 00 00 00 
  80042018e0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018e4:	0f 85 a1 00 00 00    	jne    800420198b <runcmd+0x14b>
  80042018ea:	e9 92 00 00 00       	jmpq   8004201981 <runcmd+0x141>
  80042018ef:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018f3:	75 2a                	jne    800420191f <runcmd+0xdf>
  80042018f5:	be 10 00 00 00       	mov    $0x10,%esi
  80042018fa:	48 bf ba e1 21 04 80 	movabs $0x800421e1ba,%rdi
  8004201901:	00 00 00 
  8004201904:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201909:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201910:	00 00 00 
  8004201913:	ff d2                	callq  *%rdx
  8004201915:	b8 00 00 00 00       	mov    $0x0,%eax
  800420191a:	e9 30 01 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420191f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201922:	8d 50 01             	lea    0x1(%rax),%edx
  8004201925:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201928:	48 98                	cltq   
  800420192a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201931:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201938:	ff 
  8004201939:	eb 08                	jmp    8004201943 <runcmd+0x103>
  800420193b:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201942:	01 
  8004201943:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420194a:	0f b6 00             	movzbl (%rax),%eax
  800420194d:	84 c0                	test   %al,%al
  800420194f:	74 2a                	je     800420197b <runcmd+0x13b>
  8004201951:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201958:	0f b6 00             	movzbl (%rax),%eax
  800420195b:	0f be c0             	movsbl %al,%eax
  800420195e:	89 c6                	mov    %eax,%esi
  8004201960:	48 bf b5 e1 21 04 80 	movabs $0x800421e1b5,%rdi
  8004201967:	00 00 00 
  800420196a:	48 b8 96 11 21 04 80 	movabs $0x8004211196,%rax
  8004201971:	00 00 00 
  8004201974:	ff d0                	callq  *%rax
  8004201976:	48 85 c0             	test   %rax,%rax
  8004201979:	74 c0                	je     800420193b <runcmd+0xfb>
  800420197b:	90                   	nop
  800420197c:	e9 07 ff ff ff       	jmpq   8004201888 <runcmd+0x48>
  8004201981:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201986:	e9 c4 00 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420198b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201992:	e9 82 00 00 00       	jmpq   8004201a19 <runcmd+0x1d9>
  8004201997:	48 b9 80 45 23 04 80 	movabs $0x8004234580,%rcx
  800420199e:	00 00 00 
  80042019a1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019a4:	48 63 d0             	movslq %eax,%rdx
  80042019a7:	48 89 d0             	mov    %rdx,%rax
  80042019aa:	48 01 c0             	add    %rax,%rax
  80042019ad:	48 01 d0             	add    %rdx,%rax
  80042019b0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019b4:	48 01 c8             	add    %rcx,%rax
  80042019b7:	48 8b 10             	mov    (%rax),%rdx
  80042019ba:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019c1:	48 89 d6             	mov    %rdx,%rsi
  80042019c4:	48 89 c7             	mov    %rax,%rdi
  80042019c7:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  80042019ce:	00 00 00 
  80042019d1:	ff d0                	callq  *%rax
  80042019d3:	85 c0                	test   %eax,%eax
  80042019d5:	75 3e                	jne    8004201a15 <runcmd+0x1d5>
  80042019d7:	48 b9 80 45 23 04 80 	movabs $0x8004234580,%rcx
  80042019de:	00 00 00 
  80042019e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019e4:	48 63 d0             	movslq %eax,%rdx
  80042019e7:	48 89 d0             	mov    %rdx,%rax
  80042019ea:	48 01 c0             	add    %rax,%rax
  80042019ed:	48 01 d0             	add    %rdx,%rax
  80042019f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019f4:	48 01 c8             	add    %rcx,%rax
  80042019f7:	48 83 c0 10          	add    $0x10,%rax
  80042019fb:	48 8b 00             	mov    (%rax),%rax
  80042019fe:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a05:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a0c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a0f:	89 cf                	mov    %ecx,%edi
  8004201a11:	ff d0                	callq  *%rax
  8004201a13:	eb 3a                	jmp    8004201a4f <runcmd+0x20f>
  8004201a15:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a1c:	83 f8 03             	cmp    $0x3,%eax
  8004201a1f:	0f 86 72 ff ff ff    	jbe    8004201997 <runcmd+0x157>
  8004201a25:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a2c:	48 89 c6             	mov    %rax,%rsi
  8004201a2f:	48 bf d7 e1 21 04 80 	movabs $0x800421e1d7,%rdi
  8004201a36:	00 00 00 
  8004201a39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a3e:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201a45:	00 00 00 
  8004201a48:	ff d2                	callq  *%rdx
  8004201a4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4f:	c9                   	leaveq 
  8004201a50:	c3                   	retq   

0000008004201a51 <monitor>:
  8004201a51:	55                   	push   %rbp
  8004201a52:	48 89 e5             	mov    %rsp,%rbp
  8004201a55:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a5d:	48 bf f0 e1 21 04 80 	movabs $0x800421e1f0,%rdi
  8004201a64:	00 00 00 
  8004201a67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a6c:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201a73:	00 00 00 
  8004201a76:	ff d2                	callq  *%rdx
  8004201a78:	48 bf 18 e2 21 04 80 	movabs $0x800421e218,%rdi
  8004201a7f:	00 00 00 
  8004201a82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a87:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201a8e:	00 00 00 
  8004201a91:	ff d2                	callq  *%rdx
  8004201a93:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201a98:	74 13                	je     8004201aad <monitor+0x5c>
  8004201a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201a9e:	48 89 c7             	mov    %rax,%rdi
  8004201aa1:	48 b8 8a c9 20 04 80 	movabs $0x800420c98a,%rax
  8004201aa8:	00 00 00 
  8004201aab:	ff d0                	callq  *%rax
  8004201aad:	48 bf 3d e2 21 04 80 	movabs $0x800421e23d,%rdi
  8004201ab4:	00 00 00 
  8004201ab7:	48 b8 af 0d 21 04 80 	movabs $0x8004210daf,%rax
  8004201abe:	00 00 00 
  8004201ac1:	ff d0                	callq  *%rax
  8004201ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ac7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201acc:	74 20                	je     8004201aee <monitor+0x9d>
  8004201ace:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ad6:	48 89 d6             	mov    %rdx,%rsi
  8004201ad9:	48 89 c7             	mov    %rax,%rdi
  8004201adc:	48 b8 40 18 20 04 80 	movabs $0x8004201840,%rax
  8004201ae3:	00 00 00 
  8004201ae6:	ff d0                	callq  *%rax
  8004201ae8:	85 c0                	test   %eax,%eax
  8004201aea:	79 02                	jns    8004201aee <monitor+0x9d>
  8004201aec:	eb 02                	jmp    8004201af0 <monitor+0x9f>
  8004201aee:	eb bd                	jmp    8004201aad <monitor+0x5c>
  8004201af0:	c9                   	leaveq 
  8004201af1:	c3                   	retq   

0000008004201af2 <page2ppn>:
  8004201af2:	55                   	push   %rbp
  8004201af3:	48 89 e5             	mov    %rsp,%rbp
  8004201af6:	48 83 ec 08          	sub    $0x8,%rsp
  8004201afa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201afe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b02:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004201b09:	00 00 00 
  8004201b0c:	48 8b 00             	mov    (%rax),%rax
  8004201b0f:	48 29 c2             	sub    %rax,%rdx
  8004201b12:	48 89 d0             	mov    %rdx,%rax
  8004201b15:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b19:	c9                   	leaveq 
  8004201b1a:	c3                   	retq   

0000008004201b1b <page2pa>:
  8004201b1b:	55                   	push   %rbp
  8004201b1c:	48 89 e5             	mov    %rsp,%rbp
  8004201b1f:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b2b:	48 89 c7             	mov    %rax,%rdi
  8004201b2e:	48 b8 f2 1a 20 04 80 	movabs $0x8004201af2,%rax
  8004201b35:	00 00 00 
  8004201b38:	ff d0                	callq  *%rax
  8004201b3a:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b3e:	c9                   	leaveq 
  8004201b3f:	c3                   	retq   

0000008004201b40 <pa2page>:
  8004201b40:	55                   	push   %rbp
  8004201b41:	48 89 e5             	mov    %rsp,%rbp
  8004201b44:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b54:	48 89 c2             	mov    %rax,%rdx
  8004201b57:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004201b5e:	00 00 00 
  8004201b61:	48 8b 00             	mov    (%rax),%rax
  8004201b64:	48 39 c2             	cmp    %rax,%rdx
  8004201b67:	72 2a                	jb     8004201b93 <pa2page+0x53>
  8004201b69:	48 ba 48 e2 21 04 80 	movabs $0x800421e248,%rdx
  8004201b70:	00 00 00 
  8004201b73:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b78:	48 bf 67 e2 21 04 80 	movabs $0x800421e267,%rdi
  8004201b7f:	00 00 00 
  8004201b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b87:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201b8e:	00 00 00 
  8004201b91:	ff d1                	callq  *%rcx
  8004201b93:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004201b9a:	00 00 00 
  8004201b9d:	48 8b 00             	mov    (%rax),%rax
  8004201ba0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201ba4:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201ba8:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bac:	48 01 d0             	add    %rdx,%rax
  8004201baf:	c9                   	leaveq 
  8004201bb0:	c3                   	retq   

0000008004201bb1 <page2kva>:
  8004201bb1:	55                   	push   %rbp
  8004201bb2:	48 89 e5             	mov    %rsp,%rbp
  8004201bb5:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bc1:	48 89 c7             	mov    %rax,%rdi
  8004201bc4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004201bcb:	00 00 00 
  8004201bce:	ff d0                	callq  *%rax
  8004201bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bd8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201bdc:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201bdf:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201be2:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004201be9:	00 00 00 
  8004201bec:	48 8b 00             	mov    (%rax),%rax
  8004201bef:	48 39 c2             	cmp    %rax,%rdx
  8004201bf2:	72 32                	jb     8004201c26 <page2kva+0x75>
  8004201bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bf8:	48 89 c1             	mov    %rax,%rcx
  8004201bfb:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004201c02:	00 00 00 
  8004201c05:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c0a:	48 bf 67 e2 21 04 80 	movabs $0x800421e267,%rdi
  8004201c11:	00 00 00 
  8004201c14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c19:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201c20:	00 00 00 
  8004201c23:	41 ff d0             	callq  *%r8
  8004201c26:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c2d:	00 00 00 
  8004201c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c34:	48 01 d0             	add    %rdx,%rax
  8004201c37:	c9                   	leaveq 
  8004201c38:	c3                   	retq   

0000008004201c39 <restrictive_type>:
  8004201c39:	55                   	push   %rbp
  8004201c3a:	48 89 e5             	mov    %rsp,%rbp
  8004201c3d:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c44:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c47:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c4b:	74 06                	je     8004201c53 <restrictive_type+0x1a>
  8004201c4d:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c51:	75 07                	jne    8004201c5a <restrictive_type+0x21>
  8004201c53:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c58:	eb 3e                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c5a:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c5e:	74 06                	je     8004201c66 <restrictive_type+0x2d>
  8004201c60:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c64:	75 07                	jne    8004201c6d <restrictive_type+0x34>
  8004201c66:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c6b:	eb 2b                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c6d:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c71:	74 06                	je     8004201c79 <restrictive_type+0x40>
  8004201c73:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c77:	75 07                	jne    8004201c80 <restrictive_type+0x47>
  8004201c79:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c7e:	eb 18                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c80:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c84:	74 06                	je     8004201c8c <restrictive_type+0x53>
  8004201c86:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c8a:	75 07                	jne    8004201c93 <restrictive_type+0x5a>
  8004201c8c:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c91:	eb 05                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c93:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201c98:	c9                   	leaveq 
  8004201c99:	c3                   	retq   

0000008004201c9a <nvram_read>:
  8004201c9a:	55                   	push   %rbp
  8004201c9b:	48 89 e5             	mov    %rsp,%rbp
  8004201c9e:	53                   	push   %rbx
  8004201c9f:	48 83 ec 18          	sub    $0x18,%rsp
  8004201ca3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201ca6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ca9:	89 c7                	mov    %eax,%edi
  8004201cab:	48 b8 17 99 20 04 80 	movabs $0x8004209917,%rax
  8004201cb2:	00 00 00 
  8004201cb5:	ff d0                	callq  *%rax
  8004201cb7:	89 c3                	mov    %eax,%ebx
  8004201cb9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cbc:	83 c0 01             	add    $0x1,%eax
  8004201cbf:	89 c7                	mov    %eax,%edi
  8004201cc1:	48 b8 17 99 20 04 80 	movabs $0x8004209917,%rax
  8004201cc8:	00 00 00 
  8004201ccb:	ff d0                	callq  *%rax
  8004201ccd:	c1 e0 08             	shl    $0x8,%eax
  8004201cd0:	09 d8                	or     %ebx,%eax
  8004201cd2:	48 83 c4 18          	add    $0x18,%rsp
  8004201cd6:	5b                   	pop    %rbx
  8004201cd7:	5d                   	pop    %rbp
  8004201cd8:	c3                   	retq   

0000008004201cd9 <multiboot_read>:
  8004201cd9:	55                   	push   %rbp
  8004201cda:	48 89 e5             	mov    %rsp,%rbp
  8004201cdd:	41 54                	push   %r12
  8004201cdf:	53                   	push   %rbx
  8004201ce0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201ce7:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cee:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201cf5:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201cfc:	48 89 e0             	mov    %rsp,%rax
  8004201cff:	49 89 c4             	mov    %rax,%r12
  8004201d02:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d09:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d0c:	89 c0                	mov    %eax,%eax
  8004201d0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d12:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d19:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d1c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d21:	f7 e2                	mul    %edx
  8004201d23:	89 d0                	mov    %edx,%eax
  8004201d25:	c1 e8 04             	shr    $0x4,%eax
  8004201d28:	89 c0                	mov    %eax,%eax
  8004201d2a:	48 89 c2             	mov    %rax,%rdx
  8004201d2d:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d31:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d35:	49 89 c0             	mov    %rax,%r8
  8004201d38:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d3e:	48 89 c1             	mov    %rax,%rcx
  8004201d41:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d46:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d4a:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d4e:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d53:	48 83 e8 01          	sub    $0x1,%rax
  8004201d57:	48 01 d0             	add    %rdx,%rax
  8004201d5a:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d5f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d64:	48 f7 f3             	div    %rbx
  8004201d67:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d6b:	48 29 c4             	sub    %rax,%rsp
  8004201d6e:	48 89 e0             	mov    %rsp,%rax
  8004201d71:	48 83 c0 07          	add    $0x7,%rax
  8004201d75:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d79:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d7d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d81:	48 bf 9b e2 21 04 80 	movabs $0x800421e29b,%rdi
  8004201d88:	00 00 00 
  8004201d8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d90:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201d97:	00 00 00 
  8004201d9a:	ff d2                	callq  *%rdx
  8004201d9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201da3:	e9 6c 01 00 00       	jmpq   8004201f14 <multiboot_read+0x23b>
  8004201da8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201dab:	48 63 d0             	movslq %eax,%rdx
  8004201dae:	48 89 d0             	mov    %rdx,%rax
  8004201db1:	48 01 c0             	add    %rax,%rax
  8004201db4:	48 01 d0             	add    %rdx,%rax
  8004201db7:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dbb:	48 89 c2             	mov    %rax,%rdx
  8004201dbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dc2:	48 01 d0             	add    %rdx,%rax
  8004201dc5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dcd:	8b 40 08             	mov    0x8(%rax),%eax
  8004201dd0:	89 c0                	mov    %eax,%eax
  8004201dd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201dd6:	48 89 c2             	mov    %rax,%rdx
  8004201dd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ddd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201de0:	89 c0                	mov    %eax,%eax
  8004201de2:	48 01 d0             	add    %rdx,%rax
  8004201de5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201de9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ded:	8b 40 10             	mov    0x10(%rax),%eax
  8004201df0:	89 c0                	mov    %eax,%eax
  8004201df2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201df6:	48 89 c2             	mov    %rax,%rdx
  8004201df9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dfd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e00:	89 c0                	mov    %eax,%eax
  8004201e02:	48 01 d0             	add    %rdx,%rax
  8004201e05:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e0d:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e14:	8b 00                	mov    (%rax),%eax
  8004201e16:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e1a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e1e:	41 89 f0             	mov    %esi,%r8d
  8004201e21:	89 c6                	mov    %eax,%esi
  8004201e23:	48 bf b0 e2 21 04 80 	movabs $0x800421e2b0,%rdi
  8004201e2a:	00 00 00 
  8004201e2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e32:	49 b9 93 9c 20 04 80 	movabs $0x8004209c93,%r9
  8004201e39:	00 00 00 
  8004201e3c:	41 ff d1             	callq  *%r9
  8004201e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e43:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e46:	83 f8 05             	cmp    $0x5,%eax
  8004201e49:	77 0b                	ja     8004201e56 <multiboot_read+0x17d>
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	85 c0                	test   %eax,%eax
  8004201e54:	75 0b                	jne    8004201e61 <multiboot_read+0x188>
  8004201e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5a:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e61:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e68:	e9 85 00 00 00       	jmpq   8004201ef2 <multiboot_read+0x219>
  8004201e6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e71:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e74:	48 63 d2             	movslq %edx,%rdx
  8004201e77:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e7b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e83:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e86:	89 c0                	mov    %eax,%eax
  8004201e88:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e8c:	48 89 c2             	mov    %rax,%rdx
  8004201e8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e93:	8b 40 04             	mov    0x4(%rax),%eax
  8004201e96:	89 c0                	mov    %eax,%eax
  8004201e98:	48 01 d0             	add    %rdx,%rax
  8004201e9b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201e9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201ea3:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201ea7:	76 45                	jbe    8004201eee <multiboot_read+0x215>
  8004201ea9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eac:	83 c0 01             	add    $0x1,%eax
  8004201eaf:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201eb2:	eb 30                	jmp    8004201ee4 <multiboot_read+0x20b>
  8004201eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201eb8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ebb:	48 63 d2             	movslq %edx,%rdx
  8004201ebe:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ec2:	48 01 c2             	add    %rax,%rdx
  8004201ec5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec9:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ecc:	48 63 c9             	movslq %ecx,%rcx
  8004201ecf:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201ed3:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ed7:	48 01 c8             	add    %rcx,%rax
  8004201eda:	48 8b 00             	mov    (%rax),%rax
  8004201edd:	48 89 02             	mov    %rax,(%rdx)
  8004201ee0:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ee4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ee7:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201eea:	75 c8                	jne    8004201eb4 <multiboot_read+0x1db>
  8004201eec:	eb 10                	jmp    8004201efe <multiboot_read+0x225>
  8004201eee:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201ef2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201ef5:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201ef8:	0f 8c 6f ff ff ff    	jl     8004201e6d <multiboot_read+0x194>
  8004201efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f02:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f05:	48 63 d2             	movslq %edx,%rdx
  8004201f08:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f0c:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f10:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f14:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f17:	48 63 c8             	movslq %eax,%rcx
  8004201f1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f21:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f24:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f29:	f7 e2                	mul    %edx
  8004201f2b:	89 d0                	mov    %edx,%eax
  8004201f2d:	c1 e8 04             	shr    $0x4,%eax
  8004201f30:	89 c0                	mov    %eax,%eax
  8004201f32:	48 39 c1             	cmp    %rax,%rcx
  8004201f35:	0f 82 6d fe ff ff    	jb     8004201da8 <multiboot_read+0xcf>
  8004201f3b:	48 bf e7 e2 21 04 80 	movabs $0x800421e2e7,%rdi
  8004201f42:	00 00 00 
  8004201f45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f4a:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004201f51:	00 00 00 
  8004201f54:	ff d2                	callq  *%rdx
  8004201f56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f5d:	e9 93 01 00 00       	jmpq   80042020f5 <multiboot_read+0x41c>
  8004201f62:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f65:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f6c:	48 63 d2             	movslq %edx,%rdx
  8004201f6f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f73:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f7b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f7e:	48 63 d2             	movslq %edx,%rdx
  8004201f81:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f85:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f8d:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f90:	89 c0                	mov    %eax,%eax
  8004201f92:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f96:	48 89 c2             	mov    %rax,%rdx
  8004201f99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f9d:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fa0:	89 c0                	mov    %eax,%eax
  8004201fa2:	48 01 d0             	add    %rdx,%rax
  8004201fa5:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fa9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fad:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fb0:	89 c0                	mov    %eax,%eax
  8004201fb2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fb6:	48 89 c2             	mov    %rax,%rdx
  8004201fb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fbd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fc0:	89 c0                	mov    %eax,%eax
  8004201fc2:	48 01 d0             	add    %rdx,%rax
  8004201fc5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fc9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fcd:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fd0:	89 c0                	mov    %eax,%eax
  8004201fd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd6:	48 89 c2             	mov    %rax,%rdx
  8004201fd9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fdd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fe0:	89 c0                	mov    %eax,%eax
  8004201fe2:	48 01 d0             	add    %rdx,%rax
  8004201fe5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201fec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ff0:	8b 40 10             	mov    0x10(%rax),%eax
  8004201ff3:	89 c0                	mov    %eax,%eax
  8004201ff5:	48 c1 e0 20          	shl    $0x20,%rax
  8004201ff9:	48 89 c2             	mov    %rax,%rdx
  8004201ffc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202000:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202003:	89 c0                	mov    %eax,%eax
  8004202005:	48 01 d0             	add    %rdx,%rax
  8004202008:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420200f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202016:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420201a:	48 01 d0             	add    %rdx,%rax
  800420201d:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202021:	75 7c                	jne    800420209f <multiboot_read+0x3c6>
  8004202023:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202027:	8b 50 14             	mov    0x14(%rax),%edx
  800420202a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420202e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202031:	39 c2                	cmp    %eax,%edx
  8004202033:	75 6a                	jne    800420209f <multiboot_read+0x3c6>
  8004202035:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420203c:	89 c2                	mov    %eax,%edx
  800420203e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202045:	01 c2                	add    %eax,%edx
  8004202047:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420204b:	89 50 0c             	mov    %edx,0xc(%rax)
  800420204e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202055:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420205c:	48 01 d0             	add    %rdx,%rax
  800420205f:	48 c1 e8 20          	shr    $0x20,%rax
  8004202063:	89 c2                	mov    %eax,%edx
  8004202065:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202069:	89 50 10             	mov    %edx,0x10(%rax)
  800420206c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202070:	8b 50 04             	mov    0x4(%rax),%edx
  8004202073:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202077:	89 50 04             	mov    %edx,0x4(%rax)
  800420207a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207e:	8b 50 08             	mov    0x8(%rax),%edx
  8004202081:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202085:	89 50 08             	mov    %edx,0x8(%rax)
  8004202088:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420208b:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420208e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202092:	48 63 d2             	movslq %edx,%rdx
  8004202095:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  800420209c:	00 
  800420209d:	eb 52                	jmp    80042020f1 <multiboot_read+0x418>
  800420209f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020a6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020aa:	48 01 d0             	add    %rdx,%rax
  80042020ad:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020b1:	76 3e                	jbe    80042020f1 <multiboot_read+0x418>
  80042020b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020b7:	8b 50 14             	mov    0x14(%rax),%edx
  80042020ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020be:	8b 40 14             	mov    0x14(%rax),%eax
  80042020c1:	89 d6                	mov    %edx,%esi
  80042020c3:	89 c7                	mov    %eax,%edi
  80042020c5:	48 b8 39 1c 20 04 80 	movabs $0x8004201c39,%rax
  80042020cc:	00 00 00 
  80042020cf:	ff d0                	callq  *%rax
  80042020d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020db:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020e1:	89 50 14             	mov    %edx,0x14(%rax)
  80042020e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ee:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042020f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020f8:	48 63 c8             	movslq %eax,%rcx
  80042020fb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202102:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202105:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  800420210a:	f7 e2                	mul    %edx
  800420210c:	89 d0                	mov    %edx,%eax
  800420210e:	c1 e8 04             	shr    $0x4,%eax
  8004202111:	89 c0                	mov    %eax,%eax
  8004202113:	48 39 c1             	cmp    %rax,%rcx
  8004202116:	0f 82 46 fe ff ff    	jb     8004201f62 <multiboot_read+0x289>
  800420211c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004202123:	e9 dc 00 00 00       	jmpq   8004202204 <multiboot_read+0x52b>
  8004202128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420212c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420212f:	48 63 d2             	movslq %edx,%rdx
  8004202132:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202136:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  800420213d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202144:	00 
  8004202145:	0f 84 b5 00 00 00    	je     8004202200 <multiboot_read+0x527>
  800420214b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202152:	8b 40 14             	mov    0x14(%rax),%eax
  8004202155:	83 f8 01             	cmp    $0x1,%eax
  8004202158:	74 13                	je     800420216d <multiboot_read+0x494>
  800420215a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202161:	8b 40 14             	mov    0x14(%rax),%eax
  8004202164:	83 f8 03             	cmp    $0x3,%eax
  8004202167:	0f 85 93 00 00 00    	jne    8004202200 <multiboot_read+0x527>
  800420216d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202174:	8b 40 04             	mov    0x4(%rax),%eax
  8004202177:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  800420217c:	77 49                	ja     80042021c7 <multiboot_read+0x4ee>
  800420217e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202185:	8b 40 08             	mov    0x8(%rax),%eax
  8004202188:	85 c0                	test   %eax,%eax
  800420218a:	75 3b                	jne    80042021c7 <multiboot_read+0x4ee>
  800420218c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004202193:	48 8b 10             	mov    (%rax),%rdx
  8004202196:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420219d:	8b 40 10             	mov    0x10(%rax),%eax
  80042021a0:	89 c0                	mov    %eax,%eax
  80042021a2:	48 c1 e0 20          	shl    $0x20,%rax
  80042021a6:	48 89 c1             	mov    %rax,%rcx
  80042021a9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021b0:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021b3:	89 c0                	mov    %eax,%eax
  80042021b5:	48 01 c8             	add    %rcx,%rax
  80042021b8:	48 01 c2             	add    %rax,%rdx
  80042021bb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021c2:	48 89 10             	mov    %rdx,(%rax)
  80042021c5:	eb 39                	jmp    8004202200 <multiboot_read+0x527>
  80042021c7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021ce:	48 8b 10             	mov    (%rax),%rdx
  80042021d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042021db:	89 c0                	mov    %eax,%eax
  80042021dd:	48 c1 e0 20          	shl    $0x20,%rax
  80042021e1:	48 89 c1             	mov    %rax,%rcx
  80042021e4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021eb:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021ee:	89 c0                	mov    %eax,%eax
  80042021f0:	48 01 c8             	add    %rcx,%rax
  80042021f3:	48 01 c2             	add    %rax,%rdx
  80042021f6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021fd:	48 89 10             	mov    %rdx,(%rax)
  8004202200:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202204:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202207:	48 63 c8             	movslq %eax,%rcx
  800420220a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202211:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202214:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202219:	f7 e2                	mul    %edx
  800420221b:	89 d0                	mov    %edx,%eax
  800420221d:	c1 e8 04             	shr    $0x4,%eax
  8004202220:	89 c0                	mov    %eax,%eax
  8004202222:	48 39 c1             	cmp    %rax,%rcx
  8004202225:	0f 82 fd fe ff ff    	jb     8004202128 <multiboot_read+0x44f>
  800420222b:	4c 89 e4             	mov    %r12,%rsp
  800420222e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  8004202232:	5b                   	pop    %rbx
  8004202233:	41 5c                	pop    %r12
  8004202235:	5d                   	pop    %rbp
  8004202236:	c3                   	retq   

0000008004202237 <i386_detect_memory>:
  8004202237:	55                   	push   %rbp
  8004202238:	48 89 e5             	mov    %rsp,%rbp
  800420223b:	48 83 ec 50          	sub    $0x50,%rsp
  800420223f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202246:	00 
  8004202247:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420224e:	00 
  800420224f:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202256:	00 00 00 
  8004202259:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420225d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202261:	48 8b 00             	mov    (%rax),%rax
  8004202264:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202268:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420226d:	74 2d                	je     800420229c <i386_detect_memory+0x65>
  800420226f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202273:	8b 00                	mov    (%rax),%eax
  8004202275:	83 e0 40             	and    $0x40,%eax
  8004202278:	85 c0                	test   %eax,%eax
  800420227a:	74 20                	je     800420229c <i386_detect_memory+0x65>
  800420227c:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  8004202280:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202284:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202288:	48 89 ce             	mov    %rcx,%rsi
  800420228b:	48 89 c7             	mov    %rax,%rdi
  800420228e:	48 b8 d9 1c 20 04 80 	movabs $0x8004201cd9,%rax
  8004202295:	00 00 00 
  8004202298:	ff d0                	callq  *%rax
  800420229a:	eb 34                	jmp    80042022d0 <i386_detect_memory+0x99>
  800420229c:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022a1:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022a8:	00 00 00 
  80042022ab:	ff d0                	callq  *%rax
  80042022ad:	c1 e0 0a             	shl    $0xa,%eax
  80042022b0:	48 98                	cltq   
  80042022b2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022b6:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022bb:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022c2:	00 00 00 
  80042022c5:	ff d0                	callq  *%rax
  80042022c7:	c1 e0 0a             	shl    $0xa,%eax
  80042022ca:	48 98                	cltq   
  80042022cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022d4:	48 85 c0             	test   %rax,%rax
  80042022d7:	75 35                	jne    800420230e <i386_detect_memory+0xd7>
  80042022d9:	48 b9 e9 e2 21 04 80 	movabs $0x800421e2e9,%rcx
  80042022e0:	00 00 00 
  80042022e3:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042022ea:	00 00 00 
  80042022ed:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022f2:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042022f9:	00 00 00 
  80042022fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202301:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202308:	00 00 00 
  800420230b:	41 ff d0             	callq  *%r8
  800420230e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202312:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202316:	48 89 c2             	mov    %rax,%rdx
  8004202319:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  8004202320:	00 00 00 
  8004202323:	48 89 10             	mov    %rdx,(%rax)
  8004202326:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420232a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420232e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202332:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202337:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  800420233e:	00 00 00 
  8004202341:	ff d0                	callq  *%rax
  8004202343:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202348:	75 2c                	jne    8004202376 <i386_detect_memory+0x13f>
  800420234a:	bf 34 00 00 00       	mov    $0x34,%edi
  800420234f:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  8004202356:	00 00 00 
  8004202359:	ff d0                	callq  *%rax
  800420235b:	c1 e0 10             	shl    $0x10,%eax
  800420235e:	48 98                	cltq   
  8004202360:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202368:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420236e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202372:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202376:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420237b:	74 1a                	je     8004202397 <i386_detect_memory+0x160>
  800420237d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202381:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202388:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420238f:	00 00 00 
  8004202392:	48 89 10             	mov    %rdx,(%rax)
  8004202395:	eb 1a                	jmp    80042023b1 <i386_detect_memory+0x17a>
  8004202397:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  800420239e:	00 00 00 
  80042023a1:	48 8b 10             	mov    (%rax),%rdx
  80042023a4:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042023ab:	00 00 00 
  80042023ae:	48 89 10             	mov    %rdx,(%rax)
  80042023b1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042023b8:	00 00 00 
  80042023bb:	48 8b 30             	mov    (%rax),%rsi
  80042023be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023c2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023c6:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ca:	48 89 c1             	mov    %rax,%rcx
  80042023cd:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  80042023d4:	00 00 00 
  80042023d7:	48 8b 00             	mov    (%rax),%rax
  80042023da:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023de:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023e2:	48 89 c2             	mov    %rax,%rdx
  80042023e5:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042023ec:	00 00 00 
  80042023ef:	48 8b 00             	mov    (%rax),%rax
  80042023f2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023f6:	48 c1 e8 14          	shr    $0x14,%rax
  80042023fa:	49 89 f0             	mov    %rsi,%r8
  80042023fd:	48 89 c6             	mov    %rax,%rsi
  8004202400:	48 bf 18 e3 21 04 80 	movabs $0x800421e318,%rdi
  8004202407:	00 00 00 
  800420240a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420240f:	49 b9 93 9c 20 04 80 	movabs $0x8004209c93,%r9
  8004202416:	00 00 00 
  8004202419:	41 ff d1             	callq  *%r9
  800420241c:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004202423:	00 
  8004202424:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  800420242b:	07 
  800420242c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202430:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202434:	48 c1 e8 14          	shr    $0x14,%rax
  8004202438:	48 89 c1             	mov    %rax,%rcx
  800420243b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420243f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202443:	48 c1 e8 14          	shr    $0x14,%rax
  8004202447:	48 89 c6             	mov    %rax,%rsi
  800420244a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420244e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202452:	49 89 c8             	mov    %rcx,%r8
  8004202455:	48 89 d1             	mov    %rdx,%rcx
  8004202458:	48 89 f2             	mov    %rsi,%rdx
  800420245b:	48 89 c6             	mov    %rax,%rsi
  800420245e:	48 bf 68 e3 21 04 80 	movabs $0x800421e368,%rdi
  8004202465:	00 00 00 
  8004202468:	b8 00 00 00 00       	mov    $0x0,%eax
  800420246d:	49 b9 93 9c 20 04 80 	movabs $0x8004209c93,%r9
  8004202474:	00 00 00 
  8004202477:	41 ff d1             	callq  *%r9
  800420247a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420247e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004202482:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202487:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420248b:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202492:	00 00 00 
  8004202495:	48 8b 00             	mov    (%rax),%rax
  8004202498:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420249c:	76 3a                	jbe    80042024d8 <i386_detect_memory+0x2a1>
  800420249e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024a2:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024a9:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042024b0:	00 00 00 
  80042024b3:	48 89 10             	mov    %rdx,(%rax)
  80042024b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ba:	48 89 c6             	mov    %rax,%rsi
  80042024bd:	48 bf d0 e3 21 04 80 	movabs $0x800421e3d0,%rdi
  80042024c4:	00 00 00 
  80042024c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024cc:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042024d3:	00 00 00 
  80042024d6:	ff d2                	callq  *%rdx
  80042024d8:	c9                   	leaveq 
  80042024d9:	c3                   	retq   

00000080042024da <boot_alloc>:
  80042024da:	55                   	push   %rbp
  80042024db:	48 89 e5             	mov    %rsp,%rbp
  80042024de:	48 83 ec 40          	sub    $0x40,%rsp
  80042024e2:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024e5:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  80042024ec:	00 00 00 
  80042024ef:	48 8b 00             	mov    (%rax),%rax
  80042024f2:	48 85 c0             	test   %rax,%rax
  80042024f5:	75 4e                	jne    8004202545 <boot_alloc+0x6b>
  80042024f7:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  80042024fe:	00 
  80042024ff:	48 b8 d0 b5 6d 04 80 	movabs $0x80046db5d0,%rax
  8004202506:	00 00 00 
  8004202509:	48 8b 10             	mov    (%rax),%rdx
  800420250c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202510:	48 01 d0             	add    %rdx,%rax
  8004202513:	48 83 e8 01          	sub    $0x1,%rax
  8004202517:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420251b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420251f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202524:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202528:	48 89 d0             	mov    %rdx,%rax
  800420252b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420252f:	48 29 c2             	sub    %rax,%rdx
  8004202532:	48 89 d0             	mov    %rdx,%rax
  8004202535:	48 89 c2             	mov    %rax,%rdx
  8004202538:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  800420253f:	00 00 00 
  8004202542:	48 89 10             	mov    %rdx,(%rax)
  8004202545:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202548:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  800420254f:	00 00 00 
  8004202552:	48 8b 00             	mov    (%rax),%rax
  8004202555:	48 01 c2             	add    %rax,%rdx
  8004202558:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  800420255f:	00 00 00 
  8004202562:	48 8b 00             	mov    (%rax),%rax
  8004202565:	48 39 c2             	cmp    %rax,%rdx
  8004202568:	72 2f                	jb     8004202599 <boot_alloc+0xbf>
  800420256a:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  8004202571:	00 00 00 
  8004202574:	48 8b 10             	mov    (%rax),%rdx
  8004202577:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420257a:	48 01 c2             	add    %rax,%rdx
  800420257d:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202584:	00 00 00 
  8004202587:	48 8b 00             	mov    (%rax),%rax
  800420258a:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202590:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202594:	48 39 c2             	cmp    %rax,%rdx
  8004202597:	76 2a                	jbe    80042025c3 <boot_alloc+0xe9>
  8004202599:	48 ba 00 e4 21 04 80 	movabs $0x800421e400,%rdx
  80042025a0:	00 00 00 
  80042025a3:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025a8:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042025af:	00 00 00 
  80042025b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042025be:	00 00 00 
  80042025c1:	ff d1                	callq  *%rcx
  80042025c3:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  80042025ca:	00 00 00 
  80042025cd:	48 8b 00             	mov    (%rax),%rax
  80042025d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025d4:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025db:	00 
  80042025dc:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  80042025e3:	00 00 00 
  80042025e6:	48 8b 10             	mov    (%rax),%rdx
  80042025e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025ec:	48 01 d0             	add    %rdx,%rax
  80042025ef:	48 89 c2             	mov    %rax,%rdx
  80042025f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042025f6:	48 01 d0             	add    %rdx,%rax
  80042025f9:	48 83 e8 01          	sub    $0x1,%rax
  80042025fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202601:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202605:	ba 00 00 00 00       	mov    $0x0,%edx
  800420260a:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420260e:	48 89 d0             	mov    %rdx,%rax
  8004202611:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202615:	48 29 c2             	sub    %rax,%rdx
  8004202618:	48 89 d0             	mov    %rdx,%rax
  800420261b:	48 89 c2             	mov    %rax,%rdx
  800420261e:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  8004202625:	00 00 00 
  8004202628:	48 89 10             	mov    %rdx,(%rax)
  800420262b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420262f:	c9                   	leaveq 
  8004202630:	c3                   	retq   

0000008004202631 <x64_vm_init>:
  8004202631:	55                   	push   %rbp
  8004202632:	48 89 e5             	mov    %rsp,%rbp
  8004202635:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202639:	48 b8 37 22 20 04 80 	movabs $0x8004202237,%rax
  8004202640:	00 00 00 
  8004202643:	ff d0                	callq  *%rax
  8004202645:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420264a:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202651:	00 00 00 
  8004202654:	ff d0                	callq  *%rax
  8004202656:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420265a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420265e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202663:	be 00 00 00 00       	mov    $0x0,%esi
  8004202668:	48 89 c7             	mov    %rax,%rdi
  800420266b:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004202672:	00 00 00 
  8004202675:	ff d0                	callq  *%rax
  8004202677:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420267e:	00 00 00 
  8004202681:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202685:	48 89 10             	mov    %rdx,(%rax)
  8004202688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420268c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202690:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202697:	00 00 00 
  800420269a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420269e:	77 32                	ja     80042026d2 <x64_vm_init+0xa1>
  80042026a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026a4:	48 89 c1             	mov    %rax,%rcx
  80042026a7:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  80042026ae:	00 00 00 
  80042026b1:	be 18 01 00 00       	mov    $0x118,%esi
  80042026b6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042026bd:	00 00 00 
  80042026c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042026cc:	00 00 00 
  80042026cf:	41 ff d0             	callq  *%r8
  80042026d2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026d9:	ff ff ff 
  80042026dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026e0:	48 01 c2             	add    %rax,%rdx
  80042026e3:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  80042026ea:	00 00 00 
  80042026ed:	48 89 10             	mov    %rdx,(%rax)
  80042026f0:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042026f7:	00 00 00 
  80042026fa:	48 8b 00             	mov    (%rax),%rax
  80042026fd:	48 c1 e0 04          	shl    $0x4,%rax
  8004202701:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202709:	89 c7                	mov    %eax,%edi
  800420270b:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202712:	00 00 00 
  8004202715:	ff d0                	callq  *%rax
  8004202717:	48 ba 00 b6 6d 04 80 	movabs $0x80046db600,%rdx
  800420271e:	00 00 00 
  8004202721:	48 89 02             	mov    %rax,(%rdx)
  8004202724:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800420272b:	00 00 00 
  800420272e:	48 8b 00             	mov    (%rax),%rax
  8004202731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202735:	be 00 00 00 00       	mov    $0x0,%esi
  800420273a:	48 89 c7             	mov    %rax,%rdi
  800420273d:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004202744:	00 00 00 
  8004202747:	ff d0                	callq  *%rax
  8004202749:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420274e:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202755:	00 00 00 
  8004202758:	ff d0                	callq  *%rax
  800420275a:	48 ba 58 c2 4d 04 80 	movabs $0x80044dc258,%rdx
  8004202761:	00 00 00 
  8004202764:	48 89 02             	mov    %rax,(%rdx)
  8004202767:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420276e:	00 00 00 
  8004202771:	48 8b 00             	mov    (%rax),%rax
  8004202774:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202779:	be 00 00 00 00       	mov    $0x0,%esi
  800420277e:	48 89 c7             	mov    %rax,%rdi
  8004202781:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004202788:	00 00 00 
  800420278b:	ff d0                	callq  *%rax
  800420278d:	48 b8 eb 2b 20 04 80 	movabs $0x8004202beb,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042027a0:	00 00 00 
  80042027a3:	48 8b 00             	mov    (%rax),%rax
  80042027a6:	48 c1 e0 04          	shl    $0x4,%rax
  80042027aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ae:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042027b5:	00 00 00 
  80042027b8:	48 8b 00             	mov    (%rax),%rax
  80042027bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027bf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027c6:	00 00 00 
  80042027c9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027cd:	77 32                	ja     8004202801 <x64_vm_init+0x1d0>
  80042027cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027d3:	48 89 c1             	mov    %rax,%rcx
  80042027d6:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  80042027dd:	00 00 00 
  80042027e0:	be 43 01 00 00       	mov    $0x143,%esi
  80042027e5:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042027ec:	00 00 00 
  80042027ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027f4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042027fb:	00 00 00 
  80042027fe:	41 ff d0             	callq  *%r8
  8004202801:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202808:	ff ff ff 
  800420280b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420280f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202813:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420281a:	00 00 00 
  800420281d:	48 8b 00             	mov    (%rax),%rax
  8004202820:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202824:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420282a:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202831:	00 00 00 
  8004202834:	48 89 c7             	mov    %rax,%rdi
  8004202837:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420283e:	00 00 00 
  8004202841:	ff d0                	callq  *%rax
  8004202843:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420284a:	00 
  800420284b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420284f:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202855:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420285d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202862:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202866:	48 89 d0             	mov    %rdx,%rax
  8004202869:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420286d:	48 29 c2             	sub    %rax,%rdx
  8004202870:	48 89 d0             	mov    %rdx,%rax
  8004202873:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202877:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420287e:	00 00 00 
  8004202881:	48 8b 00             	mov    (%rax),%rax
  8004202884:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202888:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420288f:	00 00 00 
  8004202892:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004202896:	77 32                	ja     80042028ca <x64_vm_init+0x299>
  8004202898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420289c:	48 89 c1             	mov    %rax,%rcx
  800420289f:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  80042028a6:	00 00 00 
  80042028a9:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ae:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042028b5:	00 00 00 
  80042028b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042028c4:	00 00 00 
  80042028c7:	41 ff d0             	callq  *%r8
  80042028ca:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028d1:	ff ff ff 
  80042028d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028d8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028dc:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042028e3:	00 00 00 
  80042028e6:	48 8b 00             	mov    (%rax),%rax
  80042028e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028ed:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028f3:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  80042028fa:	00 00 00 
  80042028fd:	48 89 c7             	mov    %rax,%rdi
  8004202900:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202907:	00 00 00 
  800420290a:	ff d0                	callq  *%rax
  800420290c:	48 b8 00 40 22 04 80 	movabs $0x8004224000,%rax
  8004202913:	00 00 00 
  8004202916:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420291a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202921:	00 00 00 
  8004202924:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202928:	77 32                	ja     800420295c <x64_vm_init+0x32b>
  800420292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420292e:	48 89 c1             	mov    %rax,%rcx
  8004202931:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  8004202938:	00 00 00 
  800420293b:	be 62 01 00 00       	mov    $0x162,%esi
  8004202940:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202947:	00 00 00 
  800420294a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420294f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202956:	00 00 00 
  8004202959:	41 ff d0             	callq  *%r8
  800420295c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202963:	ff ff ff 
  8004202966:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420296a:	48 01 c2             	add    %rax,%rdx
  800420296d:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004202974:	00 00 00 
  8004202977:	48 8b 00             	mov    (%rax),%rax
  800420297a:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202980:	48 89 d1             	mov    %rdx,%rcx
  8004202983:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202988:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420298f:	00 00 00 
  8004202992:	48 89 c7             	mov    %rax,%rdi
  8004202995:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420299c:	00 00 00 
  800420299f:	ff d0                	callq  *%rax
  80042029a1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042029a8:	00 00 00 
  80042029ab:	48 8b 00             	mov    (%rax),%rax
  80042029ae:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029b2:	48 89 c2             	mov    %rax,%rdx
  80042029b5:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042029bc:	00 00 00 
  80042029bf:	48 8b 00             	mov    (%rax),%rax
  80042029c2:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029c8:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029cd:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029d4:	00 00 00 
  80042029d7:	48 89 c7             	mov    %rax,%rdi
  80042029da:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  80042029e1:	00 00 00 
  80042029e4:	ff d0                	callq  *%rax
  80042029e6:	48 b8 00 2b 20 04 80 	movabs $0x8004202b00,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042029f6:	48 83 c0 08          	add    $0x8,%rax
  80042029fa:	48 8b 00             	mov    (%rax),%rax
  80042029fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a0b:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a0f:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a12:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a15:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202a1c:	00 00 00 
  8004202a1f:	48 8b 00             	mov    (%rax),%rax
  8004202a22:	48 39 c2             	cmp    %rax,%rdx
  8004202a25:	72 32                	jb     8004202a59 <x64_vm_init+0x428>
  8004202a27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a2b:	48 89 c1             	mov    %rax,%rcx
  8004202a2e:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004202a35:	00 00 00 
  8004202a38:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a3d:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202a44:	00 00 00 
  8004202a47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a4c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202a53:	00 00 00 
  8004202a56:	41 ff d0             	callq  *%r8
  8004202a59:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a60:	00 00 00 
  8004202a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a67:	48 01 d0             	add    %rdx,%rax
  8004202a6a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a72:	48 8b 00             	mov    (%rax),%rax
  8004202a75:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a7b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a83:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a87:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a8a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a8d:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202a94:	00 00 00 
  8004202a97:	48 8b 00             	mov    (%rax),%rax
  8004202a9a:	48 39 c2             	cmp    %rax,%rdx
  8004202a9d:	72 32                	jb     8004202ad1 <x64_vm_init+0x4a0>
  8004202a9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aa3:	48 89 c1             	mov    %rax,%rcx
  8004202aa6:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004202aad:	00 00 00 
  8004202ab0:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ab5:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202abc:	00 00 00 
  8004202abf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ac4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202acb:	00 00 00 
  8004202ace:	41 ff d0             	callq  *%r8
  8004202ad1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ad8:	00 00 00 
  8004202adb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202adf:	48 01 d0             	add    %rdx,%rax
  8004202ae2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202ae6:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202af7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202afb:	0f 22 d8             	mov    %rax,%cr3
  8004202afe:	c9                   	leaveq 
  8004202aff:	c3                   	retq   

0000008004202b00 <mem_init_mp>:
  8004202b00:	55                   	push   %rbp
  8004202b01:	48 89 e5             	mov    %rsp,%rbp
  8004202b04:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b08:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b0f:	e9 cb 00 00 00       	jmpq   8004202bdf <mem_init_mp+0xdf>
  8004202b14:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b17:	89 d0                	mov    %edx,%eax
  8004202b19:	01 c0                	add    %eax,%eax
  8004202b1b:	01 d0                	add    %edx,%eax
  8004202b1d:	c1 e0 0f             	shl    $0xf,%eax
  8004202b20:	48 98                	cltq   
  8004202b22:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b29:	00 00 00 
  8004202b2c:	48 29 c2             	sub    %rax,%rdx
  8004202b2f:	48 89 d0             	mov    %rdx,%rax
  8004202b32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b39:	48 98                	cltq   
  8004202b3b:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b3f:	48 89 c2             	mov    %rax,%rdx
  8004202b42:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004202b49:	00 00 00 
  8004202b4c:	48 01 d0             	add    %rdx,%rax
  8004202b4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b53:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b5a:	00 00 00 
  8004202b5d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b61:	77 32                	ja     8004202b95 <mem_init_mp+0x95>
  8004202b63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b67:	48 89 c1             	mov    %rax,%rcx
  8004202b6a:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  8004202b71:	00 00 00 
  8004202b74:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b79:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202b80:	00 00 00 
  8004202b83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b88:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202b8f:	00 00 00 
  8004202b92:	41 ff d0             	callq  *%r8
  8004202b95:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202b9c:	ff ff ff 
  8004202b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ba3:	48 01 c2             	add    %rax,%rdx
  8004202ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202baa:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bb1:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004202bb8:	00 00 00 
  8004202bbb:	48 8b 00             	mov    (%rax),%rax
  8004202bbe:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bc4:	48 89 d1             	mov    %rdx,%rcx
  8004202bc7:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bcc:	48 89 c7             	mov    %rax,%rdi
  8004202bcf:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202bd6:	00 00 00 
  8004202bd9:	ff d0                	callq  *%rax
  8004202bdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202bdf:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202be3:	0f 8e 2b ff ff ff    	jle    8004202b14 <mem_init_mp+0x14>
  8004202be9:	c9                   	leaveq 
  8004202bea:	c3                   	retq   

0000008004202beb <page_init>:
  8004202beb:	55                   	push   %rbp
  8004202bec:	48 89 e5             	mov    %rsp,%rbp
  8004202bef:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bf3:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202bf8:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202bff:	00 00 00 
  8004202c02:	ff d0                	callq  *%rax
  8004202c04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c08:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c0f:	00 
  8004202c10:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c17:	00 
  8004202c18:	e9 65 02 00 00       	jmpq   8004202e82 <page_init+0x297>
  8004202c1d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c29:	74 1a                	je     8004202c45 <page_init+0x5a>
  8004202c2b:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c3c:	73 07                	jae    8004202c45 <page_init+0x5a>
  8004202c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c45:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c4a:	75 07                	jne    8004202c53 <page_init+0x68>
  8004202c4c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c5b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c62:	00 00 00 
  8004202c65:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c69:	77 32                	ja     8004202c9d <page_init+0xb2>
  8004202c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c6f:	48 89 c1             	mov    %rax,%rcx
  8004202c72:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  8004202c79:	00 00 00 
  8004202c7c:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c81:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202c88:	00 00 00 
  8004202c8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202c97:	00 00 00 
  8004202c9a:	41 ff d0             	callq  *%r8
  8004202c9d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ca4:	ff ff ff 
  8004202ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cab:	48 01 d0             	add    %rdx,%rax
  8004202cae:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cb2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cb6:	77 07                	ja     8004202cbf <page_init+0xd4>
  8004202cb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202cc3:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cc9:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202ccd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cd1:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202cd8:	00 00 00 
  8004202cdb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202cdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202ce3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ce7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cea:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202ced:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202cf4:	00 00 00 
  8004202cf7:	48 8b 00             	mov    (%rax),%rax
  8004202cfa:	48 39 c2             	cmp    %rax,%rdx
  8004202cfd:	72 32                	jb     8004202d31 <page_init+0x146>
  8004202cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d03:	48 89 c1             	mov    %rax,%rcx
  8004202d06:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004202d0d:	00 00 00 
  8004202d10:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d15:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202d1c:	00 00 00 
  8004202d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202d2b:	00 00 00 
  8004202d2e:	41 ff d0             	callq  *%r8
  8004202d31:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d38:	00 00 00 
  8004202d3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d3f:	48 01 d0             	add    %rdx,%rax
  8004202d42:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d46:	0f 87 84 00 00 00    	ja     8004202dd0 <page_init+0x1e5>
  8004202d4c:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d53:	00 00 00 
  8004202d56:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d5c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d64:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d68:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d6b:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d6e:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202d75:	00 00 00 
  8004202d78:	48 8b 00             	mov    (%rax),%rax
  8004202d7b:	48 39 c2             	cmp    %rax,%rdx
  8004202d7e:	72 32                	jb     8004202db2 <page_init+0x1c7>
  8004202d80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d84:	48 89 c1             	mov    %rax,%rcx
  8004202d87:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004202d8e:	00 00 00 
  8004202d91:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d96:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202d9d:	00 00 00 
  8004202da0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202da5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202dac:	00 00 00 
  8004202daf:	41 ff d0             	callq  *%r8
  8004202db2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202db9:	00 00 00 
  8004202dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dc0:	48 01 d0             	add    %rdx,%rax
  8004202dc3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dc7:	76 07                	jbe    8004202dd0 <page_init+0x1e5>
  8004202dc9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202dd0:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202dd7:	00 00 00 
  8004202dda:	48 8b 00             	mov    (%rax),%rax
  8004202ddd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202de1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202de5:	48 01 c2             	add    %rax,%rdx
  8004202de8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202deb:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202def:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202df6:	00 00 00 
  8004202df9:	48 8b 00             	mov    (%rax),%rax
  8004202dfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e00:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e04:	48 01 d0             	add    %rdx,%rax
  8004202e07:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e12:	75 69                	jne    8004202e7d <page_init+0x292>
  8004202e14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e19:	74 21                	je     8004202e3c <page_init+0x251>
  8004202e1b:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202e22:	00 00 00 
  8004202e25:	48 8b 00             	mov    (%rax),%rax
  8004202e28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e2c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e30:	48 01 c2             	add    %rax,%rdx
  8004202e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e37:	48 89 10             	mov    %rdx,(%rax)
  8004202e3a:	eb 25                	jmp    8004202e61 <page_init+0x276>
  8004202e3c:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202e43:	00 00 00 
  8004202e46:	48 8b 00             	mov    (%rax),%rax
  8004202e49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e4d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e51:	48 01 c2             	add    %rax,%rdx
  8004202e54:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202e5b:	00 00 00 
  8004202e5e:	48 89 10             	mov    %rdx,(%rax)
  8004202e61:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202e68:	00 00 00 
  8004202e6b:	48 8b 00             	mov    (%rax),%rax
  8004202e6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e72:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e76:	48 01 d0             	add    %rdx,%rax
  8004202e79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e7d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e82:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202e89:	00 00 00 
  8004202e8c:	48 8b 00             	mov    (%rax),%rax
  8004202e8f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e93:	0f 82 84 fd ff ff    	jb     8004202c1d <page_init+0x32>
  8004202e99:	c9                   	leaveq 
  8004202e9a:	c3                   	retq   

0000008004202e9b <page_alloc>:
  8004202e9b:	55                   	push   %rbp
  8004202e9c:	48 89 e5             	mov    %rsp,%rbp
  8004202e9f:	48 83 ec 20          	sub    $0x20,%rsp
  8004202ea3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202ea6:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202ead:	00 00 00 
  8004202eb0:	48 8b 00             	mov    (%rax),%rax
  8004202eb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202eb7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ebc:	74 5e                	je     8004202f1c <page_alloc+0x81>
  8004202ebe:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202ec5:	00 00 00 
  8004202ec8:	48 8b 00             	mov    (%rax),%rax
  8004202ecb:	48 8b 10             	mov    (%rax),%rdx
  8004202ece:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202ed5:	00 00 00 
  8004202ed8:	48 89 10             	mov    %rdx,(%rax)
  8004202edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202edf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ee6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ee9:	83 e0 01             	and    $0x1,%eax
  8004202eec:	85 c0                	test   %eax,%eax
  8004202eee:	74 2c                	je     8004202f1c <page_alloc+0x81>
  8004202ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ef4:	48 89 c7             	mov    %rax,%rdi
  8004202ef7:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004202efe:	00 00 00 
  8004202f01:	ff d0                	callq  *%rax
  8004202f03:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f08:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f0d:	48 89 c7             	mov    %rax,%rdi
  8004202f10:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004202f17:	00 00 00 
  8004202f1a:	ff d0                	callq  *%rax
  8004202f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f20:	c9                   	leaveq 
  8004202f21:	c3                   	retq   

0000008004202f22 <page_initpp>:
  8004202f22:	55                   	push   %rbp
  8004202f23:	48 89 e5             	mov    %rsp,%rbp
  8004202f26:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f32:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f37:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f3c:	48 89 c7             	mov    %rax,%rdi
  8004202f3f:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004202f46:	00 00 00 
  8004202f49:	ff d0                	callq  *%rax
  8004202f4b:	c9                   	leaveq 
  8004202f4c:	c3                   	retq   

0000008004202f4d <page_free>:
  8004202f4d:	55                   	push   %rbp
  8004202f4e:	48 89 e5             	mov    %rsp,%rbp
  8004202f51:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f61:	66 85 c0             	test   %ax,%ax
  8004202f64:	75 0c                	jne    8004202f72 <page_free+0x25>
  8004202f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 85 c0             	test   %rax,%rax
  8004202f70:	74 2c                	je     8004202f9e <page_free+0x51>
  8004202f72:	48 ba 50 e4 21 04 80 	movabs $0x800421e450,%rdx
  8004202f79:	00 00 00 
  8004202f7c:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f81:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004202f88:	00 00 00 
  8004202f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f90:	48 b9 00 06 20 04 80 	movabs $0x8004200600,%rcx
  8004202f97:	00 00 00 
  8004202f9a:	ff d1                	callq  *%rcx
  8004202f9c:	eb 2f                	jmp    8004202fcd <page_free+0x80>
  8004202f9e:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202fa5:	00 00 00 
  8004202fa8:	48 8b 10             	mov    (%rax),%rdx
  8004202fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202faf:	48 89 10             	mov    %rdx,(%rax)
  8004202fb2:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202fb9:	00 00 00 
  8004202fbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fc0:	48 89 10             	mov    %rdx,(%rax)
  8004202fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fc7:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fcd:	c9                   	leaveq 
  8004202fce:	c3                   	retq   

0000008004202fcf <page_decref>:
  8004202fcf:	55                   	push   %rbp
  8004202fd0:	48 89 e5             	mov    %rsp,%rbp
  8004202fd3:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fdf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fe3:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fea:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202ff6:	66 85 c0             	test   %ax,%ax
  8004202ff9:	75 13                	jne    800420300e <page_decref+0x3f>
  8004202ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fff:	48 89 c7             	mov    %rax,%rdi
  8004203002:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004203009:	00 00 00 
  800420300c:	ff d0                	callq  *%rax
  800420300e:	c9                   	leaveq 
  800420300f:	c3                   	retq   

0000008004203010 <pml4e_walk>:
  8004203010:	55                   	push   %rbp
  8004203011:	48 89 e5             	mov    %rsp,%rbp
  8004203014:	53                   	push   %rbx
  8004203015:	48 83 ec 68          	sub    $0x68,%rsp
  8004203019:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420301d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203021:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203024:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203029:	0f 84 4e 02 00 00    	je     800420327d <pml4e_walk+0x26d>
  800420302f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203033:	48 c1 e8 27          	shr    $0x27,%rax
  8004203037:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420303c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203043:	00 
  8004203044:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203048:	48 01 d0             	add    %rdx,%rax
  800420304b:	48 8b 00             	mov    (%rax),%rax
  800420304e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203056:	83 e0 01             	and    $0x1,%eax
  8004203059:	48 85 c0             	test   %rax,%rax
  800420305c:	0f 85 7f 01 00 00    	jne    80042031e1 <pml4e_walk+0x1d1>
  8004203062:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203066:	0f 84 75 01 00 00    	je     80042031e1 <pml4e_walk+0x1d1>
  800420306c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203073:	00 
  8004203074:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203079:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203080:	00 00 00 
  8004203083:	ff d0                	callq  *%rax
  8004203085:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203089:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420308e:	0f 84 43 01 00 00    	je     80042031d7 <pml4e_walk+0x1c7>
  8004203094:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203098:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420309c:	8d 50 01             	lea    0x1(%rax),%edx
  800420309f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030a7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ab:	48 c1 e8 27          	shr    $0x27,%rax
  80042030af:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030bb:	00 
  80042030bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030c0:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030c8:	48 89 c7             	mov    %rax,%rdi
  80042030cb:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042030d2:	00 00 00 
  80042030d5:	ff d0                	callq  *%rax
  80042030d7:	48 83 c8 07          	or     $0x7,%rax
  80042030db:	48 89 03             	mov    %rax,(%rbx)
  80042030de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030e2:	48 c1 e8 27          	shr    $0x27,%rax
  80042030e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030f2:	00 
  80042030f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030f7:	48 01 d0             	add    %rdx,%rax
  80042030fa:	48 8b 00             	mov    (%rax),%rax
  80042030fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203103:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420310b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420310f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203112:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203115:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420311c:	00 00 00 
  800420311f:	48 8b 00             	mov    (%rax),%rax
  8004203122:	48 39 c2             	cmp    %rax,%rdx
  8004203125:	72 32                	jb     8004203159 <pml4e_walk+0x149>
  8004203127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420312b:	48 89 c1             	mov    %rax,%rcx
  800420312e:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004203135:	00 00 00 
  8004203138:	be 79 02 00 00       	mov    $0x279,%esi
  800420313d:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004203144:	00 00 00 
  8004203147:	b8 00 00 00 00       	mov    $0x0,%eax
  800420314c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203153:	00 00 00 
  8004203156:	41 ff d0             	callq  *%r8
  8004203159:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203160:	00 00 00 
  8004203163:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203167:	48 01 d0             	add    %rdx,%rax
  800420316a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420316d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203171:	48 89 ce             	mov    %rcx,%rsi
  8004203174:	48 89 c7             	mov    %rax,%rdi
  8004203177:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  800420317e:	00 00 00 
  8004203181:	ff d0                	callq  *%rax
  8004203183:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203187:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420318c:	74 09                	je     8004203197 <pml4e_walk+0x187>
  800420318e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203192:	e9 eb 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  8004203197:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420319b:	48 c1 e8 27          	shr    $0x27,%rax
  800420319f:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031ab:	00 
  80042031ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031b0:	48 01 d0             	add    %rdx,%rax
  80042031b3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031be:	48 89 c7             	mov    %rax,%rdi
  80042031c1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042031c8:	00 00 00 
  80042031cb:	ff d0                	callq  *%rax
  80042031cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031d2:	e9 ab 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031dc:	e9 a1 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031e5:	83 e0 01             	and    $0x1,%eax
  80042031e8:	48 85 c0             	test   %rax,%rax
  80042031eb:	0f 84 8c 00 00 00    	je     800420327d <pml4e_walk+0x26d>
  80042031f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042031fb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042031ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203203:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203207:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420320a:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420320d:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203214:	00 00 00 
  8004203217:	48 8b 00             	mov    (%rax),%rax
  800420321a:	48 39 c2             	cmp    %rax,%rdx
  800420321d:	72 32                	jb     8004203251 <pml4e_walk+0x241>
  800420321f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203223:	48 89 c1             	mov    %rax,%rcx
  8004203226:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  800420322d:	00 00 00 
  8004203230:	be 83 02 00 00       	mov    $0x283,%esi
  8004203235:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420323c:	00 00 00 
  800420323f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203244:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420324b:	00 00 00 
  800420324e:	41 ff d0             	callq  *%r8
  8004203251:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203258:	00 00 00 
  800420325b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420325f:	48 01 d0             	add    %rdx,%rax
  8004203262:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203265:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203269:	48 89 ce             	mov    %rcx,%rsi
  800420326c:	48 89 c7             	mov    %rax,%rdi
  800420326f:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  8004203276:	00 00 00 
  8004203279:	ff d0                	callq  *%rax
  800420327b:	eb 05                	jmp    8004203282 <pml4e_walk+0x272>
  800420327d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203282:	48 83 c4 68          	add    $0x68,%rsp
  8004203286:	5b                   	pop    %rbx
  8004203287:	5d                   	pop    %rbp
  8004203288:	c3                   	retq   

0000008004203289 <pdpe_walk>:
  8004203289:	55                   	push   %rbp
  800420328a:	48 89 e5             	mov    %rsp,%rbp
  800420328d:	53                   	push   %rbx
  800420328e:	48 83 ec 68          	sub    $0x68,%rsp
  8004203292:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203296:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420329a:	89 55 9c             	mov    %edx,-0x64(%rbp)
  800420329d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032a2:	0f 84 4e 02 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  80042032a8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032ac:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032b0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032bc:	00 
  80042032bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032c1:	48 01 d0             	add    %rdx,%rax
  80042032c4:	48 8b 00             	mov    (%rax),%rax
  80042032c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032cf:	83 e0 01             	and    $0x1,%eax
  80042032d2:	48 85 c0             	test   %rax,%rax
  80042032d5:	0f 85 7f 01 00 00    	jne    800420345a <pdpe_walk+0x1d1>
  80042032db:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032df:	0f 84 75 01 00 00    	je     800420345a <pdpe_walk+0x1d1>
  80042032e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032ec:	00 
  80042032ed:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032f2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042032f9:	00 00 00 
  80042032fc:	ff d0                	callq  *%rax
  80042032fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203302:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203307:	0f 84 43 01 00 00    	je     8004203450 <pdpe_walk+0x1c7>
  800420330d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203311:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203315:	8d 50 01             	lea    0x1(%rax),%edx
  8004203318:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203320:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203324:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203328:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420332d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203334:	00 
  8004203335:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203339:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420333d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203341:	48 89 c7             	mov    %rax,%rdi
  8004203344:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420334b:	00 00 00 
  800420334e:	ff d0                	callq  *%rax
  8004203350:	48 83 c8 07          	or     $0x7,%rax
  8004203354:	48 89 03             	mov    %rax,(%rbx)
  8004203357:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420335b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420335f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203364:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420336b:	00 
  800420336c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203370:	48 01 d0             	add    %rdx,%rax
  8004203373:	48 8b 00             	mov    (%rax),%rax
  8004203376:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420337c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203384:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203388:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420338b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420338e:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203395:	00 00 00 
  8004203398:	48 8b 00             	mov    (%rax),%rax
  800420339b:	48 39 c2             	cmp    %rax,%rdx
  800420339e:	72 32                	jb     80042033d2 <pdpe_walk+0x149>
  80042033a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033a4:	48 89 c1             	mov    %rax,%rcx
  80042033a7:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  80042033ae:	00 00 00 
  80042033b1:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033b6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042033bd:	00 00 00 
  80042033c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042033cc:	00 00 00 
  80042033cf:	41 ff d0             	callq  *%r8
  80042033d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033d9:	00 00 00 
  80042033dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033e0:	48 01 d0             	add    %rdx,%rax
  80042033e3:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033e6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ea:	48 89 ce             	mov    %rcx,%rsi
  80042033ed:	48 89 c7             	mov    %rax,%rdi
  80042033f0:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042033f7:	00 00 00 
  80042033fa:	ff d0                	callq  *%rax
  80042033fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203400:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203405:	74 09                	je     8004203410 <pdpe_walk+0x187>
  8004203407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420340b:	e9 eb 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203410:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203414:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203418:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420341d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203424:	00 
  8004203425:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203429:	48 01 d0             	add    %rdx,%rax
  800420342c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203433:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203437:	48 89 c7             	mov    %rax,%rdi
  800420343a:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203441:	00 00 00 
  8004203444:	ff d0                	callq  *%rax
  8004203446:	b8 00 00 00 00       	mov    $0x0,%eax
  800420344b:	e9 ab 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203450:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203455:	e9 a1 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  800420345a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420345e:	83 e0 01             	and    $0x1,%eax
  8004203461:	48 85 c0             	test   %rax,%rax
  8004203464:	0f 84 8c 00 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  800420346a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203474:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420347c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203480:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203483:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203486:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420348d:	00 00 00 
  8004203490:	48 8b 00             	mov    (%rax),%rax
  8004203493:	48 39 c2             	cmp    %rax,%rdx
  8004203496:	72 32                	jb     80042034ca <pdpe_walk+0x241>
  8004203498:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420349c:	48 89 c1             	mov    %rax,%rcx
  800420349f:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  80042034a6:	00 00 00 
  80042034a9:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ae:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042034b5:	00 00 00 
  80042034b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042034c4:	00 00 00 
  80042034c7:	41 ff d0             	callq  *%r8
  80042034ca:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034d1:	00 00 00 
  80042034d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034d8:	48 01 d0             	add    %rdx,%rax
  80042034db:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034de:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034e2:	48 89 ce             	mov    %rcx,%rsi
  80042034e5:	48 89 c7             	mov    %rax,%rdi
  80042034e8:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042034ef:	00 00 00 
  80042034f2:	ff d0                	callq  *%rax
  80042034f4:	eb 05                	jmp    80042034fb <pdpe_walk+0x272>
  80042034f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034fb:	48 83 c4 68          	add    $0x68,%rsp
  80042034ff:	5b                   	pop    %rbx
  8004203500:	5d                   	pop    %rbp
  8004203501:	c3                   	retq   

0000008004203502 <pgdir_walk>:
  8004203502:	55                   	push   %rbp
  8004203503:	48 89 e5             	mov    %rsp,%rbp
  8004203506:	53                   	push   %rbx
  8004203507:	48 83 ec 58          	sub    $0x58,%rsp
  800420350b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420350f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203513:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203516:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800420351b:	0f 84 fd 01 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203521:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203525:	48 c1 e8 15          	shr    $0x15,%rax
  8004203529:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420352e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203535:	00 
  8004203536:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420353a:	48 01 d0             	add    %rdx,%rax
  800420353d:	48 8b 00             	mov    (%rax),%rax
  8004203540:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203548:	83 e0 01             	and    $0x1,%eax
  800420354b:	48 85 c0             	test   %rax,%rax
  800420354e:	0f 85 2f 01 00 00    	jne    8004203683 <pgdir_walk+0x181>
  8004203554:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203558:	0f 84 25 01 00 00    	je     8004203683 <pgdir_walk+0x181>
  800420355e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203565:	00 
  8004203566:	bf 01 00 00 00       	mov    $0x1,%edi
  800420356b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203572:	00 00 00 
  8004203575:	ff d0                	callq  *%rax
  8004203577:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420357b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203580:	0f 84 f3 00 00 00    	je     8004203679 <pgdir_walk+0x177>
  8004203586:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420358a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420358e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203591:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203595:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203599:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420359d:	48 c1 e8 15          	shr    $0x15,%rax
  80042035a1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035ad:	00 
  80042035ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035b2:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035ba:	48 89 c7             	mov    %rax,%rdi
  80042035bd:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042035c4:	00 00 00 
  80042035c7:	ff d0                	callq  *%rax
  80042035c9:	48 83 c8 07          	or     $0x7,%rax
  80042035cd:	48 89 03             	mov    %rax,(%rbx)
  80042035d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035d4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035d8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035e4:	00 
  80042035e5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ed:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035f2:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  80042035f9:	00 
  80042035fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035fe:	48 01 c8             	add    %rcx,%rax
  8004203601:	48 8b 00             	mov    (%rax),%rax
  8004203604:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420360a:	48 01 d0             	add    %rdx,%rax
  800420360d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203615:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203619:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420361c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420361f:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203626:	00 00 00 
  8004203629:	48 8b 00             	mov    (%rax),%rax
  800420362c:	48 39 c2             	cmp    %rax,%rdx
  800420362f:	72 32                	jb     8004203663 <pgdir_walk+0x161>
  8004203631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203635:	48 89 c1             	mov    %rax,%rcx
  8004203638:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  800420363f:	00 00 00 
  8004203642:	be c1 02 00 00       	mov    $0x2c1,%esi
  8004203647:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420364e:	00 00 00 
  8004203651:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203656:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420365d:	00 00 00 
  8004203660:	41 ff d0             	callq  *%r8
  8004203663:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420366a:	00 00 00 
  800420366d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203671:	48 01 d0             	add    %rdx,%rax
  8004203674:	e9 aa 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203679:	b8 00 00 00 00       	mov    $0x0,%eax
  800420367e:	e9 a0 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203687:	83 e0 01             	and    $0x1,%eax
  800420368a:	48 85 c0             	test   %rax,%rax
  800420368d:	0f 84 8b 00 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203693:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203697:	48 c1 e8 0c          	shr    $0xc,%rax
  800420369b:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036a7:	00 
  80042036a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036b2:	48 01 d0             	add    %rdx,%rax
  80042036b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036c1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036c4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036c7:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042036ce:	00 00 00 
  80042036d1:	48 8b 00             	mov    (%rax),%rax
  80042036d4:	48 39 c2             	cmp    %rax,%rdx
  80042036d7:	72 32                	jb     800420370b <pgdir_walk+0x209>
  80042036d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036dd:	48 89 c1             	mov    %rax,%rcx
  80042036e0:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  80042036e7:	00 00 00 
  80042036ea:	be c6 02 00 00       	mov    $0x2c6,%esi
  80042036ef:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042036f6:	00 00 00 
  80042036f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042036fe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203705:	00 00 00 
  8004203708:	41 ff d0             	callq  *%r8
  800420370b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203712:	00 00 00 
  8004203715:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203719:	48 01 d0             	add    %rdx,%rax
  800420371c:	eb 05                	jmp    8004203723 <pgdir_walk+0x221>
  800420371e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203723:	48 83 c4 58          	add    $0x58,%rsp
  8004203727:	5b                   	pop    %rbx
  8004203728:	5d                   	pop    %rbp
  8004203729:	c3                   	retq   

000000800420372a <boot_map_region>:
  800420372a:	55                   	push   %rbp
  800420372b:	48 89 e5             	mov    %rsp,%rbp
  800420372e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203732:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203736:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420373a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420373e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203742:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203746:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420374d:	00 
  800420374e:	e9 aa 02 00 00       	jmpq   80042039fd <boot_map_region+0x2d3>
  8004203753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203757:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420375b:	48 01 d0             	add    %rdx,%rax
  800420375e:	48 89 c1             	mov    %rax,%rcx
  8004203761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203765:	ba 01 00 00 00       	mov    $0x1,%edx
  800420376a:	48 89 ce             	mov    %rcx,%rsi
  800420376d:	48 89 c7             	mov    %rax,%rdi
  8004203770:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203777:	00 00 00 
  800420377a:	ff d0                	callq  *%rax
  800420377c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203784:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203788:	48 01 d0             	add    %rdx,%rax
  800420378b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420378f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004203794:	74 23                	je     80042037b9 <boot_map_region+0x8f>
  8004203796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420379a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037a0:	48 89 c2             	mov    %rax,%rdx
  80042037a3:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037a6:	48 98                	cltq   
  80042037a8:	48 09 d0             	or     %rdx,%rax
  80042037ab:	48 83 c8 01          	or     $0x1,%rax
  80042037af:	48 89 c2             	mov    %rax,%rdx
  80042037b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037b6:	48 89 10             	mov    %rdx,(%rax)
  80042037b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037c1:	48 01 d0             	add    %rdx,%rax
  80042037c4:	48 c1 e8 27          	shr    $0x27,%rax
  80042037c8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037d4:	00 
  80042037d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037d9:	48 01 d0             	add    %rdx,%rax
  80042037dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037e0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037e4:	48 01 ca             	add    %rcx,%rdx
  80042037e7:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037eb:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037f1:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042037f8:	00 
  80042037f9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042037fd:	48 01 ca             	add    %rcx,%rdx
  8004203800:	48 8b 0a             	mov    (%rdx),%rcx
  8004203803:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203806:	48 63 d2             	movslq %edx,%rdx
  8004203809:	48 09 ca             	or     %rcx,%rdx
  800420380c:	48 83 ca 01          	or     $0x1,%rdx
  8004203810:	48 89 10             	mov    %rdx,(%rax)
  8004203813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203817:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420381b:	48 01 d0             	add    %rdx,%rax
  800420381e:	48 c1 e8 27          	shr    $0x27,%rax
  8004203822:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203827:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420382e:	00 
  800420382f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203833:	48 01 d0             	add    %rdx,%rax
  8004203836:	48 8b 00             	mov    (%rax),%rax
  8004203839:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420383f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203847:	48 c1 e8 0c          	shr    $0xc,%rax
  800420384b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420384e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203851:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203858:	00 00 00 
  800420385b:	48 8b 00             	mov    (%rax),%rax
  800420385e:	48 39 c2             	cmp    %rax,%rdx
  8004203861:	72 32                	jb     8004203895 <boot_map_region+0x16b>
  8004203863:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203867:	48 89 c1             	mov    %rax,%rcx
  800420386a:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004203871:	00 00 00 
  8004203874:	be e9 02 00 00       	mov    $0x2e9,%esi
  8004203879:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004203880:	00 00 00 
  8004203883:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203888:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420388f:	00 00 00 
  8004203892:	41 ff d0             	callq  *%r8
  8004203895:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420389c:	00 00 00 
  800420389f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038a3:	48 01 d0             	add    %rdx,%rax
  80042038a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ae:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038b2:	48 01 d0             	add    %rdx,%rax
  80042038b5:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038be:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038c5:	00 
  80042038c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038ca:	48 01 d0             	add    %rdx,%rax
  80042038cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038d1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038d5:	48 01 ca             	add    %rcx,%rdx
  80042038d8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038dc:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038e2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038e9:	00 
  80042038ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038ee:	48 01 ca             	add    %rcx,%rdx
  80042038f1:	48 8b 0a             	mov    (%rdx),%rcx
  80042038f4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042038f7:	48 63 d2             	movslq %edx,%rdx
  80042038fa:	48 09 ca             	or     %rcx,%rdx
  80042038fd:	48 83 ca 01          	or     $0x1,%rdx
  8004203901:	48 89 10             	mov    %rdx,(%rax)
  8004203904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203908:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420390c:	48 01 d0             	add    %rdx,%rax
  800420390f:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203913:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203918:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420391f:	00 
  8004203920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203924:	48 01 d0             	add    %rdx,%rax
  8004203927:	48 8b 00             	mov    (%rax),%rax
  800420392a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203930:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203934:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203938:	48 c1 e8 0c          	shr    $0xc,%rax
  800420393c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420393f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203942:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203949:	00 00 00 
  800420394c:	48 8b 00             	mov    (%rax),%rax
  800420394f:	48 39 c2             	cmp    %rax,%rdx
  8004203952:	72 32                	jb     8004203986 <boot_map_region+0x25c>
  8004203954:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203958:	48 89 c1             	mov    %rax,%rcx
  800420395b:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004203962:	00 00 00 
  8004203965:	be eb 02 00 00       	mov    $0x2eb,%esi
  800420396a:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004203971:	00 00 00 
  8004203974:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203979:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203980:	00 00 00 
  8004203983:	41 ff d0             	callq  *%r8
  8004203986:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420398d:	00 00 00 
  8004203990:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203994:	48 01 d0             	add    %rdx,%rax
  8004203997:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420399b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420399f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039a3:	48 01 d0             	add    %rdx,%rax
  80042039a6:	48 c1 e8 15          	shr    $0x15,%rax
  80042039aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039b6:	00 
  80042039b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039bb:	48 01 d0             	add    %rdx,%rax
  80042039be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039c2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039c6:	48 01 ca             	add    %rcx,%rdx
  80042039c9:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039cd:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039d3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039da:	00 
  80042039db:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039df:	48 01 ca             	add    %rcx,%rdx
  80042039e2:	48 8b 0a             	mov    (%rdx),%rcx
  80042039e5:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039e8:	48 63 d2             	movslq %edx,%rdx
  80042039eb:	48 09 ca             	or     %rcx,%rdx
  80042039ee:	48 83 ca 01          	or     $0x1,%rdx
  80042039f2:	48 89 10             	mov    %rdx,(%rax)
  80042039f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042039fc:	00 
  80042039fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a01:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a05:	0f 82 48 fd ff ff    	jb     8004203753 <boot_map_region+0x29>
  8004203a0b:	c9                   	leaveq 
  8004203a0c:	c3                   	retq   

0000008004203a0d <page_insert>:
  8004203a0d:	55                   	push   %rbp
  8004203a0e:	48 89 e5             	mov    %rsp,%rbp
  8004203a11:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a19:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a1d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a21:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a29:	0f 84 47 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a2f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a34:	0f 84 3c 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a3a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a42:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a47:	48 89 ce             	mov    %rcx,%rsi
  8004203a4a:	48 89 c7             	mov    %rax,%rdi
  8004203a4d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203a54:	00 00 00 
  8004203a57:	ff d0                	callq  *%rax
  8004203a59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a62:	0f 84 07 03 00 00    	je     8004203d6f <page_insert+0x362>
  8004203a68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a6c:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a70:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a75:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a7c:	00 
  8004203a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a81:	48 01 d0             	add    %rdx,%rax
  8004203a84:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a88:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a8c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a92:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a99:	00 
  8004203a9a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203a9e:	48 01 ca             	add    %rcx,%rdx
  8004203aa1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203aa4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203aa7:	80 e6 f1             	and    $0xf1,%dh
  8004203aaa:	48 63 d2             	movslq %edx,%rdx
  8004203aad:	48 09 ca             	or     %rcx,%rdx
  8004203ab0:	48 89 10             	mov    %rdx,(%rax)
  8004203ab3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ab7:	48 c1 e8 27          	shr    $0x27,%rax
  8004203abb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ac0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ac7:	00 
  8004203ac8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203acc:	48 01 d0             	add    %rdx,%rax
  8004203acf:	48 8b 00             	mov    (%rax),%rax
  8004203ad2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ad8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203ae0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203ae4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203ae7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203aea:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203af1:	00 00 00 
  8004203af4:	48 8b 00             	mov    (%rax),%rax
  8004203af7:	48 39 c2             	cmp    %rax,%rdx
  8004203afa:	72 32                	jb     8004203b2e <page_insert+0x121>
  8004203afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b00:	48 89 c1             	mov    %rax,%rcx
  8004203b03:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004203b0a:	00 00 00 
  8004203b0d:	be 16 03 00 00       	mov    $0x316,%esi
  8004203b12:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004203b19:	00 00 00 
  8004203b1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203b28:	00 00 00 
  8004203b2b:	41 ff d0             	callq  *%r8
  8004203b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b35:	00 00 00 
  8004203b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b3c:	48 01 d0             	add    %rdx,%rax
  8004203b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b47:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b4b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b50:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b57:	00 
  8004203b58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b5c:	48 01 d0             	add    %rdx,%rax
  8004203b5f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b63:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b67:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b6d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b74:	00 
  8004203b75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b79:	48 01 ca             	add    %rcx,%rdx
  8004203b7c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b7f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b82:	80 e6 f1             	and    $0xf1,%dh
  8004203b85:	48 63 d2             	movslq %edx,%rdx
  8004203b88:	48 09 ca             	or     %rcx,%rdx
  8004203b8b:	48 89 10             	mov    %rdx,(%rax)
  8004203b8e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b92:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b96:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b9b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ba2:	00 
  8004203ba3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ba7:	48 01 d0             	add    %rdx,%rax
  8004203baa:	48 8b 00             	mov    (%rax),%rax
  8004203bad:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bb3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bbb:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bbf:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bc2:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bc5:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203bcc:	00 00 00 
  8004203bcf:	48 8b 00             	mov    (%rax),%rax
  8004203bd2:	48 39 c2             	cmp    %rax,%rdx
  8004203bd5:	72 32                	jb     8004203c09 <page_insert+0x1fc>
  8004203bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bdb:	48 89 c1             	mov    %rax,%rcx
  8004203bde:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004203be5:	00 00 00 
  8004203be8:	be 18 03 00 00       	mov    $0x318,%esi
  8004203bed:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004203bf4:	00 00 00 
  8004203bf7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203bfc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203c03:	00 00 00 
  8004203c06:	41 ff d0             	callq  *%r8
  8004203c09:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c10:	00 00 00 
  8004203c13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c17:	48 01 d0             	add    %rdx,%rax
  8004203c1a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c22:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c26:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c32:	00 
  8004203c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c37:	48 01 d0             	add    %rdx,%rax
  8004203c3a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c3e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c42:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c48:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c4f:	00 
  8004203c50:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c54:	48 01 ca             	add    %rcx,%rdx
  8004203c57:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c5a:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c5d:	80 e6 f1             	and    $0xf1,%dh
  8004203c60:	48 63 d2             	movslq %edx,%rdx
  8004203c63:	48 09 ca             	or     %rcx,%rdx
  8004203c66:	48 89 10             	mov    %rdx,(%rax)
  8004203c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c6d:	48 8b 00             	mov    (%rax),%rax
  8004203c70:	83 e0 01             	and    $0x1,%eax
  8004203c73:	48 85 c0             	test   %rax,%rax
  8004203c76:	74 70                	je     8004203ce8 <page_insert+0x2db>
  8004203c78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c7c:	48 89 c7             	mov    %rax,%rdi
  8004203c7f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203c86:	00 00 00 
  8004203c89:	ff d0                	callq  *%rax
  8004203c8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c8f:	48 8b 12             	mov    (%rdx),%rdx
  8004203c92:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203c99:	48 39 d0             	cmp    %rdx,%rax
  8004203c9c:	75 4a                	jne    8004203ce8 <page_insert+0x2db>
  8004203c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ca2:	48 8b 00             	mov    (%rax),%rax
  8004203ca5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cab:	48 89 c2             	mov    %rax,%rdx
  8004203cae:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cb1:	48 98                	cltq   
  8004203cb3:	48 09 d0             	or     %rdx,%rax
  8004203cb6:	48 83 c8 01          	or     $0x1,%rax
  8004203cba:	48 89 c2             	mov    %rax,%rdx
  8004203cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cc1:	48 89 10             	mov    %rdx,(%rax)
  8004203cc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ccc:	48 89 d6             	mov    %rdx,%rsi
  8004203ccf:	48 89 c7             	mov    %rax,%rdi
  8004203cd2:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203cd9:	00 00 00 
  8004203cdc:	ff d0                	callq  *%rax
  8004203cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ce3:	e9 93 00 00 00       	jmpq   8004203d7b <page_insert+0x36e>
  8004203ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cec:	48 8b 00             	mov    (%rax),%rax
  8004203cef:	83 e0 01             	and    $0x1,%eax
  8004203cf2:	48 85 c0             	test   %rax,%rax
  8004203cf5:	74 1a                	je     8004203d11 <page_insert+0x304>
  8004203cf7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cff:	48 89 d6             	mov    %rdx,%rsi
  8004203d02:	48 89 c7             	mov    %rax,%rdi
  8004203d05:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004203d0c:	00 00 00 
  8004203d0f:	ff d0                	callq  *%rax
  8004203d11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d15:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d19:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d1c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d20:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d28:	48 89 c7             	mov    %rax,%rdi
  8004203d2b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203d32:	00 00 00 
  8004203d35:	ff d0                	callq  *%rax
  8004203d37:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d3a:	48 63 d2             	movslq %edx,%rdx
  8004203d3d:	48 09 d0             	or     %rdx,%rax
  8004203d40:	48 83 c8 01          	or     $0x1,%rax
  8004203d44:	48 89 c2             	mov    %rax,%rdx
  8004203d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d4b:	48 89 10             	mov    %rdx,(%rax)
  8004203d4e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d56:	48 89 d6             	mov    %rdx,%rsi
  8004203d59:	48 89 c7             	mov    %rax,%rdi
  8004203d5c:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203d63:	00 00 00 
  8004203d66:	ff d0                	callq  *%rax
  8004203d68:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d6d:	eb 0c                	jmp    8004203d7b <page_insert+0x36e>
  8004203d6f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d74:	eb 05                	jmp    8004203d7b <page_insert+0x36e>
  8004203d76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d7b:	c9                   	leaveq 
  8004203d7c:	c3                   	retq   

0000008004203d7d <page_lookup>:
  8004203d7d:	55                   	push   %rbp
  8004203d7e:	48 89 e5             	mov    %rsp,%rbp
  8004203d81:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d89:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d8d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d91:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203d96:	74 69                	je     8004203e01 <page_lookup+0x84>
  8004203d98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203da0:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203da5:	48 89 ce             	mov    %rcx,%rsi
  8004203da8:	48 89 c7             	mov    %rax,%rdi
  8004203dab:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203db2:	00 00 00 
  8004203db5:	ff d0                	callq  *%rax
  8004203db7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dbb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dc0:	74 3f                	je     8004203e01 <page_lookup+0x84>
  8004203dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dc6:	48 8b 00             	mov    (%rax),%rax
  8004203dc9:	83 e0 01             	and    $0x1,%eax
  8004203dcc:	48 85 c0             	test   %rax,%rax
  8004203dcf:	74 30                	je     8004203e01 <page_lookup+0x84>
  8004203dd1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203dd6:	74 0b                	je     8004203de3 <page_lookup+0x66>
  8004203dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203ddc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203de0:	48 89 10             	mov    %rdx,(%rax)
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c7             	mov    %rax,%rdi
  8004203df3:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004203dfa:	00 00 00 
  8004203dfd:	ff d0                	callq  *%rax
  8004203dff:	eb 05                	jmp    8004203e06 <page_lookup+0x89>
  8004203e01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e06:	c9                   	leaveq 
  8004203e07:	c3                   	retq   

0000008004203e08 <page_remove>:
  8004203e08:	55                   	push   %rbp
  8004203e09:	48 89 e5             	mov    %rsp,%rbp
  8004203e0c:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e18:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e24:	48 89 ce             	mov    %rcx,%rsi
  8004203e27:	48 89 c7             	mov    %rax,%rdi
  8004203e2a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004203e31:	00 00 00 
  8004203e34:	ff d0                	callq  *%rax
  8004203e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e3f:	74 38                	je     8004203e79 <page_remove+0x71>
  8004203e41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e49:	48 89 d6             	mov    %rdx,%rsi
  8004203e4c:	48 89 c7             	mov    %rax,%rdi
  8004203e4f:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203e56:	00 00 00 
  8004203e59:	ff d0                	callq  *%rax
  8004203e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e5f:	48 89 c7             	mov    %rax,%rdi
  8004203e62:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203e69:	00 00 00 
  8004203e6c:	ff d0                	callq  *%rax
  8004203e6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e79:	c9                   	leaveq 
  8004203e7a:	c3                   	retq   

0000008004203e7b <tlb_invalidate>:
  8004203e7b:	55                   	push   %rbp
  8004203e7c:	48 89 e5             	mov    %rsp,%rbp
  8004203e7f:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e90:	75 35                	jne    8004203ec7 <tlb_invalidate+0x4c>
  8004203e92:	48 b9 77 e4 21 04 80 	movabs $0x800421e477,%rcx
  8004203e99:	00 00 00 
  8004203e9c:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004203ea3:	00 00 00 
  8004203ea6:	be 75 03 00 00       	mov    $0x375,%esi
  8004203eab:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004203eb2:	00 00 00 
  8004203eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203ec1:	00 00 00 
  8004203ec4:	41 ff d0             	callq  *%r8
  8004203ec7:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004203ece:	00 00 00 
  8004203ed1:	ff d0                	callq  *%rax
  8004203ed3:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004203eda:	00 00 00 
  8004203edd:	48 98                	cltq   
  8004203edf:	48 c1 e0 03          	shl    $0x3,%rax
  8004203ee3:	48 89 c1             	mov    %rax,%rcx
  8004203ee6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203eea:	48 01 c8             	add    %rcx,%rax
  8004203eed:	48 01 d0             	add    %rdx,%rax
  8004203ef0:	48 83 c0 08          	add    $0x8,%rax
  8004203ef4:	48 8b 00             	mov    (%rax),%rax
  8004203ef7:	48 85 c0             	test   %rax,%rax
  8004203efa:	74 3d                	je     8004203f39 <tlb_invalidate+0xbe>
  8004203efc:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004203f03:	00 00 00 
  8004203f06:	ff d0                	callq  *%rax
  8004203f08:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004203f0f:	00 00 00 
  8004203f12:	48 98                	cltq   
  8004203f14:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f18:	48 89 c1             	mov    %rax,%rcx
  8004203f1b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f1f:	48 01 c8             	add    %rcx,%rax
  8004203f22:	48 01 d0             	add    %rdx,%rax
  8004203f25:	48 83 c0 08          	add    $0x8,%rax
  8004203f29:	48 8b 00             	mov    (%rax),%rax
  8004203f2c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f33:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f37:	75 0f                	jne    8004203f48 <tlb_invalidate+0xcd>
  8004203f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f45:	0f 01 38             	invlpg (%rax)
  8004203f48:	c9                   	leaveq 
  8004203f49:	c3                   	retq   

0000008004203f4a <mmio_map_region>:
  8004203f4a:	55                   	push   %rbp
  8004203f4b:	48 89 e5             	mov    %rsp,%rbp
  8004203f4e:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f56:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f5a:	48 b8 e0 45 23 04 80 	movabs $0x80042345e0,%rax
  8004203f61:	00 00 00 
  8004203f64:	48 8b 00             	mov    (%rax),%rax
  8004203f67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f6b:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f72:	00 
  8004203f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f7b:	48 01 d0             	add    %rdx,%rax
  8004203f7e:	48 83 e8 01          	sub    $0x1,%rax
  8004203f82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f8f:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f93:	48 89 d0             	mov    %rdx,%rax
  8004203f96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203f9a:	48 29 c2             	sub    %rax,%rdx
  8004203f9d:	48 89 d0             	mov    %rdx,%rax
  8004203fa0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fa4:	48 b8 e0 45 23 04 80 	movabs $0x80042345e0,%rax
  8004203fab:	00 00 00 
  8004203fae:	48 8b 10             	mov    (%rax),%rdx
  8004203fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fb5:	48 01 c2             	add    %rax,%rdx
  8004203fb8:	48 b8 e0 45 23 04 80 	movabs $0x80042345e0,%rax
  8004203fbf:	00 00 00 
  8004203fc2:	48 89 10             	mov    %rdx,(%rax)
  8004203fc5:	48 b8 e0 45 23 04 80 	movabs $0x80042345e0,%rax
  8004203fcc:	00 00 00 
  8004203fcf:	48 8b 10             	mov    (%rax),%rdx
  8004203fd2:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fd9:	00 00 00 
  8004203fdc:	48 39 c2             	cmp    %rax,%rdx
  8004203fdf:	76 2a                	jbe    800420400b <mmio_map_region+0xc1>
  8004203fe1:	48 ba 88 e4 21 04 80 	movabs $0x800421e488,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be a5 03 00 00       	mov    $0x3a5,%esi
  8004203ff0:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004204006:	00 00 00 
  8004204009:	ff d1                	callq  *%rcx
  800420400b:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004204012:	00 00 00 
  8004204015:	48 8b 00             	mov    (%rax),%rax
  8004204018:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420401c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204020:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204024:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420402a:	48 89 c7             	mov    %rax,%rdi
  800420402d:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004204034:	00 00 00 
  8004204037:	ff d0                	callq  *%rax
  8004204039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420403d:	c9                   	leaveq 
  800420403e:	c3                   	retq   

000000800420403f <user_mem_check>:
  800420403f:	55                   	push   %rbp
  8004204040:	48 89 e5             	mov    %rsp,%rbp
  8004204043:	48 83 ec 40          	sub    $0x40,%rsp
  8004204047:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420404b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420404f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204053:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204056:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420405a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420405e:	48 01 d0             	add    %rdx,%rax
  8004204061:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204065:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204069:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004204070:	00 00 00 
  8004204073:	48 39 c2             	cmp    %rax,%rdx
  8004204076:	77 0a                	ja     8004204082 <user_mem_check+0x43>
  8004204078:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420407c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204080:	76 1b                	jbe    800420409d <user_mem_check+0x5e>
  8004204082:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204086:	48 b8 40 c2 4d 04 80 	movabs $0x80044dc240,%rax
  800420408d:	00 00 00 
  8004204090:	48 89 10             	mov    %rdx,(%rax)
  8004204093:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204098:	e9 c0 00 00 00       	jmpq   800420415d <user_mem_check+0x11e>
  800420409d:	e9 a8 00 00 00       	jmpq   800420414a <user_mem_check+0x10b>
  80042040a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040a6:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040b1:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040b6:	48 89 ce             	mov    %rcx,%rsi
  80042040b9:	48 89 c7             	mov    %rax,%rdi
  80042040bc:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042040c3:	00 00 00 
  80042040c6:	ff d0                	callq  *%rax
  80042040c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040d1:	74 1f                	je     80042040f2 <user_mem_check+0xb3>
  80042040d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040d7:	48 8b 10             	mov    (%rax),%rdx
  80042040da:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040dd:	83 c8 01             	or     $0x1,%eax
  80042040e0:	48 98                	cltq   
  80042040e2:	48 21 c2             	and    %rax,%rdx
  80042040e5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e8:	83 c8 01             	or     $0x1,%eax
  80042040eb:	48 98                	cltq   
  80042040ed:	48 39 c2             	cmp    %rax,%rdx
  80042040f0:	74 18                	je     800420410a <user_mem_check+0xcb>
  80042040f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040f6:	48 b8 40 c2 4d 04 80 	movabs $0x80044dc240,%rax
  80042040fd:	00 00 00 
  8004204100:	48 89 10             	mov    %rdx,(%rax)
  8004204103:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204108:	eb 53                	jmp    800420415d <user_mem_check+0x11e>
  800420410a:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204111:	00 
  8004204112:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204116:	48 83 c0 01          	add    $0x1,%rax
  800420411a:	48 89 c2             	mov    %rax,%rdx
  800420411d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204121:	48 01 d0             	add    %rdx,%rax
  8004204124:	48 83 e8 01          	sub    $0x1,%rax
  8004204128:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420412c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204130:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204135:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204139:	48 89 d0             	mov    %rdx,%rax
  800420413c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204140:	48 29 c2             	sub    %rax,%rdx
  8004204143:	48 89 d0             	mov    %rdx,%rax
  8004204146:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420414a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420414e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204152:	0f 82 4a ff ff ff    	jb     80042040a2 <user_mem_check+0x63>
  8004204158:	b8 00 00 00 00       	mov    $0x0,%eax
  800420415d:	c9                   	leaveq 
  800420415e:	c3                   	retq   

000000800420415f <user_mem_assert>:
  800420415f:	55                   	push   %rbp
  8004204160:	48 89 e5             	mov    %rsp,%rbp
  8004204163:	48 83 ec 20          	sub    $0x20,%rsp
  8004204167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420416b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420416f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004204173:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204176:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204179:	83 c8 04             	or     $0x4,%eax
  800420417c:	89 c1                	mov    %eax,%ecx
  800420417e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004204182:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420418a:	48 89 c7             	mov    %rax,%rdi
  800420418d:	48 b8 3f 40 20 04 80 	movabs $0x800420403f,%rax
  8004204194:	00 00 00 
  8004204197:	ff d0                	callq  *%rax
  8004204199:	85 c0                	test   %eax,%eax
  800420419b:	79 47                	jns    80042041e4 <user_mem_assert+0x85>
  800420419d:	48 b8 40 c2 4d 04 80 	movabs $0x80044dc240,%rax
  80042041a4:	00 00 00 
  80042041a7:	48 8b 10             	mov    (%rax),%rdx
  80042041aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ae:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041b4:	89 c6                	mov    %eax,%esi
  80042041b6:	48 bf a8 e4 21 04 80 	movabs $0x800421e4a8,%rdi
  80042041bd:	00 00 00 
  80042041c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041c5:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  80042041cc:	00 00 00 
  80042041cf:	ff d1                	callq  *%rcx
  80042041d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041d5:	48 89 c7             	mov    %rax,%rdi
  80042041d8:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  80042041df:	00 00 00 
  80042041e2:	ff d0                	callq  *%rax
  80042041e4:	c9                   	leaveq 
  80042041e5:	c3                   	retq   

00000080042041e6 <check_page_free_list>:
  80042041e6:	55                   	push   %rbp
  80042041e7:	48 89 e5             	mov    %rsp,%rbp
  80042041ea:	48 83 ec 60          	sub    $0x60,%rsp
  80042041ee:	89 f8                	mov    %edi,%eax
  80042041f0:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041f3:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  80042041f7:	74 07                	je     8004204200 <check_page_free_list+0x1a>
  80042041f9:	b8 01 00 00 00       	mov    $0x1,%eax
  80042041fe:	eb 05                	jmp    8004204205 <check_page_free_list+0x1f>
  8004204200:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204205:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204208:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420420f:	00 
  8004204210:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204217:	00 
  8004204218:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420421f:	00 00 00 
  8004204222:	48 8b 00             	mov    (%rax),%rax
  8004204225:	48 85 c0             	test   %rax,%rax
  8004204228:	75 2a                	jne    8004204254 <check_page_free_list+0x6e>
  800420422a:	48 ba e0 e4 21 04 80 	movabs $0x800421e4e0,%rdx
  8004204231:	00 00 00 
  8004204234:	be 00 04 00 00       	mov    $0x400,%esi
  8004204239:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204240:	00 00 00 
  8004204243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204248:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420424f:	00 00 00 
  8004204252:	ff d1                	callq  *%rcx
  8004204254:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204258:	0f 84 a9 00 00 00    	je     8004204307 <check_page_free_list+0x121>
  800420425e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004204262:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204266:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  800420426a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420426e:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204275:	00 00 00 
  8004204278:	48 8b 00             	mov    (%rax),%rax
  800420427b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420427f:	eb 58                	jmp    80042042d9 <check_page_free_list+0xf3>
  8004204281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204285:	48 89 c7             	mov    %rax,%rdi
  8004204288:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420428f:	00 00 00 
  8004204292:	ff d0                	callq  *%rax
  8004204294:	48 c1 e8 15          	shr    $0x15,%rax
  8004204298:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420429d:	48 89 c2             	mov    %rax,%rdx
  80042042a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042a3:	48 39 c2             	cmp    %rax,%rdx
  80042042a6:	0f 93 c0             	setae  %al
  80042042a9:	0f b6 c0             	movzbl %al,%eax
  80042042ac:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042af:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042b2:	48 98                	cltq   
  80042042b4:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042bd:	48 89 10             	mov    %rdx,(%rax)
  80042042c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042c7:	48 98                	cltq   
  80042042c9:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042d2:	48 8b 00             	mov    (%rax),%rax
  80042042d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042d9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042de:	75 a1                	jne    8004204281 <check_page_free_list+0x9b>
  80042042e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042e4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042f3:	48 89 10             	mov    %rdx,(%rax)
  80042042f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042042fa:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204301:	00 00 00 
  8004204304:	48 89 10             	mov    %rdx,(%rax)
  8004204307:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420430e:	00 00 00 
  8004204311:	48 8b 00             	mov    (%rax),%rax
  8004204314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204318:	eb 5e                	jmp    8004204378 <check_page_free_list+0x192>
  800420431a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431e:	48 89 c7             	mov    %rax,%rdi
  8004204321:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204328:	00 00 00 
  800420432b:	ff d0                	callq  *%rax
  800420432d:	48 c1 e8 15          	shr    $0x15,%rax
  8004204331:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204336:	48 89 c2             	mov    %rax,%rdx
  8004204339:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420433c:	48 39 c2             	cmp    %rax,%rdx
  800420433f:	73 2c                	jae    800420436d <check_page_free_list+0x187>
  8004204341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204345:	48 89 c7             	mov    %rax,%rdi
  8004204348:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  800420434f:	00 00 00 
  8004204352:	ff d0                	callq  *%rax
  8004204354:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204359:	be 97 00 00 00       	mov    $0x97,%esi
  800420435e:	48 89 c7             	mov    %rax,%rdi
  8004204361:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004204368:	00 00 00 
  800420436b:	ff d0                	callq  *%rax
  800420436d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204371:	48 8b 00             	mov    (%rax),%rax
  8004204374:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204378:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420437d:	75 9b                	jne    800420431a <check_page_free_list+0x134>
  800420437f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204384:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  800420438b:	00 00 00 
  800420438e:	ff d0                	callq  *%rax
  8004204390:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204394:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420439b:	00 00 00 
  800420439e:	48 8b 00             	mov    (%rax),%rax
  80042043a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043a5:	e9 20 03 00 00       	jmpq   80042046ca <check_page_free_list+0x4e4>
  80042043aa:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042043b1:	00 00 00 
  80042043b4:	48 8b 00             	mov    (%rax),%rax
  80042043b7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043bb:	73 35                	jae    80042043f2 <check_page_free_list+0x20c>
  80042043bd:	48 b9 04 e5 21 04 80 	movabs $0x800421e504,%rcx
  80042043c4:	00 00 00 
  80042043c7:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042043ce:	00 00 00 
  80042043d1:	be 1a 04 00 00       	mov    $0x41a,%esi
  80042043d6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042043dd:	00 00 00 
  80042043e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042043ec:	00 00 00 
  80042043ef:	41 ff d0             	callq  *%r8
  80042043f2:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042043f9:	00 00 00 
  80042043fc:	48 8b 10             	mov    (%rax),%rdx
  80042043ff:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004204406:	00 00 00 
  8004204409:	48 8b 00             	mov    (%rax),%rax
  800420440c:	48 c1 e0 04          	shl    $0x4,%rax
  8004204410:	48 01 d0             	add    %rdx,%rax
  8004204413:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204417:	77 35                	ja     800420444e <check_page_free_list+0x268>
  8004204419:	48 b9 10 e5 21 04 80 	movabs $0x800421e510,%rcx
  8004204420:	00 00 00 
  8004204423:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420442a:	00 00 00 
  800420442d:	be 1b 04 00 00       	mov    $0x41b,%esi
  8004204432:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204439:	00 00 00 
  800420443c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204441:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204448:	00 00 00 
  800420444b:	41 ff d0             	callq  *%r8
  800420444e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204452:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004204459:	00 00 00 
  800420445c:	48 8b 00             	mov    (%rax),%rax
  800420445f:	48 29 c2             	sub    %rax,%rdx
  8004204462:	48 89 d0             	mov    %rdx,%rax
  8004204465:	83 e0 0f             	and    $0xf,%eax
  8004204468:	48 85 c0             	test   %rax,%rax
  800420446b:	74 35                	je     80042044a2 <check_page_free_list+0x2bc>
  800420446d:	48 b9 28 e5 21 04 80 	movabs $0x800421e528,%rcx
  8004204474:	00 00 00 
  8004204477:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420447e:	00 00 00 
  8004204481:	be 1c 04 00 00       	mov    $0x41c,%esi
  8004204486:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420448d:	00 00 00 
  8004204490:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204495:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420449c:	00 00 00 
  800420449f:	41 ff d0             	callq  *%r8
  80042044a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044a6:	48 89 c7             	mov    %rax,%rdi
  80042044a9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044b0:	00 00 00 
  80042044b3:	ff d0                	callq  *%rax
  80042044b5:	48 85 c0             	test   %rax,%rax
  80042044b8:	75 35                	jne    80042044ef <check_page_free_list+0x309>
  80042044ba:	48 b9 5a e5 21 04 80 	movabs $0x800421e55a,%rcx
  80042044c1:	00 00 00 
  80042044c4:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042044cb:	00 00 00 
  80042044ce:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042044d3:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042044da:	00 00 00 
  80042044dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042044e9:	00 00 00 
  80042044ec:	41 ff d0             	callq  *%r8
  80042044ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044f3:	48 89 c7             	mov    %rax,%rdi
  80042044f6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044fd:	00 00 00 
  8004204500:	ff d0                	callq  *%rax
  8004204502:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204508:	75 35                	jne    800420453f <check_page_free_list+0x359>
  800420450a:	48 b9 6b e5 21 04 80 	movabs $0x800421e56b,%rcx
  8004204511:	00 00 00 
  8004204514:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420451b:	00 00 00 
  800420451e:	be 20 04 00 00       	mov    $0x420,%esi
  8004204523:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420452a:	00 00 00 
  800420452d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204532:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204539:	00 00 00 
  800420453c:	41 ff d0             	callq  *%r8
  800420453f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204543:	48 89 c7             	mov    %rax,%rdi
  8004204546:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420454d:	00 00 00 
  8004204550:	ff d0                	callq  *%rax
  8004204552:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204558:	75 35                	jne    800420458f <check_page_free_list+0x3a9>
  800420455a:	48 b9 88 e5 21 04 80 	movabs $0x800421e588,%rcx
  8004204561:	00 00 00 
  8004204564:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420456b:	00 00 00 
  800420456e:	be 21 04 00 00       	mov    $0x421,%esi
  8004204573:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420457a:	00 00 00 
  800420457d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204582:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204589:	00 00 00 
  800420458c:	41 ff d0             	callq  *%r8
  800420458f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204593:	48 89 c7             	mov    %rax,%rdi
  8004204596:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420459d:	00 00 00 
  80042045a0:	ff d0                	callq  *%rax
  80042045a2:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045a8:	75 35                	jne    80042045df <check_page_free_list+0x3f9>
  80042045aa:	48 b9 ab e5 21 04 80 	movabs $0x800421e5ab,%rcx
  80042045b1:	00 00 00 
  80042045b4:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042045bb:	00 00 00 
  80042045be:	be 22 04 00 00       	mov    $0x422,%esi
  80042045c3:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042045ca:	00 00 00 
  80042045cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045d2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042045d9:	00 00 00 
  80042045dc:	41 ff d0             	callq  *%r8
  80042045df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045e3:	48 89 c7             	mov    %rax,%rdi
  80042045e6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042045ed:	00 00 00 
  80042045f0:	ff d0                	callq  *%rax
  80042045f2:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042045f8:	76 4e                	jbe    8004204648 <check_page_free_list+0x462>
  80042045fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045fe:	48 89 c7             	mov    %rax,%rdi
  8004204601:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204608:	00 00 00 
  800420460b:	ff d0                	callq  *%rax
  800420460d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204611:	73 35                	jae    8004204648 <check_page_free_list+0x462>
  8004204613:	48 b9 c8 e5 21 04 80 	movabs $0x800421e5c8,%rcx
  800420461a:	00 00 00 
  800420461d:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204624:	00 00 00 
  8004204627:	be 23 04 00 00       	mov    $0x423,%esi
  800420462c:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204633:	00 00 00 
  8004204636:	b8 00 00 00 00       	mov    $0x0,%eax
  800420463b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204642:	00 00 00 
  8004204645:	41 ff d0             	callq  *%r8
  8004204648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420464c:	48 89 c7             	mov    %rax,%rdi
  800420464f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204656:	00 00 00 
  8004204659:	ff d0                	callq  *%rax
  800420465b:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  8004204661:	75 35                	jne    8004204698 <check_page_free_list+0x4b2>
  8004204663:	48 b9 04 e6 21 04 80 	movabs $0x800421e604,%rcx
  800420466a:	00 00 00 
  800420466d:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204674:	00 00 00 
  8004204677:	be 26 04 00 00       	mov    $0x426,%esi
  800420467c:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204683:	00 00 00 
  8004204686:	b8 00 00 00 00       	mov    $0x0,%eax
  800420468b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204692:	00 00 00 
  8004204695:	41 ff d0             	callq  *%r8
  8004204698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420469c:	48 89 c7             	mov    %rax,%rdi
  800420469f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042046a6:	00 00 00 
  80042046a9:	ff d0                	callq  *%rax
  80042046ab:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046b1:	77 07                	ja     80042046ba <check_page_free_list+0x4d4>
  80042046b3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046b8:	eb 05                	jmp    80042046bf <check_page_free_list+0x4d9>
  80042046ba:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046c3:	48 8b 00             	mov    (%rax),%rax
  80042046c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046ca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046cf:	0f 85 d5 fc ff ff    	jne    80042043aa <check_page_free_list+0x1c4>
  80042046d5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046da:	75 35                	jne    8004204711 <check_page_free_list+0x52b>
  80042046dc:	48 b9 21 e6 21 04 80 	movabs $0x800421e621,%rcx
  80042046e3:	00 00 00 
  80042046e6:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042046ed:	00 00 00 
  80042046f0:	be 2f 04 00 00       	mov    $0x42f,%esi
  80042046f5:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042046fc:	00 00 00 
  80042046ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204704:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420470b:	00 00 00 
  800420470e:	41 ff d0             	callq  *%r8
  8004204711:	c9                   	leaveq 
  8004204712:	c3                   	retq   

0000008004204713 <check_page_alloc>:
  8004204713:	55                   	push   %rbp
  8004204714:	48 89 e5             	mov    %rsp,%rbp
  8004204717:	48 83 ec 40          	sub    $0x40,%rsp
  800420471b:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204722:	00 00 00 
  8004204725:	48 8b 00             	mov    (%rax),%rax
  8004204728:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420472c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204733:	eb 37                	jmp    800420476c <check_page_alloc+0x59>
  8004204735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204739:	48 89 c7             	mov    %rax,%rdi
  800420473c:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204743:	00 00 00 
  8004204746:	ff d0                	callq  *%rax
  8004204748:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420474d:	be 97 00 00 00       	mov    $0x97,%esi
  8004204752:	48 89 c7             	mov    %rax,%rdi
  8004204755:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  800420475c:	00 00 00 
  800420475f:	ff d0                	callq  *%rax
  8004204761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204765:	48 8b 00             	mov    (%rax),%rax
  8004204768:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420476c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204771:	75 c2                	jne    8004204735 <check_page_alloc+0x22>
  8004204773:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420477a:	00 00 00 
  800420477d:	48 8b 00             	mov    (%rax),%rax
  8004204780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204784:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420478b:	e9 ec 01 00 00       	jmpq   800420497c <check_page_alloc+0x269>
  8004204790:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004204797:	00 00 00 
  800420479a:	48 8b 00             	mov    (%rax),%rax
  800420479d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047a1:	73 35                	jae    80042047d8 <check_page_alloc+0xc5>
  80042047a3:	48 b9 32 e6 21 04 80 	movabs $0x800421e632,%rcx
  80042047aa:	00 00 00 
  80042047ad:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042047b4:	00 00 00 
  80042047b7:	be 49 04 00 00       	mov    $0x449,%esi
  80042047bc:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042047c3:	00 00 00 
  80042047c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047cb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042047d2:	00 00 00 
  80042047d5:	41 ff d0             	callq  *%r8
  80042047d8:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042047df:	00 00 00 
  80042047e2:	48 8b 10             	mov    (%rax),%rdx
  80042047e5:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042047ec:	00 00 00 
  80042047ef:	48 8b 00             	mov    (%rax),%rax
  80042047f2:	48 c1 e0 04          	shl    $0x4,%rax
  80042047f6:	48 01 d0             	add    %rdx,%rax
  80042047f9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042047fd:	77 35                	ja     8004204834 <check_page_alloc+0x121>
  80042047ff:	48 b9 3f e6 21 04 80 	movabs $0x800421e63f,%rcx
  8004204806:	00 00 00 
  8004204809:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204810:	00 00 00 
  8004204813:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204818:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420481f:	00 00 00 
  8004204822:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204827:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420482e:	00 00 00 
  8004204831:	41 ff d0             	callq  *%r8
  8004204834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204838:	48 89 c7             	mov    %rax,%rdi
  800420483b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204842:	00 00 00 
  8004204845:	ff d0                	callq  *%rax
  8004204847:	48 85 c0             	test   %rax,%rax
  800420484a:	75 35                	jne    8004204881 <check_page_alloc+0x16e>
  800420484c:	48 b9 54 e6 21 04 80 	movabs $0x800421e654,%rcx
  8004204853:	00 00 00 
  8004204856:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420485d:	00 00 00 
  8004204860:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204865:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420486c:	00 00 00 
  800420486f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204874:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420487b:	00 00 00 
  800420487e:	41 ff d0             	callq  *%r8
  8004204881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204885:	48 89 c7             	mov    %rax,%rdi
  8004204888:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420488f:	00 00 00 
  8004204892:	ff d0                	callq  *%rax
  8004204894:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420489a:	75 35                	jne    80042048d1 <check_page_alloc+0x1be>
  800420489c:	48 b9 66 e6 21 04 80 	movabs $0x800421e666,%rcx
  80042048a3:	00 00 00 
  80042048a6:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042048ad:	00 00 00 
  80042048b0:	be 4e 04 00 00       	mov    $0x44e,%esi
  80042048b5:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042048bc:	00 00 00 
  80042048bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042048cb:	00 00 00 
  80042048ce:	41 ff d0             	callq  *%r8
  80042048d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048d5:	48 89 c7             	mov    %rax,%rdi
  80042048d8:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042048df:	00 00 00 
  80042048e2:	ff d0                	callq  *%rax
  80042048e4:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048ea:	75 35                	jne    8004204921 <check_page_alloc+0x20e>
  80042048ec:	48 b9 80 e6 21 04 80 	movabs $0x800421e680,%rcx
  80042048f3:	00 00 00 
  80042048f6:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042048fd:	00 00 00 
  8004204900:	be 4f 04 00 00       	mov    $0x44f,%esi
  8004204905:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420490c:	00 00 00 
  800420490f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204914:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420491b:	00 00 00 
  800420491e:	41 ff d0             	callq  *%r8
  8004204921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204925:	48 89 c7             	mov    %rax,%rdi
  8004204928:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420492f:	00 00 00 
  8004204932:	ff d0                	callq  *%rax
  8004204934:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  800420493a:	75 35                	jne    8004204971 <check_page_alloc+0x25e>
  800420493c:	48 b9 a4 e6 21 04 80 	movabs $0x800421e6a4,%rcx
  8004204943:	00 00 00 
  8004204946:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420494d:	00 00 00 
  8004204950:	be 50 04 00 00       	mov    $0x450,%esi
  8004204955:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420495c:	00 00 00 
  800420495f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204964:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420496b:	00 00 00 
  800420496e:	41 ff d0             	callq  *%r8
  8004204971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204975:	48 8b 00             	mov    (%rax),%rax
  8004204978:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420497c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204981:	0f 85 09 fe ff ff    	jne    8004204790 <check_page_alloc+0x7d>
  8004204987:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420498e:	00 
  800420498f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204993:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204997:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420499b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420499f:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049a4:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049ab:	00 00 00 
  80042049ae:	ff d0                	callq  *%rax
  80042049b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049b4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049b9:	75 35                	jne    80042049f0 <check_page_alloc+0x2dd>
  80042049bb:	48 b9 bf e6 21 04 80 	movabs $0x800421e6bf,%rcx
  80042049c2:	00 00 00 
  80042049c5:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042049cc:	00 00 00 
  80042049cf:	be 54 04 00 00       	mov    $0x454,%esi
  80042049d4:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042049db:	00 00 00 
  80042049de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042049ea:	00 00 00 
  80042049ed:	41 ff d0             	callq  *%r8
  80042049f0:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049fc:	00 00 00 
  80042049ff:	ff d0                	callq  *%rax
  8004204a01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a05:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a0a:	75 35                	jne    8004204a41 <check_page_alloc+0x32e>
  8004204a0c:	48 b9 d5 e6 21 04 80 	movabs $0x800421e6d5,%rcx
  8004204a13:	00 00 00 
  8004204a16:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204a1d:	00 00 00 
  8004204a20:	be 55 04 00 00       	mov    $0x455,%esi
  8004204a25:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204a2c:	00 00 00 
  8004204a2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a34:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a3b:	00 00 00 
  8004204a3e:	41 ff d0             	callq  *%r8
  8004204a41:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a46:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204a4d:	00 00 00 
  8004204a50:	ff d0                	callq  *%rax
  8004204a52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a56:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a5b:	75 35                	jne    8004204a92 <check_page_alloc+0x37f>
  8004204a5d:	48 b9 eb e6 21 04 80 	movabs $0x800421e6eb,%rcx
  8004204a64:	00 00 00 
  8004204a67:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204a6e:	00 00 00 
  8004204a71:	be 56 04 00 00       	mov    $0x456,%esi
  8004204a76:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204a7d:	00 00 00 
  8004204a80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a85:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a8c:	00 00 00 
  8004204a8f:	41 ff d0             	callq  *%r8
  8004204a92:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204a97:	75 35                	jne    8004204ace <check_page_alloc+0x3bb>
  8004204a99:	48 b9 01 e7 21 04 80 	movabs $0x800421e701,%rcx
  8004204aa0:	00 00 00 
  8004204aa3:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204aaa:	00 00 00 
  8004204aad:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ab2:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204ab9:	00 00 00 
  8004204abc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ac8:	00 00 00 
  8004204acb:	41 ff d0             	callq  *%r8
  8004204ace:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204ad3:	74 0a                	je     8004204adf <check_page_alloc+0x3cc>
  8004204ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ad9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204add:	75 35                	jne    8004204b14 <check_page_alloc+0x401>
  8004204adf:	48 b9 05 e7 21 04 80 	movabs $0x800421e705,%rcx
  8004204ae6:	00 00 00 
  8004204ae9:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204af0:	00 00 00 
  8004204af3:	be 58 04 00 00       	mov    $0x458,%esi
  8004204af8:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204aff:	00 00 00 
  8004204b02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b07:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b0e:	00 00 00 
  8004204b11:	41 ff d0             	callq  *%r8
  8004204b14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b19:	74 14                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b1f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b23:	74 0a                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b29:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b2d:	75 35                	jne    8004204b64 <check_page_alloc+0x451>
  8004204b2f:	48 b9 18 e7 21 04 80 	movabs $0x800421e718,%rcx
  8004204b36:	00 00 00 
  8004204b39:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204b40:	00 00 00 
  8004204b43:	be 59 04 00 00       	mov    $0x459,%esi
  8004204b48:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204b4f:	00 00 00 
  8004204b52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b5e:	00 00 00 
  8004204b61:	41 ff d0             	callq  *%r8
  8004204b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b68:	48 89 c7             	mov    %rax,%rdi
  8004204b6b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204b72:	00 00 00 
  8004204b75:	ff d0                	callq  *%rax
  8004204b77:	48 ba f8 b5 6d 04 80 	movabs $0x80046db5f8,%rdx
  8004204b7e:	00 00 00 
  8004204b81:	48 8b 12             	mov    (%rdx),%rdx
  8004204b84:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b88:	48 39 d0             	cmp    %rdx,%rax
  8004204b8b:	72 35                	jb     8004204bc2 <check_page_alloc+0x4af>
  8004204b8d:	48 b9 38 e7 21 04 80 	movabs $0x800421e738,%rcx
  8004204b94:	00 00 00 
  8004204b97:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204b9e:	00 00 00 
  8004204ba1:	be 5a 04 00 00       	mov    $0x45a,%esi
  8004204ba6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204bad:	00 00 00 
  8004204bb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bb5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204bbc:	00 00 00 
  8004204bbf:	41 ff d0             	callq  *%r8
  8004204bc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bc6:	48 89 c7             	mov    %rax,%rdi
  8004204bc9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204bd0:	00 00 00 
  8004204bd3:	ff d0                	callq  *%rax
  8004204bd5:	48 ba f8 b5 6d 04 80 	movabs $0x80046db5f8,%rdx
  8004204bdc:	00 00 00 
  8004204bdf:	48 8b 12             	mov    (%rdx),%rdx
  8004204be2:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204be6:	48 39 d0             	cmp    %rdx,%rax
  8004204be9:	72 35                	jb     8004204c20 <check_page_alloc+0x50d>
  8004204beb:	48 b9 55 e7 21 04 80 	movabs $0x800421e755,%rcx
  8004204bf2:	00 00 00 
  8004204bf5:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204bfc:	00 00 00 
  8004204bff:	be 5b 04 00 00       	mov    $0x45b,%esi
  8004204c04:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204c0b:	00 00 00 
  8004204c0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c13:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c1a:	00 00 00 
  8004204c1d:	41 ff d0             	callq  *%r8
  8004204c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c24:	48 89 c7             	mov    %rax,%rdi
  8004204c27:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204c2e:	00 00 00 
  8004204c31:	ff d0                	callq  *%rax
  8004204c33:	48 ba f8 b5 6d 04 80 	movabs $0x80046db5f8,%rdx
  8004204c3a:	00 00 00 
  8004204c3d:	48 8b 12             	mov    (%rdx),%rdx
  8004204c40:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c44:	48 39 d0             	cmp    %rdx,%rax
  8004204c47:	72 35                	jb     8004204c7e <check_page_alloc+0x56b>
  8004204c49:	48 b9 72 e7 21 04 80 	movabs $0x800421e772,%rcx
  8004204c50:	00 00 00 
  8004204c53:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204c5a:	00 00 00 
  8004204c5d:	be 5c 04 00 00       	mov    $0x45c,%esi
  8004204c62:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204c69:	00 00 00 
  8004204c6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c71:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c78:	00 00 00 
  8004204c7b:	41 ff d0             	callq  *%r8
  8004204c7e:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204c85:	00 00 00 
  8004204c88:	48 8b 00             	mov    (%rax),%rax
  8004204c8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c8f:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204c96:	00 00 00 
  8004204c99:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204ca0:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ca5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204cac:	00 00 00 
  8004204caf:	ff d0                	callq  *%rax
  8004204cb1:	48 85 c0             	test   %rax,%rax
  8004204cb4:	74 35                	je     8004204ceb <check_page_alloc+0x5d8>
  8004204cb6:	48 b9 8f e7 21 04 80 	movabs $0x800421e78f,%rcx
  8004204cbd:	00 00 00 
  8004204cc0:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204cc7:	00 00 00 
  8004204cca:	be 63 04 00 00       	mov    $0x463,%esi
  8004204ccf:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204cd6:	00 00 00 
  8004204cd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cde:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ce5:	00 00 00 
  8004204ce8:	41 ff d0             	callq  *%r8
  8004204ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cef:	48 89 c7             	mov    %rax,%rdi
  8004204cf2:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204cf9:	00 00 00 
  8004204cfc:	ff d0                	callq  *%rax
  8004204cfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d02:	48 89 c7             	mov    %rax,%rdi
  8004204d05:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d0c:	00 00 00 
  8004204d0f:	ff d0                	callq  *%rax
  8004204d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d15:	48 89 c7             	mov    %rax,%rdi
  8004204d18:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d1f:	00 00 00 
  8004204d22:	ff d0                	callq  *%rax
  8004204d24:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d2b:	00 
  8004204d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d3c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d41:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d48:	00 00 00 
  8004204d4b:	ff d0                	callq  *%rax
  8004204d4d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d51:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d56:	75 35                	jne    8004204d8d <check_page_alloc+0x67a>
  8004204d58:	48 b9 bf e6 21 04 80 	movabs $0x800421e6bf,%rcx
  8004204d5f:	00 00 00 
  8004204d62:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204d69:	00 00 00 
  8004204d6c:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204d71:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204d78:	00 00 00 
  8004204d7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204d87:	00 00 00 
  8004204d8a:	41 ff d0             	callq  *%r8
  8004204d8d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d92:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d99:	00 00 00 
  8004204d9c:	ff d0                	callq  *%rax
  8004204d9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204da2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204da7:	75 35                	jne    8004204dde <check_page_alloc+0x6cb>
  8004204da9:	48 b9 d5 e6 21 04 80 	movabs $0x800421e6d5,%rcx
  8004204db0:	00 00 00 
  8004204db3:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204dba:	00 00 00 
  8004204dbd:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204dc2:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204dc9:	00 00 00 
  8004204dcc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204dd1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204dd8:	00 00 00 
  8004204ddb:	41 ff d0             	callq  *%r8
  8004204dde:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204de3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204dea:	00 00 00 
  8004204ded:	ff d0                	callq  *%rax
  8004204def:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204df3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204df8:	75 35                	jne    8004204e2f <check_page_alloc+0x71c>
  8004204dfa:	48 b9 eb e6 21 04 80 	movabs $0x800421e6eb,%rcx
  8004204e01:	00 00 00 
  8004204e04:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204e0b:	00 00 00 
  8004204e0e:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204e13:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204e1a:	00 00 00 
  8004204e1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e29:	00 00 00 
  8004204e2c:	41 ff d0             	callq  *%r8
  8004204e2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e34:	75 35                	jne    8004204e6b <check_page_alloc+0x758>
  8004204e36:	48 b9 01 e7 21 04 80 	movabs $0x800421e701,%rcx
  8004204e3d:	00 00 00 
  8004204e40:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204e47:	00 00 00 
  8004204e4a:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204e4f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204e56:	00 00 00 
  8004204e59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e65:	00 00 00 
  8004204e68:	41 ff d0             	callq  *%r8
  8004204e6b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e70:	74 0a                	je     8004204e7c <check_page_alloc+0x769>
  8004204e72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e76:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e7a:	75 35                	jne    8004204eb1 <check_page_alloc+0x79e>
  8004204e7c:	48 b9 05 e7 21 04 80 	movabs $0x800421e705,%rcx
  8004204e83:	00 00 00 
  8004204e86:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204e8d:	00 00 00 
  8004204e90:	be 6e 04 00 00       	mov    $0x46e,%esi
  8004204e95:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204e9c:	00 00 00 
  8004204e9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ea4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204eab:	00 00 00 
  8004204eae:	41 ff d0             	callq  *%r8
  8004204eb1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204eb6:	74 14                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ebc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ec0:	74 0a                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204eca:	75 35                	jne    8004204f01 <check_page_alloc+0x7ee>
  8004204ecc:	48 b9 18 e7 21 04 80 	movabs $0x800421e718,%rcx
  8004204ed3:	00 00 00 
  8004204ed6:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204edd:	00 00 00 
  8004204ee0:	be 6f 04 00 00       	mov    $0x46f,%esi
  8004204ee5:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204eec:	00 00 00 
  8004204eef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ef4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204efb:	00 00 00 
  8004204efe:	41 ff d0             	callq  *%r8
  8004204f01:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f06:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f0d:	00 00 00 
  8004204f10:	ff d0                	callq  *%rax
  8004204f12:	48 85 c0             	test   %rax,%rax
  8004204f15:	74 35                	je     8004204f4c <check_page_alloc+0x839>
  8004204f17:	48 b9 8f e7 21 04 80 	movabs $0x800421e78f,%rcx
  8004204f1e:	00 00 00 
  8004204f21:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204f28:	00 00 00 
  8004204f2b:	be 70 04 00 00       	mov    $0x470,%esi
  8004204f30:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204f37:	00 00 00 
  8004204f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f3f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204f46:	00 00 00 
  8004204f49:	41 ff d0             	callq  *%r8
  8004204f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f50:	48 89 c7             	mov    %rax,%rdi
  8004204f53:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204f5a:	00 00 00 
  8004204f5d:	ff d0                	callq  *%rax
  8004204f5f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f64:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f69:	48 89 c7             	mov    %rax,%rdi
  8004204f6c:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004204f73:	00 00 00 
  8004204f76:	ff d0                	callq  *%rax
  8004204f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f7c:	48 89 c7             	mov    %rax,%rdi
  8004204f7f:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204f86:	00 00 00 
  8004204f89:	ff d0                	callq  *%rax
  8004204f8b:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f90:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f97:	00 00 00 
  8004204f9a:	ff d0                	callq  *%rax
  8004204f9c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fa0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fa5:	75 35                	jne    8004204fdc <check_page_alloc+0x8c9>
  8004204fa7:	48 b9 9e e7 21 04 80 	movabs $0x800421e79e,%rcx
  8004204fae:	00 00 00 
  8004204fb1:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204fb8:	00 00 00 
  8004204fbb:	be 75 04 00 00       	mov    $0x475,%esi
  8004204fc0:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004204fc7:	00 00 00 
  8004204fca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fcf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204fd6:	00 00 00 
  8004204fd9:	41 ff d0             	callq  *%r8
  8004204fdc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fe1:	74 0a                	je     8004204fed <check_page_alloc+0x8da>
  8004204fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204fe7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204feb:	74 35                	je     8004205022 <check_page_alloc+0x90f>
  8004204fed:	48 b9 bc e7 21 04 80 	movabs $0x800421e7bc,%rcx
  8004204ff4:	00 00 00 
  8004204ff7:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004204ffe:	00 00 00 
  8004205001:	be 76 04 00 00       	mov    $0x476,%esi
  8004205006:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420500d:	00 00 00 
  8004205010:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205015:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420501c:	00 00 00 
  800420501f:	41 ff d0             	callq  *%r8
  8004205022:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205026:	48 89 c7             	mov    %rax,%rdi
  8004205029:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004205030:	00 00 00 
  8004205033:	ff d0                	callq  *%rax
  8004205035:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205039:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205040:	eb 4d                	jmp    800420508f <check_page_alloc+0x97c>
  8004205042:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205045:	48 63 d0             	movslq %eax,%rdx
  8004205048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420504c:	48 01 d0             	add    %rdx,%rax
  800420504f:	0f b6 00             	movzbl (%rax),%eax
  8004205052:	84 c0                	test   %al,%al
  8004205054:	74 35                	je     800420508b <check_page_alloc+0x978>
  8004205056:	48 b9 cc e7 21 04 80 	movabs $0x800421e7cc,%rcx
  800420505d:	00 00 00 
  8004205060:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205067:	00 00 00 
  800420506a:	be 79 04 00 00       	mov    $0x479,%esi
  800420506f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205076:	00 00 00 
  8004205079:	b8 00 00 00 00       	mov    $0x0,%eax
  800420507e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205085:	00 00 00 
  8004205088:	41 ff d0             	callq  *%r8
  800420508b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420508f:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004205096:	7e aa                	jle    8004205042 <check_page_alloc+0x92f>
  8004205098:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420509f:	00 00 00 
  80042050a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050a6:	48 89 10             	mov    %rdx,(%rax)
  80042050a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050ad:	48 89 c7             	mov    %rax,%rdi
  80042050b0:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050b7:	00 00 00 
  80042050ba:	ff d0                	callq  *%rax
  80042050bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050c0:	48 89 c7             	mov    %rax,%rdi
  80042050c3:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050ca:	00 00 00 
  80042050cd:	ff d0                	callq  *%rax
  80042050cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050d3:	48 89 c7             	mov    %rax,%rdi
  80042050d6:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050dd:	00 00 00 
  80042050e0:	ff d0                	callq  *%rax
  80042050e2:	48 bf d8 e7 21 04 80 	movabs $0x800421e7d8,%rdi
  80042050e9:	00 00 00 
  80042050ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050f1:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042050f8:	00 00 00 
  80042050fb:	ff d2                	callq  *%rdx
  80042050fd:	c9                   	leaveq 
  80042050fe:	c3                   	retq   

00000080042050ff <check_boot_pml4e>:
  80042050ff:	55                   	push   %rbp
  8004205100:	48 89 e5             	mov    %rsp,%rbp
  8004205103:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420510a:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205111:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004205118:	00 00 00 
  800420511b:	48 8b 00             	mov    (%rax),%rax
  800420511e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205122:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205129:	00 
  800420512a:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205131:	00 00 00 
  8004205134:	48 8b 00             	mov    (%rax),%rax
  8004205137:	48 c1 e0 04          	shl    $0x4,%rax
  800420513b:	48 89 c2             	mov    %rax,%rdx
  800420513e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205142:	48 01 d0             	add    %rdx,%rax
  8004205145:	48 83 e8 01          	sub    $0x1,%rax
  8004205149:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420514d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205151:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205156:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420515a:	48 89 d0             	mov    %rdx,%rax
  800420515d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004205161:	48 29 c2             	sub    %rax,%rdx
  8004205164:	48 89 d0             	mov    %rdx,%rax
  8004205167:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420516b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205172:	00 
  8004205173:	e9 d4 00 00 00       	jmpq   800420524c <check_boot_pml4e+0x14d>
  8004205178:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420517f:	00 00 00 
  8004205182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205186:	48 01 c2             	add    %rax,%rdx
  8004205189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420518d:	48 89 d6             	mov    %rdx,%rsi
  8004205190:	48 89 c7             	mov    %rax,%rdi
  8004205193:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420519a:	00 00 00 
  800420519d:	ff d0                	callq  *%rax
  800420519f:	48 ba 00 b6 6d 04 80 	movabs $0x80046db600,%rdx
  80042051a6:	00 00 00 
  80042051a9:	48 8b 12             	mov    (%rdx),%rdx
  80042051ac:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051b0:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051b7:	00 00 00 
  80042051ba:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051be:	77 32                	ja     80042051f2 <check_boot_pml4e+0xf3>
  80042051c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051c4:	48 89 c1             	mov    %rax,%rcx
  80042051c7:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  80042051ce:	00 00 00 
  80042051d1:	be 99 04 00 00       	mov    $0x499,%esi
  80042051d6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042051dd:	00 00 00 
  80042051e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042051ec:	00 00 00 
  80042051ef:	41 ff d0             	callq  *%r8
  80042051f2:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042051f9:	ff ff ff 
  80042051fc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205200:	48 01 d1             	add    %rdx,%rcx
  8004205203:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205207:	48 01 ca             	add    %rcx,%rdx
  800420520a:	48 39 d0             	cmp    %rdx,%rax
  800420520d:	74 35                	je     8004205244 <check_boot_pml4e+0x145>
  800420520f:	48 b9 f8 e7 21 04 80 	movabs $0x800421e7f8,%rcx
  8004205216:	00 00 00 
  8004205219:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205220:	00 00 00 
  8004205223:	be 99 04 00 00       	mov    $0x499,%esi
  8004205228:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420522f:	00 00 00 
  8004205232:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205237:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420523e:	00 00 00 
  8004205241:	41 ff d0             	callq  *%r8
  8004205244:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420524b:	00 
  800420524c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205250:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205254:	0f 82 1e ff ff ff    	jb     8004205178 <check_boot_pml4e+0x79>
  800420525a:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  8004205261:	00 
  8004205262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205266:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420526c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205270:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205274:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205279:	48 f7 75 c8          	divq   -0x38(%rbp)
  800420527d:	48 89 d0             	mov    %rdx,%rax
  8004205280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205284:	48 29 c2             	sub    %rax,%rdx
  8004205287:	48 89 d0             	mov    %rdx,%rax
  800420528a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420528e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205295:	00 
  8004205296:	e9 d4 00 00 00       	jmpq   800420536f <check_boot_pml4e+0x270>
  800420529b:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052a2:	00 00 00 
  80042052a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052a9:	48 01 c2             	add    %rax,%rdx
  80042052ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052b0:	48 89 d6             	mov    %rdx,%rsi
  80042052b3:	48 89 c7             	mov    %rax,%rdi
  80042052b6:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042052bd:	00 00 00 
  80042052c0:	ff d0                	callq  *%rax
  80042052c2:	48 ba 58 c2 4d 04 80 	movabs $0x80044dc258,%rdx
  80042052c9:	00 00 00 
  80042052cc:	48 8b 12             	mov    (%rdx),%rdx
  80042052cf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052d3:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052da:	00 00 00 
  80042052dd:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052e1:	77 32                	ja     8004205315 <check_boot_pml4e+0x216>
  80042052e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052e7:	48 89 c1             	mov    %rax,%rcx
  80042052ea:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  80042052f1:	00 00 00 
  80042052f4:	be a0 04 00 00       	mov    $0x4a0,%esi
  80042052f9:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205300:	00 00 00 
  8004205303:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205308:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420530f:	00 00 00 
  8004205312:	41 ff d0             	callq  *%r8
  8004205315:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420531c:	ff ff ff 
  800420531f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205323:	48 01 d1             	add    %rdx,%rcx
  8004205326:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420532a:	48 01 ca             	add    %rcx,%rdx
  800420532d:	48 39 d0             	cmp    %rdx,%rax
  8004205330:	74 35                	je     8004205367 <check_boot_pml4e+0x268>
  8004205332:	48 b9 30 e8 21 04 80 	movabs $0x800421e830,%rcx
  8004205339:	00 00 00 
  800420533c:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205343:	00 00 00 
  8004205346:	be a0 04 00 00       	mov    $0x4a0,%esi
  800420534b:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205352:	00 00 00 
  8004205355:	b8 00 00 00 00       	mov    $0x0,%eax
  800420535a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205361:	00 00 00 
  8004205364:	41 ff d0             	callq  *%r8
  8004205367:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420536e:	00 
  800420536f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205373:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205377:	0f 82 1e ff ff ff    	jb     800420529b <check_boot_pml4e+0x19c>
  800420537d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205384:	00 
  8004205385:	eb 6a                	jmp    80042053f1 <check_boot_pml4e+0x2f2>
  8004205387:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420538e:	00 00 00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 01 c2             	add    %rax,%rdx
  8004205398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420539c:	48 89 d6             	mov    %rdx,%rsi
  800420539f:	48 89 c7             	mov    %rax,%rdi
  80042053a2:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042053a9:	00 00 00 
  80042053ac:	ff d0                	callq  *%rax
  80042053ae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053b2:	74 35                	je     80042053e9 <check_boot_pml4e+0x2ea>
  80042053b4:	48 b9 68 e8 21 04 80 	movabs $0x800421e868,%rcx
  80042053bb:	00 00 00 
  80042053be:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042053c5:	00 00 00 
  80042053c8:	be a5 04 00 00       	mov    $0x4a5,%esi
  80042053cd:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042053d4:	00 00 00 
  80042053d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053dc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042053e3:	00 00 00 
  80042053e6:	41 ff d0             	callq  *%r8
  80042053e9:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053f0:	00 
  80042053f1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042053f8:	00 00 00 
  80042053fb:	48 8b 00             	mov    (%rax),%rax
  80042053fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205402:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205406:	0f 87 7b ff ff ff    	ja     8004205387 <check_boot_pml4e+0x288>
  800420540c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205413:	00 
  8004205414:	e9 a1 01 00 00       	jmpq   80042055ba <check_boot_pml4e+0x4bb>
  8004205419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420541d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205421:	48 89 d0             	mov    %rdx,%rax
  8004205424:	48 01 c0             	add    %rax,%rax
  8004205427:	48 01 d0             	add    %rdx,%rax
  800420542a:	48 c1 e0 0f          	shl    $0xf,%rax
  800420542e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205435:	00 00 00 
  8004205438:	48 29 c2             	sub    %rax,%rdx
  800420543b:	48 89 d0             	mov    %rdx,%rax
  800420543e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205442:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205449:	00 
  800420544a:	e9 e0 00 00 00       	jmpq   800420552f <check_boot_pml4e+0x430>
  800420544f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205453:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205457:	48 01 d0             	add    %rdx,%rax
  800420545a:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  8004205461:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205465:	48 89 d6             	mov    %rdx,%rsi
  8004205468:	48 89 c7             	mov    %rax,%rdi
  800420546b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205472:	00 00 00 
  8004205475:	ff d0                	callq  *%rax
  8004205477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420547b:	48 89 d1             	mov    %rdx,%rcx
  800420547e:	48 c1 e1 10          	shl    $0x10,%rcx
  8004205482:	48 ba 00 e0 6d 04 80 	movabs $0x80046de000,%rdx
  8004205489:	00 00 00 
  800420548c:	48 01 ca             	add    %rcx,%rdx
  800420548f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004205493:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420549a:	00 00 00 
  800420549d:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054a1:	77 32                	ja     80042054d5 <check_boot_pml4e+0x3d6>
  80042054a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054a7:	48 89 c1             	mov    %rax,%rcx
  80042054aa:	48 ba 28 e4 21 04 80 	movabs $0x800421e428,%rdx
  80042054b1:	00 00 00 
  80042054b4:	be ae 04 00 00       	mov    $0x4ae,%esi
  80042054b9:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042054c0:	00 00 00 
  80042054c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054c8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042054cf:	00 00 00 
  80042054d2:	41 ff d0             	callq  *%r8
  80042054d5:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054dc:	ff ff ff 
  80042054df:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054e3:	48 01 d1             	add    %rdx,%rcx
  80042054e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054ea:	48 01 ca             	add    %rcx,%rdx
  80042054ed:	48 39 d0             	cmp    %rdx,%rax
  80042054f0:	74 35                	je     8004205527 <check_boot_pml4e+0x428>
  80042054f2:	48 b9 90 e8 21 04 80 	movabs $0x800421e890,%rcx
  80042054f9:	00 00 00 
  80042054fc:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205503:	00 00 00 
  8004205506:	be ae 04 00 00       	mov    $0x4ae,%esi
  800420550b:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205512:	00 00 00 
  8004205515:	b8 00 00 00 00       	mov    $0x0,%eax
  800420551a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205521:	00 00 00 
  8004205524:	41 ff d0             	callq  *%r8
  8004205527:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420552e:	00 
  800420552f:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205536:	00 
  8004205537:	0f 86 12 ff ff ff    	jbe    800420544f <check_boot_pml4e+0x350>
  800420553d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205544:	00 
  8004205545:	eb 64                	jmp    80042055ab <check_boot_pml4e+0x4ac>
  8004205547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420554b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420554f:	48 01 c2             	add    %rax,%rdx
  8004205552:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205556:	48 89 d6             	mov    %rdx,%rsi
  8004205559:	48 89 c7             	mov    %rax,%rdi
  800420555c:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205563:	00 00 00 
  8004205566:	ff d0                	callq  *%rax
  8004205568:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  800420556c:	74 35                	je     80042055a3 <check_boot_pml4e+0x4a4>
  800420556e:	48 b9 d8 e8 21 04 80 	movabs $0x800421e8d8,%rcx
  8004205575:	00 00 00 
  8004205578:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420557f:	00 00 00 
  8004205582:	be b0 04 00 00       	mov    $0x4b0,%esi
  8004205587:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420558e:	00 00 00 
  8004205591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205596:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420559d:	00 00 00 
  80042055a0:	41 ff d0             	callq  *%r8
  80042055a3:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055aa:	00 
  80042055ab:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055b2:	00 
  80042055b3:	76 92                	jbe    8004205547 <check_boot_pml4e+0x448>
  80042055b5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055ba:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055bf:	0f 86 54 fe ff ff    	jbe    8004205419 <check_boot_pml4e+0x31a>
  80042055c5:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042055cc:	00 00 00 
  80042055cf:	48 8b 00             	mov    (%rax),%rax
  80042055d2:	48 83 c0 08          	add    $0x8,%rax
  80042055d6:	48 8b 00             	mov    (%rax),%rax
  80042055d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055eb:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055ee:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055f1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042055f8:	00 00 00 
  80042055fb:	48 8b 00             	mov    (%rax),%rax
  80042055fe:	48 39 c2             	cmp    %rax,%rdx
  8004205601:	72 32                	jb     8004205635 <check_boot_pml4e+0x536>
  8004205603:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205607:	48 89 c1             	mov    %rax,%rcx
  800420560a:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004205611:	00 00 00 
  8004205614:	be ba 04 00 00       	mov    $0x4ba,%esi
  8004205619:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205620:	00 00 00 
  8004205623:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205628:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420562f:	00 00 00 
  8004205632:	41 ff d0             	callq  *%r8
  8004205635:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420563c:	00 00 00 
  800420563f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205643:	48 01 d0             	add    %rdx,%rax
  8004205646:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420564a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420564e:	48 8b 00             	mov    (%rax),%rax
  8004205651:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205657:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800420565b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420565f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205663:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205666:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205669:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205670:	00 00 00 
  8004205673:	48 8b 00             	mov    (%rax),%rax
  8004205676:	48 39 c2             	cmp    %rax,%rdx
  8004205679:	72 32                	jb     80042056ad <check_boot_pml4e+0x5ae>
  800420567b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420567f:	48 89 c1             	mov    %rax,%rcx
  8004205682:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004205689:	00 00 00 
  800420568c:	be bb 04 00 00       	mov    $0x4bb,%esi
  8004205691:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205698:	00 00 00 
  800420569b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056a0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042056a7:	00 00 00 
  80042056aa:	41 ff d0             	callq  *%r8
  80042056ad:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056b4:	00 00 00 
  80042056b7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056bb:	48 01 d0             	add    %rdx,%rax
  80042056be:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056cc:	00 
  80042056cd:	e9 50 01 00 00       	jmpq   8004205822 <check_boot_pml4e+0x723>
  80042056d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056d6:	48 83 f8 04          	cmp    $0x4,%rax
  80042056da:	72 67                	jb     8004205743 <check_boot_pml4e+0x644>
  80042056dc:	48 83 f8 05          	cmp    $0x5,%rax
  80042056e0:	76 06                	jbe    80042056e8 <check_boot_pml4e+0x5e9>
  80042056e2:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056e6:	75 5b                	jne    8004205743 <check_boot_pml4e+0x644>
  80042056e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056ec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056f3:	00 
  80042056f4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042056fb:	48 01 d0             	add    %rdx,%rax
  80042056fe:	48 8b 00             	mov    (%rax),%rax
  8004205701:	83 e0 01             	and    $0x1,%eax
  8004205704:	48 85 c0             	test   %rax,%rax
  8004205707:	75 35                	jne    800420573e <check_boot_pml4e+0x63f>
  8004205709:	48 b9 fb e8 21 04 80 	movabs $0x800421e8fb,%rcx
  8004205710:	00 00 00 
  8004205713:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420571a:	00 00 00 
  800420571d:	be c5 04 00 00       	mov    $0x4c5,%esi
  8004205722:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205729:	00 00 00 
  800420572c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205731:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205738:	00 00 00 
  800420573b:	41 ff d0             	callq  *%r8
  800420573e:	e9 da 00 00 00       	jmpq   800420581d <check_boot_pml4e+0x71e>
  8004205743:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205748:	0f 86 ce 00 00 00    	jbe    800420581c <check_boot_pml4e+0x71d>
  800420574e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205752:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205759:	00 
  800420575a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205761:	48 01 d0             	add    %rdx,%rax
  8004205764:	48 8b 00             	mov    (%rax),%rax
  8004205767:	83 e0 01             	and    $0x1,%eax
  800420576a:	48 85 c0             	test   %rax,%rax
  800420576d:	74 5a                	je     80042057c9 <check_boot_pml4e+0x6ca>
  800420576f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205773:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420577a:	00 
  800420577b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205782:	48 01 d0             	add    %rdx,%rax
  8004205785:	48 8b 00             	mov    (%rax),%rax
  8004205788:	83 e0 02             	and    $0x2,%eax
  800420578b:	48 85 c0             	test   %rax,%rax
  800420578e:	0f 85 88 00 00 00    	jne    800420581c <check_boot_pml4e+0x71d>
  8004205794:	48 b9 0c e9 21 04 80 	movabs $0x800421e90c,%rcx
  800420579b:	00 00 00 
  800420579e:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042057a5:	00 00 00 
  80042057a8:	be ca 04 00 00       	mov    $0x4ca,%esi
  80042057ad:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042057b4:	00 00 00 
  80042057b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042057c3:	00 00 00 
  80042057c6:	41 ff d0             	callq  *%r8
  80042057c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057d4:	00 
  80042057d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057dc:	48 01 d0             	add    %rdx,%rax
  80042057df:	48 8b 00             	mov    (%rax),%rax
  80042057e2:	48 85 c0             	test   %rax,%rax
  80042057e5:	74 35                	je     800420581c <check_boot_pml4e+0x71d>
  80042057e7:	48 b9 1d e9 21 04 80 	movabs $0x800421e91d,%rcx
  80042057ee:	00 00 00 
  80042057f1:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042057f8:	00 00 00 
  80042057fb:	be cc 04 00 00       	mov    $0x4cc,%esi
  8004205800:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205807:	00 00 00 
  800420580a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420580f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205816:	00 00 00 
  8004205819:	41 ff d0             	callq  *%r8
  800420581c:	90                   	nop
  800420581d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205822:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205829:	00 
  800420582a:	0f 86 a2 fe ff ff    	jbe    80042056d2 <check_boot_pml4e+0x5d3>
  8004205830:	48 bf 30 e9 21 04 80 	movabs $0x800421e930,%rdi
  8004205837:	00 00 00 
  800420583a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420583f:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004205846:	00 00 00 
  8004205849:	ff d2                	callq  *%rdx
  800420584b:	c9                   	leaveq 
  800420584c:	c3                   	retq   

000000800420584d <check_va2pa>:
  800420584d:	55                   	push   %rbp
  800420584e:	48 89 e5             	mov    %rsp,%rbp
  8004205851:	48 83 ec 60          	sub    $0x60,%rsp
  8004205855:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205859:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420585d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205861:	48 c1 e8 27          	shr    $0x27,%rax
  8004205865:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420586a:	48 c1 e0 03          	shl    $0x3,%rax
  800420586e:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  8004205872:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205876:	48 8b 00             	mov    (%rax),%rax
  8004205879:	83 e0 01             	and    $0x1,%eax
  800420587c:	48 85 c0             	test   %rax,%rax
  800420587f:	75 0c                	jne    800420588d <check_va2pa+0x40>
  8004205881:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205888:	e9 38 02 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  800420588d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205891:	48 8b 00             	mov    (%rax),%rax
  8004205894:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420589a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420589e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058a2:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058a6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058ac:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042058b3:	00 00 00 
  80042058b6:	48 8b 00             	mov    (%rax),%rax
  80042058b9:	48 39 c2             	cmp    %rax,%rdx
  80042058bc:	72 32                	jb     80042058f0 <check_va2pa+0xa3>
  80042058be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058c2:	48 89 c1             	mov    %rax,%rcx
  80042058c5:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  80042058cc:	00 00 00 
  80042058cf:	be e4 04 00 00       	mov    $0x4e4,%esi
  80042058d4:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042058db:	00 00 00 
  80042058de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042058ea:	00 00 00 
  80042058ed:	41 ff d0             	callq  *%r8
  80042058f0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042058f7:	00 00 00 
  80042058fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058fe:	48 01 d0             	add    %rdx,%rax
  8004205901:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205905:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205909:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420590d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420591e:	48 01 d0             	add    %rdx,%rax
  8004205921:	48 8b 00             	mov    (%rax),%rax
  8004205924:	83 e0 01             	and    $0x1,%eax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	75 0c                	jne    8004205938 <check_va2pa+0xeb>
  800420592c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205933:	e9 8d 01 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  8004205938:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420593c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205940:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205945:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420594c:	00 
  800420594d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205951:	48 01 d0             	add    %rdx,%rax
  8004205954:	48 8b 00             	mov    (%rax),%rax
  8004205957:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420595d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205965:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205969:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420596c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420596f:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205976:	00 00 00 
  8004205979:	48 8b 00             	mov    (%rax),%rax
  800420597c:	48 39 c2             	cmp    %rax,%rdx
  800420597f:	72 32                	jb     80042059b3 <check_va2pa+0x166>
  8004205981:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205985:	48 89 c1             	mov    %rax,%rcx
  8004205988:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  800420598f:	00 00 00 
  8004205992:	be e8 04 00 00       	mov    $0x4e8,%esi
  8004205997:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420599e:	00 00 00 
  80042059a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059a6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042059ad:	00 00 00 
  80042059b0:	41 ff d0             	callq  *%r8
  80042059b3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059ba:	00 00 00 
  80042059bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059c1:	48 01 d0             	add    %rdx,%rax
  80042059c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059c8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059cc:	48 c1 e8 15          	shr    $0x15,%rax
  80042059d0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042059d9:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059e1:	48 8b 00             	mov    (%rax),%rax
  80042059e4:	83 e0 01             	and    $0x1,%eax
  80042059e7:	48 85 c0             	test   %rax,%rax
  80042059ea:	75 0c                	jne    80042059f8 <check_va2pa+0x1ab>
  80042059ec:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059f3:	e9 cd 00 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  80042059f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059fc:	48 8b 00             	mov    (%rax),%rax
  80042059ff:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a05:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a0d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a11:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a14:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a17:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205a1e:	00 00 00 
  8004205a21:	48 8b 00             	mov    (%rax),%rax
  8004205a24:	48 39 c2             	cmp    %rax,%rdx
  8004205a27:	72 32                	jb     8004205a5b <check_va2pa+0x20e>
  8004205a29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a2d:	48 89 c1             	mov    %rax,%rcx
  8004205a30:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004205a37:	00 00 00 
  8004205a3a:	be ed 04 00 00       	mov    $0x4ed,%esi
  8004205a3f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205a46:	00 00 00 
  8004205a49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a4e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205a55:	00 00 00 
  8004205a58:	41 ff d0             	callq  *%r8
  8004205a5b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a62:	00 00 00 
  8004205a65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a69:	48 01 d0             	add    %rdx,%rax
  8004205a6c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a74:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a78:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a7d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a84:	00 
  8004205a85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a89:	48 01 d0             	add    %rdx,%rax
  8004205a8c:	48 8b 00             	mov    (%rax),%rax
  8004205a8f:	83 e0 01             	and    $0x1,%eax
  8004205a92:	48 85 c0             	test   %rax,%rax
  8004205a95:	75 09                	jne    8004205aa0 <check_va2pa+0x253>
  8004205a97:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a9e:	eb 25                	jmp    8004205ac5 <check_va2pa+0x278>
  8004205aa0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205aa4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aa8:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205aad:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ab4:	00 
  8004205ab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ab9:	48 01 d0             	add    %rdx,%rax
  8004205abc:	48 8b 00             	mov    (%rax),%rax
  8004205abf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ac5:	c9                   	leaveq 
  8004205ac6:	c3                   	retq   

0000008004205ac7 <page_check>:
  8004205ac7:	55                   	push   %rbp
  8004205ac8:	48 89 e5             	mov    %rsp,%rbp
  8004205acb:	53                   	push   %rbx
  8004205acc:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205ad3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ada:	00 
  8004205adb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205adf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205ae7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205aeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205aef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205af7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205afb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205aff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b03:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b08:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b0f:	00 00 00 
  8004205b12:	ff d0                	callq  *%rax
  8004205b14:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b18:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b1d:	75 35                	jne    8004205b54 <page_check+0x8d>
  8004205b1f:	48 b9 4f e9 21 04 80 	movabs $0x800421e94f,%rcx
  8004205b26:	00 00 00 
  8004205b29:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205b30:	00 00 00 
  8004205b33:	be 05 05 00 00       	mov    $0x505,%esi
  8004205b38:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205b3f:	00 00 00 
  8004205b42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b4e:	00 00 00 
  8004205b51:	41 ff d0             	callq  *%r8
  8004205b54:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b59:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b60:	00 00 00 
  8004205b63:	ff d0                	callq  *%rax
  8004205b65:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b69:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b6e:	75 35                	jne    8004205ba5 <page_check+0xde>
  8004205b70:	48 b9 63 e9 21 04 80 	movabs $0x800421e963,%rcx
  8004205b77:	00 00 00 
  8004205b7a:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205b81:	00 00 00 
  8004205b84:	be 06 05 00 00       	mov    $0x506,%esi
  8004205b89:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205b90:	00 00 00 
  8004205b93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b9f:	00 00 00 
  8004205ba2:	41 ff d0             	callq  *%r8
  8004205ba5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205baa:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205bb1:	00 00 00 
  8004205bb4:	ff d0                	callq  *%rax
  8004205bb6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bbf:	75 35                	jne    8004205bf6 <page_check+0x12f>
  8004205bc1:	48 b9 77 e9 21 04 80 	movabs $0x800421e977,%rcx
  8004205bc8:	00 00 00 
  8004205bcb:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205bd2:	00 00 00 
  8004205bd5:	be 07 05 00 00       	mov    $0x507,%esi
  8004205bda:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205be1:	00 00 00 
  8004205be4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205be9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205bf0:	00 00 00 
  8004205bf3:	41 ff d0             	callq  *%r8
  8004205bf6:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bfb:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c02:	00 00 00 
  8004205c05:	ff d0                	callq  *%rax
  8004205c07:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c0b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c10:	75 35                	jne    8004205c47 <page_check+0x180>
  8004205c12:	48 b9 8b e9 21 04 80 	movabs $0x800421e98b,%rcx
  8004205c19:	00 00 00 
  8004205c1c:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205c23:	00 00 00 
  8004205c26:	be 08 05 00 00       	mov    $0x508,%esi
  8004205c2b:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205c32:	00 00 00 
  8004205c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c41:	00 00 00 
  8004205c44:	41 ff d0             	callq  *%r8
  8004205c47:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c53:	00 00 00 
  8004205c56:	ff d0                	callq  *%rax
  8004205c58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c61:	75 35                	jne    8004205c98 <page_check+0x1d1>
  8004205c63:	48 b9 9f e9 21 04 80 	movabs $0x800421e99f,%rcx
  8004205c6a:	00 00 00 
  8004205c6d:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205c74:	00 00 00 
  8004205c77:	be 09 05 00 00       	mov    $0x509,%esi
  8004205c7c:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205c83:	00 00 00 
  8004205c86:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c92:	00 00 00 
  8004205c95:	41 ff d0             	callq  *%r8
  8004205c98:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9d:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205ca4:	00 00 00 
  8004205ca7:	ff d0                	callq  *%rax
  8004205ca9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cb2:	75 35                	jne    8004205ce9 <page_check+0x222>
  8004205cb4:	48 b9 b3 e9 21 04 80 	movabs $0x800421e9b3,%rcx
  8004205cbb:	00 00 00 
  8004205cbe:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205cc5:	00 00 00 
  8004205cc8:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205ccd:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205cd4:	00 00 00 
  8004205cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ce3:	00 00 00 
  8004205ce6:	41 ff d0             	callq  *%r8
  8004205ce9:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cee:	75 35                	jne    8004205d25 <page_check+0x25e>
  8004205cf0:	48 b9 01 e7 21 04 80 	movabs $0x800421e701,%rcx
  8004205cf7:	00 00 00 
  8004205cfa:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205d01:	00 00 00 
  8004205d04:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205d09:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205d10:	00 00 00 
  8004205d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d1f:	00 00 00 
  8004205d22:	41 ff d0             	callq  *%r8
  8004205d25:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d2a:	74 0a                	je     8004205d36 <page_check+0x26f>
  8004205d2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d30:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d34:	75 35                	jne    8004205d6b <page_check+0x2a4>
  8004205d36:	48 b9 05 e7 21 04 80 	movabs $0x800421e705,%rcx
  8004205d3d:	00 00 00 
  8004205d40:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205d47:	00 00 00 
  8004205d4a:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205d4f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205d56:	00 00 00 
  8004205d59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d65:	00 00 00 
  8004205d68:	41 ff d0             	callq  *%r8
  8004205d6b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d70:	74 14                	je     8004205d86 <page_check+0x2bf>
  8004205d72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d76:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d7a:	74 0a                	je     8004205d86 <page_check+0x2bf>
  8004205d7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d80:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d84:	75 35                	jne    8004205dbb <page_check+0x2f4>
  8004205d86:	48 b9 18 e7 21 04 80 	movabs $0x800421e718,%rcx
  8004205d8d:	00 00 00 
  8004205d90:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205d97:	00 00 00 
  8004205d9a:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205d9f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205da6:	00 00 00 
  8004205da9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205db5:	00 00 00 
  8004205db8:	41 ff d0             	callq  *%r8
  8004205dbb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dc0:	74 1e                	je     8004205de0 <page_check+0x319>
  8004205dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dc6:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dca:	74 14                	je     8004205de0 <page_check+0x319>
  8004205dcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd0:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205dd4:	74 0a                	je     8004205de0 <page_check+0x319>
  8004205dd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dda:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dde:	75 35                	jne    8004205e15 <page_check+0x34e>
  8004205de0:	48 b9 c8 e9 21 04 80 	movabs $0x800421e9c8,%rcx
  8004205de7:	00 00 00 
  8004205dea:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205df1:	00 00 00 
  8004205df4:	be 0f 05 00 00       	mov    $0x50f,%esi
  8004205df9:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205e00:	00 00 00 
  8004205e03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e08:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e0f:	00 00 00 
  8004205e12:	41 ff d0             	callq  *%r8
  8004205e15:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e1a:	74 28                	je     8004205e44 <page_check+0x37d>
  8004205e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e20:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e24:	74 1e                	je     8004205e44 <page_check+0x37d>
  8004205e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e2e:	74 14                	je     8004205e44 <page_check+0x37d>
  8004205e30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e34:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e38:	74 0a                	je     8004205e44 <page_check+0x37d>
  8004205e3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e3e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e42:	75 35                	jne    8004205e79 <page_check+0x3b2>
  8004205e44:	48 b9 f8 e9 21 04 80 	movabs $0x800421e9f8,%rcx
  8004205e4b:	00 00 00 
  8004205e4e:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205e55:	00 00 00 
  8004205e58:	be 10 05 00 00       	mov    $0x510,%esi
  8004205e5d:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205e64:	00 00 00 
  8004205e67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e6c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e73:	00 00 00 
  8004205e76:	41 ff d0             	callq  *%r8
  8004205e79:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e7e:	74 32                	je     8004205eb2 <page_check+0x3eb>
  8004205e80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e84:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e88:	74 28                	je     8004205eb2 <page_check+0x3eb>
  8004205e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e8e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e92:	74 1e                	je     8004205eb2 <page_check+0x3eb>
  8004205e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e98:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e9c:	74 14                	je     8004205eb2 <page_check+0x3eb>
  8004205e9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea2:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ea6:	74 0a                	je     8004205eb2 <page_check+0x3eb>
  8004205ea8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eac:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205eb0:	75 35                	jne    8004205ee7 <page_check+0x420>
  8004205eb2:	48 b9 38 ea 21 04 80 	movabs $0x800421ea38,%rcx
  8004205eb9:	00 00 00 
  8004205ebc:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205ec3:	00 00 00 
  8004205ec6:	be 11 05 00 00       	mov    $0x511,%esi
  8004205ecb:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205ed2:	00 00 00 
  8004205ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205eda:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ee1:	00 00 00 
  8004205ee4:	41 ff d0             	callq  *%r8
  8004205ee7:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004205eee:	00 00 00 
  8004205ef1:	48 8b 00             	mov    (%rax),%rax
  8004205ef4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205ef8:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004205eff:	00 00 00 
  8004205f02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f09:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f0e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205f15:	00 00 00 
  8004205f18:	ff d0                	callq  *%rax
  8004205f1a:	48 85 c0             	test   %rax,%rax
  8004205f1d:	74 35                	je     8004205f54 <page_check+0x48d>
  8004205f1f:	48 b9 8f e7 21 04 80 	movabs $0x800421e78f,%rcx
  8004205f26:	00 00 00 
  8004205f29:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205f30:	00 00 00 
  8004205f33:	be 18 05 00 00       	mov    $0x518,%esi
  8004205f38:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205f3f:	00 00 00 
  8004205f42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205f4e:	00 00 00 
  8004205f51:	41 ff d0             	callq  *%r8
  8004205f54:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004205f5b:	00 00 00 
  8004205f5e:	48 8b 00             	mov    (%rax),%rax
  8004205f61:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f68:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f6d:	48 89 c7             	mov    %rax,%rdi
  8004205f70:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004205f77:	00 00 00 
  8004205f7a:	ff d0                	callq  *%rax
  8004205f7c:	48 85 c0             	test   %rax,%rax
  8004205f7f:	74 35                	je     8004205fb6 <page_check+0x4ef>
  8004205f81:	48 b9 88 ea 21 04 80 	movabs $0x800421ea88,%rcx
  8004205f88:	00 00 00 
  8004205f8b:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205f92:	00 00 00 
  8004205f95:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004205f9a:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004205fa1:	00 00 00 
  8004205fa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fa9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205fb0:	00 00 00 
  8004205fb3:	41 ff d0             	callq  *%r8
  8004205fb6:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004205fbd:	00 00 00 
  8004205fc0:	48 8b 00             	mov    (%rax),%rax
  8004205fc3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fc7:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fcc:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fd1:	48 89 c7             	mov    %rax,%rdi
  8004205fd4:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004205fdb:	00 00 00 
  8004205fde:	ff d0                	callq  *%rax
  8004205fe0:	85 c0                	test   %eax,%eax
  8004205fe2:	78 35                	js     8004206019 <page_check+0x552>
  8004205fe4:	48 b9 c0 ea 21 04 80 	movabs $0x800421eac0,%rcx
  8004205feb:	00 00 00 
  8004205fee:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004205ff5:	00 00 00 
  8004205ff8:	be 1e 05 00 00       	mov    $0x51e,%esi
  8004205ffd:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206004:	00 00 00 
  8004206007:	b8 00 00 00 00       	mov    $0x0,%eax
  800420600c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206013:	00 00 00 
  8004206016:	41 ff d0             	callq  *%r8
  8004206019:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420601d:	48 89 c7             	mov    %rax,%rdi
  8004206020:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004206027:	00 00 00 
  800420602a:	ff d0                	callq  *%rax
  800420602c:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420603d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206042:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206047:	48 89 c7             	mov    %rax,%rdi
  800420604a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206051:	00 00 00 
  8004206054:	ff d0                	callq  *%rax
  8004206056:	85 c0                	test   %eax,%eax
  8004206058:	78 35                	js     800420608f <page_check+0x5c8>
  800420605a:	48 b9 c0 ea 21 04 80 	movabs $0x800421eac0,%rcx
  8004206061:	00 00 00 
  8004206064:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420606b:	00 00 00 
  800420606e:	be 22 05 00 00       	mov    $0x522,%esi
  8004206073:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420607a:	00 00 00 
  800420607d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206082:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206089:	00 00 00 
  800420608c:	41 ff d0             	callq  *%r8
  800420608f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206093:	48 89 c7             	mov    %rax,%rdi
  8004206096:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420609d:	00 00 00 
  80042060a0:	ff d0                	callq  *%rax
  80042060a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060a6:	48 89 c7             	mov    %rax,%rdi
  80042060a9:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042060b0:	00 00 00 
  80042060b3:	ff d0                	callq  *%rax
  80042060b5:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042060bc:	00 00 00 
  80042060bf:	48 8b 00             	mov    (%rax),%rax
  80042060c2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060cb:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060d0:	48 89 c7             	mov    %rax,%rdi
  80042060d3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042060da:	00 00 00 
  80042060dd:	ff d0                	callq  *%rax
  80042060df:	85 c0                	test   %eax,%eax
  80042060e1:	74 35                	je     8004206118 <page_check+0x651>
  80042060e3:	48 b9 f0 ea 21 04 80 	movabs $0x800421eaf0,%rcx
  80042060ea:	00 00 00 
  80042060ed:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042060f4:	00 00 00 
  80042060f7:	be 28 05 00 00       	mov    $0x528,%esi
  80042060fc:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206103:	00 00 00 
  8004206106:	b8 00 00 00 00       	mov    $0x0,%eax
  800420610b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206112:	00 00 00 
  8004206115:	41 ff d0             	callq  *%r8
  8004206118:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420611f:	00 00 00 
  8004206122:	48 8b 00             	mov    (%rax),%rax
  8004206125:	48 8b 00             	mov    (%rax),%rax
  8004206128:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420612e:	48 89 c3             	mov    %rax,%rbx
  8004206131:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206135:	48 89 c7             	mov    %rax,%rdi
  8004206138:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420613f:	00 00 00 
  8004206142:	ff d0                	callq  *%rax
  8004206144:	48 39 c3             	cmp    %rax,%rbx
  8004206147:	0f 84 97 00 00 00    	je     80042061e4 <page_check+0x71d>
  800420614d:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206154:	00 00 00 
  8004206157:	48 8b 00             	mov    (%rax),%rax
  800420615a:	48 8b 00             	mov    (%rax),%rax
  800420615d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206163:	48 89 c3             	mov    %rax,%rbx
  8004206166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420616a:	48 89 c7             	mov    %rax,%rdi
  800420616d:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206174:	00 00 00 
  8004206177:	ff d0                	callq  *%rax
  8004206179:	48 39 c3             	cmp    %rax,%rbx
  800420617c:	74 66                	je     80042061e4 <page_check+0x71d>
  800420617e:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206185:	00 00 00 
  8004206188:	48 8b 00             	mov    (%rax),%rax
  800420618b:	48 8b 00             	mov    (%rax),%rax
  800420618e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206194:	48 89 c3             	mov    %rax,%rbx
  8004206197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420619b:	48 89 c7             	mov    %rax,%rdi
  800420619e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042061a5:	00 00 00 
  80042061a8:	ff d0                	callq  *%rax
  80042061aa:	48 39 c3             	cmp    %rax,%rbx
  80042061ad:	74 35                	je     80042061e4 <page_check+0x71d>
  80042061af:	48 b9 20 eb 21 04 80 	movabs $0x800421eb20,%rcx
  80042061b6:	00 00 00 
  80042061b9:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042061c0:	00 00 00 
  80042061c3:	be 29 05 00 00       	mov    $0x529,%esi
  80042061c8:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042061cf:	00 00 00 
  80042061d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061d7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042061de:	00 00 00 
  80042061e1:	41 ff d0             	callq  *%r8
  80042061e4:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042061eb:	00 00 00 
  80042061ee:	48 8b 00             	mov    (%rax),%rax
  80042061f1:	be 00 00 00 00       	mov    $0x0,%esi
  80042061f6:	48 89 c7             	mov    %rax,%rdi
  80042061f9:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206200:	00 00 00 
  8004206203:	ff d0                	callq  *%rax
  8004206205:	48 89 c3             	mov    %rax,%rbx
  8004206208:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420620c:	48 89 c7             	mov    %rax,%rdi
  800420620f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206216:	00 00 00 
  8004206219:	ff d0                	callq  *%rax
  800420621b:	48 39 c3             	cmp    %rax,%rbx
  800420621e:	74 35                	je     8004206255 <page_check+0x78e>
  8004206220:	48 b9 a8 eb 21 04 80 	movabs $0x800421eba8,%rcx
  8004206227:	00 00 00 
  800420622a:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206231:	00 00 00 
  8004206234:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206239:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206240:	00 00 00 
  8004206243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206248:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420624f:	00 00 00 
  8004206252:	41 ff d0             	callq  *%r8
  8004206255:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206259:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420625d:	66 83 f8 01          	cmp    $0x1,%ax
  8004206261:	74 35                	je     8004206298 <page_check+0x7d1>
  8004206263:	48 b9 d5 eb 21 04 80 	movabs $0x800421ebd5,%rcx
  800420626a:	00 00 00 
  800420626d:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206274:	00 00 00 
  8004206277:	be 2b 05 00 00       	mov    $0x52b,%esi
  800420627c:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206283:	00 00 00 
  8004206286:	b8 00 00 00 00       	mov    $0x0,%eax
  800420628b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206292:	00 00 00 
  8004206295:	41 ff d0             	callq  *%r8
  8004206298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420629c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062a0:	66 83 f8 01          	cmp    $0x1,%ax
  80042062a4:	74 35                	je     80042062db <page_check+0x814>
  80042062a6:	48 b9 e6 eb 21 04 80 	movabs $0x800421ebe6,%rcx
  80042062ad:	00 00 00 
  80042062b0:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042062b7:	00 00 00 
  80042062ba:	be 2c 05 00 00       	mov    $0x52c,%esi
  80042062bf:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042062c6:	00 00 00 
  80042062c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062ce:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042062d5:	00 00 00 
  80042062d8:	41 ff d0             	callq  *%r8
  80042062db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062df:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062e3:	66 83 f8 01          	cmp    $0x1,%ax
  80042062e7:	74 35                	je     800420631e <page_check+0x857>
  80042062e9:	48 b9 f7 eb 21 04 80 	movabs $0x800421ebf7,%rcx
  80042062f0:	00 00 00 
  80042062f3:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042062fa:	00 00 00 
  80042062fd:	be 2d 05 00 00       	mov    $0x52d,%esi
  8004206302:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206309:	00 00 00 
  800420630c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206311:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206318:	00 00 00 
  800420631b:	41 ff d0             	callq  *%r8
  800420631e:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206325:	00 00 00 
  8004206328:	48 8b 00             	mov    (%rax),%rax
  800420632b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420632f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206334:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206339:	48 89 c7             	mov    %rax,%rdi
  800420633c:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206343:	00 00 00 
  8004206346:	ff d0                	callq  *%rax
  8004206348:	85 c0                	test   %eax,%eax
  800420634a:	74 35                	je     8004206381 <page_check+0x8ba>
  800420634c:	48 b9 08 ec 21 04 80 	movabs $0x800421ec08,%rcx
  8004206353:	00 00 00 
  8004206356:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420635d:	00 00 00 
  8004206360:	be 2f 05 00 00       	mov    $0x52f,%esi
  8004206365:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420636c:	00 00 00 
  800420636f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206374:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420637b:	00 00 00 
  800420637e:	41 ff d0             	callq  *%r8
  8004206381:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206388:	00 00 00 
  800420638b:	48 8b 00             	mov    (%rax),%rax
  800420638e:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206393:	48 89 c7             	mov    %rax,%rdi
  8004206396:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420639d:	00 00 00 
  80042063a0:	ff d0                	callq  *%rax
  80042063a2:	48 89 c3             	mov    %rax,%rbx
  80042063a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063a9:	48 89 c7             	mov    %rax,%rdi
  80042063ac:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042063b3:	00 00 00 
  80042063b6:	ff d0                	callq  *%rax
  80042063b8:	48 39 c3             	cmp    %rax,%rbx
  80042063bb:	74 35                	je     80042063f2 <page_check+0x92b>
  80042063bd:	48 b9 40 ec 21 04 80 	movabs $0x800421ec40,%rcx
  80042063c4:	00 00 00 
  80042063c7:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042063ce:	00 00 00 
  80042063d1:	be 30 05 00 00       	mov    $0x530,%esi
  80042063d6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042063dd:	00 00 00 
  80042063e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042063ec:	00 00 00 
  80042063ef:	41 ff d0             	callq  *%r8
  80042063f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063fa:	66 83 f8 02          	cmp    $0x2,%ax
  80042063fe:	74 35                	je     8004206435 <page_check+0x96e>
  8004206400:	48 b9 70 ec 21 04 80 	movabs $0x800421ec70,%rcx
  8004206407:	00 00 00 
  800420640a:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206411:	00 00 00 
  8004206414:	be 31 05 00 00       	mov    $0x531,%esi
  8004206419:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206420:	00 00 00 
  8004206423:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206428:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420642f:	00 00 00 
  8004206432:	41 ff d0             	callq  *%r8
  8004206435:	bf 00 00 00 00       	mov    $0x0,%edi
  800420643a:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004206441:	00 00 00 
  8004206444:	ff d0                	callq  *%rax
  8004206446:	48 85 c0             	test   %rax,%rax
  8004206449:	74 35                	je     8004206480 <page_check+0x9b9>
  800420644b:	48 b9 8f e7 21 04 80 	movabs $0x800421e78f,%rcx
  8004206452:	00 00 00 
  8004206455:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420645c:	00 00 00 
  800420645f:	be 34 05 00 00       	mov    $0x534,%esi
  8004206464:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420646b:	00 00 00 
  800420646e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206473:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420647a:	00 00 00 
  800420647d:	41 ff d0             	callq  *%r8
  8004206480:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206487:	00 00 00 
  800420648a:	48 8b 00             	mov    (%rax),%rax
  800420648d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206491:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206496:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420649b:	48 89 c7             	mov    %rax,%rdi
  800420649e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042064a5:	00 00 00 
  80042064a8:	ff d0                	callq  *%rax
  80042064aa:	85 c0                	test   %eax,%eax
  80042064ac:	74 35                	je     80042064e3 <page_check+0xa1c>
  80042064ae:	48 b9 08 ec 21 04 80 	movabs $0x800421ec08,%rcx
  80042064b5:	00 00 00 
  80042064b8:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042064bf:	00 00 00 
  80042064c2:	be 37 05 00 00       	mov    $0x537,%esi
  80042064c7:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042064ce:	00 00 00 
  80042064d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042064dd:	00 00 00 
  80042064e0:	41 ff d0             	callq  *%r8
  80042064e3:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042064ea:	00 00 00 
  80042064ed:	48 8b 00             	mov    (%rax),%rax
  80042064f0:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064f5:	48 89 c7             	mov    %rax,%rdi
  80042064f8:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042064ff:	00 00 00 
  8004206502:	ff d0                	callq  *%rax
  8004206504:	48 89 c3             	mov    %rax,%rbx
  8004206507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420650b:	48 89 c7             	mov    %rax,%rdi
  800420650e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206515:	00 00 00 
  8004206518:	ff d0                	callq  *%rax
  800420651a:	48 39 c3             	cmp    %rax,%rbx
  800420651d:	74 35                	je     8004206554 <page_check+0xa8d>
  800420651f:	48 b9 40 ec 21 04 80 	movabs $0x800421ec40,%rcx
  8004206526:	00 00 00 
  8004206529:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206530:	00 00 00 
  8004206533:	be 38 05 00 00       	mov    $0x538,%esi
  8004206538:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420653f:	00 00 00 
  8004206542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206547:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420654e:	00 00 00 
  8004206551:	41 ff d0             	callq  *%r8
  8004206554:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206558:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420655c:	66 83 f8 02          	cmp    $0x2,%ax
  8004206560:	74 35                	je     8004206597 <page_check+0xad0>
  8004206562:	48 b9 70 ec 21 04 80 	movabs $0x800421ec70,%rcx
  8004206569:	00 00 00 
  800420656c:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206573:	00 00 00 
  8004206576:	be 39 05 00 00       	mov    $0x539,%esi
  800420657b:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206582:	00 00 00 
  8004206585:	b8 00 00 00 00       	mov    $0x0,%eax
  800420658a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206591:	00 00 00 
  8004206594:	41 ff d0             	callq  *%r8
  8004206597:	bf 00 00 00 00       	mov    $0x0,%edi
  800420659c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042065a3:	00 00 00 
  80042065a6:	ff d0                	callq  *%rax
  80042065a8:	48 85 c0             	test   %rax,%rax
  80042065ab:	74 35                	je     80042065e2 <page_check+0xb1b>
  80042065ad:	48 b9 8f e7 21 04 80 	movabs $0x800421e78f,%rcx
  80042065b4:	00 00 00 
  80042065b7:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042065be:	00 00 00 
  80042065c1:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042065c6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042065cd:	00 00 00 
  80042065d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065d5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042065dc:	00 00 00 
  80042065df:	41 ff d0             	callq  *%r8
  80042065e2:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042065e9:	00 00 00 
  80042065ec:	48 8b 00             	mov    (%rax),%rax
  80042065ef:	48 8b 00             	mov    (%rax),%rax
  80042065f2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042065f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042065fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206600:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206604:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206607:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420660a:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004206611:	00 00 00 
  8004206614:	48 8b 00             	mov    (%rax),%rax
  8004206617:	48 39 c2             	cmp    %rax,%rdx
  800420661a:	72 32                	jb     800420664e <page_check+0xb87>
  800420661c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206620:	48 89 c1             	mov    %rax,%rcx
  8004206623:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  800420662a:	00 00 00 
  800420662d:	be 3f 05 00 00       	mov    $0x53f,%esi
  8004206632:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206639:	00 00 00 
  800420663c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206641:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206648:	00 00 00 
  800420664b:	41 ff d0             	callq  *%r8
  800420664e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206655:	00 00 00 
  8004206658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420665c:	48 01 d0             	add    %rdx,%rax
  800420665f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004206663:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206667:	48 8b 00             	mov    (%rax),%rax
  800420666a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206670:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206674:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206678:	48 c1 e8 0c          	shr    $0xc,%rax
  800420667c:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420667f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004206682:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004206689:	00 00 00 
  800420668c:	48 8b 00             	mov    (%rax),%rax
  800420668f:	48 39 c2             	cmp    %rax,%rdx
  8004206692:	72 32                	jb     80042066c6 <page_check+0xbff>
  8004206694:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206698:	48 89 c1             	mov    %rax,%rcx
  800420669b:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  80042066a2:	00 00 00 
  80042066a5:	be 40 05 00 00       	mov    $0x540,%esi
  80042066aa:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042066b1:	00 00 00 
  80042066b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066b9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042066c0:	00 00 00 
  80042066c3:	41 ff d0             	callq  *%r8
  80042066c6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066cd:	00 00 00 
  80042066d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066d4:	48 01 d0             	add    %rdx,%rax
  80042066d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066df:	48 8b 00             	mov    (%rax),%rax
  80042066e2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042066f6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042066fa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206700:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206706:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420670d:	00 00 00 
  8004206710:	48 8b 00             	mov    (%rax),%rax
  8004206713:	48 39 c2             	cmp    %rax,%rdx
  8004206716:	72 35                	jb     800420674d <page_check+0xc86>
  8004206718:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420671f:	48 89 c1             	mov    %rax,%rcx
  8004206722:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004206729:	00 00 00 
  800420672c:	be 41 05 00 00       	mov    $0x541,%esi
  8004206731:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206738:	00 00 00 
  800420673b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206740:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206747:	00 00 00 
  800420674a:	41 ff d0             	callq  *%r8
  800420674d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206754:	00 00 00 
  8004206757:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420675e:	48 01 d0             	add    %rdx,%rax
  8004206761:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206768:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420676f:	00 00 00 
  8004206772:	48 8b 00             	mov    (%rax),%rax
  8004206775:	ba 00 00 00 00       	mov    $0x0,%edx
  800420677a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420677f:	48 89 c7             	mov    %rax,%rdi
  8004206782:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206789:	00 00 00 
  800420678c:	ff d0                	callq  *%rax
  800420678e:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  8004206795:	48 83 c2 08          	add    $0x8,%rdx
  8004206799:	48 39 d0             	cmp    %rdx,%rax
  800420679c:	74 35                	je     80042067d3 <page_check+0xd0c>
  800420679e:	48 b9 88 ec 21 04 80 	movabs $0x800421ec88,%rcx
  80042067a5:	00 00 00 
  80042067a8:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042067af:	00 00 00 
  80042067b2:	be 42 05 00 00       	mov    $0x542,%esi
  80042067b7:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042067be:	00 00 00 
  80042067c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042067cd:	00 00 00 
  80042067d0:	41 ff d0             	callq  *%r8
  80042067d3:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042067da:	00 00 00 
  80042067dd:	48 8b 00             	mov    (%rax),%rax
  80042067e0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067e4:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067e9:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067ee:	48 89 c7             	mov    %rax,%rdi
  80042067f1:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042067f8:	00 00 00 
  80042067fb:	ff d0                	callq  *%rax
  80042067fd:	85 c0                	test   %eax,%eax
  80042067ff:	74 35                	je     8004206836 <page_check+0xd6f>
  8004206801:	48 b9 c8 ec 21 04 80 	movabs $0x800421ecc8,%rcx
  8004206808:	00 00 00 
  800420680b:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206812:	00 00 00 
  8004206815:	be 45 05 00 00       	mov    $0x545,%esi
  800420681a:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206821:	00 00 00 
  8004206824:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206829:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206830:	00 00 00 
  8004206833:	41 ff d0             	callq  *%r8
  8004206836:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420683d:	00 00 00 
  8004206840:	48 8b 00             	mov    (%rax),%rax
  8004206843:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206848:	48 89 c7             	mov    %rax,%rdi
  800420684b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206852:	00 00 00 
  8004206855:	ff d0                	callq  *%rax
  8004206857:	48 89 c3             	mov    %rax,%rbx
  800420685a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420685e:	48 89 c7             	mov    %rax,%rdi
  8004206861:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206868:	00 00 00 
  800420686b:	ff d0                	callq  *%rax
  800420686d:	48 39 c3             	cmp    %rax,%rbx
  8004206870:	74 35                	je     80042068a7 <page_check+0xde0>
  8004206872:	48 b9 40 ec 21 04 80 	movabs $0x800421ec40,%rcx
  8004206879:	00 00 00 
  800420687c:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206883:	00 00 00 
  8004206886:	be 46 05 00 00       	mov    $0x546,%esi
  800420688b:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206892:	00 00 00 
  8004206895:	b8 00 00 00 00       	mov    $0x0,%eax
  800420689a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068a1:	00 00 00 
  80042068a4:	41 ff d0             	callq  *%r8
  80042068a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068af:	66 83 f8 02          	cmp    $0x2,%ax
  80042068b3:	74 35                	je     80042068ea <page_check+0xe23>
  80042068b5:	48 b9 70 ec 21 04 80 	movabs $0x800421ec70,%rcx
  80042068bc:	00 00 00 
  80042068bf:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042068c6:	00 00 00 
  80042068c9:	be 47 05 00 00       	mov    $0x547,%esi
  80042068ce:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042068d5:	00 00 00 
  80042068d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068dd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068e4:	00 00 00 
  80042068e7:	41 ff d0             	callq  *%r8
  80042068ea:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042068f1:	00 00 00 
  80042068f4:	48 8b 00             	mov    (%rax),%rax
  80042068f7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206901:	48 89 c7             	mov    %rax,%rdi
  8004206904:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  800420690b:	00 00 00 
  800420690e:	ff d0                	callq  *%rax
  8004206910:	48 8b 00             	mov    (%rax),%rax
  8004206913:	83 e0 04             	and    $0x4,%eax
  8004206916:	48 85 c0             	test   %rax,%rax
  8004206919:	75 35                	jne    8004206950 <page_check+0xe89>
  800420691b:	48 b9 08 ed 21 04 80 	movabs $0x800421ed08,%rcx
  8004206922:	00 00 00 
  8004206925:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420692c:	00 00 00 
  800420692f:	be 48 05 00 00       	mov    $0x548,%esi
  8004206934:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420693b:	00 00 00 
  800420693e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206943:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420694a:	00 00 00 
  800420694d:	41 ff d0             	callq  *%r8
  8004206950:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206957:	00 00 00 
  800420695a:	48 8b 00             	mov    (%rax),%rax
  800420695d:	48 8b 00             	mov    (%rax),%rax
  8004206960:	83 e0 04             	and    $0x4,%eax
  8004206963:	48 85 c0             	test   %rax,%rax
  8004206966:	75 35                	jne    800420699d <page_check+0xed6>
  8004206968:	48 b9 3b ed 21 04 80 	movabs $0x800421ed3b,%rcx
  800420696f:	00 00 00 
  8004206972:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206979:	00 00 00 
  800420697c:	be 49 05 00 00       	mov    $0x549,%esi
  8004206981:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206988:	00 00 00 
  800420698b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206990:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206997:	00 00 00 
  800420699a:	41 ff d0             	callq  *%r8
  800420699d:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042069a4:	00 00 00 
  80042069a7:	48 8b 00             	mov    (%rax),%rax
  80042069aa:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069b3:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069b8:	48 89 c7             	mov    %rax,%rdi
  80042069bb:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042069c2:	00 00 00 
  80042069c5:	ff d0                	callq  *%rax
  80042069c7:	85 c0                	test   %eax,%eax
  80042069c9:	78 35                	js     8004206a00 <page_check+0xf39>
  80042069cb:	48 b9 58 ed 21 04 80 	movabs $0x800421ed58,%rcx
  80042069d2:	00 00 00 
  80042069d5:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042069dc:	00 00 00 
  80042069df:	be 4d 05 00 00       	mov    $0x54d,%esi
  80042069e4:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042069eb:	00 00 00 
  80042069ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069f3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042069fa:	00 00 00 
  80042069fd:	41 ff d0             	callq  *%r8
  8004206a00:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206a07:	00 00 00 
  8004206a0a:	48 8b 00             	mov    (%rax),%rax
  8004206a0d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a11:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a16:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a1b:	48 89 c7             	mov    %rax,%rdi
  8004206a1e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206a25:	00 00 00 
  8004206a28:	ff d0                	callq  *%rax
  8004206a2a:	85 c0                	test   %eax,%eax
  8004206a2c:	74 35                	je     8004206a63 <page_check+0xf9c>
  8004206a2e:	48 b9 90 ed 21 04 80 	movabs $0x800421ed90,%rcx
  8004206a35:	00 00 00 
  8004206a38:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206a3f:	00 00 00 
  8004206a42:	be 50 05 00 00       	mov    $0x550,%esi
  8004206a47:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206a4e:	00 00 00 
  8004206a51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206a5d:	00 00 00 
  8004206a60:	41 ff d0             	callq  *%r8
  8004206a63:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206a6a:	00 00 00 
  8004206a6d:	48 8b 00             	mov    (%rax),%rax
  8004206a70:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a75:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a7a:	48 89 c7             	mov    %rax,%rdi
  8004206a7d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206a84:	00 00 00 
  8004206a87:	ff d0                	callq  *%rax
  8004206a89:	48 8b 00             	mov    (%rax),%rax
  8004206a8c:	83 e0 04             	and    $0x4,%eax
  8004206a8f:	48 85 c0             	test   %rax,%rax
  8004206a92:	74 35                	je     8004206ac9 <page_check+0x1002>
  8004206a94:	48 b9 c8 ed 21 04 80 	movabs $0x800421edc8,%rcx
  8004206a9b:	00 00 00 
  8004206a9e:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206aa5:	00 00 00 
  8004206aa8:	be 51 05 00 00       	mov    $0x551,%esi
  8004206aad:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206ab4:	00 00 00 
  8004206ab7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206abc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ac3:	00 00 00 
  8004206ac6:	41 ff d0             	callq  *%r8
  8004206ac9:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206ad0:	00 00 00 
  8004206ad3:	48 8b 00             	mov    (%rax),%rax
  8004206ad6:	be 00 00 00 00       	mov    $0x0,%esi
  8004206adb:	48 89 c7             	mov    %rax,%rdi
  8004206ade:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ae5:	00 00 00 
  8004206ae8:	ff d0                	callq  *%rax
  8004206aea:	48 89 c3             	mov    %rax,%rbx
  8004206aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206af1:	48 89 c7             	mov    %rax,%rdi
  8004206af4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206afb:	00 00 00 
  8004206afe:	ff d0                	callq  *%rax
  8004206b00:	48 39 c3             	cmp    %rax,%rbx
  8004206b03:	74 35                	je     8004206b3a <page_check+0x1073>
  8004206b05:	48 b9 00 ee 21 04 80 	movabs $0x800421ee00,%rcx
  8004206b0c:	00 00 00 
  8004206b0f:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206b16:	00 00 00 
  8004206b19:	be 54 05 00 00       	mov    $0x554,%esi
  8004206b1e:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206b25:	00 00 00 
  8004206b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206b34:	00 00 00 
  8004206b37:	41 ff d0             	callq  *%r8
  8004206b3a:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206b41:	00 00 00 
  8004206b44:	48 8b 00             	mov    (%rax),%rax
  8004206b47:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b4c:	48 89 c7             	mov    %rax,%rdi
  8004206b4f:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206b56:	00 00 00 
  8004206b59:	ff d0                	callq  *%rax
  8004206b5b:	48 89 c3             	mov    %rax,%rbx
  8004206b5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b62:	48 89 c7             	mov    %rax,%rdi
  8004206b65:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206b6c:	00 00 00 
  8004206b6f:	ff d0                	callq  *%rax
  8004206b71:	48 39 c3             	cmp    %rax,%rbx
  8004206b74:	74 35                	je     8004206bab <page_check+0x10e4>
  8004206b76:	48 b9 30 ee 21 04 80 	movabs $0x800421ee30,%rcx
  8004206b7d:	00 00 00 
  8004206b80:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206b87:	00 00 00 
  8004206b8a:	be 55 05 00 00       	mov    $0x555,%esi
  8004206b8f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206b96:	00 00 00 
  8004206b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ba5:	00 00 00 
  8004206ba8:	41 ff d0             	callq  *%r8
  8004206bab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206baf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bb3:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bb7:	74 35                	je     8004206bee <page_check+0x1127>
  8004206bb9:	48 b9 60 ee 21 04 80 	movabs $0x800421ee60,%rcx
  8004206bc0:	00 00 00 
  8004206bc3:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206bca:	00 00 00 
  8004206bcd:	be 57 05 00 00       	mov    $0x557,%esi
  8004206bd2:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206bd9:	00 00 00 
  8004206bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206be1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206be8:	00 00 00 
  8004206beb:	41 ff d0             	callq  *%r8
  8004206bee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bf2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bf6:	66 83 f8 01          	cmp    $0x1,%ax
  8004206bfa:	74 35                	je     8004206c31 <page_check+0x116a>
  8004206bfc:	48 b9 71 ee 21 04 80 	movabs $0x800421ee71,%rcx
  8004206c03:	00 00 00 
  8004206c06:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206c0d:	00 00 00 
  8004206c10:	be 58 05 00 00       	mov    $0x558,%esi
  8004206c15:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206c1c:	00 00 00 
  8004206c1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206c2b:	00 00 00 
  8004206c2e:	41 ff d0             	callq  *%r8
  8004206c31:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206c38:	00 00 00 
  8004206c3b:	48 8b 00             	mov    (%rax),%rax
  8004206c3e:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c43:	48 89 c7             	mov    %rax,%rdi
  8004206c46:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206c4d:	00 00 00 
  8004206c50:	ff d0                	callq  *%rax
  8004206c52:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206c59:	00 00 00 
  8004206c5c:	48 8b 00             	mov    (%rax),%rax
  8004206c5f:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c64:	48 89 c7             	mov    %rax,%rdi
  8004206c67:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206c6e:	00 00 00 
  8004206c71:	ff d0                	callq  *%rax
  8004206c73:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c77:	74 35                	je     8004206cae <page_check+0x11e7>
  8004206c79:	48 b9 88 ee 21 04 80 	movabs $0x800421ee88,%rcx
  8004206c80:	00 00 00 
  8004206c83:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206c8a:	00 00 00 
  8004206c8d:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206c92:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206c99:	00 00 00 
  8004206c9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ca1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ca8:	00 00 00 
  8004206cab:	41 ff d0             	callq  *%r8
  8004206cae:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206cb5:	00 00 00 
  8004206cb8:	48 8b 00             	mov    (%rax),%rax
  8004206cbb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206cc0:	48 89 c7             	mov    %rax,%rdi
  8004206cc3:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206cca:	00 00 00 
  8004206ccd:	ff d0                	callq  *%rax
  8004206ccf:	48 89 c3             	mov    %rax,%rbx
  8004206cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cd6:	48 89 c7             	mov    %rax,%rdi
  8004206cd9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206ce0:	00 00 00 
  8004206ce3:	ff d0                	callq  *%rax
  8004206ce5:	48 39 c3             	cmp    %rax,%rbx
  8004206ce8:	74 35                	je     8004206d1f <page_check+0x1258>
  8004206cea:	48 b9 30 ee 21 04 80 	movabs $0x800421ee30,%rcx
  8004206cf1:	00 00 00 
  8004206cf4:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206cfb:	00 00 00 
  8004206cfe:	be 5e 05 00 00       	mov    $0x55e,%esi
  8004206d03:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206d0a:	00 00 00 
  8004206d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d12:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d19:	00 00 00 
  8004206d1c:	41 ff d0             	callq  *%r8
  8004206d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d27:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d2b:	74 35                	je     8004206d62 <page_check+0x129b>
  8004206d2d:	48 b9 d5 eb 21 04 80 	movabs $0x800421ebd5,%rcx
  8004206d34:	00 00 00 
  8004206d37:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206d3e:	00 00 00 
  8004206d41:	be 5f 05 00 00       	mov    $0x55f,%esi
  8004206d46:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206d4d:	00 00 00 
  8004206d50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d55:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d5c:	00 00 00 
  8004206d5f:	41 ff d0             	callq  *%r8
  8004206d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d66:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d6a:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d6e:	74 35                	je     8004206da5 <page_check+0x12de>
  8004206d70:	48 b9 71 ee 21 04 80 	movabs $0x800421ee71,%rcx
  8004206d77:	00 00 00 
  8004206d7a:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206d81:	00 00 00 
  8004206d84:	be 60 05 00 00       	mov    $0x560,%esi
  8004206d89:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206d90:	00 00 00 
  8004206d93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d9f:	00 00 00 
  8004206da2:	41 ff d0             	callq  *%r8
  8004206da5:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206dac:	00 00 00 
  8004206daf:	48 8b 00             	mov    (%rax),%rax
  8004206db2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206db6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dbb:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dc0:	48 89 c7             	mov    %rax,%rdi
  8004206dc3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206dca:	00 00 00 
  8004206dcd:	ff d0                	callq  *%rax
  8004206dcf:	85 c0                	test   %eax,%eax
  8004206dd1:	74 35                	je     8004206e08 <page_check+0x1341>
  8004206dd3:	48 b9 90 ed 21 04 80 	movabs $0x800421ed90,%rcx
  8004206dda:	00 00 00 
  8004206ddd:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206de4:	00 00 00 
  8004206de7:	be 64 05 00 00       	mov    $0x564,%esi
  8004206dec:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206df3:	00 00 00 
  8004206df6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206dfb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e02:	00 00 00 
  8004206e05:	41 ff d0             	callq  *%r8
  8004206e08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e0c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e10:	66 85 c0             	test   %ax,%ax
  8004206e13:	75 35                	jne    8004206e4a <page_check+0x1383>
  8004206e15:	48 b9 ab ee 21 04 80 	movabs $0x800421eeab,%rcx
  8004206e1c:	00 00 00 
  8004206e1f:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206e26:	00 00 00 
  8004206e29:	be 65 05 00 00       	mov    $0x565,%esi
  8004206e2e:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206e35:	00 00 00 
  8004206e38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e44:	00 00 00 
  8004206e47:	41 ff d0             	callq  *%r8
  8004206e4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e4e:	48 8b 00             	mov    (%rax),%rax
  8004206e51:	48 85 c0             	test   %rax,%rax
  8004206e54:	74 35                	je     8004206e8b <page_check+0x13c4>
  8004206e56:	48 b9 b7 ee 21 04 80 	movabs $0x800421eeb7,%rcx
  8004206e5d:	00 00 00 
  8004206e60:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206e67:	00 00 00 
  8004206e6a:	be 66 05 00 00       	mov    $0x566,%esi
  8004206e6f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206e76:	00 00 00 
  8004206e79:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e7e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e85:	00 00 00 
  8004206e88:	41 ff d0             	callq  *%r8
  8004206e8b:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206e92:	00 00 00 
  8004206e95:	48 8b 00             	mov    (%rax),%rax
  8004206e98:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e9d:	48 89 c7             	mov    %rax,%rdi
  8004206ea0:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206ea7:	00 00 00 
  8004206eaa:	ff d0                	callq  *%rax
  8004206eac:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	48 8b 00             	mov    (%rax),%rax
  8004206eb9:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ebe:	48 89 c7             	mov    %rax,%rdi
  8004206ec1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ec8:	00 00 00 
  8004206ecb:	ff d0                	callq  *%rax
  8004206ecd:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206ed1:	74 35                	je     8004206f08 <page_check+0x1441>
  8004206ed3:	48 b9 88 ee 21 04 80 	movabs $0x800421ee88,%rcx
  8004206eda:	00 00 00 
  8004206edd:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206ee4:	00 00 00 
  8004206ee7:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206eec:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206ef3:	00 00 00 
  8004206ef6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206efb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f02:	00 00 00 
  8004206f05:	41 ff d0             	callq  *%r8
  8004206f08:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206f0f:	00 00 00 
  8004206f12:	48 8b 00             	mov    (%rax),%rax
  8004206f15:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f1a:	48 89 c7             	mov    %rax,%rdi
  8004206f1d:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206f24:	00 00 00 
  8004206f27:	ff d0                	callq  *%rax
  8004206f29:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f2d:	74 35                	je     8004206f64 <page_check+0x149d>
  8004206f2f:	48 b9 d0 ee 21 04 80 	movabs $0x800421eed0,%rcx
  8004206f36:	00 00 00 
  8004206f39:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206f40:	00 00 00 
  8004206f43:	be 6b 05 00 00       	mov    $0x56b,%esi
  8004206f48:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206f4f:	00 00 00 
  8004206f52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f5e:	00 00 00 
  8004206f61:	41 ff d0             	callq  *%r8
  8004206f64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f6c:	66 85 c0             	test   %ax,%ax
  8004206f6f:	74 35                	je     8004206fa6 <page_check+0x14df>
  8004206f71:	48 b9 f6 ee 21 04 80 	movabs $0x800421eef6,%rcx
  8004206f78:	00 00 00 
  8004206f7b:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206f82:	00 00 00 
  8004206f85:	be 6c 05 00 00       	mov    $0x56c,%esi
  8004206f8a:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206f91:	00 00 00 
  8004206f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f99:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fa0:	00 00 00 
  8004206fa3:	41 ff d0             	callq  *%r8
  8004206fa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206faa:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fae:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fb2:	74 35                	je     8004206fe9 <page_check+0x1522>
  8004206fb4:	48 b9 71 ee 21 04 80 	movabs $0x800421ee71,%rcx
  8004206fbb:	00 00 00 
  8004206fbe:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004206fc5:	00 00 00 
  8004206fc8:	be 6d 05 00 00       	mov    $0x56d,%esi
  8004206fcd:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004206fd4:	00 00 00 
  8004206fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fe3:	00 00 00 
  8004206fe6:	41 ff d0             	callq  *%r8
  8004206fe9:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206ff0:	00 00 00 
  8004206ff3:	48 8b 00             	mov    (%rax),%rax
  8004206ff6:	48 8b 00             	mov    (%rax),%rax
  8004206ff9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206fff:	48 89 c7             	mov    %rax,%rdi
  8004207002:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004207009:	00 00 00 
  800420700c:	ff d0                	callq  *%rax
  800420700e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207015:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420701c:	00 00 00 
  800420701f:	48 8b 00             	mov    (%rax),%rax
  8004207022:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207029:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420702d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207031:	66 83 f8 01          	cmp    $0x1,%ax
  8004207035:	74 35                	je     800420706c <page_check+0x15a5>
  8004207037:	48 b9 71 ee 21 04 80 	movabs $0x800421ee71,%rcx
  800420703e:	00 00 00 
  8004207041:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207048:	00 00 00 
  800420704b:	be 83 05 00 00       	mov    $0x583,%esi
  8004207050:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207057:	00 00 00 
  800420705a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420705f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207066:	00 00 00 
  8004207069:	41 ff d0             	callq  *%r8
  800420706c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207073:	48 89 c7             	mov    %rax,%rdi
  8004207076:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420707d:	00 00 00 
  8004207080:	ff d0                	callq  *%rax
  8004207082:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207089:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420708d:	74 13                	je     80042070a2 <page_check+0x15db>
  800420708f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207093:	48 89 c7             	mov    %rax,%rdi
  8004207096:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420709d:	00 00 00 
  80042070a0:	ff d0                	callq  *%rax
  80042070a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070a9:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070ad:	74 13                	je     80042070c2 <page_check+0x15fb>
  80042070af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070b3:	48 89 c7             	mov    %rax,%rdi
  80042070b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070bd:	00 00 00 
  80042070c0:	ff d0                	callq  *%rax
  80042070c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070c9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070cd:	74 13                	je     80042070e2 <page_check+0x161b>
  80042070cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070d3:	48 89 c7             	mov    %rax,%rdi
  80042070d6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070dd:	00 00 00 
  80042070e0:	ff d0                	callq  *%rax
  80042070e2:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070e9:	00 40 06 00 
  80042070ed:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042070f4:	00 00 00 
  80042070f7:	48 8b 00             	mov    (%rax),%rax
  80042070fa:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207101:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207106:	48 89 ce             	mov    %rcx,%rsi
  8004207109:	48 89 c7             	mov    %rax,%rdi
  800420710c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207113:	00 00 00 
  8004207116:	ff d0                	callq  *%rax
  8004207118:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420711f:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207126:	00 00 00 
  8004207129:	48 8b 00             	mov    (%rax),%rax
  800420712c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207133:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207137:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  800420713d:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207141:	48 01 d0             	add    %rdx,%rax
  8004207144:	48 8b 00             	mov    (%rax),%rax
  8004207147:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420714d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207154:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420715b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420715f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207165:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  800420716b:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207172:	00 00 00 
  8004207175:	48 8b 00             	mov    (%rax),%rax
  8004207178:	48 39 c2             	cmp    %rax,%rdx
  800420717b:	72 35                	jb     80042071b2 <page_check+0x16eb>
  800420717d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207184:	48 89 c1             	mov    %rax,%rcx
  8004207187:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  800420718e:	00 00 00 
  8004207191:	be 8b 05 00 00       	mov    $0x58b,%esi
  8004207196:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420719d:	00 00 00 
  80042071a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042071ac:	00 00 00 
  80042071af:	41 ff d0             	callq  *%r8
  80042071b2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071b9:	00 00 00 
  80042071bc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071c3:	48 01 d0             	add    %rdx,%rax
  80042071c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071ca:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071d1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071d5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071da:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071e1:	00 
  80042071e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071e6:	48 01 d0             	add    %rdx,%rax
  80042071e9:	48 8b 00             	mov    (%rax),%rax
  80042071ec:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071f2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042071f9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207200:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207204:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420720a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207210:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207217:	00 00 00 
  800420721a:	48 8b 00             	mov    (%rax),%rax
  800420721d:	48 39 c2             	cmp    %rax,%rdx
  8004207220:	72 35                	jb     8004207257 <page_check+0x1790>
  8004207222:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207229:	48 89 c1             	mov    %rax,%rcx
  800420722c:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004207233:	00 00 00 
  8004207236:	be 8c 05 00 00       	mov    $0x58c,%esi
  800420723b:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207242:	00 00 00 
  8004207245:	b8 00 00 00 00       	mov    $0x0,%eax
  800420724a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207251:	00 00 00 
  8004207254:	41 ff d0             	callq  *%r8
  8004207257:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420725e:	00 00 00 
  8004207261:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207268:	48 01 d0             	add    %rdx,%rax
  800420726b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420726f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207276:	48 c1 e8 15          	shr    $0x15,%rax
  800420727a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420727f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207286:	00 
  8004207287:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420728b:	48 01 d0             	add    %rdx,%rax
  800420728e:	48 8b 00             	mov    (%rax),%rax
  8004207291:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207297:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420729e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072a5:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072af:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072b5:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042072bc:	00 00 00 
  80042072bf:	48 8b 00             	mov    (%rax),%rax
  80042072c2:	48 39 c2             	cmp    %rax,%rdx
  80042072c5:	72 35                	jb     80042072fc <page_check+0x1835>
  80042072c7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072ce:	48 89 c1             	mov    %rax,%rcx
  80042072d1:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  80042072d8:	00 00 00 
  80042072db:	be 8d 05 00 00       	mov    $0x58d,%esi
  80042072e0:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042072e7:	00 00 00 
  80042072ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042072f6:	00 00 00 
  80042072f9:	41 ff d0             	callq  *%r8
  80042072fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207303:	00 00 00 
  8004207306:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800420730d:	48 01 d0             	add    %rdx,%rax
  8004207310:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207317:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420731e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207322:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207327:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420732e:	00 
  800420732f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207336:	48 01 c2             	add    %rax,%rdx
  8004207339:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207340:	48 39 c2             	cmp    %rax,%rdx
  8004207343:	74 35                	je     800420737a <page_check+0x18b3>
  8004207345:	48 b9 07 ef 21 04 80 	movabs $0x800421ef07,%rcx
  800420734c:	00 00 00 
  800420734f:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207356:	00 00 00 
  8004207359:	be 8e 05 00 00       	mov    $0x58e,%esi
  800420735e:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207365:	00 00 00 
  8004207368:	b8 00 00 00 00       	mov    $0x0,%eax
  800420736d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207374:	00 00 00 
  8004207377:	41 ff d0             	callq  *%r8
  800420737a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420737e:	48 89 c7             	mov    %rax,%rdi
  8004207381:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004207388:	00 00 00 
  800420738b:	ff d0                	callq  *%rax
  800420738d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004207392:	be ff 00 00 00       	mov    $0xff,%esi
  8004207397:	48 89 c7             	mov    %rax,%rdi
  800420739a:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  80042073a1:	00 00 00 
  80042073a4:	ff d0                	callq  *%rax
  80042073a6:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042073ad:	00 00 00 
  80042073b0:	48 8b 00             	mov    (%rax),%rax
  80042073b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073b8:	be 00 00 00 00       	mov    $0x0,%esi
  80042073bd:	48 89 c7             	mov    %rax,%rdi
  80042073c0:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042073c7:	00 00 00 
  80042073ca:	ff d0                	callq  *%rax
  80042073cc:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042073d3:	00 00 00 
  80042073d6:	48 8b 00             	mov    (%rax),%rax
  80042073d9:	48 8b 00             	mov    (%rax),%rax
  80042073dc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073e2:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073e9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073f0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073f4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  80042073fa:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207400:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207407:	00 00 00 
  800420740a:	48 8b 00             	mov    (%rax),%rax
  800420740d:	48 39 c2             	cmp    %rax,%rdx
  8004207410:	72 35                	jb     8004207447 <page_check+0x1980>
  8004207412:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207419:	48 89 c1             	mov    %rax,%rcx
  800420741c:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004207423:	00 00 00 
  8004207426:	be 93 05 00 00       	mov    $0x593,%esi
  800420742b:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207432:	00 00 00 
  8004207435:	b8 00 00 00 00       	mov    $0x0,%eax
  800420743a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207441:	00 00 00 
  8004207444:	41 ff d0             	callq  *%r8
  8004207447:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420744e:	00 00 00 
  8004207451:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207458:	48 01 d0             	add    %rdx,%rax
  800420745b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420745f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004207463:	48 8b 00             	mov    (%rax),%rax
  8004207466:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420746c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004207473:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420747a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420747e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207484:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800420748a:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207491:	00 00 00 
  8004207494:	48 8b 00             	mov    (%rax),%rax
  8004207497:	48 39 c2             	cmp    %rax,%rdx
  800420749a:	72 35                	jb     80042074d1 <page_check+0x1a0a>
  800420749c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074a3:	48 89 c1             	mov    %rax,%rcx
  80042074a6:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  80042074ad:	00 00 00 
  80042074b0:	be 94 05 00 00       	mov    $0x594,%esi
  80042074b5:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042074bc:	00 00 00 
  80042074bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042074cb:	00 00 00 
  80042074ce:	41 ff d0             	callq  *%r8
  80042074d1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074d8:	00 00 00 
  80042074db:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074e2:	48 01 d0             	add    %rdx,%rax
  80042074e5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074ed:	48 8b 00             	mov    (%rax),%rax
  80042074f0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042074f6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042074fd:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207504:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207508:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420750e:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207514:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420751b:	00 00 00 
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 39 c2             	cmp    %rax,%rdx
  8004207524:	72 35                	jb     800420755b <page_check+0x1a94>
  8004207526:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420752d:	48 89 c1             	mov    %rax,%rcx
  8004207530:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004207537:	00 00 00 
  800420753a:	be 95 05 00 00       	mov    $0x595,%esi
  800420753f:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207546:	00 00 00 
  8004207549:	b8 00 00 00 00       	mov    $0x0,%eax
  800420754e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207555:	00 00 00 
  8004207558:	41 ff d0             	callq  *%r8
  800420755b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207562:	00 00 00 
  8004207565:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420756c:	48 01 d0             	add    %rdx,%rax
  800420756f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207576:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420757d:	eb 58                	jmp    80042075d7 <page_check+0x1b10>
  800420757f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207586:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207589:	48 63 d2             	movslq %edx,%rdx
  800420758c:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207590:	48 01 d0             	add    %rdx,%rax
  8004207593:	48 8b 00             	mov    (%rax),%rax
  8004207596:	83 e0 01             	and    $0x1,%eax
  8004207599:	48 85 c0             	test   %rax,%rax
  800420759c:	74 35                	je     80042075d3 <page_check+0x1b0c>
  800420759e:	48 b9 1f ef 21 04 80 	movabs $0x800421ef1f,%rcx
  80042075a5:	00 00 00 
  80042075a8:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042075af:	00 00 00 
  80042075b2:	be 97 05 00 00       	mov    $0x597,%esi
  80042075b7:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042075be:	00 00 00 
  80042075c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042075cd:	00 00 00 
  80042075d0:	41 ff d0             	callq  *%r8
  80042075d3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075d7:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075de:	7e 9f                	jle    800420757f <page_check+0x1ab8>
  80042075e0:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042075e7:	00 00 00 
  80042075ea:	48 8b 00             	mov    (%rax),%rax
  80042075ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042075f4:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  80042075fb:	00 00 00 
  80042075fe:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207602:	48 89 10             	mov    %rdx,(%rax)
  8004207605:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207609:	48 89 c7             	mov    %rax,%rdi
  800420760c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207613:	00 00 00 
  8004207616:	ff d0                	callq  *%rax
  8004207618:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420761c:	48 89 c7             	mov    %rax,%rdi
  800420761f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207626:	00 00 00 
  8004207629:	ff d0                	callq  *%rax
  800420762b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420762f:	48 89 c7             	mov    %rax,%rdi
  8004207632:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207639:	00 00 00 
  800420763c:	ff d0                	callq  *%rax
  800420763e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207642:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207646:	66 85 c0             	test   %ax,%ax
  8004207649:	74 35                	je     8004207680 <page_check+0x1bb9>
  800420764b:	48 b9 36 ef 21 04 80 	movabs $0x800421ef36,%rcx
  8004207652:	00 00 00 
  8004207655:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420765c:	00 00 00 
  800420765f:	be a3 05 00 00       	mov    $0x5a3,%esi
  8004207664:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420766b:	00 00 00 
  800420766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207673:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420767a:	00 00 00 
  800420767d:	41 ff d0             	callq  *%r8
  8004207680:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207684:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207688:	66 85 c0             	test   %ax,%ax
  800420768b:	74 35                	je     80042076c2 <page_check+0x1bfb>
  800420768d:	48 b9 f6 ee 21 04 80 	movabs $0x800421eef6,%rcx
  8004207694:	00 00 00 
  8004207697:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420769e:	00 00 00 
  80042076a1:	be a4 05 00 00       	mov    $0x5a4,%esi
  80042076a6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042076ad:	00 00 00 
  80042076b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076bc:	00 00 00 
  80042076bf:	41 ff d0             	callq  *%r8
  80042076c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076c6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076ca:	66 85 c0             	test   %ax,%ax
  80042076cd:	74 35                	je     8004207704 <page_check+0x1c3d>
  80042076cf:	48 b9 47 ef 21 04 80 	movabs $0x800421ef47,%rcx
  80042076d6:	00 00 00 
  80042076d9:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042076e0:	00 00 00 
  80042076e3:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042076e8:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042076ef:	00 00 00 
  80042076f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076f7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076fe:	00 00 00 
  8004207701:	41 ff d0             	callq  *%r8
  8004207704:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207708:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420770c:	66 85 c0             	test   %ax,%ax
  800420770f:	74 35                	je     8004207746 <page_check+0x1c7f>
  8004207711:	48 b9 58 ef 21 04 80 	movabs $0x800421ef58,%rcx
  8004207718:	00 00 00 
  800420771b:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207722:	00 00 00 
  8004207725:	be a6 05 00 00       	mov    $0x5a6,%esi
  800420772a:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207731:	00 00 00 
  8004207734:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207739:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207740:	00 00 00 
  8004207743:	41 ff d0             	callq  *%r8
  8004207746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420774a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420774e:	66 85 c0             	test   %ax,%ax
  8004207751:	74 35                	je     8004207788 <page_check+0x1cc1>
  8004207753:	48 b9 69 ef 21 04 80 	movabs $0x800421ef69,%rcx
  800420775a:	00 00 00 
  800420775d:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207764:	00 00 00 
  8004207767:	be a7 05 00 00       	mov    $0x5a7,%esi
  800420776c:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207773:	00 00 00 
  8004207776:	b8 00 00 00 00       	mov    $0x0,%eax
  800420777b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207782:	00 00 00 
  8004207785:	41 ff d0             	callq  *%r8
  8004207788:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420778c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207790:	66 85 c0             	test   %ax,%ax
  8004207793:	74 35                	je     80042077ca <page_check+0x1d03>
  8004207795:	48 b9 7a ef 21 04 80 	movabs $0x800421ef7a,%rcx
  800420779c:	00 00 00 
  800420779f:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042077a6:	00 00 00 
  80042077a9:	be a8 05 00 00       	mov    $0x5a8,%esi
  80042077ae:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042077b5:	00 00 00 
  80042077b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042077c4:	00 00 00 
  80042077c7:	41 ff d0             	callq  *%r8
  80042077ca:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077cf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077d4:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077db:	00 00 00 
  80042077de:	ff d0                	callq  *%rax
  80042077e0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077e7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077ec:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077f1:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077f8:	00 00 00 
  80042077fb:	ff d0                	callq  *%rax
  80042077fd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207804:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420780b:	00 00 00 
  800420780e:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207815:	76 1d                	jbe    8004207834 <page_check+0x1d6d>
  8004207817:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420781e:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207825:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420782c:	00 00 00 
  800420782f:	48 39 c2             	cmp    %rax,%rdx
  8004207832:	76 35                	jbe    8004207869 <page_check+0x1da2>
  8004207834:	48 b9 90 ef 21 04 80 	movabs $0x800421ef90,%rcx
  800420783b:	00 00 00 
  800420783e:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207845:	00 00 00 
  8004207848:	be af 05 00 00       	mov    $0x5af,%esi
  800420784d:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207854:	00 00 00 
  8004207857:	b8 00 00 00 00       	mov    $0x0,%eax
  800420785c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207863:	00 00 00 
  8004207866:	41 ff d0             	callq  *%r8
  8004207869:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207870:	00 00 00 
  8004207873:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  800420787a:	76 1d                	jbe    8004207899 <page_check+0x1dd2>
  800420787c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207883:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420788a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207891:	00 00 00 
  8004207894:	48 39 c2             	cmp    %rax,%rdx
  8004207897:	76 35                	jbe    80042078ce <page_check+0x1e07>
  8004207899:	48 b9 b8 ef 21 04 80 	movabs $0x800421efb8,%rcx
  80042078a0:	00 00 00 
  80042078a3:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042078aa:	00 00 00 
  80042078ad:	be b0 05 00 00       	mov    $0x5b0,%esi
  80042078b2:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042078b9:	00 00 00 
  80042078bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042078c8:	00 00 00 
  80042078cb:	41 ff d0             	callq  *%r8
  80042078ce:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078d5:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078da:	48 85 c0             	test   %rax,%rax
  80042078dd:	75 11                	jne    80042078f0 <page_check+0x1e29>
  80042078df:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078e6:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078eb:	48 85 c0             	test   %rax,%rax
  80042078ee:	74 35                	je     8004207925 <page_check+0x1e5e>
  80042078f0:	48 b9 e0 ef 21 04 80 	movabs $0x800421efe0,%rcx
  80042078f7:	00 00 00 
  80042078fa:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207901:	00 00 00 
  8004207904:	be b2 05 00 00       	mov    $0x5b2,%esi
  8004207909:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207910:	00 00 00 
  8004207913:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207918:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420791f:	00 00 00 
  8004207922:	41 ff d0             	callq  *%r8
  8004207925:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420792c:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207932:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207939:	76 35                	jbe    8004207970 <page_check+0x1ea9>
  800420793b:	48 b9 07 f0 21 04 80 	movabs $0x800421f007,%rcx
  8004207942:	00 00 00 
  8004207945:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  800420794c:	00 00 00 
  800420794f:	be b4 05 00 00       	mov    $0x5b4,%esi
  8004207954:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  800420795b:	00 00 00 
  800420795e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207963:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420796a:	00 00 00 
  800420796d:	41 ff d0             	callq  *%r8
  8004207970:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207977:	00 00 00 
  800420797a:	48 8b 00             	mov    (%rax),%rax
  800420797d:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207984:	48 89 d6             	mov    %rdx,%rsi
  8004207987:	48 89 c7             	mov    %rax,%rdi
  800420798a:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207991:	00 00 00 
  8004207994:	ff d0                	callq  *%rax
  8004207996:	48 85 c0             	test   %rax,%rax
  8004207999:	74 35                	je     80042079d0 <page_check+0x1f09>
  800420799b:	48 b9 20 f0 21 04 80 	movabs $0x800421f020,%rcx
  80042079a2:	00 00 00 
  80042079a5:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  80042079ac:	00 00 00 
  80042079af:	be b7 05 00 00       	mov    $0x5b7,%esi
  80042079b4:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  80042079bb:	00 00 00 
  80042079be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079c3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042079ca:	00 00 00 
  80042079cd:	41 ff d0             	callq  *%r8
  80042079d0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079d7:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079de:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042079e5:	00 00 00 
  80042079e8:	48 8b 00             	mov    (%rax),%rax
  80042079eb:	48 89 d6             	mov    %rdx,%rsi
  80042079ee:	48 89 c7             	mov    %rax,%rdi
  80042079f1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042079f8:	00 00 00 
  80042079fb:	ff d0                	callq  *%rax
  80042079fd:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a03:	74 35                	je     8004207a3a <page_check+0x1f73>
  8004207a05:	48 b9 48 f0 21 04 80 	movabs $0x800421f048,%rcx
  8004207a0c:	00 00 00 
  8004207a0f:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207a16:	00 00 00 
  8004207a19:	be b8 05 00 00       	mov    $0x5b8,%esi
  8004207a1e:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207a25:	00 00 00 
  8004207a28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a34:	00 00 00 
  8004207a37:	41 ff d0             	callq  *%r8
  8004207a3a:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207a41:	00 00 00 
  8004207a44:	48 8b 00             	mov    (%rax),%rax
  8004207a47:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a4e:	48 89 d6             	mov    %rdx,%rsi
  8004207a51:	48 89 c7             	mov    %rax,%rdi
  8004207a54:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207a5b:	00 00 00 
  8004207a5e:	ff d0                	callq  *%rax
  8004207a60:	48 85 c0             	test   %rax,%rax
  8004207a63:	74 35                	je     8004207a9a <page_check+0x1fd3>
  8004207a65:	48 b9 78 f0 21 04 80 	movabs $0x800421f078,%rcx
  8004207a6c:	00 00 00 
  8004207a6f:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207a76:	00 00 00 
  8004207a79:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207a7e:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207a85:	00 00 00 
  8004207a88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a8d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a94:	00 00 00 
  8004207a97:	41 ff d0             	callq  *%r8
  8004207a9a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aa1:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207aa8:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207aaf:	00 00 00 
  8004207ab2:	48 8b 00             	mov    (%rax),%rax
  8004207ab5:	48 89 d6             	mov    %rdx,%rsi
  8004207ab8:	48 89 c7             	mov    %rax,%rdi
  8004207abb:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207ac2:	00 00 00 
  8004207ac5:	ff d0                	callq  *%rax
  8004207ac7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207acb:	74 35                	je     8004207b02 <page_check+0x203b>
  8004207acd:	48 b9 a0 f0 21 04 80 	movabs $0x800421f0a0,%rcx
  8004207ad4:	00 00 00 
  8004207ad7:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207ade:	00 00 00 
  8004207ae1:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207ae6:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207aed:	00 00 00 
  8004207af0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207af5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207afc:	00 00 00 
  8004207aff:	41 ff d0             	callq  *%r8
  8004207b02:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b09:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207b10:	00 00 00 
  8004207b13:	48 8b 00             	mov    (%rax),%rax
  8004207b16:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b1b:	48 89 ce             	mov    %rcx,%rsi
  8004207b1e:	48 89 c7             	mov    %rax,%rdi
  8004207b21:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b28:	00 00 00 
  8004207b2b:	ff d0                	callq  *%rax
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	83 e0 1a             	and    $0x1a,%eax
  8004207b33:	48 85 c0             	test   %rax,%rax
  8004207b36:	75 35                	jne    8004207b6d <page_check+0x20a6>
  8004207b38:	48 b9 d0 f0 21 04 80 	movabs $0x800421f0d0,%rcx
  8004207b3f:	00 00 00 
  8004207b42:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207b49:	00 00 00 
  8004207b4c:	be bc 05 00 00       	mov    $0x5bc,%esi
  8004207b51:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207b58:	00 00 00 
  8004207b5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b60:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207b67:	00 00 00 
  8004207b6a:	41 ff d0             	callq  *%r8
  8004207b6d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b74:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207b7b:	00 00 00 
  8004207b7e:	48 8b 00             	mov    (%rax),%rax
  8004207b81:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b86:	48 89 ce             	mov    %rcx,%rsi
  8004207b89:	48 89 c7             	mov    %rax,%rdi
  8004207b8c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b93:	00 00 00 
  8004207b96:	ff d0                	callq  *%rax
  8004207b98:	48 8b 00             	mov    (%rax),%rax
  8004207b9b:	83 e0 04             	and    $0x4,%eax
  8004207b9e:	48 85 c0             	test   %rax,%rax
  8004207ba1:	74 35                	je     8004207bd8 <page_check+0x2111>
  8004207ba3:	48 b9 18 f1 21 04 80 	movabs $0x800421f118,%rcx
  8004207baa:	00 00 00 
  8004207bad:	48 ba f1 e2 21 04 80 	movabs $0x800421e2f1,%rdx
  8004207bb4:	00 00 00 
  8004207bb7:	be bd 05 00 00       	mov    $0x5bd,%esi
  8004207bbc:	48 bf 06 e3 21 04 80 	movabs $0x800421e306,%rdi
  8004207bc3:	00 00 00 
  8004207bc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bcb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207bd2:	00 00 00 
  8004207bd5:	41 ff d0             	callq  *%r8
  8004207bd8:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207bdf:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207be6:	00 00 00 
  8004207be9:	48 8b 00             	mov    (%rax),%rax
  8004207bec:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bf1:	48 89 ce             	mov    %rcx,%rsi
  8004207bf4:	48 89 c7             	mov    %rax,%rdi
  8004207bf7:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207bfe:	00 00 00 
  8004207c01:	ff d0                	callq  *%rax
  8004207c03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c0a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c11:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c17:	48 89 c1             	mov    %rax,%rcx
  8004207c1a:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207c21:	00 00 00 
  8004207c24:	48 8b 00             	mov    (%rax),%rax
  8004207c27:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c2c:	48 89 ce             	mov    %rcx,%rsi
  8004207c2f:	48 89 c7             	mov    %rax,%rdi
  8004207c32:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c39:	00 00 00 
  8004207c3c:	ff d0                	callq  *%rax
  8004207c3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c45:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c4c:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207c53:	00 00 00 
  8004207c56:	48 8b 00             	mov    (%rax),%rax
  8004207c59:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c5e:	48 89 ce             	mov    %rcx,%rsi
  8004207c61:	48 89 c7             	mov    %rax,%rdi
  8004207c64:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c6b:	00 00 00 
  8004207c6e:	ff d0                	callq  *%rax
  8004207c70:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c77:	48 bf 4b f1 21 04 80 	movabs $0x800421f14b,%rdi
  8004207c7e:	00 00 00 
  8004207c81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c86:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004207c8d:	00 00 00 
  8004207c90:	ff d2                	callq  *%rdx
  8004207c92:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207c99:	5b                   	pop    %rbx
  8004207c9a:	5d                   	pop    %rbp
  8004207c9b:	c3                   	retq   

0000008004207c9c <page2ppn>:
  8004207c9c:	55                   	push   %rbp
  8004207c9d:	48 89 e5             	mov    %rsp,%rbp
  8004207ca0:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ca4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ca8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cac:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004207cb3:	00 00 00 
  8004207cb6:	48 8b 00             	mov    (%rax),%rax
  8004207cb9:	48 29 c2             	sub    %rax,%rdx
  8004207cbc:	48 89 d0             	mov    %rdx,%rax
  8004207cbf:	48 c1 f8 04          	sar    $0x4,%rax
  8004207cc3:	c9                   	leaveq 
  8004207cc4:	c3                   	retq   

0000008004207cc5 <page2pa>:
  8004207cc5:	55                   	push   %rbp
  8004207cc6:	48 89 e5             	mov    %rsp,%rbp
  8004207cc9:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ccd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cd5:	48 89 c7             	mov    %rax,%rdi
  8004207cd8:	48 b8 9c 7c 20 04 80 	movabs $0x8004207c9c,%rax
  8004207cdf:	00 00 00 
  8004207ce2:	ff d0                	callq  *%rax
  8004207ce4:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207ce8:	c9                   	leaveq 
  8004207ce9:	c3                   	retq   

0000008004207cea <pa2page>:
  8004207cea:	55                   	push   %rbp
  8004207ceb:	48 89 e5             	mov    %rsp,%rbp
  8004207cee:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cfa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207cfe:	48 89 c2             	mov    %rax,%rdx
  8004207d01:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207d08:	00 00 00 
  8004207d0b:	48 8b 00             	mov    (%rax),%rax
  8004207d0e:	48 39 c2             	cmp    %rax,%rdx
  8004207d11:	72 2a                	jb     8004207d3d <pa2page+0x53>
  8004207d13:	48 ba 68 f1 21 04 80 	movabs $0x800421f168,%rdx
  8004207d1a:	00 00 00 
  8004207d1d:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d22:	48 bf 87 f1 21 04 80 	movabs $0x800421f187,%rdi
  8004207d29:	00 00 00 
  8004207d2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d31:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004207d38:	00 00 00 
  8004207d3b:	ff d1                	callq  *%rcx
  8004207d3d:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004207d44:	00 00 00 
  8004207d47:	48 8b 00             	mov    (%rax),%rax
  8004207d4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d4e:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d52:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d56:	48 01 d0             	add    %rdx,%rax
  8004207d59:	c9                   	leaveq 
  8004207d5a:	c3                   	retq   

0000008004207d5b <page2kva>:
  8004207d5b:	55                   	push   %rbp
  8004207d5c:	48 89 e5             	mov    %rsp,%rbp
  8004207d5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d6b:	48 89 c7             	mov    %rax,%rdi
  8004207d6e:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004207d75:	00 00 00 
  8004207d78:	ff d0                	callq  *%rax
  8004207d7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d82:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d86:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d8c:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207d93:	00 00 00 
  8004207d96:	48 8b 00             	mov    (%rax),%rax
  8004207d99:	48 39 c2             	cmp    %rax,%rdx
  8004207d9c:	72 32                	jb     8004207dd0 <page2kva+0x75>
  8004207d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207da2:	48 89 c1             	mov    %rax,%rcx
  8004207da5:	48 ba 98 f1 21 04 80 	movabs $0x800421f198,%rdx
  8004207dac:	00 00 00 
  8004207daf:	be 62 00 00 00       	mov    $0x62,%esi
  8004207db4:	48 bf 87 f1 21 04 80 	movabs $0x800421f187,%rdi
  8004207dbb:	00 00 00 
  8004207dbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dc3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207dca:	00 00 00 
  8004207dcd:	41 ff d0             	callq  *%r8
  8004207dd0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207dd7:	00 00 00 
  8004207dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dde:	48 01 d0             	add    %rdx,%rax
  8004207de1:	c9                   	leaveq 
  8004207de2:	c3                   	retq   

0000008004207de3 <unlock_kernel>:
  8004207de3:	55                   	push   %rbp
  8004207de4:	48 89 e5             	mov    %rsp,%rbp
  8004207de7:	48 bf 60 47 23 04 80 	movabs $0x8004234760,%rdi
  8004207dee:	00 00 00 
  8004207df1:	48 b8 6c 86 21 04 80 	movabs $0x800421866c,%rax
  8004207df8:	00 00 00 
  8004207dfb:	ff d0                	callq  *%rax
  8004207dfd:	f3 90                	pause  
  8004207dff:	5d                   	pop    %rbp
  8004207e00:	c3                   	retq   

0000008004207e01 <envid2env>:
  8004207e01:	55                   	push   %rbp
  8004207e02:	48 89 e5             	mov    %rsp,%rbp
  8004207e05:	53                   	push   %rbx
  8004207e06:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e0a:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e11:	89 d0                	mov    %edx,%eax
  8004207e13:	88 45 d8             	mov    %al,-0x28(%rbp)
  8004207e16:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207e1a:	75 41                	jne    8004207e5d <envid2env+0x5c>
  8004207e1c:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004207e23:	00 00 00 
  8004207e26:	ff d0                	callq  *%rax
  8004207e28:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004207e2f:	00 00 00 
  8004207e32:	48 98                	cltq   
  8004207e34:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e38:	48 89 c1             	mov    %rax,%rcx
  8004207e3b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e3f:	48 01 c8             	add    %rcx,%rax
  8004207e42:	48 01 d0             	add    %rdx,%rax
  8004207e45:	48 83 c0 08          	add    $0x8,%rax
  8004207e49:	48 8b 10             	mov    (%rax),%rdx
  8004207e4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e50:	48 89 10             	mov    %rdx,(%rax)
  8004207e53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e58:	e9 fd 00 00 00       	jmpq   8004207f5a <envid2env+0x159>
  8004207e5d:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207e64:	00 00 00 
  8004207e67:	48 8b 10             	mov    (%rax),%rdx
  8004207e6a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e6d:	48 98                	cltq   
  8004207e6f:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207e74:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e7b:	48 01 d0             	add    %rdx,%rax
  8004207e7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004207e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e86:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e8c:	85 c0                	test   %eax,%eax
  8004207e8e:	74 0f                	je     8004207e9f <envid2env+0x9e>
  8004207e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e94:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207e9a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207e9d:	74 15                	je     8004207eb4 <envid2env+0xb3>
  8004207e9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207ea3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207eaa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207eaf:	e9 a6 00 00 00       	jmpq   8004207f5a <envid2env+0x159>
  8004207eb4:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207eb8:	0f 84 8c 00 00 00    	je     8004207f4a <envid2env+0x149>
  8004207ebe:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004207ec5:	00 00 00 
  8004207ec8:	ff d0                	callq  *%rax
  8004207eca:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004207ed1:	00 00 00 
  8004207ed4:	48 98                	cltq   
  8004207ed6:	48 c1 e0 03          	shl    $0x3,%rax
  8004207eda:	48 89 c1             	mov    %rax,%rcx
  8004207edd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207ee1:	48 01 c8             	add    %rcx,%rax
  8004207ee4:	48 01 d0             	add    %rdx,%rax
  8004207ee7:	48 83 c0 08          	add    $0x8,%rax
  8004207eeb:	48 8b 00             	mov    (%rax),%rax
  8004207eee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004207ef2:	74 56                	je     8004207f4a <envid2env+0x149>
  8004207ef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ef8:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207efe:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004207f05:	00 00 00 
  8004207f08:	ff d0                	callq  *%rax
  8004207f0a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004207f11:	00 00 00 
  8004207f14:	48 98                	cltq   
  8004207f16:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f1a:	48 89 c1             	mov    %rax,%rcx
  8004207f1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f21:	48 01 c8             	add    %rcx,%rax
  8004207f24:	48 01 d0             	add    %rdx,%rax
  8004207f27:	48 83 c0 08          	add    $0x8,%rax
  8004207f2b:	48 8b 00             	mov    (%rax),%rax
  8004207f2e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f34:	39 c3                	cmp    %eax,%ebx
  8004207f36:	74 12                	je     8004207f4a <envid2env+0x149>
  8004207f38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f3c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207f43:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207f48:	eb 10                	jmp    8004207f5a <envid2env+0x159>
  8004207f4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f4e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004207f52:	48 89 10             	mov    %rdx,(%rax)
  8004207f55:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f5a:	48 83 c4 28          	add    $0x28,%rsp
  8004207f5e:	5b                   	pop    %rbx
  8004207f5f:	5d                   	pop    %rbp
  8004207f60:	c3                   	retq   

0000008004207f61 <env_init>:
  8004207f61:	55                   	push   %rbp
  8004207f62:	48 89 e5             	mov    %rsp,%rbp
  8004207f65:	48 83 ec 10          	sub    $0x10,%rsp
  8004207f69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f70:	eb 6d                	jmp    8004207fdf <env_init+0x7e>
  8004207f72:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207f79:	00 00 00 
  8004207f7c:	48 8b 10             	mov    (%rax),%rdx
  8004207f7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f82:	48 98                	cltq   
  8004207f84:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f8b:	48 01 d0             	add    %rdx,%rax
  8004207f8e:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207f95:	00 00 00 
  8004207f98:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207f9f:	00 00 00 
  8004207fa2:	48 8b 10             	mov    (%rax),%rdx
  8004207fa5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fa8:	48 98                	cltq   
  8004207faa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fb1:	48 01 c2             	add    %rax,%rdx
  8004207fb4:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207fbb:	00 00 00 
  8004207fbe:	48 8b 08             	mov    (%rax),%rcx
  8004207fc1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fc4:	48 98                	cltq   
  8004207fc6:	48 83 c0 01          	add    $0x1,%rax
  8004207fca:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fd1:	48 01 c8             	add    %rcx,%rax
  8004207fd4:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
  8004207fdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207fdf:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207fe6:	7e 8a                	jle    8004207f72 <env_init+0x11>
  8004207fe8:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207fef:	00 00 00 
  8004207ff2:	48 8b 00             	mov    (%rax),%rax
  8004207ff5:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004207ffb:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208002:	00 00 00 00 
  8004208006:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420800d:	00 00 00 
  8004208010:	48 8b 10             	mov    (%rax),%rdx
  8004208013:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  800420801a:	00 00 00 
  800420801d:	48 89 10             	mov    %rdx,(%rax)
  8004208020:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  8004208027:	00 00 00 
  800420802a:	ff d0                	callq  *%rax
  800420802c:	c9                   	leaveq 
  800420802d:	c3                   	retq   

000000800420802e <env_init_percpu>:
  800420802e:	55                   	push   %rbp
  800420802f:	48 89 e5             	mov    %rsp,%rbp
  8004208032:	53                   	push   %rbx
  8004208033:	48 83 ec 10          	sub    $0x10,%rsp
  8004208037:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420803e:	00 00 00 
  8004208041:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004208045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208049:	0f 01 10             	lgdt   (%rax)
  800420804c:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208051:	8e e8                	mov    %eax,%gs
  8004208053:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208058:	8e e0                	mov    %eax,%fs
  800420805a:	b8 10 00 00 00       	mov    $0x10,%eax
  800420805f:	8e c0                	mov    %eax,%es
  8004208061:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208066:	8e d8                	mov    %eax,%ds
  8004208068:	b8 10 00 00 00       	mov    $0x10,%eax
  800420806d:	8e d0                	mov    %eax,%ss
  800420806f:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208074:	89 c3                	mov    %eax,%ebx
  8004208076:	53                   	push   %rbx
  8004208077:	48 b8 84 80 20 04 80 	movabs $0x8004208084,%rax
  800420807e:	00 00 00 
  8004208081:	50                   	push   %rax
  8004208082:	48 cb                	lretq  
  8004208084:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
	__asm __volatile("lldt %0" : : "r" (sel));
  800420808a:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420808e:	0f 00 d0             	lldt   %ax
  8004208091:	48 83 c4 10          	add    $0x10,%rsp
  8004208095:	5b                   	pop    %rbx
  8004208096:	5d                   	pop    %rbp
  8004208097:	c3                   	retq   

0000008004208098 <env_setup_vm>:
  8004208098:	55                   	push   %rbp
  8004208099:	48 89 e5             	mov    %rsp,%rbp
  800420809c:	48 83 ec 20          	sub    $0x20,%rsp
  80042080a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042080a4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042080ab:	00 
  80042080ac:	bf 01 00 00 00       	mov    $0x1,%edi
  80042080b1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042080b8:	00 00 00 
  80042080bb:	ff d0                	callq  *%rax
  80042080bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042080c1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042080c6:	75 0a                	jne    80042080d2 <env_setup_vm+0x3a>
  80042080c8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042080cd:	e9 bc 00 00 00       	jmpq   800420818e <env_setup_vm+0xf6>
  80042080d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080d6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042080da:	8d 50 01             	lea    0x1(%rax),%edx
  80042080dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e1:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042080e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e9:	48 89 c7             	mov    %rax,%rdi
  80042080ec:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042080f3:	00 00 00 
  80042080f6:	ff d0                	callq  *%rax
  80042080f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080fc:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
  8004208103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208107:	48 89 c7             	mov    %rax,%rdi
  800420810a:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004208111:	00 00 00 
  8004208114:	ff d0                	callq  *%rax
  8004208116:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420811a:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)
  8004208121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208125:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420812c:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208131:	be 00 00 00 00       	mov    $0x0,%esi
  8004208136:	48 89 c7             	mov    %rax,%rdi
  8004208139:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004208140:	00 00 00 
  8004208143:	ff d0                	callq  *%rax
  8004208145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208149:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208150:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208154:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420815b:	00 00 00 
  800420815e:	48 8b 00             	mov    (%rax),%rax
  8004208161:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208165:	48 89 02             	mov    %rax,(%rdx)
  8004208168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420816c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208173:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208177:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420817b:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208182:	48 83 c8 05          	or     $0x5,%rax
  8004208186:	48 89 02             	mov    %rax,(%rdx)
  8004208189:	b8 00 00 00 00       	mov    $0x0,%eax
  800420818e:	c9                   	leaveq 
  800420818f:	c3                   	retq   

0000008004208190 <env_guest_alloc>:
  8004208190:	55                   	push   %rbp
  8004208191:	48 89 e5             	mov    %rsp,%rbp
  8004208194:	48 83 ec 50          	sub    $0x50,%rsp
  8004208198:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420819c:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  800420819f:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  80042081a6:	00 00 00 
  80042081a9:	48 8b 00             	mov    (%rax),%rax
  80042081ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042081b0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042081b5:	75 0a                	jne    80042081c1 <env_guest_alloc+0x31>
  80042081b7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042081bc:	e9 55 04 00 00       	jmpq   8004208616 <env_guest_alloc+0x486>
  80042081c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081c5:	48 05 20 01 00 00    	add    $0x120,%rax
  80042081cb:	ba 48 00 00 00       	mov    $0x48,%edx
  80042081d0:	be 00 00 00 00       	mov    $0x0,%esi
  80042081d5:	48 89 c7             	mov    %rax,%rdi
  80042081d8:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  80042081df:	00 00 00 
  80042081e2:	ff d0                	callq  *%rax
  80042081e4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042081eb:	00 
  80042081ec:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081f1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042081f8:	00 00 00 
  80042081fb:	ff d0                	callq  *%rax
  80042081fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208201:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004208206:	75 0a                	jne    8004208212 <env_guest_alloc+0x82>
  8004208208:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420820d:	e9 04 04 00 00       	jmpq   8004208616 <env_guest_alloc+0x486>
  8004208212:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208216:	ba 10 00 00 00       	mov    $0x10,%edx
  800420821b:	be 00 00 00 00       	mov    $0x0,%esi
  8004208220:	48 89 c7             	mov    %rax,%rdi
  8004208223:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  800420822a:	00 00 00 
  800420822d:	ff d0                	callq  *%rax
  800420822f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208233:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208237:	8d 50 01             	lea    0x1(%rax),%edx
  800420823a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420823e:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004208242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208246:	48 89 c7             	mov    %rax,%rdi
  8004208249:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208250:	00 00 00 
  8004208253:	ff d0                	callq  *%rax
  8004208255:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208259:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
  8004208260:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208264:	48 89 c7             	mov    %rax,%rdi
  8004208267:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  800420826e:	00 00 00 
  8004208271:	ff d0                	callq  *%rax
  8004208273:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208277:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)
  800420827e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208283:	48 ba d9 ac 21 04 80 	movabs $0x800421acd9,%rdx
  800420828a:	00 00 00 
  800420828d:	ff d2                	callq  *%rdx
  800420828f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208293:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004208298:	75 1d                	jne    80042082b7 <env_guest_alloc+0x127>
  800420829a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420829e:	48 89 c7             	mov    %rax,%rdi
  80042082a1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042082a8:	00 00 00 
  80042082ab:	ff d0                	callq  *%rax
  80042082ad:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082b2:	e9 5f 03 00 00       	jmpq   8004208616 <env_guest_alloc+0x486>
  80042082b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082bb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082bf:	8d 50 01             	lea    0x1(%rax),%edx
  80042082c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082c6:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042082ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082ce:	48 89 c7             	mov    %rax,%rdi
  80042082d1:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042082d8:	00 00 00 
  80042082db:	ff d0                	callq  *%rax
  80042082dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042082e1:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)
  80042082e8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082ef:	00 
  80042082f0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042082f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042082fc:	00 00 00 
  80042082ff:	ff d0                	callq  *%rax
  8004208301:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208305:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420830a:	75 30                	jne    800420833c <env_guest_alloc+0x1ac>
  800420830c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208310:	48 89 c7             	mov    %rax,%rdi
  8004208313:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420831a:	00 00 00 
  800420831d:	ff d0                	callq  *%rax
  800420831f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208323:	48 89 c7             	mov    %rax,%rdi
  8004208326:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420832d:	00 00 00 
  8004208330:	ff d0                	callq  *%rax
  8004208332:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208337:	e9 da 02 00 00       	jmpq   8004208616 <env_guest_alloc+0x486>
  800420833c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208340:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208344:	8d 50 01             	lea    0x1(%rax),%edx
  8004208347:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420834b:	66 89 50 08          	mov    %dx,0x8(%rax)
  800420834f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208353:	48 89 c7             	mov    %rax,%rdi
  8004208356:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420835d:	00 00 00 
  8004208360:	ff d0                	callq  *%rax
  8004208362:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208366:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
  800420836d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208371:	48 89 c7             	mov    %rax,%rdi
  8004208374:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420837b:	00 00 00 
  800420837e:	ff d0                	callq  *%rax
  8004208380:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  8004208387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420838b:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)
  8004208392:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004208399:	00 
  800420839a:	bf 01 00 00 00       	mov    $0x1,%edi
  800420839f:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042083a6:	00 00 00 
  80042083a9:	ff d0                	callq  *%rax
  80042083ab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042083af:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042083b4:	75 43                	jne    80042083f9 <env_guest_alloc+0x269>
  80042083b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042083ba:	48 89 c7             	mov    %rax,%rdi
  80042083bd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083c4:	00 00 00 
  80042083c7:	ff d0                	callq  *%rax
  80042083c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042083cd:	48 89 c7             	mov    %rax,%rdi
  80042083d0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083d7:	00 00 00 
  80042083da:	ff d0                	callq  *%rax
  80042083dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042083e0:	48 89 c7             	mov    %rax,%rdi
  80042083e3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083ea:	00 00 00 
  80042083ed:	ff d0                	callq  *%rax
  80042083ef:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042083f4:	e9 1d 02 00 00       	jmpq   8004208616 <env_guest_alloc+0x486>
  80042083f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083fd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208401:	8d 50 01             	lea    0x1(%rax),%edx
  8004208404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208408:	66 89 50 08          	mov    %dx,0x8(%rax)
  800420840c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208410:	48 89 c7             	mov    %rax,%rdi
  8004208413:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420841a:	00 00 00 
  800420841d:	ff d0                	callq  *%rax
  800420841f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208423:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)
  800420842a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004208431:	00 
  8004208432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208437:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420843e:	00 00 00 
  8004208441:	ff d0                	callq  *%rax
  8004208443:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208447:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420844c:	75 56                	jne    80042084a4 <env_guest_alloc+0x314>
  800420844e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208452:	48 89 c7             	mov    %rax,%rdi
  8004208455:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420845c:	00 00 00 
  800420845f:	ff d0                	callq  *%rax
  8004208461:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208465:	48 89 c7             	mov    %rax,%rdi
  8004208468:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420846f:	00 00 00 
  8004208472:	ff d0                	callq  *%rax
  8004208474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208478:	48 89 c7             	mov    %rax,%rdi
  800420847b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208482:	00 00 00 
  8004208485:	ff d0                	callq  *%rax
  8004208487:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420848b:	48 89 c7             	mov    %rax,%rdi
  800420848e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208495:	00 00 00 
  8004208498:	ff d0                	callq  *%rax
  800420849a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420849f:	e9 72 01 00 00       	jmpq   8004208616 <env_guest_alloc+0x486>
  80042084a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084a8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042084ac:	8d 50 01             	lea    0x1(%rax),%edx
  80042084af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084b3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042084b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bb:	48 89 c7             	mov    %rax,%rdi
  80042084be:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042084c5:	00 00 00 
  80042084c8:	ff d0                	callq  *%rax
  80042084ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084ce:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)
  80042084d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084d9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042084df:	05 00 10 00 00       	add    $0x1000,%eax
  80042084e4:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042084e9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042084ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084f0:	7f 07                	jg     80042084f9 <env_guest_alloc+0x369>
  80042084f2:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
  80042084f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084fd:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004208504:	00 00 00 
  8004208507:	48 8b 00             	mov    (%rax),%rax
  800420850a:	48 29 c2             	sub    %rax,%rdx
  800420850d:	48 89 d0             	mov    %rdx,%rax
  8004208510:	48 c1 f8 03          	sar    $0x3,%rax
  8004208514:	48 89 c2             	mov    %rax,%rdx
  8004208517:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420851e:	fa a4 4f 
  8004208521:	48 0f af c2          	imul   %rdx,%rax
  8004208525:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208528:	89 c2                	mov    %eax,%edx
  800420852a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420852e:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  8004208534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208538:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  800420853b:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
  8004208541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208545:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  800420854c:	00 00 00 
  800420854f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208553:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420855a:	00 00 00 
  800420855d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208561:	c7 80 d8 00 00 00 00 	movl   $0x0,0xd8(%rax)
  8004208568:	00 00 00 
  800420856b:	48 b8 50 c2 4d 04 80 	movabs $0x80044dc250,%rax
  8004208572:	00 00 00 
  8004208575:	8b 00                	mov    (%rax),%eax
  8004208577:	8d 48 01             	lea    0x1(%rax),%ecx
  800420857a:	48 ba 50 c2 4d 04 80 	movabs $0x80044dc250,%rdx
  8004208581:	00 00 00 
  8004208584:	89 0a                	mov    %ecx,(%rdx)
  8004208586:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420858a:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
  8004208590:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208594:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  800420859a:	89 c6                	mov    %eax,%esi
  800420859c:	48 bf bb f1 21 04 80 	movabs $0x800421f1bb,%rdi
  80042085a3:	00 00 00 
  80042085a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042085ab:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042085b2:	00 00 00 
  80042085b5:	ff d2                	callq  *%rdx
  80042085b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085bb:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042085c0:	be 00 00 00 00       	mov    $0x0,%esi
  80042085c5:	48 89 c7             	mov    %rax,%rdi
  80042085c8:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  80042085cf:	00 00 00 
  80042085d2:	ff d0                	callq  *%rax
  80042085d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085d8:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042085df:	00 00 00 00 
  80042085e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085e7:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
  80042085ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085f2:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042085f9:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004208600:	00 00 00 
  8004208603:	48 89 10             	mov    %rdx,(%rax)
  8004208606:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420860a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420860e:	48 89 10             	mov    %rdx,(%rax)
  8004208611:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208616:	c9                   	leaveq 
  8004208617:	c3                   	retq   

0000008004208618 <env_guest_free>:
  8004208618:	55                   	push   %rbp
  8004208619:	48 89 e5             	mov    %rsp,%rbp
  800420861c:	53                   	push   %rbx
  800420861d:	48 83 ec 38          	sub    $0x38,%rsp
  8004208621:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004208625:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208629:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  8004208630:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208634:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420863b:	00 00 00 
  800420863e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208642:	77 32                	ja     8004208676 <env_guest_free+0x5e>
  8004208644:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208648:	48 89 c1             	mov    %rax,%rcx
  800420864b:	48 ba d8 f1 21 04 80 	movabs $0x800421f1d8,%rdx
  8004208652:	00 00 00 
  8004208655:	be 4c 01 00 00       	mov    $0x14c,%esi
  800420865a:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004208661:	00 00 00 
  8004208664:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208669:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208670:	00 00 00 
  8004208673:	41 ff d0             	callq  *%r8
  8004208676:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420867d:	ff ff ff 
  8004208680:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208684:	48 01 d0             	add    %rdx,%rax
  8004208687:	48 89 c7             	mov    %rax,%rdi
  800420868a:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208691:	00 00 00 
  8004208694:	ff d0                	callq  *%rax
  8004208696:	48 89 c7             	mov    %rax,%rdi
  8004208699:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042086a0:	00 00 00 
  80042086a3:	ff d0                	callq  *%rax
  80042086a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042086a9:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  80042086b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042086b4:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086bb:	00 00 00 
  80042086be:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042086c2:	77 32                	ja     80042086f6 <env_guest_free+0xde>
  80042086c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086c8:	48 89 c1             	mov    %rax,%rcx
  80042086cb:	48 ba d8 f1 21 04 80 	movabs $0x800421f1d8,%rdx
  80042086d2:	00 00 00 
  80042086d5:	be 4e 01 00 00       	mov    $0x14e,%esi
  80042086da:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  80042086e1:	00 00 00 
  80042086e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042086e9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042086f0:	00 00 00 
  80042086f3:	41 ff d0             	callq  *%r8
  80042086f6:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086fd:	ff ff ff 
  8004208700:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208704:	48 01 d0             	add    %rdx,%rax
  8004208707:	48 89 c7             	mov    %rax,%rdi
  800420870a:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208711:	00 00 00 
  8004208714:	ff d0                	callq  *%rax
  8004208716:	48 89 c7             	mov    %rax,%rdi
  8004208719:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208720:	00 00 00 
  8004208723:	ff d0                	callq  *%rax
  8004208725:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208729:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  8004208730:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208734:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420873b:	00 00 00 
  800420873e:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004208742:	77 32                	ja     8004208776 <env_guest_free+0x15e>
  8004208744:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208748:	48 89 c1             	mov    %rax,%rcx
  800420874b:	48 ba d8 f1 21 04 80 	movabs $0x800421f1d8,%rdx
  8004208752:	00 00 00 
  8004208755:	be 50 01 00 00       	mov    $0x150,%esi
  800420875a:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004208761:	00 00 00 
  8004208764:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208769:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208770:	00 00 00 
  8004208773:	41 ff d0             	callq  *%r8
  8004208776:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420877d:	ff ff ff 
  8004208780:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208784:	48 01 d0             	add    %rdx,%rax
  8004208787:	48 89 c7             	mov    %rax,%rdi
  800420878a:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208791:	00 00 00 
  8004208794:	ff d0                	callq  *%rax
  8004208796:	48 89 c7             	mov    %rax,%rdi
  8004208799:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042087a0:	00 00 00 
  80042087a3:	ff d0                	callq  *%rax
  80042087a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042087a9:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  80042087b0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042087b4:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042087bb:	00 00 00 
  80042087be:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042087c2:	77 32                	ja     80042087f6 <env_guest_free+0x1de>
  80042087c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087c8:	48 89 c1             	mov    %rax,%rcx
  80042087cb:	48 ba d8 f1 21 04 80 	movabs $0x800421f1d8,%rdx
  80042087d2:	00 00 00 
  80042087d5:	be 51 01 00 00       	mov    $0x151,%esi
  80042087da:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  80042087e1:	00 00 00 
  80042087e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042087e9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042087f0:	00 00 00 
  80042087f3:	41 ff d0             	callq  *%r8
  80042087f6:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087fd:	ff ff ff 
  8004208800:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208804:	48 01 d0             	add    %rdx,%rax
  8004208807:	48 89 c7             	mov    %rax,%rdi
  800420880a:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208811:	00 00 00 
  8004208814:	ff d0                	callq  *%rax
  8004208816:	48 89 c7             	mov    %rax,%rdi
  8004208819:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208820:	00 00 00 
  8004208823:	ff d0                	callq  *%rax
  8004208825:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208829:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208830:	48 89 c7             	mov    %rax,%rdi
  8004208833:	48 b8 c1 a4 21 04 80 	movabs $0x800421a4c1,%rax
  800420883a:	00 00 00 
  800420883d:	ff d0                	callq  *%rax
  800420883f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208843:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420884a:	48 89 c7             	mov    %rax,%rdi
  800420884d:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208854:	00 00 00 
  8004208857:	ff d0                	callq  *%rax
  8004208859:	48 89 c7             	mov    %rax,%rdi
  800420885c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208863:	00 00 00 
  8004208866:	ff d0                	callq  *%rax
  8004208868:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420886c:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208873:	00 00 00 00 
  8004208877:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420887b:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208882:	00 00 00 00 
  8004208886:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420888a:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208891:	00 00 00 
  8004208894:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  800420889b:	00 00 00 
  800420889e:	48 8b 10             	mov    (%rax),%rdx
  80042088a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088a5:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
  80042088ac:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  80042088b3:	00 00 00 
  80042088b6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042088ba:	48 89 10             	mov    %rdx,(%rax)
  80042088bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088c1:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  80042088c7:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042088ce:	00 00 00 
  80042088d1:	ff d0                	callq  *%rax
  80042088d3:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042088da:	00 00 00 
  80042088dd:	48 98                	cltq   
  80042088df:	48 c1 e0 03          	shl    $0x3,%rax
  80042088e3:	48 89 c1             	mov    %rax,%rcx
  80042088e6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088ea:	48 01 c8             	add    %rcx,%rax
  80042088ed:	48 01 d0             	add    %rdx,%rax
  80042088f0:	48 83 c0 08          	add    $0x8,%rax
  80042088f4:	48 8b 00             	mov    (%rax),%rax
  80042088f7:	48 85 c0             	test   %rax,%rax
  80042088fa:	74 38                	je     8004208934 <env_guest_free+0x31c>
  80042088fc:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004208903:	00 00 00 
  8004208906:	ff d0                	callq  *%rax
  8004208908:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420890f:	00 00 00 
  8004208912:	48 98                	cltq   
  8004208914:	48 c1 e0 03          	shl    $0x3,%rax
  8004208918:	48 89 c1             	mov    %rax,%rcx
  800420891b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420891f:	48 01 c8             	add    %rcx,%rax
  8004208922:	48 01 d0             	add    %rdx,%rax
  8004208925:	48 83 c0 08          	add    $0x8,%rax
  8004208929:	48 8b 00             	mov    (%rax),%rax
  800420892c:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208932:	eb 05                	jmp    8004208939 <env_guest_free+0x321>
  8004208934:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208939:	89 da                	mov    %ebx,%edx
  800420893b:	89 c6                	mov    %eax,%esi
  800420893d:	48 bf 10 f2 21 04 80 	movabs $0x800421f210,%rdi
  8004208944:	00 00 00 
  8004208947:	b8 00 00 00 00       	mov    $0x0,%eax
  800420894c:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  8004208953:	00 00 00 
  8004208956:	ff d1                	callq  *%rcx
  8004208958:	48 83 c4 38          	add    $0x38,%rsp
  800420895c:	5b                   	pop    %rbx
  800420895d:	5d                   	pop    %rbp
  800420895e:	c3                   	retq   

000000800420895f <env_alloc>:
  800420895f:	55                   	push   %rbp
  8004208960:	48 89 e5             	mov    %rsp,%rbp
  8004208963:	48 83 ec 30          	sub    $0x30,%rsp
  8004208967:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420896b:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  800420896e:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004208975:	00 00 00 
  8004208978:	48 8b 00             	mov    (%rax),%rax
  800420897b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420897f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208984:	75 0a                	jne    8004208990 <env_alloc+0x31>
  8004208986:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  800420898b:	e9 69 01 00 00       	jmpq   8004208af9 <env_alloc+0x19a>
  8004208990:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208994:	48 89 c7             	mov    %rax,%rdi
  8004208997:	48 b8 98 80 20 04 80 	movabs $0x8004208098,%rax
  800420899e:	00 00 00 
  80042089a1:	ff d0                	callq  *%rax
  80042089a3:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042089a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  80042089aa:	79 08                	jns    80042089b4 <env_alloc+0x55>
  80042089ac:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042089af:	e9 45 01 00 00       	jmpq   8004208af9 <env_alloc+0x19a>
  80042089b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089b8:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042089be:	05 00 10 00 00       	add    $0x1000,%eax
  80042089c3:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042089c8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042089cb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089cf:	7f 07                	jg     80042089d8 <env_alloc+0x79>
  80042089d1:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
  80042089d8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089dc:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  80042089e3:	00 00 00 
  80042089e6:	48 8b 00             	mov    (%rax),%rax
  80042089e9:	48 29 c2             	sub    %rax,%rdx
  80042089ec:	48 89 d0             	mov    %rdx,%rax
  80042089ef:	48 c1 f8 03          	sar    $0x3,%rax
  80042089f3:	48 89 c2             	mov    %rax,%rdx
  80042089f6:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089fd:	fa a4 4f 
  8004208a00:	48 0f af c2          	imul   %rdx,%rax
  8004208a04:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208a07:	89 c2                	mov    %eax,%edx
  8004208a09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a0d:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  8004208a13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a17:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208a1a:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
  8004208a20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a24:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208a2b:	00 00 00 
  8004208a2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a32:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208a39:	00 00 00 
  8004208a3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a40:	c7 80 d8 00 00 00 00 	movl   $0x0,0xd8(%rax)
  8004208a47:	00 00 00 
  8004208a4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a4e:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208a53:	be 00 00 00 00       	mov    $0x0,%esi
  8004208a58:	48 89 c7             	mov    %rax,%rdi
  8004208a5b:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004208a62:	00 00 00 
  8004208a65:	ff d0                	callq  *%rax
  8004208a67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a6b:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a72:	23 00 
  8004208a74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a78:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
  8004208a7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a82:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a89:	23 00 
  8004208a8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a8f:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a94:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
  8004208a9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a9f:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208aa6:	1b 00 
  8004208aa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aac:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208ab3:	00 02 00 00 
  8004208ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208abb:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208ac2:	00 00 00 00 
  8004208ac6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aca:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
  8004208ad1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ad5:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208adc:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004208ae3:	00 00 00 
  8004208ae6:	48 89 10             	mov    %rdx,(%rax)
  8004208ae9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208aed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208af1:	48 89 10             	mov    %rdx,(%rax)
  8004208af4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208af9:	c9                   	leaveq 
  8004208afa:	c3                   	retq   

0000008004208afb <region_alloc>:
  8004208afb:	55                   	push   %rbp
  8004208afc:	48 89 e5             	mov    %rsp,%rbp
  8004208aff:	48 83 ec 40          	sub    $0x40,%rsp
  8004208b03:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208b07:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208b0b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004208b0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b13:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b17:	48 01 d0             	add    %rdx,%rax
  8004208b1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004208b1e:	e9 c8 00 00 00       	jmpq   8004208beb <region_alloc+0xf0>
  8004208b23:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208b28:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004208b2f:	00 00 00 
  8004208b32:	ff d0                	callq  *%rax
  8004208b34:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208b38:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208b3d:	75 30                	jne    8004208b6f <region_alloc+0x74>
  8004208b3f:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208b44:	48 ba 30 f2 21 04 80 	movabs $0x800421f230,%rdx
  8004208b4b:	00 00 00 
  8004208b4e:	be c9 01 00 00       	mov    $0x1c9,%esi
  8004208b53:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004208b5a:	00 00 00 
  8004208b5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b62:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208b69:	00 00 00 
  8004208b6c:	41 ff d0             	callq  *%r8
  8004208b6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b73:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b7a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b7e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b82:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b87:	48 89 c7             	mov    %rax,%rdi
  8004208b8a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004208b91:	00 00 00 
  8004208b94:	ff d0                	callq  *%rax
  8004208b96:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b99:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b9d:	79 30                	jns    8004208bcf <region_alloc+0xd4>
  8004208b9f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208ba2:	89 c1                	mov    %eax,%ecx
  8004208ba4:	48 ba 58 f2 21 04 80 	movabs $0x800421f258,%rdx
  8004208bab:	00 00 00 
  8004208bae:	be cd 01 00 00       	mov    $0x1cd,%esi
  8004208bb3:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004208bba:	00 00 00 
  8004208bbd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208bc2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208bc9:	00 00 00 
  8004208bcc:	41 ff d0             	callq  *%r8
  8004208bcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bd3:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208bd9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208bdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208be1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208be7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004208beb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bef:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208bf3:	0f 82 2a ff ff ff    	jb     8004208b23 <region_alloc+0x28>
  8004208bf9:	c9                   	leaveq 
  8004208bfa:	c3                   	retq   

0000008004208bfb <load_icode>:
  8004208bfb:	55                   	push   %rbp
  8004208bfc:	48 89 e5             	mov    %rsp,%rbp
  8004208bff:	53                   	push   %rbx
  8004208c00:	48 83 ec 78          	sub    $0x78,%rsp
  8004208c04:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208c08:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004208c0c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208c10:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004208c14:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208c19:	0f 84 6f 03 00 00    	je     8004208f8e <load_icode+0x393>
  8004208c1f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c23:	8b 00                	mov    (%rax),%eax
  8004208c25:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208c2a:	0f 85 5e 03 00 00    	jne    8004208f8e <load_icode+0x393>
  8004208c30:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c34:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c3b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208c3f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208c46:	00 00 00 
  8004208c49:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208c4d:	77 32                	ja     8004208c81 <load_icode+0x86>
  8004208c4f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c53:	48 89 c1             	mov    %rax,%rcx
  8004208c56:	48 ba d8 f1 21 04 80 	movabs $0x800421f1d8,%rdx
  8004208c5d:	00 00 00 
  8004208c60:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208c65:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004208c6c:	00 00 00 
  8004208c6f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c74:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208c7b:	00 00 00 
  8004208c7e:	41 ff d0             	callq  *%r8
  8004208c81:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c88:	ff ff ff 
  8004208c8b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c8f:	48 01 d0             	add    %rdx,%rax
  8004208c92:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c96:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c9a:	0f 22 d8             	mov    %rax,%cr3
  8004208c9d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ca1:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ca5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ca9:	48 01 d0             	add    %rdx,%rax
  8004208cac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208cb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208cb4:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208cb8:	0f b7 c0             	movzwl %ax,%eax
  8004208cbb:	48 c1 e0 03          	shl    $0x3,%rax
  8004208cbf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208cc6:	00 
  8004208cc7:	48 29 c2             	sub    %rax,%rdx
  8004208cca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cce:	48 01 d0             	add    %rdx,%rax
  8004208cd1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004208cd5:	e9 bd 00 00 00       	jmpq   8004208d97 <load_icode+0x19c>
  8004208cda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cde:	8b 00                	mov    (%rax),%eax
  8004208ce0:	83 f8 01             	cmp    $0x1,%eax
  8004208ce3:	0f 85 a9 00 00 00    	jne    8004208d92 <load_icode+0x197>
  8004208ce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ced:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208cf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cf5:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208cf9:	48 89 c1             	mov    %rax,%rcx
  8004208cfc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d00:	48 89 ce             	mov    %rcx,%rsi
  8004208d03:	48 89 c7             	mov    %rax,%rdi
  8004208d06:	48 b8 fb 8a 20 04 80 	movabs $0x8004208afb,%rax
  8004208d0d:	00 00 00 
  8004208d10:	ff d0                	callq  *%rax
  8004208d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d16:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d1e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208d22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d26:	48 01 c1             	add    %rax,%rcx
  8004208d29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d2d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208d31:	48 89 ce             	mov    %rcx,%rsi
  8004208d34:	48 89 c7             	mov    %rax,%rdi
  8004208d37:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  8004208d3e:	00 00 00 
  8004208d41:	ff d0                	callq  *%rax
  8004208d43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d47:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d4f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208d53:	48 39 c2             	cmp    %rax,%rdx
  8004208d56:	73 3a                	jae    8004208d92 <load_icode+0x197>
  8004208d58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d64:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d68:	48 29 c2             	sub    %rax,%rdx
  8004208d6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d6f:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d77:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d7b:	48 01 c8             	add    %rcx,%rax
  8004208d7e:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d83:	48 89 c7             	mov    %rax,%rdi
  8004208d86:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004208d8d:	00 00 00 
  8004208d90:	ff d0                	callq  *%rax
  8004208d92:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d9b:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d9f:	0f 82 35 ff ff ff    	jb     8004208cda <load_icode+0xdf>
  8004208da5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208da9:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208dae:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208db3:	48 89 c7             	mov    %rax,%rdi
  8004208db6:	48 b8 fb 8a 20 04 80 	movabs $0x8004208afb,%rax
  8004208dbd:	00 00 00 
  8004208dc0:	ff d0                	callq  *%rax
  8004208dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208dc6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208dca:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dce:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004208dd5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dd9:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208dde:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)
  8004208de5:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208dec:	00 
  8004208ded:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208df1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208df5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208df9:	48 01 d0             	add    %rdx,%rax
  8004208dfc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208e00:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e04:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208e08:	0f b7 c0             	movzwl %ax,%eax
  8004208e0b:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e0f:	48 89 c2             	mov    %rax,%rdx
  8004208e12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e16:	48 01 d0             	add    %rdx,%rax
  8004208e19:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004208e1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e21:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208e25:	0f b7 c0             	movzwl %ax,%eax
  8004208e28:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e2c:	48 89 c2             	mov    %rax,%rdx
  8004208e2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e33:	48 01 d0             	add    %rdx,%rax
  8004208e36:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004208e3a:	e9 27 01 00 00       	jmpq   8004208f66 <load_icode+0x36b>
  8004208e3f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208e43:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208e47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e4b:	8b 00                	mov    (%rax),%eax
  8004208e4d:	89 c0                	mov    %eax,%eax
  8004208e4f:	48 01 c2             	add    %rax,%rdx
  8004208e52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e56:	48 01 d0             	add    %rdx,%rax
  8004208e59:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004208e5d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e61:	48 be 80 f2 21 04 80 	movabs $0x800421f280,%rsi
  8004208e68:	00 00 00 
  8004208e6b:	48 89 c7             	mov    %rax,%rdi
  8004208e6e:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004208e75:	00 00 00 
  8004208e78:	ff d0                	callq  *%rax
  8004208e7a:	85 c0                	test   %eax,%eax
  8004208e7c:	0f 84 84 00 00 00    	je     8004208f06 <load_icode+0x30b>
  8004208e82:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e86:	48 be 8c f2 21 04 80 	movabs $0x800421f28c,%rsi
  8004208e8d:	00 00 00 
  8004208e90:	48 89 c7             	mov    %rax,%rdi
  8004208e93:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004208e9a:	00 00 00 
  8004208e9d:	ff d0                	callq  *%rax
  8004208e9f:	85 c0                	test   %eax,%eax
  8004208ea1:	74 63                	je     8004208f06 <load_icode+0x30b>
  8004208ea3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ea7:	48 be 9a f2 21 04 80 	movabs $0x800421f29a,%rsi
  8004208eae:	00 00 00 
  8004208eb1:	48 89 c7             	mov    %rax,%rdi
  8004208eb4:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004208ebb:	00 00 00 
  8004208ebe:	ff d0                	callq  *%rax
  8004208ec0:	85 c0                	test   %eax,%eax
  8004208ec2:	74 42                	je     8004208f06 <load_icode+0x30b>
  8004208ec4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ec8:	48 be a6 f2 21 04 80 	movabs $0x800421f2a6,%rsi
  8004208ecf:	00 00 00 
  8004208ed2:	48 89 c7             	mov    %rax,%rdi
  8004208ed5:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004208edc:	00 00 00 
  8004208edf:	ff d0                	callq  *%rax
  8004208ee1:	85 c0                	test   %eax,%eax
  8004208ee3:	74 21                	je     8004208f06 <load_icode+0x30b>
  8004208ee5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ee9:	48 be b0 f2 21 04 80 	movabs $0x800421f2b0,%rsi
  8004208ef0:	00 00 00 
  8004208ef3:	48 89 c7             	mov    %rax,%rdi
  8004208ef6:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004208efd:	00 00 00 
  8004208f00:	ff d0                	callq  *%rax
  8004208f02:	85 c0                	test   %eax,%eax
  8004208f04:	75 5b                	jne    8004208f61 <load_icode+0x366>
  8004208f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f0a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f0e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208f12:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208f16:	48 89 ce             	mov    %rcx,%rsi
  8004208f19:	48 89 c7             	mov    %rax,%rdi
  8004208f1c:	48 b8 fb 8a 20 04 80 	movabs $0x8004208afb,%rax
  8004208f23:	00 00 00 
  8004208f26:	ff d0                	callq  *%rax
  8004208f28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f2c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f34:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208f38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208f3c:	48 01 c1             	add    %rax,%rcx
  8004208f3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208f43:	48 89 ce             	mov    %rcx,%rsi
  8004208f46:	48 89 c7             	mov    %rax,%rdi
  8004208f49:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  8004208f50:	00 00 00 
  8004208f53:	ff d0                	callq  *%rax
  8004208f55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f59:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208f5d:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  8004208f61:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208f66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f6a:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f6e:	0f 82 cb fe ff ff    	jb     8004208e3f <load_icode+0x244>
  8004208f74:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  8004208f7b:	00 00 00 
  8004208f7e:	48 8b 00             	mov    (%rax),%rax
  8004208f81:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f85:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f89:	0f 22 d8             	mov    %rax,%cr3
  8004208f8c:	eb 2a                	jmp    8004208fb8 <load_icode+0x3bd>
  8004208f8e:	48 ba bb f2 21 04 80 	movabs $0x800421f2bb,%rdx
  8004208f95:	00 00 00 
  8004208f98:	be 1a 02 00 00       	mov    $0x21a,%esi
  8004208f9d:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004208fa4:	00 00 00 
  8004208fa7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208fac:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004208fb3:	00 00 00 
  8004208fb6:	ff d1                	callq  *%rcx
  8004208fb8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208fbc:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208fc0:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
  8004208fc7:	48 83 c4 78          	add    $0x78,%rsp
  8004208fcb:	5b                   	pop    %rbx
  8004208fcc:	5d                   	pop    %rbp
  8004208fcd:	c3                   	retq   

0000008004208fce <env_create>:
  8004208fce:	55                   	push   %rbp
  8004208fcf:	48 89 e5             	mov    %rsp,%rbp
  8004208fd2:	48 83 ec 20          	sub    $0x20,%rsp
  8004208fd6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208fda:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004208fdd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208fe1:	be 00 00 00 00       	mov    $0x0,%esi
  8004208fe6:	48 89 c7             	mov    %rax,%rdi
  8004208fe9:	48 b8 5f 89 20 04 80 	movabs $0x800420895f,%rax
  8004208ff0:	00 00 00 
  8004208ff3:	ff d0                	callq  *%rax
  8004208ff5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208ff8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208ffc:	79 30                	jns    800420902e <env_create+0x60>
  8004208ffe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209001:	89 c1                	mov    %eax,%ecx
  8004209003:	48 ba d0 f2 21 04 80 	movabs $0x800421f2d0,%rdx
  800420900a:	00 00 00 
  800420900d:	be 54 02 00 00       	mov    $0x254,%esi
  8004209012:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004209019:	00 00 00 
  800420901c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209021:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209028:	00 00 00 
  800420902b:	41 ff d0             	callq  *%r8
  800420902e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209032:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209036:	48 89 d6             	mov    %rdx,%rsi
  8004209039:	48 89 c7             	mov    %rax,%rdi
  800420903c:	48 b8 fb 8b 20 04 80 	movabs $0x8004208bfb,%rax
  8004209043:	00 00 00 
  8004209046:	ff d0                	callq  *%rax
  8004209048:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420904c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420904f:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)
  8004209055:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004209059:	75 19                	jne    8004209074 <env_create+0xa6>
  800420905b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420905f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209063:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  800420906a:	80 ce 30             	or     $0x30,%dh
  800420906d:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
  8004209074:	c9                   	leaveq 
  8004209075:	c3                   	retq   

0000008004209076 <env_free>:
  8004209076:	55                   	push   %rbp
  8004209077:	48 89 e5             	mov    %rsp,%rbp
  800420907a:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209081:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  8004209088:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420908f:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209095:	83 f8 03             	cmp    $0x3,%eax
  8004209098:	75 1b                	jne    80042090b5 <env_free+0x3f>
  800420909a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090a1:	48 89 c7             	mov    %rax,%rdi
  80042090a4:	48 b8 18 86 20 04 80 	movabs $0x8004208618,%rax
  80042090ab:	00 00 00 
  80042090ae:	ff d0                	callq  *%rax
  80042090b0:	e9 78 04 00 00       	jmpq   800420952d <env_free+0x4b7>
  80042090b5:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042090bc:	00 00 00 
  80042090bf:	ff d0                	callq  *%rax
  80042090c1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042090c8:	00 00 00 
  80042090cb:	48 98                	cltq   
  80042090cd:	48 c1 e0 03          	shl    $0x3,%rax
  80042090d1:	48 89 c1             	mov    %rax,%rcx
  80042090d4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090d8:	48 01 c8             	add    %rcx,%rax
  80042090db:	48 01 d0             	add    %rdx,%rax
  80042090de:	48 83 c0 08          	add    $0x8,%rax
  80042090e2:	48 8b 00             	mov    (%rax),%rax
  80042090e5:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042090ec:	75 18                	jne    8004209106 <env_free+0x90>
  80042090ee:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  80042090f5:	00 00 00 
  80042090f8:	48 8b 00             	mov    (%rax),%rax
  80042090fb:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042090ff:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004209103:	0f 22 d8             	mov    %rax,%cr3
  8004209106:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420910d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209114:	48 8b 00             	mov    (%rax),%rax
  8004209117:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420911d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004209121:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209125:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209129:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420912c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420912f:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004209136:	00 00 00 
  8004209139:	48 8b 00             	mov    (%rax),%rax
  800420913c:	48 39 c2             	cmp    %rax,%rdx
  800420913f:	72 32                	jb     8004209173 <env_free+0xfd>
  8004209141:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209145:	48 89 c1             	mov    %rax,%rcx
  8004209148:	48 ba 98 f1 21 04 80 	movabs $0x800421f198,%rdx
  800420914f:	00 00 00 
  8004209152:	be 84 02 00 00       	mov    $0x284,%esi
  8004209157:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  800420915e:	00 00 00 
  8004209161:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209166:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420916d:	00 00 00 
  8004209170:	41 ff d0             	callq  *%r8
  8004209173:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420917a:	00 00 00 
  800420917d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209181:	48 01 d0             	add    %rdx,%rax
  8004209184:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004209188:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420918f:	00 
  8004209190:	e9 ab 02 00 00       	jmpq   8004209440 <env_free+0x3ca>
  8004209195:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209199:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091a0:	00 
  80042091a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091a5:	48 01 d0             	add    %rdx,%rax
  80042091a8:	48 8b 00             	mov    (%rax),%rax
  80042091ab:	83 e0 01             	and    $0x1,%eax
  80042091ae:	48 85 c0             	test   %rax,%rax
  80042091b1:	75 05                	jne    80042091b8 <env_free+0x142>
  80042091b3:	e9 83 02 00 00       	jmpq   800420943b <env_free+0x3c5>
  80042091b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091bc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091c3:	00 
  80042091c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091c8:	48 01 d0             	add    %rdx,%rax
  80042091cb:	48 8b 00             	mov    (%rax),%rax
  80042091ce:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042091d4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042091d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091dc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042091e0:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042091e3:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042091e6:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042091ed:	00 00 00 
  80042091f0:	48 8b 00             	mov    (%rax),%rax
  80042091f3:	48 39 c2             	cmp    %rax,%rdx
  80042091f6:	72 32                	jb     800420922a <env_free+0x1b4>
  80042091f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091fc:	48 89 c1             	mov    %rax,%rcx
  80042091ff:	48 ba 98 f1 21 04 80 	movabs $0x800421f198,%rdx
  8004209206:	00 00 00 
  8004209209:	be 8c 02 00 00       	mov    $0x28c,%esi
  800420920e:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004209215:	00 00 00 
  8004209218:	b8 00 00 00 00       	mov    $0x0,%eax
  800420921d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209224:	00 00 00 
  8004209227:	41 ff d0             	callq  *%r8
  800420922a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209231:	00 00 00 
  8004209234:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004209238:	48 01 d0             	add    %rdx,%rax
  800420923b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420923f:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209244:	75 07                	jne    800420924d <env_free+0x1d7>
  8004209246:	b8 04 00 00 00       	mov    $0x4,%eax
  800420924b:	eb 05                	jmp    8004209252 <env_free+0x1dc>
  800420924d:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004209252:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004209255:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420925c:	00 
  800420925d:	e9 6e 01 00 00       	jmpq   80042093d0 <env_free+0x35a>
  8004209262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209266:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420926d:	00 
  800420926e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209272:	48 01 d0             	add    %rdx,%rax
  8004209275:	48 8b 00             	mov    (%rax),%rax
  8004209278:	83 e0 01             	and    $0x1,%eax
  800420927b:	48 85 c0             	test   %rax,%rax
  800420927e:	75 05                	jne    8004209285 <env_free+0x20f>
  8004209280:	e9 46 01 00 00       	jmpq   80042093cb <env_free+0x355>
  8004209285:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209289:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209290:	00 
  8004209291:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209295:	48 01 d0             	add    %rdx,%rax
  8004209298:	48 8b 00             	mov    (%rax),%rax
  800420929b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042092a1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042092a5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042092a9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042092ad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092b1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042092b5:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042092b8:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042092bb:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042092c2:	00 00 00 
  80042092c5:	48 8b 00             	mov    (%rax),%rax
  80042092c8:	48 39 c2             	cmp    %rax,%rdx
  80042092cb:	72 32                	jb     80042092ff <env_free+0x289>
  80042092cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092d1:	48 89 c1             	mov    %rax,%rcx
  80042092d4:	48 ba 98 f1 21 04 80 	movabs $0x800421f198,%rdx
  80042092db:	00 00 00 
  80042092de:	be 96 02 00 00       	mov    $0x296,%esi
  80042092e3:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  80042092ea:	00 00 00 
  80042092ed:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092f2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042092f9:	00 00 00 
  80042092fc:	41 ff d0             	callq  *%r8
  80042092ff:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209306:	00 00 00 
  8004209309:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420930d:	48 01 d0             	add    %rdx,%rax
  8004209310:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004209314:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420931b:	00 
  800420931c:	eb 67                	jmp    8004209385 <env_free+0x30f>
  800420931e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209322:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209329:	00 
  800420932a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420932e:	48 01 d0             	add    %rdx,%rax
  8004209331:	48 8b 00             	mov    (%rax),%rax
  8004209334:	83 e0 01             	and    $0x1,%eax
  8004209337:	48 85 c0             	test   %rax,%rax
  800420933a:	74 44                	je     8004209380 <env_free+0x30a>
  800420933c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209340:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004209344:	48 89 c2             	mov    %rax,%rdx
  8004209347:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420934b:	48 c1 e0 15          	shl    $0x15,%rax
  800420934f:	48 09 c2             	or     %rax,%rdx
  8004209352:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209356:	48 c1 e0 0c          	shl    $0xc,%rax
  800420935a:	48 09 d0             	or     %rdx,%rax
  800420935d:	48 89 c2             	mov    %rax,%rdx
  8004209360:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209367:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420936e:	48 89 d6             	mov    %rdx,%rsi
  8004209371:	48 89 c7             	mov    %rax,%rdi
  8004209374:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420937b:	00 00 00 
  800420937e:	ff d0                	callq  *%rax
  8004209380:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004209385:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  800420938c:	00 
  800420938d:	76 8f                	jbe    800420931e <env_free+0x2a8>
  800420938f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209393:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420939a:	00 
  800420939b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420939f:	48 01 d0             	add    %rdx,%rax
  80042093a2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042093a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042093ad:	48 89 c7             	mov    %rax,%rdi
  80042093b0:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042093b7:	00 00 00 
  80042093ba:	ff d0                	callq  *%rax
  80042093bc:	48 89 c7             	mov    %rax,%rdi
  80042093bf:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042093c6:	00 00 00 
  80042093c9:	ff d0                	callq  *%rax
  80042093cb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042093d0:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042093d3:	48 98                	cltq   
  80042093d5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042093d9:	0f 87 83 fe ff ff    	ja     8004209262 <env_free+0x1ec>
  80042093df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093e3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ea:	00 
  80042093eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093ef:	48 01 d0             	add    %rdx,%rax
  80042093f2:	48 8b 00             	mov    (%rax),%rax
  80042093f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093fb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042093ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209403:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420940a:	00 
  800420940b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420940f:	48 01 d0             	add    %rdx,%rax
  8004209412:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004209419:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420941d:	48 89 c7             	mov    %rax,%rdi
  8004209420:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004209427:	00 00 00 
  800420942a:	ff d0                	callq  *%rax
  800420942c:	48 89 c7             	mov    %rax,%rdi
  800420942f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004209436:	00 00 00 
  8004209439:	ff d0                	callq  *%rax
  800420943b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004209440:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209445:	0f 86 4a fd ff ff    	jbe    8004209195 <env_free+0x11f>
  800420944b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209452:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209459:	48 8b 00             	mov    (%rax),%rax
  800420945c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209462:	48 89 c7             	mov    %rax,%rdi
  8004209465:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420946c:	00 00 00 
  800420946f:	ff d0                	callq  *%rax
  8004209471:	48 89 c7             	mov    %rax,%rdi
  8004209474:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420947b:	00 00 00 
  800420947e:	ff d0                	callq  *%rax
  8004209480:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209487:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420948e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004209495:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420949c:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042094a3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042094a7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094ae:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  80042094b5:	00 00 00 00 
  80042094b9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094c0:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042094c7:	00 00 00 00 
  80042094cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042094cf:	48 89 c7             	mov    %rax,%rdi
  80042094d2:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042094d9:	00 00 00 
  80042094dc:	ff d0                	callq  *%rax
  80042094de:	48 89 c7             	mov    %rax,%rdi
  80042094e1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042094e8:	00 00 00 
  80042094eb:	ff d0                	callq  *%rax
  80042094ed:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094f4:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042094fb:	00 00 00 
  80042094fe:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004209505:	00 00 00 
  8004209508:	48 8b 10             	mov    (%rax),%rdx
  800420950b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209512:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
  8004209519:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004209520:	00 00 00 
  8004209523:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420952a:	48 89 10             	mov    %rdx,(%rax)
  800420952d:	c9                   	leaveq 
  800420952e:	c3                   	retq   

000000800420952f <env_destroy>:
  800420952f:	55                   	push   %rbp
  8004209530:	48 89 e5             	mov    %rsp,%rbp
  8004209533:	48 83 ec 10          	sub    $0x10,%rsp
  8004209537:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420953b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420953f:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209545:	83 f8 03             	cmp    $0x3,%eax
  8004209548:	75 49                	jne    8004209593 <env_destroy+0x64>
  800420954a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004209551:	00 00 00 
  8004209554:	ff d0                	callq  *%rax
  8004209556:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420955d:	00 00 00 
  8004209560:	48 98                	cltq   
  8004209562:	48 c1 e0 03          	shl    $0x3,%rax
  8004209566:	48 89 c1             	mov    %rax,%rcx
  8004209569:	48 c1 e1 04          	shl    $0x4,%rcx
  800420956d:	48 01 c8             	add    %rcx,%rax
  8004209570:	48 01 d0             	add    %rdx,%rax
  8004209573:	48 83 c0 08          	add    $0x8,%rax
  8004209577:	48 8b 00             	mov    (%rax),%rax
  800420957a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420957e:	74 13                	je     8004209593 <env_destroy+0x64>
  8004209580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209584:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  800420958b:	00 00 00 
  800420958e:	e9 89 00 00 00       	jmpq   800420961c <env_destroy+0xed>
  8004209593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209597:	48 89 c7             	mov    %rax,%rdi
  800420959a:	48 b8 76 90 20 04 80 	movabs $0x8004209076,%rax
  80042095a1:	00 00 00 
  80042095a4:	ff d0                	callq  *%rax
  80042095a6:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042095ad:	00 00 00 
  80042095b0:	ff d0                	callq  *%rax
  80042095b2:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042095b9:	00 00 00 
  80042095bc:	48 98                	cltq   
  80042095be:	48 c1 e0 03          	shl    $0x3,%rax
  80042095c2:	48 89 c1             	mov    %rax,%rcx
  80042095c5:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095c9:	48 01 c8             	add    %rcx,%rax
  80042095cc:	48 01 d0             	add    %rdx,%rax
  80042095cf:	48 83 c0 08          	add    $0x8,%rax
  80042095d3:	48 8b 00             	mov    (%rax),%rax
  80042095d6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042095da:	75 40                	jne    800420961c <env_destroy+0xed>
  80042095dc:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042095e3:	00 00 00 
  80042095e6:	ff d0                	callq  *%rax
  80042095e8:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042095ef:	00 00 00 
  80042095f2:	48 98                	cltq   
  80042095f4:	48 c1 e0 03          	shl    $0x3,%rax
  80042095f8:	48 89 c1             	mov    %rax,%rcx
  80042095fb:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095ff:	48 01 c8             	add    %rcx,%rax
  8004209602:	48 01 d0             	add    %rdx,%rax
  8004209605:	48 83 c0 08          	add    $0x8,%rax
  8004209609:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004209610:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  8004209617:	00 00 00 
  800420961a:	ff d0                	callq  *%rax
  800420961c:	c9                   	leaveq 
  800420961d:	c3                   	retq   

000000800420961e <env_pop_tf>:
  800420961e:	55                   	push   %rbp
  800420961f:	48 89 e5             	mov    %rsp,%rbp
  8004209622:	53                   	push   %rbx
  8004209623:	48 83 ec 18          	sub    $0x18,%rsp
  8004209627:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420962b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004209632:	00 00 00 
  8004209635:	ff d0                	callq  *%rax
  8004209637:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420963e:	00 00 00 
  8004209641:	48 98                	cltq   
  8004209643:	48 c1 e0 03          	shl    $0x3,%rax
  8004209647:	48 89 c1             	mov    %rax,%rcx
  800420964a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420964e:	48 01 c8             	add    %rcx,%rax
  8004209651:	48 01 d0             	add    %rdx,%rax
  8004209654:	48 83 c0 08          	add    $0x8,%rax
  8004209658:	48 8b 18             	mov    (%rax),%rbx
  800420965b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004209662:	00 00 00 
  8004209665:	ff d0                	callq  *%rax
  8004209667:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
  800420966d:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209671:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004209675:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  800420967a:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  800420967f:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209684:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004209689:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  800420968e:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004209693:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004209698:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  800420969d:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  80042096a2:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  80042096a7:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  80042096ac:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  80042096b1:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  80042096b6:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  80042096bb:	48 83 c4 78          	add    $0x78,%rsp
  80042096bf:	8e 04 24             	mov    (%rsp),%es
  80042096c2:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042096c6:	48 83 c4 10          	add    $0x10,%rsp
  80042096ca:	48 83 c4 10          	add    $0x10,%rsp
  80042096ce:	48 cf                	iretq  
  80042096d0:	48 ba f8 f2 21 04 80 	movabs $0x800421f2f8,%rdx
  80042096d7:	00 00 00 
  80042096da:	be ee 02 00 00       	mov    $0x2ee,%esi
  80042096df:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  80042096e6:	00 00 00 
  80042096e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096ee:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042096f5:	00 00 00 
  80042096f8:	ff d1                	callq  *%rcx

00000080042096fa <env_run>:
  80042096fa:	55                   	push   %rbp
  80042096fb:	48 89 e5             	mov    %rsp,%rbp
  80042096fe:	48 83 ec 20          	sub    $0x20,%rsp
  8004209702:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209706:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420970d:	00 00 00 
  8004209710:	ff d0                	callq  *%rax
  8004209712:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004209719:	00 00 00 
  800420971c:	48 98                	cltq   
  800420971e:	48 c1 e0 03          	shl    $0x3,%rax
  8004209722:	48 89 c1             	mov    %rax,%rcx
  8004209725:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209729:	48 01 c8             	add    %rcx,%rax
  800420972c:	48 01 d0             	add    %rdx,%rax
  800420972f:	48 83 c0 08          	add    $0x8,%rax
  8004209733:	48 8b 00             	mov    (%rax),%rax
  8004209736:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420973a:	0f 84 28 01 00 00    	je     8004209868 <env_run+0x16e>
  8004209740:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004209747:	00 00 00 
  800420974a:	ff d0                	callq  *%rax
  800420974c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004209753:	00 00 00 
  8004209756:	48 98                	cltq   
  8004209758:	48 c1 e0 03          	shl    $0x3,%rax
  800420975c:	48 89 c1             	mov    %rax,%rcx
  800420975f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209763:	48 01 c8             	add    %rcx,%rax
  8004209766:	48 01 d0             	add    %rdx,%rax
  8004209769:	48 83 c0 08          	add    $0x8,%rax
  800420976d:	48 8b 00             	mov    (%rax),%rax
  8004209770:	48 85 c0             	test   %rax,%rax
  8004209773:	74 75                	je     80042097ea <env_run+0xf0>
  8004209775:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420977c:	00 00 00 
  800420977f:	ff d0                	callq  *%rax
  8004209781:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004209788:	00 00 00 
  800420978b:	48 98                	cltq   
  800420978d:	48 c1 e0 03          	shl    $0x3,%rax
  8004209791:	48 89 c1             	mov    %rax,%rcx
  8004209794:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209798:	48 01 c8             	add    %rcx,%rax
  800420979b:	48 01 d0             	add    %rdx,%rax
  800420979e:	48 83 c0 08          	add    $0x8,%rax
  80042097a2:	48 8b 00             	mov    (%rax),%rax
  80042097a5:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042097ab:	83 f8 03             	cmp    $0x3,%eax
  80042097ae:	75 3a                	jne    80042097ea <env_run+0xf0>
  80042097b0:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042097b7:	00 00 00 
  80042097ba:	ff d0                	callq  *%rax
  80042097bc:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042097c3:	00 00 00 
  80042097c6:	48 98                	cltq   
  80042097c8:	48 c1 e0 03          	shl    $0x3,%rax
  80042097cc:	48 89 c1             	mov    %rax,%rcx
  80042097cf:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097d3:	48 01 c8             	add    %rcx,%rax
  80042097d6:	48 01 d0             	add    %rdx,%rax
  80042097d9:	48 83 c0 08          	add    $0x8,%rax
  80042097dd:	48 8b 00             	mov    (%rax),%rax
  80042097e0:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042097e7:	00 00 00 
  80042097ea:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042097f1:	00 00 00 
  80042097f4:	ff d0                	callq  *%rax
  80042097f6:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042097fd:	00 00 00 
  8004209800:	48 98                	cltq   
  8004209802:	48 c1 e0 03          	shl    $0x3,%rax
  8004209806:	48 89 c1             	mov    %rax,%rcx
  8004209809:	48 c1 e1 04          	shl    $0x4,%rcx
  800420980d:	48 01 c8             	add    %rcx,%rax
  8004209810:	48 01 d0             	add    %rdx,%rax
  8004209813:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004209817:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420981b:	48 89 02             	mov    %rax,(%rdx)
  800420981e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209822:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  8004209829:	00 00 00 
  800420982c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209830:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  8004209836:	8d 50 01             	lea    0x1(%rax),%edx
  8004209839:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420983d:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  8004209843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209847:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420984d:	83 f8 03             	cmp    $0x3,%eax
  8004209850:	74 16                	je     8004209868 <env_run+0x16e>
  8004209852:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209856:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420985d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209865:	0f 22 d8             	mov    %rax,%cr3
  8004209868:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420986c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209872:	83 f8 03             	cmp    $0x3,%eax
  8004209875:	74 35                	je     80042098ac <env_run+0x1b2>
  8004209877:	48 b9 04 f3 21 04 80 	movabs $0x800421f304,%rcx
  800420987e:	00 00 00 
  8004209881:	48 ba 21 f3 21 04 80 	movabs $0x800421f321,%rdx
  8004209888:	00 00 00 
  800420988b:	be 12 03 00 00       	mov    $0x312,%esi
  8004209890:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  8004209897:	00 00 00 
  800420989a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420989f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042098a6:	00 00 00 
  80042098a9:	41 ff d0             	callq  *%r8
  80042098ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098b0:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  80042098b6:	83 f8 03             	cmp    $0x3,%eax
  80042098b9:	75 3d                	jne    80042098f8 <env_run+0x1fe>
  80042098bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098bf:	48 89 c7             	mov    %rax,%rdi
  80042098c2:	48 b8 d1 d0 21 04 80 	movabs $0x800421d0d1,%rax
  80042098c9:	00 00 00 
  80042098cc:	ff d0                	callq  *%rax
  80042098ce:	48 ba 36 f3 21 04 80 	movabs $0x800421f336,%rdx
  80042098d5:	00 00 00 
  80042098d8:	be 19 03 00 00       	mov    $0x319,%esi
  80042098dd:	48 bf fc f1 21 04 80 	movabs $0x800421f1fc,%rdi
  80042098e4:	00 00 00 
  80042098e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042098ec:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042098f3:	00 00 00 
  80042098f6:	ff d1                	callq  *%rcx
  80042098f8:	48 b8 e3 7d 20 04 80 	movabs $0x8004207de3,%rax
  80042098ff:	00 00 00 
  8004209902:	ff d0                	callq  *%rax
  8004209904:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209908:	48 89 c7             	mov    %rax,%rdi
  800420990b:	48 b8 1e 96 20 04 80 	movabs $0x800420961e,%rax
  8004209912:	00 00 00 
  8004209915:	ff d0                	callq  *%rax

0000008004209917 <mc146818_read>:
  8004209917:	55                   	push   %rbp
  8004209918:	48 89 e5             	mov    %rsp,%rbp
  800420991b:	48 83 ec 14          	sub    $0x14,%rsp
  800420991f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209922:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209925:	0f b6 c0             	movzbl %al,%eax
  8004209928:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420992f:	88 45 fb             	mov    %al,-0x5(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209932:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209936:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209939:	ee                   	out    %al,(%dx)
  800420993a:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209941:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209944:	89 c2                	mov    %eax,%edx
  8004209946:	ec                   	in     (%dx),%al
  8004209947:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420994a:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420994e:	0f b6 c0             	movzbl %al,%eax
  8004209951:	c9                   	leaveq 
  8004209952:	c3                   	retq   

0000008004209953 <mc146818_write>:
  8004209953:	55                   	push   %rbp
  8004209954:	48 89 e5             	mov    %rsp,%rbp
  8004209957:	48 83 ec 18          	sub    $0x18,%rsp
  800420995b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420995e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209961:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209964:	0f b6 c0             	movzbl %al,%eax
  8004209967:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420996e:	88 45 fb             	mov    %al,-0x5(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209971:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209975:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209978:	ee                   	out    %al,(%dx)
  8004209979:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420997c:	0f b6 c0             	movzbl %al,%eax
  800420997f:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  8004209986:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004209989:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420998d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209990:	ee                   	out    %al,(%dx)
  8004209991:	c9                   	leaveq 
  8004209992:	c3                   	retq   

0000008004209993 <pic_init>:
  8004209993:	55                   	push   %rbp
  8004209994:	48 89 e5             	mov    %rsp,%rbp
  8004209997:	48 83 ec 70          	sub    $0x70,%rsp
  800420999b:	48 b8 68 c2 4d 04 80 	movabs $0x80044dc268,%rax
  80042099a2:	00 00 00 
  80042099a5:	c6 00 01             	movb   $0x1,(%rax)
  80042099a8:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  80042099af:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  80042099b3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042099b7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042099ba:	ee                   	out    %al,(%dx)
  80042099bb:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042099c2:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042099c6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042099ca:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042099cd:	ee                   	out    %al,(%dx)
  80042099ce:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042099d5:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042099d9:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042099dd:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042099e0:	ee                   	out    %al,(%dx)
  80042099e1:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042099e8:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042099ec:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042099f0:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042099f3:	ee                   	out    %al,(%dx)
  80042099f4:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042099fb:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042099ff:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004209a03:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209a06:	ee                   	out    %al,(%dx)
  8004209a07:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  8004209a0e:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  8004209a12:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004209a16:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004209a19:	ee                   	out    %al,(%dx)
  8004209a1a:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209a21:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209a25:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209a29:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209a2c:	ee                   	out    %al,(%dx)
  8004209a2d:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209a34:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209a38:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209a3c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004209a3f:	ee                   	out    %al,(%dx)
  8004209a40:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209a47:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209a4b:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209a4f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209a52:	ee                   	out    %al,(%dx)
  8004209a53:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209a5a:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  8004209a5e:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209a62:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209a65:	ee                   	out    %al,(%dx)
  8004209a66:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  8004209a6d:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209a71:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209a75:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209a78:	ee                   	out    %al,(%dx)
  8004209a79:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a80:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a84:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a88:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a8b:	ee                   	out    %al,(%dx)
  8004209a8c:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a93:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a97:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a9b:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a9e:	ee                   	out    %al,(%dx)
  8004209a9f:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209aa6:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209aaa:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209aae:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209ab1:	ee                   	out    %al,(%dx)
  8004209ab2:	48 b8 72 46 23 04 80 	movabs $0x8004234672,%rax
  8004209ab9:	00 00 00 
  8004209abc:	0f b7 00             	movzwl (%rax),%eax
  8004209abf:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209ac3:	74 1e                	je     8004209ae3 <pic_init+0x150>
  8004209ac5:	48 b8 72 46 23 04 80 	movabs $0x8004234672,%rax
  8004209acc:	00 00 00 
  8004209acf:	0f b7 00             	movzwl (%rax),%eax
  8004209ad2:	0f b7 c0             	movzwl %ax,%eax
  8004209ad5:	89 c7                	mov    %eax,%edi
  8004209ad7:	48 b8 e5 9a 20 04 80 	movabs $0x8004209ae5,%rax
  8004209ade:	00 00 00 
  8004209ae1:	ff d0                	callq  *%rax
  8004209ae3:	c9                   	leaveq 
  8004209ae4:	c3                   	retq   

0000008004209ae5 <irq_setmask_8259A>:
  8004209ae5:	55                   	push   %rbp
  8004209ae6:	48 89 e5             	mov    %rsp,%rbp
  8004209ae9:	48 83 ec 30          	sub    $0x30,%rsp
  8004209aed:	89 f8                	mov    %edi,%eax
  8004209aef:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209af3:	48 b8 72 46 23 04 80 	movabs $0x8004234672,%rax
  8004209afa:	00 00 00 
  8004209afd:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209b01:	66 89 10             	mov    %dx,(%rax)
  8004209b04:	48 b8 68 c2 4d 04 80 	movabs $0x80044dc268,%rax
  8004209b0b:	00 00 00 
  8004209b0e:	0f b6 00             	movzbl (%rax),%eax
  8004209b11:	83 f0 01             	xor    $0x1,%eax
  8004209b14:	84 c0                	test   %al,%al
  8004209b16:	74 05                	je     8004209b1d <irq_setmask_8259A+0x38>
  8004209b18:	e9 b7 00 00 00       	jmpq   8004209bd4 <irq_setmask_8259A+0xef>
  8004209b1d:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b21:	0f b6 c0             	movzbl %al,%eax
  8004209b24:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209b2b:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209b2e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209b32:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209b35:	ee                   	out    %al,(%dx)
  8004209b36:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b3a:	66 c1 e8 08          	shr    $0x8,%ax
  8004209b3e:	0f b6 c0             	movzbl %al,%eax
  8004209b41:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209b48:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209b4b:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209b4f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209b52:	ee                   	out    %al,(%dx)
  8004209b53:	48 bf 4d f3 21 04 80 	movabs $0x800421f34d,%rdi
  8004209b5a:	00 00 00 
  8004209b5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b62:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004209b69:	00 00 00 
  8004209b6c:	ff d2                	callq  *%rdx
  8004209b6e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209b75:	eb 3c                	jmp    8004209bb3 <irq_setmask_8259A+0xce>
  8004209b77:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b7b:	f7 d0                	not    %eax
  8004209b7d:	89 c2                	mov    %eax,%edx
  8004209b7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b82:	89 c1                	mov    %eax,%ecx
  8004209b84:	d3 fa                	sar    %cl,%edx
  8004209b86:	89 d0                	mov    %edx,%eax
  8004209b88:	83 e0 01             	and    $0x1,%eax
  8004209b8b:	85 c0                	test   %eax,%eax
  8004209b8d:	74 20                	je     8004209baf <irq_setmask_8259A+0xca>
  8004209b8f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b92:	89 c6                	mov    %eax,%esi
  8004209b94:	48 bf 61 f3 21 04 80 	movabs $0x800421f361,%rdi
  8004209b9b:	00 00 00 
  8004209b9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209ba3:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004209baa:	00 00 00 
  8004209bad:	ff d2                	callq  *%rdx
  8004209baf:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209bb3:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209bb7:	7e be                	jle    8004209b77 <irq_setmask_8259A+0x92>
  8004209bb9:	48 bf 65 f3 21 04 80 	movabs $0x800421f365,%rdi
  8004209bc0:	00 00 00 
  8004209bc3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209bc8:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004209bcf:	00 00 00 
  8004209bd2:	ff d2                	callq  *%rdx
  8004209bd4:	c9                   	leaveq 
  8004209bd5:	c3                   	retq   

0000008004209bd6 <irq_eoi>:
  8004209bd6:	55                   	push   %rbp
  8004209bd7:	48 89 e5             	mov    %rsp,%rbp
  8004209bda:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bde:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209be5:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209be9:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209bed:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209bf0:	ee                   	out    %al,(%dx)
  8004209bf1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209bf8:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209bfc:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209c00:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209c03:	ee                   	out    %al,(%dx)
  8004209c04:	c9                   	leaveq 
  8004209c05:	c3                   	retq   

0000008004209c06 <putch>:
  8004209c06:	55                   	push   %rbp
  8004209c07:	48 89 e5             	mov    %rsp,%rbp
  8004209c0a:	48 83 ec 10          	sub    $0x10,%rsp
  8004209c0e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209c11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209c15:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c18:	89 c7                	mov    %eax,%edi
  8004209c1a:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004209c21:	00 00 00 
  8004209c24:	ff d0                	callq  *%rax
  8004209c26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209c2a:	48 83 c0 04          	add    $0x4,%rax
  8004209c2e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209c32:	c9                   	leaveq 
  8004209c33:	c3                   	retq   

0000008004209c34 <vcprintf>:
  8004209c34:	55                   	push   %rbp
  8004209c35:	48 89 e5             	mov    %rsp,%rbp
  8004209c38:	48 83 ec 30          	sub    $0x30,%rsp
  8004209c3c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209c40:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209c44:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209c4b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209c4f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209c53:	48 8b 0a             	mov    (%rdx),%rcx
  8004209c56:	48 89 08             	mov    %rcx,(%rax)
  8004209c59:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209c5d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209c61:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209c65:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209c69:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209c6d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209c71:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209c75:	48 89 c6             	mov    %rax,%rsi
  8004209c78:	48 bf 06 9c 20 04 80 	movabs $0x8004209c06,%rdi
  8004209c7f:	00 00 00 
  8004209c82:	48 b8 19 06 21 04 80 	movabs $0x8004210619,%rax
  8004209c89:	00 00 00 
  8004209c8c:	ff d0                	callq  *%rax
  8004209c8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c91:	c9                   	leaveq 
  8004209c92:	c3                   	retq   

0000008004209c93 <cprintf>:
  8004209c93:	55                   	push   %rbp
  8004209c94:	48 89 e5             	mov    %rsp,%rbp
  8004209c97:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c9e:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209ca5:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209cac:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209cb3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209cba:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209cc1:	84 c0                	test   %al,%al
  8004209cc3:	74 20                	je     8004209ce5 <cprintf+0x52>
  8004209cc5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209cc9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209ccd:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209cd1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209cd5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209cd9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209cdd:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209ce1:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209ce5:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209cec:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209cf3:	00 00 00 
  8004209cf6:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209cfd:	00 00 00 
  8004209d00:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209d04:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209d0b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209d12:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209d19:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209d20:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209d27:	48 8b 0a             	mov    (%rdx),%rcx
  8004209d2a:	48 89 08             	mov    %rcx,(%rax)
  8004209d2d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209d31:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209d35:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209d39:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209d3d:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209d44:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209d4b:	48 89 d6             	mov    %rdx,%rsi
  8004209d4e:	48 89 c7             	mov    %rax,%rdi
  8004209d51:	48 b8 34 9c 20 04 80 	movabs $0x8004209c34,%rax
  8004209d58:	00 00 00 
  8004209d5b:	ff d0                	callq  *%rax
  8004209d5d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209d63:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209d69:	c9                   	leaveq 
  8004209d6a:	c3                   	retq   

0000008004209d6b <xchg>:
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209d6b:	55                   	push   %rbp
  8004209d6c:	48 89 e5             	mov    %rsp,%rbp
  8004209d6f:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209d73:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209d77:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	__asm __volatile("lock; xchgl %0, %1":
  8004209d7a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209d7e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d81:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d85:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d88:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return result;
  8004209d8b:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d8e:	c9                   	leaveq 
  8004209d8f:	c3                   	retq   

0000008004209d90 <lock_kernel>:
  8004209d90:	55                   	push   %rbp
  8004209d91:	48 89 e5             	mov    %rsp,%rbp
  8004209d94:	48 bf 60 47 23 04 80 	movabs $0x8004234760,%rdi
  8004209d9b:	00 00 00 
  8004209d9e:	48 b8 95 85 21 04 80 	movabs $0x8004218595,%rax
  8004209da5:	00 00 00 
  8004209da8:	ff d0                	callq  *%rax
  8004209daa:	5d                   	pop    %rbp
  8004209dab:	c3                   	retq   

0000008004209dac <trapname>:
  8004209dac:	55                   	push   %rbp
  8004209dad:	48 89 e5             	mov    %rsp,%rbp
  8004209db0:	48 83 ec 04          	sub    $0x4,%rsp
  8004209db4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209db7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209dba:	83 f8 13             	cmp    $0x13,%eax
  8004209dbd:	77 16                	ja     8004209dd5 <trapname+0x29>
  8004209dbf:	48 b8 80 f7 21 04 80 	movabs $0x800421f780,%rax
  8004209dc6:	00 00 00 
  8004209dc9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209dcc:	48 63 d2             	movslq %edx,%rdx
  8004209dcf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209dd3:	eb 34                	jmp    8004209e09 <trapname+0x5d>
  8004209dd5:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209dd9:	75 0c                	jne    8004209de7 <trapname+0x3b>
  8004209ddb:	48 b8 80 f3 21 04 80 	movabs $0x800421f380,%rax
  8004209de2:	00 00 00 
  8004209de5:	eb 22                	jmp    8004209e09 <trapname+0x5d>
  8004209de7:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209deb:	7e 12                	jle    8004209dff <trapname+0x53>
  8004209ded:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209df1:	7f 0c                	jg     8004209dff <trapname+0x53>
  8004209df3:	48 b8 8c f3 21 04 80 	movabs $0x800421f38c,%rax
  8004209dfa:	00 00 00 
  8004209dfd:	eb 0a                	jmp    8004209e09 <trapname+0x5d>
  8004209dff:	48 b8 9f f3 21 04 80 	movabs $0x800421f39f,%rax
  8004209e06:	00 00 00 
  8004209e09:	c9                   	leaveq 
  8004209e0a:	c3                   	retq   

0000008004209e0b <trap_init>:
  8004209e0b:	55                   	push   %rbp
  8004209e0c:	48 89 e5             	mov    %rsp,%rbp
  8004209e0f:	48 83 ec 10          	sub    $0x10,%rsp
  8004209e13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209e1a:	e9 7d 01 00 00       	jmpq   8004209f9c <trap_init+0x191>
  8004209e1f:	48 b8 d6 d8 20 04 80 	movabs $0x800420d8d6,%rax
  8004209e26:	00 00 00 
  8004209e29:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  8004209e30:	00 00 00 
  8004209e33:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209e36:	48 63 c9             	movslq %ecx,%rcx
  8004209e39:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209e3d:	48 01 ca             	add    %rcx,%rdx
  8004209e40:	66 89 02             	mov    %ax,(%rdx)
  8004209e43:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209e4a:	00 00 00 
  8004209e4d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e50:	48 63 d2             	movslq %edx,%rdx
  8004209e53:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e57:	48 01 d0             	add    %rdx,%rax
  8004209e5a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209e60:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209e67:	00 00 00 
  8004209e6a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e6d:	48 63 d2             	movslq %edx,%rdx
  8004209e70:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e74:	48 01 d0             	add    %rdx,%rax
  8004209e77:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e7b:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e7e:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e81:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209e88:	00 00 00 
  8004209e8b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e8e:	48 63 d2             	movslq %edx,%rdx
  8004209e91:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e95:	48 01 d0             	add    %rdx,%rax
  8004209e98:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e9c:	83 e2 07             	and    $0x7,%edx
  8004209e9f:	88 50 04             	mov    %dl,0x4(%rax)
  8004209ea2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209ea9:	00 00 00 
  8004209eac:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209eaf:	48 63 d2             	movslq %edx,%rdx
  8004209eb2:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209eb6:	48 01 d0             	add    %rdx,%rax
  8004209eb9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ebd:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ec0:	83 ca 0e             	or     $0xe,%edx
  8004209ec3:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ec6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209ecd:	00 00 00 
  8004209ed0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ed3:	48 63 d2             	movslq %edx,%rdx
  8004209ed6:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209eda:	48 01 d0             	add    %rdx,%rax
  8004209edd:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ee1:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ee4:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ee7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209eee:	00 00 00 
  8004209ef1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ef4:	48 63 d2             	movslq %edx,%rdx
  8004209ef7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209efb:	48 01 d0             	add    %rdx,%rax
  8004209efe:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f02:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209f05:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f08:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209f0f:	00 00 00 
  8004209f12:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f15:	48 63 d2             	movslq %edx,%rdx
  8004209f18:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f1c:	48 01 d0             	add    %rdx,%rax
  8004209f1f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f23:	83 ca 80             	or     $0xffffff80,%edx
  8004209f26:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f29:	48 b8 d6 d8 20 04 80 	movabs $0x800420d8d6,%rax
  8004209f30:	00 00 00 
  8004209f33:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f37:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  8004209f3e:	00 00 00 
  8004209f41:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f44:	48 63 c9             	movslq %ecx,%rcx
  8004209f47:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f4b:	48 01 ca             	add    %rcx,%rdx
  8004209f4e:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209f52:	48 b8 d6 d8 20 04 80 	movabs $0x800420d8d6,%rax
  8004209f59:	00 00 00 
  8004209f5c:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f60:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  8004209f67:	00 00 00 
  8004209f6a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f6d:	48 63 c9             	movslq %ecx,%rcx
  8004209f70:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f74:	48 01 ca             	add    %rcx,%rdx
  8004209f77:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209f7a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209f81:	00 00 00 
  8004209f84:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f87:	48 63 d2             	movslq %edx,%rdx
  8004209f8a:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f8e:	48 01 d0             	add    %rdx,%rax
  8004209f91:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f98:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f9c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f9f:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209fa4:	0f 86 75 fe ff ff    	jbe    8004209e1f <trap_init+0x14>
  8004209faa:	48 b8 e0 d7 20 04 80 	movabs $0x800420d7e0,%rax
  8004209fb1:	00 00 00 
  8004209fb4:	89 c2                	mov    %eax,%edx
  8004209fb6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fbd:	00 00 00 
  8004209fc0:	66 89 10             	mov    %dx,(%rax)
  8004209fc3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fca:	00 00 00 
  8004209fcd:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209fd3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fda:	00 00 00 
  8004209fdd:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fe1:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fe4:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fe7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fee:	00 00 00 
  8004209ff1:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209ff5:	83 e2 07             	and    $0x7,%edx
  8004209ff8:	88 50 04             	mov    %dl,0x4(%rax)
  8004209ffb:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a002:	00 00 00 
  800420a005:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a009:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a00c:	83 ca 0e             	or     $0xe,%edx
  800420a00f:	88 50 05             	mov    %dl,0x5(%rax)
  800420a012:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a019:	00 00 00 
  800420a01c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a020:	83 e2 ef             	and    $0xffffffef,%edx
  800420a023:	88 50 05             	mov    %dl,0x5(%rax)
  800420a026:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a02d:	00 00 00 
  800420a030:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a034:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a037:	88 50 05             	mov    %dl,0x5(%rax)
  800420a03a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a041:	00 00 00 
  800420a044:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a048:	83 ca 80             	or     $0xffffff80,%edx
  800420a04b:	88 50 05             	mov    %dl,0x5(%rax)
  800420a04e:	48 b8 e0 d7 20 04 80 	movabs $0x800420d7e0,%rax
  800420a055:	00 00 00 
  800420a058:	48 c1 e8 10          	shr    $0x10,%rax
  800420a05c:	89 c2                	mov    %eax,%edx
  800420a05e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a065:	00 00 00 
  800420a068:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420a06c:	48 b8 e0 d7 20 04 80 	movabs $0x800420d7e0,%rax
  800420a073:	00 00 00 
  800420a076:	48 c1 e8 20          	shr    $0x20,%rax
  800420a07a:	89 c2                	mov    %eax,%edx
  800420a07c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a083:	00 00 00 
  800420a086:	89 50 08             	mov    %edx,0x8(%rax)
  800420a089:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a090:	00 00 00 
  800420a093:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a09a:	48 b8 ea d7 20 04 80 	movabs $0x800420d7ea,%rax
  800420a0a1:	00 00 00 
  800420a0a4:	89 c2                	mov    %eax,%edx
  800420a0a6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0ad:	00 00 00 
  800420a0b0:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a0b4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0bb:	00 00 00 
  800420a0be:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a0c4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0cb:	00 00 00 
  800420a0ce:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0d2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0d5:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0d8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0df:	00 00 00 
  800420a0e2:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0e6:	83 e2 07             	and    $0x7,%edx
  800420a0e9:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0ec:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0f3:	00 00 00 
  800420a0f6:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0fa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0fd:	83 ca 0e             	or     $0xe,%edx
  800420a100:	88 50 15             	mov    %dl,0x15(%rax)
  800420a103:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a10a:	00 00 00 
  800420a10d:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a111:	83 e2 ef             	and    $0xffffffef,%edx
  800420a114:	88 50 15             	mov    %dl,0x15(%rax)
  800420a117:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a11e:	00 00 00 
  800420a121:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a125:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a128:	88 50 15             	mov    %dl,0x15(%rax)
  800420a12b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a132:	00 00 00 
  800420a135:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a139:	83 ca 80             	or     $0xffffff80,%edx
  800420a13c:	88 50 15             	mov    %dl,0x15(%rax)
  800420a13f:	48 b8 ea d7 20 04 80 	movabs $0x800420d7ea,%rax
  800420a146:	00 00 00 
  800420a149:	48 c1 e8 10          	shr    $0x10,%rax
  800420a14d:	89 c2                	mov    %eax,%edx
  800420a14f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a156:	00 00 00 
  800420a159:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a15d:	48 b8 ea d7 20 04 80 	movabs $0x800420d7ea,%rax
  800420a164:	00 00 00 
  800420a167:	48 c1 e8 20          	shr    $0x20,%rax
  800420a16b:	89 c2                	mov    %eax,%edx
  800420a16d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a174:	00 00 00 
  800420a177:	89 50 18             	mov    %edx,0x18(%rax)
  800420a17a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a181:	00 00 00 
  800420a184:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a18b:	48 b8 f4 d7 20 04 80 	movabs $0x800420d7f4,%rax
  800420a192:	00 00 00 
  800420a195:	89 c2                	mov    %eax,%edx
  800420a197:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a19e:	00 00 00 
  800420a1a1:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a1a5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1ac:	00 00 00 
  800420a1af:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a1b5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1bc:	00 00 00 
  800420a1bf:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1c3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1c6:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1c9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1d0:	00 00 00 
  800420a1d3:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1d7:	83 e2 07             	and    $0x7,%edx
  800420a1da:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1dd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1e4:	00 00 00 
  800420a1e7:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1eb:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1ee:	83 ca 0e             	or     $0xe,%edx
  800420a1f1:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1f4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1fb:	00 00 00 
  800420a1fe:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a202:	83 e2 ef             	and    $0xffffffef,%edx
  800420a205:	88 50 25             	mov    %dl,0x25(%rax)
  800420a208:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a20f:	00 00 00 
  800420a212:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a216:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a219:	88 50 25             	mov    %dl,0x25(%rax)
  800420a21c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a223:	00 00 00 
  800420a226:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a22a:	83 ca 80             	or     $0xffffff80,%edx
  800420a22d:	88 50 25             	mov    %dl,0x25(%rax)
  800420a230:	48 b8 f4 d7 20 04 80 	movabs $0x800420d7f4,%rax
  800420a237:	00 00 00 
  800420a23a:	48 c1 e8 10          	shr    $0x10,%rax
  800420a23e:	89 c2                	mov    %eax,%edx
  800420a240:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a247:	00 00 00 
  800420a24a:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a24e:	48 b8 f4 d7 20 04 80 	movabs $0x800420d7f4,%rax
  800420a255:	00 00 00 
  800420a258:	48 c1 e8 20          	shr    $0x20,%rax
  800420a25c:	89 c2                	mov    %eax,%edx
  800420a25e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a265:	00 00 00 
  800420a268:	89 50 28             	mov    %edx,0x28(%rax)
  800420a26b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a272:	00 00 00 
  800420a275:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a27c:	48 b8 fe d7 20 04 80 	movabs $0x800420d7fe,%rax
  800420a283:	00 00 00 
  800420a286:	89 c2                	mov    %eax,%edx
  800420a288:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a28f:	00 00 00 
  800420a292:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a296:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a29d:	00 00 00 
  800420a2a0:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a2a6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2ad:	00 00 00 
  800420a2b0:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2b4:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a2b7:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2ba:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2c1:	00 00 00 
  800420a2c4:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2c8:	83 e2 07             	and    $0x7,%edx
  800420a2cb:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2ce:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2d5:	00 00 00 
  800420a2d8:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2dc:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2df:	83 ca 0e             	or     $0xe,%edx
  800420a2e2:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2e5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2ec:	00 00 00 
  800420a2ef:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2f3:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2f6:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2f9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a300:	00 00 00 
  800420a303:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a307:	83 ca 60             	or     $0x60,%edx
  800420a30a:	88 50 35             	mov    %dl,0x35(%rax)
  800420a30d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a314:	00 00 00 
  800420a317:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a31b:	83 ca 80             	or     $0xffffff80,%edx
  800420a31e:	88 50 35             	mov    %dl,0x35(%rax)
  800420a321:	48 b8 fe d7 20 04 80 	movabs $0x800420d7fe,%rax
  800420a328:	00 00 00 
  800420a32b:	48 c1 e8 10          	shr    $0x10,%rax
  800420a32f:	89 c2                	mov    %eax,%edx
  800420a331:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a338:	00 00 00 
  800420a33b:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a33f:	48 b8 fe d7 20 04 80 	movabs $0x800420d7fe,%rax
  800420a346:	00 00 00 
  800420a349:	48 c1 e8 20          	shr    $0x20,%rax
  800420a34d:	89 c2                	mov    %eax,%edx
  800420a34f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a356:	00 00 00 
  800420a359:	89 50 38             	mov    %edx,0x38(%rax)
  800420a35c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a363:	00 00 00 
  800420a366:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a36d:	48 b8 08 d8 20 04 80 	movabs $0x800420d808,%rax
  800420a374:	00 00 00 
  800420a377:	89 c2                	mov    %eax,%edx
  800420a379:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a380:	00 00 00 
  800420a383:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a387:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a38e:	00 00 00 
  800420a391:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a397:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a39e:	00 00 00 
  800420a3a1:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a3a5:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a3a8:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3ab:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3b2:	00 00 00 
  800420a3b5:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a3b9:	83 e2 07             	and    $0x7,%edx
  800420a3bc:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3bf:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3c6:	00 00 00 
  800420a3c9:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3cd:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3d0:	83 ca 0e             	or     $0xe,%edx
  800420a3d3:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3d6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3dd:	00 00 00 
  800420a3e0:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3e4:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3e7:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ea:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3f1:	00 00 00 
  800420a3f4:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3f8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3fb:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3fe:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a405:	00 00 00 
  800420a408:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a40c:	83 ca 80             	or     $0xffffff80,%edx
  800420a40f:	88 50 45             	mov    %dl,0x45(%rax)
  800420a412:	48 b8 08 d8 20 04 80 	movabs $0x800420d808,%rax
  800420a419:	00 00 00 
  800420a41c:	48 c1 e8 10          	shr    $0x10,%rax
  800420a420:	89 c2                	mov    %eax,%edx
  800420a422:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a429:	00 00 00 
  800420a42c:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a430:	48 b8 08 d8 20 04 80 	movabs $0x800420d808,%rax
  800420a437:	00 00 00 
  800420a43a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a43e:	89 c2                	mov    %eax,%edx
  800420a440:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a447:	00 00 00 
  800420a44a:	89 50 48             	mov    %edx,0x48(%rax)
  800420a44d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a454:	00 00 00 
  800420a457:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a45e:	48 b8 12 d8 20 04 80 	movabs $0x800420d812,%rax
  800420a465:	00 00 00 
  800420a468:	89 c2                	mov    %eax,%edx
  800420a46a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a471:	00 00 00 
  800420a474:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a478:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a47f:	00 00 00 
  800420a482:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a488:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a48f:	00 00 00 
  800420a492:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a496:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a499:	88 50 54             	mov    %dl,0x54(%rax)
  800420a49c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4a3:	00 00 00 
  800420a4a6:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a4aa:	83 e2 07             	and    $0x7,%edx
  800420a4ad:	88 50 54             	mov    %dl,0x54(%rax)
  800420a4b0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4b7:	00 00 00 
  800420a4ba:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4be:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4c1:	83 ca 0e             	or     $0xe,%edx
  800420a4c4:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4c7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4ce:	00 00 00 
  800420a4d1:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4d5:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4d8:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4db:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4e2:	00 00 00 
  800420a4e5:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4e9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4ec:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4ef:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4f6:	00 00 00 
  800420a4f9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4fd:	83 ca 80             	or     $0xffffff80,%edx
  800420a500:	88 50 55             	mov    %dl,0x55(%rax)
  800420a503:	48 b8 12 d8 20 04 80 	movabs $0x800420d812,%rax
  800420a50a:	00 00 00 
  800420a50d:	48 c1 e8 10          	shr    $0x10,%rax
  800420a511:	89 c2                	mov    %eax,%edx
  800420a513:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a51a:	00 00 00 
  800420a51d:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a521:	48 b8 12 d8 20 04 80 	movabs $0x800420d812,%rax
  800420a528:	00 00 00 
  800420a52b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a52f:	89 c2                	mov    %eax,%edx
  800420a531:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a538:	00 00 00 
  800420a53b:	89 50 58             	mov    %edx,0x58(%rax)
  800420a53e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a545:	00 00 00 
  800420a548:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a54f:	48 b8 1c d8 20 04 80 	movabs $0x800420d81c,%rax
  800420a556:	00 00 00 
  800420a559:	89 c2                	mov    %eax,%edx
  800420a55b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a562:	00 00 00 
  800420a565:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a569:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a570:	00 00 00 
  800420a573:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a579:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a580:	00 00 00 
  800420a583:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a587:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a58a:	88 50 64             	mov    %dl,0x64(%rax)
  800420a58d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a594:	00 00 00 
  800420a597:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a59b:	83 e2 07             	and    $0x7,%edx
  800420a59e:	88 50 64             	mov    %dl,0x64(%rax)
  800420a5a1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5a8:	00 00 00 
  800420a5ab:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5af:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a5b2:	83 ca 0e             	or     $0xe,%edx
  800420a5b5:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5b8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5bf:	00 00 00 
  800420a5c2:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5c6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5c9:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5cc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5d3:	00 00 00 
  800420a5d6:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5da:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5dd:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5e0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5e7:	00 00 00 
  800420a5ea:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5ee:	83 ca 80             	or     $0xffffff80,%edx
  800420a5f1:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5f4:	48 b8 1c d8 20 04 80 	movabs $0x800420d81c,%rax
  800420a5fb:	00 00 00 
  800420a5fe:	48 c1 e8 10          	shr    $0x10,%rax
  800420a602:	89 c2                	mov    %eax,%edx
  800420a604:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a60b:	00 00 00 
  800420a60e:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a612:	48 b8 1c d8 20 04 80 	movabs $0x800420d81c,%rax
  800420a619:	00 00 00 
  800420a61c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a620:	89 c2                	mov    %eax,%edx
  800420a622:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a629:	00 00 00 
  800420a62c:	89 50 68             	mov    %edx,0x68(%rax)
  800420a62f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a636:	00 00 00 
  800420a639:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a640:	48 b8 26 d8 20 04 80 	movabs $0x800420d826,%rax
  800420a647:	00 00 00 
  800420a64a:	89 c2                	mov    %eax,%edx
  800420a64c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a653:	00 00 00 
  800420a656:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a65a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a661:	00 00 00 
  800420a664:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a66a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a671:	00 00 00 
  800420a674:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a678:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a67b:	88 50 74             	mov    %dl,0x74(%rax)
  800420a67e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a685:	00 00 00 
  800420a688:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a68c:	83 e2 07             	and    $0x7,%edx
  800420a68f:	88 50 74             	mov    %dl,0x74(%rax)
  800420a692:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a699:	00 00 00 
  800420a69c:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6a0:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a6a3:	83 ca 0e             	or     $0xe,%edx
  800420a6a6:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6a9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6b0:	00 00 00 
  800420a6b3:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6b7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a6ba:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6bd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6c4:	00 00 00 
  800420a6c7:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6cb:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6ce:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6d1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6d8:	00 00 00 
  800420a6db:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6df:	83 ca 80             	or     $0xffffff80,%edx
  800420a6e2:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6e5:	48 b8 26 d8 20 04 80 	movabs $0x800420d826,%rax
  800420a6ec:	00 00 00 
  800420a6ef:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6f3:	89 c2                	mov    %eax,%edx
  800420a6f5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6fc:	00 00 00 
  800420a6ff:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a703:	48 b8 26 d8 20 04 80 	movabs $0x800420d826,%rax
  800420a70a:	00 00 00 
  800420a70d:	48 c1 e8 20          	shr    $0x20,%rax
  800420a711:	89 c2                	mov    %eax,%edx
  800420a713:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a71a:	00 00 00 
  800420a71d:	89 50 78             	mov    %edx,0x78(%rax)
  800420a720:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a727:	00 00 00 
  800420a72a:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a731:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420a738:	00 00 00 
  800420a73b:	89 c2                	mov    %eax,%edx
  800420a73d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a744:	00 00 00 
  800420a747:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a74e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a755:	00 00 00 
  800420a758:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a75f:	08 00 
  800420a761:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a768:	00 00 00 
  800420a76b:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a772:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a775:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a77b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a782:	00 00 00 
  800420a785:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a78c:	83 e2 07             	and    $0x7,%edx
  800420a78f:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a795:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a79c:	00 00 00 
  800420a79f:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7a6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a7a9:	83 ca 0e             	or     $0xe,%edx
  800420a7ac:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7b2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a7b9:	00 00 00 
  800420a7bc:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7c3:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7c6:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7cc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a7d3:	00 00 00 
  800420a7d6:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7dd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7e0:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7e6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a7ed:	00 00 00 
  800420a7f0:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7f7:	83 ca 80             	or     $0xffffff80,%edx
  800420a7fa:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a800:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420a807:	00 00 00 
  800420a80a:	48 c1 e8 10          	shr    $0x10,%rax
  800420a80e:	89 c2                	mov    %eax,%edx
  800420a810:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a817:	00 00 00 
  800420a81a:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a821:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420a828:	00 00 00 
  800420a82b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a82f:	89 c2                	mov    %eax,%edx
  800420a831:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a838:	00 00 00 
  800420a83b:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a841:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a848:	00 00 00 
  800420a84b:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a852:	00 00 00 
  800420a855:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420a85c:	00 00 00 
  800420a85f:	89 c2                	mov    %eax,%edx
  800420a861:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a868:	00 00 00 
  800420a86b:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a872:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a879:	00 00 00 
  800420a87c:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a883:	08 00 
  800420a885:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a88c:	00 00 00 
  800420a88f:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a896:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a899:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a89f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a8a6:	00 00 00 
  800420a8a9:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a8b0:	83 e2 07             	and    $0x7,%edx
  800420a8b3:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a8b9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a8c0:	00 00 00 
  800420a8c3:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ca:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8cd:	83 ca 0e             	or     $0xe,%edx
  800420a8d0:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8d6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a8dd:	00 00 00 
  800420a8e0:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8e7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8ea:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8f0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a8f7:	00 00 00 
  800420a8fa:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a901:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a904:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a90a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a911:	00 00 00 
  800420a914:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a91b:	83 ca 80             	or     $0xffffff80,%edx
  800420a91e:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a924:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420a92b:	00 00 00 
  800420a92e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a932:	89 c2                	mov    %eax,%edx
  800420a934:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a93b:	00 00 00 
  800420a93e:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a945:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420a94c:	00 00 00 
  800420a94f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a953:	89 c2                	mov    %eax,%edx
  800420a955:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a95c:	00 00 00 
  800420a95f:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a965:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a96c:	00 00 00 
  800420a96f:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a976:	00 00 00 
  800420a979:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420a980:	00 00 00 
  800420a983:	89 c2                	mov    %eax,%edx
  800420a985:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a98c:	00 00 00 
  800420a98f:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a996:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a99d:	00 00 00 
  800420a9a0:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a9a7:	08 00 
  800420a9a9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a9b0:	00 00 00 
  800420a9b3:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9ba:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9bd:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9c3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a9ca:	00 00 00 
  800420a9cd:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9d4:	83 e2 07             	and    $0x7,%edx
  800420a9d7:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9dd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a9e4:	00 00 00 
  800420a9e7:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9ee:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9f1:	83 ca 0e             	or     $0xe,%edx
  800420a9f4:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9fa:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa01:	00 00 00 
  800420aa04:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa0b:	83 e2 ef             	and    $0xffffffef,%edx
  800420aa0e:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa14:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa1b:	00 00 00 
  800420aa1e:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa25:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa28:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa2e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa35:	00 00 00 
  800420aa38:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa3f:	83 ca 80             	or     $0xffffff80,%edx
  800420aa42:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa48:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aa4f:	00 00 00 
  800420aa52:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa56:	89 c2                	mov    %eax,%edx
  800420aa58:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa5f:	00 00 00 
  800420aa62:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420aa69:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aa70:	00 00 00 
  800420aa73:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa77:	89 c2                	mov    %eax,%edx
  800420aa79:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa80:	00 00 00 
  800420aa83:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa89:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa90:	00 00 00 
  800420aa93:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa9a:	00 00 00 
  800420aa9d:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420aaa4:	00 00 00 
  800420aaa7:	89 c2                	mov    %eax,%edx
  800420aaa9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aab0:	00 00 00 
  800420aab3:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aaba:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aac1:	00 00 00 
  800420aac4:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aacb:	08 00 
  800420aacd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aad4:	00 00 00 
  800420aad7:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aade:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aae1:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aae7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aaee:	00 00 00 
  800420aaf1:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aaf8:	83 e2 07             	and    $0x7,%edx
  800420aafb:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420ab01:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab08:	00 00 00 
  800420ab0b:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab12:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ab15:	83 ca 0e             	or     $0xe,%edx
  800420ab18:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab1e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab25:	00 00 00 
  800420ab28:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab2f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab32:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab38:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab3f:	00 00 00 
  800420ab42:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab49:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab4c:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab52:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab59:	00 00 00 
  800420ab5c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab63:	83 ca 80             	or     $0xffffff80,%edx
  800420ab66:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab6c:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420ab73:	00 00 00 
  800420ab76:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab7a:	89 c2                	mov    %eax,%edx
  800420ab7c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab83:	00 00 00 
  800420ab86:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab8d:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420ab94:	00 00 00 
  800420ab97:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab9b:	89 c2                	mov    %eax,%edx
  800420ab9d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aba4:	00 00 00 
  800420aba7:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420abad:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420abb4:	00 00 00 
  800420abb7:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420abbe:	00 00 00 
  800420abc1:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420abc8:	00 00 00 
  800420abcb:	89 c2                	mov    %eax,%edx
  800420abcd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420abd4:	00 00 00 
  800420abd7:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420abde:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420abe5:	00 00 00 
  800420abe8:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420abef:	08 00 
  800420abf1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420abf8:	00 00 00 
  800420abfb:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac02:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ac05:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac0b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac12:	00 00 00 
  800420ac15:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac1c:	83 e2 07             	and    $0x7,%edx
  800420ac1f:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac25:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac2c:	00 00 00 
  800420ac2f:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac36:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac39:	83 ca 0e             	or     $0xe,%edx
  800420ac3c:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac42:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac49:	00 00 00 
  800420ac4c:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac53:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac56:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac5c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac63:	00 00 00 
  800420ac66:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac6d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac70:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac76:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac7d:	00 00 00 
  800420ac80:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac87:	83 ca 80             	or     $0xffffff80,%edx
  800420ac8a:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac90:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420ac97:	00 00 00 
  800420ac9a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac9e:	89 c2                	mov    %eax,%edx
  800420aca0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aca7:	00 00 00 
  800420acaa:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420acb1:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420acb8:	00 00 00 
  800420acbb:	48 c1 e8 20          	shr    $0x20,%rax
  800420acbf:	89 c2                	mov    %eax,%edx
  800420acc1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420acc8:	00 00 00 
  800420accb:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420acd1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420acd8:	00 00 00 
  800420acdb:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420ace2:	00 00 00 
  800420ace5:	48 b8 58 d8 20 04 80 	movabs $0x800420d858,%rax
  800420acec:	00 00 00 
  800420acef:	89 c2                	mov    %eax,%edx
  800420acf1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420acf8:	00 00 00 
  800420acfb:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420ad02:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad09:	00 00 00 
  800420ad0c:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420ad13:	08 00 
  800420ad15:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad1c:	00 00 00 
  800420ad1f:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad26:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad29:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad2f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad36:	00 00 00 
  800420ad39:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad40:	83 e2 07             	and    $0x7,%edx
  800420ad43:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad49:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad50:	00 00 00 
  800420ad53:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad5a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad5d:	83 ca 0e             	or     $0xe,%edx
  800420ad60:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad66:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad6d:	00 00 00 
  800420ad70:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad77:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad7a:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad80:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad87:	00 00 00 
  800420ad8a:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad91:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad94:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad9a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ada1:	00 00 00 
  800420ada4:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420adab:	83 ca 80             	or     $0xffffff80,%edx
  800420adae:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420adb4:	48 b8 58 d8 20 04 80 	movabs $0x800420d858,%rax
  800420adbb:	00 00 00 
  800420adbe:	48 c1 e8 10          	shr    $0x10,%rax
  800420adc2:	89 c2                	mov    %eax,%edx
  800420adc4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420adcb:	00 00 00 
  800420adce:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420add5:	48 b8 58 d8 20 04 80 	movabs $0x800420d858,%rax
  800420addc:	00 00 00 
  800420addf:	48 c1 e8 20          	shr    $0x20,%rax
  800420ade3:	89 c2                	mov    %eax,%edx
  800420ade5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420adec:	00 00 00 
  800420adef:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420adf5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420adfc:	00 00 00 
  800420adff:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420ae06:	00 00 00 
  800420ae09:	48 b8 60 d8 20 04 80 	movabs $0x800420d860,%rax
  800420ae10:	00 00 00 
  800420ae13:	89 c2                	mov    %eax,%edx
  800420ae15:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae1c:	00 00 00 
  800420ae1f:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ae26:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae2d:	00 00 00 
  800420ae30:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420ae37:	08 00 
  800420ae39:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae40:	00 00 00 
  800420ae43:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae4a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae4d:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae53:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae5a:	00 00 00 
  800420ae5d:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae64:	83 e2 07             	and    $0x7,%edx
  800420ae67:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae6d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae74:	00 00 00 
  800420ae77:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae7e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae81:	83 ca 0e             	or     $0xe,%edx
  800420ae84:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae8a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae91:	00 00 00 
  800420ae94:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae9b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae9e:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aea4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aeab:	00 00 00 
  800420aeae:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aeb5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aeb8:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aebe:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aec5:	00 00 00 
  800420aec8:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aecf:	83 ca 80             	or     $0xffffff80,%edx
  800420aed2:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aed8:	48 b8 60 d8 20 04 80 	movabs $0x800420d860,%rax
  800420aedf:	00 00 00 
  800420aee2:	48 c1 e8 10          	shr    $0x10,%rax
  800420aee6:	89 c2                	mov    %eax,%edx
  800420aee8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aeef:	00 00 00 
  800420aef2:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420aef9:	48 b8 60 d8 20 04 80 	movabs $0x800420d860,%rax
  800420af00:	00 00 00 
  800420af03:	48 c1 e8 20          	shr    $0x20,%rax
  800420af07:	89 c2                	mov    %eax,%edx
  800420af09:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af10:	00 00 00 
  800420af13:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420af19:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af20:	00 00 00 
  800420af23:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420af2a:	00 00 00 
  800420af2d:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420af34:	00 00 00 
  800420af37:	89 c2                	mov    %eax,%edx
  800420af39:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af40:	00 00 00 
  800420af43:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420af4a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af51:	00 00 00 
  800420af54:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420af5b:	08 00 
  800420af5d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af64:	00 00 00 
  800420af67:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af6e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af71:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af77:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af7e:	00 00 00 
  800420af81:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af88:	83 e2 07             	and    $0x7,%edx
  800420af8b:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af91:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af98:	00 00 00 
  800420af9b:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afa2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420afa5:	83 ca 0e             	or     $0xe,%edx
  800420afa8:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afae:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420afb5:	00 00 00 
  800420afb8:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afbf:	83 e2 ef             	and    $0xffffffef,%edx
  800420afc2:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afc8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420afcf:	00 00 00 
  800420afd2:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afd9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afdc:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afe2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420afe9:	00 00 00 
  800420afec:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420aff3:	83 ca 80             	or     $0xffffff80,%edx
  800420aff6:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420affc:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b003:	00 00 00 
  800420b006:	48 c1 e8 10          	shr    $0x10,%rax
  800420b00a:	89 c2                	mov    %eax,%edx
  800420b00c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b013:	00 00 00 
  800420b016:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420b01d:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b024:	00 00 00 
  800420b027:	48 c1 e8 20          	shr    $0x20,%rax
  800420b02b:	89 c2                	mov    %eax,%edx
  800420b02d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b034:	00 00 00 
  800420b037:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420b03d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b044:	00 00 00 
  800420b047:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420b04e:	00 00 00 
  800420b051:	48 b8 6a d8 20 04 80 	movabs $0x800420d86a,%rax
  800420b058:	00 00 00 
  800420b05b:	89 c2                	mov    %eax,%edx
  800420b05d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b064:	00 00 00 
  800420b067:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420b06e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b075:	00 00 00 
  800420b078:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b07f:	08 00 
  800420b081:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b088:	00 00 00 
  800420b08b:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b092:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b095:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b09b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0a2:	00 00 00 
  800420b0a5:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b0ac:	83 e2 07             	and    $0x7,%edx
  800420b0af:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b0b5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0bc:	00 00 00 
  800420b0bf:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0c6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0c9:	83 ca 0e             	or     $0xe,%edx
  800420b0cc:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0d2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0d9:	00 00 00 
  800420b0dc:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0e3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0e6:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0ec:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0f3:	00 00 00 
  800420b0f6:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0fd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b100:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b106:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b10d:	00 00 00 
  800420b110:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b117:	83 ca 80             	or     $0xffffff80,%edx
  800420b11a:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b120:	48 b8 6a d8 20 04 80 	movabs $0x800420d86a,%rax
  800420b127:	00 00 00 
  800420b12a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b12e:	89 c2                	mov    %eax,%edx
  800420b130:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b137:	00 00 00 
  800420b13a:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b141:	48 b8 6a d8 20 04 80 	movabs $0x800420d86a,%rax
  800420b148:	00 00 00 
  800420b14b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b14f:	89 c2                	mov    %eax,%edx
  800420b151:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b158:	00 00 00 
  800420b15b:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b161:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b168:	00 00 00 
  800420b16b:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b172:	00 00 00 
  800420b175:	48 b8 70 d8 20 04 80 	movabs $0x800420d870,%rax
  800420b17c:	00 00 00 
  800420b17f:	89 c2                	mov    %eax,%edx
  800420b181:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b188:	00 00 00 
  800420b18b:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b192:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b199:	00 00 00 
  800420b19c:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b1a3:	08 00 
  800420b1a5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b1ac:	00 00 00 
  800420b1af:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b1b9:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1bf:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b1c6:	00 00 00 
  800420b1c9:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1d0:	83 e2 07             	and    $0x7,%edx
  800420b1d3:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1d9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b1e0:	00 00 00 
  800420b1e3:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1ea:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1ed:	83 ca 0e             	or     $0xe,%edx
  800420b1f0:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1f6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b1fd:	00 00 00 
  800420b200:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b207:	83 e2 ef             	and    $0xffffffef,%edx
  800420b20a:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b210:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b217:	00 00 00 
  800420b21a:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b221:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b224:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b22a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b231:	00 00 00 
  800420b234:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b23b:	83 ca 80             	or     $0xffffff80,%edx
  800420b23e:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b244:	48 b8 70 d8 20 04 80 	movabs $0x800420d870,%rax
  800420b24b:	00 00 00 
  800420b24e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b252:	89 c2                	mov    %eax,%edx
  800420b254:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b25b:	00 00 00 
  800420b25e:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b265:	48 b8 70 d8 20 04 80 	movabs $0x800420d870,%rax
  800420b26c:	00 00 00 
  800420b26f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b273:	89 c2                	mov    %eax,%edx
  800420b275:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b27c:	00 00 00 
  800420b27f:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b285:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b28c:	00 00 00 
  800420b28f:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b296:	00 00 00 
  800420b299:	48 b8 76 d8 20 04 80 	movabs $0x800420d876,%rax
  800420b2a0:	00 00 00 
  800420b2a3:	89 c2                	mov    %eax,%edx
  800420b2a5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2ac:	00 00 00 
  800420b2af:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b2b6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2bd:	00 00 00 
  800420b2c0:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b2c7:	08 00 
  800420b2c9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2d0:	00 00 00 
  800420b2d3:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2da:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2dd:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2e3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2ea:	00 00 00 
  800420b2ed:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2f4:	83 e2 07             	and    $0x7,%edx
  800420b2f7:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2fd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b304:	00 00 00 
  800420b307:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b30e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b311:	83 ca 0e             	or     $0xe,%edx
  800420b314:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b31a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b321:	00 00 00 
  800420b324:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b32b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b32e:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b334:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b33b:	00 00 00 
  800420b33e:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b345:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b348:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b34e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b355:	00 00 00 
  800420b358:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b35f:	83 ca 80             	or     $0xffffff80,%edx
  800420b362:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b368:	48 b8 76 d8 20 04 80 	movabs $0x800420d876,%rax
  800420b36f:	00 00 00 
  800420b372:	48 c1 e8 10          	shr    $0x10,%rax
  800420b376:	89 c2                	mov    %eax,%edx
  800420b378:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b37f:	00 00 00 
  800420b382:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b389:	48 b8 76 d8 20 04 80 	movabs $0x800420d876,%rax
  800420b390:	00 00 00 
  800420b393:	48 c1 e8 20          	shr    $0x20,%rax
  800420b397:	89 c2                	mov    %eax,%edx
  800420b399:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3a0:	00 00 00 
  800420b3a3:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b3a9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3b0:	00 00 00 
  800420b3b3:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b3ba:	00 00 00 
  800420b3bd:	48 b8 7c d8 20 04 80 	movabs $0x800420d87c,%rax
  800420b3c4:	00 00 00 
  800420b3c7:	89 c2                	mov    %eax,%edx
  800420b3c9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3d0:	00 00 00 
  800420b3d3:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b3da:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3e1:	00 00 00 
  800420b3e4:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b3eb:	08 00 
  800420b3ed:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3f4:	00 00 00 
  800420b3f7:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3fe:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b401:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b407:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b40e:	00 00 00 
  800420b411:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b418:	83 e2 07             	and    $0x7,%edx
  800420b41b:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b421:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b428:	00 00 00 
  800420b42b:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b432:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b435:	83 ca 0e             	or     $0xe,%edx
  800420b438:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b43e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b445:	00 00 00 
  800420b448:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b44f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b452:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b458:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b45f:	00 00 00 
  800420b462:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b469:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b46c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b472:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b479:	00 00 00 
  800420b47c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b483:	83 ca 80             	or     $0xffffff80,%edx
  800420b486:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b48c:	48 b8 7c d8 20 04 80 	movabs $0x800420d87c,%rax
  800420b493:	00 00 00 
  800420b496:	48 c1 e8 10          	shr    $0x10,%rax
  800420b49a:	89 c2                	mov    %eax,%edx
  800420b49c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4a3:	00 00 00 
  800420b4a6:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b4ad:	48 b8 7c d8 20 04 80 	movabs $0x800420d87c,%rax
  800420b4b4:	00 00 00 
  800420b4b7:	48 c1 e8 20          	shr    $0x20,%rax
  800420b4bb:	89 c2                	mov    %eax,%edx
  800420b4bd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4c4:	00 00 00 
  800420b4c7:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b4cd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4d4:	00 00 00 
  800420b4d7:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b4de:	00 00 00 
  800420b4e1:	48 b8 82 d8 20 04 80 	movabs $0x800420d882,%rax
  800420b4e8:	00 00 00 
  800420b4eb:	89 c2                	mov    %eax,%edx
  800420b4ed:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4f4:	00 00 00 
  800420b4f7:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b4fe:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b505:	00 00 00 
  800420b508:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b50f:	08 00 
  800420b511:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b518:	00 00 00 
  800420b51b:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b522:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b525:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b52b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b532:	00 00 00 
  800420b535:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b53c:	83 e2 07             	and    $0x7,%edx
  800420b53f:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b545:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b54c:	00 00 00 
  800420b54f:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b556:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b559:	83 ca 0e             	or     $0xe,%edx
  800420b55c:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b562:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b569:	00 00 00 
  800420b56c:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b573:	83 e2 ef             	and    $0xffffffef,%edx
  800420b576:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b57c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b583:	00 00 00 
  800420b586:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b58d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b590:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b596:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b59d:	00 00 00 
  800420b5a0:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b5a7:	83 ca 80             	or     $0xffffff80,%edx
  800420b5aa:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b5b0:	48 b8 82 d8 20 04 80 	movabs $0x800420d882,%rax
  800420b5b7:	00 00 00 
  800420b5ba:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5be:	89 c2                	mov    %eax,%edx
  800420b5c0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b5c7:	00 00 00 
  800420b5ca:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b5d1:	48 b8 82 d8 20 04 80 	movabs $0x800420d882,%rax
  800420b5d8:	00 00 00 
  800420b5db:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5df:	89 c2                	mov    %eax,%edx
  800420b5e1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b5e8:	00 00 00 
  800420b5eb:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b5f1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b5f8:	00 00 00 
  800420b5fb:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b602:	00 00 00 
  800420b605:	48 b8 88 d8 20 04 80 	movabs $0x800420d888,%rax
  800420b60c:	00 00 00 
  800420b60f:	89 c2                	mov    %eax,%edx
  800420b611:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b618:	00 00 00 
  800420b61b:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b622:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b629:	00 00 00 
  800420b62c:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b633:	08 00 
  800420b635:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b63c:	00 00 00 
  800420b63f:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b646:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b649:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b64f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b656:	00 00 00 
  800420b659:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b660:	83 e2 07             	and    $0x7,%edx
  800420b663:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b669:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b670:	00 00 00 
  800420b673:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b67a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b67d:	83 ca 0e             	or     $0xe,%edx
  800420b680:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b686:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b68d:	00 00 00 
  800420b690:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b697:	83 e2 ef             	and    $0xffffffef,%edx
  800420b69a:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6a0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b6a7:	00 00 00 
  800420b6aa:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6b1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b6b4:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6ba:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b6c1:	00 00 00 
  800420b6c4:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6cb:	83 ca 80             	or     $0xffffff80,%edx
  800420b6ce:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6d4:	48 b8 88 d8 20 04 80 	movabs $0x800420d888,%rax
  800420b6db:	00 00 00 
  800420b6de:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6e2:	89 c2                	mov    %eax,%edx
  800420b6e4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b6eb:	00 00 00 
  800420b6ee:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b6f5:	48 b8 88 d8 20 04 80 	movabs $0x800420d888,%rax
  800420b6fc:	00 00 00 
  800420b6ff:	48 c1 e8 20          	shr    $0x20,%rax
  800420b703:	89 c2                	mov    %eax,%edx
  800420b705:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b70c:	00 00 00 
  800420b70f:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b715:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b71c:	00 00 00 
  800420b71f:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b726:	00 00 00 
  800420b729:	48 b8 8e d8 20 04 80 	movabs $0x800420d88e,%rax
  800420b730:	00 00 00 
  800420b733:	89 c2                	mov    %eax,%edx
  800420b735:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b73c:	00 00 00 
  800420b73f:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b746:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b74d:	00 00 00 
  800420b750:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b757:	08 00 
  800420b759:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b760:	00 00 00 
  800420b763:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b76a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b76d:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b773:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b77a:	00 00 00 
  800420b77d:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b784:	83 e2 07             	and    $0x7,%edx
  800420b787:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b78d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b794:	00 00 00 
  800420b797:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b79e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b7a1:	83 ca 0e             	or     $0xe,%edx
  800420b7a4:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7aa:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b7b1:	00 00 00 
  800420b7b4:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7bb:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7be:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7c4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b7cb:	00 00 00 
  800420b7ce:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7d5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7d8:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7de:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b7e5:	00 00 00 
  800420b7e8:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7ef:	83 ca 80             	or     $0xffffff80,%edx
  800420b7f2:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7f8:	48 b8 8e d8 20 04 80 	movabs $0x800420d88e,%rax
  800420b7ff:	00 00 00 
  800420b802:	48 c1 e8 10          	shr    $0x10,%rax
  800420b806:	89 c2                	mov    %eax,%edx
  800420b808:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b80f:	00 00 00 
  800420b812:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b819:	48 b8 8e d8 20 04 80 	movabs $0x800420d88e,%rax
  800420b820:	00 00 00 
  800420b823:	48 c1 e8 20          	shr    $0x20,%rax
  800420b827:	89 c2                	mov    %eax,%edx
  800420b829:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b830:	00 00 00 
  800420b833:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b839:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b840:	00 00 00 
  800420b843:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b84a:	00 00 00 
  800420b84d:	48 b8 94 d8 20 04 80 	movabs $0x800420d894,%rax
  800420b854:	00 00 00 
  800420b857:	89 c2                	mov    %eax,%edx
  800420b859:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b860:	00 00 00 
  800420b863:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b86a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b871:	00 00 00 
  800420b874:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b87b:	08 00 
  800420b87d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b884:	00 00 00 
  800420b887:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b88e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b891:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b897:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b89e:	00 00 00 
  800420b8a1:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b8a8:	83 e2 07             	and    $0x7,%edx
  800420b8ab:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b8b1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b8b8:	00 00 00 
  800420b8bb:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8c2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8c5:	83 ca 0e             	or     $0xe,%edx
  800420b8c8:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8ce:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b8d5:	00 00 00 
  800420b8d8:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8df:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8e2:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8e8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b8ef:	00 00 00 
  800420b8f2:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8f9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8fc:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b902:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b909:	00 00 00 
  800420b90c:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b913:	83 ca 80             	or     $0xffffff80,%edx
  800420b916:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b91c:	48 b8 94 d8 20 04 80 	movabs $0x800420d894,%rax
  800420b923:	00 00 00 
  800420b926:	48 c1 e8 10          	shr    $0x10,%rax
  800420b92a:	89 c2                	mov    %eax,%edx
  800420b92c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b933:	00 00 00 
  800420b936:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b93d:	48 b8 94 d8 20 04 80 	movabs $0x800420d894,%rax
  800420b944:	00 00 00 
  800420b947:	48 c1 e8 20          	shr    $0x20,%rax
  800420b94b:	89 c2                	mov    %eax,%edx
  800420b94d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b954:	00 00 00 
  800420b957:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b95d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b964:	00 00 00 
  800420b967:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b96e:	00 00 00 
  800420b971:	48 b8 9a d8 20 04 80 	movabs $0x800420d89a,%rax
  800420b978:	00 00 00 
  800420b97b:	89 c2                	mov    %eax,%edx
  800420b97d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b984:	00 00 00 
  800420b987:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b98e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b995:	00 00 00 
  800420b998:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b99f:	08 00 
  800420b9a1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b9a8:	00 00 00 
  800420b9ab:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9b2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b9b5:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9bb:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b9c2:	00 00 00 
  800420b9c5:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9cc:	83 e2 07             	and    $0x7,%edx
  800420b9cf:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9d5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b9dc:	00 00 00 
  800420b9df:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9e6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9e9:	83 ca 0e             	or     $0xe,%edx
  800420b9ec:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9f2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b9f9:	00 00 00 
  800420b9fc:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba03:	83 e2 ef             	and    $0xffffffef,%edx
  800420ba06:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba0c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba13:	00 00 00 
  800420ba16:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba1d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba20:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba26:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba2d:	00 00 00 
  800420ba30:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba37:	83 ca 80             	or     $0xffffff80,%edx
  800420ba3a:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba40:	48 b8 9a d8 20 04 80 	movabs $0x800420d89a,%rax
  800420ba47:	00 00 00 
  800420ba4a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba4e:	89 c2                	mov    %eax,%edx
  800420ba50:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba57:	00 00 00 
  800420ba5a:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420ba61:	48 b8 9a d8 20 04 80 	movabs $0x800420d89a,%rax
  800420ba68:	00 00 00 
  800420ba6b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba6f:	89 c2                	mov    %eax,%edx
  800420ba71:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba78:	00 00 00 
  800420ba7b:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba81:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba88:	00 00 00 
  800420ba8b:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba92:	00 00 00 
  800420ba95:	48 b8 a0 d8 20 04 80 	movabs $0x800420d8a0,%rax
  800420ba9c:	00 00 00 
  800420ba9f:	89 c2                	mov    %eax,%edx
  800420baa1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420baa8:	00 00 00 
  800420baab:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420bab2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bab9:	00 00 00 
  800420babc:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420bac3:	08 00 
  800420bac5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bacc:	00 00 00 
  800420bacf:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bad6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bad9:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420badf:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bae6:	00 00 00 
  800420bae9:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420baf0:	83 e2 07             	and    $0x7,%edx
  800420baf3:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420baf9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb00:	00 00 00 
  800420bb03:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb0a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bb0d:	83 ca 0e             	or     $0xe,%edx
  800420bb10:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb16:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb1d:	00 00 00 
  800420bb20:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb27:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb2a:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb30:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb37:	00 00 00 
  800420bb3a:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb41:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb44:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb4a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb51:	00 00 00 
  800420bb54:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb5b:	83 ca 80             	or     $0xffffff80,%edx
  800420bb5e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb64:	48 b8 a0 d8 20 04 80 	movabs $0x800420d8a0,%rax
  800420bb6b:	00 00 00 
  800420bb6e:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb72:	89 c2                	mov    %eax,%edx
  800420bb74:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb7b:	00 00 00 
  800420bb7e:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb85:	48 b8 a0 d8 20 04 80 	movabs $0x800420d8a0,%rax
  800420bb8c:	00 00 00 
  800420bb8f:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb93:	89 c2                	mov    %eax,%edx
  800420bb95:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb9c:	00 00 00 
  800420bb9f:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bba5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbac:	00 00 00 
  800420bbaf:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bbb6:	00 00 00 
  800420bbb9:	48 b8 a6 d8 20 04 80 	movabs $0x800420d8a6,%rax
  800420bbc0:	00 00 00 
  800420bbc3:	89 c2                	mov    %eax,%edx
  800420bbc5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbcc:	00 00 00 
  800420bbcf:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bbd6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbdd:	00 00 00 
  800420bbe0:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bbe7:	08 00 
  800420bbe9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbf0:	00 00 00 
  800420bbf3:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbfa:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbfd:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc03:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc0a:	00 00 00 
  800420bc0d:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bc14:	83 e2 07             	and    $0x7,%edx
  800420bc17:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc1d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc24:	00 00 00 
  800420bc27:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc2e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc31:	83 ca 0e             	or     $0xe,%edx
  800420bc34:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc3a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc41:	00 00 00 
  800420bc44:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc4b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc4e:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc54:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc5b:	00 00 00 
  800420bc5e:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc65:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc68:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc6e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc75:	00 00 00 
  800420bc78:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc7f:	83 ca 80             	or     $0xffffff80,%edx
  800420bc82:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc88:	48 b8 a6 d8 20 04 80 	movabs $0x800420d8a6,%rax
  800420bc8f:	00 00 00 
  800420bc92:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc96:	89 c2                	mov    %eax,%edx
  800420bc98:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc9f:	00 00 00 
  800420bca2:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bca9:	48 b8 a6 d8 20 04 80 	movabs $0x800420d8a6,%rax
  800420bcb0:	00 00 00 
  800420bcb3:	48 c1 e8 20          	shr    $0x20,%rax
  800420bcb7:	89 c2                	mov    %eax,%edx
  800420bcb9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bcc0:	00 00 00 
  800420bcc3:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bcc9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bcd0:	00 00 00 
  800420bcd3:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bcda:	00 00 00 
  800420bcdd:	48 b8 ac d8 20 04 80 	movabs $0x800420d8ac,%rax
  800420bce4:	00 00 00 
  800420bce7:	89 c2                	mov    %eax,%edx
  800420bce9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bcf0:	00 00 00 
  800420bcf3:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bcfa:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd01:	00 00 00 
  800420bd04:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bd0b:	08 00 
  800420bd0d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd14:	00 00 00 
  800420bd17:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd1e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd21:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd27:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd2e:	00 00 00 
  800420bd31:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd38:	83 e2 07             	and    $0x7,%edx
  800420bd3b:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd41:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd48:	00 00 00 
  800420bd4b:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd52:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd55:	83 ca 0e             	or     $0xe,%edx
  800420bd58:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd5e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd65:	00 00 00 
  800420bd68:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd6f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd72:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd78:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd7f:	00 00 00 
  800420bd82:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd89:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd8c:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd92:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd99:	00 00 00 
  800420bd9c:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bda3:	83 ca 80             	or     $0xffffff80,%edx
  800420bda6:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bdac:	48 b8 ac d8 20 04 80 	movabs $0x800420d8ac,%rax
  800420bdb3:	00 00 00 
  800420bdb6:	48 c1 e8 10          	shr    $0x10,%rax
  800420bdba:	89 c2                	mov    %eax,%edx
  800420bdbc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bdc3:	00 00 00 
  800420bdc6:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bdcd:	48 b8 ac d8 20 04 80 	movabs $0x800420d8ac,%rax
  800420bdd4:	00 00 00 
  800420bdd7:	48 c1 e8 20          	shr    $0x20,%rax
  800420bddb:	89 c2                	mov    %eax,%edx
  800420bddd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bde4:	00 00 00 
  800420bde7:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bded:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bdf4:	00 00 00 
  800420bdf7:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bdfe:	00 00 00 
  800420be01:	48 b8 b2 d8 20 04 80 	movabs $0x800420d8b2,%rax
  800420be08:	00 00 00 
  800420be0b:	89 c2                	mov    %eax,%edx
  800420be0d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be14:	00 00 00 
  800420be17:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420be1e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be25:	00 00 00 
  800420be28:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420be2f:	08 00 
  800420be31:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be38:	00 00 00 
  800420be3b:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be42:	83 e2 f8             	and    $0xfffffff8,%edx
  800420be45:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be4b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be52:	00 00 00 
  800420be55:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be5c:	83 e2 07             	and    $0x7,%edx
  800420be5f:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be65:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be6c:	00 00 00 
  800420be6f:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be76:	83 e2 f0             	and    $0xfffffff0,%edx
  800420be79:	83 ca 0e             	or     $0xe,%edx
  800420be7c:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be82:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be89:	00 00 00 
  800420be8c:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be93:	83 e2 ef             	and    $0xffffffef,%edx
  800420be96:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be9c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bea3:	00 00 00 
  800420bea6:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420bead:	83 e2 9f             	and    $0xffffff9f,%edx
  800420beb0:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420beb6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bebd:	00 00 00 
  800420bec0:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420bec7:	83 ca 80             	or     $0xffffff80,%edx
  800420beca:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420bed0:	48 b8 b2 d8 20 04 80 	movabs $0x800420d8b2,%rax
  800420bed7:	00 00 00 
  800420beda:	48 c1 e8 10          	shr    $0x10,%rax
  800420bede:	89 c2                	mov    %eax,%edx
  800420bee0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bee7:	00 00 00 
  800420beea:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420bef1:	48 b8 b2 d8 20 04 80 	movabs $0x800420d8b2,%rax
  800420bef8:	00 00 00 
  800420befb:	48 c1 e8 20          	shr    $0x20,%rax
  800420beff:	89 c2                	mov    %eax,%edx
  800420bf01:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf08:	00 00 00 
  800420bf0b:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420bf11:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf18:	00 00 00 
  800420bf1b:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bf22:	00 00 00 
  800420bf25:	48 b8 b8 d8 20 04 80 	movabs $0x800420d8b8,%rax
  800420bf2c:	00 00 00 
  800420bf2f:	89 c2                	mov    %eax,%edx
  800420bf31:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf38:	00 00 00 
  800420bf3b:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bf42:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf49:	00 00 00 
  800420bf4c:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bf53:	08 00 
  800420bf55:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf5c:	00 00 00 
  800420bf5f:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf66:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bf69:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf6f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf76:	00 00 00 
  800420bf79:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf80:	83 e2 07             	and    $0x7,%edx
  800420bf83:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf89:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf90:	00 00 00 
  800420bf93:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf9a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf9d:	83 ca 0e             	or     $0xe,%edx
  800420bfa0:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfa6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bfad:	00 00 00 
  800420bfb0:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfb7:	83 e2 ef             	and    $0xffffffef,%edx
  800420bfba:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfc0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bfc7:	00 00 00 
  800420bfca:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfd1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bfd4:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfda:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bfe1:	00 00 00 
  800420bfe4:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfeb:	83 ca 80             	or     $0xffffff80,%edx
  800420bfee:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bff4:	48 b8 b8 d8 20 04 80 	movabs $0x800420d8b8,%rax
  800420bffb:	00 00 00 
  800420bffe:	48 c1 e8 10          	shr    $0x10,%rax
  800420c002:	89 c2                	mov    %eax,%edx
  800420c004:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c00b:	00 00 00 
  800420c00e:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420c015:	48 b8 b8 d8 20 04 80 	movabs $0x800420d8b8,%rax
  800420c01c:	00 00 00 
  800420c01f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c023:	89 c2                	mov    %eax,%edx
  800420c025:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c02c:	00 00 00 
  800420c02f:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420c035:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c03c:	00 00 00 
  800420c03f:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420c046:	00 00 00 
  800420c049:	48 b8 be d8 20 04 80 	movabs $0x800420d8be,%rax
  800420c050:	00 00 00 
  800420c053:	89 c2                	mov    %eax,%edx
  800420c055:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c05c:	00 00 00 
  800420c05f:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420c066:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c06d:	00 00 00 
  800420c070:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420c077:	08 00 
  800420c079:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c080:	00 00 00 
  800420c083:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c08a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c08d:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c093:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c09a:	00 00 00 
  800420c09d:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c0a4:	83 e2 07             	and    $0x7,%edx
  800420c0a7:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c0ad:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c0b4:	00 00 00 
  800420c0b7:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0be:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0c1:	83 ca 0e             	or     $0xe,%edx
  800420c0c4:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ca:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c0d1:	00 00 00 
  800420c0d4:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0db:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0de:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0e4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c0eb:	00 00 00 
  800420c0ee:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0f5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0f8:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0fe:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c105:	00 00 00 
  800420c108:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c10f:	83 ca 80             	or     $0xffffff80,%edx
  800420c112:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c118:	48 b8 be d8 20 04 80 	movabs $0x800420d8be,%rax
  800420c11f:	00 00 00 
  800420c122:	48 c1 e8 10          	shr    $0x10,%rax
  800420c126:	89 c2                	mov    %eax,%edx
  800420c128:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c12f:	00 00 00 
  800420c132:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c139:	48 b8 be d8 20 04 80 	movabs $0x800420d8be,%rax
  800420c140:	00 00 00 
  800420c143:	48 c1 e8 20          	shr    $0x20,%rax
  800420c147:	89 c2                	mov    %eax,%edx
  800420c149:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c150:	00 00 00 
  800420c153:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c159:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c160:	00 00 00 
  800420c163:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c16a:	00 00 00 
  800420c16d:	48 b8 c4 d8 20 04 80 	movabs $0x800420d8c4,%rax
  800420c174:	00 00 00 
  800420c177:	89 c2                	mov    %eax,%edx
  800420c179:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c180:	00 00 00 
  800420c183:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c18a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c191:	00 00 00 
  800420c194:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c19b:	08 00 
  800420c19d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1a4:	00 00 00 
  800420c1a7:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1ae:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c1b1:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1b7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1be:	00 00 00 
  800420c1c1:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1c8:	83 e2 07             	and    $0x7,%edx
  800420c1cb:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1d1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1d8:	00 00 00 
  800420c1db:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1e2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c1e5:	83 ca 0e             	or     $0xe,%edx
  800420c1e8:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1ee:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1f5:	00 00 00 
  800420c1f8:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1ff:	83 e2 ef             	and    $0xffffffef,%edx
  800420c202:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c208:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c20f:	00 00 00 
  800420c212:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c219:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c21c:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c222:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c229:	00 00 00 
  800420c22c:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c233:	83 ca 80             	or     $0xffffff80,%edx
  800420c236:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c23c:	48 b8 c4 d8 20 04 80 	movabs $0x800420d8c4,%rax
  800420c243:	00 00 00 
  800420c246:	48 c1 e8 10          	shr    $0x10,%rax
  800420c24a:	89 c2                	mov    %eax,%edx
  800420c24c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c253:	00 00 00 
  800420c256:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c25d:	48 b8 c4 d8 20 04 80 	movabs $0x800420d8c4,%rax
  800420c264:	00 00 00 
  800420c267:	48 c1 e8 20          	shr    $0x20,%rax
  800420c26b:	89 c2                	mov    %eax,%edx
  800420c26d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c274:	00 00 00 
  800420c277:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c27d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c284:	00 00 00 
  800420c287:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c28e:	00 00 00 
  800420c291:	48 b8 ca d8 20 04 80 	movabs $0x800420d8ca,%rax
  800420c298:	00 00 00 
  800420c29b:	89 c2                	mov    %eax,%edx
  800420c29d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2a4:	00 00 00 
  800420c2a7:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c2ae:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2b5:	00 00 00 
  800420c2b8:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c2bf:	08 00 
  800420c2c1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2c8:	00 00 00 
  800420c2cb:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2d2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c2d5:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2db:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2e2:	00 00 00 
  800420c2e5:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2ec:	83 e2 07             	and    $0x7,%edx
  800420c2ef:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2f5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2fc:	00 00 00 
  800420c2ff:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c306:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c309:	83 ca 0e             	or     $0xe,%edx
  800420c30c:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c312:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c319:	00 00 00 
  800420c31c:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c323:	83 e2 ef             	and    $0xffffffef,%edx
  800420c326:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c32c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c333:	00 00 00 
  800420c336:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c33d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c340:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c346:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c34d:	00 00 00 
  800420c350:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c357:	83 ca 80             	or     $0xffffff80,%edx
  800420c35a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c360:	48 b8 ca d8 20 04 80 	movabs $0x800420d8ca,%rax
  800420c367:	00 00 00 
  800420c36a:	48 c1 e8 10          	shr    $0x10,%rax
  800420c36e:	89 c2                	mov    %eax,%edx
  800420c370:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c377:	00 00 00 
  800420c37a:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c381:	48 b8 ca d8 20 04 80 	movabs $0x800420d8ca,%rax
  800420c388:	00 00 00 
  800420c38b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c38f:	89 c2                	mov    %eax,%edx
  800420c391:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c398:	00 00 00 
  800420c39b:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c3a1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3a8:	00 00 00 
  800420c3ab:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c3b2:	00 00 00 
  800420c3b5:	48 b8 d0 d8 20 04 80 	movabs $0x800420d8d0,%rax
  800420c3bc:	00 00 00 
  800420c3bf:	89 c2                	mov    %eax,%edx
  800420c3c1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3c8:	00 00 00 
  800420c3cb:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c3d2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3d9:	00 00 00 
  800420c3dc:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c3e3:	08 00 
  800420c3e5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3ec:	00 00 00 
  800420c3ef:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3f6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c3f9:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3ff:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c406:	00 00 00 
  800420c409:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c410:	83 e2 07             	and    $0x7,%edx
  800420c413:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c419:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c420:	00 00 00 
  800420c423:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c42a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c42d:	83 ca 0e             	or     $0xe,%edx
  800420c430:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c436:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c43d:	00 00 00 
  800420c440:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c447:	83 e2 ef             	and    $0xffffffef,%edx
  800420c44a:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c450:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c457:	00 00 00 
  800420c45a:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c461:	83 ca 60             	or     $0x60,%edx
  800420c464:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c46a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c471:	00 00 00 
  800420c474:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c47b:	83 ca 80             	or     $0xffffff80,%edx
  800420c47e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c484:	48 b8 d0 d8 20 04 80 	movabs $0x800420d8d0,%rax
  800420c48b:	00 00 00 
  800420c48e:	48 c1 e8 10          	shr    $0x10,%rax
  800420c492:	89 c2                	mov    %eax,%edx
  800420c494:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c49b:	00 00 00 
  800420c49e:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c4a5:	48 b8 d0 d8 20 04 80 	movabs $0x800420d8d0,%rax
  800420c4ac:	00 00 00 
  800420c4af:	48 c1 e8 20          	shr    $0x20,%rax
  800420c4b3:	89 c2                	mov    %eax,%edx
  800420c4b5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c4bc:	00 00 00 
  800420c4bf:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c4c5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c4cc:	00 00 00 
  800420c4cf:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c4d6:	00 00 00 
  800420c4d9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c4e0:	00 00 00 
  800420c4e3:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c4e8:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  800420c4ef:	00 00 00 
  800420c4f2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c4f9:	00 00 00 
  800420c4fc:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c500:	48 b8 0e c5 20 04 80 	movabs $0x800420c50e,%rax
  800420c507:	00 00 00 
  800420c50a:	ff d0                	callq  *%rax
  800420c50c:	c9                   	leaveq 
  800420c50d:	c3                   	retq   

000000800420c50e <trap_init_percpu>:
  800420c50e:	55                   	push   %rbp
  800420c50f:	48 89 e5             	mov    %rsp,%rbp
  800420c512:	53                   	push   %rbx
  800420c513:	48 83 ec 18          	sub    $0x18,%rsp
  800420c517:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c51e:	00 00 00 
  800420c521:	ff d0                	callq  *%rax
  800420c523:	01 c0                	add    %eax,%eax
  800420c525:	83 c0 05             	add    $0x5,%eax
  800420c528:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c52b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c532:	00 00 00 
  800420c535:	ff d0                	callq  *%rax
  800420c537:	89 c3                	mov    %eax,%ebx
  800420c539:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c540:	00 00 00 
  800420c543:	ff d0                	callq  *%rax
  800420c545:	89 c2                	mov    %eax,%edx
  800420c547:	89 d0                	mov    %edx,%eax
  800420c549:	01 c0                	add    %eax,%eax
  800420c54b:	01 d0                	add    %edx,%eax
  800420c54d:	c1 e0 0f             	shl    $0xf,%eax
  800420c550:	48 98                	cltq   
  800420c552:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c559:	00 00 00 
  800420c55c:	48 29 c2             	sub    %rax,%rdx
  800420c55f:	48 89 d0             	mov    %rdx,%rax
  800420c562:	48 89 c2             	mov    %rax,%rdx
  800420c565:	48 b9 20 d0 6d 04 80 	movabs $0x80046dd020,%rcx
  800420c56c:	00 00 00 
  800420c56f:	48 63 c3             	movslq %ebx,%rax
  800420c572:	48 c1 e0 03          	shl    $0x3,%rax
  800420c576:	48 89 c6             	mov    %rax,%rsi
  800420c579:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c57d:	48 01 f0             	add    %rsi,%rax
  800420c580:	48 01 c8             	add    %rcx,%rax
  800420c583:	48 83 c0 10          	add    $0x10,%rax
  800420c587:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c58b:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c592:	00 00 00 
  800420c595:	48 8b 00             	mov    (%rax),%rax
  800420c598:	48 c1 f8 10          	sar    $0x10,%rax
  800420c59c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5a0:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c5a7:	00 00 00 
  800420c5aa:	ff d0                	callq  *%rax
  800420c5ac:	c1 e0 04             	shl    $0x4,%eax
  800420c5af:	48 98                	cltq   
  800420c5b1:	48 01 d8             	add    %rbx,%rax
  800420c5b4:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c5b9:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c5c0:	00 00 00 
  800420c5c3:	48 8b 00             	mov    (%rax),%rax
  800420c5c6:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5ca:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5ce:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c5d5:	00 00 00 
  800420c5d8:	ff d0                	callq  *%rax
  800420c5da:	c1 e0 04             	shl    $0x4,%eax
  800420c5dd:	48 98                	cltq   
  800420c5df:	48 01 d8             	add    %rbx,%rax
  800420c5e2:	48 89 c3             	mov    %rax,%rbx
  800420c5e5:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c5ec:	00 00 00 
  800420c5ef:	ff d0                	callq  *%rax
  800420c5f1:	48 98                	cltq   
  800420c5f3:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5f7:	48 89 c2             	mov    %rax,%rdx
  800420c5fa:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5fe:	48 01 d0             	add    %rdx,%rax
  800420c601:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c605:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c60c:	00 00 00 
  800420c60f:	48 01 d0             	add    %rdx,%rax
  800420c612:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c616:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c61d:	00 00 00 
  800420c620:	48 8b 00             	mov    (%rax),%rax
  800420c623:	48 c1 f8 10          	sar    $0x10,%rax
  800420c627:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c62b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c632:	00 00 00 
  800420c635:	ff d0                	callq  *%rax
  800420c637:	c1 e0 04             	shl    $0x4,%eax
  800420c63a:	48 98                	cltq   
  800420c63c:	48 01 d8             	add    %rbx,%rax
  800420c63f:	48 89 c3             	mov    %rax,%rbx
  800420c642:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c649:	00 00 00 
  800420c64c:	ff d0                	callq  *%rax
  800420c64e:	48 98                	cltq   
  800420c650:	48 c1 e0 03          	shl    $0x3,%rax
  800420c654:	48 89 c2             	mov    %rax,%rdx
  800420c657:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c65b:	48 01 d0             	add    %rdx,%rax
  800420c65e:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c662:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c669:	00 00 00 
  800420c66c:	48 01 d0             	add    %rdx,%rax
  800420c66f:	48 c1 e8 10          	shr    $0x10,%rax
  800420c673:	88 43 04             	mov    %al,0x4(%rbx)
  800420c676:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c67d:	00 00 00 
  800420c680:	48 8b 00             	mov    (%rax),%rax
  800420c683:	48 c1 f8 10          	sar    $0x10,%rax
  800420c687:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c68b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c692:	00 00 00 
  800420c695:	ff d0                	callq  *%rax
  800420c697:	c1 e0 04             	shl    $0x4,%eax
  800420c69a:	48 98                	cltq   
  800420c69c:	48 01 d8             	add    %rbx,%rax
  800420c69f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6a3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c6a6:	83 ca 09             	or     $0x9,%edx
  800420c6a9:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6ac:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c6b3:	00 00 00 
  800420c6b6:	48 8b 00             	mov    (%rax),%rax
  800420c6b9:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6bd:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6c1:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c6c8:	00 00 00 
  800420c6cb:	ff d0                	callq  *%rax
  800420c6cd:	c1 e0 04             	shl    $0x4,%eax
  800420c6d0:	48 98                	cltq   
  800420c6d2:	48 01 d8             	add    %rbx,%rax
  800420c6d5:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6d9:	83 e2 ef             	and    $0xffffffef,%edx
  800420c6dc:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6df:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c6e6:	00 00 00 
  800420c6e9:	48 8b 00             	mov    (%rax),%rax
  800420c6ec:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6f0:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6f4:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c6fb:	00 00 00 
  800420c6fe:	ff d0                	callq  *%rax
  800420c700:	c1 e0 04             	shl    $0x4,%eax
  800420c703:	48 98                	cltq   
  800420c705:	48 01 d8             	add    %rbx,%rax
  800420c708:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c70c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c70f:	88 50 05             	mov    %dl,0x5(%rax)
  800420c712:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c719:	00 00 00 
  800420c71c:	48 8b 00             	mov    (%rax),%rax
  800420c71f:	48 c1 f8 10          	sar    $0x10,%rax
  800420c723:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c727:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c72e:	00 00 00 
  800420c731:	ff d0                	callq  *%rax
  800420c733:	c1 e0 04             	shl    $0x4,%eax
  800420c736:	48 98                	cltq   
  800420c738:	48 01 d8             	add    %rbx,%rax
  800420c73b:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c73f:	83 ca 80             	or     $0xffffff80,%edx
  800420c742:	88 50 05             	mov    %dl,0x5(%rax)
  800420c745:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c74c:	00 00 00 
  800420c74f:	48 8b 00             	mov    (%rax),%rax
  800420c752:	48 c1 f8 10          	sar    $0x10,%rax
  800420c756:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c75a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c761:	00 00 00 
  800420c764:	ff d0                	callq  *%rax
  800420c766:	c1 e0 04             	shl    $0x4,%eax
  800420c769:	48 98                	cltq   
  800420c76b:	48 01 d8             	add    %rbx,%rax
  800420c76e:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c772:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c775:	88 50 06             	mov    %dl,0x6(%rax)
  800420c778:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c77f:	00 00 00 
  800420c782:	48 8b 00             	mov    (%rax),%rax
  800420c785:	48 c1 f8 10          	sar    $0x10,%rax
  800420c789:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c78d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c794:	00 00 00 
  800420c797:	ff d0                	callq  *%rax
  800420c799:	c1 e0 04             	shl    $0x4,%eax
  800420c79c:	48 98                	cltq   
  800420c79e:	48 01 d8             	add    %rbx,%rax
  800420c7a1:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7a5:	83 e2 ef             	and    $0xffffffef,%edx
  800420c7a8:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7ab:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c7b2:	00 00 00 
  800420c7b5:	48 8b 00             	mov    (%rax),%rax
  800420c7b8:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7bc:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7c0:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c7c7:	00 00 00 
  800420c7ca:	ff d0                	callq  *%rax
  800420c7cc:	c1 e0 04             	shl    $0x4,%eax
  800420c7cf:	48 98                	cltq   
  800420c7d1:	48 01 d8             	add    %rbx,%rax
  800420c7d4:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7d8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c7db:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7de:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c7e5:	00 00 00 
  800420c7e8:	48 8b 00             	mov    (%rax),%rax
  800420c7eb:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7ef:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7f3:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c7fa:	00 00 00 
  800420c7fd:	ff d0                	callq  *%rax
  800420c7ff:	c1 e0 04             	shl    $0x4,%eax
  800420c802:	48 98                	cltq   
  800420c804:	48 01 d8             	add    %rbx,%rax
  800420c807:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c80b:	83 e2 7f             	and    $0x7f,%edx
  800420c80e:	88 50 06             	mov    %dl,0x6(%rax)
  800420c811:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c818:	00 00 00 
  800420c81b:	48 8b 00             	mov    (%rax),%rax
  800420c81e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c822:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c826:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c82d:	00 00 00 
  800420c830:	ff d0                	callq  *%rax
  800420c832:	c1 e0 04             	shl    $0x4,%eax
  800420c835:	48 98                	cltq   
  800420c837:	48 01 d8             	add    %rbx,%rax
  800420c83a:	48 89 c3             	mov    %rax,%rbx
  800420c83d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c844:	00 00 00 
  800420c847:	ff d0                	callq  *%rax
  800420c849:	48 98                	cltq   
  800420c84b:	48 c1 e0 03          	shl    $0x3,%rax
  800420c84f:	48 89 c2             	mov    %rax,%rdx
  800420c852:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c856:	48 01 d0             	add    %rdx,%rax
  800420c859:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c85d:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c864:	00 00 00 
  800420c867:	48 01 d0             	add    %rdx,%rax
  800420c86a:	48 c1 e8 18          	shr    $0x18,%rax
  800420c86e:	88 43 07             	mov    %al,0x7(%rbx)
  800420c871:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c878:	00 00 00 
  800420c87b:	48 8b 00             	mov    (%rax),%rax
  800420c87e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c882:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c886:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c88d:	00 00 00 
  800420c890:	ff d0                	callq  *%rax
  800420c892:	c1 e0 04             	shl    $0x4,%eax
  800420c895:	48 98                	cltq   
  800420c897:	48 01 d8             	add    %rbx,%rax
  800420c89a:	48 89 c3             	mov    %rax,%rbx
  800420c89d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c8a4:	00 00 00 
  800420c8a7:	ff d0                	callq  *%rax
  800420c8a9:	48 98                	cltq   
  800420c8ab:	48 c1 e0 03          	shl    $0x3,%rax
  800420c8af:	48 89 c2             	mov    %rax,%rdx
  800420c8b2:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c8b6:	48 01 d0             	add    %rdx,%rax
  800420c8b9:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c8bd:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c8c4:	00 00 00 
  800420c8c7:	48 01 d0             	add    %rdx,%rax
  800420c8ca:	48 c1 e8 20          	shr    $0x20,%rax
  800420c8ce:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c8d1:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c8d8:	00 00 00 
  800420c8db:	48 8b 00             	mov    (%rax),%rax
  800420c8de:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8e2:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8e6:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c8ed:	00 00 00 
  800420c8f0:	ff d0                	callq  *%rax
  800420c8f2:	c1 e0 04             	shl    $0x4,%eax
  800420c8f5:	48 98                	cltq   
  800420c8f7:	48 01 d8             	add    %rbx,%rax
  800420c8fa:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c8fe:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c905:	00 00 00 
  800420c908:	48 8b 00             	mov    (%rax),%rax
  800420c90b:	48 c1 f8 10          	sar    $0x10,%rax
  800420c90f:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c913:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c91a:	00 00 00 
  800420c91d:	ff d0                	callq  *%rax
  800420c91f:	c1 e0 04             	shl    $0x4,%eax
  800420c922:	48 98                	cltq   
  800420c924:	48 01 d8             	add    %rbx,%rax
  800420c927:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c92b:	48 b8 68 46 23 04 80 	movabs $0x8004234668,%rax
  800420c932:	00 00 00 
  800420c935:	48 8b 00             	mov    (%rax),%rax
  800420c938:	48 c1 f8 10          	sar    $0x10,%rax
  800420c93c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c940:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c947:	00 00 00 
  800420c94a:	ff d0                	callq  *%rax
  800420c94c:	c1 e0 04             	shl    $0x4,%eax
  800420c94f:	48 98                	cltq   
  800420c951:	48 01 d8             	add    %rbx,%rax
  800420c954:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c95a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c95d:	c1 e0 03             	shl    $0x3,%eax
  800420c960:	0f b7 c0             	movzwl %ax,%eax
  800420c963:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c967:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c96b:	0f 00 d8             	ltr    %ax
  800420c96e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c975:	00 00 00 
  800420c978:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c97c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c980:	0f 01 18             	lidt   (%rax)
  800420c983:	48 83 c4 18          	add    $0x18,%rsp
  800420c987:	5b                   	pop    %rbx
  800420c988:	5d                   	pop    %rbp
  800420c989:	c3                   	retq   

000000800420c98a <print_trapframe>:
  800420c98a:	55                   	push   %rbp
  800420c98b:	48 89 e5             	mov    %rsp,%rbp
  800420c98e:	48 83 ec 20          	sub    $0x20,%rsp
  800420c992:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c996:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420c99d:	00 00 00 
  800420c9a0:	ff d0                	callq  *%rax
  800420c9a2:	89 c2                	mov    %eax,%edx
  800420c9a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9a8:	48 89 c6             	mov    %rax,%rsi
  800420c9ab:	48 bf ae f3 21 04 80 	movabs $0x800421f3ae,%rdi
  800420c9b2:	00 00 00 
  800420c9b5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9ba:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800420c9c1:	00 00 00 
  800420c9c4:	ff d1                	callq  *%rcx
  800420c9c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ca:	48 89 c7             	mov    %rax,%rdi
  800420c9cd:	48 b8 9b cc 20 04 80 	movabs $0x800420cc9b,%rax
  800420c9d4:	00 00 00 
  800420c9d7:	ff d0                	callq  *%rax
  800420c9d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9dd:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c9e1:	0f b7 c0             	movzwl %ax,%eax
  800420c9e4:	89 c6                	mov    %eax,%esi
  800420c9e6:	48 bf cc f3 21 04 80 	movabs $0x800421f3cc,%rdi
  800420c9ed:	00 00 00 
  800420c9f0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9f5:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420c9fc:	00 00 00 
  800420c9ff:	ff d2                	callq  *%rdx
  800420ca01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca05:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420ca0c:	0f b7 c0             	movzwl %ax,%eax
  800420ca0f:	89 c6                	mov    %eax,%esi
  800420ca11:	48 bf df f3 21 04 80 	movabs $0x800421f3df,%rdi
  800420ca18:	00 00 00 
  800420ca1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca20:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ca27:	00 00 00 
  800420ca2a:	ff d2                	callq  *%rdx
  800420ca2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca30:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca37:	89 c7                	mov    %eax,%edi
  800420ca39:	48 b8 ac 9d 20 04 80 	movabs $0x8004209dac,%rax
  800420ca40:	00 00 00 
  800420ca43:	ff d0                	callq  *%rax
  800420ca45:	48 89 c2             	mov    %rax,%rdx
  800420ca48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca4c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca53:	48 89 c6             	mov    %rax,%rsi
  800420ca56:	48 bf f2 f3 21 04 80 	movabs $0x800421f3f2,%rdi
  800420ca5d:	00 00 00 
  800420ca60:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca65:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800420ca6c:	00 00 00 
  800420ca6f:	ff d1                	callq  *%rcx
  800420ca71:	48 b8 90 d2 4d 04 80 	movabs $0x80044dd290,%rax
  800420ca78:	00 00 00 
  800420ca7b:	48 8b 00             	mov    (%rax),%rax
  800420ca7e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca82:	75 3a                	jne    800420cabe <print_trapframe+0x134>
  800420ca84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca88:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca8f:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca93:	75 29                	jne    800420cabe <print_trapframe+0x134>
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca95:	0f 20 d0             	mov    %cr2,%rax
  800420ca98:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420caa0:	48 89 c6             	mov    %rax,%rsi
  800420caa3:	48 bf 04 f4 21 04 80 	movabs $0x800421f404,%rdi
  800420caaa:	00 00 00 
  800420caad:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cab2:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cab9:	00 00 00 
  800420cabc:	ff d2                	callq  *%rdx
  800420cabe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cac2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cac9:	48 89 c6             	mov    %rax,%rsi
  800420cacc:	48 bf 13 f4 21 04 80 	movabs $0x800421f413,%rdi
  800420cad3:	00 00 00 
  800420cad6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cadb:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cae2:	00 00 00 
  800420cae5:	ff d2                	callq  *%rdx
  800420cae7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caeb:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420caf2:	48 83 f8 0e          	cmp    $0xe,%rax
  800420caf6:	0f 85 9c 00 00 00    	jne    800420cb98 <print_trapframe+0x20e>
  800420cafc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb00:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb07:	83 e0 01             	and    $0x1,%eax
  800420cb0a:	48 85 c0             	test   %rax,%rax
  800420cb0d:	74 0c                	je     800420cb1b <print_trapframe+0x191>
  800420cb0f:	48 b9 21 f4 21 04 80 	movabs $0x800421f421,%rcx
  800420cb16:	00 00 00 
  800420cb19:	eb 0a                	jmp    800420cb25 <print_trapframe+0x19b>
  800420cb1b:	48 b9 2c f4 21 04 80 	movabs $0x800421f42c,%rcx
  800420cb22:	00 00 00 
  800420cb25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb29:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb30:	83 e0 02             	and    $0x2,%eax
  800420cb33:	48 85 c0             	test   %rax,%rax
  800420cb36:	74 0c                	je     800420cb44 <print_trapframe+0x1ba>
  800420cb38:	48 ba 38 f4 21 04 80 	movabs $0x800421f438,%rdx
  800420cb3f:	00 00 00 
  800420cb42:	eb 0a                	jmp    800420cb4e <print_trapframe+0x1c4>
  800420cb44:	48 ba 3e f4 21 04 80 	movabs $0x800421f43e,%rdx
  800420cb4b:	00 00 00 
  800420cb4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb52:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb59:	83 e0 04             	and    $0x4,%eax
  800420cb5c:	48 85 c0             	test   %rax,%rax
  800420cb5f:	74 0c                	je     800420cb6d <print_trapframe+0x1e3>
  800420cb61:	48 b8 43 f4 21 04 80 	movabs $0x800421f443,%rax
  800420cb68:	00 00 00 
  800420cb6b:	eb 0a                	jmp    800420cb77 <print_trapframe+0x1ed>
  800420cb6d:	48 b8 48 f4 21 04 80 	movabs $0x800421f448,%rax
  800420cb74:	00 00 00 
  800420cb77:	48 89 c6             	mov    %rax,%rsi
  800420cb7a:	48 bf 4f f4 21 04 80 	movabs $0x800421f44f,%rdi
  800420cb81:	00 00 00 
  800420cb84:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb89:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  800420cb90:	00 00 00 
  800420cb93:	41 ff d0             	callq  *%r8
  800420cb96:	eb 1b                	jmp    800420cbb3 <print_trapframe+0x229>
  800420cb98:	48 bf 5e f4 21 04 80 	movabs $0x800421f45e,%rdi
  800420cb9f:	00 00 00 
  800420cba2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cba7:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cbae:	00 00 00 
  800420cbb1:	ff d2                	callq  *%rdx
  800420cbb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbb7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cbbe:	48 89 c6             	mov    %rax,%rsi
  800420cbc1:	48 bf 60 f4 21 04 80 	movabs $0x800421f460,%rdi
  800420cbc8:	00 00 00 
  800420cbcb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbd0:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cbd7:	00 00 00 
  800420cbda:	ff d2                	callq  *%rdx
  800420cbdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbe0:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbe7:	0f b7 c0             	movzwl %ax,%eax
  800420cbea:	89 c6                	mov    %eax,%esi
  800420cbec:	48 bf 6f f4 21 04 80 	movabs $0x800421f46f,%rdi
  800420cbf3:	00 00 00 
  800420cbf6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbfb:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cc02:	00 00 00 
  800420cc05:	ff d2                	callq  *%rdx
  800420cc07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc0b:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cc12:	48 89 c6             	mov    %rax,%rsi
  800420cc15:	48 bf 82 f4 21 04 80 	movabs $0x800421f482,%rdi
  800420cc1c:	00 00 00 
  800420cc1f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc24:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cc2b:	00 00 00 
  800420cc2e:	ff d2                	callq  *%rdx
  800420cc30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc34:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cc3b:	0f b7 c0             	movzwl %ax,%eax
  800420cc3e:	83 e0 03             	and    $0x3,%eax
  800420cc41:	85 c0                	test   %eax,%eax
  800420cc43:	74 54                	je     800420cc99 <print_trapframe+0x30f>
  800420cc45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc49:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cc50:	48 89 c6             	mov    %rax,%rsi
  800420cc53:	48 bf 91 f4 21 04 80 	movabs $0x800421f491,%rdi
  800420cc5a:	00 00 00 
  800420cc5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc62:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cc69:	00 00 00 
  800420cc6c:	ff d2                	callq  *%rdx
  800420cc6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc72:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cc79:	0f b7 c0             	movzwl %ax,%eax
  800420cc7c:	89 c6                	mov    %eax,%esi
  800420cc7e:	48 bf a0 f4 21 04 80 	movabs $0x800421f4a0,%rdi
  800420cc85:	00 00 00 
  800420cc88:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc8d:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cc94:	00 00 00 
  800420cc97:	ff d2                	callq  *%rdx
  800420cc99:	c9                   	leaveq 
  800420cc9a:	c3                   	retq   

000000800420cc9b <print_regs>:
  800420cc9b:	55                   	push   %rbp
  800420cc9c:	48 89 e5             	mov    %rsp,%rbp
  800420cc9f:	48 83 ec 10          	sub    $0x10,%rsp
  800420cca3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccab:	48 8b 00             	mov    (%rax),%rax
  800420ccae:	48 89 c6             	mov    %rax,%rsi
  800420ccb1:	48 bf b3 f4 21 04 80 	movabs $0x800421f4b3,%rdi
  800420ccb8:	00 00 00 
  800420ccbb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccc0:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ccc7:	00 00 00 
  800420ccca:	ff d2                	callq  *%rdx
  800420cccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccd0:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ccd4:	48 89 c6             	mov    %rax,%rsi
  800420ccd7:	48 bf c2 f4 21 04 80 	movabs $0x800421f4c2,%rdi
  800420ccde:	00 00 00 
  800420cce1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cce6:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cced:	00 00 00 
  800420ccf0:	ff d2                	callq  *%rdx
  800420ccf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccf6:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ccfa:	48 89 c6             	mov    %rax,%rsi
  800420ccfd:	48 bf d1 f4 21 04 80 	movabs $0x800421f4d1,%rdi
  800420cd04:	00 00 00 
  800420cd07:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd0c:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cd13:	00 00 00 
  800420cd16:	ff d2                	callq  *%rdx
  800420cd18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd1c:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd20:	48 89 c6             	mov    %rax,%rsi
  800420cd23:	48 bf e0 f4 21 04 80 	movabs $0x800421f4e0,%rdi
  800420cd2a:	00 00 00 
  800420cd2d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd32:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cd39:	00 00 00 
  800420cd3c:	ff d2                	callq  *%rdx
  800420cd3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd42:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420cd46:	48 89 c6             	mov    %rax,%rsi
  800420cd49:	48 bf ef f4 21 04 80 	movabs $0x800421f4ef,%rdi
  800420cd50:	00 00 00 
  800420cd53:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd58:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cd5f:	00 00 00 
  800420cd62:	ff d2                	callq  *%rdx
  800420cd64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd68:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cd6c:	48 89 c6             	mov    %rax,%rsi
  800420cd6f:	48 bf fe f4 21 04 80 	movabs $0x800421f4fe,%rdi
  800420cd76:	00 00 00 
  800420cd79:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd7e:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cd85:	00 00 00 
  800420cd88:	ff d2                	callq  *%rdx
  800420cd8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd8e:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd92:	48 89 c6             	mov    %rax,%rsi
  800420cd95:	48 bf 0d f5 21 04 80 	movabs $0x800421f50d,%rdi
  800420cd9c:	00 00 00 
  800420cd9f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cda4:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cdab:	00 00 00 
  800420cdae:	ff d2                	callq  *%rdx
  800420cdb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdb4:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cdb8:	48 89 c6             	mov    %rax,%rsi
  800420cdbb:	48 bf 1b f5 21 04 80 	movabs $0x800421f51b,%rdi
  800420cdc2:	00 00 00 
  800420cdc5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdca:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cdd1:	00 00 00 
  800420cdd4:	ff d2                	callq  *%rdx
  800420cdd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdda:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cdde:	48 89 c6             	mov    %rax,%rsi
  800420cde1:	48 bf 29 f5 21 04 80 	movabs $0x800421f529,%rdi
  800420cde8:	00 00 00 
  800420cdeb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdf0:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cdf7:	00 00 00 
  800420cdfa:	ff d2                	callq  *%rdx
  800420cdfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce00:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420ce04:	48 89 c6             	mov    %rax,%rsi
  800420ce07:	48 bf 38 f5 21 04 80 	movabs $0x800421f538,%rdi
  800420ce0e:	00 00 00 
  800420ce11:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce16:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ce1d:	00 00 00 
  800420ce20:	ff d2                	callq  *%rdx
  800420ce22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce26:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420ce2a:	48 89 c6             	mov    %rax,%rsi
  800420ce2d:	48 bf 47 f5 21 04 80 	movabs $0x800421f547,%rdi
  800420ce34:	00 00 00 
  800420ce37:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce3c:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ce43:	00 00 00 
  800420ce46:	ff d2                	callq  *%rdx
  800420ce48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce4c:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420ce50:	48 89 c6             	mov    %rax,%rsi
  800420ce53:	48 bf 56 f5 21 04 80 	movabs $0x800421f556,%rdi
  800420ce5a:	00 00 00 
  800420ce5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce62:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ce69:	00 00 00 
  800420ce6c:	ff d2                	callq  *%rdx
  800420ce6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce72:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ce76:	48 89 c6             	mov    %rax,%rsi
  800420ce79:	48 bf 65 f5 21 04 80 	movabs $0x800421f565,%rdi
  800420ce80:	00 00 00 
  800420ce83:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce88:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ce8f:	00 00 00 
  800420ce92:	ff d2                	callq  *%rdx
  800420ce94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce98:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce9c:	48 89 c6             	mov    %rax,%rsi
  800420ce9f:	48 bf 74 f5 21 04 80 	movabs $0x800421f574,%rdi
  800420cea6:	00 00 00 
  800420cea9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ceae:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ceb5:	00 00 00 
  800420ceb8:	ff d2                	callq  *%rdx
  800420ceba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cebe:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cec2:	48 89 c6             	mov    %rax,%rsi
  800420cec5:	48 bf 83 f5 21 04 80 	movabs $0x800421f583,%rdi
  800420cecc:	00 00 00 
  800420cecf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ced4:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cedb:	00 00 00 
  800420cede:	ff d2                	callq  *%rdx
  800420cee0:	c9                   	leaveq 
  800420cee1:	c3                   	retq   

000000800420cee2 <trap_dispatch>:
  800420cee2:	55                   	push   %rbp
  800420cee3:	48 89 e5             	mov    %rsp,%rbp
  800420cee6:	48 83 ec 10          	sub    $0x10,%rsp
  800420ceea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ceee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cef2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cef9:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cefd:	75 18                	jne    800420cf17 <trap_dispatch+0x35>
  800420ceff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf03:	48 89 c7             	mov    %rax,%rdi
  800420cf06:	48 b8 60 d4 20 04 80 	movabs $0x800420d460,%rax
  800420cf0d:	00 00 00 
  800420cf10:	ff d0                	callq  *%rax
  800420cf12:	e9 ea 01 00 00       	jmpq   800420d101 <trap_dispatch+0x21f>
  800420cf17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf1b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf22:	48 83 f8 30          	cmp    $0x30,%rax
  800420cf26:	75 55                	jne    800420cf7d <trap_dispatch+0x9b>
  800420cf28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf2c:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420cf30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf34:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420cf38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf3c:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cf40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf44:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cf48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf4c:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420cf50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf54:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cf58:	4d 89 c1             	mov    %r8,%r9
  800420cf5b:	49 89 f8             	mov    %rdi,%r8
  800420cf5e:	48 89 c7             	mov    %rax,%rdi
  800420cf61:	48 b8 15 f4 20 04 80 	movabs $0x800420f415,%rax
  800420cf68:	00 00 00 
  800420cf6b:	ff d0                	callq  *%rax
  800420cf6d:	48 89 c2             	mov    %rax,%rdx
  800420cf70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf74:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cf78:	e9 84 01 00 00       	jmpq   800420d101 <trap_dispatch+0x21f>
  800420cf7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf81:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf88:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf8c:	75 18                	jne    800420cfa6 <trap_dispatch+0xc4>
  800420cf8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf92:	48 89 c7             	mov    %rax,%rdi
  800420cf95:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420cf9c:	00 00 00 
  800420cf9f:	ff d0                	callq  *%rax
  800420cfa1:	e9 5b 01 00 00       	jmpq   800420d101 <trap_dispatch+0x21f>
  800420cfa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfaa:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfb1:	48 83 f8 27          	cmp    $0x27,%rax
  800420cfb5:	75 33                	jne    800420cfea <trap_dispatch+0x108>
  800420cfb7:	48 bf 92 f5 21 04 80 	movabs $0x800421f592,%rdi
  800420cfbe:	00 00 00 
  800420cfc1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cfc6:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420cfcd:	00 00 00 
  800420cfd0:	ff d2                	callq  *%rdx
  800420cfd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfd6:	48 89 c7             	mov    %rax,%rdi
  800420cfd9:	48 b8 8a c9 20 04 80 	movabs $0x800420c98a,%rax
  800420cfe0:	00 00 00 
  800420cfe3:	ff d0                	callq  *%rax
  800420cfe5:	e9 17 01 00 00       	jmpq   800420d101 <trap_dispatch+0x21f>
  800420cfea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfee:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cff5:	48 83 f8 20          	cmp    $0x20,%rax
  800420cff9:	75 34                	jne    800420d02f <trap_dispatch+0x14d>
  800420cffb:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	85 c0                	test   %eax,%eax
  800420d009:	75 0c                	jne    800420d017 <trap_dispatch+0x135>
  800420d00b:	48 b8 46 9a 21 04 80 	movabs $0x8004219a46,%rax
  800420d012:	00 00 00 
  800420d015:	ff d0                	callq  *%rax
  800420d017:	48 b8 3f 82 21 04 80 	movabs $0x800421823f,%rax
  800420d01e:	00 00 00 
  800420d021:	ff d0                	callq  *%rax
  800420d023:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  800420d02a:	00 00 00 
  800420d02d:	ff d0                	callq  *%rax
  800420d02f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d033:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d03a:	48 83 f8 21          	cmp    $0x21,%rax
  800420d03e:	75 11                	jne    800420d051 <trap_dispatch+0x16f>
  800420d040:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  800420d047:	00 00 00 
  800420d04a:	ff d0                	callq  *%rax
  800420d04c:	e9 b0 00 00 00       	jmpq   800420d101 <trap_dispatch+0x21f>
  800420d051:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d055:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d05c:	48 83 f8 24          	cmp    $0x24,%rax
  800420d060:	75 11                	jne    800420d073 <trap_dispatch+0x191>
  800420d062:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  800420d069:	00 00 00 
  800420d06c:	ff d0                	callq  *%rax
  800420d06e:	e9 8e 00 00 00       	jmpq   800420d101 <trap_dispatch+0x21f>
  800420d073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d077:	48 89 c7             	mov    %rax,%rdi
  800420d07a:	48 b8 8a c9 20 04 80 	movabs $0x800420c98a,%rax
  800420d081:	00 00 00 
  800420d084:	ff d0                	callq  *%rax
  800420d086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d08a:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d091:	66 83 f8 08          	cmp    $0x8,%ax
  800420d095:	75 2a                	jne    800420d0c1 <trap_dispatch+0x1df>
  800420d097:	48 ba af f5 21 04 80 	movabs $0x800421f5af,%rdx
  800420d09e:	00 00 00 
  800420d0a1:	be 77 01 00 00       	mov    $0x177,%esi
  800420d0a6:	48 bf c8 f5 21 04 80 	movabs $0x800421f5c8,%rdi
  800420d0ad:	00 00 00 
  800420d0b0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d0b5:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d0bc:	00 00 00 
  800420d0bf:	ff d1                	callq  *%rcx
  800420d0c1:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d0c8:	00 00 00 
  800420d0cb:	ff d0                	callq  *%rax
  800420d0cd:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d0d4:	00 00 00 
  800420d0d7:	48 98                	cltq   
  800420d0d9:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0dd:	48 89 c1             	mov    %rax,%rcx
  800420d0e0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0e4:	48 01 c8             	add    %rcx,%rax
  800420d0e7:	48 01 d0             	add    %rdx,%rax
  800420d0ea:	48 83 c0 08          	add    $0x8,%rax
  800420d0ee:	48 8b 00             	mov    (%rax),%rax
  800420d0f1:	48 89 c7             	mov    %rax,%rdi
  800420d0f4:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  800420d0fb:	00 00 00 
  800420d0fe:	ff d0                	callq  *%rax
  800420d100:	90                   	nop
  800420d101:	c9                   	leaveq 
  800420d102:	c3                   	retq   

000000800420d103 <trap>:
  800420d103:	55                   	push   %rbp
  800420d104:	48 89 e5             	mov    %rsp,%rbp
  800420d107:	48 83 ec 20          	sub    $0x20,%rsp
  800420d10b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d10f:	fc                   	cld    
  800420d110:	48 b8 d8 b5 6d 04 80 	movabs $0x80046db5d8,%rax
  800420d117:	00 00 00 
  800420d11a:	48 8b 00             	mov    (%rax),%rax
  800420d11d:	48 85 c0             	test   %rax,%rax
  800420d120:	74 01                	je     800420d123 <trap+0x20>
  800420d122:	f4                   	hlt    
  800420d123:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d12a:	00 00 00 
  800420d12d:	ff d0                	callq  *%rax
  800420d12f:	48 98                	cltq   
  800420d131:	48 c1 e0 03          	shl    $0x3,%rax
  800420d135:	48 89 c2             	mov    %rax,%rdx
  800420d138:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d13c:	48 01 d0             	add    %rdx,%rax
  800420d13f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d146:	00 00 00 
  800420d149:	48 01 d0             	add    %rdx,%rax
  800420d14c:	48 83 c0 04          	add    $0x4,%rax
  800420d150:	be 01 00 00 00       	mov    $0x1,%esi
  800420d155:	48 89 c7             	mov    %rax,%rdi
  800420d158:	48 b8 6b 9d 20 04 80 	movabs $0x8004209d6b,%rax
  800420d15f:	00 00 00 
  800420d162:	ff d0                	callq  *%rax
  800420d164:	83 f8 02             	cmp    $0x2,%eax
  800420d167:	75 0c                	jne    800420d175 <trap+0x72>
  800420d169:	48 b8 90 9d 20 04 80 	movabs $0x8004209d90,%rax
  800420d170:	00 00 00 
  800420d173:	ff d0                	callq  *%rax
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d175:	9c                   	pushfq 
  800420d176:	58                   	pop    %rax
  800420d177:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d17b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d17f:	25 00 02 00 00       	and    $0x200,%eax
  800420d184:	48 85 c0             	test   %rax,%rax
  800420d187:	74 35                	je     800420d1be <trap+0xbb>
  800420d189:	48 b9 d7 f5 21 04 80 	movabs $0x800421f5d7,%rcx
  800420d190:	00 00 00 
  800420d193:	48 ba f0 f5 21 04 80 	movabs $0x800421f5f0,%rdx
  800420d19a:	00 00 00 
  800420d19d:	be 94 01 00 00       	mov    $0x194,%esi
  800420d1a2:	48 bf c8 f5 21 04 80 	movabs $0x800421f5c8,%rdi
  800420d1a9:	00 00 00 
  800420d1ac:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d1b1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d1b8:	00 00 00 
  800420d1bb:	41 ff d0             	callq  *%r8
  800420d1be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d1c2:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d1c9:	0f b7 c0             	movzwl %ax,%eax
  800420d1cc:	83 e0 03             	and    $0x3,%eax
  800420d1cf:	83 f8 03             	cmp    $0x3,%eax
  800420d1d2:	0f 85 a9 01 00 00    	jne    800420d381 <trap+0x27e>
  800420d1d8:	48 b8 90 9d 20 04 80 	movabs $0x8004209d90,%rax
  800420d1df:	00 00 00 
  800420d1e2:	ff d0                	callq  *%rax
  800420d1e4:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d1eb:	00 00 00 
  800420d1ee:	ff d0                	callq  *%rax
  800420d1f0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d1f7:	00 00 00 
  800420d1fa:	48 98                	cltq   
  800420d1fc:	48 c1 e0 03          	shl    $0x3,%rax
  800420d200:	48 89 c1             	mov    %rax,%rcx
  800420d203:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d207:	48 01 c8             	add    %rcx,%rax
  800420d20a:	48 01 d0             	add    %rdx,%rax
  800420d20d:	48 83 c0 08          	add    $0x8,%rax
  800420d211:	48 8b 00             	mov    (%rax),%rax
  800420d214:	48 85 c0             	test   %rax,%rax
  800420d217:	75 35                	jne    800420d24e <trap+0x14b>
  800420d219:	48 b9 05 f6 21 04 80 	movabs $0x800421f605,%rcx
  800420d220:	00 00 00 
  800420d223:	48 ba f0 f5 21 04 80 	movabs $0x800421f5f0,%rdx
  800420d22a:	00 00 00 
  800420d22d:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d232:	48 bf c8 f5 21 04 80 	movabs $0x800421f5c8,%rdi
  800420d239:	00 00 00 
  800420d23c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d241:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d248:	00 00 00 
  800420d24b:	41 ff d0             	callq  *%r8
  800420d24e:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d255:	00 00 00 
  800420d258:	ff d0                	callq  *%rax
  800420d25a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d261:	00 00 00 
  800420d264:	48 98                	cltq   
  800420d266:	48 c1 e0 03          	shl    $0x3,%rax
  800420d26a:	48 89 c1             	mov    %rax,%rcx
  800420d26d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d271:	48 01 c8             	add    %rcx,%rax
  800420d274:	48 01 d0             	add    %rdx,%rax
  800420d277:	48 83 c0 08          	add    $0x8,%rax
  800420d27b:	48 8b 00             	mov    (%rax),%rax
  800420d27e:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d284:	83 f8 01             	cmp    $0x1,%eax
  800420d287:	75 7f                	jne    800420d308 <trap+0x205>
  800420d289:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d290:	00 00 00 
  800420d293:	ff d0                	callq  *%rax
  800420d295:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d29c:	00 00 00 
  800420d29f:	48 98                	cltq   
  800420d2a1:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2a5:	48 89 c1             	mov    %rax,%rcx
  800420d2a8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2ac:	48 01 c8             	add    %rcx,%rax
  800420d2af:	48 01 d0             	add    %rdx,%rax
  800420d2b2:	48 83 c0 08          	add    $0x8,%rax
  800420d2b6:	48 8b 00             	mov    (%rax),%rax
  800420d2b9:	48 89 c7             	mov    %rax,%rdi
  800420d2bc:	48 b8 76 90 20 04 80 	movabs $0x8004209076,%rax
  800420d2c3:	00 00 00 
  800420d2c6:	ff d0                	callq  *%rax
  800420d2c8:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d2cf:	00 00 00 
  800420d2d2:	ff d0                	callq  *%rax
  800420d2d4:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d2db:	00 00 00 
  800420d2de:	48 98                	cltq   
  800420d2e0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2e4:	48 89 c1             	mov    %rax,%rcx
  800420d2e7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2eb:	48 01 c8             	add    %rcx,%rax
  800420d2ee:	48 01 d0             	add    %rdx,%rax
  800420d2f1:	48 83 c0 08          	add    $0x8,%rax
  800420d2f5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d2fc:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  800420d303:	00 00 00 
  800420d306:	ff d0                	callq  *%rax
  800420d308:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d30f:	00 00 00 
  800420d312:	ff d0                	callq  *%rax
  800420d314:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d31b:	00 00 00 
  800420d31e:	48 98                	cltq   
  800420d320:	48 c1 e0 03          	shl    $0x3,%rax
  800420d324:	48 89 c1             	mov    %rax,%rcx
  800420d327:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d32b:	48 01 c8             	add    %rcx,%rax
  800420d32e:	48 01 d0             	add    %rdx,%rax
  800420d331:	48 83 c0 08          	add    $0x8,%rax
  800420d335:	48 8b 10             	mov    (%rax),%rdx
  800420d338:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d33c:	48 89 c6             	mov    %rax,%rsi
  800420d33f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d344:	48 89 d7             	mov    %rdx,%rdi
  800420d347:	48 89 c1             	mov    %rax,%rcx
  800420d34a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d34d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d354:	00 00 00 
  800420d357:	ff d0                	callq  *%rax
  800420d359:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d360:	00 00 00 
  800420d363:	48 98                	cltq   
  800420d365:	48 c1 e0 03          	shl    $0x3,%rax
  800420d369:	48 89 c1             	mov    %rax,%rcx
  800420d36c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d370:	48 01 c8             	add    %rcx,%rax
  800420d373:	48 01 d0             	add    %rdx,%rax
  800420d376:	48 83 c0 08          	add    $0x8,%rax
  800420d37a:	48 8b 00             	mov    (%rax),%rax
  800420d37d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d381:	48 b8 90 d2 4d 04 80 	movabs $0x80044dd290,%rax
  800420d388:	00 00 00 
  800420d38b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d38f:	48 89 10             	mov    %rdx,(%rax)
  800420d392:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d396:	48 89 c7             	mov    %rax,%rdi
  800420d399:	48 b8 e2 ce 20 04 80 	movabs $0x800420cee2,%rax
  800420d3a0:	00 00 00 
  800420d3a3:	ff d0                	callq  *%rax
  800420d3a5:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d3ac:	00 00 00 
  800420d3af:	ff d0                	callq  *%rax
  800420d3b1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d3b8:	00 00 00 
  800420d3bb:	48 98                	cltq   
  800420d3bd:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3c1:	48 89 c1             	mov    %rax,%rcx
  800420d3c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3c8:	48 01 c8             	add    %rcx,%rax
  800420d3cb:	48 01 d0             	add    %rdx,%rax
  800420d3ce:	48 83 c0 08          	add    $0x8,%rax
  800420d3d2:	48 8b 00             	mov    (%rax),%rax
  800420d3d5:	48 85 c0             	test   %rax,%rax
  800420d3d8:	74 7a                	je     800420d454 <trap+0x351>
  800420d3da:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d3e1:	00 00 00 
  800420d3e4:	ff d0                	callq  *%rax
  800420d3e6:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d3ed:	00 00 00 
  800420d3f0:	48 98                	cltq   
  800420d3f2:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3f6:	48 89 c1             	mov    %rax,%rcx
  800420d3f9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3fd:	48 01 c8             	add    %rcx,%rax
  800420d400:	48 01 d0             	add    %rdx,%rax
  800420d403:	48 83 c0 08          	add    $0x8,%rax
  800420d407:	48 8b 00             	mov    (%rax),%rax
  800420d40a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d410:	83 f8 03             	cmp    $0x3,%eax
  800420d413:	75 3f                	jne    800420d454 <trap+0x351>
  800420d415:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d41c:	00 00 00 
  800420d41f:	ff d0                	callq  *%rax
  800420d421:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d428:	00 00 00 
  800420d42b:	48 98                	cltq   
  800420d42d:	48 c1 e0 03          	shl    $0x3,%rax
  800420d431:	48 89 c1             	mov    %rax,%rcx
  800420d434:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d438:	48 01 c8             	add    %rcx,%rax
  800420d43b:	48 01 d0             	add    %rdx,%rax
  800420d43e:	48 83 c0 08          	add    $0x8,%rax
  800420d442:	48 8b 00             	mov    (%rax),%rax
  800420d445:	48 89 c7             	mov    %rax,%rdi
  800420d448:	48 b8 fa 96 20 04 80 	movabs $0x80042096fa,%rax
  800420d44f:	00 00 00 
  800420d452:	ff d0                	callq  *%rax
  800420d454:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  800420d45b:	00 00 00 
  800420d45e:	ff d0                	callq  *%rax

000000800420d460 <page_fault_handler>:
  800420d460:	55                   	push   %rbp
  800420d461:	48 89 e5             	mov    %rsp,%rbp
  800420d464:	53                   	push   %rbx
  800420d465:	48 83 ec 38          	sub    $0x38,%rsp
  800420d469:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d46d:	0f 20 d0             	mov    %cr2,%rax
  800420d470:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d478:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d47c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d480:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d487:	0f b7 c0             	movzwl %ax,%eax
  800420d48a:	83 e0 03             	and    $0x3,%eax
  800420d48d:	85 c0                	test   %eax,%eax
  800420d48f:	75 3d                	jne    800420d4ce <page_fault_handler+0x6e>
  800420d491:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d495:	48 89 c7             	mov    %rax,%rdi
  800420d498:	48 b8 8a c9 20 04 80 	movabs $0x800420c98a,%rax
  800420d49f:	00 00 00 
  800420d4a2:	ff d0                	callq  *%rax
  800420d4a4:	48 ba 0c f6 21 04 80 	movabs $0x800421f60c,%rdx
  800420d4ab:	00 00 00 
  800420d4ae:	be de 01 00 00       	mov    $0x1de,%esi
  800420d4b3:	48 bf c8 f5 21 04 80 	movabs $0x800421f5c8,%rdi
  800420d4ba:	00 00 00 
  800420d4bd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4c2:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d4c9:	00 00 00 
  800420d4cc:	ff d1                	callq  *%rcx
  800420d4ce:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d4d5:	00 00 00 
  800420d4d8:	ff d0                	callq  *%rax
  800420d4da:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d4e1:	00 00 00 
  800420d4e4:	48 98                	cltq   
  800420d4e6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4ea:	48 89 c1             	mov    %rax,%rcx
  800420d4ed:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4f1:	48 01 c8             	add    %rcx,%rax
  800420d4f4:	48 01 d0             	add    %rdx,%rax
  800420d4f7:	48 83 c0 08          	add    $0x8,%rax
  800420d4fb:	48 8b 00             	mov    (%rax),%rax
  800420d4fe:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d505:	48 85 c0             	test   %rax,%rax
  800420d508:	0f 85 b8 00 00 00    	jne    800420d5c6 <page_fault_handler+0x166>
  800420d50e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d512:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d519:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d520:	00 00 00 
  800420d523:	ff d0                	callq  *%rax
  800420d525:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d52c:	00 00 00 
  800420d52f:	48 98                	cltq   
  800420d531:	48 c1 e0 03          	shl    $0x3,%rax
  800420d535:	48 89 c1             	mov    %rax,%rcx
  800420d538:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d53c:	48 01 c8             	add    %rcx,%rax
  800420d53f:	48 01 d0             	add    %rdx,%rax
  800420d542:	48 83 c0 08          	add    $0x8,%rax
  800420d546:	48 8b 00             	mov    (%rax),%rax
  800420d549:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d54f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d553:	48 89 d9             	mov    %rbx,%rcx
  800420d556:	89 c6                	mov    %eax,%esi
  800420d558:	48 bf 18 f6 21 04 80 	movabs $0x800421f618,%rdi
  800420d55f:	00 00 00 
  800420d562:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d567:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  800420d56e:	00 00 00 
  800420d571:	41 ff d0             	callq  *%r8
  800420d574:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d578:	48 89 c7             	mov    %rax,%rdi
  800420d57b:	48 b8 8a c9 20 04 80 	movabs $0x800420c98a,%rax
  800420d582:	00 00 00 
  800420d585:	ff d0                	callq  *%rax
  800420d587:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d58e:	00 00 00 
  800420d591:	ff d0                	callq  *%rax
  800420d593:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d59a:	00 00 00 
  800420d59d:	48 98                	cltq   
  800420d59f:	48 c1 e0 03          	shl    $0x3,%rax
  800420d5a3:	48 89 c1             	mov    %rax,%rcx
  800420d5a6:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d5aa:	48 01 c8             	add    %rcx,%rax
  800420d5ad:	48 01 d0             	add    %rdx,%rax
  800420d5b0:	48 83 c0 08          	add    $0x8,%rax
  800420d5b4:	48 8b 00             	mov    (%rax),%rax
  800420d5b7:	48 89 c7             	mov    %rax,%rdi
  800420d5ba:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  800420d5c1:	00 00 00 
  800420d5c4:	ff d0                	callq  *%rax
  800420d5c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ca:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5d1:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d5d6:	48 39 c2             	cmp    %rax,%rdx
  800420d5d9:	76 2c                	jbe    800420d607 <page_fault_handler+0x1a7>
  800420d5db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5df:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5e6:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d5eb:	48 39 c2             	cmp    %rax,%rdx
  800420d5ee:	77 17                	ja     800420d607 <page_fault_handler+0x1a7>
  800420d5f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5f4:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d5fb:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d601:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d605:	eb 09                	jmp    800420d610 <page_fault_handler+0x1b0>
  800420d607:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d60c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d610:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d617:	00 00 00 
  800420d61a:	ff d0                	callq  *%rax
  800420d61c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d623:	00 00 00 
  800420d626:	48 98                	cltq   
  800420d628:	48 c1 e0 03          	shl    $0x3,%rax
  800420d62c:	48 89 c1             	mov    %rax,%rcx
  800420d62f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d633:	48 01 c8             	add    %rcx,%rax
  800420d636:	48 01 d0             	add    %rdx,%rax
  800420d639:	48 83 c0 08          	add    $0x8,%rax
  800420d63d:	48 8b 00             	mov    (%rax),%rax
  800420d640:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d644:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d649:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d64e:	48 89 c7             	mov    %rax,%rdi
  800420d651:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420d658:	00 00 00 
  800420d65b:	ff d0                	callq  *%rax
  800420d65d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d661:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d665:	48 89 10             	mov    %rdx,(%rax)
  800420d668:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d66c:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d673:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d677:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d67b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d67f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d683:	48 8b 0a             	mov    (%rdx),%rcx
  800420d686:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d68a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d68e:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d692:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d696:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d69a:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d69e:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d6a2:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d6a6:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d6aa:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d6ae:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d6b2:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d6b6:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d6ba:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d6be:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d6c2:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d6c6:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d6ca:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d6ce:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d6d2:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d6d6:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d6da:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d6de:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d6e2:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d6e6:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d6ea:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d6ee:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d6f2:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d6f6:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d6fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d701:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d708:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d70c:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d717:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d71e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d722:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d729:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d72d:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d734:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d738:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d73f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d743:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d747:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d74e:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d755:	00 00 00 
  800420d758:	ff d0                	callq  *%rax
  800420d75a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d761:	00 00 00 
  800420d764:	48 98                	cltq   
  800420d766:	48 c1 e0 03          	shl    $0x3,%rax
  800420d76a:	48 89 c1             	mov    %rax,%rcx
  800420d76d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d771:	48 01 c8             	add    %rcx,%rax
  800420d774:	48 01 d0             	add    %rdx,%rax
  800420d777:	48 83 c0 08          	add    $0x8,%rax
  800420d77b:	48 8b 00             	mov    (%rax),%rax
  800420d77e:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d785:	48 89 c2             	mov    %rax,%rdx
  800420d788:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d78c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d793:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d79a:	00 00 00 
  800420d79d:	ff d0                	callq  *%rax
  800420d79f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d7a6:	00 00 00 
  800420d7a9:	48 98                	cltq   
  800420d7ab:	48 c1 e0 03          	shl    $0x3,%rax
  800420d7af:	48 89 c1             	mov    %rax,%rcx
  800420d7b2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d7b6:	48 01 c8             	add    %rcx,%rax
  800420d7b9:	48 01 d0             	add    %rdx,%rax
  800420d7bc:	48 83 c0 08          	add    $0x8,%rax
  800420d7c0:	48 8b 00             	mov    (%rax),%rax
  800420d7c3:	48 89 c7             	mov    %rax,%rdi
  800420d7c6:	48 b8 fa 96 20 04 80 	movabs $0x80042096fa,%rax
  800420d7cd:	00 00 00 
  800420d7d0:	ff d0                	callq  *%rax
  800420d7d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d7d9:	00 00 00 
  800420d7dc:	0f 1f 40 00          	nopl   0x0(%rax)

000000800420d7e0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d7e0:	6a 00                	pushq  $0x0
  800420d7e2:	6a 00                	pushq  $0x0
  800420d7e4:	e9 f7 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d7e9:	90                   	nop

000000800420d7ea <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d7ea:	6a 00                	pushq  $0x0
  800420d7ec:	6a 01                	pushq  $0x1
  800420d7ee:	e9 ed 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d7f3:	90                   	nop

000000800420d7f4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d7f4:	6a 00                	pushq  $0x0
  800420d7f6:	6a 02                	pushq  $0x2
  800420d7f8:	e9 e3 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d7fd:	90                   	nop

000000800420d7fe <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d7fe:	6a 00                	pushq  $0x0
  800420d800:	6a 03                	pushq  $0x3
  800420d802:	e9 d9 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d807:	90                   	nop

000000800420d808 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d808:	6a 00                	pushq  $0x0
  800420d80a:	6a 04                	pushq  $0x4
  800420d80c:	e9 cf 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d811:	90                   	nop

000000800420d812 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d812:	6a 00                	pushq  $0x0
  800420d814:	6a 05                	pushq  $0x5
  800420d816:	e9 c5 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d81b:	90                   	nop

000000800420d81c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d81c:	6a 00                	pushq  $0x0
  800420d81e:	6a 06                	pushq  $0x6
  800420d820:	e9 bb 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d825:	90                   	nop

000000800420d826 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d826:	6a 00                	pushq  $0x0
  800420d828:	6a 07                	pushq  $0x7
  800420d82a:	e9 b1 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d82f:	90                   	nop

000000800420d830 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d830:	6a 08                	pushq  $0x8
  800420d832:	e9 a9 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d837:	90                   	nop

000000800420d838 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d838:	6a 0a                	pushq  $0xa
  800420d83a:	e9 a1 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d83f:	90                   	nop

000000800420d840 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d840:	6a 0b                	pushq  $0xb
  800420d842:	e9 99 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d847:	90                   	nop

000000800420d848 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d848:	6a 0c                	pushq  $0xc
  800420d84a:	e9 91 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d84f:	90                   	nop

000000800420d850 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d850:	6a 0d                	pushq  $0xd
  800420d852:	e9 89 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d857:	90                   	nop

000000800420d858 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d858:	6a 0e                	pushq  $0xe
  800420d85a:	e9 81 00 00 00       	jmpq   800420d8e0 <_alltraps>
  800420d85f:	90                   	nop

000000800420d860 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d860:	6a 00                	pushq  $0x0
  800420d862:	6a 10                	pushq  $0x10
  800420d864:	eb 7a                	jmp    800420d8e0 <_alltraps>

000000800420d866 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d866:	6a 11                	pushq  $0x11
  800420d868:	eb 76                	jmp    800420d8e0 <_alltraps>

000000800420d86a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d86a:	6a 00                	pushq  $0x0
  800420d86c:	6a 12                	pushq  $0x12
  800420d86e:	eb 70                	jmp    800420d8e0 <_alltraps>

000000800420d870 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d870:	6a 00                	pushq  $0x0
  800420d872:	6a 20                	pushq  $0x20
  800420d874:	eb 6a                	jmp    800420d8e0 <_alltraps>

000000800420d876 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d876:	6a 00                	pushq  $0x0
  800420d878:	6a 21                	pushq  $0x21
  800420d87a:	eb 64                	jmp    800420d8e0 <_alltraps>

000000800420d87c <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d87c:	6a 00                	pushq  $0x0
  800420d87e:	6a 22                	pushq  $0x22
  800420d880:	eb 5e                	jmp    800420d8e0 <_alltraps>

000000800420d882 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d882:	6a 00                	pushq  $0x0
  800420d884:	6a 23                	pushq  $0x23
  800420d886:	eb 58                	jmp    800420d8e0 <_alltraps>

000000800420d888 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d888:	6a 00                	pushq  $0x0
  800420d88a:	6a 24                	pushq  $0x24
  800420d88c:	eb 52                	jmp    800420d8e0 <_alltraps>

000000800420d88e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d88e:	6a 00                	pushq  $0x0
  800420d890:	6a 25                	pushq  $0x25
  800420d892:	eb 4c                	jmp    800420d8e0 <_alltraps>

000000800420d894 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d894:	6a 00                	pushq  $0x0
  800420d896:	6a 26                	pushq  $0x26
  800420d898:	eb 46                	jmp    800420d8e0 <_alltraps>

000000800420d89a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d89a:	6a 00                	pushq  $0x0
  800420d89c:	6a 27                	pushq  $0x27
  800420d89e:	eb 40                	jmp    800420d8e0 <_alltraps>

000000800420d8a0 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d8a0:	6a 00                	pushq  $0x0
  800420d8a2:	6a 28                	pushq  $0x28
  800420d8a4:	eb 3a                	jmp    800420d8e0 <_alltraps>

000000800420d8a6 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d8a6:	6a 00                	pushq  $0x0
  800420d8a8:	6a 29                	pushq  $0x29
  800420d8aa:	eb 34                	jmp    800420d8e0 <_alltraps>

000000800420d8ac <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d8ac:	6a 00                	pushq  $0x0
  800420d8ae:	6a 2a                	pushq  $0x2a
  800420d8b0:	eb 2e                	jmp    800420d8e0 <_alltraps>

000000800420d8b2 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d8b2:	6a 00                	pushq  $0x0
  800420d8b4:	6a 2b                	pushq  $0x2b
  800420d8b6:	eb 28                	jmp    800420d8e0 <_alltraps>

000000800420d8b8 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d8b8:	6a 00                	pushq  $0x0
  800420d8ba:	6a 2c                	pushq  $0x2c
  800420d8bc:	eb 22                	jmp    800420d8e0 <_alltraps>

000000800420d8be <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d8be:	6a 00                	pushq  $0x0
  800420d8c0:	6a 2d                	pushq  $0x2d
  800420d8c2:	eb 1c                	jmp    800420d8e0 <_alltraps>

000000800420d8c4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d8c4:	6a 00                	pushq  $0x0
  800420d8c6:	6a 2e                	pushq  $0x2e
  800420d8c8:	eb 16                	jmp    800420d8e0 <_alltraps>

000000800420d8ca <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d8ca:	6a 00                	pushq  $0x0
  800420d8cc:	6a 2f                	pushq  $0x2f
  800420d8ce:	eb 10                	jmp    800420d8e0 <_alltraps>

000000800420d8d0 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d8d0:	6a 00                	pushq  $0x0
  800420d8d2:	6a 30                	pushq  $0x30
  800420d8d4:	eb 0a                	jmp    800420d8e0 <_alltraps>

000000800420d8d6 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d8d6:	68 f4 01 00 00       	pushq  $0x1f4
  800420d8db:	eb 03                	jmp    800420d8e0 <_alltraps>
  800420d8dd:	0f 1f 00             	nopl   (%rax)

000000800420d8e0 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d8e0:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d8e4:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d8e8:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d8eb:	48 83 ec 78          	sub    $0x78,%rsp
  800420d8ef:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d8f4:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d8f9:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d8fe:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d903:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d908:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d90d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d912:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d917:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d91c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d921:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d926:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d92b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d930:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d935:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d939:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d93e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d940:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d942:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d944:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d946:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d948:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d94b:	e8 b3 f7 ff ff       	callq  800420d103 <trap>

000000800420d950 <spin>:
spin:	jmp spin
  800420d950:	eb fe                	jmp    800420d950 <spin>

000000800420d952 <xchg>:
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d952:	55                   	push   %rbp
  800420d953:	48 89 e5             	mov    %rsp,%rbp
  800420d956:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d95a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d95e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	__asm __volatile("lock; xchgl %0, %1":
  800420d961:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d965:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d968:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d96c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d96f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return result;
  800420d972:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d975:	c9                   	leaveq 
  800420d976:	c3                   	retq   

000000800420d977 <unlock_kernel>:
  800420d977:	55                   	push   %rbp
  800420d978:	48 89 e5             	mov    %rsp,%rbp
  800420d97b:	48 bf 60 47 23 04 80 	movabs $0x8004234760,%rdi
  800420d982:	00 00 00 
  800420d985:	48 b8 6c 86 21 04 80 	movabs $0x800421866c,%rax
  800420d98c:	00 00 00 
  800420d98f:	ff d0                	callq  *%rax
  800420d991:	f3 90                	pause  
  800420d993:	5d                   	pop    %rbp
  800420d994:	c3                   	retq   

000000800420d995 <vmxon>:
  800420d995:	55                   	push   %rbp
  800420d996:	48 89 e5             	mov    %rsp,%rbp
  800420d999:	48 83 ec 10          	sub    $0x10,%rsp
  800420d99d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420d9a4:	00 00 00 
  800420d9a7:	ff d0                	callq  *%rax
  800420d9a9:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d9b0:	00 00 00 
  800420d9b3:	48 98                	cltq   
  800420d9b5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d9b9:	48 89 c1             	mov    %rax,%rcx
  800420d9bc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d9c0:	48 01 c8             	add    %rcx,%rax
  800420d9c3:	48 01 d0             	add    %rdx,%rax
  800420d9c6:	48 83 c0 70          	add    $0x70,%rax
  800420d9ca:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420d9ce:	83 f0 01             	xor    $0x1,%eax
  800420d9d1:	84 c0                	test   %al,%al
  800420d9d3:	74 5a                	je     800420da2f <vmxon+0x9a>
  800420d9d5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9da:	48 ba df ad 21 04 80 	movabs $0x800421addf,%rdx
  800420d9e1:	00 00 00 
  800420d9e4:	ff d2                	callq  *%rdx
  800420d9e6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9e9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9ed:	79 25                	jns    800420da14 <vmxon+0x7f>
  800420d9ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9f2:	89 c6                	mov    %eax,%esi
  800420d9f4:	48 bf 20 f8 21 04 80 	movabs $0x800421f820,%rdi
  800420d9fb:	00 00 00 
  800420d9fe:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da03:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420da0a:	00 00 00 
  800420da0d:	ff d2                	callq  *%rdx
  800420da0f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da12:	eb 20                	jmp    800420da34 <vmxon+0x9f>
  800420da14:	48 bf 3b f8 21 04 80 	movabs $0x800421f83b,%rdi
  800420da1b:	00 00 00 
  800420da1e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da23:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420da2a:	00 00 00 
  800420da2d:	ff d2                	callq  *%rdx
  800420da2f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da34:	c9                   	leaveq 
  800420da35:	c3                   	retq   

000000800420da36 <sched_yield>:
  800420da36:	55                   	push   %rbp
  800420da37:	48 89 e5             	mov    %rsp,%rbp
  800420da3a:	53                   	push   %rbx
  800420da3b:	48 83 ec 28          	sub    $0x28,%rsp
  800420da3f:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420da46:	00 00 00 
  800420da49:	ff d0                	callq  *%rax
  800420da4b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420da52:	00 00 00 
  800420da55:	48 98                	cltq   
  800420da57:	48 c1 e0 03          	shl    $0x3,%rax
  800420da5b:	48 89 c1             	mov    %rax,%rcx
  800420da5e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da62:	48 01 c8             	add    %rcx,%rax
  800420da65:	48 01 d0             	add    %rdx,%rax
  800420da68:	48 83 c0 08          	add    $0x8,%rax
  800420da6c:	48 8b 00             	mov    (%rax),%rax
  800420da6f:	48 85 c0             	test   %rax,%rax
  800420da72:	74 60                	je     800420dad4 <sched_yield+0x9e>
  800420da74:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420da7b:	00 00 00 
  800420da7e:	ff d0                	callq  *%rax
  800420da80:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420da87:	00 00 00 
  800420da8a:	48 98                	cltq   
  800420da8c:	48 c1 e0 03          	shl    $0x3,%rax
  800420da90:	48 89 c1             	mov    %rax,%rcx
  800420da93:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da97:	48 01 c8             	add    %rcx,%rax
  800420da9a:	48 01 d0             	add    %rdx,%rax
  800420da9d:	48 83 c0 08          	add    $0x8,%rax
  800420daa1:	48 8b 00             	mov    (%rax),%rax
  800420daa4:	48 89 c2             	mov    %rax,%rdx
  800420daa7:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420daae:	00 00 00 
  800420dab1:	48 8b 00             	mov    (%rax),%rax
  800420dab4:	48 29 c2             	sub    %rax,%rdx
  800420dab7:	48 89 d0             	mov    %rdx,%rax
  800420daba:	48 c1 f8 03          	sar    $0x3,%rax
  800420dabe:	48 89 c2             	mov    %rax,%rdx
  800420dac1:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420dac8:	fa a4 4f 
  800420dacb:	48 0f af c2          	imul   %rdx,%rax
  800420dacf:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dad2:	eb 07                	jmp    800420dadb <sched_yield+0xa5>
  800420dad4:	c7 45 ec ff 03 00 00 	movl   $0x3ff,-0x14(%rbp)
  800420dadb:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  800420dae2:	e9 1b 01 00 00       	jmpq   800420dc02 <sched_yield+0x1cc>
  800420dae7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420daea:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420daed:	01 c2                	add    %eax,%edx
  800420daef:	89 d0                	mov    %edx,%eax
  800420daf1:	c1 f8 1f             	sar    $0x1f,%eax
  800420daf4:	c1 e8 16             	shr    $0x16,%eax
  800420daf7:	01 c2                	add    %eax,%edx
  800420daf9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420daff:	29 c2                	sub    %eax,%edx
  800420db01:	89 d0                	mov    %edx,%eax
  800420db03:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420db06:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420db0d:	00 00 00 
  800420db10:	48 8b 10             	mov    (%rax),%rdx
  800420db13:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db16:	48 98                	cltq   
  800420db18:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db1f:	48 01 d0             	add    %rdx,%rax
  800420db22:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db28:	83 f8 02             	cmp    $0x2,%eax
  800420db2b:	0f 85 cd 00 00 00    	jne    800420dbfe <sched_yield+0x1c8>
  800420db31:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420db38:	00 00 00 
  800420db3b:	48 8b 10             	mov    (%rax),%rdx
  800420db3e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db41:	48 98                	cltq   
  800420db43:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db4a:	48 01 d0             	add    %rdx,%rax
  800420db4d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420db53:	83 f8 03             	cmp    $0x3,%eax
  800420db56:	75 7b                	jne    800420dbd3 <sched_yield+0x19d>
  800420db58:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420db5f:	00 00 00 
  800420db62:	48 8b 10             	mov    (%rax),%rdx
  800420db65:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db68:	48 98                	cltq   
  800420db6a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db71:	48 01 d0             	add    %rdx,%rax
  800420db74:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420db7a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420db81:	00 00 00 
  800420db84:	ff d0                	callq  *%rax
  800420db86:	39 c3                	cmp    %eax,%ebx
  800420db88:	74 02                	je     800420db8c <sched_yield+0x156>
  800420db8a:	eb 72                	jmp    800420dbfe <sched_yield+0x1c8>
  800420db8c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420db91:	48 ba 95 d9 20 04 80 	movabs $0x800420d995,%rdx
  800420db98:	00 00 00 
  800420db9b:	ff d2                	callq  *%rdx
  800420db9d:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dba0:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dba4:	79 2d                	jns    800420dbd3 <sched_yield+0x19d>
  800420dba6:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420dbad:	00 00 00 
  800420dbb0:	48 8b 10             	mov    (%rax),%rdx
  800420dbb3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dbb6:	48 98                	cltq   
  800420dbb8:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbbf:	48 01 d0             	add    %rdx,%rax
  800420dbc2:	48 89 c7             	mov    %rax,%rdi
  800420dbc5:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  800420dbcc:	00 00 00 
  800420dbcf:	ff d0                	callq  *%rax
  800420dbd1:	eb 2b                	jmp    800420dbfe <sched_yield+0x1c8>
  800420dbd3:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420dbda:	00 00 00 
  800420dbdd:	48 8b 10             	mov    (%rax),%rdx
  800420dbe0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dbe3:	48 98                	cltq   
  800420dbe5:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbec:	48 01 d0             	add    %rdx,%rax
  800420dbef:	48 89 c7             	mov    %rax,%rdi
  800420dbf2:	48 b8 fa 96 20 04 80 	movabs $0x80042096fa,%rax
  800420dbf9:	00 00 00 
  800420dbfc:	ff d0                	callq  *%rax
  800420dbfe:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420dc02:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%rbp)
  800420dc09:	0f 8e d8 fe ff ff    	jle    800420dae7 <sched_yield+0xb1>
  800420dc0f:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420dc16:	00 00 00 
  800420dc19:	ff d0                	callq  *%rax
  800420dc1b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dc22:	00 00 00 
  800420dc25:	48 98                	cltq   
  800420dc27:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc2b:	48 89 c1             	mov    %rax,%rcx
  800420dc2e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc32:	48 01 c8             	add    %rcx,%rax
  800420dc35:	48 01 d0             	add    %rdx,%rax
  800420dc38:	48 83 c0 08          	add    $0x8,%rax
  800420dc3c:	48 8b 00             	mov    (%rax),%rax
  800420dc3f:	48 85 c0             	test   %rax,%rax
  800420dc42:	0f 84 61 01 00 00    	je     800420dda9 <sched_yield+0x373>
  800420dc48:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420dc4f:	00 00 00 
  800420dc52:	ff d0                	callq  *%rax
  800420dc54:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dc5b:	00 00 00 
  800420dc5e:	48 98                	cltq   
  800420dc60:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc64:	48 89 c1             	mov    %rax,%rcx
  800420dc67:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc6b:	48 01 c8             	add    %rcx,%rax
  800420dc6e:	48 01 d0             	add    %rdx,%rax
  800420dc71:	48 83 c0 08          	add    $0x8,%rax
  800420dc75:	48 8b 00             	mov    (%rax),%rax
  800420dc78:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc7e:	83 f8 03             	cmp    $0x3,%eax
  800420dc81:	0f 85 22 01 00 00    	jne    800420dda9 <sched_yield+0x373>
  800420dc87:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420dc8e:	00 00 00 
  800420dc91:	ff d0                	callq  *%rax
  800420dc93:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dc9a:	00 00 00 
  800420dc9d:	48 98                	cltq   
  800420dc9f:	48 c1 e0 03          	shl    $0x3,%rax
  800420dca3:	48 89 c1             	mov    %rax,%rcx
  800420dca6:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dcaa:	48 01 c8             	add    %rcx,%rax
  800420dcad:	48 01 d0             	add    %rdx,%rax
  800420dcb0:	48 83 c0 08          	add    $0x8,%rax
  800420dcb4:	48 8b 00             	mov    (%rax),%rax
  800420dcb7:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420dcbd:	83 f8 03             	cmp    $0x3,%eax
  800420dcc0:	0f 85 a4 00 00 00    	jne    800420dd6a <sched_yield+0x334>
  800420dcc6:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420dccd:	00 00 00 
  800420dcd0:	ff d0                	callq  *%rax
  800420dcd2:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dcd9:	00 00 00 
  800420dcdc:	48 98                	cltq   
  800420dcde:	48 c1 e0 03          	shl    $0x3,%rax
  800420dce2:	48 89 c1             	mov    %rax,%rcx
  800420dce5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dce9:	48 01 c8             	add    %rcx,%rax
  800420dcec:	48 01 d0             	add    %rdx,%rax
  800420dcef:	48 83 c0 08          	add    $0x8,%rax
  800420dcf3:	48 8b 00             	mov    (%rax),%rax
  800420dcf6:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420dcfc:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420dd03:	00 00 00 
  800420dd06:	ff d0                	callq  *%rax
  800420dd08:	39 c3                	cmp    %eax,%ebx
  800420dd0a:	74 05                	je     800420dd11 <sched_yield+0x2db>
  800420dd0c:	e9 a4 00 00 00       	jmpq   800420ddb5 <sched_yield+0x37f>
  800420dd11:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dd16:	48 ba 95 d9 20 04 80 	movabs $0x800420d995,%rdx
  800420dd1d:	00 00 00 
  800420dd20:	ff d2                	callq  *%rdx
  800420dd22:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420dd25:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420dd29:	79 3f                	jns    800420dd6a <sched_yield+0x334>
  800420dd2b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420dd32:	00 00 00 
  800420dd35:	ff d0                	callq  *%rax
  800420dd37:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dd3e:	00 00 00 
  800420dd41:	48 98                	cltq   
  800420dd43:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd47:	48 89 c1             	mov    %rax,%rcx
  800420dd4a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd4e:	48 01 c8             	add    %rcx,%rax
  800420dd51:	48 01 d0             	add    %rdx,%rax
  800420dd54:	48 83 c0 08          	add    $0x8,%rax
  800420dd58:	48 8b 00             	mov    (%rax),%rax
  800420dd5b:	48 89 c7             	mov    %rax,%rdi
  800420dd5e:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  800420dd65:	00 00 00 
  800420dd68:	ff d0                	callq  *%rax
  800420dd6a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420dd71:	00 00 00 
  800420dd74:	ff d0                	callq  *%rax
  800420dd76:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dd7d:	00 00 00 
  800420dd80:	48 98                	cltq   
  800420dd82:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd86:	48 89 c1             	mov    %rax,%rcx
  800420dd89:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd8d:	48 01 c8             	add    %rcx,%rax
  800420dd90:	48 01 d0             	add    %rdx,%rax
  800420dd93:	48 83 c0 08          	add    $0x8,%rax
  800420dd97:	48 8b 00             	mov    (%rax),%rax
  800420dd9a:	48 89 c7             	mov    %rax,%rdi
  800420dd9d:	48 b8 fa 96 20 04 80 	movabs $0x80042096fa,%rax
  800420dda4:	00 00 00 
  800420dda7:	ff d0                	callq  *%rax
  800420dda9:	48 b8 bc dd 20 04 80 	movabs $0x800420ddbc,%rax
  800420ddb0:	00 00 00 
  800420ddb3:	ff d0                	callq  *%rax
  800420ddb5:	48 83 c4 28          	add    $0x28,%rsp
  800420ddb9:	5b                   	pop    %rbx
  800420ddba:	5d                   	pop    %rbp
  800420ddbb:	c3                   	retq   

000000800420ddbc <sched_halt>:
  800420ddbc:	55                   	push   %rbp
  800420ddbd:	48 89 e5             	mov    %rsp,%rbp
  800420ddc0:	48 83 ec 20          	sub    $0x20,%rsp
  800420ddc4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420ddcb:	eb 79                	jmp    800420de46 <sched_halt+0x8a>
  800420ddcd:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420ddd4:	00 00 00 
  800420ddd7:	48 8b 10             	mov    (%rax),%rdx
  800420ddda:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dddd:	48 98                	cltq   
  800420dddf:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dde6:	48 01 d0             	add    %rdx,%rax
  800420dde9:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420ddef:	83 f8 02             	cmp    $0x2,%eax
  800420ddf2:	74 5f                	je     800420de53 <sched_halt+0x97>
  800420ddf4:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420ddfb:	00 00 00 
  800420ddfe:	48 8b 10             	mov    (%rax),%rdx
  800420de01:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de04:	48 98                	cltq   
  800420de06:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de0d:	48 01 d0             	add    %rdx,%rax
  800420de10:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de16:	83 f8 03             	cmp    $0x3,%eax
  800420de19:	74 38                	je     800420de53 <sched_halt+0x97>
  800420de1b:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420de22:	00 00 00 
  800420de25:	48 8b 10             	mov    (%rax),%rdx
  800420de28:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de2b:	48 98                	cltq   
  800420de2d:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de34:	48 01 d0             	add    %rdx,%rax
  800420de37:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de3d:	83 f8 01             	cmp    $0x1,%eax
  800420de40:	74 11                	je     800420de53 <sched_halt+0x97>
  800420de42:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420de46:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420de4d:	0f 8e 7a ff ff ff    	jle    800420ddcd <sched_halt+0x11>
  800420de53:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420de5a:	75 2e                	jne    800420de8a <sched_halt+0xce>
  800420de5c:	48 bf 48 f8 21 04 80 	movabs $0x800421f848,%rdi
  800420de63:	00 00 00 
  800420de66:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de6b:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420de72:	00 00 00 
  800420de75:	ff d2                	callq  *%rdx
  800420de77:	bf 00 00 00 00       	mov    $0x0,%edi
  800420de7c:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420de83:	00 00 00 
  800420de86:	ff d0                	callq  *%rax
  800420de88:	eb ed                	jmp    800420de77 <sched_halt+0xbb>
  800420de8a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420de91:	00 00 00 
  800420de94:	ff d0                	callq  *%rax
  800420de96:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420de9d:	00 00 00 
  800420dea0:	48 98                	cltq   
  800420dea2:	48 c1 e0 03          	shl    $0x3,%rax
  800420dea6:	48 89 c1             	mov    %rax,%rcx
  800420dea9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dead:	48 01 c8             	add    %rcx,%rax
  800420deb0:	48 01 d0             	add    %rdx,%rax
  800420deb3:	48 83 c0 08          	add    $0x8,%rax
  800420deb7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420debe:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420dec5:	00 00 00 
  800420dec8:	48 8b 00             	mov    (%rax),%rax
  800420decb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420decf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420ded6:	00 00 00 
  800420ded9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420dedd:	77 32                	ja     800420df11 <sched_halt+0x155>
  800420dedf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dee3:	48 89 c1             	mov    %rax,%rcx
  800420dee6:	48 ba 78 f8 21 04 80 	movabs $0x800421f878,%rdx
  800420deed:	00 00 00 
  800420def0:	be 88 00 00 00       	mov    $0x88,%esi
  800420def5:	48 bf 9c f8 21 04 80 	movabs $0x800421f89c,%rdi
  800420defc:	00 00 00 
  800420deff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df04:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420df0b:	00 00 00 
  800420df0e:	41 ff d0             	callq  *%r8
  800420df11:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420df18:	ff ff ff 
  800420df1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420df1f:	48 01 d0             	add    %rdx,%rax
  800420df22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420df26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420df2a:	0f 22 d8             	mov    %rax,%cr3
  800420df2d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420df34:	00 00 00 
  800420df37:	ff d0                	callq  *%rax
  800420df39:	48 98                	cltq   
  800420df3b:	48 c1 e0 03          	shl    $0x3,%rax
  800420df3f:	48 89 c2             	mov    %rax,%rdx
  800420df42:	48 c1 e2 04          	shl    $0x4,%rdx
  800420df46:	48 01 d0             	add    %rdx,%rax
  800420df49:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420df50:	00 00 00 
  800420df53:	48 01 d0             	add    %rdx,%rax
  800420df56:	48 83 c0 04          	add    $0x4,%rax
  800420df5a:	be 02 00 00 00       	mov    $0x2,%esi
  800420df5f:	48 89 c7             	mov    %rax,%rdi
  800420df62:	48 b8 52 d9 20 04 80 	movabs $0x800420d952,%rax
  800420df69:	00 00 00 
  800420df6c:	ff d0                	callq  *%rax
  800420df6e:	48 b8 77 d9 20 04 80 	movabs $0x800420d977,%rax
  800420df75:	00 00 00 
  800420df78:	ff d0                	callq  *%rax
  800420df7a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420df81:	00 00 00 
  800420df84:	ff d0                	callq  *%rax
  800420df86:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420df8d:	00 00 00 
  800420df90:	48 98                	cltq   
  800420df92:	48 c1 e0 03          	shl    $0x3,%rax
  800420df96:	48 89 c1             	mov    %rax,%rcx
  800420df99:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df9d:	48 01 c8             	add    %rcx,%rax
  800420dfa0:	48 01 d0             	add    %rdx,%rax
  800420dfa3:	48 83 c0 10          	add    $0x10,%rax
  800420dfa7:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420dfab:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420dfb2:	48 89 c4             	mov    %rax,%rsp
  800420dfb5:	6a 00                	pushq  $0x0
  800420dfb7:	6a 00                	pushq  $0x0
  800420dfb9:	fb                   	sti    
  800420dfba:	f4                   	hlt    
  800420dfbb:	c9                   	leaveq 
  800420dfbc:	c3                   	retq   

000000800420dfbd <page2ppn>:
  800420dfbd:	55                   	push   %rbp
  800420dfbe:	48 89 e5             	mov    %rsp,%rbp
  800420dfc1:	48 83 ec 08          	sub    $0x8,%rsp
  800420dfc5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420dfc9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420dfcd:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800420dfd4:	00 00 00 
  800420dfd7:	48 8b 00             	mov    (%rax),%rax
  800420dfda:	48 29 c2             	sub    %rax,%rdx
  800420dfdd:	48 89 d0             	mov    %rdx,%rax
  800420dfe0:	48 c1 f8 04          	sar    $0x4,%rax
  800420dfe4:	c9                   	leaveq 
  800420dfe5:	c3                   	retq   

000000800420dfe6 <page2pa>:
  800420dfe6:	55                   	push   %rbp
  800420dfe7:	48 89 e5             	mov    %rsp,%rbp
  800420dfea:	48 83 ec 08          	sub    $0x8,%rsp
  800420dfee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420dff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420dff6:	48 89 c7             	mov    %rax,%rdi
  800420dff9:	48 b8 bd df 20 04 80 	movabs $0x800420dfbd,%rax
  800420e000:	00 00 00 
  800420e003:	ff d0                	callq  *%rax
  800420e005:	48 c1 e0 0c          	shl    $0xc,%rax
  800420e009:	c9                   	leaveq 
  800420e00a:	c3                   	retq   

000000800420e00b <pa2page>:
  800420e00b:	55                   	push   %rbp
  800420e00c:	48 89 e5             	mov    %rsp,%rbp
  800420e00f:	48 83 ec 10          	sub    $0x10,%rsp
  800420e013:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e01b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420e01f:	48 89 c2             	mov    %rax,%rdx
  800420e022:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420e029:	00 00 00 
  800420e02c:	48 8b 00             	mov    (%rax),%rax
  800420e02f:	48 39 c2             	cmp    %rax,%rdx
  800420e032:	72 2a                	jb     800420e05e <pa2page+0x53>
  800420e034:	48 ba b0 f8 21 04 80 	movabs $0x800421f8b0,%rdx
  800420e03b:	00 00 00 
  800420e03e:	be 5b 00 00 00       	mov    $0x5b,%esi
  800420e043:	48 bf cf f8 21 04 80 	movabs $0x800421f8cf,%rdi
  800420e04a:	00 00 00 
  800420e04d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e052:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420e059:	00 00 00 
  800420e05c:	ff d1                	callq  *%rcx
  800420e05e:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800420e065:	00 00 00 
  800420e068:	48 8b 00             	mov    (%rax),%rax
  800420e06b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e06f:	48 c1 ea 0c          	shr    $0xc,%rdx
  800420e073:	48 c1 e2 04          	shl    $0x4,%rdx
  800420e077:	48 01 d0             	add    %rdx,%rax
  800420e07a:	c9                   	leaveq 
  800420e07b:	c3                   	retq   

000000800420e07c <page2kva>:
  800420e07c:	55                   	push   %rbp
  800420e07d:	48 89 e5             	mov    %rsp,%rbp
  800420e080:	48 83 ec 20          	sub    $0x20,%rsp
  800420e084:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420e088:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e08c:	48 89 c7             	mov    %rax,%rdi
  800420e08f:	48 b8 e6 df 20 04 80 	movabs $0x800420dfe6,%rax
  800420e096:	00 00 00 
  800420e099:	ff d0                	callq  *%rax
  800420e09b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420e09f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e0a3:	48 c1 e8 0c          	shr    $0xc,%rax
  800420e0a7:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420e0aa:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420e0ad:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420e0b4:	00 00 00 
  800420e0b7:	48 8b 00             	mov    (%rax),%rax
  800420e0ba:	48 39 c2             	cmp    %rax,%rdx
  800420e0bd:	72 32                	jb     800420e0f1 <page2kva+0x75>
  800420e0bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e0c3:	48 89 c1             	mov    %rax,%rcx
  800420e0c6:	48 ba e0 f8 21 04 80 	movabs $0x800421f8e0,%rdx
  800420e0cd:	00 00 00 
  800420e0d0:	be 62 00 00 00       	mov    $0x62,%esi
  800420e0d5:	48 bf cf f8 21 04 80 	movabs $0x800421f8cf,%rdi
  800420e0dc:	00 00 00 
  800420e0df:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e0e4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420e0eb:	00 00 00 
  800420e0ee:	41 ff d0             	callq  *%r8
  800420e0f1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420e0f8:	00 00 00 
  800420e0fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e0ff:	48 01 d0             	add    %rdx,%rax
  800420e102:	c9                   	leaveq 
  800420e103:	c3                   	retq   

000000800420e104 <sys_cputs>:
  800420e104:	55                   	push   %rbp
  800420e105:	48 89 e5             	mov    %rsp,%rbp
  800420e108:	48 83 ec 10          	sub    $0x10,%rsp
  800420e10c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e110:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e114:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e11b:	00 00 00 
  800420e11e:	ff d0                	callq  *%rax
  800420e120:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e127:	00 00 00 
  800420e12a:	48 98                	cltq   
  800420e12c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e130:	48 89 c1             	mov    %rax,%rcx
  800420e133:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e137:	48 01 c8             	add    %rcx,%rax
  800420e13a:	48 01 d0             	add    %rdx,%rax
  800420e13d:	48 83 c0 08          	add    $0x8,%rax
  800420e141:	48 8b 00             	mov    (%rax),%rax
  800420e144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e148:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e14c:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e151:	48 89 c7             	mov    %rax,%rdi
  800420e154:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e15b:	00 00 00 
  800420e15e:	ff d0                	callq  *%rax
  800420e160:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e164:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e168:	48 89 c6             	mov    %rax,%rsi
  800420e16b:	48 bf 03 f9 21 04 80 	movabs $0x800421f903,%rdi
  800420e172:	00 00 00 
  800420e175:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e17a:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800420e181:	00 00 00 
  800420e184:	ff d1                	callq  *%rcx
  800420e186:	c9                   	leaveq 
  800420e187:	c3                   	retq   

000000800420e188 <sys_cgetc>:
  800420e188:	55                   	push   %rbp
  800420e189:	48 89 e5             	mov    %rsp,%rbp
  800420e18c:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  800420e193:	00 00 00 
  800420e196:	ff d0                	callq  *%rax
  800420e198:	5d                   	pop    %rbp
  800420e199:	c3                   	retq   

000000800420e19a <sys_getenvid>:
  800420e19a:	55                   	push   %rbp
  800420e19b:	48 89 e5             	mov    %rsp,%rbp
  800420e19e:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e1a5:	00 00 00 
  800420e1a8:	ff d0                	callq  *%rax
  800420e1aa:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e1b1:	00 00 00 
  800420e1b4:	48 98                	cltq   
  800420e1b6:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1ba:	48 89 c1             	mov    %rax,%rcx
  800420e1bd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1c1:	48 01 c8             	add    %rcx,%rax
  800420e1c4:	48 01 d0             	add    %rdx,%rax
  800420e1c7:	48 83 c0 08          	add    $0x8,%rax
  800420e1cb:	48 8b 00             	mov    (%rax),%rax
  800420e1ce:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e1d4:	5d                   	pop    %rbp
  800420e1d5:	c3                   	retq   

000000800420e1d6 <sys_env_destroy>:
  800420e1d6:	55                   	push   %rbp
  800420e1d7:	48 89 e5             	mov    %rsp,%rbp
  800420e1da:	48 83 ec 20          	sub    $0x20,%rsp
  800420e1de:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e1e1:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e1e5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e1e8:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e1ed:	48 89 ce             	mov    %rcx,%rsi
  800420e1f0:	89 c7                	mov    %eax,%edi
  800420e1f2:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e1f9:	00 00 00 
  800420e1fc:	ff d0                	callq  *%rax
  800420e1fe:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e201:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e205:	79 05                	jns    800420e20c <sys_env_destroy+0x36>
  800420e207:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e20a:	eb 18                	jmp    800420e224 <sys_env_destroy+0x4e>
  800420e20c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e210:	48 89 c7             	mov    %rax,%rdi
  800420e213:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  800420e21a:	00 00 00 
  800420e21d:	ff d0                	callq  *%rax
  800420e21f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e224:	c9                   	leaveq 
  800420e225:	c3                   	retq   

000000800420e226 <sys_yield>:
  800420e226:	55                   	push   %rbp
  800420e227:	48 89 e5             	mov    %rsp,%rbp
  800420e22a:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  800420e231:	00 00 00 
  800420e234:	ff d0                	callq  *%rax

000000800420e236 <sys_exofork>:
  800420e236:	55                   	push   %rbp
  800420e237:	48 89 e5             	mov    %rsp,%rbp
  800420e23a:	53                   	push   %rbx
  800420e23b:	48 83 ec 18          	sub    $0x18,%rsp
  800420e23f:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e246:	00 00 00 
  800420e249:	ff d0                	callq  *%rax
  800420e24b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e252:	00 00 00 
  800420e255:	48 98                	cltq   
  800420e257:	48 c1 e0 03          	shl    $0x3,%rax
  800420e25b:	48 89 c1             	mov    %rax,%rcx
  800420e25e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e262:	48 01 c8             	add    %rcx,%rax
  800420e265:	48 01 d0             	add    %rdx,%rax
  800420e268:	48 83 c0 08          	add    $0x8,%rax
  800420e26c:	48 8b 00             	mov    (%rax),%rax
  800420e26f:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420e275:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420e279:	89 d6                	mov    %edx,%esi
  800420e27b:	48 89 c7             	mov    %rax,%rdi
  800420e27e:	48 b8 5f 89 20 04 80 	movabs $0x800420895f,%rax
  800420e285:	00 00 00 
  800420e288:	ff d0                	callq  *%rax
  800420e28a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e28d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e291:	79 05                	jns    800420e298 <sys_exofork+0x62>
  800420e293:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e296:	eb 6c                	jmp    800420e304 <sys_exofork+0xce>
  800420e298:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e29c:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e2a3:	00 00 00 
  800420e2a6:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420e2aa:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e2b1:	00 00 00 
  800420e2b4:	ff d0                	callq  *%rax
  800420e2b6:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e2bd:	00 00 00 
  800420e2c0:	48 98                	cltq   
  800420e2c2:	48 c1 e0 03          	shl    $0x3,%rax
  800420e2c6:	48 89 c1             	mov    %rax,%rcx
  800420e2c9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e2cd:	48 01 c8             	add    %rcx,%rax
  800420e2d0:	48 01 d0             	add    %rdx,%rax
  800420e2d3:	48 83 c0 08          	add    $0x8,%rax
  800420e2d7:	48 8b 00             	mov    (%rax),%rax
  800420e2da:	48 89 da             	mov    %rbx,%rdx
  800420e2dd:	48 89 c6             	mov    %rax,%rsi
  800420e2e0:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e2e5:	48 89 d7             	mov    %rdx,%rdi
  800420e2e8:	48 89 c1             	mov    %rax,%rcx
  800420e2eb:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420e2ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e2f2:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e2f9:	00 
  800420e2fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e2fe:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e304:	48 83 c4 18          	add    $0x18,%rsp
  800420e308:	5b                   	pop    %rbx
  800420e309:	5d                   	pop    %rbp
  800420e30a:	c3                   	retq   

000000800420e30b <sys_env_set_status>:
  800420e30b:	55                   	push   %rbp
  800420e30c:	48 89 e5             	mov    %rsp,%rbp
  800420e30f:	48 83 ec 20          	sub    $0x20,%rsp
  800420e313:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e316:	89 75 e8             	mov    %esi,-0x18(%rbp)
  800420e319:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e31d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e320:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e325:	48 89 ce             	mov    %rcx,%rsi
  800420e328:	89 c7                	mov    %eax,%edi
  800420e32a:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e331:	00 00 00 
  800420e334:	ff d0                	callq  *%rax
  800420e336:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e339:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e33d:	79 05                	jns    800420e344 <sys_env_set_status+0x39>
  800420e33f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e342:	eb 25                	jmp    800420e369 <sys_env_set_status+0x5e>
  800420e344:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420e348:	74 0d                	je     800420e357 <sys_env_set_status+0x4c>
  800420e34a:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420e34e:	74 07                	je     800420e357 <sys_env_set_status+0x4c>
  800420e350:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e355:	eb 12                	jmp    800420e369 <sys_env_set_status+0x5e>
  800420e357:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e35b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420e35e:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
  800420e364:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e369:	c9                   	leaveq 
  800420e36a:	c3                   	retq   

000000800420e36b <sys_env_set_trapframe>:
  800420e36b:	55                   	push   %rbp
  800420e36c:	48 89 e5             	mov    %rsp,%rbp
  800420e36f:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e376:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e37c:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420e383:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e38a:	00 00 00 
  800420e38d:	ff d0                	callq  *%rax
  800420e38f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e396:	00 00 00 
  800420e399:	48 98                	cltq   
  800420e39b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e39f:	48 89 c1             	mov    %rax,%rcx
  800420e3a2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e3a6:	48 01 c8             	add    %rcx,%rax
  800420e3a9:	48 01 d0             	add    %rdx,%rax
  800420e3ac:	48 83 c0 08          	add    $0x8,%rax
  800420e3b0:	48 8b 00             	mov    (%rax),%rax
  800420e3b3:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e3ba:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e3bf:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e3c4:	48 89 c7             	mov    %rax,%rdi
  800420e3c7:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e3ce:	00 00 00 
  800420e3d1:	ff d0                	callq  *%rax
  800420e3d3:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e3da:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e3e1:	48 89 c6             	mov    %rax,%rsi
  800420e3e4:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e3e9:	48 89 d7             	mov    %rdx,%rdi
  800420e3ec:	48 89 c1             	mov    %rax,%rcx
  800420e3ef:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420e3f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e3f6:	80 cc 02             	or     $0x2,%ah
  800420e3f9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e3fd:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e401:	83 c8 03             	or     $0x3,%eax
  800420e404:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  800420e408:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e40c:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e412:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e417:	48 89 ce             	mov    %rcx,%rsi
  800420e41a:	89 c7                	mov    %eax,%edi
  800420e41c:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e423:	00 00 00 
  800420e426:	ff d0                	callq  *%rax
  800420e428:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e42b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e42f:	79 05                	jns    800420e436 <sys_env_set_trapframe+0xcb>
  800420e431:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e434:	eb 21                	jmp    800420e457 <sys_env_set_trapframe+0xec>
  800420e436:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e43a:	48 89 c2             	mov    %rax,%rdx
  800420e43d:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e444:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e449:	48 89 d7             	mov    %rdx,%rdi
  800420e44c:	48 89 c1             	mov    %rax,%rcx
  800420e44f:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420e452:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e457:	c9                   	leaveq 
  800420e458:	c3                   	retq   

000000800420e459 <sys_env_set_pgfault_upcall>:
  800420e459:	55                   	push   %rbp
  800420e45a:	48 89 e5             	mov    %rsp,%rbp
  800420e45d:	48 83 ec 20          	sub    $0x20,%rsp
  800420e461:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e464:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420e468:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e46c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e46f:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e474:	48 89 ce             	mov    %rcx,%rsi
  800420e477:	89 c7                	mov    %eax,%edi
  800420e479:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e480:	00 00 00 
  800420e483:	ff d0                	callq  *%rax
  800420e485:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e488:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e48c:	79 05                	jns    800420e493 <sys_env_set_pgfault_upcall+0x3a>
  800420e48e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e491:	eb 14                	jmp    800420e4a7 <sys_env_set_pgfault_upcall+0x4e>
  800420e493:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e497:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e49b:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
  800420e4a2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e4a7:	c9                   	leaveq 
  800420e4a8:	c3                   	retq   

000000800420e4a9 <sys_page_alloc>:
  800420e4a9:	55                   	push   %rbp
  800420e4aa:	48 89 e5             	mov    %rsp,%rbp
  800420e4ad:	48 83 ec 30          	sub    $0x30,%rsp
  800420e4b1:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e4b4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e4b8:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800420e4bb:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e4bf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e4c2:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e4c7:	48 89 ce             	mov    %rcx,%rsi
  800420e4ca:	89 c7                	mov    %eax,%edi
  800420e4cc:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e4d3:	00 00 00 
  800420e4d6:	ff d0                	callq  *%rax
  800420e4d8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e4db:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e4df:	79 08                	jns    800420e4e9 <sys_page_alloc+0x40>
  800420e4e1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e4e4:	e9 a7 00 00 00       	jmpq   800420e590 <sys_page_alloc+0xe7>
  800420e4e9:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e4ec:	f7 d0                	not    %eax
  800420e4ee:	83 e0 05             	and    $0x5,%eax
  800420e4f1:	85 c0                	test   %eax,%eax
  800420e4f3:	75 0c                	jne    800420e501 <sys_page_alloc+0x58>
  800420e4f5:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e4f8:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e4fd:	85 c0                	test   %eax,%eax
  800420e4ff:	74 0a                	je     800420e50b <sys_page_alloc+0x62>
  800420e501:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e506:	e9 85 00 00 00       	jmpq   800420e590 <sys_page_alloc+0xe7>
  800420e50b:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e512:	00 00 00 
  800420e515:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e519:	76 07                	jbe    800420e522 <sys_page_alloc+0x79>
  800420e51b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e520:	eb 6e                	jmp    800420e590 <sys_page_alloc+0xe7>
  800420e522:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e527:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420e52e:	00 00 00 
  800420e531:	ff d0                	callq  *%rax
  800420e533:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e537:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e53c:	75 07                	jne    800420e545 <sys_page_alloc+0x9c>
  800420e53e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e543:	eb 4b                	jmp    800420e590 <sys_page_alloc+0xe7>
  800420e545:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e549:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e550:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e553:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e557:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e55b:	48 89 c7             	mov    %rax,%rdi
  800420e55e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e565:	00 00 00 
  800420e568:	ff d0                	callq  *%rax
  800420e56a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e56d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e571:	79 18                	jns    800420e58b <sys_page_alloc+0xe2>
  800420e573:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e577:	48 89 c7             	mov    %rax,%rdi
  800420e57a:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420e581:	00 00 00 
  800420e584:	ff d0                	callq  *%rax
  800420e586:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e589:	eb 05                	jmp    800420e590 <sys_page_alloc+0xe7>
  800420e58b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e590:	c9                   	leaveq 
  800420e591:	c3                   	retq   

000000800420e592 <sys_page_map>:
  800420e592:	55                   	push   %rbp
  800420e593:	48 89 e5             	mov    %rsp,%rbp
  800420e596:	48 83 ec 60          	sub    $0x60,%rsp
  800420e59a:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e59d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e5a1:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e5a4:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e5a8:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
  800420e5ac:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e5b3:	00 00 00 
  800420e5b6:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e5ba:	77 10                	ja     800420e5cc <sys_page_map+0x3a>
  800420e5bc:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e5c3:	00 00 00 
  800420e5c6:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e5ca:	76 0a                	jbe    800420e5d6 <sys_page_map+0x44>
  800420e5cc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e5d1:	e9 3f 01 00 00       	jmpq   800420e715 <sys_page_map+0x183>
  800420e5d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e5da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e5de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e5e2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e5e8:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e5ec:	75 18                	jne    800420e606 <sys_page_map+0x74>
  800420e5ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e5f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e5f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e5fa:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e600:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e604:	74 0a                	je     800420e610 <sys_page_map+0x7e>
  800420e606:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e60b:	e9 05 01 00 00       	jmpq   800420e715 <sys_page_map+0x183>
  800420e610:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e614:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e617:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e61c:	48 89 ce             	mov    %rcx,%rsi
  800420e61f:	89 c7                	mov    %eax,%edi
  800420e621:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e628:	00 00 00 
  800420e62b:	ff d0                	callq  *%rax
  800420e62d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e630:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e634:	78 26                	js     800420e65c <sys_page_map+0xca>
  800420e636:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e63a:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e63d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e642:	48 89 ce             	mov    %rcx,%rsi
  800420e645:	89 c7                	mov    %eax,%edi
  800420e647:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e64e:	00 00 00 
  800420e651:	ff d0                	callq  *%rax
  800420e653:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e656:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e65a:	79 08                	jns    800420e664 <sys_page_map+0xd2>
  800420e65c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e65f:	e9 b1 00 00 00       	jmpq   800420e715 <sys_page_map+0x183>
  800420e664:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e667:	f7 d0                	not    %eax
  800420e669:	83 e0 05             	and    $0x5,%eax
  800420e66c:	85 c0                	test   %eax,%eax
  800420e66e:	75 0c                	jne    800420e67c <sys_page_map+0xea>
  800420e670:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e673:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e678:	85 c0                	test   %eax,%eax
  800420e67a:	74 0a                	je     800420e686 <sys_page_map+0xf4>
  800420e67c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e681:	e9 8f 00 00 00       	jmpq   800420e715 <sys_page_map+0x183>
  800420e686:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e68a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e691:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e695:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e699:	48 89 ce             	mov    %rcx,%rsi
  800420e69c:	48 89 c7             	mov    %rax,%rdi
  800420e69f:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e6a6:	00 00 00 
  800420e6a9:	ff d0                	callq  *%rax
  800420e6ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e6af:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e6b4:	75 07                	jne    800420e6bd <sys_page_map+0x12b>
  800420e6b6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e6bb:	eb 58                	jmp    800420e715 <sys_page_map+0x183>
  800420e6bd:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e6c0:	83 e0 02             	and    $0x2,%eax
  800420e6c3:	85 c0                	test   %eax,%eax
  800420e6c5:	74 16                	je     800420e6dd <sys_page_map+0x14b>
  800420e6c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e6cb:	48 8b 00             	mov    (%rax),%rax
  800420e6ce:	83 e0 02             	and    $0x2,%eax
  800420e6d1:	48 85 c0             	test   %rax,%rax
  800420e6d4:	75 07                	jne    800420e6dd <sys_page_map+0x14b>
  800420e6d6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e6db:	eb 38                	jmp    800420e715 <sys_page_map+0x183>
  800420e6dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e6e1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e6e8:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e6eb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e6ef:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e6f3:	48 89 c7             	mov    %rax,%rdi
  800420e6f6:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e6fd:	00 00 00 
  800420e700:	ff d0                	callq  *%rax
  800420e702:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e705:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e709:	79 05                	jns    800420e710 <sys_page_map+0x17e>
  800420e70b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e70e:	eb 05                	jmp    800420e715 <sys_page_map+0x183>
  800420e710:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e715:	c9                   	leaveq 
  800420e716:	c3                   	retq   

000000800420e717 <sys_page_unmap>:
  800420e717:	55                   	push   %rbp
  800420e718:	48 89 e5             	mov    %rsp,%rbp
  800420e71b:	48 83 ec 20          	sub    $0x20,%rsp
  800420e71f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e722:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420e726:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e72a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e72d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e732:	48 89 ce             	mov    %rcx,%rsi
  800420e735:	89 c7                	mov    %eax,%edi
  800420e737:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e73e:	00 00 00 
  800420e741:	ff d0                	callq  *%rax
  800420e743:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e746:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e74a:	79 05                	jns    800420e751 <sys_page_unmap+0x3a>
  800420e74c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e74f:	eb 4b                	jmp    800420e79c <sys_page_unmap+0x85>
  800420e751:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e758:	00 00 00 
  800420e75b:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e75f:	77 0e                	ja     800420e76f <sys_page_unmap+0x58>
  800420e761:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e765:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e76a:	48 85 c0             	test   %rax,%rax
  800420e76d:	74 07                	je     800420e776 <sys_page_unmap+0x5f>
  800420e76f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e774:	eb 26                	jmp    800420e79c <sys_page_unmap+0x85>
  800420e776:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e77a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e781:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e785:	48 89 d6             	mov    %rdx,%rsi
  800420e788:	48 89 c7             	mov    %rax,%rdi
  800420e78b:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420e792:	00 00 00 
  800420e795:	ff d0                	callq  *%rax
  800420e797:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e79c:	c9                   	leaveq 
  800420e79d:	c3                   	retq   

000000800420e79e <sys_ipc_try_send>:
  800420e79e:	55                   	push   %rbp
  800420e79f:	48 89 e5             	mov    %rsp,%rbp
  800420e7a2:	53                   	push   %rbx
  800420e7a3:	48 83 ec 58          	sub    $0x58,%rsp
  800420e7a7:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e7aa:	89 75 b8             	mov    %esi,-0x48(%rbp)
  800420e7ad:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420e7b1:	89 4d ac             	mov    %ecx,-0x54(%rbp)
  800420e7b4:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e7b8:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e7bb:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e7c0:	48 89 ce             	mov    %rcx,%rsi
  800420e7c3:	89 c7                	mov    %eax,%edi
  800420e7c5:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e7cc:	00 00 00 
  800420e7cf:	ff d0                	callq  *%rax
  800420e7d1:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e7d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e7d8:	79 08                	jns    800420e7e2 <sys_ipc_try_send+0x44>
  800420e7da:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e7dd:	e9 89 06 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420e7e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e7e6:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e7ed:	83 f0 01             	xor    $0x1,%eax
  800420e7f0:	84 c0                	test   %al,%al
  800420e7f2:	74 0a                	je     800420e7fe <sys_ipc_try_send+0x60>
  800420e7f4:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e7f9:	e9 6d 06 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420e7fe:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e805:	00 00 00 
  800420e808:	ff d0                	callq  *%rax
  800420e80a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e811:	00 00 00 
  800420e814:	48 98                	cltq   
  800420e816:	48 c1 e0 03          	shl    $0x3,%rax
  800420e81a:	48 89 c1             	mov    %rax,%rcx
  800420e81d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e821:	48 01 c8             	add    %rcx,%rax
  800420e824:	48 01 d0             	add    %rdx,%rax
  800420e827:	48 83 c0 08          	add    $0x8,%rax
  800420e82b:	48 8b 00             	mov    (%rax),%rax
  800420e82e:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420e834:	83 f8 03             	cmp    $0x3,%eax
  800420e837:	0f 85 7b 01 00 00    	jne    800420e9b8 <sys_ipc_try_send+0x21a>
  800420e83d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e841:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e848:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e84f:	00 00 00 
  800420e852:	48 39 c2             	cmp    %rax,%rdx
  800420e855:	0f 87 5d 01 00 00    	ja     800420e9b8 <sys_ipc_try_send+0x21a>
  800420e85b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420e862:	00 00 00 
  800420e865:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e869:	77 35                	ja     800420e8a0 <sys_ipc_try_send+0x102>
  800420e86b:	48 b9 08 f9 21 04 80 	movabs $0x800421f908,%rcx
  800420e872:	00 00 00 
  800420e875:	48 ba 21 f9 21 04 80 	movabs $0x800421f921,%rdx
  800420e87c:	00 00 00 
  800420e87f:	be 9f 01 00 00       	mov    $0x19f,%esi
  800420e884:	48 bf 36 f9 21 04 80 	movabs $0x800421f936,%rdi
  800420e88b:	00 00 00 
  800420e88e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e893:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420e89a:	00 00 00 
  800420e89d:	41 ff d0             	callq  *%r8
  800420e8a0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e8a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e8a8:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420e8af:	00 00 00 
  800420e8b2:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e8b6:	77 32                	ja     800420e8ea <sys_ipc_try_send+0x14c>
  800420e8b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e8bc:	48 89 c1             	mov    %rax,%rcx
  800420e8bf:	48 ba 48 f9 21 04 80 	movabs $0x800421f948,%rdx
  800420e8c6:	00 00 00 
  800420e8c9:	be a0 01 00 00       	mov    $0x1a0,%esi
  800420e8ce:	48 bf 36 f9 21 04 80 	movabs $0x800421f936,%rdi
  800420e8d5:	00 00 00 
  800420e8d8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e8dd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420e8e4:	00 00 00 
  800420e8e7:	41 ff d0             	callq  *%r8
  800420e8ea:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420e8f1:	ff ff ff 
  800420e8f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e8f8:	48 01 d0             	add    %rdx,%rax
  800420e8fb:	48 89 c7             	mov    %rax,%rdi
  800420e8fe:	48 b8 0b e0 20 04 80 	movabs $0x800420e00b,%rax
  800420e905:	00 00 00 
  800420e908:	ff d0                	callq  *%rax
  800420e90a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e90e:	8b 4d ac             	mov    -0x54(%rbp),%ecx
  800420e911:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e915:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e91c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e920:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e927:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  800420e92b:	48 89 c7             	mov    %rax,%rdi
  800420e92e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e935:	00 00 00 
  800420e938:	ff d0                	callq  *%rax
  800420e93a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e93d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e941:	79 63                	jns    800420e9a6 <sys_ipc_try_send+0x208>
  800420e943:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e94a:	00 00 00 
  800420e94d:	ff d0                	callq  *%rax
  800420e94f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e956:	00 00 00 
  800420e959:	48 98                	cltq   
  800420e95b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e95f:	48 89 c1             	mov    %rax,%rcx
  800420e962:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e966:	48 01 c8             	add    %rcx,%rax
  800420e969:	48 01 d0             	add    %rdx,%rax
  800420e96c:	48 83 c0 08          	add    $0x8,%rax
  800420e970:	48 8b 00             	mov    (%rax),%rax
  800420e973:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e979:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e97c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420e980:	89 c6                	mov    %eax,%esi
  800420e982:	48 bf 70 f9 21 04 80 	movabs $0x800421f970,%rdi
  800420e989:	00 00 00 
  800420e98c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e991:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  800420e998:	00 00 00 
  800420e99b:	41 ff d0             	callq  *%r8
  800420e99e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e9a1:	e9 c5 04 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420e9a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e9aa:	8b 55 ac             	mov    -0x54(%rbp),%edx
  800420e9ad:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e9b3:	e9 22 04 00 00       	jmpq   800420edda <sys_ipc_try_send+0x63c>
  800420e9b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e9bc:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420e9c2:	83 f8 03             	cmp    $0x3,%eax
  800420e9c5:	0f 85 7d 01 00 00    	jne    800420eb48 <sys_ipc_try_send+0x3aa>
  800420e9cb:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e9d2:	00 00 00 
  800420e9d5:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e9d9:	0f 87 69 01 00 00    	ja     800420eb48 <sys_ipc_try_send+0x3aa>
  800420e9df:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420e9e6:	00 00 00 
  800420e9e9:	ff d0                	callq  *%rax
  800420e9eb:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e9f2:	00 00 00 
  800420e9f5:	48 98                	cltq   
  800420e9f7:	48 c1 e0 03          	shl    $0x3,%rax
  800420e9fb:	48 89 c1             	mov    %rax,%rcx
  800420e9fe:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea02:	48 01 c8             	add    %rcx,%rax
  800420ea05:	48 01 d0             	add    %rdx,%rax
  800420ea08:	48 83 c0 08          	add    $0x8,%rax
  800420ea0c:	48 8b 00             	mov    (%rax),%rax
  800420ea0f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ea16:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420ea1a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420ea1e:	48 89 ce             	mov    %rcx,%rsi
  800420ea21:	48 89 c7             	mov    %rax,%rdi
  800420ea24:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420ea2b:	00 00 00 
  800420ea2e:	ff d0                	callq  *%rax
  800420ea30:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420ea34:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420ea39:	75 61                	jne    800420ea9c <sys_ipc_try_send+0x2fe>
  800420ea3b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ea42:	00 00 00 
  800420ea45:	ff d0                	callq  *%rax
  800420ea47:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ea4e:	00 00 00 
  800420ea51:	48 98                	cltq   
  800420ea53:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea57:	48 89 c1             	mov    %rax,%rcx
  800420ea5a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea5e:	48 01 c8             	add    %rcx,%rax
  800420ea61:	48 01 d0             	add    %rdx,%rax
  800420ea64:	48 83 c0 08          	add    $0x8,%rax
  800420ea68:	48 8b 00             	mov    (%rax),%rax
  800420ea6b:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ea71:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420ea75:	89 c6                	mov    %eax,%esi
  800420ea77:	48 bf b0 f9 21 04 80 	movabs $0x800421f9b0,%rdi
  800420ea7e:	00 00 00 
  800420ea81:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea86:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800420ea8d:	00 00 00 
  800420ea90:	ff d1                	callq  *%rcx
  800420ea92:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ea97:	e9 cf 03 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420ea9c:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420ea9f:	83 e0 02             	and    $0x2,%eax
  800420eaa2:	85 c0                	test   %eax,%eax
  800420eaa4:	74 6c                	je     800420eb12 <sys_ipc_try_send+0x374>
  800420eaa6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420eaaa:	48 8b 00             	mov    (%rax),%rax
  800420eaad:	83 e0 02             	and    $0x2,%eax
  800420eab0:	48 85 c0             	test   %rax,%rax
  800420eab3:	75 5d                	jne    800420eb12 <sys_ipc_try_send+0x374>
  800420eab5:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420eabc:	00 00 00 
  800420eabf:	ff d0                	callq  *%rax
  800420eac1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420eac8:	00 00 00 
  800420eacb:	48 98                	cltq   
  800420eacd:	48 c1 e0 03          	shl    $0x3,%rax
  800420ead1:	48 89 c1             	mov    %rax,%rcx
  800420ead4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ead8:	48 01 c8             	add    %rcx,%rax
  800420eadb:	48 01 d0             	add    %rdx,%rax
  800420eade:	48 83 c0 08          	add    $0x8,%rax
  800420eae2:	48 8b 00             	mov    (%rax),%rax
  800420eae5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420eaeb:	89 c6                	mov    %eax,%esi
  800420eaed:	48 bf e8 f9 21 04 80 	movabs $0x800421f9e8,%rdi
  800420eaf4:	00 00 00 
  800420eaf7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eafc:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420eb03:	00 00 00 
  800420eb06:	ff d2                	callq  *%rdx
  800420eb08:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420eb0d:	e9 59 03 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420eb12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420eb16:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420eb1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420eb21:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420eb28:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  800420eb2c:	b9 07 00 00 00       	mov    $0x7,%ecx
  800420eb31:	48 89 c7             	mov    %rax,%rdi
  800420eb34:	48 b8 f5 a4 21 04 80 	movabs $0x800421a4f5,%rax
  800420eb3b:	00 00 00 
  800420eb3e:	ff d0                	callq  *%rax
  800420eb40:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420eb43:	e9 92 02 00 00       	jmpq   800420edda <sys_ipc_try_send+0x63c>
  800420eb48:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420eb4f:	00 00 00 
  800420eb52:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420eb56:	0f 87 70 02 00 00    	ja     800420edcc <sys_ipc_try_send+0x62e>
  800420eb5c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420eb60:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420eb67:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420eb6e:	00 00 00 
  800420eb71:	48 39 c2             	cmp    %rax,%rdx
  800420eb74:	0f 87 52 02 00 00    	ja     800420edcc <sys_ipc_try_send+0x62e>
  800420eb7a:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420eb7d:	f7 d0                	not    %eax
  800420eb7f:	83 e0 05             	and    $0x5,%eax
  800420eb82:	85 c0                	test   %eax,%eax
  800420eb84:	75 0c                	jne    800420eb92 <sys_ipc_try_send+0x3f4>
  800420eb86:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420eb89:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420eb8e:	85 c0                	test   %eax,%eax
  800420eb90:	74 60                	je     800420ebf2 <sys_ipc_try_send+0x454>
  800420eb92:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420eb99:	00 00 00 
  800420eb9c:	ff d0                	callq  *%rax
  800420eb9e:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420eba5:	00 00 00 
  800420eba8:	48 98                	cltq   
  800420ebaa:	48 c1 e0 03          	shl    $0x3,%rax
  800420ebae:	48 89 c1             	mov    %rax,%rcx
  800420ebb1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ebb5:	48 01 c8             	add    %rcx,%rax
  800420ebb8:	48 01 d0             	add    %rdx,%rax
  800420ebbb:	48 83 c0 08          	add    $0x8,%rax
  800420ebbf:	48 8b 00             	mov    (%rax),%rax
  800420ebc2:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ebc8:	8b 55 ac             	mov    -0x54(%rbp),%edx
  800420ebcb:	89 c6                	mov    %eax,%esi
  800420ebcd:	48 bf 30 fa 21 04 80 	movabs $0x800421fa30,%rdi
  800420ebd4:	00 00 00 
  800420ebd7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ebdc:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800420ebe3:	00 00 00 
  800420ebe6:	ff d1                	callq  *%rcx
  800420ebe8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ebed:	e9 79 02 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420ebf2:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ebf9:	00 00 00 
  800420ebfc:	ff d0                	callq  *%rax
  800420ebfe:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ec05:	00 00 00 
  800420ec08:	48 98                	cltq   
  800420ec0a:	48 c1 e0 03          	shl    $0x3,%rax
  800420ec0e:	48 89 c1             	mov    %rax,%rcx
  800420ec11:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ec15:	48 01 c8             	add    %rcx,%rax
  800420ec18:	48 01 d0             	add    %rdx,%rax
  800420ec1b:	48 83 c0 08          	add    $0x8,%rax
  800420ec1f:	48 8b 00             	mov    (%rax),%rax
  800420ec22:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ec29:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420ec2d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420ec31:	48 89 ce             	mov    %rcx,%rsi
  800420ec34:	48 89 c7             	mov    %rax,%rdi
  800420ec37:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420ec3e:	00 00 00 
  800420ec41:	ff d0                	callq  *%rax
  800420ec43:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420ec47:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420ec4c:	75 61                	jne    800420ecaf <sys_ipc_try_send+0x511>
  800420ec4e:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ec55:	00 00 00 
  800420ec58:	ff d0                	callq  *%rax
  800420ec5a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ec61:	00 00 00 
  800420ec64:	48 98                	cltq   
  800420ec66:	48 c1 e0 03          	shl    $0x3,%rax
  800420ec6a:	48 89 c1             	mov    %rax,%rcx
  800420ec6d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ec71:	48 01 c8             	add    %rcx,%rax
  800420ec74:	48 01 d0             	add    %rdx,%rax
  800420ec77:	48 83 c0 08          	add    $0x8,%rax
  800420ec7b:	48 8b 00             	mov    (%rax),%rax
  800420ec7e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ec84:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420ec88:	89 c6                	mov    %eax,%esi
  800420ec8a:	48 bf b0 f9 21 04 80 	movabs $0x800421f9b0,%rdi
  800420ec91:	00 00 00 
  800420ec94:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec99:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800420eca0:	00 00 00 
  800420eca3:	ff d1                	callq  *%rcx
  800420eca5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ecaa:	e9 bc 01 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420ecaf:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420ecb2:	83 e0 02             	and    $0x2,%eax
  800420ecb5:	85 c0                	test   %eax,%eax
  800420ecb7:	74 6c                	je     800420ed25 <sys_ipc_try_send+0x587>
  800420ecb9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ecbd:	48 8b 00             	mov    (%rax),%rax
  800420ecc0:	83 e0 02             	and    $0x2,%eax
  800420ecc3:	48 85 c0             	test   %rax,%rax
  800420ecc6:	75 5d                	jne    800420ed25 <sys_ipc_try_send+0x587>
  800420ecc8:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420eccf:	00 00 00 
  800420ecd2:	ff d0                	callq  *%rax
  800420ecd4:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ecdb:	00 00 00 
  800420ecde:	48 98                	cltq   
  800420ece0:	48 c1 e0 03          	shl    $0x3,%rax
  800420ece4:	48 89 c1             	mov    %rax,%rcx
  800420ece7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eceb:	48 01 c8             	add    %rcx,%rax
  800420ecee:	48 01 d0             	add    %rdx,%rax
  800420ecf1:	48 83 c0 08          	add    $0x8,%rax
  800420ecf5:	48 8b 00             	mov    (%rax),%rax
  800420ecf8:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ecfe:	89 c6                	mov    %eax,%esi
  800420ed00:	48 bf e8 f9 21 04 80 	movabs $0x800421f9e8,%rdi
  800420ed07:	00 00 00 
  800420ed0a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ed0f:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800420ed16:	00 00 00 
  800420ed19:	ff d2                	callq  *%rdx
  800420ed1b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ed20:	e9 46 01 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420ed25:	8b 4d ac             	mov    -0x54(%rbp),%ecx
  800420ed28:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ed2c:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420ed33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ed37:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ed3e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  800420ed42:	48 89 c7             	mov    %rax,%rdi
  800420ed45:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420ed4c:	00 00 00 
  800420ed4f:	ff d0                	callq  *%rax
  800420ed51:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420ed54:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420ed58:	79 63                	jns    800420edbd <sys_ipc_try_send+0x61f>
  800420ed5a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ed61:	00 00 00 
  800420ed64:	ff d0                	callq  *%rax
  800420ed66:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ed6d:	00 00 00 
  800420ed70:	48 98                	cltq   
  800420ed72:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed76:	48 89 c1             	mov    %rax,%rcx
  800420ed79:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed7d:	48 01 c8             	add    %rcx,%rax
  800420ed80:	48 01 d0             	add    %rdx,%rax
  800420ed83:	48 83 c0 08          	add    $0x8,%rax
  800420ed87:	48 8b 00             	mov    (%rax),%rax
  800420ed8a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ed90:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420ed93:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420ed97:	89 c6                	mov    %eax,%esi
  800420ed99:	48 bf 70 f9 21 04 80 	movabs $0x800421f970,%rdi
  800420eda0:	00 00 00 
  800420eda3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eda8:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  800420edaf:	00 00 00 
  800420edb2:	41 ff d0             	callq  *%r8
  800420edb5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420edb8:	e9 ae 00 00 00       	jmpq   800420ee6b <sys_ipc_try_send+0x6cd>
  800420edbd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420edc1:	8b 55 ac             	mov    -0x54(%rbp),%edx
  800420edc4:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420edca:	eb 0e                	jmp    800420edda <sys_ipc_try_send+0x63c>
  800420edcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420edd0:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420edd7:	00 00 00 
  800420edda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420edde:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
  800420ede5:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  800420ede9:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420edf0:	00 00 00 
  800420edf3:	ff d0                	callq  *%rax
  800420edf5:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420edfc:	00 00 00 
  800420edff:	48 98                	cltq   
  800420ee01:	48 c1 e0 03          	shl    $0x3,%rax
  800420ee05:	48 89 c1             	mov    %rax,%rcx
  800420ee08:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ee0c:	48 01 c8             	add    %rcx,%rax
  800420ee0f:	48 01 d0             	add    %rdx,%rax
  800420ee12:	48 83 c0 08          	add    $0x8,%rax
  800420ee16:	48 8b 00             	mov    (%rax),%rax
  800420ee19:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ee1f:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
  800420ee25:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee29:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ee2c:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420ee32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee36:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420ee3d:	00 
  800420ee3e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee42:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420ee49:	00 00 00 
  800420ee4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee50:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420ee56:	83 f8 03             	cmp    $0x3,%eax
  800420ee59:	75 0b                	jne    800420ee66 <sys_ipc_try_send+0x6c8>
  800420ee5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee5f:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ee62:	48 89 50 40          	mov    %rdx,0x40(%rax)
  800420ee66:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee6b:	48 83 c4 58          	add    $0x58,%rsp
  800420ee6f:	5b                   	pop    %rbx
  800420ee70:	5d                   	pop    %rbp
  800420ee71:	c3                   	retq   

000000800420ee72 <sys_ipc_recv>:
  800420ee72:	55                   	push   %rbp
  800420ee73:	48 89 e5             	mov    %rsp,%rbp
  800420ee76:	48 83 ec 10          	sub    $0x10,%rsp
  800420ee7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ee7e:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ee85:	00 00 00 
  800420ee88:	ff d0                	callq  *%rax
  800420ee8a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ee91:	00 00 00 
  800420ee94:	48 98                	cltq   
  800420ee96:	48 c1 e0 03          	shl    $0x3,%rax
  800420ee9a:	48 89 c1             	mov    %rax,%rcx
  800420ee9d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eea1:	48 01 c8             	add    %rcx,%rax
  800420eea4:	48 01 d0             	add    %rdx,%rax
  800420eea7:	48 83 c0 08          	add    $0x8,%rax
  800420eeab:	48 8b 00             	mov    (%rax),%rax
  800420eeae:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420eeb5:	84 c0                	test   %al,%al
  800420eeb7:	74 2a                	je     800420eee3 <sys_ipc_recv+0x71>
  800420eeb9:	48 ba 58 fa 21 04 80 	movabs $0x800421fa58,%rdx
  800420eec0:	00 00 00 
  800420eec3:	be fd 01 00 00       	mov    $0x1fd,%esi
  800420eec8:	48 bf 36 f9 21 04 80 	movabs $0x800421f936,%rdi
  800420eecf:	00 00 00 
  800420eed2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eed7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420eede:	00 00 00 
  800420eee1:	ff d1                	callq  *%rcx
  800420eee3:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420eeea:	00 00 00 
  800420eeed:	ff d0                	callq  *%rax
  800420eeef:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420eef6:	00 00 00 
  800420eef9:	48 98                	cltq   
  800420eefb:	48 c1 e0 03          	shl    $0x3,%rax
  800420eeff:	48 89 c1             	mov    %rax,%rcx
  800420ef02:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef06:	48 01 c8             	add    %rcx,%rax
  800420ef09:	48 01 d0             	add    %rdx,%rax
  800420ef0c:	48 83 c0 08          	add    $0x8,%rax
  800420ef10:	48 8b 00             	mov    (%rax),%rax
  800420ef13:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
  800420ef1a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ef21:	00 00 00 
  800420ef24:	ff d0                	callq  *%rax
  800420ef26:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ef2d:	00 00 00 
  800420ef30:	48 98                	cltq   
  800420ef32:	48 c1 e0 03          	shl    $0x3,%rax
  800420ef36:	48 89 c1             	mov    %rax,%rcx
  800420ef39:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef3d:	48 01 c8             	add    %rcx,%rax
  800420ef40:	48 01 d0             	add    %rdx,%rax
  800420ef43:	48 83 c0 08          	add    $0x8,%rax
  800420ef47:	48 8b 00             	mov    (%rax),%rax
  800420ef4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420ef4e:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
  800420ef55:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ef5c:	00 00 00 
  800420ef5f:	ff d0                	callq  *%rax
  800420ef61:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ef68:	00 00 00 
  800420ef6b:	48 98                	cltq   
  800420ef6d:	48 c1 e0 03          	shl    $0x3,%rax
  800420ef71:	48 89 c1             	mov    %rax,%rcx
  800420ef74:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef78:	48 01 c8             	add    %rcx,%rax
  800420ef7b:	48 01 d0             	add    %rdx,%rax
  800420ef7e:	48 83 c0 08          	add    $0x8,%rax
  800420ef82:	48 8b 00             	mov    (%rax),%rax
  800420ef85:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420ef8c:	00 00 00 
  800420ef8f:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  800420ef96:	00 00 00 
  800420ef99:	ff d0                	callq  *%rax

000000800420ef9b <sys_time_msec>:
  800420ef9b:	55                   	push   %rbp
  800420ef9c:	48 89 e5             	mov    %rsp,%rbp
  800420ef9f:	48 b8 b8 9a 21 04 80 	movabs $0x8004219ab8,%rax
  800420efa6:	00 00 00 
  800420efa9:	ff d0                	callq  *%rax
  800420efab:	5d                   	pop    %rbp
  800420efac:	c3                   	retq   

000000800420efad <sys_net_transmit>:
  800420efad:	55                   	push   %rbp
  800420efae:	48 89 e5             	mov    %rsp,%rbp
  800420efb1:	48 83 ec 10          	sub    $0x10,%rsp
  800420efb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420efb9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420efbd:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420efc4:	00 00 00 
  800420efc7:	ff d0                	callq  *%rax
  800420efc9:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420efd0:	00 00 00 
  800420efd3:	48 98                	cltq   
  800420efd5:	48 c1 e0 03          	shl    $0x3,%rax
  800420efd9:	48 89 c1             	mov    %rax,%rcx
  800420efdc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420efe0:	48 01 c8             	add    %rcx,%rax
  800420efe3:	48 01 d0             	add    %rdx,%rax
  800420efe6:	48 83 c0 08          	add    $0x8,%rax
  800420efea:	48 8b 00             	mov    (%rax),%rax
  800420efed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420eff1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420eff5:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420effa:	48 89 c7             	mov    %rax,%rdi
  800420effd:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420f004:	00 00 00 
  800420f007:	ff d0                	callq  *%rax
  800420f009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f00d:	89 c2                	mov    %eax,%edx
  800420f00f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f013:	89 d6                	mov    %edx,%esi
  800420f015:	48 89 c7             	mov    %rax,%rdi
  800420f018:	48 b8 41 8c 21 04 80 	movabs $0x8004218c41,%rax
  800420f01f:	00 00 00 
  800420f022:	ff d0                	callq  *%rax
  800420f024:	c9                   	leaveq 
  800420f025:	c3                   	retq   

000000800420f026 <sys_net_receive>:
  800420f026:	55                   	push   %rbp
  800420f027:	48 89 e5             	mov    %rsp,%rbp
  800420f02a:	48 83 ec 10          	sub    $0x10,%rsp
  800420f02e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420f032:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f036:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420f03d:	00 00 00 
  800420f040:	ff d0                	callq  *%rax
  800420f042:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420f049:	00 00 00 
  800420f04c:	48 98                	cltq   
  800420f04e:	48 c1 e0 03          	shl    $0x3,%rax
  800420f052:	48 89 c1             	mov    %rax,%rcx
  800420f055:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f059:	48 01 c8             	add    %rcx,%rax
  800420f05c:	48 01 d0             	add    %rdx,%rax
  800420f05f:	48 83 c0 08          	add    $0x8,%rax
  800420f063:	48 8b 00             	mov    (%rax),%rax
  800420f066:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f06a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420f06e:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420f073:	48 89 c7             	mov    %rax,%rdi
  800420f076:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420f07d:	00 00 00 
  800420f080:	ff d0                	callq  *%rax
  800420f082:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f086:	89 c2                	mov    %eax,%edx
  800420f088:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f08c:	89 d6                	mov    %edx,%esi
  800420f08e:	48 89 c7             	mov    %rax,%rdi
  800420f091:	48 b8 b0 8d 21 04 80 	movabs $0x8004218db0,%rax
  800420f098:	00 00 00 
  800420f09b:	ff d0                	callq  *%rax
  800420f09d:	c9                   	leaveq 
  800420f09e:	c3                   	retq   

000000800420f09f <sys_vmx_list_vms>:
  800420f09f:	55                   	push   %rbp
  800420f0a0:	48 89 e5             	mov    %rsp,%rbp
  800420f0a3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f0a8:	48 ba 2e a9 21 04 80 	movabs $0x800421a92e,%rdx
  800420f0af:	00 00 00 
  800420f0b2:	ff d2                	callq  *%rdx
  800420f0b4:	5d                   	pop    %rbp
  800420f0b5:	c3                   	retq   

000000800420f0b6 <sys_vmx_sel_resume>:
  800420f0b6:	55                   	push   %rbp
  800420f0b7:	48 89 e5             	mov    %rsp,%rbp
  800420f0ba:	48 83 ec 10          	sub    $0x10,%rsp
  800420f0be:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f0c1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f0c4:	89 c7                	mov    %eax,%edi
  800420f0c6:	48 b8 ee a9 21 04 80 	movabs $0x800421a9ee,%rax
  800420f0cd:	00 00 00 
  800420f0d0:	ff d0                	callq  *%rax
  800420f0d2:	c9                   	leaveq 
  800420f0d3:	c3                   	retq   

000000800420f0d4 <sys_vmx_get_vmdisk_number>:
  800420f0d4:	55                   	push   %rbp
  800420f0d5:	48 89 e5             	mov    %rsp,%rbp
  800420f0d8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f0dd:	48 ba bd d4 21 04 80 	movabs $0x800421d4bd,%rdx
  800420f0e4:	00 00 00 
  800420f0e7:	ff d2                	callq  *%rdx
  800420f0e9:	5d                   	pop    %rbp
  800420f0ea:	c3                   	retq   

000000800420f0eb <sys_vmx_incr_vmdisk_number>:
  800420f0eb:	55                   	push   %rbp
  800420f0ec:	48 89 e5             	mov    %rsp,%rbp
  800420f0ef:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f0f4:	48 ba cf d4 21 04 80 	movabs $0x800421d4cf,%rdx
  800420f0fb:	00 00 00 
  800420f0fe:	ff d2                	callq  *%rdx
  800420f100:	5d                   	pop    %rbp
  800420f101:	c3                   	retq   

000000800420f102 <sys_ept_map>:
  800420f102:	55                   	push   %rbp
  800420f103:	48 89 e5             	mov    %rsp,%rbp
  800420f106:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420f10a:	89 7d 9c             	mov    %edi,-0x64(%rbp)
  800420f10d:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  800420f111:	89 55 98             	mov    %edx,-0x68(%rbp)
  800420f114:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
  800420f118:	44 89 45 84          	mov    %r8d,-0x7c(%rbp)
  800420f11c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420f123:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420f127:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420f12e:	00 00 00 
  800420f131:	48 39 c2             	cmp    %rax,%rdx
  800420f134:	0f 87 b9 00 00 00    	ja     800420f1f3 <sys_ept_map+0xf1>
  800420f13a:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  800420f141:	00 
  800420f142:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420f146:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f14a:	48 01 d0             	add    %rdx,%rax
  800420f14d:	48 83 e8 01          	sub    $0x1,%rax
  800420f151:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f159:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f15e:	48 f7 75 f0          	divq   -0x10(%rbp)
  800420f162:	48 89 d0             	mov    %rdx,%rax
  800420f165:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f169:	48 29 c2             	sub    %rax,%rdx
  800420f16c:	48 89 d0             	mov    %rdx,%rax
  800420f16f:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  800420f173:	74 18                	je     800420f18d <sys_ept_map+0x8b>
  800420f175:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420f179:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420f17d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f181:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420f187:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  800420f18b:	75 66                	jne    800420f1f3 <sys_ept_map+0xf1>
  800420f18d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800420f191:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420f198:	00 00 00 
  800420f19b:	48 39 c2             	cmp    %rax,%rdx
  800420f19e:	77 53                	ja     800420f1f3 <sys_ept_map+0xf1>
  800420f1a0:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420f1a7:	00 
  800420f1a8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800420f1ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f1b0:	48 01 d0             	add    %rdx,%rax
  800420f1b3:	48 83 e8 01          	sub    $0x1,%rax
  800420f1b7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f1bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f1bf:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f1c4:	48 f7 75 d8          	divq   -0x28(%rbp)
  800420f1c8:	48 89 d0             	mov    %rdx,%rax
  800420f1cb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f1cf:	48 29 c2             	sub    %rax,%rdx
  800420f1d2:	48 89 d0             	mov    %rdx,%rax
  800420f1d5:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  800420f1d9:	74 22                	je     800420f1fd <sys_ept_map+0xfb>
  800420f1db:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420f1df:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420f1e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f1e7:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420f1ed:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  800420f1f1:	74 0a                	je     800420f1fd <sys_ept_map+0xfb>
  800420f1f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420f1f8:	e9 31 01 00 00       	jmpq   800420f32e <sys_ept_map+0x22c>
  800420f1fd:	83 7d 84 00          	cmpl   $0x0,-0x7c(%rbp)
  800420f201:	7e 06                	jle    800420f209 <sys_ept_map+0x107>
  800420f203:	83 7d 84 07          	cmpl   $0x7,-0x7c(%rbp)
  800420f207:	7e 0a                	jle    800420f213 <sys_ept_map+0x111>
  800420f209:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420f20e:	e9 1b 01 00 00       	jmpq   800420f32e <sys_ept_map+0x22c>
  800420f213:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
  800420f217:	8b 45 98             	mov    -0x68(%rbp),%eax
  800420f21a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420f21f:	48 89 ce             	mov    %rcx,%rsi
  800420f222:	89 c7                	mov    %eax,%edi
  800420f224:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420f22b:	00 00 00 
  800420f22e:	ff d0                	callq  *%rax
  800420f230:	85 c0                	test   %eax,%eax
  800420f232:	75 21                	jne    800420f255 <sys_ept_map+0x153>
  800420f234:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800420f238:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800420f23b:	ba 01 00 00 00       	mov    $0x1,%edx
  800420f240:	48 89 ce             	mov    %rcx,%rsi
  800420f243:	89 c7                	mov    %eax,%edi
  800420f245:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420f24c:	00 00 00 
  800420f24f:	ff d0                	callq  *%rax
  800420f251:	85 c0                	test   %eax,%eax
  800420f253:	74 0a                	je     800420f25f <sys_ept_map+0x15d>
  800420f255:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  800420f25a:	e9 cf 00 00 00       	jmpq   800420f32e <sys_ept_map+0x22c>
  800420f25f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420f263:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  800420f26a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f26e:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
  800420f275:	48 39 c2             	cmp    %rax,%rdx
  800420f278:	76 0a                	jbe    800420f284 <sys_ept_map+0x182>
  800420f27a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420f27f:	e9 aa 00 00 00       	jmpq   800420f32e <sys_ept_map+0x22c>
  800420f284:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f288:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420f28f:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
  800420f293:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  800420f297:	48 89 ce             	mov    %rcx,%rsi
  800420f29a:	48 89 c7             	mov    %rax,%rdi
  800420f29d:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420f2a4:	00 00 00 
  800420f2a7:	ff d0                	callq  *%rax
  800420f2a9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f2ad:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800420f2b0:	83 e0 02             	and    $0x2,%eax
  800420f2b3:	85 c0                	test   %eax,%eax
  800420f2b5:	74 16                	je     800420f2cd <sys_ept_map+0x1cb>
  800420f2b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f2bb:	48 8b 00             	mov    (%rax),%rax
  800420f2be:	83 e0 02             	and    $0x2,%eax
  800420f2c1:	48 85 c0             	test   %rax,%rax
  800420f2c4:	75 07                	jne    800420f2cd <sys_ept_map+0x1cb>
  800420f2c6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420f2cb:	eb 61                	jmp    800420f32e <sys_ept_map+0x22c>
  800420f2cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f2d1:	48 89 c7             	mov    %rax,%rdi
  800420f2d4:	48 b8 7c e0 20 04 80 	movabs $0x800420e07c,%rax
  800420f2db:	00 00 00 
  800420f2de:	ff d0                	callq  *%rax
  800420f2e0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420f2e4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f2e8:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420f2ef:	8b 4d 84             	mov    -0x7c(%rbp),%ecx
  800420f2f2:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800420f2f6:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  800420f2fa:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800420f300:	48 89 c7             	mov    %rax,%rdi
  800420f303:	48 b8 36 a5 21 04 80 	movabs $0x800421a536,%rax
  800420f30a:	00 00 00 
  800420f30d:	ff d0                	callq  *%rax
  800420f30f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420f312:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420f316:	75 13                	jne    800420f32b <sys_ept_map+0x229>
  800420f318:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f31c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420f320:	8d 50 01             	lea    0x1(%rax),%edx
  800420f323:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f327:	66 89 50 08          	mov    %dx,0x8(%rax)
  800420f32b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f32e:	c9                   	leaveq 
  800420f32f:	c3                   	retq   

000000800420f330 <sys_env_mkguest>:
  800420f330:	55                   	push   %rbp
  800420f331:	48 89 e5             	mov    %rsp,%rbp
  800420f334:	48 83 ec 20          	sub    $0x20,%rsp
  800420f338:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f33c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420f340:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f345:	48 ba c4 aa 21 04 80 	movabs $0x800421aac4,%rdx
  800420f34c:	00 00 00 
  800420f34f:	ff d2                	callq  *%rdx
  800420f351:	83 f0 01             	xor    $0x1,%eax
  800420f354:	84 c0                	test   %al,%al
  800420f356:	74 0a                	je     800420f362 <sys_env_mkguest+0x32>
  800420f358:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420f35d:	e9 b1 00 00 00       	jmpq   800420f413 <sys_env_mkguest+0xe3>
  800420f362:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f367:	48 ba 50 ab 21 04 80 	movabs $0x800421ab50,%rdx
  800420f36e:	00 00 00 
  800420f371:	ff d2                	callq  *%rdx
  800420f373:	83 f0 01             	xor    $0x1,%eax
  800420f376:	84 c0                	test   %al,%al
  800420f378:	74 0a                	je     800420f384 <sys_env_mkguest+0x54>
  800420f37a:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420f37f:	e9 8f 00 00 00       	jmpq   800420f413 <sys_env_mkguest+0xe3>
  800420f384:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420f38b:	00 00 00 
  800420f38e:	ff d0                	callq  *%rax
  800420f390:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420f397:	00 00 00 
  800420f39a:	48 98                	cltq   
  800420f39c:	48 c1 e0 03          	shl    $0x3,%rax
  800420f3a0:	48 89 c1             	mov    %rax,%rcx
  800420f3a3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f3a7:	48 01 c8             	add    %rcx,%rax
  800420f3aa:	48 01 d0             	add    %rdx,%rax
  800420f3ad:	48 83 c0 08          	add    $0x8,%rax
  800420f3b1:	48 8b 00             	mov    (%rax),%rax
  800420f3b4:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420f3ba:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420f3be:	89 d6                	mov    %edx,%esi
  800420f3c0:	48 89 c7             	mov    %rax,%rdi
  800420f3c3:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  800420f3ca:	00 00 00 
  800420f3cd:	ff d0                	callq  *%rax
  800420f3cf:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420f3d2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420f3d6:	79 05                	jns    800420f3dd <sys_env_mkguest+0xad>
  800420f3d8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f3db:	eb 36                	jmp    800420f413 <sys_env_mkguest+0xe3>
  800420f3dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f3e1:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420f3e8:	00 00 00 
  800420f3eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f3ef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3f3:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
  800420f3fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f3fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f402:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420f409:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f40d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420f413:	c9                   	leaveq 
  800420f414:	c3                   	retq   

000000800420f415 <syscall>:
  800420f415:	55                   	push   %rbp
  800420f416:	48 89 e5             	mov    %rsp,%rbp
  800420f419:	48 83 ec 30          	sub    $0x30,%rsp
  800420f41d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420f421:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f425:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420f429:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420f42d:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420f431:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
  800420f435:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420f43a:	0f 87 c6 02 00 00    	ja     800420f706 <syscall+0x2f1>
  800420f440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f444:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f44b:	00 
  800420f44c:	48 b8 70 fa 21 04 80 	movabs $0x800421fa70,%rax
  800420f453:	00 00 00 
  800420f456:	48 01 d0             	add    %rdx,%rax
  800420f459:	48 8b 00             	mov    (%rax),%rax
  800420f45c:	ff e0                	jmpq   *%rax
  800420f45e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f462:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f466:	48 89 d6             	mov    %rdx,%rsi
  800420f469:	48 89 c7             	mov    %rax,%rdi
  800420f46c:	48 b8 04 e1 20 04 80 	movabs $0x800420e104,%rax
  800420f473:	00 00 00 
  800420f476:	ff d0                	callq  *%rax
  800420f478:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f47d:	e9 8b 02 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f482:	48 b8 88 e1 20 04 80 	movabs $0x800420e188,%rax
  800420f489:	00 00 00 
  800420f48c:	ff d0                	callq  *%rax
  800420f48e:	48 98                	cltq   
  800420f490:	e9 78 02 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f495:	48 b8 9a e1 20 04 80 	movabs $0x800420e19a,%rax
  800420f49c:	00 00 00 
  800420f49f:	ff d0                	callq  *%rax
  800420f4a1:	48 98                	cltq   
  800420f4a3:	e9 65 02 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f4a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f4ac:	89 c7                	mov    %eax,%edi
  800420f4ae:	48 b8 d6 e1 20 04 80 	movabs $0x800420e1d6,%rax
  800420f4b5:	00 00 00 
  800420f4b8:	ff d0                	callq  *%rax
  800420f4ba:	48 98                	cltq   
  800420f4bc:	e9 4c 02 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f4c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f4c5:	89 c2                	mov    %eax,%edx
  800420f4c7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f4cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f4cf:	48 89 ce             	mov    %rcx,%rsi
  800420f4d2:	89 c7                	mov    %eax,%edi
  800420f4d4:	48 b8 a9 e4 20 04 80 	movabs $0x800420e4a9,%rax
  800420f4db:	00 00 00 
  800420f4de:	ff d0                	callq  *%rax
  800420f4e0:	48 98                	cltq   
  800420f4e2:	e9 26 02 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f4e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f4eb:	89 c7                	mov    %eax,%edi
  800420f4ed:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f4f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f4f5:	89 c2                	mov    %eax,%edx
  800420f4f7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f4fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f4ff:	41 89 f8             	mov    %edi,%r8d
  800420f502:	89 c7                	mov    %eax,%edi
  800420f504:	48 b8 92 e5 20 04 80 	movabs $0x800420e592,%rax
  800420f50b:	00 00 00 
  800420f50e:	ff d0                	callq  *%rax
  800420f510:	48 98                	cltq   
  800420f512:	e9 f6 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f517:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f51b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f51f:	48 89 d6             	mov    %rdx,%rsi
  800420f522:	89 c7                	mov    %eax,%edi
  800420f524:	48 b8 17 e7 20 04 80 	movabs $0x800420e717,%rax
  800420f52b:	00 00 00 
  800420f52e:	ff d0                	callq  *%rax
  800420f530:	48 98                	cltq   
  800420f532:	e9 d6 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f537:	48 b8 36 e2 20 04 80 	movabs $0x800420e236,%rax
  800420f53e:	00 00 00 
  800420f541:	ff d0                	callq  *%rax
  800420f543:	48 98                	cltq   
  800420f545:	e9 c3 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f54a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f54e:	89 c2                	mov    %eax,%edx
  800420f550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f554:	89 d6                	mov    %edx,%esi
  800420f556:	89 c7                	mov    %eax,%edi
  800420f558:	48 b8 0b e3 20 04 80 	movabs $0x800420e30b,%rax
  800420f55f:	00 00 00 
  800420f562:	ff d0                	callq  *%rax
  800420f564:	48 98                	cltq   
  800420f566:	e9 a2 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f56b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f56f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f573:	48 89 d6             	mov    %rdx,%rsi
  800420f576:	89 c7                	mov    %eax,%edi
  800420f578:	48 b8 6b e3 20 04 80 	movabs $0x800420e36b,%rax
  800420f57f:	00 00 00 
  800420f582:	ff d0                	callq  *%rax
  800420f584:	48 98                	cltq   
  800420f586:	e9 82 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f58b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f58f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f593:	48 89 d6             	mov    %rdx,%rsi
  800420f596:	89 c7                	mov    %eax,%edi
  800420f598:	48 b8 59 e4 20 04 80 	movabs $0x800420e459,%rax
  800420f59f:	00 00 00 
  800420f5a2:	ff d0                	callq  *%rax
  800420f5a4:	48 98                	cltq   
  800420f5a6:	e9 62 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f5ab:	48 b8 26 e2 20 04 80 	movabs $0x800420e226,%rax
  800420f5b2:	00 00 00 
  800420f5b5:	ff d0                	callq  *%rax
  800420f5b7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f5bc:	e9 4c 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f5c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f5c5:	89 c1                	mov    %eax,%ecx
  800420f5c7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f5cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5cf:	89 c6                	mov    %eax,%esi
  800420f5d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f5d5:	89 c7                	mov    %eax,%edi
  800420f5d7:	48 b8 9e e7 20 04 80 	movabs $0x800420e79e,%rax
  800420f5de:	00 00 00 
  800420f5e1:	ff d0                	callq  *%rax
  800420f5e3:	48 98                	cltq   
  800420f5e5:	e9 23 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f5ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f5ee:	48 89 c7             	mov    %rax,%rdi
  800420f5f1:	48 b8 72 ee 20 04 80 	movabs $0x800420ee72,%rax
  800420f5f8:	00 00 00 
  800420f5fb:	ff d0                	callq  *%rax
  800420f5fd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f602:	e9 06 01 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f607:	48 b8 9b ef 20 04 80 	movabs $0x800420ef9b,%rax
  800420f60e:	00 00 00 
  800420f611:	ff d0                	callq  *%rax
  800420f613:	48 98                	cltq   
  800420f615:	e9 f3 00 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f61a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f61e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f622:	48 89 d6             	mov    %rdx,%rsi
  800420f625:	48 89 c7             	mov    %rax,%rdi
  800420f628:	48 b8 ad ef 20 04 80 	movabs $0x800420efad,%rax
  800420f62f:	00 00 00 
  800420f632:	ff d0                	callq  *%rax
  800420f634:	48 98                	cltq   
  800420f636:	e9 d2 00 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f63b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f63f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f643:	48 89 d6             	mov    %rdx,%rsi
  800420f646:	48 89 c7             	mov    %rax,%rdi
  800420f649:	48 b8 26 f0 20 04 80 	movabs $0x800420f026,%rax
  800420f650:	00 00 00 
  800420f653:	ff d0                	callq  *%rax
  800420f655:	48 98                	cltq   
  800420f657:	e9 b1 00 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f65c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f660:	89 c7                	mov    %eax,%edi
  800420f662:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f666:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f66a:	89 c2                	mov    %eax,%edx
  800420f66c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f670:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f674:	41 89 f8             	mov    %edi,%r8d
  800420f677:	89 c7                	mov    %eax,%edi
  800420f679:	48 b8 02 f1 20 04 80 	movabs $0x800420f102,%rax
  800420f680:	00 00 00 
  800420f683:	ff d0                	callq  *%rax
  800420f685:	48 98                	cltq   
  800420f687:	e9 81 00 00 00       	jmpq   800420f70d <syscall+0x2f8>
  800420f68c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f690:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f694:	48 89 d6             	mov    %rdx,%rsi
  800420f697:	48 89 c7             	mov    %rax,%rdi
  800420f69a:	48 b8 30 f3 20 04 80 	movabs $0x800420f330,%rax
  800420f6a1:	00 00 00 
  800420f6a4:	ff d0                	callq  *%rax
  800420f6a6:	48 98                	cltq   
  800420f6a8:	eb 63                	jmp    800420f70d <syscall+0x2f8>
  800420f6aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f6af:	48 ba 9f f0 20 04 80 	movabs $0x800420f09f,%rdx
  800420f6b6:	00 00 00 
  800420f6b9:	ff d2                	callq  *%rdx
  800420f6bb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f6c0:	eb 4b                	jmp    800420f70d <syscall+0x2f8>
  800420f6c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f6c6:	89 c7                	mov    %eax,%edi
  800420f6c8:	48 b8 b6 f0 20 04 80 	movabs $0x800420f0b6,%rax
  800420f6cf:	00 00 00 
  800420f6d2:	ff d0                	callq  *%rax
  800420f6d4:	0f b6 c0             	movzbl %al,%eax
  800420f6d7:	eb 34                	jmp    800420f70d <syscall+0x2f8>
  800420f6d9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f6de:	48 ba d4 f0 20 04 80 	movabs $0x800420f0d4,%rdx
  800420f6e5:	00 00 00 
  800420f6e8:	ff d2                	callq  *%rdx
  800420f6ea:	48 98                	cltq   
  800420f6ec:	eb 1f                	jmp    800420f70d <syscall+0x2f8>
  800420f6ee:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f6f3:	48 ba eb f0 20 04 80 	movabs $0x800420f0eb,%rdx
  800420f6fa:	00 00 00 
  800420f6fd:	ff d2                	callq  *%rdx
  800420f6ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f704:	eb 07                	jmp    800420f70d <syscall+0x2f8>
  800420f706:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
  800420f70d:	c9                   	leaveq 
  800420f70e:	c3                   	retq   

000000800420f70f <list_func_die>:
  800420f70f:	55                   	push   %rbp
  800420f710:	48 89 e5             	mov    %rsp,%rbp
  800420f713:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420f71a:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420f721:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420f728:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420f72f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f736:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420f73d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420f741:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f748:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f74f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f753:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420f75a:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f761:	48 89 d1             	mov    %rdx,%rcx
  800420f764:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f769:	48 89 ce             	mov    %rcx,%rsi
  800420f76c:	48 89 c7             	mov    %rax,%rdi
  800420f76f:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  800420f776:	00 00 00 
  800420f779:	ff d0                	callq  *%rax
  800420f77b:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420f782:	00 
  800420f783:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f78a:	00 
  800420f78b:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f792:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f796:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420f79a:	74 0a                	je     800420f7a6 <list_func_die+0x97>
  800420f79c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f7a1:	e9 cd 06 00 00       	jmpq   800420fe73 <list_func_die+0x764>
  800420f7a6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f7ad:	ba 38 00 00 00       	mov    $0x38,%edx
  800420f7b2:	be 00 00 00 00       	mov    $0x0,%esi
  800420f7b7:	48 89 c7             	mov    %rax,%rdi
  800420f7ba:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  800420f7c1:	00 00 00 
  800420f7c4:	ff d0                	callq  *%rax
  800420f7c6:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f7cd:	be 11 00 00 00       	mov    $0x11,%esi
  800420f7d2:	48 89 c7             	mov    %rax,%rdi
  800420f7d5:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420f7dc:	00 00 00 
  800420f7df:	ff d0                	callq  *%rax
  800420f7e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f7e5:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f7ec:	be 12 00 00 00       	mov    $0x12,%esi
  800420f7f1:	48 89 c7             	mov    %rax,%rdi
  800420f7f4:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420f7fb:	00 00 00 
  800420f7fe:	ff d0                	callq  *%rax
  800420f800:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420f804:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420f809:	0f 84 5f 06 00 00    	je     800420fe6e <list_func_die+0x75f>
  800420f80f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f813:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f817:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f81e:	0f 83 4a 06 00 00    	jae    800420fe6e <list_func_die+0x75f>
  800420f824:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420f829:	0f 84 3f 06 00 00    	je     800420fe6e <list_func_die+0x75f>
  800420f82f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f833:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f837:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f83e:	0f 86 2a 06 00 00    	jbe    800420fe6e <list_func_die+0x75f>
  800420f844:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f84b:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f852:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f859:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f860:	48 89 10             	mov    %rdx,(%rax)
  800420f863:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f86a:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f871:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f878:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f87c:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f883:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420f88a:	48 89 c7             	mov    %rax,%rdi
  800420f88d:	48 b8 04 0f 21 04 80 	movabs $0x8004210f04,%rax
  800420f894:	00 00 00 
  800420f897:	ff d0                	callq  *%rax
  800420f899:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420f8a0:	89 42 18             	mov    %eax,0x18(%rdx)
  800420f8a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f8a7:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420f8ab:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f8b2:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f8b6:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f8bd:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f8c4:	48 85 c0             	test   %rax,%rax
  800420f8c7:	75 35                	jne    800420f8fe <list_func_die+0x1ef>
  800420f8c9:	48 b9 60 fe 21 04 80 	movabs $0x800421fe60,%rcx
  800420f8d0:	00 00 00 
  800420f8d3:	48 ba 6c fe 21 04 80 	movabs $0x800421fe6c,%rdx
  800420f8da:	00 00 00 
  800420f8dd:	be 95 00 00 00       	mov    $0x95,%esi
  800420f8e2:	48 bf 81 fe 21 04 80 	movabs $0x800421fe81,%rdi
  800420f8e9:	00 00 00 
  800420f8ec:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f8f1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f8f8:	00 00 00 
  800420f8fb:	41 ff d0             	callq  *%r8
  800420f8fe:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f905:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f90c:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f913:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f91a:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f91f:	48 89 c7             	mov    %rax,%rdi
  800420f922:	48 b8 65 67 21 04 80 	movabs $0x8004216765,%rax
  800420f929:	00 00 00 
  800420f92c:	ff d0                	callq  *%rax
  800420f92e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f935:	89 c2                	mov    %eax,%edx
  800420f937:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f93e:	89 50 08             	mov    %edx,0x8(%rax)
  800420f941:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f948:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f94f:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800420f956:	00 00 00 
  800420f959:	48 8b 00             	mov    (%rax),%rax
  800420f95c:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f963:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f96a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f96e:	48 89 c7             	mov    %rax,%rdi
  800420f971:	48 b8 15 34 21 04 80 	movabs $0x8004213415,%rax
  800420f978:	00 00 00 
  800420f97b:	ff d0                	callq  *%rax
  800420f97d:	83 f8 04             	cmp    $0x4,%eax
  800420f980:	0f 84 e1 04 00 00    	je     800420fe67 <list_func_die+0x758>
  800420f986:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f98d:	48 83 f8 05          	cmp    $0x5,%rax
  800420f991:	74 05                	je     800420f998 <list_func_die+0x289>
  800420f993:	e9 cf 04 00 00       	jmpq   800420fe67 <list_func_die+0x758>
  800420f998:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f99f:	be 49 00 00 00       	mov    $0x49,%esi
  800420f9a4:	48 89 c7             	mov    %rax,%rdi
  800420f9a7:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420f9ae:	00 00 00 
  800420f9b1:	ff d0                	callq  *%rax
  800420f9b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f9b7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f9bc:	0f 84 d7 00 00 00    	je     800420fa99 <list_func_die+0x38a>
  800420f9c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f9c6:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f9ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f9ce:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f9d2:	48 01 d0             	add    %rdx,%rax
  800420f9d5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f9d9:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800420f9e0:	00 00 00 
  800420f9e3:	48 8b 08             	mov    (%rax),%rcx
  800420f9e6:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f9ed:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f9f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f9f5:	48 8b 38             	mov    (%rax),%rdi
  800420f9f8:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f9fc:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420fa00:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420fa05:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420fa09:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420fa0e:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420fa12:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420fa17:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420fa1b:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420fa20:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420fa24:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420fa29:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420fa2d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420fa32:	48 89 cf             	mov    %rcx,%rdi
  800420fa35:	48 b8 3b 30 21 04 80 	movabs $0x800421303b,%rax
  800420fa3c:	00 00 00 
  800420fa3f:	ff d0                	callq  *%rax
  800420fa41:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fa48:	be 0b 00 00 00       	mov    $0xb,%esi
  800420fa4d:	48 89 c7             	mov    %rax,%rdi
  800420fa50:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420fa57:	00 00 00 
  800420fa5a:	ff d0                	callq  *%rax
  800420fa5c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fa60:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fa65:	74 0e                	je     800420fa75 <list_func_die+0x366>
  800420fa67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa6b:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420fa6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fa73:	eb 24                	jmp    800420fa99 <list_func_die+0x38a>
  800420fa75:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fa7c:	be 49 00 00 00       	mov    $0x49,%esi
  800420fa81:	48 89 c7             	mov    %rax,%rdi
  800420fa84:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420fa8b:	00 00 00 
  800420fa8e:	ff d0                	callq  *%rax
  800420fa90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fa94:	e9 1e ff ff ff       	jmpq   800420f9b7 <list_func_die+0x2a8>
  800420fa99:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420faa0:	00 
  800420faa1:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420faa8:	be 02 00 00 00       	mov    $0x2,%esi
  800420faad:	48 89 c7             	mov    %rax,%rdi
  800420fab0:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420fab7:	00 00 00 
  800420faba:	ff d0                	callq  *%rax
  800420fabc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fac0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fac5:	0f 84 a2 00 00 00    	je     800420fb6d <list_func_die+0x45e>
  800420facb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420facf:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420fad3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420fad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fadb:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420fadf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420fae3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fae7:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420faeb:	48 83 f8 03          	cmp    $0x3,%rax
  800420faef:	72 7c                	jb     800420fb6d <list_func_die+0x45e>
  800420faf1:	48 83 f8 04          	cmp    $0x4,%rax
  800420faf5:	76 06                	jbe    800420fafd <list_func_die+0x3ee>
  800420faf7:	48 83 f8 0a          	cmp    $0xa,%rax
  800420fafb:	75 70                	jne    800420fb6d <list_func_die+0x45e>
  800420fafd:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420fb04:	00 
  800420fb05:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fb09:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fb0d:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420fb11:	0f b6 00             	movzbl (%rax),%eax
  800420fb14:	88 45 af             	mov    %al,-0x51(%rbp)
  800420fb17:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420fb1c:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420fb20:	75 4a                	jne    800420fb6c <list_func_die+0x45d>
  800420fb22:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fb26:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420fb2d:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420fb34:	48 89 c7             	mov    %rax,%rdi
  800420fb37:	48 b8 9a 1d 21 04 80 	movabs $0x8004211d9a,%rax
  800420fb3e:	00 00 00 
  800420fb41:	ff d0                	callq  *%rax
  800420fb43:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420fb47:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420fb4e:	48 89 c2             	mov    %rax,%rdx
  800420fb51:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fb55:	48 29 c2             	sub    %rax,%rdx
  800420fb58:	48 89 d0             	mov    %rdx,%rax
  800420fb5b:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420fb5f:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420fb66:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420fb6a:	eb 00                	jmp    800420fb6c <list_func_die+0x45d>
  800420fb6c:	90                   	nop
  800420fb6d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb74:	8b 48 28             	mov    0x28(%rax),%ecx
  800420fb77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fb7b:	89 c2                	mov    %eax,%edx
  800420fb7d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb84:	48 63 c9             	movslq %ecx,%rcx
  800420fb87:	48 83 c1 08          	add    $0x8,%rcx
  800420fb8b:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420fb8f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb96:	8b 50 28             	mov    0x28(%rax),%edx
  800420fb99:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fba0:	48 63 d2             	movslq %edx,%rdx
  800420fba3:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420fba7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fbab:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420fbb0:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fbb7:	8b 40 28             	mov    0x28(%rax),%eax
  800420fbba:	8d 50 01             	lea    0x1(%rax),%edx
  800420fbbd:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fbc4:	89 50 28             	mov    %edx,0x28(%rax)
  800420fbc7:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fbce:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420fbd5:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fbda:	48 89 ce             	mov    %rcx,%rsi
  800420fbdd:	48 89 c7             	mov    %rax,%rdi
  800420fbe0:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  800420fbe7:	00 00 00 
  800420fbea:	ff d0                	callq  *%rax
  800420fbec:	e9 40 02 00 00       	jmpq   800420fe31 <list_func_die+0x722>
  800420fbf1:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420fbf8:	48 83 f8 05          	cmp    $0x5,%rax
  800420fbfc:	74 05                	je     800420fc03 <list_func_die+0x4f4>
  800420fbfe:	e9 64 02 00 00       	jmpq   800420fe67 <list_func_die+0x758>
  800420fc03:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420fc0a:	be 49 00 00 00       	mov    $0x49,%esi
  800420fc0f:	48 89 c7             	mov    %rax,%rdi
  800420fc12:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420fc19:	00 00 00 
  800420fc1c:	ff d0                	callq  *%rax
  800420fc1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fc22:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fc27:	0f 84 b1 00 00 00    	je     800420fcde <list_func_die+0x5cf>
  800420fc2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fc31:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420fc35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc39:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420fc3d:	48 01 d0             	add    %rdx,%rax
  800420fc40:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420fc44:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800420fc4b:	00 00 00 
  800420fc4e:	48 8b 08             	mov    (%rax),%rcx
  800420fc51:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420fc58:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420fc5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420fc60:	48 8b 38             	mov    (%rax),%rdi
  800420fc63:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420fc67:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420fc6b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420fc70:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420fc74:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420fc79:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420fc7d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420fc82:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420fc86:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420fc8b:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420fc8f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420fc94:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420fc98:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420fc9d:	48 89 cf             	mov    %rcx,%rdi
  800420fca0:	48 b8 3b 30 21 04 80 	movabs $0x800421303b,%rax
  800420fca7:	00 00 00 
  800420fcaa:	ff d0                	callq  *%rax
  800420fcac:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fcb3:	be 0b 00 00 00       	mov    $0xb,%esi
  800420fcb8:	48 89 c7             	mov    %rax,%rdi
  800420fcbb:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420fcc2:	00 00 00 
  800420fcc5:	ff d0                	callq  *%rax
  800420fcc7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fccb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fcd0:	74 0c                	je     800420fcde <list_func_die+0x5cf>
  800420fcd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcd6:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420fcda:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fcde:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420fce5:	00 
  800420fce6:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420fced:	be 02 00 00 00       	mov    $0x2,%esi
  800420fcf2:	48 89 c7             	mov    %rax,%rdi
  800420fcf5:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800420fcfc:	00 00 00 
  800420fcff:	ff d0                	callq  *%rax
  800420fd01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fd05:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fd0a:	0f 84 a2 00 00 00    	je     800420fdb2 <list_func_die+0x6a3>
  800420fd10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd14:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420fd18:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420fd1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd20:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420fd24:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420fd28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd2c:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420fd30:	48 83 f8 03          	cmp    $0x3,%rax
  800420fd34:	72 7c                	jb     800420fdb2 <list_func_die+0x6a3>
  800420fd36:	48 83 f8 04          	cmp    $0x4,%rax
  800420fd3a:	76 06                	jbe    800420fd42 <list_func_die+0x633>
  800420fd3c:	48 83 f8 0a          	cmp    $0xa,%rax
  800420fd40:	75 70                	jne    800420fdb2 <list_func_die+0x6a3>
  800420fd42:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420fd49:	00 
  800420fd4a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fd4e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fd52:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fd56:	0f b6 00             	movzbl (%rax),%eax
  800420fd59:	88 45 97             	mov    %al,-0x69(%rbp)
  800420fd5c:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420fd61:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420fd65:	75 4a                	jne    800420fdb1 <list_func_die+0x6a2>
  800420fd67:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fd6b:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420fd72:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420fd79:	48 89 c7             	mov    %rax,%rdi
  800420fd7c:	48 b8 9a 1d 21 04 80 	movabs $0x8004211d9a,%rax
  800420fd83:	00 00 00 
  800420fd86:	ff d0                	callq  *%rax
  800420fd88:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420fd8c:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420fd93:	48 89 c2             	mov    %rax,%rdx
  800420fd96:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fd9a:	48 29 c2             	sub    %rax,%rdx
  800420fd9d:	48 89 d0             	mov    %rdx,%rax
  800420fda0:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420fda4:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420fdab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420fdaf:	eb 00                	jmp    800420fdb1 <list_func_die+0x6a2>
  800420fdb1:	90                   	nop
  800420fdb2:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fdb9:	8b 48 28             	mov    0x28(%rax),%ecx
  800420fdbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fdc0:	89 c2                	mov    %eax,%edx
  800420fdc2:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fdc9:	48 63 c9             	movslq %ecx,%rcx
  800420fdcc:	48 83 c1 08          	add    $0x8,%rcx
  800420fdd0:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420fdd4:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fddb:	8b 50 28             	mov    0x28(%rax),%edx
  800420fdde:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fde5:	48 63 d2             	movslq %edx,%rdx
  800420fde8:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420fdec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fdf0:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420fdf5:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fdfc:	8b 40 28             	mov    0x28(%rax),%eax
  800420fdff:	8d 50 01             	lea    0x1(%rax),%edx
  800420fe02:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fe09:	89 50 28             	mov    %edx,0x28(%rax)
  800420fe0c:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fe13:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420fe1a:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fe1f:	48 89 ce             	mov    %rcx,%rsi
  800420fe22:	48 89 c7             	mov    %rax,%rdi
  800420fe25:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  800420fe2c:	00 00 00 
  800420fe2f:	ff d0                	callq  *%rax
  800420fe31:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800420fe38:	00 00 00 
  800420fe3b:	48 8b 00             	mov    (%rax),%rax
  800420fe3e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fe42:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420fe49:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420fe50:	48 89 c7             	mov    %rax,%rdi
  800420fe53:	48 b8 d1 31 21 04 80 	movabs $0x80042131d1,%rax
  800420fe5a:	00 00 00 
  800420fe5d:	ff d0                	callq  *%rax
  800420fe5f:	85 c0                	test   %eax,%eax
  800420fe61:	0f 84 8a fd ff ff    	je     800420fbf1 <list_func_die+0x4e2>
  800420fe67:	b8 01 00 00 00       	mov    $0x1,%eax
  800420fe6c:	eb 05                	jmp    800420fe73 <list_func_die+0x764>
  800420fe6e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fe73:	c9                   	leaveq 
  800420fe74:	c3                   	retq   

000000800420fe75 <debuginfo_rip>:
  800420fe75:	55                   	push   %rbp
  800420fe76:	48 89 e5             	mov    %rsp,%rbp
  800420fe79:	53                   	push   %rbx
  800420fe7a:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420fe81:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420fe88:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420fe8f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420fe96:	00 
  800420fe97:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420fe9e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fea2:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fea9:	48 bb 92 fe 21 04 80 	movabs $0x800421fe92,%rbx
  800420feb0:	00 00 00 
  800420feb3:	48 89 18             	mov    %rbx,(%rax)
  800420feb6:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420febd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420fec4:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fecb:	48 bb 92 fe 21 04 80 	movabs $0x800421fe92,%rbx
  800420fed2:	00 00 00 
  800420fed5:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420fed9:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fee0:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420fee7:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420feee:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fef5:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420fef9:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ff00:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420ff07:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420ff0e:	00 00 00 
  800420ff11:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420ff18:	76 13                	jbe    800420ff2d <debuginfo_rip+0xb8>
  800420ff1a:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420ff21:	00 00 00 
  800420ff24:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ff28:	e9 04 01 00 00       	jmpq   8004210031 <debuginfo_rip+0x1bc>
  800420ff2d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ff34:	00 00 00 
  800420ff37:	ff d0                	callq  *%rax
  800420ff39:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ff40:	00 00 00 
  800420ff43:	48 98                	cltq   
  800420ff45:	48 c1 e0 03          	shl    $0x3,%rax
  800420ff49:	48 89 c1             	mov    %rax,%rcx
  800420ff4c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ff50:	48 01 c8             	add    %rcx,%rax
  800420ff53:	48 01 d0             	add    %rdx,%rax
  800420ff56:	48 83 c0 08          	add    $0x8,%rax
  800420ff5a:	48 8b 10             	mov    (%rax),%rdx
  800420ff5d:	48 b8 98 d2 4d 04 80 	movabs $0x80044dd298,%rax
  800420ff64:	00 00 00 
  800420ff67:	48 8b 00             	mov    (%rax),%rax
  800420ff6a:	48 39 c2             	cmp    %rax,%rdx
  800420ff6d:	0f 84 83 00 00 00    	je     800420fff6 <debuginfo_rip+0x181>
  800420ff73:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ff7a:	00 00 00 
  800420ff7d:	ff d0                	callq  *%rax
  800420ff7f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ff86:	00 00 00 
  800420ff89:	48 98                	cltq   
  800420ff8b:	48 c1 e0 03          	shl    $0x3,%rax
  800420ff8f:	48 89 c1             	mov    %rax,%rcx
  800420ff92:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ff96:	48 01 c8             	add    %rcx,%rax
  800420ff99:	48 01 d0             	add    %rdx,%rax
  800420ff9c:	48 83 c0 08          	add    $0x8,%rax
  800420ffa0:	48 8b 00             	mov    (%rax),%rax
  800420ffa3:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420ffaa:	48 89 c7             	mov    %rax,%rdi
  800420ffad:	48 b8 60 69 21 04 80 	movabs $0x8004216960,%rax
  800420ffb4:	00 00 00 
  800420ffb7:	ff d0                	callq  *%rax
  800420ffb9:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420ffc0:	00 00 00 
  800420ffc3:	ff d0                	callq  *%rax
  800420ffc5:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ffcc:	00 00 00 
  800420ffcf:	48 98                	cltq   
  800420ffd1:	48 c1 e0 03          	shl    $0x3,%rax
  800420ffd5:	48 89 c1             	mov    %rax,%rcx
  800420ffd8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ffdc:	48 01 c8             	add    %rcx,%rax
  800420ffdf:	48 01 d0             	add    %rdx,%rax
  800420ffe2:	48 83 c0 08          	add    $0x8,%rax
  800420ffe6:	48 8b 10             	mov    (%rax),%rdx
  800420ffe9:	48 b8 98 d2 4d 04 80 	movabs $0x80044dd298,%rax
  800420fff0:	00 00 00 
  800420fff3:	48 89 10             	mov    %rdx,(%rax)
  800420fff6:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800420fffd:	00 00 00 
  8004210000:	ff d0                	callq  *%rax
  8004210002:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004210009:	00 00 00 
  800421000c:	48 98                	cltq   
  800421000e:	48 c1 e0 03          	shl    $0x3,%rax
  8004210012:	48 89 c1             	mov    %rax,%rcx
  8004210015:	48 c1 e1 04          	shl    $0x4,%rcx
  8004210019:	48 01 c8             	add    %rcx,%rax
  800421001c:	48 01 d0             	add    %rdx,%rax
  800421001f:	48 83 c0 08          	add    $0x8,%rax
  8004210023:	48 8b 00             	mov    (%rax),%rax
  8004210026:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800421002d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210031:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004210038:	00 00 00 
  800421003b:	48 8b 00             	mov    (%rax),%rax
  800421003e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210042:	48 89 d6             	mov    %rdx,%rsi
  8004210045:	48 89 c7             	mov    %rax,%rdi
  8004210048:	48 b8 49 20 21 04 80 	movabs $0x8004212049,%rax
  800421004f:	00 00 00 
  8004210052:	ff d0                	callq  *%rax
  8004210054:	48 bf 9c fe 21 04 80 	movabs $0x800421fe9c,%rdi
  800421005b:	00 00 00 
  800421005e:	48 b8 e0 68 21 04 80 	movabs $0x80042168e0,%rax
  8004210065:	00 00 00 
  8004210068:	ff d0                	callq  *%rax
  800421006a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421006e:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004210075:	00 00 00 
  8004210078:	48 8b 00             	mov    (%rax),%rax
  800421007b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421007f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004210083:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004210087:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800421008e:	00 00 00 
  8004210091:	48 8b 00             	mov    (%rax),%rax
  8004210094:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210098:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800421009c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042100a0:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042100a7:	00 00 00 
  80042100aa:	48 8b 00             	mov    (%rax),%rax
  80042100ad:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042100b1:	48 85 c0             	test   %rax,%rax
  80042100b4:	75 35                	jne    80042100eb <debuginfo_rip+0x276>
  80042100b6:	48 b9 a8 fe 21 04 80 	movabs $0x800421fea8,%rcx
  80042100bd:	00 00 00 
  80042100c0:	48 ba 6c fe 21 04 80 	movabs $0x800421fe6c,%rdx
  80042100c7:	00 00 00 
  80042100ca:	be 40 01 00 00       	mov    $0x140,%esi
  80042100cf:	48 bf 81 fe 21 04 80 	movabs $0x800421fe81,%rdi
  80042100d6:	00 00 00 
  80042100d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042100de:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042100e5:	00 00 00 
  80042100e8:	41 ff d0             	callq  *%r8
  80042100eb:	e9 6f 01 00 00       	jmpq   800421025f <debuginfo_rip+0x3ea>
  80042100f0:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042100f7:	00 00 00 
  80042100fa:	48 8b 00             	mov    (%rax),%rax
  80042100fd:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  8004210101:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  8004210108:	be 00 00 00 00       	mov    $0x0,%esi
  800421010d:	48 89 c7             	mov    %rax,%rdi
  8004210110:	48 b8 d1 31 21 04 80 	movabs $0x80042131d1,%rax
  8004210117:	00 00 00 
  800421011a:	ff d0                	callq  *%rax
  800421011c:	83 f8 04             	cmp    $0x4,%eax
  800421011f:	75 05                	jne    8004210126 <debuginfo_rip+0x2b1>
  8004210121:	e9 39 01 00 00       	jmpq   800421025f <debuginfo_rip+0x3ea>
  8004210126:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800421012a:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  8004210131:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  8004210138:	00 00 00 00 
  800421013c:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004210143:	00 00 00 
  8004210146:	48 8b 00             	mov    (%rax),%rax
  8004210149:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  8004210150:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  8004210157:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800421015b:	48 89 c7             	mov    %rax,%rdi
  800421015e:	48 b8 15 34 21 04 80 	movabs $0x8004213415,%rax
  8004210165:	00 00 00 
  8004210168:	ff d0                	callq  *%rax
  800421016a:	83 f8 04             	cmp    $0x4,%eax
  800421016d:	75 05                	jne    8004210174 <debuginfo_rip+0x2ff>
  800421016f:	e9 eb 00 00 00       	jmpq   800421025f <debuginfo_rip+0x3ea>
  8004210174:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004210178:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800421017f:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  8004210186:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800421018d:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  8004210194:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800421019b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  80042101a2:	48 89 ce             	mov    %rcx,%rsi
  80042101a5:	48 89 c7             	mov    %rax,%rdi
  80042101a8:	48 b8 0f f7 20 04 80 	movabs $0x800420f70f,%rax
  80042101af:	00 00 00 
  80042101b2:	ff d0                	callq  *%rax
  80042101b4:	85 c0                	test   %eax,%eax
  80042101b6:	74 30                	je     80042101e8 <debuginfo_rip+0x373>
  80042101b8:	90                   	nop
  80042101b9:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042101c0:	00 00 00 
  80042101c3:	48 8b 00             	mov    (%rax),%rax
  80042101c6:	be 00 00 00 00       	mov    $0x0,%esi
  80042101cb:	48 89 c7             	mov    %rax,%rdi
  80042101ce:	48 b8 ed 5a 21 04 80 	movabs $0x8004215aed,%rax
  80042101d5:	00 00 00 
  80042101d8:	ff d0                	callq  *%rax
  80042101da:	83 f8 01             	cmp    $0x1,%eax
  80042101dd:	0f 85 bb 00 00 00    	jne    800421029e <debuginfo_rip+0x429>
  80042101e3:	e9 ac 00 00 00       	jmpq   8004210294 <debuginfo_rip+0x41f>
  80042101e8:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042101ef:	00 00 00 
  80042101f2:	48 8b 00             	mov    (%rax),%rax
  80042101f5:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  80042101f9:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  8004210200:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  8004210207:	48 89 c7             	mov    %rax,%rdi
  800421020a:	48 b8 d1 31 21 04 80 	movabs $0x80042131d1,%rax
  8004210211:	00 00 00 
  8004210214:	ff d0                	callq  *%rax
  8004210216:	85 c0                	test   %eax,%eax
  8004210218:	79 02                	jns    800421021c <debuginfo_rip+0x3a7>
  800421021a:	eb 43                	jmp    800421025f <debuginfo_rip+0x3ea>
  800421021c:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  8004210223:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800421022a:	ba 70 30 00 00       	mov    $0x3070,%edx
  800421022f:	48 89 ce             	mov    %rcx,%rsi
  8004210232:	48 89 c7             	mov    %rax,%rdi
  8004210235:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  800421023c:	00 00 00 
  800421023f:	ff d0                	callq  *%rax
  8004210241:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004210245:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800421024c:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  8004210253:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800421025a:	e9 2e ff ff ff       	jmpq   800421018d <debuginfo_rip+0x318>
  800421025f:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004210266:	00 00 00 
  8004210269:	48 8b 00             	mov    (%rax),%rax
  800421026c:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  8004210270:	48 89 d6             	mov    %rdx,%rsi
  8004210273:	48 89 c7             	mov    %rax,%rdi
  8004210276:	48 b8 2b 21 21 04 80 	movabs $0x800421212b,%rax
  800421027d:	00 00 00 
  8004210280:	ff d0                	callq  *%rax
  8004210282:	85 c0                	test   %eax,%eax
  8004210284:	0f 84 66 fe ff ff    	je     80042100f0 <debuginfo_rip+0x27b>
  800421028a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421028f:	e9 a0 00 00 00       	jmpq   8004210334 <debuginfo_rip+0x4bf>
  8004210294:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004210299:	e9 96 00 00 00       	jmpq   8004210334 <debuginfo_rip+0x4bf>
  800421029e:	48 b8 80 46 23 04 80 	movabs $0x8004234680,%rax
  80042102a5:	00 00 00 
  80042102a8:	48 8b 08             	mov    (%rax),%rcx
  80042102ab:	48 b8 78 46 23 04 80 	movabs $0x8004234678,%rax
  80042102b2:	00 00 00 
  80042102b5:	48 8b 10             	mov    (%rax),%rdx
  80042102b8:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042102bf:	00 00 00 
  80042102c2:	48 8b 00             	mov    (%rax),%rax
  80042102c5:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  80042102cc:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042102d2:	48 89 c7             	mov    %rax,%rdi
  80042102d5:	48 b8 56 36 21 04 80 	movabs $0x8004213656,%rax
  80042102dc:	00 00 00 
  80042102df:	ff d0                	callq  *%rax
  80042102e1:	85 c0                	test   %eax,%eax
  80042102e3:	75 4a                	jne    800421032f <debuginfo_rip+0x4ba>
  80042102e5:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  80042102ec:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  80042102f3:	48 b8 78 46 23 04 80 	movabs $0x8004234678,%rax
  80042102fa:	00 00 00 
  80042102fd:	48 8b 30             	mov    (%rax),%rsi
  8004210300:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004210307:	00 00 00 
  800421030a:	48 8b 00             	mov    (%rax),%rax
  800421030d:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  8004210314:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800421031a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004210320:	48 89 c7             	mov    %rax,%rdi
  8004210323:	48 b8 62 49 21 04 80 	movabs $0x8004214962,%rax
  800421032a:	00 00 00 
  800421032d:	ff d0                	callq  *%rax
  800421032f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210334:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800421033b:	5b                   	pop    %rbx
  800421033c:	5d                   	pop    %rbp
  800421033d:	c3                   	retq   

000000800421033e <printnum>:
  800421033e:	55                   	push   %rbp
  800421033f:	48 89 e5             	mov    %rsp,%rbp
  8004210342:	53                   	push   %rbx
  8004210343:	48 83 ec 38          	sub    $0x38,%rsp
  8004210347:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421034b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421034f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210353:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  8004210356:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800421035a:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800421035e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004210361:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004210365:	77 3b                	ja     80042103a2 <printnum+0x64>
  8004210367:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421036a:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800421036e:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  8004210371:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210375:	ba 00 00 00 00       	mov    $0x0,%edx
  800421037a:	48 f7 f3             	div    %rbx
  800421037d:	48 89 c2             	mov    %rax,%rdx
  8004210380:	8b 7d cc             	mov    -0x34(%rbp),%edi
  8004210383:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  8004210386:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800421038a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421038e:	41 89 f9             	mov    %edi,%r9d
  8004210391:	48 89 c7             	mov    %rax,%rdi
  8004210394:	48 b8 3e 03 21 04 80 	movabs $0x800421033e,%rax
  800421039b:	00 00 00 
  800421039e:	ff d0                	callq  *%rax
  80042103a0:	eb 1e                	jmp    80042103c0 <printnum+0x82>
  80042103a2:	eb 12                	jmp    80042103b6 <printnum+0x78>
  80042103a4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  80042103a8:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042103ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042103af:	48 89 ce             	mov    %rcx,%rsi
  80042103b2:	89 d7                	mov    %edx,%edi
  80042103b4:	ff d0                	callq  *%rax
  80042103b6:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  80042103ba:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  80042103be:	7f e4                	jg     80042103a4 <printnum+0x66>
  80042103c0:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  80042103c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103c7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042103cc:	48 f7 f1             	div    %rcx
  80042103cf:	48 89 d0             	mov    %rdx,%rax
  80042103d2:	48 ba b0 00 22 04 80 	movabs $0x80042200b0,%rdx
  80042103d9:	00 00 00 
  80042103dc:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  80042103e0:	0f be d0             	movsbl %al,%edx
  80042103e3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  80042103e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042103eb:	48 89 ce             	mov    %rcx,%rsi
  80042103ee:	89 d7                	mov    %edx,%edi
  80042103f0:	ff d0                	callq  *%rax
  80042103f2:	48 83 c4 38          	add    $0x38,%rsp
  80042103f6:	5b                   	pop    %rbx
  80042103f7:	5d                   	pop    %rbp
  80042103f8:	c3                   	retq   

00000080042103f9 <getuint>:
  80042103f9:	55                   	push   %rbp
  80042103fa:	48 89 e5             	mov    %rsp,%rbp
  80042103fd:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210401:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210405:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210408:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800421040c:	7e 52                	jle    8004210460 <getuint+0x67>
  800421040e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210412:	8b 00                	mov    (%rax),%eax
  8004210414:	83 f8 30             	cmp    $0x30,%eax
  8004210417:	73 24                	jae    800421043d <getuint+0x44>
  8004210419:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421041d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210421:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210425:	8b 00                	mov    (%rax),%eax
  8004210427:	89 c0                	mov    %eax,%eax
  8004210429:	48 01 d0             	add    %rdx,%rax
  800421042c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210430:	8b 12                	mov    (%rdx),%edx
  8004210432:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210435:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210439:	89 0a                	mov    %ecx,(%rdx)
  800421043b:	eb 17                	jmp    8004210454 <getuint+0x5b>
  800421043d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210441:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210445:	48 89 d0             	mov    %rdx,%rax
  8004210448:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421044c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210450:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210454:	48 8b 00             	mov    (%rax),%rax
  8004210457:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421045b:	e9 a3 00 00 00       	jmpq   8004210503 <getuint+0x10a>
  8004210460:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004210464:	74 4f                	je     80042104b5 <getuint+0xbc>
  8004210466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421046a:	8b 00                	mov    (%rax),%eax
  800421046c:	83 f8 30             	cmp    $0x30,%eax
  800421046f:	73 24                	jae    8004210495 <getuint+0x9c>
  8004210471:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210475:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210479:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421047d:	8b 00                	mov    (%rax),%eax
  800421047f:	89 c0                	mov    %eax,%eax
  8004210481:	48 01 d0             	add    %rdx,%rax
  8004210484:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210488:	8b 12                	mov    (%rdx),%edx
  800421048a:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800421048d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210491:	89 0a                	mov    %ecx,(%rdx)
  8004210493:	eb 17                	jmp    80042104ac <getuint+0xb3>
  8004210495:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210499:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421049d:	48 89 d0             	mov    %rdx,%rax
  80042104a0:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042104a4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042104a8:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042104ac:	48 8b 00             	mov    (%rax),%rax
  80042104af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042104b3:	eb 4e                	jmp    8004210503 <getuint+0x10a>
  80042104b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042104b9:	8b 00                	mov    (%rax),%eax
  80042104bb:	83 f8 30             	cmp    $0x30,%eax
  80042104be:	73 24                	jae    80042104e4 <getuint+0xeb>
  80042104c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042104c4:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042104c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042104cc:	8b 00                	mov    (%rax),%eax
  80042104ce:	89 c0                	mov    %eax,%eax
  80042104d0:	48 01 d0             	add    %rdx,%rax
  80042104d3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042104d7:	8b 12                	mov    (%rdx),%edx
  80042104d9:	8d 4a 08             	lea    0x8(%rdx),%ecx
  80042104dc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042104e0:	89 0a                	mov    %ecx,(%rdx)
  80042104e2:	eb 17                	jmp    80042104fb <getuint+0x102>
  80042104e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042104e8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042104ec:	48 89 d0             	mov    %rdx,%rax
  80042104ef:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042104f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042104f7:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042104fb:	8b 00                	mov    (%rax),%eax
  80042104fd:	89 c0                	mov    %eax,%eax
  80042104ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210503:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210507:	c9                   	leaveq 
  8004210508:	c3                   	retq   

0000008004210509 <getint>:
  8004210509:	55                   	push   %rbp
  800421050a:	48 89 e5             	mov    %rsp,%rbp
  800421050d:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210511:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210515:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210518:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800421051c:	7e 52                	jle    8004210570 <getint+0x67>
  800421051e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210522:	8b 00                	mov    (%rax),%eax
  8004210524:	83 f8 30             	cmp    $0x30,%eax
  8004210527:	73 24                	jae    800421054d <getint+0x44>
  8004210529:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421052d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210531:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210535:	8b 00                	mov    (%rax),%eax
  8004210537:	89 c0                	mov    %eax,%eax
  8004210539:	48 01 d0             	add    %rdx,%rax
  800421053c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210540:	8b 12                	mov    (%rdx),%edx
  8004210542:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210545:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210549:	89 0a                	mov    %ecx,(%rdx)
  800421054b:	eb 17                	jmp    8004210564 <getint+0x5b>
  800421054d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210551:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210555:	48 89 d0             	mov    %rdx,%rax
  8004210558:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421055c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210560:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210564:	48 8b 00             	mov    (%rax),%rax
  8004210567:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421056b:	e9 a3 00 00 00       	jmpq   8004210613 <getint+0x10a>
  8004210570:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004210574:	74 4f                	je     80042105c5 <getint+0xbc>
  8004210576:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421057a:	8b 00                	mov    (%rax),%eax
  800421057c:	83 f8 30             	cmp    $0x30,%eax
  800421057f:	73 24                	jae    80042105a5 <getint+0x9c>
  8004210581:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210585:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210589:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421058d:	8b 00                	mov    (%rax),%eax
  800421058f:	89 c0                	mov    %eax,%eax
  8004210591:	48 01 d0             	add    %rdx,%rax
  8004210594:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210598:	8b 12                	mov    (%rdx),%edx
  800421059a:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800421059d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042105a1:	89 0a                	mov    %ecx,(%rdx)
  80042105a3:	eb 17                	jmp    80042105bc <getint+0xb3>
  80042105a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105a9:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042105ad:	48 89 d0             	mov    %rdx,%rax
  80042105b0:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042105b4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042105b8:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042105bc:	48 8b 00             	mov    (%rax),%rax
  80042105bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042105c3:	eb 4e                	jmp    8004210613 <getint+0x10a>
  80042105c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105c9:	8b 00                	mov    (%rax),%eax
  80042105cb:	83 f8 30             	cmp    $0x30,%eax
  80042105ce:	73 24                	jae    80042105f4 <getint+0xeb>
  80042105d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105d4:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042105d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105dc:	8b 00                	mov    (%rax),%eax
  80042105de:	89 c0                	mov    %eax,%eax
  80042105e0:	48 01 d0             	add    %rdx,%rax
  80042105e3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042105e7:	8b 12                	mov    (%rdx),%edx
  80042105e9:	8d 4a 08             	lea    0x8(%rdx),%ecx
  80042105ec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042105f0:	89 0a                	mov    %ecx,(%rdx)
  80042105f2:	eb 17                	jmp    800421060b <getint+0x102>
  80042105f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105f8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042105fc:	48 89 d0             	mov    %rdx,%rax
  80042105ff:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  8004210603:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210607:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800421060b:	8b 00                	mov    (%rax),%eax
  800421060d:	48 98                	cltq   
  800421060f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210617:	c9                   	leaveq 
  8004210618:	c3                   	retq   

0000008004210619 <vprintfmt>:
  8004210619:	55                   	push   %rbp
  800421061a:	48 89 e5             	mov    %rsp,%rbp
  800421061d:	41 54                	push   %r12
  800421061f:	53                   	push   %rbx
  8004210620:	48 83 ec 60          	sub    $0x60,%rsp
  8004210624:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004210628:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421062c:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210630:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004210634:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210638:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421063c:	48 8b 0a             	mov    (%rdx),%rcx
  800421063f:	48 89 08             	mov    %rcx,(%rax)
  8004210642:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210646:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800421064a:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800421064e:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210652:	eb 17                	jmp    800421066b <vprintfmt+0x52>
  8004210654:	85 db                	test   %ebx,%ebx
  8004210656:	0f 84 cc 04 00 00    	je     8004210b28 <vprintfmt+0x50f>
  800421065c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210660:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210664:	48 89 d6             	mov    %rdx,%rsi
  8004210667:	89 df                	mov    %ebx,%edi
  8004210669:	ff d0                	callq  *%rax
  800421066b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421066f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210673:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210677:	0f b6 00             	movzbl (%rax),%eax
  800421067a:	0f b6 d8             	movzbl %al,%ebx
  800421067d:	83 fb 25             	cmp    $0x25,%ebx
  8004210680:	75 d2                	jne    8004210654 <vprintfmt+0x3b>
  8004210682:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004210686:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800421068d:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  8004210694:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800421069b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  80042106a2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042106a6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042106aa:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  80042106ae:	0f b6 00             	movzbl (%rax),%eax
  80042106b1:	0f b6 d8             	movzbl %al,%ebx
  80042106b4:	8d 43 dd             	lea    -0x23(%rbx),%eax
  80042106b7:	83 f8 55             	cmp    $0x55,%eax
  80042106ba:	0f 87 34 04 00 00    	ja     8004210af4 <vprintfmt+0x4db>
  80042106c0:	89 c0                	mov    %eax,%eax
  80042106c2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042106c9:	00 
  80042106ca:	48 b8 d8 00 22 04 80 	movabs $0x80042200d8,%rax
  80042106d1:	00 00 00 
  80042106d4:	48 01 d0             	add    %rdx,%rax
  80042106d7:	48 8b 00             	mov    (%rax),%rax
  80042106da:	ff e0                	jmpq   *%rax
  80042106dc:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  80042106e0:	eb c0                	jmp    80042106a2 <vprintfmt+0x89>
  80042106e2:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  80042106e6:	eb ba                	jmp    80042106a2 <vprintfmt+0x89>
  80042106e8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  80042106ef:	8b 55 d8             	mov    -0x28(%rbp),%edx
  80042106f2:	89 d0                	mov    %edx,%eax
  80042106f4:	c1 e0 02             	shl    $0x2,%eax
  80042106f7:	01 d0                	add    %edx,%eax
  80042106f9:	01 c0                	add    %eax,%eax
  80042106fb:	01 d8                	add    %ebx,%eax
  80042106fd:	83 e8 30             	sub    $0x30,%eax
  8004210700:	89 45 d8             	mov    %eax,-0x28(%rbp)
  8004210703:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210707:	0f b6 00             	movzbl (%rax),%eax
  800421070a:	0f be d8             	movsbl %al,%ebx
  800421070d:	83 fb 2f             	cmp    $0x2f,%ebx
  8004210710:	7e 0c                	jle    800421071e <vprintfmt+0x105>
  8004210712:	83 fb 39             	cmp    $0x39,%ebx
  8004210715:	7f 07                	jg     800421071e <vprintfmt+0x105>
  8004210717:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800421071c:	eb d1                	jmp    80042106ef <vprintfmt+0xd6>
  800421071e:	eb 58                	jmp    8004210778 <vprintfmt+0x15f>
  8004210720:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210723:	83 f8 30             	cmp    $0x30,%eax
  8004210726:	73 17                	jae    800421073f <vprintfmt+0x126>
  8004210728:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421072c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421072f:	89 c0                	mov    %eax,%eax
  8004210731:	48 01 d0             	add    %rdx,%rax
  8004210734:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210737:	83 c2 08             	add    $0x8,%edx
  800421073a:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421073d:	eb 0f                	jmp    800421074e <vprintfmt+0x135>
  800421073f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210743:	48 89 d0             	mov    %rdx,%rax
  8004210746:	48 83 c2 08          	add    $0x8,%rdx
  800421074a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421074e:	8b 00                	mov    (%rax),%eax
  8004210750:	89 45 d8             	mov    %eax,-0x28(%rbp)
  8004210753:	eb 23                	jmp    8004210778 <vprintfmt+0x15f>
  8004210755:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210759:	79 0c                	jns    8004210767 <vprintfmt+0x14e>
  800421075b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  8004210762:	e9 3b ff ff ff       	jmpq   80042106a2 <vprintfmt+0x89>
  8004210767:	e9 36 ff ff ff       	jmpq   80042106a2 <vprintfmt+0x89>
  800421076c:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  8004210773:	e9 2a ff ff ff       	jmpq   80042106a2 <vprintfmt+0x89>
  8004210778:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421077c:	79 12                	jns    8004210790 <vprintfmt+0x177>
  800421077e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210781:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004210784:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800421078b:	e9 12 ff ff ff       	jmpq   80042106a2 <vprintfmt+0x89>
  8004210790:	e9 0d ff ff ff       	jmpq   80042106a2 <vprintfmt+0x89>
  8004210795:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004210799:	e9 04 ff ff ff       	jmpq   80042106a2 <vprintfmt+0x89>
  800421079e:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042107a1:	83 f8 30             	cmp    $0x30,%eax
  80042107a4:	73 17                	jae    80042107bd <vprintfmt+0x1a4>
  80042107a6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042107aa:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042107ad:	89 c0                	mov    %eax,%eax
  80042107af:	48 01 d0             	add    %rdx,%rax
  80042107b2:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042107b5:	83 c2 08             	add    $0x8,%edx
  80042107b8:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042107bb:	eb 0f                	jmp    80042107cc <vprintfmt+0x1b3>
  80042107bd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042107c1:	48 89 d0             	mov    %rdx,%rax
  80042107c4:	48 83 c2 08          	add    $0x8,%rdx
  80042107c8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042107cc:	8b 10                	mov    (%rax),%edx
  80042107ce:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042107d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042107d6:	48 89 ce             	mov    %rcx,%rsi
  80042107d9:	89 d7                	mov    %edx,%edi
  80042107db:	ff d0                	callq  *%rax
  80042107dd:	e9 40 03 00 00       	jmpq   8004210b22 <vprintfmt+0x509>
  80042107e2:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042107e5:	83 f8 30             	cmp    $0x30,%eax
  80042107e8:	73 17                	jae    8004210801 <vprintfmt+0x1e8>
  80042107ea:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042107ee:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042107f1:	89 c0                	mov    %eax,%eax
  80042107f3:	48 01 d0             	add    %rdx,%rax
  80042107f6:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042107f9:	83 c2 08             	add    $0x8,%edx
  80042107fc:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042107ff:	eb 0f                	jmp    8004210810 <vprintfmt+0x1f7>
  8004210801:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210805:	48 89 d0             	mov    %rdx,%rax
  8004210808:	48 83 c2 08          	add    $0x8,%rdx
  800421080c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210810:	8b 18                	mov    (%rax),%ebx
  8004210812:	85 db                	test   %ebx,%ebx
  8004210814:	79 02                	jns    8004210818 <vprintfmt+0x1ff>
  8004210816:	f7 db                	neg    %ebx
  8004210818:	83 fb 15             	cmp    $0x15,%ebx
  800421081b:	7f 16                	jg     8004210833 <vprintfmt+0x21a>
  800421081d:	48 b8 00 00 22 04 80 	movabs $0x8004220000,%rax
  8004210824:	00 00 00 
  8004210827:	48 63 d3             	movslq %ebx,%rdx
  800421082a:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800421082e:	4d 85 e4             	test   %r12,%r12
  8004210831:	75 2e                	jne    8004210861 <vprintfmt+0x248>
  8004210833:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210837:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421083b:	89 d9                	mov    %ebx,%ecx
  800421083d:	48 ba c1 00 22 04 80 	movabs $0x80042200c1,%rdx
  8004210844:	00 00 00 
  8004210847:	48 89 c7             	mov    %rax,%rdi
  800421084a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421084f:	49 b8 31 0b 21 04 80 	movabs $0x8004210b31,%r8
  8004210856:	00 00 00 
  8004210859:	41 ff d0             	callq  *%r8
  800421085c:	e9 c1 02 00 00       	jmpq   8004210b22 <vprintfmt+0x509>
  8004210861:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210865:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210869:	4c 89 e1             	mov    %r12,%rcx
  800421086c:	48 ba ca 00 22 04 80 	movabs $0x80042200ca,%rdx
  8004210873:	00 00 00 
  8004210876:	48 89 c7             	mov    %rax,%rdi
  8004210879:	b8 00 00 00 00       	mov    $0x0,%eax
  800421087e:	49 b8 31 0b 21 04 80 	movabs $0x8004210b31,%r8
  8004210885:	00 00 00 
  8004210888:	41 ff d0             	callq  *%r8
  800421088b:	e9 92 02 00 00       	jmpq   8004210b22 <vprintfmt+0x509>
  8004210890:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210893:	83 f8 30             	cmp    $0x30,%eax
  8004210896:	73 17                	jae    80042108af <vprintfmt+0x296>
  8004210898:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421089c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421089f:	89 c0                	mov    %eax,%eax
  80042108a1:	48 01 d0             	add    %rdx,%rax
  80042108a4:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042108a7:	83 c2 08             	add    $0x8,%edx
  80042108aa:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042108ad:	eb 0f                	jmp    80042108be <vprintfmt+0x2a5>
  80042108af:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042108b3:	48 89 d0             	mov    %rdx,%rax
  80042108b6:	48 83 c2 08          	add    $0x8,%rdx
  80042108ba:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042108be:	4c 8b 20             	mov    (%rax),%r12
  80042108c1:	4d 85 e4             	test   %r12,%r12
  80042108c4:	75 0a                	jne    80042108d0 <vprintfmt+0x2b7>
  80042108c6:	49 bc cd 00 22 04 80 	movabs $0x80042200cd,%r12
  80042108cd:	00 00 00 
  80042108d0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042108d4:	7e 3f                	jle    8004210915 <vprintfmt+0x2fc>
  80042108d6:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  80042108da:	74 39                	je     8004210915 <vprintfmt+0x2fc>
  80042108dc:	8b 45 d8             	mov    -0x28(%rbp),%eax
  80042108df:	48 98                	cltq   
  80042108e1:	48 89 c6             	mov    %rax,%rsi
  80042108e4:	4c 89 e7             	mov    %r12,%rdi
  80042108e7:	48 b8 32 0f 21 04 80 	movabs $0x8004210f32,%rax
  80042108ee:	00 00 00 
  80042108f1:	ff d0                	callq  *%rax
  80042108f3:	29 45 dc             	sub    %eax,-0x24(%rbp)
  80042108f6:	eb 17                	jmp    800421090f <vprintfmt+0x2f6>
  80042108f8:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  80042108fc:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004210900:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210904:	48 89 ce             	mov    %rcx,%rsi
  8004210907:	89 d7                	mov    %edx,%edi
  8004210909:	ff d0                	callq  *%rax
  800421090b:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800421090f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210913:	7f e3                	jg     80042108f8 <vprintfmt+0x2df>
  8004210915:	eb 37                	jmp    800421094e <vprintfmt+0x335>
  8004210917:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800421091b:	74 1e                	je     800421093b <vprintfmt+0x322>
  800421091d:	83 fb 1f             	cmp    $0x1f,%ebx
  8004210920:	7e 05                	jle    8004210927 <vprintfmt+0x30e>
  8004210922:	83 fb 7e             	cmp    $0x7e,%ebx
  8004210925:	7e 14                	jle    800421093b <vprintfmt+0x322>
  8004210927:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421092b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421092f:	48 89 d6             	mov    %rdx,%rsi
  8004210932:	bf 3f 00 00 00       	mov    $0x3f,%edi
  8004210937:	ff d0                	callq  *%rax
  8004210939:	eb 0f                	jmp    800421094a <vprintfmt+0x331>
  800421093b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421093f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210943:	48 89 d6             	mov    %rdx,%rsi
  8004210946:	89 df                	mov    %ebx,%edi
  8004210948:	ff d0                	callq  *%rax
  800421094a:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800421094e:	4c 89 e0             	mov    %r12,%rax
  8004210951:	4c 8d 60 01          	lea    0x1(%rax),%r12
  8004210955:	0f b6 00             	movzbl (%rax),%eax
  8004210958:	0f be d8             	movsbl %al,%ebx
  800421095b:	85 db                	test   %ebx,%ebx
  800421095d:	74 10                	je     800421096f <vprintfmt+0x356>
  800421095f:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004210963:	78 b2                	js     8004210917 <vprintfmt+0x2fe>
  8004210965:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  8004210969:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800421096d:	79 a8                	jns    8004210917 <vprintfmt+0x2fe>
  800421096f:	eb 16                	jmp    8004210987 <vprintfmt+0x36e>
  8004210971:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210975:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210979:	48 89 d6             	mov    %rdx,%rsi
  800421097c:	bf 20 00 00 00       	mov    $0x20,%edi
  8004210981:	ff d0                	callq  *%rax
  8004210983:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210987:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421098b:	7f e4                	jg     8004210971 <vprintfmt+0x358>
  800421098d:	e9 90 01 00 00       	jmpq   8004210b22 <vprintfmt+0x509>
  8004210992:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210996:	be 03 00 00 00       	mov    $0x3,%esi
  800421099b:	48 89 c7             	mov    %rax,%rdi
  800421099e:	48 b8 09 05 21 04 80 	movabs $0x8004210509,%rax
  80042109a5:	00 00 00 
  80042109a8:	ff d0                	callq  *%rax
  80042109aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042109ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109b2:	48 85 c0             	test   %rax,%rax
  80042109b5:	79 1d                	jns    80042109d4 <vprintfmt+0x3bb>
  80042109b7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042109bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042109bf:	48 89 d6             	mov    %rdx,%rsi
  80042109c2:	bf 2d 00 00 00       	mov    $0x2d,%edi
  80042109c7:	ff d0                	callq  *%rax
  80042109c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109cd:	48 f7 d8             	neg    %rax
  80042109d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042109d4:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  80042109db:	e9 d5 00 00 00       	jmpq   8004210ab5 <vprintfmt+0x49c>
  80042109e0:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042109e4:	be 03 00 00 00       	mov    $0x3,%esi
  80042109e9:	48 89 c7             	mov    %rax,%rdi
  80042109ec:	48 b8 f9 03 21 04 80 	movabs $0x80042103f9,%rax
  80042109f3:	00 00 00 
  80042109f6:	ff d0                	callq  *%rax
  80042109f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042109fc:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  8004210a03:	e9 ad 00 00 00       	jmpq   8004210ab5 <vprintfmt+0x49c>
  8004210a08:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210a0c:	be 03 00 00 00       	mov    $0x3,%esi
  8004210a11:	48 89 c7             	mov    %rax,%rdi
  8004210a14:	48 b8 f9 03 21 04 80 	movabs $0x80042103f9,%rax
  8004210a1b:	00 00 00 
  8004210a1e:	ff d0                	callq  *%rax
  8004210a20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210a24:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  8004210a2b:	e9 85 00 00 00       	jmpq   8004210ab5 <vprintfmt+0x49c>
  8004210a30:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210a34:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210a38:	48 89 d6             	mov    %rdx,%rsi
  8004210a3b:	bf 30 00 00 00       	mov    $0x30,%edi
  8004210a40:	ff d0                	callq  *%rax
  8004210a42:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210a46:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210a4a:	48 89 d6             	mov    %rdx,%rsi
  8004210a4d:	bf 78 00 00 00       	mov    $0x78,%edi
  8004210a52:	ff d0                	callq  *%rax
  8004210a54:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210a57:	83 f8 30             	cmp    $0x30,%eax
  8004210a5a:	73 17                	jae    8004210a73 <vprintfmt+0x45a>
  8004210a5c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210a60:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210a63:	89 c0                	mov    %eax,%eax
  8004210a65:	48 01 d0             	add    %rdx,%rax
  8004210a68:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210a6b:	83 c2 08             	add    $0x8,%edx
  8004210a6e:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210a71:	eb 0f                	jmp    8004210a82 <vprintfmt+0x469>
  8004210a73:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210a77:	48 89 d0             	mov    %rdx,%rax
  8004210a7a:	48 83 c2 08          	add    $0x8,%rdx
  8004210a7e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210a82:	48 8b 00             	mov    (%rax),%rax
  8004210a85:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210a89:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  8004210a90:	eb 23                	jmp    8004210ab5 <vprintfmt+0x49c>
  8004210a92:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210a96:	be 03 00 00 00       	mov    $0x3,%esi
  8004210a9b:	48 89 c7             	mov    %rax,%rdi
  8004210a9e:	48 b8 f9 03 21 04 80 	movabs $0x80042103f9,%rax
  8004210aa5:	00 00 00 
  8004210aa8:	ff d0                	callq  *%rax
  8004210aaa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210aae:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  8004210ab5:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  8004210aba:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004210abd:	8b 7d dc             	mov    -0x24(%rbp),%edi
  8004210ac0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210ac4:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210ac8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210acc:	45 89 c1             	mov    %r8d,%r9d
  8004210acf:	41 89 f8             	mov    %edi,%r8d
  8004210ad2:	48 89 c7             	mov    %rax,%rdi
  8004210ad5:	48 b8 3e 03 21 04 80 	movabs $0x800421033e,%rax
  8004210adc:	00 00 00 
  8004210adf:	ff d0                	callq  *%rax
  8004210ae1:	eb 3f                	jmp    8004210b22 <vprintfmt+0x509>
  8004210ae3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210ae7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210aeb:	48 89 d6             	mov    %rdx,%rsi
  8004210aee:	89 df                	mov    %ebx,%edi
  8004210af0:	ff d0                	callq  *%rax
  8004210af2:	eb 2e                	jmp    8004210b22 <vprintfmt+0x509>
  8004210af4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210af8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210afc:	48 89 d6             	mov    %rdx,%rsi
  8004210aff:	bf 25 00 00 00       	mov    $0x25,%edi
  8004210b04:	ff d0                	callq  *%rax
  8004210b06:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210b0b:	eb 05                	jmp    8004210b12 <vprintfmt+0x4f9>
  8004210b0d:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210b12:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210b16:	48 83 e8 01          	sub    $0x1,%rax
  8004210b1a:	0f b6 00             	movzbl (%rax),%eax
  8004210b1d:	3c 25                	cmp    $0x25,%al
  8004210b1f:	75 ec                	jne    8004210b0d <vprintfmt+0x4f4>
  8004210b21:	90                   	nop
  8004210b22:	90                   	nop
  8004210b23:	e9 43 fb ff ff       	jmpq   800421066b <vprintfmt+0x52>
  8004210b28:	48 83 c4 60          	add    $0x60,%rsp
  8004210b2c:	5b                   	pop    %rbx
  8004210b2d:	41 5c                	pop    %r12
  8004210b2f:	5d                   	pop    %rbp
  8004210b30:	c3                   	retq   

0000008004210b31 <printfmt>:
  8004210b31:	55                   	push   %rbp
  8004210b32:	48 89 e5             	mov    %rsp,%rbp
  8004210b35:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004210b3c:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004210b43:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  8004210b4a:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004210b51:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210b58:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210b5f:	84 c0                	test   %al,%al
  8004210b61:	74 20                	je     8004210b83 <printfmt+0x52>
  8004210b63:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210b67:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210b6b:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210b6f:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210b73:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210b77:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210b7b:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210b7f:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004210b83:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004210b8a:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004210b91:	00 00 00 
  8004210b94:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004210b9b:	00 00 00 
  8004210b9e:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004210ba2:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210ba9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004210bb0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004210bb7:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  8004210bbe:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004210bc5:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  8004210bcc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210bd3:	48 89 c7             	mov    %rax,%rdi
  8004210bd6:	48 b8 19 06 21 04 80 	movabs $0x8004210619,%rax
  8004210bdd:	00 00 00 
  8004210be0:	ff d0                	callq  *%rax
  8004210be2:	c9                   	leaveq 
  8004210be3:	c3                   	retq   

0000008004210be4 <sprintputch>:
  8004210be4:	55                   	push   %rbp
  8004210be5:	48 89 e5             	mov    %rsp,%rbp
  8004210be8:	48 83 ec 10          	sub    $0x10,%rsp
  8004210bec:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004210bef:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210bf3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210bf7:	8b 40 10             	mov    0x10(%rax),%eax
  8004210bfa:	8d 50 01             	lea    0x1(%rax),%edx
  8004210bfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c01:	89 50 10             	mov    %edx,0x10(%rax)
  8004210c04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c08:	48 8b 10             	mov    (%rax),%rdx
  8004210c0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c0f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004210c13:	48 39 c2             	cmp    %rax,%rdx
  8004210c16:	73 17                	jae    8004210c2f <sprintputch+0x4b>
  8004210c18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c1c:	48 8b 00             	mov    (%rax),%rax
  8004210c1f:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004210c23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210c27:	48 89 0a             	mov    %rcx,(%rdx)
  8004210c2a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004210c2d:	88 10                	mov    %dl,(%rax)
  8004210c2f:	c9                   	leaveq 
  8004210c30:	c3                   	retq   

0000008004210c31 <vsnprintf>:
  8004210c31:	55                   	push   %rbp
  8004210c32:	48 89 e5             	mov    %rsp,%rbp
  8004210c35:	48 83 ec 50          	sub    $0x50,%rsp
  8004210c39:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004210c3d:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004210c40:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004210c44:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004210c48:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  8004210c4c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004210c50:	48 8b 0a             	mov    (%rdx),%rcx
  8004210c53:	48 89 08             	mov    %rcx,(%rax)
  8004210c56:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210c5a:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210c5e:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210c62:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210c66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210c6a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004210c6e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004210c71:	48 98                	cltq   
  8004210c73:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210c77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210c7b:	48 01 d0             	add    %rdx,%rax
  8004210c7e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004210c82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  8004210c89:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004210c8e:	74 06                	je     8004210c96 <vsnprintf+0x65>
  8004210c90:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004210c94:	7f 07                	jg     8004210c9d <vsnprintf+0x6c>
  8004210c96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004210c9b:	eb 2f                	jmp    8004210ccc <vsnprintf+0x9b>
  8004210c9d:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004210ca1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004210ca5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004210ca9:	48 89 c6             	mov    %rax,%rsi
  8004210cac:	48 bf e4 0b 21 04 80 	movabs $0x8004210be4,%rdi
  8004210cb3:	00 00 00 
  8004210cb6:	48 b8 19 06 21 04 80 	movabs $0x8004210619,%rax
  8004210cbd:	00 00 00 
  8004210cc0:	ff d0                	callq  *%rax
  8004210cc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210cc6:	c6 00 00             	movb   $0x0,(%rax)
  8004210cc9:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004210ccc:	c9                   	leaveq 
  8004210ccd:	c3                   	retq   

0000008004210cce <snprintf>:
  8004210cce:	55                   	push   %rbp
  8004210ccf:	48 89 e5             	mov    %rsp,%rbp
  8004210cd2:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004210cd9:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004210ce0:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  8004210ce6:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004210ced:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210cf4:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210cfb:	84 c0                	test   %al,%al
  8004210cfd:	74 20                	je     8004210d1f <snprintf+0x51>
  8004210cff:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210d03:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210d07:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210d0b:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210d0f:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210d13:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210d17:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210d1b:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004210d1f:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  8004210d26:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  8004210d2d:	00 00 00 
  8004210d30:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004210d37:	00 00 00 
  8004210d3a:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004210d3e:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004210d45:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004210d4c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210d53:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004210d5a:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004210d61:	48 8b 0a             	mov    (%rdx),%rcx
  8004210d64:	48 89 08             	mov    %rcx,(%rax)
  8004210d67:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210d6b:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210d6f:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210d73:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210d77:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  8004210d7e:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004210d85:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  8004210d8b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004210d92:	48 89 c7             	mov    %rax,%rdi
  8004210d95:	48 b8 31 0c 21 04 80 	movabs $0x8004210c31,%rax
  8004210d9c:	00 00 00 
  8004210d9f:	ff d0                	callq  *%rax
  8004210da1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004210da7:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004210dad:	c9                   	leaveq 
  8004210dae:	c3                   	retq   

0000008004210daf <readline>:
  8004210daf:	55                   	push   %rbp
  8004210db0:	48 89 e5             	mov    %rsp,%rbp
  8004210db3:	48 83 ec 20          	sub    $0x20,%rsp
  8004210db7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210dbb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210dc0:	74 22                	je     8004210de4 <readline+0x35>
  8004210dc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210dc6:	48 89 c6             	mov    %rax,%rsi
  8004210dc9:	48 bf 88 03 22 04 80 	movabs $0x8004220388,%rdi
  8004210dd0:	00 00 00 
  8004210dd3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210dd8:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004210ddf:	00 00 00 
  8004210de2:	ff d2                	callq  *%rdx
  8004210de4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210deb:	bf 00 00 00 00       	mov    $0x0,%edi
  8004210df0:	48 b8 33 12 20 04 80 	movabs $0x8004201233,%rax
  8004210df7:	00 00 00 
  8004210dfa:	ff d0                	callq  *%rax
  8004210dfc:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004210dff:	48 b8 11 12 20 04 80 	movabs $0x8004201211,%rax
  8004210e06:	00 00 00 
  8004210e09:	ff d0                	callq  *%rax
  8004210e0b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004210e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004210e12:	79 30                	jns    8004210e44 <readline+0x95>
  8004210e14:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  8004210e18:	74 20                	je     8004210e3a <readline+0x8b>
  8004210e1a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e1d:	89 c6                	mov    %eax,%esi
  8004210e1f:	48 bf 8b 03 22 04 80 	movabs $0x800422038b,%rdi
  8004210e26:	00 00 00 
  8004210e29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210e2e:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004210e35:	00 00 00 
  8004210e38:	ff d2                	callq  *%rdx
  8004210e3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210e3f:	e9 be 00 00 00       	jmpq   8004210f02 <readline+0x153>
  8004210e44:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004210e48:	74 06                	je     8004210e50 <readline+0xa1>
  8004210e4a:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  8004210e4e:	75 26                	jne    8004210e76 <readline+0xc7>
  8004210e50:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210e54:	7e 20                	jle    8004210e76 <readline+0xc7>
  8004210e56:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210e5a:	74 11                	je     8004210e6d <readline+0xbe>
  8004210e5c:	bf 08 00 00 00       	mov    $0x8,%edi
  8004210e61:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210e68:	00 00 00 
  8004210e6b:	ff d0                	callq  *%rax
  8004210e6d:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  8004210e71:	e9 87 00 00 00       	jmpq   8004210efd <readline+0x14e>
  8004210e76:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210e7a:	7e 3f                	jle    8004210ebb <readline+0x10c>
  8004210e7c:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  8004210e83:	7f 36                	jg     8004210ebb <readline+0x10c>
  8004210e85:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210e89:	74 11                	je     8004210e9c <readline+0xed>
  8004210e8b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e8e:	89 c7                	mov    %eax,%edi
  8004210e90:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210e97:	00 00 00 
  8004210e9a:	ff d0                	callq  *%rax
  8004210e9c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210e9f:	8d 50 01             	lea    0x1(%rax),%edx
  8004210ea2:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004210ea5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004210ea8:	89 d1                	mov    %edx,%ecx
  8004210eaa:	48 ba a0 d2 4d 04 80 	movabs $0x80044dd2a0,%rdx
  8004210eb1:	00 00 00 
  8004210eb4:	48 98                	cltq   
  8004210eb6:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004210eb9:	eb 42                	jmp    8004210efd <readline+0x14e>
  8004210ebb:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  8004210ebf:	74 06                	je     8004210ec7 <readline+0x118>
  8004210ec1:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  8004210ec5:	75 36                	jne    8004210efd <readline+0x14e>
  8004210ec7:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210ecb:	74 11                	je     8004210ede <readline+0x12f>
  8004210ecd:	bf 0a 00 00 00       	mov    $0xa,%edi
  8004210ed2:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210ed9:	00 00 00 
  8004210edc:	ff d0                	callq  *%rax
  8004210ede:	48 ba a0 d2 4d 04 80 	movabs $0x80044dd2a0,%rdx
  8004210ee5:	00 00 00 
  8004210ee8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210eeb:	48 98                	cltq   
  8004210eed:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  8004210ef1:	48 b8 a0 d2 4d 04 80 	movabs $0x80044dd2a0,%rax
  8004210ef8:	00 00 00 
  8004210efb:	eb 05                	jmp    8004210f02 <readline+0x153>
  8004210efd:	e9 fd fe ff ff       	jmpq   8004210dff <readline+0x50>
  8004210f02:	c9                   	leaveq 
  8004210f03:	c3                   	retq   

0000008004210f04 <strlen>:
  8004210f04:	55                   	push   %rbp
  8004210f05:	48 89 e5             	mov    %rsp,%rbp
  8004210f08:	48 83 ec 18          	sub    $0x18,%rsp
  8004210f0c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210f10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210f17:	eb 09                	jmp    8004210f22 <strlen+0x1e>
  8004210f19:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210f1d:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210f22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f26:	0f b6 00             	movzbl (%rax),%eax
  8004210f29:	84 c0                	test   %al,%al
  8004210f2b:	75 ec                	jne    8004210f19 <strlen+0x15>
  8004210f2d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210f30:	c9                   	leaveq 
  8004210f31:	c3                   	retq   

0000008004210f32 <strnlen>:
  8004210f32:	55                   	push   %rbp
  8004210f33:	48 89 e5             	mov    %rsp,%rbp
  8004210f36:	48 83 ec 20          	sub    $0x20,%rsp
  8004210f3a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210f3e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210f42:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210f49:	eb 0e                	jmp    8004210f59 <strnlen+0x27>
  8004210f4b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210f4f:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210f54:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  8004210f59:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004210f5e:	74 0b                	je     8004210f6b <strnlen+0x39>
  8004210f60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f64:	0f b6 00             	movzbl (%rax),%eax
  8004210f67:	84 c0                	test   %al,%al
  8004210f69:	75 e0                	jne    8004210f4b <strnlen+0x19>
  8004210f6b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210f6e:	c9                   	leaveq 
  8004210f6f:	c3                   	retq   

0000008004210f70 <strcpy>:
  8004210f70:	55                   	push   %rbp
  8004210f71:	48 89 e5             	mov    %rsp,%rbp
  8004210f74:	48 83 ec 20          	sub    $0x20,%rsp
  8004210f78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210f7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210f88:	90                   	nop
  8004210f89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f8d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210f91:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210f95:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210f99:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210f9d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210fa1:	0f b6 12             	movzbl (%rdx),%edx
  8004210fa4:	88 10                	mov    %dl,(%rax)
  8004210fa6:	0f b6 00             	movzbl (%rax),%eax
  8004210fa9:	84 c0                	test   %al,%al
  8004210fab:	75 dc                	jne    8004210f89 <strcpy+0x19>
  8004210fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fb1:	c9                   	leaveq 
  8004210fb2:	c3                   	retq   

0000008004210fb3 <strcat>:
  8004210fb3:	55                   	push   %rbp
  8004210fb4:	48 89 e5             	mov    %rsp,%rbp
  8004210fb7:	48 83 ec 20          	sub    $0x20,%rsp
  8004210fbb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210fbf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210fc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fc7:	48 89 c7             	mov    %rax,%rdi
  8004210fca:	48 b8 04 0f 21 04 80 	movabs $0x8004210f04,%rax
  8004210fd1:	00 00 00 
  8004210fd4:	ff d0                	callq  *%rax
  8004210fd6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004210fd9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210fdc:	48 63 d0             	movslq %eax,%rdx
  8004210fdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fe3:	48 01 c2             	add    %rax,%rdx
  8004210fe6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210fea:	48 89 c6             	mov    %rax,%rsi
  8004210fed:	48 89 d7             	mov    %rdx,%rdi
  8004210ff0:	48 b8 70 0f 21 04 80 	movabs $0x8004210f70,%rax
  8004210ff7:	00 00 00 
  8004210ffa:	ff d0                	callq  *%rax
  8004210ffc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211000:	c9                   	leaveq 
  8004211001:	c3                   	retq   

0000008004211002 <strncpy>:
  8004211002:	55                   	push   %rbp
  8004211003:	48 89 e5             	mov    %rsp,%rbp
  8004211006:	48 83 ec 28          	sub    $0x28,%rsp
  800421100a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421100e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211012:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211016:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421101a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421101e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211025:	00 
  8004211026:	eb 2a                	jmp    8004211052 <strncpy+0x50>
  8004211028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421102c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211030:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211034:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211038:	0f b6 12             	movzbl (%rdx),%edx
  800421103b:	88 10                	mov    %dl,(%rax)
  800421103d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211041:	0f b6 00             	movzbl (%rax),%eax
  8004211044:	84 c0                	test   %al,%al
  8004211046:	74 05                	je     800421104d <strncpy+0x4b>
  8004211048:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  800421104d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004211052:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211056:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800421105a:	72 cc                	jb     8004211028 <strncpy+0x26>
  800421105c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211060:	c9                   	leaveq 
  8004211061:	c3                   	retq   

0000008004211062 <strlcpy>:
  8004211062:	55                   	push   %rbp
  8004211063:	48 89 e5             	mov    %rsp,%rbp
  8004211066:	48 83 ec 28          	sub    $0x28,%rsp
  800421106a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421106e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211072:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211076:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421107a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421107e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211083:	74 3d                	je     80042110c2 <strlcpy+0x60>
  8004211085:	eb 1d                	jmp    80042110a4 <strlcpy+0x42>
  8004211087:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421108b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421108f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211093:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211097:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800421109b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800421109f:	0f b6 12             	movzbl (%rdx),%edx
  80042110a2:	88 10                	mov    %dl,(%rax)
  80042110a4:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  80042110a9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042110ae:	74 0b                	je     80042110bb <strlcpy+0x59>
  80042110b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110b4:	0f b6 00             	movzbl (%rax),%eax
  80042110b7:	84 c0                	test   %al,%al
  80042110b9:	75 cc                	jne    8004211087 <strlcpy+0x25>
  80042110bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110bf:	c6 00 00             	movb   $0x0,(%rax)
  80042110c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042110c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042110ca:	48 29 c2             	sub    %rax,%rdx
  80042110cd:	48 89 d0             	mov    %rdx,%rax
  80042110d0:	c9                   	leaveq 
  80042110d1:	c3                   	retq   

00000080042110d2 <strcmp>:
  80042110d2:	55                   	push   %rbp
  80042110d3:	48 89 e5             	mov    %rsp,%rbp
  80042110d6:	48 83 ec 10          	sub    $0x10,%rsp
  80042110da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042110de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042110e2:	eb 0a                	jmp    80042110ee <strcmp+0x1c>
  80042110e4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042110e9:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042110ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042110f2:	0f b6 00             	movzbl (%rax),%eax
  80042110f5:	84 c0                	test   %al,%al
  80042110f7:	74 12                	je     800421110b <strcmp+0x39>
  80042110f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042110fd:	0f b6 10             	movzbl (%rax),%edx
  8004211100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211104:	0f b6 00             	movzbl (%rax),%eax
  8004211107:	38 c2                	cmp    %al,%dl
  8004211109:	74 d9                	je     80042110e4 <strcmp+0x12>
  800421110b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421110f:	0f b6 00             	movzbl (%rax),%eax
  8004211112:	0f b6 d0             	movzbl %al,%edx
  8004211115:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211119:	0f b6 00             	movzbl (%rax),%eax
  800421111c:	0f b6 c0             	movzbl %al,%eax
  800421111f:	29 c2                	sub    %eax,%edx
  8004211121:	89 d0                	mov    %edx,%eax
  8004211123:	c9                   	leaveq 
  8004211124:	c3                   	retq   

0000008004211125 <strncmp>:
  8004211125:	55                   	push   %rbp
  8004211126:	48 89 e5             	mov    %rsp,%rbp
  8004211129:	48 83 ec 18          	sub    $0x18,%rsp
  800421112d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004211131:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004211135:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211139:	eb 0f                	jmp    800421114a <strncmp+0x25>
  800421113b:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  8004211140:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004211145:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800421114a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421114f:	74 1d                	je     800421116e <strncmp+0x49>
  8004211151:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211155:	0f b6 00             	movzbl (%rax),%eax
  8004211158:	84 c0                	test   %al,%al
  800421115a:	74 12                	je     800421116e <strncmp+0x49>
  800421115c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211160:	0f b6 10             	movzbl (%rax),%edx
  8004211163:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211167:	0f b6 00             	movzbl (%rax),%eax
  800421116a:	38 c2                	cmp    %al,%dl
  800421116c:	74 cd                	je     800421113b <strncmp+0x16>
  800421116e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211173:	75 07                	jne    800421117c <strncmp+0x57>
  8004211175:	b8 00 00 00 00       	mov    $0x0,%eax
  800421117a:	eb 18                	jmp    8004211194 <strncmp+0x6f>
  800421117c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211180:	0f b6 00             	movzbl (%rax),%eax
  8004211183:	0f b6 d0             	movzbl %al,%edx
  8004211186:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421118a:	0f b6 00             	movzbl (%rax),%eax
  800421118d:	0f b6 c0             	movzbl %al,%eax
  8004211190:	29 c2                	sub    %eax,%edx
  8004211192:	89 d0                	mov    %edx,%eax
  8004211194:	c9                   	leaveq 
  8004211195:	c3                   	retq   

0000008004211196 <strchr>:
  8004211196:	55                   	push   %rbp
  8004211197:	48 89 e5             	mov    %rsp,%rbp
  800421119a:	48 83 ec 0c          	sub    $0xc,%rsp
  800421119e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042111a2:	89 f0                	mov    %esi,%eax
  80042111a4:	88 45 f4             	mov    %al,-0xc(%rbp)
  80042111a7:	eb 17                	jmp    80042111c0 <strchr+0x2a>
  80042111a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042111ad:	0f b6 00             	movzbl (%rax),%eax
  80042111b0:	3a 45 f4             	cmp    -0xc(%rbp),%al
  80042111b3:	75 06                	jne    80042111bb <strchr+0x25>
  80042111b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042111b9:	eb 15                	jmp    80042111d0 <strchr+0x3a>
  80042111bb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042111c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042111c4:	0f b6 00             	movzbl (%rax),%eax
  80042111c7:	84 c0                	test   %al,%al
  80042111c9:	75 de                	jne    80042111a9 <strchr+0x13>
  80042111cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042111d0:	c9                   	leaveq 
  80042111d1:	c3                   	retq   

00000080042111d2 <strfind>:
  80042111d2:	55                   	push   %rbp
  80042111d3:	48 89 e5             	mov    %rsp,%rbp
  80042111d6:	48 83 ec 0c          	sub    $0xc,%rsp
  80042111da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042111de:	89 f0                	mov    %esi,%eax
  80042111e0:	88 45 f4             	mov    %al,-0xc(%rbp)
  80042111e3:	eb 13                	jmp    80042111f8 <strfind+0x26>
  80042111e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042111e9:	0f b6 00             	movzbl (%rax),%eax
  80042111ec:	3a 45 f4             	cmp    -0xc(%rbp),%al
  80042111ef:	75 02                	jne    80042111f3 <strfind+0x21>
  80042111f1:	eb 10                	jmp    8004211203 <strfind+0x31>
  80042111f3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042111f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042111fc:	0f b6 00             	movzbl (%rax),%eax
  80042111ff:	84 c0                	test   %al,%al
  8004211201:	75 e2                	jne    80042111e5 <strfind+0x13>
  8004211203:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211207:	c9                   	leaveq 
  8004211208:	c3                   	retq   

0000008004211209 <memset>:
  8004211209:	55                   	push   %rbp
  800421120a:	48 89 e5             	mov    %rsp,%rbp
  800421120d:	48 83 ec 18          	sub    $0x18,%rsp
  8004211211:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004211215:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004211218:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421121c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211221:	75 06                	jne    8004211229 <memset+0x20>
  8004211223:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211227:	eb 69                	jmp    8004211292 <memset+0x89>
  8004211229:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421122d:	83 e0 03             	and    $0x3,%eax
  8004211230:	48 85 c0             	test   %rax,%rax
  8004211233:	75 48                	jne    800421127d <memset+0x74>
  8004211235:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211239:	83 e0 03             	and    $0x3,%eax
  800421123c:	48 85 c0             	test   %rax,%rax
  800421123f:	75 3c                	jne    800421127d <memset+0x74>
  8004211241:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  8004211248:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421124b:	c1 e0 18             	shl    $0x18,%eax
  800421124e:	89 c2                	mov    %eax,%edx
  8004211250:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211253:	c1 e0 10             	shl    $0x10,%eax
  8004211256:	09 c2                	or     %eax,%edx
  8004211258:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421125b:	c1 e0 08             	shl    $0x8,%eax
  800421125e:	09 d0                	or     %edx,%eax
  8004211260:	09 45 f4             	or     %eax,-0xc(%rbp)
  8004211263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211267:	48 c1 e8 02          	shr    $0x2,%rax
  800421126b:	48 89 c1             	mov    %rax,%rcx
  800421126e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211272:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211275:	48 89 d7             	mov    %rdx,%rdi
  8004211278:	fc                   	cld    
  8004211279:	f3 ab                	rep stos %eax,%es:(%rdi)
  800421127b:	eb 11                	jmp    800421128e <memset+0x85>
  800421127d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211281:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211284:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211288:	48 89 d7             	mov    %rdx,%rdi
  800421128b:	fc                   	cld    
  800421128c:	f3 aa                	rep stos %al,%es:(%rdi)
  800421128e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211292:	c9                   	leaveq 
  8004211293:	c3                   	retq   

0000008004211294 <memmove>:
  8004211294:	55                   	push   %rbp
  8004211295:	48 89 e5             	mov    %rsp,%rbp
  8004211298:	48 83 ec 28          	sub    $0x28,%rsp
  800421129c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042112a0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042112a4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042112a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042112ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042112b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042112b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042112bc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042112c0:	0f 83 88 00 00 00    	jae    800421134e <memmove+0xba>
  80042112c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042112ce:	48 01 d0             	add    %rdx,%rax
  80042112d1:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042112d5:	76 77                	jbe    800421134e <memmove+0xba>
  80042112d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112db:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042112df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112e3:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  80042112e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042112eb:	83 e0 03             	and    $0x3,%eax
  80042112ee:	48 85 c0             	test   %rax,%rax
  80042112f1:	75 3b                	jne    800421132e <memmove+0x9a>
  80042112f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112f7:	83 e0 03             	and    $0x3,%eax
  80042112fa:	48 85 c0             	test   %rax,%rax
  80042112fd:	75 2f                	jne    800421132e <memmove+0x9a>
  80042112ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211303:	83 e0 03             	and    $0x3,%eax
  8004211306:	48 85 c0             	test   %rax,%rax
  8004211309:	75 23                	jne    800421132e <memmove+0x9a>
  800421130b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421130f:	48 83 e8 04          	sub    $0x4,%rax
  8004211313:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211317:	48 83 ea 04          	sub    $0x4,%rdx
  800421131b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421131f:	48 c1 e9 02          	shr    $0x2,%rcx
  8004211323:	48 89 c7             	mov    %rax,%rdi
  8004211326:	48 89 d6             	mov    %rdx,%rsi
  8004211329:	fd                   	std    
  800421132a:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  800421132c:	eb 1d                	jmp    800421134b <memmove+0xb7>
  800421132e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211332:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004211336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421133a:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  800421133e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211342:	48 89 d7             	mov    %rdx,%rdi
  8004211345:	48 89 c1             	mov    %rax,%rcx
  8004211348:	fd                   	std    
  8004211349:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  800421134b:	fc                   	cld    
  800421134c:	eb 57                	jmp    80042113a5 <memmove+0x111>
  800421134e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211352:	83 e0 03             	and    $0x3,%eax
  8004211355:	48 85 c0             	test   %rax,%rax
  8004211358:	75 36                	jne    8004211390 <memmove+0xfc>
  800421135a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421135e:	83 e0 03             	and    $0x3,%eax
  8004211361:	48 85 c0             	test   %rax,%rax
  8004211364:	75 2a                	jne    8004211390 <memmove+0xfc>
  8004211366:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421136a:	83 e0 03             	and    $0x3,%eax
  800421136d:	48 85 c0             	test   %rax,%rax
  8004211370:	75 1e                	jne    8004211390 <memmove+0xfc>
  8004211372:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211376:	48 c1 e8 02          	shr    $0x2,%rax
  800421137a:	48 89 c1             	mov    %rax,%rcx
  800421137d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211381:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211385:	48 89 c7             	mov    %rax,%rdi
  8004211388:	48 89 d6             	mov    %rdx,%rsi
  800421138b:	fc                   	cld    
  800421138c:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  800421138e:	eb 15                	jmp    80042113a5 <memmove+0x111>
  8004211390:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211394:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211398:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421139c:	48 89 c7             	mov    %rax,%rdi
  800421139f:	48 89 d6             	mov    %rdx,%rsi
  80042113a2:	fc                   	cld    
  80042113a3:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  80042113a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113a9:	c9                   	leaveq 
  80042113aa:	c3                   	retq   

00000080042113ab <memcpy>:
  80042113ab:	55                   	push   %rbp
  80042113ac:	48 89 e5             	mov    %rsp,%rbp
  80042113af:	48 83 ec 18          	sub    $0x18,%rsp
  80042113b3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042113b7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042113bb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042113bf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042113c3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  80042113c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042113cb:	48 89 ce             	mov    %rcx,%rsi
  80042113ce:	48 89 c7             	mov    %rax,%rdi
  80042113d1:	48 b8 94 12 21 04 80 	movabs $0x8004211294,%rax
  80042113d8:	00 00 00 
  80042113db:	ff d0                	callq  *%rax
  80042113dd:	c9                   	leaveq 
  80042113de:	c3                   	retq   

00000080042113df <memcmp>:
  80042113df:	55                   	push   %rbp
  80042113e0:	48 89 e5             	mov    %rsp,%rbp
  80042113e3:	48 83 ec 28          	sub    $0x28,%rsp
  80042113e7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042113eb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042113ef:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042113f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042113fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042113ff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211403:	eb 36                	jmp    800421143b <memcmp+0x5c>
  8004211405:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211409:	0f b6 10             	movzbl (%rax),%edx
  800421140c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211410:	0f b6 00             	movzbl (%rax),%eax
  8004211413:	38 c2                	cmp    %al,%dl
  8004211415:	74 1a                	je     8004211431 <memcmp+0x52>
  8004211417:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421141b:	0f b6 00             	movzbl (%rax),%eax
  800421141e:	0f b6 d0             	movzbl %al,%edx
  8004211421:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211425:	0f b6 00             	movzbl (%rax),%eax
  8004211428:	0f b6 c0             	movzbl %al,%eax
  800421142b:	29 c2                	sub    %eax,%edx
  800421142d:	89 d0                	mov    %edx,%eax
  800421142f:	eb 20                	jmp    8004211451 <memcmp+0x72>
  8004211431:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004211436:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800421143b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421143f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004211443:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211447:	48 85 c0             	test   %rax,%rax
  800421144a:	75 b9                	jne    8004211405 <memcmp+0x26>
  800421144c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211451:	c9                   	leaveq 
  8004211452:	c3                   	retq   

0000008004211453 <memfind>:
  8004211453:	55                   	push   %rbp
  8004211454:	48 89 e5             	mov    %rsp,%rbp
  8004211457:	48 83 ec 28          	sub    $0x28,%rsp
  800421145b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421145f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004211462:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211466:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421146a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421146e:	48 01 d0             	add    %rdx,%rax
  8004211471:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211475:	eb 15                	jmp    800421148c <memfind+0x39>
  8004211477:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421147b:	0f b6 10             	movzbl (%rax),%edx
  800421147e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211481:	38 c2                	cmp    %al,%dl
  8004211483:	75 02                	jne    8004211487 <memfind+0x34>
  8004211485:	eb 0f                	jmp    8004211496 <memfind+0x43>
  8004211487:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800421148c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211490:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004211494:	72 e1                	jb     8004211477 <memfind+0x24>
  8004211496:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421149a:	c9                   	leaveq 
  800421149b:	c3                   	retq   

000000800421149c <strtol>:
  800421149c:	55                   	push   %rbp
  800421149d:	48 89 e5             	mov    %rsp,%rbp
  80042114a0:	48 83 ec 34          	sub    $0x34,%rsp
  80042114a4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042114a8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042114ac:	89 55 cc             	mov    %edx,-0x34(%rbp)
  80042114af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042114b6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042114bd:	00 
  80042114be:	eb 05                	jmp    80042114c5 <strtol+0x29>
  80042114c0:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042114c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042114c9:	0f b6 00             	movzbl (%rax),%eax
  80042114cc:	3c 20                	cmp    $0x20,%al
  80042114ce:	74 f0                	je     80042114c0 <strtol+0x24>
  80042114d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042114d4:	0f b6 00             	movzbl (%rax),%eax
  80042114d7:	3c 09                	cmp    $0x9,%al
  80042114d9:	74 e5                	je     80042114c0 <strtol+0x24>
  80042114db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042114df:	0f b6 00             	movzbl (%rax),%eax
  80042114e2:	3c 2b                	cmp    $0x2b,%al
  80042114e4:	75 07                	jne    80042114ed <strtol+0x51>
  80042114e6:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042114eb:	eb 17                	jmp    8004211504 <strtol+0x68>
  80042114ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042114f1:	0f b6 00             	movzbl (%rax),%eax
  80042114f4:	3c 2d                	cmp    $0x2d,%al
  80042114f6:	75 0c                	jne    8004211504 <strtol+0x68>
  80042114f8:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042114fd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  8004211504:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004211508:	74 06                	je     8004211510 <strtol+0x74>
  800421150a:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  800421150e:	75 28                	jne    8004211538 <strtol+0x9c>
  8004211510:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211514:	0f b6 00             	movzbl (%rax),%eax
  8004211517:	3c 30                	cmp    $0x30,%al
  8004211519:	75 1d                	jne    8004211538 <strtol+0x9c>
  800421151b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421151f:	48 83 c0 01          	add    $0x1,%rax
  8004211523:	0f b6 00             	movzbl (%rax),%eax
  8004211526:	3c 78                	cmp    $0x78,%al
  8004211528:	75 0e                	jne    8004211538 <strtol+0x9c>
  800421152a:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  800421152f:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  8004211536:	eb 2c                	jmp    8004211564 <strtol+0xc8>
  8004211538:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800421153c:	75 19                	jne    8004211557 <strtol+0xbb>
  800421153e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211542:	0f b6 00             	movzbl (%rax),%eax
  8004211545:	3c 30                	cmp    $0x30,%al
  8004211547:	75 0e                	jne    8004211557 <strtol+0xbb>
  8004211549:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421154e:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  8004211555:	eb 0d                	jmp    8004211564 <strtol+0xc8>
  8004211557:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800421155b:	75 07                	jne    8004211564 <strtol+0xc8>
  800421155d:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  8004211564:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211568:	0f b6 00             	movzbl (%rax),%eax
  800421156b:	3c 2f                	cmp    $0x2f,%al
  800421156d:	7e 1d                	jle    800421158c <strtol+0xf0>
  800421156f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211573:	0f b6 00             	movzbl (%rax),%eax
  8004211576:	3c 39                	cmp    $0x39,%al
  8004211578:	7f 12                	jg     800421158c <strtol+0xf0>
  800421157a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421157e:	0f b6 00             	movzbl (%rax),%eax
  8004211581:	0f be c0             	movsbl %al,%eax
  8004211584:	83 e8 30             	sub    $0x30,%eax
  8004211587:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421158a:	eb 4e                	jmp    80042115da <strtol+0x13e>
  800421158c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211590:	0f b6 00             	movzbl (%rax),%eax
  8004211593:	3c 60                	cmp    $0x60,%al
  8004211595:	7e 1d                	jle    80042115b4 <strtol+0x118>
  8004211597:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421159b:	0f b6 00             	movzbl (%rax),%eax
  800421159e:	3c 7a                	cmp    $0x7a,%al
  80042115a0:	7f 12                	jg     80042115b4 <strtol+0x118>
  80042115a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115a6:	0f b6 00             	movzbl (%rax),%eax
  80042115a9:	0f be c0             	movsbl %al,%eax
  80042115ac:	83 e8 57             	sub    $0x57,%eax
  80042115af:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042115b2:	eb 26                	jmp    80042115da <strtol+0x13e>
  80042115b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115b8:	0f b6 00             	movzbl (%rax),%eax
  80042115bb:	3c 40                	cmp    $0x40,%al
  80042115bd:	7e 48                	jle    8004211607 <strtol+0x16b>
  80042115bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115c3:	0f b6 00             	movzbl (%rax),%eax
  80042115c6:	3c 5a                	cmp    $0x5a,%al
  80042115c8:	7f 3d                	jg     8004211607 <strtol+0x16b>
  80042115ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115ce:	0f b6 00             	movzbl (%rax),%eax
  80042115d1:	0f be c0             	movsbl %al,%eax
  80042115d4:	83 e8 37             	sub    $0x37,%eax
  80042115d7:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042115da:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042115dd:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  80042115e0:	7c 02                	jl     80042115e4 <strtol+0x148>
  80042115e2:	eb 23                	jmp    8004211607 <strtol+0x16b>
  80042115e4:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042115e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042115ec:	48 98                	cltq   
  80042115ee:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  80042115f3:	48 89 c2             	mov    %rax,%rdx
  80042115f6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042115f9:	48 98                	cltq   
  80042115fb:	48 01 d0             	add    %rdx,%rax
  80042115fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211602:	e9 5d ff ff ff       	jmpq   8004211564 <strtol+0xc8>
  8004211607:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421160c:	74 0b                	je     8004211619 <strtol+0x17d>
  800421160e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211612:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211616:	48 89 10             	mov    %rdx,(%rax)
  8004211619:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421161d:	74 09                	je     8004211628 <strtol+0x18c>
  800421161f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211623:	48 f7 d8             	neg    %rax
  8004211626:	eb 04                	jmp    800421162c <strtol+0x190>
  8004211628:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421162c:	c9                   	leaveq 
  800421162d:	c3                   	retq   

000000800421162e <strstr>:
  800421162e:	55                   	push   %rbp
  800421162f:	48 89 e5             	mov    %rsp,%rbp
  8004211632:	48 83 ec 30          	sub    $0x30,%rsp
  8004211636:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421163a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421163e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211642:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211646:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421164a:	0f b6 00             	movzbl (%rax),%eax
  800421164d:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004211650:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004211654:	75 06                	jne    800421165c <strstr+0x2e>
  8004211656:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421165a:	eb 6b                	jmp    80042116c7 <strstr+0x99>
  800421165c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211660:	48 89 c7             	mov    %rax,%rdi
  8004211663:	48 b8 04 0f 21 04 80 	movabs $0x8004210f04,%rax
  800421166a:	00 00 00 
  800421166d:	ff d0                	callq  *%rax
  800421166f:	48 98                	cltq   
  8004211671:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211675:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211679:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421167d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211681:	0f b6 00             	movzbl (%rax),%eax
  8004211684:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004211687:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421168b:	75 07                	jne    8004211694 <strstr+0x66>
  800421168d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211692:	eb 33                	jmp    80042116c7 <strstr+0x99>
  8004211694:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004211698:	3a 45 ff             	cmp    -0x1(%rbp),%al
  800421169b:	75 d8                	jne    8004211675 <strstr+0x47>
  800421169d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042116a1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042116a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042116a9:	48 89 ce             	mov    %rcx,%rsi
  80042116ac:	48 89 c7             	mov    %rax,%rdi
  80042116af:	48 b8 25 11 21 04 80 	movabs $0x8004211125,%rax
  80042116b6:	00 00 00 
  80042116b9:	ff d0                	callq  *%rax
  80042116bb:	85 c0                	test   %eax,%eax
  80042116bd:	75 b6                	jne    8004211675 <strstr+0x47>
  80042116bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042116c3:	48 83 e8 01          	sub    $0x1,%rax
  80042116c7:	c9                   	leaveq 
  80042116c8:	c3                   	retq   

00000080042116c9 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  80042116c9:	55                   	push   %rbp
  80042116ca:	48 89 e5             	mov    %rsp,%rbp
  80042116cd:	48 83 ec 24          	sub    $0x24,%rsp
  80042116d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042116d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042116d9:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042116dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116e0:	48 8b 10             	mov    (%rax),%rdx
  80042116e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116e7:	48 01 d0             	add    %rdx,%rax
  80042116ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042116ee:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042116f5:	00 
	switch (bytes_to_read) {
  80042116f6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042116f9:	83 f8 02             	cmp    $0x2,%eax
  80042116fc:	0f 84 ab 00 00 00    	je     80042117ad <_dwarf_read_lsb+0xe4>
  8004211702:	83 f8 02             	cmp    $0x2,%eax
  8004211705:	7f 0e                	jg     8004211715 <_dwarf_read_lsb+0x4c>
  8004211707:	83 f8 01             	cmp    $0x1,%eax
  800421170a:	0f 84 b3 00 00 00    	je     80042117c3 <_dwarf_read_lsb+0xfa>
  8004211710:	e9 d9 00 00 00       	jmpq   80042117ee <_dwarf_read_lsb+0x125>
  8004211715:	83 f8 04             	cmp    $0x4,%eax
  8004211718:	74 65                	je     800421177f <_dwarf_read_lsb+0xb6>
  800421171a:	83 f8 08             	cmp    $0x8,%eax
  800421171d:	0f 85 cb 00 00 00    	jne    80042117ee <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004211723:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211727:	48 83 c0 04          	add    $0x4,%rax
  800421172b:	0f b6 00             	movzbl (%rax),%eax
  800421172e:	0f b6 c0             	movzbl %al,%eax
  8004211731:	48 c1 e0 20          	shl    $0x20,%rax
  8004211735:	48 89 c2             	mov    %rax,%rdx
  8004211738:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421173c:	48 83 c0 05          	add    $0x5,%rax
  8004211740:	0f b6 00             	movzbl (%rax),%eax
  8004211743:	0f b6 c0             	movzbl %al,%eax
  8004211746:	48 c1 e0 28          	shl    $0x28,%rax
  800421174a:	48 09 d0             	or     %rdx,%rax
  800421174d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004211751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211755:	48 83 c0 06          	add    $0x6,%rax
  8004211759:	0f b6 00             	movzbl (%rax),%eax
  800421175c:	0f b6 c0             	movzbl %al,%eax
  800421175f:	48 c1 e0 30          	shl    $0x30,%rax
  8004211763:	48 89 c2             	mov    %rax,%rdx
  8004211766:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421176a:	48 83 c0 07          	add    $0x7,%rax
  800421176e:	0f b6 00             	movzbl (%rax),%eax
  8004211771:	0f b6 c0             	movzbl %al,%eax
  8004211774:	48 c1 e0 38          	shl    $0x38,%rax
  8004211778:	48 09 d0             	or     %rdx,%rax
  800421177b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  800421177f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211783:	48 83 c0 02          	add    $0x2,%rax
  8004211787:	0f b6 00             	movzbl (%rax),%eax
  800421178a:	0f b6 c0             	movzbl %al,%eax
  800421178d:	48 c1 e0 10          	shl    $0x10,%rax
  8004211791:	48 89 c2             	mov    %rax,%rdx
  8004211794:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211798:	48 83 c0 03          	add    $0x3,%rax
  800421179c:	0f b6 00             	movzbl (%rax),%eax
  800421179f:	0f b6 c0             	movzbl %al,%eax
  80042117a2:	48 c1 e0 18          	shl    $0x18,%rax
  80042117a6:	48 09 d0             	or     %rdx,%rax
  80042117a9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  80042117ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117b1:	48 83 c0 01          	add    $0x1,%rax
  80042117b5:	0f b6 00             	movzbl (%rax),%eax
  80042117b8:	0f b6 c0             	movzbl %al,%eax
  80042117bb:	48 c1 e0 08          	shl    $0x8,%rax
  80042117bf:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  80042117c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117c7:	0f b6 00             	movzbl (%rax),%eax
  80042117ca:	0f b6 c0             	movzbl %al,%eax
  80042117cd:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042117d1:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  80042117d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042117d6:	48 8b 10             	mov    (%rax),%rdx
  80042117d9:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042117dc:	48 98                	cltq   
  80042117de:	48 01 c2             	add    %rax,%rdx
  80042117e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042117e5:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042117e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042117ec:	eb 05                	jmp    80042117f3 <_dwarf_read_lsb+0x12a>
		return (0);
  80042117ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042117f3:	c9                   	leaveq 
  80042117f4:	c3                   	retq   

00000080042117f5 <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  80042117f5:	55                   	push   %rbp
  80042117f6:	48 89 e5             	mov    %rsp,%rbp
  80042117f9:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042117fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211801:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211804:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211808:	48 8b 00             	mov    (%rax),%rax
  800421180b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800421180f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211816:	00 
	switch (bytes_to_read) {
  8004211817:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421181a:	83 f8 02             	cmp    $0x2,%eax
  800421181d:	0f 84 ab 00 00 00    	je     80042118ce <_dwarf_decode_lsb+0xd9>
  8004211823:	83 f8 02             	cmp    $0x2,%eax
  8004211826:	7f 0e                	jg     8004211836 <_dwarf_decode_lsb+0x41>
  8004211828:	83 f8 01             	cmp    $0x1,%eax
  800421182b:	0f 84 b3 00 00 00    	je     80042118e4 <_dwarf_decode_lsb+0xef>
  8004211831:	e9 d9 00 00 00       	jmpq   800421190f <_dwarf_decode_lsb+0x11a>
  8004211836:	83 f8 04             	cmp    $0x4,%eax
  8004211839:	74 65                	je     80042118a0 <_dwarf_decode_lsb+0xab>
  800421183b:	83 f8 08             	cmp    $0x8,%eax
  800421183e:	0f 85 cb 00 00 00    	jne    800421190f <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004211844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211848:	48 83 c0 04          	add    $0x4,%rax
  800421184c:	0f b6 00             	movzbl (%rax),%eax
  800421184f:	0f b6 c0             	movzbl %al,%eax
  8004211852:	48 c1 e0 20          	shl    $0x20,%rax
  8004211856:	48 89 c2             	mov    %rax,%rdx
  8004211859:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421185d:	48 83 c0 05          	add    $0x5,%rax
  8004211861:	0f b6 00             	movzbl (%rax),%eax
  8004211864:	0f b6 c0             	movzbl %al,%eax
  8004211867:	48 c1 e0 28          	shl    $0x28,%rax
  800421186b:	48 09 d0             	or     %rdx,%rax
  800421186e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004211872:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211876:	48 83 c0 06          	add    $0x6,%rax
  800421187a:	0f b6 00             	movzbl (%rax),%eax
  800421187d:	0f b6 c0             	movzbl %al,%eax
  8004211880:	48 c1 e0 30          	shl    $0x30,%rax
  8004211884:	48 89 c2             	mov    %rax,%rdx
  8004211887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421188b:	48 83 c0 07          	add    $0x7,%rax
  800421188f:	0f b6 00             	movzbl (%rax),%eax
  8004211892:	0f b6 c0             	movzbl %al,%eax
  8004211895:	48 c1 e0 38          	shl    $0x38,%rax
  8004211899:	48 09 d0             	or     %rdx,%rax
  800421189c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042118a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118a4:	48 83 c0 02          	add    $0x2,%rax
  80042118a8:	0f b6 00             	movzbl (%rax),%eax
  80042118ab:	0f b6 c0             	movzbl %al,%eax
  80042118ae:	48 c1 e0 10          	shl    $0x10,%rax
  80042118b2:	48 89 c2             	mov    %rax,%rdx
  80042118b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118b9:	48 83 c0 03          	add    $0x3,%rax
  80042118bd:	0f b6 00             	movzbl (%rax),%eax
  80042118c0:	0f b6 c0             	movzbl %al,%eax
  80042118c3:	48 c1 e0 18          	shl    $0x18,%rax
  80042118c7:	48 09 d0             	or     %rdx,%rax
  80042118ca:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  80042118ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118d2:	48 83 c0 01          	add    $0x1,%rax
  80042118d6:	0f b6 00             	movzbl (%rax),%eax
  80042118d9:	0f b6 c0             	movzbl %al,%eax
  80042118dc:	48 c1 e0 08          	shl    $0x8,%rax
  80042118e0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  80042118e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118e8:	0f b6 00             	movzbl (%rax),%eax
  80042118eb:	0f b6 c0             	movzbl %al,%eax
  80042118ee:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042118f2:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  80042118f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118f7:	48 8b 10             	mov    (%rax),%rdx
  80042118fa:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042118fd:	48 98                	cltq   
  80042118ff:	48 01 c2             	add    %rax,%rdx
  8004211902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211906:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421190d:	eb 05                	jmp    8004211914 <_dwarf_decode_lsb+0x11f>
		return (0);
  800421190f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211914:	c9                   	leaveq 
  8004211915:	c3                   	retq   

0000008004211916 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004211916:	55                   	push   %rbp
  8004211917:	48 89 e5             	mov    %rsp,%rbp
  800421191a:	48 83 ec 24          	sub    $0x24,%rsp
  800421191e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211922:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211926:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004211929:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421192d:	48 8b 10             	mov    (%rax),%rdx
  8004211930:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211934:	48 01 d0             	add    %rdx,%rax
  8004211937:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  800421193b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421193e:	83 f8 02             	cmp    $0x2,%eax
  8004211941:	74 35                	je     8004211978 <_dwarf_read_msb+0x62>
  8004211943:	83 f8 02             	cmp    $0x2,%eax
  8004211946:	7f 0a                	jg     8004211952 <_dwarf_read_msb+0x3c>
  8004211948:	83 f8 01             	cmp    $0x1,%eax
  800421194b:	74 18                	je     8004211965 <_dwarf_read_msb+0x4f>
  800421194d:	e9 53 01 00 00       	jmpq   8004211aa5 <_dwarf_read_msb+0x18f>
  8004211952:	83 f8 04             	cmp    $0x4,%eax
  8004211955:	74 49                	je     80042119a0 <_dwarf_read_msb+0x8a>
  8004211957:	83 f8 08             	cmp    $0x8,%eax
  800421195a:	0f 84 96 00 00 00    	je     80042119f6 <_dwarf_read_msb+0xe0>
  8004211960:	e9 40 01 00 00       	jmpq   8004211aa5 <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  8004211965:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211969:	0f b6 00             	movzbl (%rax),%eax
  800421196c:	0f b6 c0             	movzbl %al,%eax
  800421196f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211973:	e9 34 01 00 00       	jmpq   8004211aac <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211978:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421197c:	48 83 c0 01          	add    $0x1,%rax
  8004211980:	0f b6 00             	movzbl (%rax),%eax
  8004211983:	0f b6 d0             	movzbl %al,%edx
  8004211986:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421198a:	0f b6 00             	movzbl (%rax),%eax
  800421198d:	0f b6 c0             	movzbl %al,%eax
  8004211990:	48 c1 e0 08          	shl    $0x8,%rax
  8004211994:	48 09 d0             	or     %rdx,%rax
  8004211997:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800421199b:	e9 0c 01 00 00       	jmpq   8004211aac <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042119a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042119a4:	48 83 c0 03          	add    $0x3,%rax
  80042119a8:	0f b6 00             	movzbl (%rax),%eax
  80042119ab:	0f b6 c0             	movzbl %al,%eax
  80042119ae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042119b2:	48 83 c2 02          	add    $0x2,%rdx
  80042119b6:	0f b6 12             	movzbl (%rdx),%edx
  80042119b9:	0f b6 d2             	movzbl %dl,%edx
  80042119bc:	48 c1 e2 08          	shl    $0x8,%rdx
  80042119c0:	48 09 d0             	or     %rdx,%rax
  80042119c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042119c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042119cb:	48 83 c0 01          	add    $0x1,%rax
  80042119cf:	0f b6 00             	movzbl (%rax),%eax
  80042119d2:	0f b6 c0             	movzbl %al,%eax
  80042119d5:	48 c1 e0 10          	shl    $0x10,%rax
  80042119d9:	48 89 c2             	mov    %rax,%rdx
  80042119dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042119e0:	0f b6 00             	movzbl (%rax),%eax
  80042119e3:	0f b6 c0             	movzbl %al,%eax
  80042119e6:	48 c1 e0 18          	shl    $0x18,%rax
  80042119ea:	48 09 d0             	or     %rdx,%rax
  80042119ed:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042119f1:	e9 b6 00 00 00       	jmpq   8004211aac <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  80042119f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042119fa:	48 83 c0 07          	add    $0x7,%rax
  80042119fe:	0f b6 00             	movzbl (%rax),%eax
  8004211a01:	0f b6 c0             	movzbl %al,%eax
  8004211a04:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211a08:	48 83 c2 06          	add    $0x6,%rdx
  8004211a0c:	0f b6 12             	movzbl (%rdx),%edx
  8004211a0f:	0f b6 d2             	movzbl %dl,%edx
  8004211a12:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211a16:	48 09 d0             	or     %rdx,%rax
  8004211a19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004211a1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211a21:	48 83 c0 05          	add    $0x5,%rax
  8004211a25:	0f b6 00             	movzbl (%rax),%eax
  8004211a28:	0f b6 c0             	movzbl %al,%eax
  8004211a2b:	48 c1 e0 10          	shl    $0x10,%rax
  8004211a2f:	48 89 c2             	mov    %rax,%rdx
  8004211a32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211a36:	48 83 c0 04          	add    $0x4,%rax
  8004211a3a:	0f b6 00             	movzbl (%rax),%eax
  8004211a3d:	0f b6 c0             	movzbl %al,%eax
  8004211a40:	48 c1 e0 18          	shl    $0x18,%rax
  8004211a44:	48 09 d0             	or     %rdx,%rax
  8004211a47:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211a4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211a4f:	48 83 c0 03          	add    $0x3,%rax
  8004211a53:	0f b6 00             	movzbl (%rax),%eax
  8004211a56:	0f b6 c0             	movzbl %al,%eax
  8004211a59:	48 c1 e0 20          	shl    $0x20,%rax
  8004211a5d:	48 89 c2             	mov    %rax,%rdx
  8004211a60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211a64:	48 83 c0 02          	add    $0x2,%rax
  8004211a68:	0f b6 00             	movzbl (%rax),%eax
  8004211a6b:	0f b6 c0             	movzbl %al,%eax
  8004211a6e:	48 c1 e0 28          	shl    $0x28,%rax
  8004211a72:	48 09 d0             	or     %rdx,%rax
  8004211a75:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004211a79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211a7d:	48 83 c0 01          	add    $0x1,%rax
  8004211a81:	0f b6 00             	movzbl (%rax),%eax
  8004211a84:	0f b6 c0             	movzbl %al,%eax
  8004211a87:	48 c1 e0 30          	shl    $0x30,%rax
  8004211a8b:	48 89 c2             	mov    %rax,%rdx
  8004211a8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211a92:	0f b6 00             	movzbl (%rax),%eax
  8004211a95:	0f b6 c0             	movzbl %al,%eax
  8004211a98:	48 c1 e0 38          	shl    $0x38,%rax
  8004211a9c:	48 09 d0             	or     %rdx,%rax
  8004211a9f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211aa3:	eb 07                	jmp    8004211aac <_dwarf_read_msb+0x196>
	default:
		return (0);
  8004211aa5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211aaa:	eb 1a                	jmp    8004211ac6 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  8004211aac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ab0:	48 8b 10             	mov    (%rax),%rdx
  8004211ab3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211ab6:	48 98                	cltq   
  8004211ab8:	48 01 c2             	add    %rax,%rdx
  8004211abb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211abf:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211ac2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211ac6:	c9                   	leaveq 
  8004211ac7:	c3                   	retq   

0000008004211ac8 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  8004211ac8:	55                   	push   %rbp
  8004211ac9:	48 89 e5             	mov    %rsp,%rbp
  8004211acc:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211ad0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211ad4:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211ad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211adb:	48 8b 00             	mov    (%rax),%rax
  8004211ade:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211ae2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211ae9:	00 
	switch (bytes_to_read) {
  8004211aea:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211aed:	83 f8 02             	cmp    $0x2,%eax
  8004211af0:	74 35                	je     8004211b27 <_dwarf_decode_msb+0x5f>
  8004211af2:	83 f8 02             	cmp    $0x2,%eax
  8004211af5:	7f 0a                	jg     8004211b01 <_dwarf_decode_msb+0x39>
  8004211af7:	83 f8 01             	cmp    $0x1,%eax
  8004211afa:	74 18                	je     8004211b14 <_dwarf_decode_msb+0x4c>
  8004211afc:	e9 53 01 00 00       	jmpq   8004211c54 <_dwarf_decode_msb+0x18c>
  8004211b01:	83 f8 04             	cmp    $0x4,%eax
  8004211b04:	74 49                	je     8004211b4f <_dwarf_decode_msb+0x87>
  8004211b06:	83 f8 08             	cmp    $0x8,%eax
  8004211b09:	0f 84 96 00 00 00    	je     8004211ba5 <_dwarf_decode_msb+0xdd>
  8004211b0f:	e9 40 01 00 00       	jmpq   8004211c54 <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  8004211b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b18:	0f b6 00             	movzbl (%rax),%eax
  8004211b1b:	0f b6 c0             	movzbl %al,%eax
  8004211b1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211b22:	e9 34 01 00 00       	jmpq   8004211c5b <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211b27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b2b:	48 83 c0 01          	add    $0x1,%rax
  8004211b2f:	0f b6 00             	movzbl (%rax),%eax
  8004211b32:	0f b6 d0             	movzbl %al,%edx
  8004211b35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b39:	0f b6 00             	movzbl (%rax),%eax
  8004211b3c:	0f b6 c0             	movzbl %al,%eax
  8004211b3f:	48 c1 e0 08          	shl    $0x8,%rax
  8004211b43:	48 09 d0             	or     %rdx,%rax
  8004211b46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211b4a:	e9 0c 01 00 00       	jmpq   8004211c5b <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004211b4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b53:	48 83 c0 03          	add    $0x3,%rax
  8004211b57:	0f b6 00             	movzbl (%rax),%eax
  8004211b5a:	0f b6 c0             	movzbl %al,%eax
  8004211b5d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211b61:	48 83 c2 02          	add    $0x2,%rdx
  8004211b65:	0f b6 12             	movzbl (%rdx),%edx
  8004211b68:	0f b6 d2             	movzbl %dl,%edx
  8004211b6b:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211b6f:	48 09 d0             	or     %rdx,%rax
  8004211b72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211b76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b7a:	48 83 c0 01          	add    $0x1,%rax
  8004211b7e:	0f b6 00             	movzbl (%rax),%eax
  8004211b81:	0f b6 c0             	movzbl %al,%eax
  8004211b84:	48 c1 e0 10          	shl    $0x10,%rax
  8004211b88:	48 89 c2             	mov    %rax,%rdx
  8004211b8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b8f:	0f b6 00             	movzbl (%rax),%eax
  8004211b92:	0f b6 c0             	movzbl %al,%eax
  8004211b95:	48 c1 e0 18          	shl    $0x18,%rax
  8004211b99:	48 09 d0             	or     %rdx,%rax
  8004211b9c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211ba0:	e9 b6 00 00 00       	jmpq   8004211c5b <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211ba5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211ba9:	48 83 c0 07          	add    $0x7,%rax
  8004211bad:	0f b6 00             	movzbl (%rax),%eax
  8004211bb0:	0f b6 c0             	movzbl %al,%eax
  8004211bb3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211bb7:	48 83 c2 06          	add    $0x6,%rdx
  8004211bbb:	0f b6 12             	movzbl (%rdx),%edx
  8004211bbe:	0f b6 d2             	movzbl %dl,%edx
  8004211bc1:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211bc5:	48 09 d0             	or     %rdx,%rax
  8004211bc8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004211bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211bd0:	48 83 c0 05          	add    $0x5,%rax
  8004211bd4:	0f b6 00             	movzbl (%rax),%eax
  8004211bd7:	0f b6 c0             	movzbl %al,%eax
  8004211bda:	48 c1 e0 10          	shl    $0x10,%rax
  8004211bde:	48 89 c2             	mov    %rax,%rdx
  8004211be1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211be5:	48 83 c0 04          	add    $0x4,%rax
  8004211be9:	0f b6 00             	movzbl (%rax),%eax
  8004211bec:	0f b6 c0             	movzbl %al,%eax
  8004211bef:	48 c1 e0 18          	shl    $0x18,%rax
  8004211bf3:	48 09 d0             	or     %rdx,%rax
  8004211bf6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211bfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211bfe:	48 83 c0 03          	add    $0x3,%rax
  8004211c02:	0f b6 00             	movzbl (%rax),%eax
  8004211c05:	0f b6 c0             	movzbl %al,%eax
  8004211c08:	48 c1 e0 20          	shl    $0x20,%rax
  8004211c0c:	48 89 c2             	mov    %rax,%rdx
  8004211c0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211c13:	48 83 c0 02          	add    $0x2,%rax
  8004211c17:	0f b6 00             	movzbl (%rax),%eax
  8004211c1a:	0f b6 c0             	movzbl %al,%eax
  8004211c1d:	48 c1 e0 28          	shl    $0x28,%rax
  8004211c21:	48 09 d0             	or     %rdx,%rax
  8004211c24:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004211c28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211c2c:	48 83 c0 01          	add    $0x1,%rax
  8004211c30:	0f b6 00             	movzbl (%rax),%eax
  8004211c33:	0f b6 c0             	movzbl %al,%eax
  8004211c36:	48 c1 e0 30          	shl    $0x30,%rax
  8004211c3a:	48 89 c2             	mov    %rax,%rdx
  8004211c3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211c41:	0f b6 00             	movzbl (%rax),%eax
  8004211c44:	0f b6 c0             	movzbl %al,%eax
  8004211c47:	48 c1 e0 38          	shl    $0x38,%rax
  8004211c4b:	48 09 d0             	or     %rdx,%rax
  8004211c4e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211c52:	eb 07                	jmp    8004211c5b <_dwarf_decode_msb+0x193>
	default:
		return (0);
  8004211c54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211c59:	eb 1a                	jmp    8004211c75 <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  8004211c5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c5f:	48 8b 10             	mov    (%rax),%rdx
  8004211c62:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211c65:	48 98                	cltq   
  8004211c67:	48 01 c2             	add    %rax,%rdx
  8004211c6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c6e:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211c75:	c9                   	leaveq 
  8004211c76:	c3                   	retq   

0000008004211c77 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211c77:	55                   	push   %rbp
  8004211c78:	48 89 e5             	mov    %rsp,%rbp
  8004211c7b:	48 83 ec 30          	sub    $0x30,%rsp
  8004211c7f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211c83:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004211c87:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211c8e:	00 
	uint8_t b;
	int shift = 0;
  8004211c8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211c96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211c9a:	48 8b 10             	mov    (%rax),%rdx
  8004211c9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ca1:	48 01 d0             	add    %rdx,%rax
  8004211ca4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cac:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211cb0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211cb4:	0f b6 00             	movzbl (%rax),%eax
  8004211cb7:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211cba:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211cbe:	83 e0 7f             	and    $0x7f,%eax
  8004211cc1:	89 c2                	mov    %eax,%edx
  8004211cc3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211cc6:	89 c1                	mov    %eax,%ecx
  8004211cc8:	d3 e2                	shl    %cl,%edx
  8004211cca:	89 d0                	mov    %edx,%eax
  8004211ccc:	48 98                	cltq   
  8004211cce:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211cd2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211cd6:	48 8b 00             	mov    (%rax),%rax
  8004211cd9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211cdd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211ce1:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211ce4:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211ce8:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211cec:	84 c0                	test   %al,%al
  8004211cee:	78 b8                	js     8004211ca8 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004211cf0:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211cf4:	7f 1f                	jg     8004211d15 <_dwarf_read_sleb128+0x9e>
  8004211cf6:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211cfa:	83 e0 40             	and    $0x40,%eax
  8004211cfd:	85 c0                	test   %eax,%eax
  8004211cff:	74 14                	je     8004211d15 <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004211d01:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211d04:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211d09:	89 c1                	mov    %eax,%ecx
  8004211d0b:	d3 e2                	shl    %cl,%edx
  8004211d0d:	89 d0                	mov    %edx,%eax
  8004211d0f:	48 98                	cltq   
  8004211d11:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004211d15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211d19:	c9                   	leaveq 
  8004211d1a:	c3                   	retq   

0000008004211d1b <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211d1b:	55                   	push   %rbp
  8004211d1c:	48 89 e5             	mov    %rsp,%rbp
  8004211d1f:	48 83 ec 30          	sub    $0x30,%rsp
  8004211d23:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211d27:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004211d2b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211d32:	00 
	uint8_t b;
	int shift = 0;
  8004211d33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211d3a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211d3e:	48 8b 10             	mov    (%rax),%rdx
  8004211d41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211d45:	48 01 d0             	add    %rdx,%rax
  8004211d48:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211d4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d50:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211d54:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211d58:	0f b6 00             	movzbl (%rax),%eax
  8004211d5b:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211d5e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211d62:	83 e0 7f             	and    $0x7f,%eax
  8004211d65:	89 c2                	mov    %eax,%edx
  8004211d67:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211d6a:	89 c1                	mov    %eax,%ecx
  8004211d6c:	d3 e2                	shl    %cl,%edx
  8004211d6e:	89 d0                	mov    %edx,%eax
  8004211d70:	48 98                	cltq   
  8004211d72:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211d76:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211d7a:	48 8b 00             	mov    (%rax),%rax
  8004211d7d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211d81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211d85:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211d88:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211d8c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211d90:	84 c0                	test   %al,%al
  8004211d92:	78 b8                	js     8004211d4c <_dwarf_read_uleb128+0x31>

	return (ret);
  8004211d94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211d98:	c9                   	leaveq 
  8004211d99:	c3                   	retq   

0000008004211d9a <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004211d9a:	55                   	push   %rbp
  8004211d9b:	48 89 e5             	mov    %rsp,%rbp
  8004211d9e:	48 83 ec 28          	sub    $0x28,%rsp
  8004211da2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004211da6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211dad:	00 
	uint8_t b;
	int shift = 0;
  8004211dae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211db5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211db9:	48 8b 00             	mov    (%rax),%rax
  8004211dbc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211dc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211dc4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211dc8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211dcc:	0f b6 00             	movzbl (%rax),%eax
  8004211dcf:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211dd2:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211dd6:	83 e0 7f             	and    $0x7f,%eax
  8004211dd9:	89 c2                	mov    %eax,%edx
  8004211ddb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211dde:	89 c1                	mov    %eax,%ecx
  8004211de0:	d3 e2                	shl    %cl,%edx
  8004211de2:	89 d0                	mov    %edx,%eax
  8004211de4:	48 98                	cltq   
  8004211de6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211dea:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211dee:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211df2:	84 c0                	test   %al,%al
  8004211df4:	78 ca                	js     8004211dc0 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004211df6:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211dfa:	7f 1f                	jg     8004211e1b <_dwarf_decode_sleb128+0x81>
  8004211dfc:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211e00:	83 e0 40             	and    $0x40,%eax
  8004211e03:	85 c0                	test   %eax,%eax
  8004211e05:	74 14                	je     8004211e1b <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004211e07:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211e0a:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211e0f:	89 c1                	mov    %eax,%ecx
  8004211e11:	d3 e2                	shl    %cl,%edx
  8004211e13:	89 d0                	mov    %edx,%eax
  8004211e15:	48 98                	cltq   
  8004211e17:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004211e1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211e1f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211e23:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211e26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211e2a:	c9                   	leaveq 
  8004211e2b:	c3                   	retq   

0000008004211e2c <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004211e2c:	55                   	push   %rbp
  8004211e2d:	48 89 e5             	mov    %rsp,%rbp
  8004211e30:	48 83 ec 28          	sub    $0x28,%rsp
  8004211e34:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004211e38:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211e3f:	00 
	uint8_t b;
	int shift = 0;
  8004211e40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211e47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211e4b:	48 8b 00             	mov    (%rax),%rax
  8004211e4e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211e52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e56:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211e5a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211e5e:	0f b6 00             	movzbl (%rax),%eax
  8004211e61:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211e64:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211e68:	83 e0 7f             	and    $0x7f,%eax
  8004211e6b:	89 c2                	mov    %eax,%edx
  8004211e6d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211e70:	89 c1                	mov    %eax,%ecx
  8004211e72:	d3 e2                	shl    %cl,%edx
  8004211e74:	89 d0                	mov    %edx,%eax
  8004211e76:	48 98                	cltq   
  8004211e78:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211e7c:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211e80:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211e84:	84 c0                	test   %al,%al
  8004211e86:	78 ca                	js     8004211e52 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004211e88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211e8c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211e90:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211e93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211e97:	c9                   	leaveq 
  8004211e98:	c3                   	retq   

0000008004211e99 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004211e99:	55                   	push   %rbp
  8004211e9a:	48 89 e5             	mov    %rsp,%rbp
  8004211e9d:	48 83 ec 28          	sub    $0x28,%rsp
  8004211ea1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211ea5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211ea9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004211ead:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211eb1:	48 8b 10             	mov    (%rax),%rdx
  8004211eb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211eb8:	48 01 d0             	add    %rdx,%rax
  8004211ebb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211ebf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211ec3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211ec7:	eb 17                	jmp    8004211ee0 <_dwarf_read_string+0x47>
		src++;
  8004211ec9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211ece:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ed2:	48 8b 00             	mov    (%rax),%rax
  8004211ed5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211ed9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211edd:	48 89 10             	mov    %rdx,(%rax)
	while (*src != '\0' && *offsetp < size) {
  8004211ee0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211ee4:	0f b6 00             	movzbl (%rax),%eax
  8004211ee7:	84 c0                	test   %al,%al
  8004211ee9:	74 0d                	je     8004211ef8 <_dwarf_read_string+0x5f>
  8004211eeb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211eef:	48 8b 00             	mov    (%rax),%rax
  8004211ef2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211ef6:	72 d1                	jb     8004211ec9 <_dwarf_read_string+0x30>
	}

	if (*src == '\0' && *offsetp < size)
  8004211ef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211efc:	0f b6 00             	movzbl (%rax),%eax
  8004211eff:	84 c0                	test   %al,%al
  8004211f01:	75 1f                	jne    8004211f22 <_dwarf_read_string+0x89>
  8004211f03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211f07:	48 8b 00             	mov    (%rax),%rax
  8004211f0a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211f0e:	73 12                	jae    8004211f22 <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004211f10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211f14:	48 8b 00             	mov    (%rax),%rax
  8004211f17:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211f1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211f1f:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211f22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211f26:	c9                   	leaveq 
  8004211f27:	c3                   	retq   

0000008004211f28 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004211f28:	55                   	push   %rbp
  8004211f29:	48 89 e5             	mov    %rsp,%rbp
  8004211f2c:	48 83 ec 28          	sub    $0x28,%rsp
  8004211f30:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211f34:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211f38:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004211f3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211f40:	48 8b 10             	mov    (%rax),%rdx
  8004211f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f47:	48 01 d0             	add    %rdx,%rax
  8004211f4a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211f4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211f52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004211f56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211f5a:	48 8b 10             	mov    (%rax),%rdx
  8004211f5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211f61:	48 01 c2             	add    %rax,%rdx
  8004211f64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211f68:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211f6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211f6f:	c9                   	leaveq 
  8004211f70:	c3                   	retq   

0000008004211f71 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004211f71:	55                   	push   %rbp
  8004211f72:	48 89 e5             	mov    %rsp,%rbp
  8004211f75:	48 83 ec 20          	sub    $0x20,%rsp
  8004211f79:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004211f7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211f85:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211f8a:	75 35                	jne    8004211fc1 <_dwarf_elf_get_byte_order+0x50>
  8004211f8c:	48 b9 a0 03 22 04 80 	movabs $0x80042203a0,%rcx
  8004211f93:	00 00 00 
  8004211f96:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004211f9d:	00 00 00 
  8004211fa0:	be 29 01 00 00       	mov    $0x129,%esi
  8004211fa5:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004211fac:	00 00 00 
  8004211faf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fb4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211fbb:	00 00 00 
  8004211fbe:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004211fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211fc5:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004211fc9:	0f b6 c0             	movzbl %al,%eax
  8004211fcc:	83 f8 02             	cmp    $0x2,%eax
  8004211fcf:	75 07                	jne    8004211fd8 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004211fd1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fd6:	eb 05                	jmp    8004211fdd <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004211fd8:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004211fdd:	c9                   	leaveq 
  8004211fde:	c3                   	retq   

0000008004211fdf <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211fdf:	55                   	push   %rbp
  8004211fe0:	48 89 e5             	mov    %rsp,%rbp
  8004211fe3:	48 83 ec 20          	sub    $0x20,%rsp
  8004211fe7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004211feb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211fef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211ff3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211ff8:	75 35                	jne    800421202f <_dwarf_elf_get_pointer_size+0x50>
  8004211ffa:	48 b9 a0 03 22 04 80 	movabs $0x80042203a0,%rcx
  8004212001:	00 00 00 
  8004212004:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  800421200b:	00 00 00 
  800421200e:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004212013:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  800421201a:	00 00 00 
  800421201d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212022:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212029:	00 00 00 
  800421202c:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  800421202f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212033:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004212037:	3c 01                	cmp    $0x1,%al
  8004212039:	75 07                	jne    8004212042 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  800421203b:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212040:	eb 05                	jmp    8004212047 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004212042:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004212047:	c9                   	leaveq 
  8004212048:	c3                   	retq   

0000008004212049 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004212049:	55                   	push   %rbp
  800421204a:	48 89 e5             	mov    %rsp,%rbp
  800421204d:	53                   	push   %rbx
  800421204e:	48 83 ec 18          	sub    $0x18,%rsp
  8004212052:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212056:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  800421205a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421205e:	ba 60 00 00 00       	mov    $0x60,%edx
  8004212063:	be 00 00 00 00       	mov    $0x0,%esi
  8004212068:	48 89 c7             	mov    %rax,%rdi
  800421206b:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004212072:	00 00 00 
  8004212075:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004212077:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421207b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004212082:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212086:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421208d:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  800421208e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212092:	48 89 c7             	mov    %rax,%rdi
  8004212095:	48 b8 df 1f 21 04 80 	movabs $0x8004211fdf,%rax
  800421209c:	00 00 00 
  800421209f:	ff d0                	callq  *%rax
  80042120a1:	0f b6 d0             	movzbl %al,%edx
  80042120a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120a8:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  80042120ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042120af:	48 89 c7             	mov    %rax,%rdi
  80042120b2:	48 b8 71 1f 21 04 80 	movabs $0x8004211f71,%rax
  80042120b9:	00 00 00 
  80042120bc:	ff d0                	callq  *%rax
  80042120be:	85 c0                	test   %eax,%eax
  80042120c0:	75 26                	jne    80042120e8 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  80042120c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120c6:	48 b9 16 19 21 04 80 	movabs $0x8004211916,%rcx
  80042120cd:	00 00 00 
  80042120d0:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  80042120d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120d8:	48 bb c8 1a 21 04 80 	movabs $0x8004211ac8,%rbx
  80042120df:	00 00 00 
  80042120e2:	48 89 58 20          	mov    %rbx,0x20(%rax)
  80042120e6:	eb 24                	jmp    800421210c <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  80042120e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120ec:	48 b9 c9 16 21 04 80 	movabs $0x80042116c9,%rcx
  80042120f3:	00 00 00 
  80042120f6:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  80042120fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120fe:	48 be f5 17 21 04 80 	movabs $0x80042117f5,%rsi
  8004212105:	00 00 00 
  8004212108:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  800421210c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212110:	48 89 c7             	mov    %rax,%rdi
  8004212113:	48 b8 16 36 21 04 80 	movabs $0x8004213616,%rax
  800421211a:	00 00 00 
  800421211d:	ff d0                	callq  *%rax
	return 0;
  800421211f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212124:	48 83 c4 18          	add    $0x18,%rsp
  8004212128:	5b                   	pop    %rbx
  8004212129:	5d                   	pop    %rbp
  800421212a:	c3                   	retq   

000000800421212b <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  800421212b:	55                   	push   %rbp
  800421212c:	48 89 e5             	mov    %rsp,%rbp
  800421212f:	48 83 ec 20          	sub    $0x20,%rsp
  8004212133:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212137:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  800421213b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421213f:	48 8b 10             	mov    (%rax),%rdx
  8004212142:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212146:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421214a:	48 39 c2             	cmp    %rax,%rdx
  800421214d:	76 0a                	jbe    8004212159 <_get_next_cu+0x2e>
		return -1;
  800421214f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212154:	e9 6b 01 00 00       	jmpq   80042122c4 <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004212159:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421215d:	48 8b 00             	mov    (%rax),%rax
  8004212160:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004212164:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212168:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421216c:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004212170:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212174:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212178:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421217c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004212180:	48 89 d1             	mov    %rdx,%rcx
  8004212183:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004212187:	ba 04 00 00 00       	mov    $0x4,%edx
  800421218c:	48 89 cf             	mov    %rcx,%rdi
  800421218f:	ff d0                	callq  *%rax
  8004212191:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004212194:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004212198:	75 2a                	jne    80042121c4 <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  800421219a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421219e:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042121a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042121a6:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042121aa:	48 89 d1             	mov    %rdx,%rcx
  80042121ad:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042121b1:	ba 08 00 00 00       	mov    $0x8,%edx
  80042121b6:	48 89 cf             	mov    %rcx,%rdi
  80042121b9:	ff d0                	callq  *%rax
  80042121bb:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  80042121be:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  80042121c2:	eb 04                	jmp    80042121c8 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  80042121c4:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  80042121c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042121cc:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  80042121d0:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  80042121d3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042121d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042121da:	48 01 c2             	add    %rax,%rdx
  80042121dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042121e1:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  80042121e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042121e8:	48 8b 10             	mov    (%rax),%rdx
  80042121eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042121ef:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  80042121f3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042121f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042121fa:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  80042121fd:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004212201:	75 07                	jne    800421220a <_get_next_cu+0xdf>
  8004212203:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212208:	eb 05                	jmp    800421220f <_get_next_cu+0xe4>
  800421220a:	b8 0c 00 00 00       	mov    $0xc,%eax
  800421220f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004212213:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004212216:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421221a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421221e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212222:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004212226:	48 89 d1             	mov    %rdx,%rcx
  8004212229:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800421222d:	ba 02 00 00 00       	mov    $0x2,%edx
  8004212232:	48 89 cf             	mov    %rcx,%rdi
  8004212235:	ff d0                	callq  *%rax
  8004212237:	89 c2                	mov    %eax,%edx
  8004212239:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421223d:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004212241:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212245:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212249:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  800421224d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212251:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  8004212255:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004212259:	48 89 cf             	mov    %rcx,%rdi
  800421225c:	ff d0                	callq  *%rax
  800421225e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004212262:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004212266:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421226a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421226e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212272:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004212276:	48 89 d1             	mov    %rdx,%rcx
  8004212279:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800421227d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004212282:	48 89 cf             	mov    %rcx,%rdi
  8004212285:	ff d0                	callq  *%rax
  8004212287:	89 c2                	mov    %eax,%edx
  8004212289:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421228d:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004212290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212294:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212298:	66 83 f8 01          	cmp    $0x1,%ax
  800421229c:	76 0e                	jbe    80042122ac <_get_next_cu+0x181>
  800421229e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042122a2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042122a6:	66 83 f8 04          	cmp    $0x4,%ax
  80042122aa:	76 07                	jbe    80042122b3 <_get_next_cu+0x188>
		return -1;
  80042122ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042122b1:	eb 11                	jmp    80042122c4 <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  80042122b3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042122b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042122bb:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  80042122bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042122c4:	c9                   	leaveq 
  80042122c5:	c3                   	retq   

00000080042122c6 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  80042122c6:	55                   	push   %rbp
  80042122c7:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  80042122ca:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  80042122ce:	0f b6 c8             	movzbl %al,%ecx
  80042122d1:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  80042122d5:	0f b7 d0             	movzwl %ax,%edx
  80042122d8:	48 8b 45 10          	mov    0x10(%rbp),%rax
  80042122dc:	48 89 c6             	mov    %rax,%rsi
  80042122df:	48 bf d2 03 22 04 80 	movabs $0x80042203d2,%rdi
  80042122e6:	00 00 00 
  80042122e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042122ee:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  80042122f5:	00 00 00 
  80042122f8:	41 ff d0             	callq  *%r8
}
  80042122fb:	5d                   	pop    %rbp
  80042122fc:	c3                   	retq   

00000080042122fd <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  80042122fd:	55                   	push   %rbp
  80042122fe:	48 89 e5             	mov    %rsp,%rbp
  8004212301:	48 83 ec 60          	sub    $0x60,%rsp
  8004212305:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004212309:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421230d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004212311:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004212315:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  800421231a:	75 35                	jne    8004212351 <_dwarf_abbrev_parse+0x54>
  800421231c:	48 b9 e1 03 22 04 80 	movabs $0x80042203e1,%rcx
  8004212323:	00 00 00 
  8004212326:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  800421232d:	00 00 00 
  8004212330:	be a4 01 00 00       	mov    $0x1a4,%esi
  8004212335:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  800421233c:	00 00 00 
  800421233f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212344:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421234b:	00 00 00 
  800421234e:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004212351:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004212356:	75 35                	jne    800421238d <_dwarf_abbrev_parse+0x90>
  8004212358:	48 b9 ed 03 22 04 80 	movabs $0x80042203ed,%rcx
  800421235f:	00 00 00 
  8004212362:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004212369:	00 00 00 
  800421236c:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004212371:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004212378:	00 00 00 
  800421237b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212380:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212387:	00 00 00 
  800421238a:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  800421238d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212391:	48 8b 10             	mov    (%rax),%rdx
  8004212394:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212398:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421239c:	48 39 c2             	cmp    %rax,%rdx
  800421239f:	72 0a                	jb     80042123ab <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  80042123a1:	b8 04 00 00 00       	mov    $0x4,%eax
  80042123a6:	e9 d3 01 00 00       	jmpq   800421257e <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  80042123ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042123af:	48 8b 00             	mov    (%rax),%rax
  80042123b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  80042123b6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042123ba:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042123be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042123c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042123c6:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042123ca:	48 89 d6             	mov    %rdx,%rsi
  80042123cd:	48 89 c7             	mov    %rax,%rdi
  80042123d0:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  80042123d7:	00 00 00 
  80042123da:	ff d0                	callq  *%rax
  80042123dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  80042123e0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042123e5:	75 15                	jne    80042123fc <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  80042123e7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042123eb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  80042123f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042123f7:	e9 82 01 00 00       	jmpq   800421257e <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042123fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212400:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212404:	48 89 d6             	mov    %rdx,%rsi
  8004212407:	48 89 c7             	mov    %rax,%rdi
  800421240a:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  8004212411:	00 00 00 
  8004212414:	ff d0                	callq  *%rax
  8004212416:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  800421241a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421241e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212422:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004212426:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421242a:	ba 01 00 00 00       	mov    $0x1,%edx
  800421242f:	48 89 cf             	mov    %rcx,%rdi
  8004212432:	ff d0                	callq  *%rax
  8004212434:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004212437:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421243b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421243f:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004212442:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212446:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421244a:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  800421244e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212452:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  8004212456:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004212459:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421245d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004212461:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  8004212465:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212469:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8004212470:	00 
	abp->ab_atnum    = 0;
  8004212471:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212475:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  800421247c:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  800421247d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212481:	48 8b 00             	mov    (%rax),%rax
  8004212484:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004212488:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421248c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212490:	48 89 d6             	mov    %rdx,%rsi
  8004212493:	48 89 c7             	mov    %rax,%rdi
  8004212496:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  800421249d:	00 00 00 
  80042124a0:	ff d0                	callq  *%rax
  80042124a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042124a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042124aa:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042124ae:	48 89 d6             	mov    %rdx,%rsi
  80042124b1:	48 89 c7             	mov    %rax,%rdi
  80042124b4:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  80042124bb:	00 00 00 
  80042124be:	ff d0                	callq  *%rax
  80042124c0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  80042124c4:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042124c9:	0f 84 89 00 00 00    	je     8004212558 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  80042124cf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042124d3:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042124d7:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042124db:	48 89 d0             	mov    %rdx,%rax
  80042124de:	48 01 c0             	add    %rax,%rax
  80042124e1:	48 01 d0             	add    %rdx,%rax
  80042124e4:	48 c1 e0 03          	shl    $0x3,%rax
  80042124e8:	48 01 c8             	add    %rcx,%rax
  80042124eb:	48 8d 50 30          	lea    0x30(%rax),%rdx
  80042124ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042124f3:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  80042124f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042124fa:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042124fe:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004212502:	48 89 d0             	mov    %rdx,%rax
  8004212505:	48 01 c0             	add    %rax,%rax
  8004212508:	48 01 d0             	add    %rdx,%rax
  800421250b:	48 c1 e0 03          	shl    $0x3,%rax
  800421250f:	48 01 c8             	add    %rcx,%rax
  8004212512:	48 8d 50 38          	lea    0x38(%rax),%rdx
  8004212516:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421251a:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  800421251d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212521:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212525:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004212529:	48 89 d0             	mov    %rdx,%rax
  800421252c:	48 01 c0             	add    %rax,%rax
  800421252f:	48 01 d0             	add    %rdx,%rax
  8004212532:	48 c1 e0 03          	shl    $0x3,%rax
  8004212536:	48 01 c8             	add    %rcx,%rax
  8004212539:	48 8d 50 40          	lea    0x40(%rax),%rdx
  800421253d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212541:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  8004212544:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212548:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421254c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004212550:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212554:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  8004212558:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421255d:	0f 85 1a ff ff ff    	jne    800421247d <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  8004212563:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212567:	48 8b 00             	mov    (%rax),%rax
  800421256a:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  800421256e:	48 89 c2             	mov    %rax,%rdx
  8004212571:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212575:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004212579:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421257e:	c9                   	leaveq 
  800421257f:	c3                   	retq   

0000008004212580 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004212580:	55                   	push   %rbp
  8004212581:	48 89 e5             	mov    %rsp,%rbp
  8004212584:	48 83 ec 70          	sub    $0x70,%rsp
  8004212588:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421258c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212590:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  8004212594:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212599:	75 0a                	jne    80042125a5 <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  800421259b:	b8 04 00 00 00       	mov    $0x4,%eax
  80042125a0:	e9 0a 01 00 00       	jmpq   80042126af <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  80042125a5:	48 bf f8 03 22 04 80 	movabs $0x80042203f8,%rdi
  80042125ac:	00 00 00 
  80042125af:	48 b8 e0 68 21 04 80 	movabs $0x80042168e0,%rax
  80042125b6:	00 00 00 
  80042125b9:	ff d0                	callq  *%rax
  80042125bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  80042125bf:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042125c4:	75 35                	jne    80042125fb <_dwarf_abbrev_find+0x7b>
  80042125c6:	48 b9 ed 03 22 04 80 	movabs $0x80042203ed,%rcx
  80042125cd:	00 00 00 
  80042125d0:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  80042125d7:	00 00 00 
  80042125da:	be e5 01 00 00       	mov    $0x1e5,%esi
  80042125df:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  80042125e6:	00 00 00 
  80042125e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042125ee:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042125f5:	00 00 00 
  80042125f8:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  80042125fb:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042125ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  8004212603:	e9 8d 00 00 00       	jmpq   8004212695 <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004212608:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  800421260c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212610:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  8004212614:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212618:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800421261c:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212620:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  8004212624:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212629:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  800421262d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212632:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  8004212636:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800421263b:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  800421263f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212644:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  8004212648:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800421264d:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004212651:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  8004212656:	48 89 c7             	mov    %rax,%rdi
  8004212659:	48 b8 fd 22 21 04 80 	movabs $0x80042122fd,%rax
  8004212660:	00 00 00 
  8004212663:	ff d0                	callq  *%rax
  8004212665:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  8004212668:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421266c:	74 05                	je     8004212673 <_dwarf_abbrev_find+0xf3>
			return (ret);
  800421266e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212671:	eb 3c                	jmp    80042126af <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  8004212673:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212677:	48 8b 00             	mov    (%rax),%rax
  800421267a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421267e:	75 07                	jne    8004212687 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004212680:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212685:	eb 28                	jmp    80042126af <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004212687:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421268b:	48 8b 00             	mov    (%rax),%rax
  800421268e:	48 85 c0             	test   %rax,%rax
  8004212691:	75 02                	jne    8004212695 <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  8004212693:	eb 15                	jmp    80042126aa <_dwarf_abbrev_find+0x12a>
	while (offset < ds->ds_size) {
  8004212695:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212699:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421269d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042126a1:	48 39 c2             	cmp    %rax,%rdx
  80042126a4:	0f 87 5e ff ff ff    	ja     8004212608 <_dwarf_abbrev_find+0x88>
		}
	}

	return DW_DLE_NO_ENTRY;
  80042126aa:	b8 04 00 00 00       	mov    $0x4,%eax
}
  80042126af:	c9                   	leaveq 
  80042126b0:	c3                   	retq   

00000080042126b1 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  80042126b1:	55                   	push   %rbp
  80042126b2:	48 89 e5             	mov    %rsp,%rbp
  80042126b5:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  80042126bc:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042126c3:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042126ca:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  80042126d1:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  80042126d8:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  80042126df:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  80042126e6:	48 bf 06 04 22 04 80 	movabs $0x8004220406,%rdi
  80042126ed:	00 00 00 
  80042126f0:	48 b8 e0 68 21 04 80 	movabs $0x80042168e0,%rax
  80042126f7:	00 00 00 
  80042126fa:	ff d0                	callq  *%rax
  80042126fc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004212700:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212704:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212708:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  800421270c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212713:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004212717:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  800421271a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  8004212721:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004212728:	ba 60 00 00 00       	mov    $0x60,%edx
  800421272d:	be 00 00 00 00       	mov    $0x0,%esi
  8004212732:	48 89 c7             	mov    %rax,%rdi
  8004212735:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  800421273c:	00 00 00 
  800421273f:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  8004212741:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212748:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  800421274f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004212756:	48 8b 00             	mov    (%rax),%rax
  8004212759:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  800421275d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004212764:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212768:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  800421276c:	8b 45 10             	mov    0x10(%rbp),%eax
  800421276f:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  8004212772:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004212779:	00 

	switch (form) {
  800421277a:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  8004212781:	20 
  8004212782:	0f 87 82 04 00 00    	ja     8004212c0a <_dwarf_attr_init+0x559>
  8004212788:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421278f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004212796:	00 
  8004212797:	48 b8 30 04 22 04 80 	movabs $0x8004220430,%rax
  800421279e:	00 00 00 
  80042127a1:	48 01 d0             	add    %rdx,%rax
  80042127a4:	48 8b 00             	mov    (%rax),%rax
  80042127a7:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042127a9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042127b0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042127b4:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042127bb:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042127bf:	0f b6 d2             	movzbl %dl,%edx
  80042127c2:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042127c9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042127cd:	48 89 cf             	mov    %rcx,%rdi
  80042127d0:	ff d0                	callq  *%rax
  80042127d2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042127d6:	e9 37 04 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  80042127db:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042127e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042127e6:	48 89 d6             	mov    %rdx,%rsi
  80042127e9:	48 89 c7             	mov    %rax,%rdi
  80042127ec:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  80042127f3:	00 00 00 
  80042127f6:	ff d0                	callq  *%rax
  80042127f8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042127fc:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212800:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212807:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421280b:	48 89 ce             	mov    %rcx,%rsi
  800421280e:	48 89 c7             	mov    %rax,%rdi
  8004212811:	48 b8 28 1f 21 04 80 	movabs $0x8004211f28,%rax
  8004212818:	00 00 00 
  800421281b:	ff d0                	callq  *%rax
  800421281d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212821:	e9 ec 03 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004212826:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421282d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212831:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212838:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421283c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004212841:	48 89 cf             	mov    %rcx,%rdi
  8004212844:	ff d0                	callq  *%rax
  8004212846:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421284a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421284e:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212855:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212859:	48 89 ce             	mov    %rcx,%rsi
  800421285c:	48 89 c7             	mov    %rax,%rdi
  800421285f:	48 b8 28 1f 21 04 80 	movabs $0x8004211f28,%rax
  8004212866:	00 00 00 
  8004212869:	ff d0                	callq  *%rax
  800421286b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421286f:	e9 9e 03 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004212874:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421287b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421287f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212886:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421288a:	ba 02 00 00 00       	mov    $0x2,%edx
  800421288f:	48 89 cf             	mov    %rcx,%rdi
  8004212892:	ff d0                	callq  *%rax
  8004212894:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212898:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421289c:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042128a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042128a7:	48 89 ce             	mov    %rcx,%rsi
  80042128aa:	48 89 c7             	mov    %rax,%rdi
  80042128ad:	48 b8 28 1f 21 04 80 	movabs $0x8004211f28,%rax
  80042128b4:	00 00 00 
  80042128b7:	ff d0                	callq  *%rax
  80042128b9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042128bd:	e9 50 03 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042128c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042128c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042128cd:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042128d4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042128d8:	ba 04 00 00 00       	mov    $0x4,%edx
  80042128dd:	48 89 cf             	mov    %rcx,%rdi
  80042128e0:	ff d0                	callq  *%rax
  80042128e2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042128e6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042128ea:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042128f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042128f5:	48 89 ce             	mov    %rcx,%rsi
  80042128f8:	48 89 c7             	mov    %rax,%rdi
  80042128fb:	48 b8 28 1f 21 04 80 	movabs $0x8004211f28,%rax
  8004212902:	00 00 00 
  8004212905:	ff d0                	callq  *%rax
  8004212907:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421290b:	e9 02 03 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004212910:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212917:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421291b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212922:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212926:	ba 01 00 00 00       	mov    $0x1,%edx
  800421292b:	48 89 cf             	mov    %rcx,%rdi
  800421292e:	ff d0                	callq  *%rax
  8004212930:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212934:	e9 d9 02 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004212939:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212940:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212944:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421294b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421294f:	ba 02 00 00 00       	mov    $0x2,%edx
  8004212954:	48 89 cf             	mov    %rcx,%rdi
  8004212957:	ff d0                	callq  *%rax
  8004212959:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421295d:	e9 b0 02 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004212962:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212969:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421296d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212974:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212978:	ba 04 00 00 00       	mov    $0x4,%edx
  800421297d:	48 89 cf             	mov    %rcx,%rdi
  8004212980:	ff d0                	callq  *%rax
  8004212982:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212986:	e9 87 02 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  800421298b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212992:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212996:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421299d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042129a1:	ba 08 00 00 00       	mov    $0x8,%edx
  80042129a6:	48 89 cf             	mov    %rcx,%rdi
  80042129a9:	ff d0                	callq  *%rax
  80042129ab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042129af:	e9 5e 02 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  80042129b4:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042129bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042129bf:	48 89 d6             	mov    %rdx,%rsi
  80042129c2:	48 89 c7             	mov    %rax,%rdi
  80042129c5:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  80042129cc:	00 00 00 
  80042129cf:	ff d0                	callq  *%rax
  80042129d1:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  80042129d8:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  80042129df:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  80042129e6:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  80042129ed:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042129f4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042129fb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212a02:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004212a09:	4d 89 c1             	mov    %r8,%r9
  8004212a0c:	49 89 f8             	mov    %rdi,%r8
  8004212a0f:	48 89 c7             	mov    %rax,%rdi
  8004212a12:	48 b8 b1 26 21 04 80 	movabs $0x80042126b1,%rax
  8004212a19:	00 00 00 
  8004212a1c:	ff d0                	callq  *%rax
  8004212a1e:	e9 1d 03 00 00       	jmpq   8004212d40 <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  8004212a23:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212a2a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212a2e:	66 83 f8 02          	cmp    $0x2,%ax
  8004212a32:	75 2f                	jne    8004212a63 <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004212a34:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212a3b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212a3f:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212a46:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004212a4a:	0f b6 d2             	movzbl %dl,%edx
  8004212a4d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212a54:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212a58:	48 89 cf             	mov    %rcx,%rdi
  8004212a5b:	ff d0                	callq  *%rax
  8004212a5d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004212a61:	eb 39                	jmp    8004212a9c <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  8004212a63:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212a6a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212a6e:	66 83 f8 03          	cmp    $0x3,%ax
  8004212a72:	75 28                	jne    8004212a9c <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212a74:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212a7b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212a7f:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212a83:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212a8a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212a8e:	48 89 cf             	mov    %rcx,%rdi
  8004212a91:	ff d0                	callq  *%rax
  8004212a93:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212a97:	e9 76 01 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
  8004212a9c:	e9 71 01 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004212aa1:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212aa8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212aac:	48 89 d6             	mov    %rdx,%rsi
  8004212aaf:	48 89 c7             	mov    %rax,%rdi
  8004212ab2:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  8004212ab9:	00 00 00 
  8004212abc:	ff d0                	callq  *%rax
  8004212abe:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212ac2:	e9 4b 01 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  8004212ac7:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212ace:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212ad2:	48 89 d6             	mov    %rdx,%rsi
  8004212ad5:	48 89 c7             	mov    %rax,%rdi
  8004212ad8:	48 b8 77 1c 21 04 80 	movabs $0x8004211c77,%rax
  8004212adf:	00 00 00 
  8004212ae2:	ff d0                	callq  *%rax
  8004212ae4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212ae8:	e9 25 01 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212aed:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212af4:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212af8:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212afc:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212b03:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212b07:	48 89 cf             	mov    %rcx,%rdi
  8004212b0a:	ff d0                	callq  *%rax
  8004212b0c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212b10:	e9 fd 00 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  8004212b15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212b19:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004212b1d:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212b24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212b28:	48 89 ce             	mov    %rcx,%rsi
  8004212b2b:	48 89 c7             	mov    %rax,%rdi
  8004212b2e:	48 b8 99 1e 21 04 80 	movabs $0x8004211e99,%rax
  8004212b35:	00 00 00 
  8004212b38:	ff d0                	callq  *%rax
  8004212b3a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212b3e:	e9 cf 00 00 00       	jmpq   8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212b43:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212b4a:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212b4e:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212b52:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212b59:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212b5d:	48 89 cf             	mov    %rcx,%rdi
  8004212b60:	ff d0                	callq  *%rax
  8004212b62:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  8004212b66:	48 bf 12 04 22 04 80 	movabs $0x8004220412,%rdi
  8004212b6d:	00 00 00 
  8004212b70:	48 b8 e0 68 21 04 80 	movabs $0x80042168e0,%rax
  8004212b77:	00 00 00 
  8004212b7a:	ff d0                	callq  *%rax
  8004212b7c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  8004212b80:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212b85:	75 35                	jne    8004212bbc <_dwarf_attr_init+0x50b>
  8004212b87:	48 b9 1d 04 22 04 80 	movabs $0x800422041d,%rcx
  8004212b8e:	00 00 00 
  8004212b91:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004212b98:	00 00 00 
  8004212b9b:	be 51 02 00 00       	mov    $0x251,%esi
  8004212ba0:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004212ba7:	00 00 00 
  8004212baa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212baf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212bb6:	00 00 00 
  8004212bb9:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  8004212bbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212bc0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212bc4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212bc8:	48 01 d0             	add    %rdx,%rax
  8004212bcb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212bcf:	eb 41                	jmp    8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004212bd1:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004212bd8:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004212bd9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212bdd:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212be4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212be8:	48 89 ce             	mov    %rcx,%rsi
  8004212beb:	48 89 c7             	mov    %rax,%rdi
  8004212bee:	48 b8 28 1f 21 04 80 	movabs $0x8004211f28,%rax
  8004212bf5:	00 00 00 
  8004212bf8:	ff d0                	callq  *%rax
  8004212bfa:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212bfe:	eb 12                	jmp    8004212c12 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  8004212c00:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004212c07:	00 
		break;
  8004212c08:	eb 08                	jmp    8004212c12 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004212c0a:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  8004212c11:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  8004212c12:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212c16:	0f 85 21 01 00 00    	jne    8004212d3d <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  8004212c1c:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  8004212c23:	09 
  8004212c24:	74 1e                	je     8004212c44 <_dwarf_attr_init+0x593>
  8004212c26:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  8004212c2d:	0a 
  8004212c2e:	74 14                	je     8004212c44 <_dwarf_attr_init+0x593>
  8004212c30:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  8004212c37:	03 
  8004212c38:	74 0a                	je     8004212c44 <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  8004212c3a:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  8004212c41:	04 
  8004212c42:	75 10                	jne    8004212c54 <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  8004212c44:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212c48:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  8004212c4c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212c50:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  8004212c54:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004212c58:	48 83 f8 03          	cmp    $0x3,%rax
  8004212c5c:	75 39                	jne    8004212c97 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  8004212c5e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004212c62:	48 83 f8 08          	cmp    $0x8,%rax
  8004212c66:	74 1c                	je     8004212c84 <_dwarf_attr_init+0x5d3>
  8004212c68:	48 83 f8 0e          	cmp    $0xe,%rax
  8004212c6c:	74 02                	je     8004212c70 <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  8004212c6e:	eb 27                	jmp    8004212c97 <_dwarf_attr_init+0x5e6>
				ret_die->die_name = atref.u[1].s;
  8004212c70:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212c74:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212c7b:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212c82:	eb 13                	jmp    8004212c97 <_dwarf_attr_init+0x5e6>
				ret_die->die_name = atref.u[0].s;
  8004212c84:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212c88:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212c8f:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212c96:	90                   	nop
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004212c97:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212c9e:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212ca5:	8d 48 01             	lea    0x1(%rax),%ecx
  8004212ca8:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004212caf:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004212cb5:	0f b6 c0             	movzbl %al,%eax
  8004212cb8:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212cbf:	48 63 d0             	movslq %eax,%rdx
  8004212cc2:	48 89 d0             	mov    %rdx,%rax
  8004212cc5:	48 01 c0             	add    %rax,%rax
  8004212cc8:	48 01 d0             	add    %rdx,%rax
  8004212ccb:	48 c1 e0 05          	shl    $0x5,%rax
  8004212ccf:	48 01 c8             	add    %rcx,%rax
  8004212cd2:	48 05 70 03 00 00    	add    $0x370,%rax
  8004212cd8:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004212cdf:	48 89 10             	mov    %rdx,(%rax)
  8004212ce2:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004212ce9:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004212ced:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004212cf1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004212cf5:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004212cf9:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004212cfd:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212d01:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004212d05:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212d09:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004212d0d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212d11:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004212d15:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212d19:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004212d1d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212d21:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004212d25:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004212d29:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004212d2d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004212d31:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004212d35:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212d39:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004212d3d:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004212d40:	c9                   	leaveq 
  8004212d41:	c3                   	retq   

0000008004212d42 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004212d42:	55                   	push   %rbp
  8004212d43:	48 89 e5             	mov    %rsp,%rbp
  8004212d46:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  8004212d4d:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004212d54:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004212d5b:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004212d62:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004212d68:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004212d6f:	00 
  8004212d70:	75 35                	jne    8004212da7 <dwarf_search_die_within_cu+0x65>
  8004212d72:	48 b9 38 05 22 04 80 	movabs $0x8004220538,%rcx
  8004212d79:	00 00 00 
  8004212d7c:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004212d83:	00 00 00 
  8004212d86:	be 86 02 00 00       	mov    $0x286,%esi
  8004212d8b:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004212d92:	00 00 00 
  8004212d95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212d9a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212da1:	00 00 00 
  8004212da4:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004212da7:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004212dae:	00 
  8004212daf:	75 35                	jne    8004212de6 <dwarf_search_die_within_cu+0xa4>
  8004212db1:	48 b9 3c 05 22 04 80 	movabs $0x800422053c,%rcx
  8004212db8:	00 00 00 
  8004212dbb:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004212dc2:	00 00 00 
  8004212dc5:	be 88 02 00 00       	mov    $0x288,%esi
  8004212dca:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004212dd1:	00 00 00 
  8004212dd4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212dd9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212de0:	00 00 00 
  8004212de3:	41 ff d0             	callq  *%r8

	level = 1;
  8004212de6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212ded:	e9 17 02 00 00       	jmpq   8004213009 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004212df2:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212df9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004212dfd:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212e04:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212e08:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004212e0f:	48 89 d6             	mov    %rdx,%rsi
  8004212e12:	48 89 c7             	mov    %rax,%rdi
  8004212e15:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  8004212e1c:	00 00 00 
  8004212e1f:	ff d0                	callq  *%rax
  8004212e21:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004212e25:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212e2a:	75 22                	jne    8004212e4e <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004212e2c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212e30:	74 09                	je     8004212e3b <dwarf_search_die_within_cu+0xf9>
  8004212e32:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212e39:	75 0a                	jne    8004212e45 <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004212e3b:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212e40:	e9 f4 01 00 00       	jmpq   8004213039 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004212e45:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004212e49:	e9 bb 01 00 00       	jmpq   8004213009 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004212e4e:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212e55:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212e59:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212e60:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004212e64:	48 89 34 24          	mov    %rsi,(%rsp)
  8004212e68:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004212e6c:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004212e71:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004212e75:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004212e7a:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004212e7e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004212e83:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004212e87:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004212e8c:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004212e90:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004212e95:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004212e99:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212e9e:	48 89 ce             	mov    %rcx,%rsi
  8004212ea1:	48 89 c7             	mov    %rax,%rdi
  8004212ea4:	48 b8 80 25 21 04 80 	movabs $0x8004212580,%rax
  8004212eab:	00 00 00 
  8004212eae:	ff d0                	callq  *%rax
  8004212eb0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212eb3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212eb7:	74 08                	je     8004212ec1 <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004212eb9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212ebc:	e9 78 01 00 00       	jmpq   8004213039 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004212ec1:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212ec8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212ecc:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004212ecf:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212ed6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212eda:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212ede:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212ee5:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004212ee9:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212ef0:	b8 66 00 00 00       	mov    $0x66,%eax
  8004212ef5:	48 89 d6             	mov    %rdx,%rsi
  8004212ef8:	48 89 c1             	mov    %rax,%rcx
  8004212efb:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212efe:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212f05:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004212f0c:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004212f13:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212f1a:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212f1e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004212f25:	e9 8e 00 00 00       	jmpq   8004212fb8 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004212f2a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212f2d:	48 63 d0             	movslq %eax,%rdx
  8004212f30:	48 89 d0             	mov    %rdx,%rax
  8004212f33:	48 01 c0             	add    %rax,%rax
  8004212f36:	48 01 d0             	add    %rdx,%rax
  8004212f39:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f3d:	48 01 e8             	add    %rbp,%rax
  8004212f40:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004212f46:	48 8b 08             	mov    (%rax),%rcx
  8004212f49:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004212f50:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212f53:	48 63 d0             	movslq %eax,%rdx
  8004212f56:	48 89 d0             	mov    %rdx,%rax
  8004212f59:	48 01 c0             	add    %rax,%rax
  8004212f5c:	48 01 d0             	add    %rdx,%rax
  8004212f5f:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f63:	48 83 c0 30          	add    $0x30,%rax
  8004212f67:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004212f6b:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004212f72:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004212f79:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212f80:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004212f87:	49 89 c9             	mov    %rcx,%r9
  8004212f8a:	49 89 f8             	mov    %rdi,%r8
  8004212f8d:	48 89 d1             	mov    %rdx,%rcx
  8004212f90:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004212f94:	48 89 c7             	mov    %rax,%rdi
  8004212f97:	48 b8 b1 26 21 04 80 	movabs $0x80042126b1,%rax
  8004212f9e:	00 00 00 
  8004212fa1:	ff d0                	callq  *%rax
  8004212fa3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212fa6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212faa:	74 08                	je     8004212fb4 <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004212fac:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212faf:	e9 85 00 00 00       	jmpq   8004213039 <dwarf_search_die_within_cu+0x2f7>
		for(i=0; i < ab.ab_atnum; i++)
  8004212fb4:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004212fb8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212fbb:	48 63 d0             	movslq %eax,%rdx
  8004212fbe:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004212fc5:	48 39 c2             	cmp    %rax,%rdx
  8004212fc8:	0f 82 5c ff ff ff    	jb     8004212f2a <dwarf_search_die_within_cu+0x1e8>
		}

		ret_die->die_next_off = offset;
  8004212fce:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004212fd5:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212fdc:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004212fe0:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212fe7:	74 19                	je     8004213002 <dwarf_search_die_within_cu+0x2c0>
  8004212fe9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212fed:	7e 13                	jle    8004213002 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212fef:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212ff6:	3c 01                	cmp    $0x1,%al
  8004212ff8:	75 06                	jne    8004213000 <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004212ffa:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212ffe:	eb 09                	jmp    8004213009 <dwarf_search_die_within_cu+0x2c7>
  8004213000:	eb 07                	jmp    8004213009 <dwarf_search_die_within_cu+0x2c7>
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004213002:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213007:	eb 30                	jmp    8004213039 <dwarf_search_die_within_cu+0x2f7>
	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004213009:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  800421300d:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004213014:	48 39 c2             	cmp    %rax,%rdx
  8004213017:	76 1b                	jbe    8004213034 <dwarf_search_die_within_cu+0x2f2>
  8004213019:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004213020:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004213024:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800421302b:	48 39 c2             	cmp    %rax,%rdx
  800421302e:	0f 87 be fd ff ff    	ja     8004212df2 <dwarf_search_die_within_cu+0xb0>
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004213034:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004213039:	c9                   	leaveq 
  800421303a:	c3                   	retq   

000000800421303b <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  800421303b:	55                   	push   %rbp
  800421303c:	48 89 e5             	mov    %rsp,%rbp
  800421303f:	48 83 ec 60          	sub    $0x60,%rsp
  8004213043:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213047:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421304b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  800421304f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004213054:	75 35                	jne    800421308b <dwarf_offdie+0x50>
  8004213056:	48 b9 38 05 22 04 80 	movabs $0x8004220538,%rcx
  800421305d:	00 00 00 
  8004213060:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004213067:	00 00 00 
  800421306a:	be c4 02 00 00       	mov    $0x2c4,%esi
  800421306f:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004213076:	00 00 00 
  8004213079:	b8 00 00 00 00       	mov    $0x0,%eax
  800421307e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213085:	00 00 00 
  8004213088:	41 ff d0             	callq  *%r8
	assert(ret_die);
  800421308b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213090:	75 35                	jne    80042130c7 <dwarf_offdie+0x8c>
  8004213092:	48 b9 3c 05 22 04 80 	movabs $0x800422053c,%rcx
  8004213099:	00 00 00 
  800421309c:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  80042130a3:	00 00 00 
  80042130a6:	be c5 02 00 00       	mov    $0x2c5,%esi
  80042130ab:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  80042130b2:	00 00 00 
  80042130b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042130ba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042130c1:	00 00 00 
  80042130c4:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  80042130c7:	48 8b 45 30          	mov    0x30(%rbp),%rax
  80042130cb:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042130cf:	76 66                	jbe    8004213137 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  80042130d1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042130d5:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  80042130d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042130dd:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  80042130e1:	48 89 0c 24          	mov    %rcx,(%rsp)
  80042130e5:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  80042130e9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  80042130ee:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  80042130f2:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  80042130f7:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042130fb:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004213100:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004213104:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004213109:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  800421310d:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004213112:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004213116:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  800421311b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004213120:	48 89 c7             	mov    %rax,%rdi
  8004213123:	48 b8 42 2d 21 04 80 	movabs $0x8004212d42,%rax
  800421312a:	00 00 00 
  800421312d:	ff d0                	callq  *%rax
  800421312f:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004213132:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213135:	eb 05                	jmp    800421313c <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004213137:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421313c:	c9                   	leaveq 
  800421313d:	c3                   	retq   

000000800421313e <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  800421313e:	55                   	push   %rbp
  800421313f:	48 89 e5             	mov    %rsp,%rbp
  8004213142:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004213146:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421314a:	89 f0                	mov    %esi,%eax
  800421314c:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004213150:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004213157:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004213158:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421315f:	eb 57                	jmp    80042131b8 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004213161:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004213165:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004213168:	48 63 d0             	movslq %eax,%rdx
  800421316b:	48 89 d0             	mov    %rdx,%rax
  800421316e:	48 01 c0             	add    %rax,%rax
  8004213171:	48 01 d0             	add    %rdx,%rax
  8004213174:	48 c1 e0 05          	shl    $0x5,%rax
  8004213178:	48 01 c8             	add    %rcx,%rax
  800421317b:	48 05 80 03 00 00    	add    $0x380,%rax
  8004213181:	48 8b 10             	mov    (%rax),%rdx
  8004213184:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004213188:	48 39 c2             	cmp    %rax,%rdx
  800421318b:	75 27                	jne    80042131b4 <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  800421318d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004213190:	48 63 d0             	movslq %eax,%rdx
  8004213193:	48 89 d0             	mov    %rdx,%rax
  8004213196:	48 01 c0             	add    %rax,%rax
  8004213199:	48 01 d0             	add    %rdx,%rax
  800421319c:	48 c1 e0 05          	shl    $0x5,%rax
  80042131a0:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  80042131a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042131ab:	48 01 d0             	add    %rdx,%rax
  80042131ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  80042131b2:	eb 17                	jmp    80042131cb <_dwarf_attr_find+0x8d>
	for(i=0; i < die->die_attr_count; i++)
  80042131b4:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042131b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042131bc:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  80042131c3:	0f b6 c0             	movzbl %al,%eax
  80042131c6:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  80042131c9:	7f 96                	jg     8004213161 <_dwarf_attr_find+0x23>
		}
	}

	return myat;
  80042131cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042131cf:	c9                   	leaveq 
  80042131d0:	c3                   	retq   

00000080042131d1 <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  80042131d1:	55                   	push   %rbp
  80042131d2:	48 89 e5             	mov    %rsp,%rbp
  80042131d5:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  80042131d9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042131dd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042131e1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042131e5:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  80042131e9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042131ee:	75 35                	jne    8004213225 <dwarf_siblingof+0x54>
  80042131f0:	48 b9 38 05 22 04 80 	movabs $0x8004220538,%rcx
  80042131f7:	00 00 00 
  80042131fa:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004213201:	00 00 00 
  8004213204:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004213209:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004213210:	00 00 00 
  8004213213:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213218:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421321f:	00 00 00 
  8004213222:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004213225:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421322a:	75 35                	jne    8004213261 <dwarf_siblingof+0x90>
  800421322c:	48 b9 3c 05 22 04 80 	movabs $0x800422053c,%rcx
  8004213233:	00 00 00 
  8004213236:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  800421323d:	00 00 00 
  8004213240:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004213245:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  800421324c:	00 00 00 
  800421324f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213254:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421325b:	00 00 00 
  800421325e:	41 ff d0             	callq  *%r8
	assert(cu);
  8004213261:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004213266:	75 35                	jne    800421329d <dwarf_siblingof+0xcc>
  8004213268:	48 b9 44 05 22 04 80 	movabs $0x8004220544,%rcx
  800421326f:	00 00 00 
  8004213272:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004213279:	00 00 00 
  800421327c:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004213281:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004213288:	00 00 00 
  800421328b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213290:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213297:	00 00 00 
  800421329a:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  800421329d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042132a2:	75 65                	jne    8004213309 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  80042132a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042132a8:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042132ac:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042132b0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042132b4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042132b8:	48 8b 38             	mov    (%rax),%rdi
  80042132bb:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042132bf:	48 8b 78 08          	mov    0x8(%rax),%rdi
  80042132c3:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  80042132c8:	48 8b 78 10          	mov    0x10(%rax),%rdi
  80042132cc:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042132d1:	48 8b 78 18          	mov    0x18(%rax),%rdi
  80042132d5:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042132da:	48 8b 78 20          	mov    0x20(%rax),%rdi
  80042132de:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  80042132e3:	48 8b 78 28          	mov    0x28(%rax),%rdi
  80042132e7:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  80042132ec:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042132f0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042132f5:	48 89 cf             	mov    %rcx,%rdi
  80042132f8:	48 b8 3b 30 21 04 80 	movabs $0x800421303b,%rax
  80042132ff:	00 00 00 
  8004213302:	ff d0                	callq  *%rax
  8004213304:	e9 0a 01 00 00       	jmpq   8004213413 <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004213309:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004213310:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213314:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004213318:	84 c0                	test   %al,%al
  800421331a:	75 0e                	jne    800421332a <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  800421331c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213320:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213324:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213328:	eb 6b                	jmp    8004213395 <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  800421332a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421332e:	be 01 00 00 00       	mov    $0x1,%esi
  8004213333:	48 89 c7             	mov    %rax,%rdi
  8004213336:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  800421333d:	00 00 00 
  8004213340:	ff d0                	callq  *%rax
  8004213342:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004213346:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421334b:	74 35                	je     8004213382 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  800421334d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213351:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213355:	48 83 f8 10          	cmp    $0x10,%rax
  8004213359:	74 19                	je     8004213374 <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  800421335b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421335f:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004213363:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213367:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421336b:	48 01 d0             	add    %rdx,%rax
  800421336e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213372:	eb 21                	jmp    8004213395 <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  8004213374:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213378:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421337c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213380:	eb 13                	jmp    8004213395 <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004213382:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213386:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421338a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  800421338e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004213395:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004213398:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421339c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  80042133a0:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  80042133a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042133a8:	4c 8b 00             	mov    (%rax),%r8
  80042133ab:	4c 89 04 24          	mov    %r8,(%rsp)
  80042133af:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042133b3:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042133b8:	4c 8b 40 10          	mov    0x10(%rax),%r8
  80042133bc:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  80042133c1:	4c 8b 40 18          	mov    0x18(%rax),%r8
  80042133c5:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  80042133ca:	4c 8b 40 20          	mov    0x20(%rax),%r8
  80042133ce:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  80042133d3:	4c 8b 40 28          	mov    0x28(%rax),%r8
  80042133d7:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  80042133dc:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042133e0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042133e5:	48 b8 42 2d 21 04 80 	movabs $0x8004212d42,%rax
  80042133ec:	00 00 00 
  80042133ef:	ff d0                	callq  *%rax
  80042133f1:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  80042133f4:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  80042133f8:	75 07                	jne    8004213401 <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  80042133fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042133ff:	eb 12                	jmp    8004213413 <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004213401:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213405:	74 07                	je     800421340e <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004213407:	b8 01 00 00 00       	mov    $0x1,%eax
  800421340c:	eb 05                	jmp    8004213413 <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  800421340e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213413:	c9                   	leaveq 
  8004213414:	c3                   	retq   

0000008004213415 <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004213415:	55                   	push   %rbp
  8004213416:	48 89 e5             	mov    %rsp,%rbp
  8004213419:	48 83 ec 70          	sub    $0x70,%rsp
  800421341d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213421:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213425:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213429:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  800421342d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213432:	75 35                	jne    8004213469 <dwarf_child+0x54>
  8004213434:	48 b9 47 05 22 04 80 	movabs $0x8004220547,%rcx
  800421343b:	00 00 00 
  800421343e:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004213445:	00 00 00 
  8004213448:	be 1c 03 00 00       	mov    $0x31c,%esi
  800421344d:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004213454:	00 00 00 
  8004213457:	b8 00 00 00 00       	mov    $0x0,%eax
  800421345c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213463:	00 00 00 
  8004213466:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004213469:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421346e:	75 35                	jne    80042134a5 <dwarf_child+0x90>
  8004213470:	48 b9 3c 05 22 04 80 	movabs $0x800422053c,%rcx
  8004213477:	00 00 00 
  800421347a:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  8004213481:	00 00 00 
  8004213484:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004213489:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004213490:	00 00 00 
  8004213493:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213498:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421349f:	00 00 00 
  80042134a2:	41 ff d0             	callq  *%r8
	assert(dbg);
  80042134a5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042134aa:	75 35                	jne    80042134e1 <dwarf_child+0xcc>
  80042134ac:	48 b9 38 05 22 04 80 	movabs $0x8004220538,%rcx
  80042134b3:	00 00 00 
  80042134b6:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  80042134bd:	00 00 00 
  80042134c0:	be 1e 03 00 00       	mov    $0x31e,%esi
  80042134c5:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  80042134cc:	00 00 00 
  80042134cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042134d4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042134db:	00 00 00 
  80042134de:	41 ff d0             	callq  *%r8
	assert(cu);
  80042134e1:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042134e6:	75 35                	jne    800421351d <dwarf_child+0x108>
  80042134e8:	48 b9 44 05 22 04 80 	movabs $0x8004220544,%rcx
  80042134ef:	00 00 00 
  80042134f2:	48 ba aa 03 22 04 80 	movabs $0x80042203aa,%rdx
  80042134f9:	00 00 00 
  80042134fc:	be 1f 03 00 00       	mov    $0x31f,%esi
  8004213501:	48 bf bf 03 22 04 80 	movabs $0x80042203bf,%rdi
  8004213508:	00 00 00 
  800421350b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213510:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213517:	00 00 00 
  800421351a:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  800421351d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213521:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004213525:	84 c0                	test   %al,%al
  8004213527:	75 0a                	jne    8004213533 <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004213529:	b8 04 00 00 00       	mov    $0x4,%eax
  800421352e:	e9 84 00 00 00       	jmpq   80042135b7 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  8004213533:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213537:	48 8b 70 08          	mov    0x8(%rax),%rsi
  800421353b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421353f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  8004213543:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213547:	48 8b 08             	mov    (%rax),%rcx
  800421354a:	48 89 0c 24          	mov    %rcx,(%rsp)
  800421354e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004213552:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004213557:	48 8b 48 10          	mov    0x10(%rax),%rcx
  800421355b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004213560:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004213564:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004213569:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421356d:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004213572:	48 8b 48 28          	mov    0x28(%rax),%rcx
  8004213576:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  800421357b:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421357f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004213584:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004213589:	48 b8 42 2d 21 04 80 	movabs $0x8004212d42,%rax
  8004213590:	00 00 00 
  8004213593:	ff d0                	callq  *%rax
  8004213595:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004213598:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  800421359c:	75 07                	jne    80042135a5 <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  800421359e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042135a3:	eb 12                	jmp    80042135b7 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  80042135a5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042135a9:	74 07                	je     80042135b2 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  80042135ab:	b8 01 00 00 00       	mov    $0x1,%eax
  80042135b0:	eb 05                	jmp    80042135b7 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  80042135b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042135b7:	c9                   	leaveq 
  80042135b8:	c3                   	retq   

00000080042135b9 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  80042135b9:	55                   	push   %rbp
  80042135ba:	48 89 e5             	mov    %rsp,%rbp
  80042135bd:	48 83 ec 20          	sub    $0x20,%rsp
  80042135c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  80042135c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042135c9:	48 8b 00             	mov    (%rax),%rax
  80042135cc:	48 89 c7             	mov    %rax,%rdi
  80042135cf:	48 b8 e0 68 21 04 80 	movabs $0x80042168e0,%rax
  80042135d6:	00 00 00 
  80042135d9:	ff d0                	callq  *%rax
  80042135db:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  80042135df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042135e3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042135e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042135eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  80042135ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042135f3:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042135f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042135fb:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  80042135ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213603:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004213607:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421360b:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  800421360f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213614:	c9                   	leaveq 
  8004213615:	c3                   	retq   

0000008004213616 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  8004213616:	55                   	push   %rbp
  8004213617:	48 89 e5             	mov    %rsp,%rbp
  800421361a:	48 83 ec 08          	sub    $0x8,%rsp
  800421361e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004213622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213626:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  800421362c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213630:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  8004213636:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421363a:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  8004213640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213644:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  800421364a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421364e:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  8004213654:	c9                   	leaveq 
  8004213655:	c3                   	retq   

0000008004213656 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  8004213656:	55                   	push   %rbp
  8004213657:	48 89 e5             	mov    %rsp,%rbp
  800421365a:	48 83 ec 40          	sub    $0x40,%rsp
  800421365e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213662:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213666:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421366a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  800421366e:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004213672:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213676:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  800421367a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421367e:	ba 80 00 00 00       	mov    $0x80,%edx
  8004213683:	be 00 00 00 00       	mov    $0x0,%esi
  8004213688:	48 89 c7             	mov    %rax,%rdi
  800421368b:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004213692:	00 00 00 
  8004213695:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004213697:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421369b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421369f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  80042136a3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042136a8:	75 07                	jne    80042136b1 <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  80042136aa:	b8 01 00 00 00       	mov    $0x1,%eax
  80042136af:	eb 75                	jmp    8004213726 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  80042136b1:	eb 59                	jmp    800421370c <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  80042136b3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  80042136b7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042136bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042136bf:	be 01 00 00 00       	mov    $0x1,%esi
  80042136c4:	48 89 c7             	mov    %rax,%rdi
  80042136c7:	48 b8 6b 58 21 04 80 	movabs $0x800421586b,%rax
  80042136ce:	00 00 00 
  80042136d1:	ff d0                	callq  *%rax
  80042136d3:	85 c0                	test   %eax,%eax
  80042136d5:	79 07                	jns    80042136de <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  80042136d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042136dc:	eb 48                	jmp    8004213726 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  80042136de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042136e2:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042136e6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042136ea:	77 20                	ja     800421370c <dwarf_get_fde_at_pc+0xb6>
  80042136ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042136f0:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  80042136f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042136f8:	48 8b 40 38          	mov    0x38(%rax),%rax
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  80042136fc:	48 01 d0             	add    %rdx,%rax
  80042136ff:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213703:	76 07                	jbe    800421370c <dwarf_get_fde_at_pc+0xb6>
			return (DW_DLV_OK);
  8004213705:	b8 00 00 00 00       	mov    $0x0,%eax
  800421370a:	eb 1a                	jmp    8004213726 <dwarf_get_fde_at_pc+0xd0>
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  800421370c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213710:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004213714:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213718:	48 8b 40 40          	mov    0x40(%rax),%rax
  800421371c:	48 39 c2             	cmp    %rax,%rdx
  800421371f:	72 92                	jb     80042136b3 <dwarf_get_fde_at_pc+0x5d>
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  8004213721:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  8004213726:	c9                   	leaveq 
  8004213727:	c3                   	retq   

0000008004213728 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  8004213728:	55                   	push   %rbp
  8004213729:	48 89 e5             	mov    %rsp,%rbp
  800421372c:	53                   	push   %rbx
  800421372d:	48 83 ec 38          	sub    $0x38,%rsp
  8004213731:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004213735:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004213739:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421373d:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  8004213741:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004213746:	75 35                	jne    800421377d <_dwarf_frame_regtable_copy+0x55>
  8004213748:	48 b9 5a 05 22 04 80 	movabs $0x800422055a,%rcx
  800421374f:	00 00 00 
  8004213752:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  8004213759:	00 00 00 
  800421375c:	be 57 00 00 00       	mov    $0x57,%esi
  8004213761:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  8004213768:	00 00 00 
  800421376b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213770:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213777:	00 00 00 
  800421377a:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  800421377d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004213782:	75 35                	jne    80042137b9 <_dwarf_frame_regtable_copy+0x91>
  8004213784:	48 b9 92 05 22 04 80 	movabs $0x8004220592,%rcx
  800421378b:	00 00 00 
  800421378e:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  8004213795:	00 00 00 
  8004213798:	be 58 00 00 00       	mov    $0x58,%esi
  800421379d:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  80042137a4:	00 00 00 
  80042137a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042137ac:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042137b3:	00 00 00 
  80042137b6:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  80042137b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137bd:	48 8b 00             	mov    (%rax),%rax
  80042137c0:	48 85 c0             	test   %rax,%rax
  80042137c3:	75 39                	jne    80042137fe <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  80042137c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137c9:	48 bb e0 d6 4d 04 80 	movabs $0x80044dd6e0,%rbx
  80042137d0:	00 00 00 
  80042137d3:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  80042137d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137da:	48 8b 00             	mov    (%rax),%rax
  80042137dd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042137e1:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  80042137e5:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  80042137e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042137ed:	48 8b 00             	mov    (%rax),%rax
  80042137f0:	48 bb 00 b8 6d 04 80 	movabs $0x80046db800,%rbx
  80042137f7:	00 00 00 
  80042137fa:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  80042137fe:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004213802:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213806:	48 8b 00             	mov    (%rax),%rax
  8004213809:	ba 18 00 00 00       	mov    $0x18,%edx
  800421380e:	48 89 ce             	mov    %rcx,%rsi
  8004213811:	48 89 c7             	mov    %rax,%rdi
  8004213814:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  800421381b:	00 00 00 
  800421381e:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213820:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004213827:	eb 5a                	jmp    8004213883 <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  8004213829:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421382d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213831:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213834:	48 63 d0             	movslq %eax,%rdx
  8004213837:	48 89 d0             	mov    %rdx,%rax
  800421383a:	48 01 c0             	add    %rax,%rax
  800421383d:	48 01 d0             	add    %rdx,%rax
  8004213840:	48 c1 e0 03          	shl    $0x3,%rax
  8004213844:	48 01 c1             	add    %rax,%rcx
  8004213847:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421384b:	48 8b 00             	mov    (%rax),%rax
  800421384e:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213852:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213855:	48 63 d0             	movslq %eax,%rdx
  8004213858:	48 89 d0             	mov    %rdx,%rax
  800421385b:	48 01 c0             	add    %rax,%rax
  800421385e:	48 01 d0             	add    %rdx,%rax
  8004213861:	48 c1 e0 03          	shl    $0x3,%rax
  8004213865:	48 01 f0             	add    %rsi,%rax
  8004213868:	ba 18 00 00 00       	mov    $0x18,%edx
  800421386d:	48 89 ce             	mov    %rcx,%rsi
  8004213870:	48 89 c7             	mov    %rax,%rdi
  8004213873:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  800421387a:	00 00 00 
  800421387d:	ff d0                	callq  *%rax
		     i < src->rt3_reg_table_size; i++)
  800421387f:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213883:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213887:	48 8b 00             	mov    (%rax),%rax
  800421388a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421388e:	0f b7 c0             	movzwl %ax,%eax
  8004213891:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213894:	7e 10                	jle    80042138a6 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  8004213896:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421389a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421389e:	0f b7 c0             	movzwl %ax,%eax
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042138a1:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042138a4:	7f 83                	jg     8004213829 <_dwarf_frame_regtable_copy+0x101>
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  80042138a6:	eb 32                	jmp    80042138da <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  80042138a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042138ac:	48 8b 00             	mov    (%rax),%rax
  80042138af:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138b3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042138b6:	48 63 d0             	movslq %eax,%rdx
  80042138b9:	48 89 d0             	mov    %rdx,%rax
  80042138bc:	48 01 c0             	add    %rax,%rax
  80042138bf:	48 01 d0             	add    %rdx,%rax
  80042138c2:	48 c1 e0 03          	shl    $0x3,%rax
  80042138c6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  80042138ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042138ce:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		(*dest)->rt3_rules[i].dw_regnum =
  80042138d2:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (; i < (*dest)->rt3_reg_table_size; i++)
  80042138d6:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042138da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042138de:	48 8b 00             	mov    (%rax),%rax
  80042138e1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042138e5:	0f b7 c0             	movzwl %ax,%eax
  80042138e8:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042138eb:	7f bb                	jg     80042138a8 <_dwarf_frame_regtable_copy+0x180>

	return (DW_DLE_NONE);
  80042138ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042138f2:	48 83 c4 38          	add    $0x38,%rsp
  80042138f6:	5b                   	pop    %rbx
  80042138f7:	5d                   	pop    %rbp
  80042138f8:	c3                   	retq   

00000080042138f9 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  80042138f9:	55                   	push   %rbp
  80042138fa:	48 89 e5             	mov    %rsp,%rbp
  80042138fd:	53                   	push   %rbx
  80042138fe:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  8004213905:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004213909:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  800421390d:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  8004213911:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  8004213915:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  800421391c:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  8004213923:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  800421392a:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004213931:	00 
  8004213932:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004213936:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  800421393a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421393e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213942:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  8004213945:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213949:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800421394d:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  8004213951:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213955:	48 89 c7             	mov    %rax,%rdi
  8004213958:	48 b8 28 37 21 04 80 	movabs $0x8004213728,%rax
  800421395f:	00 00 00 
  8004213962:	ff d0                	callq  *%rax
	p = insts;
  8004213964:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004213968:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  800421396c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213970:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004213974:	48 01 d0             	add    %rdx,%rax
  8004213977:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  800421397b:	e9 3a 0d 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  8004213980:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213984:	0f b6 00             	movzbl (%rax),%eax
  8004213987:	84 c0                	test   %al,%al
  8004213989:	75 11                	jne    800421399c <_dwarf_frame_run_inst+0xa3>
			p++;
  800421398b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421398f:	48 83 c0 01          	add    $0x1,%rax
  8004213993:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  8004213997:	e9 1e 0d 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  800421399c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042139a0:	0f b6 00             	movzbl (%rax),%eax
  80042139a3:	83 e0 c0             	and    $0xffffffc0,%eax
  80042139a6:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  80042139a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042139ad:	0f b6 00             	movzbl (%rax),%eax
  80042139b0:	83 e0 3f             	and    $0x3f,%eax
  80042139b3:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  80042139b6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042139ba:	48 83 c0 01          	add    $0x1,%rax
  80042139be:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  80042139c2:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  80042139c6:	0f 84 a1 01 00 00    	je     8004213b6d <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  80042139cc:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042139d0:	3d 80 00 00 00       	cmp    $0x80,%eax
  80042139d5:	74 38                	je     8004213a0f <_dwarf_frame_run_inst+0x116>
  80042139d7:	3d c0 00 00 00       	cmp    $0xc0,%eax
  80042139dc:	0f 84 01 01 00 00    	je     8004213ae3 <_dwarf_frame_run_inst+0x1ea>
  80042139e2:	83 f8 40             	cmp    $0x40,%eax
  80042139e5:	0f 85 71 01 00 00    	jne    8004213b5c <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  80042139eb:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  80042139ef:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042139f6:	ff 
  80042139f7:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  80042139fb:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042139ff:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213a03:	73 05                	jae    8004213a0a <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  8004213a05:	e9 be 0c 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004213a0a:	e9 59 01 00 00       	jmpq   8004213b68 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004213a0f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213a13:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213a17:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213a1a:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213a1e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a22:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213a26:	66 39 c2             	cmp    %ax,%dx
  8004213a29:	72 0c                	jb     8004213a37 <_dwarf_frame_run_inst+0x13e>
  8004213a2b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213a32:	e9 91 0c 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  8004213a37:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a3b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a3f:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213a43:	48 89 d0             	mov    %rdx,%rax
  8004213a46:	48 01 c0             	add    %rax,%rax
  8004213a49:	48 01 d0             	add    %rdx,%rax
  8004213a4c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a50:	48 01 c8             	add    %rcx,%rax
  8004213a53:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  8004213a56:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a5a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a5e:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213a62:	48 89 d0             	mov    %rdx,%rax
  8004213a65:	48 01 c0             	add    %rax,%rax
  8004213a68:	48 01 d0             	add    %rdx,%rax
  8004213a6b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a6f:	48 01 c8             	add    %rcx,%rax
  8004213a72:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213a76:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a7a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a7e:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213a82:	48 89 d0             	mov    %rdx,%rax
  8004213a85:	48 01 c0             	add    %rax,%rax
  8004213a88:	48 01 d0             	add    %rdx,%rax
  8004213a8b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a8f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213a93:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213a97:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213a9b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004213a9f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213aa3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213aa7:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213aab:	48 89 d0             	mov    %rdx,%rax
  8004213aae:	48 01 c0             	add    %rax,%rax
  8004213ab1:	48 01 d0             	add    %rdx,%rax
  8004213ab4:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ab8:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  8004213abc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ac0:	48 89 c7             	mov    %rax,%rdi
  8004213ac3:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213aca:	00 00 00 
  8004213acd:	ff d0                	callq  *%rax
  8004213acf:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213ad6:	48 0f af c2          	imul   %rdx,%rax
			        RL[low6].dw_offset_or_block_len =
  8004213ada:	48 89 43 08          	mov    %rax,0x8(%rbx)
			        break;
  8004213ade:	e9 85 00 00 00       	jmpq   8004213b68 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  8004213ae3:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ae7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213aeb:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213aee:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213af2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213af6:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213afa:	66 39 c2             	cmp    %ax,%dx
  8004213afd:	72 0c                	jb     8004213b0b <_dwarf_frame_run_inst+0x212>
  8004213aff:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213b06:	e9 bd 0b 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004213b0b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213b0f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b13:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213b17:	48 89 d0             	mov    %rdx,%rax
  8004213b1a:	48 01 c0             	add    %rax,%rax
  8004213b1d:	48 01 d0             	add    %rdx,%rax
  8004213b20:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b24:	48 01 c1             	add    %rax,%rcx
  8004213b27:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b2b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213b2f:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213b33:	48 89 d0             	mov    %rdx,%rax
  8004213b36:	48 01 c0             	add    %rax,%rax
  8004213b39:	48 01 d0             	add    %rdx,%rax
  8004213b3c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b40:	48 01 f0             	add    %rsi,%rax
  8004213b43:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213b48:	48 89 ce             	mov    %rcx,%rsi
  8004213b4b:	48 89 c7             	mov    %rax,%rdi
  8004213b4e:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  8004213b55:	00 00 00 
  8004213b58:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  8004213b5a:	eb 0c                	jmp    8004213b68 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004213b5c:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  8004213b63:	e9 60 0b 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  8004213b68:	e9 4d 0b 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  8004213b6d:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213b71:	83 f8 16             	cmp    $0x16,%eax
  8004213b74:	0f 87 37 0b 00 00    	ja     80042146b1 <_dwarf_frame_run_inst+0xdb8>
  8004213b7a:	89 c0                	mov    %eax,%eax
  8004213b7c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213b83:	00 
  8004213b84:	48 b8 a0 05 22 04 80 	movabs $0x80042205a0,%rax
  8004213b8b:	00 00 00 
  8004213b8e:	48 01 d0             	add    %rdx,%rax
  8004213b91:	48 8b 00             	mov    (%rax),%rax
  8004213b94:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  8004213b96:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213b9a:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213b9e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004213ba2:	8b 4a 28             	mov    0x28(%rdx),%ecx
  8004213ba5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213ba9:	89 ce                	mov    %ecx,%esi
  8004213bab:	48 89 d7             	mov    %rdx,%rdi
  8004213bae:	ff d0                	callq  *%rax
  8004213bb0:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213bb4:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213bb8:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213bbc:	73 05                	jae    8004213bc3 <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004213bbe:	e9 05 0b 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213bc3:	e9 f2 0a 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  8004213bc8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213bcc:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213bd0:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213bd4:	be 01 00 00 00       	mov    $0x1,%esi
  8004213bd9:	48 89 d7             	mov    %rdx,%rdi
  8004213bdc:	ff d0                	callq  *%rax
  8004213bde:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213be5:	ff 
  8004213be6:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213bea:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213bee:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213bf2:	73 05                	jae    8004213bf9 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  8004213bf4:	e9 cf 0a 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213bf9:	e9 bc 0a 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004213bfe:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c02:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213c06:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213c0a:	be 02 00 00 00       	mov    $0x2,%esi
  8004213c0f:	48 89 d7             	mov    %rdx,%rdi
  8004213c12:	ff d0                	callq  *%rax
  8004213c14:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213c1b:	ff 
  8004213c1c:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213c20:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213c24:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213c28:	73 05                	jae    8004213c2f <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  8004213c2a:	e9 99 0a 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213c2f:	e9 86 0a 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  8004213c34:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c38:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213c3c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213c40:	be 04 00 00 00       	mov    $0x4,%esi
  8004213c45:	48 89 d7             	mov    %rdx,%rdi
  8004213c48:	ff d0                	callq  *%rax
  8004213c4a:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213c51:	ff 
  8004213c52:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213c56:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213c5a:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213c5e:	73 05                	jae    8004213c65 <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  8004213c60:	e9 63 0a 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213c65:	e9 50 0a 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004213c6a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c6e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c72:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213c75:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c79:	48 89 c7             	mov    %rax,%rdi
  8004213c7c:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213c83:	00 00 00 
  8004213c86:	ff d0                	callq  *%rax
  8004213c88:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213c8c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c90:	48 89 c7             	mov    %rax,%rdi
  8004213c93:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213c9a:	00 00 00 
  8004213c9d:	ff d0                	callq  *%rax
  8004213c9f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213ca3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ca7:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213cab:	0f b7 c0             	movzwl %ax,%eax
  8004213cae:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213cb2:	77 0c                	ja     8004213cc0 <_dwarf_frame_run_inst+0x3c7>
  8004213cb4:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213cbb:	e9 08 0a 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213cc0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cc4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213cc8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ccc:	48 89 d0             	mov    %rdx,%rax
  8004213ccf:	48 01 c0             	add    %rax,%rax
  8004213cd2:	48 01 d0             	add    %rdx,%rax
  8004213cd5:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cd9:	48 01 c8             	add    %rcx,%rax
  8004213cdc:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213cdf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ce3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ce7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ceb:	48 89 d0             	mov    %rdx,%rax
  8004213cee:	48 01 c0             	add    %rax,%rax
  8004213cf1:	48 01 d0             	add    %rdx,%rax
  8004213cf4:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cf8:	48 01 c8             	add    %rcx,%rax
  8004213cfb:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213cff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d03:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d07:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d0b:	48 89 d0             	mov    %rdx,%rax
  8004213d0e:	48 01 c0             	add    %rax,%rax
  8004213d11:	48 01 d0             	add    %rdx,%rax
  8004213d14:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d18:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213d1c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213d20:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213d24:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213d28:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d2c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d30:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d34:	48 89 d0             	mov    %rdx,%rax
  8004213d37:	48 01 c0             	add    %rax,%rax
  8004213d3a:	48 01 d0             	add    %rdx,%rax
  8004213d3d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d41:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213d45:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213d4c:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213d51:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213d55:	e9 60 09 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004213d5a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d5e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d62:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213d65:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d69:	48 89 c7             	mov    %rax,%rdi
  8004213d6c:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213d73:	00 00 00 
  8004213d76:	ff d0                	callq  *%rax
  8004213d78:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213d7c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d80:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213d84:	0f b7 c0             	movzwl %ax,%eax
  8004213d87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213d8b:	77 0c                	ja     8004213d99 <_dwarf_frame_run_inst+0x4a0>
  8004213d8d:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213d94:	e9 2f 09 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004213d99:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213d9d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213da1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213da5:	48 89 d0             	mov    %rdx,%rax
  8004213da8:	48 01 c0             	add    %rax,%rax
  8004213dab:	48 01 d0             	add    %rdx,%rax
  8004213dae:	48 c1 e0 03          	shl    $0x3,%rax
  8004213db2:	48 01 c1             	add    %rax,%rcx
  8004213db5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213db9:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213dbd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dc1:	48 89 d0             	mov    %rdx,%rax
  8004213dc4:	48 01 c0             	add    %rax,%rax
  8004213dc7:	48 01 d0             	add    %rdx,%rax
  8004213dca:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dce:	48 01 f0             	add    %rsi,%rax
  8004213dd1:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213dd6:	48 89 ce             	mov    %rcx,%rsi
  8004213dd9:	48 89 c7             	mov    %rax,%rdi
  8004213ddc:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  8004213de3:	00 00 00 
  8004213de6:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004213de8:	e9 cd 08 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004213ded:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213df1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213df5:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213df8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213dfc:	48 89 c7             	mov    %rax,%rdi
  8004213dff:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213e06:	00 00 00 
  8004213e09:	ff d0                	callq  *%rax
  8004213e0b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213e0f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e13:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213e17:	0f b7 c0             	movzwl %ax,%eax
  8004213e1a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213e1e:	77 0c                	ja     8004213e2c <_dwarf_frame_run_inst+0x533>
  8004213e20:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213e27:	e9 9c 08 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213e2c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e30:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e34:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e38:	48 89 d0             	mov    %rdx,%rax
  8004213e3b:	48 01 c0             	add    %rax,%rax
  8004213e3e:	48 01 d0             	add    %rdx,%rax
  8004213e41:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e45:	48 01 c8             	add    %rcx,%rax
  8004213e48:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004213e4b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e4f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e53:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e57:	48 89 d0             	mov    %rdx,%rax
  8004213e5a:	48 01 c0             	add    %rax,%rax
  8004213e5d:	48 01 d0             	add    %rdx,%rax
  8004213e60:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e64:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213e68:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213e6c:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004213e70:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213e74:	e9 41 08 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004213e79:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e7d:	48 89 c7             	mov    %rax,%rdi
  8004213e80:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213e87:	00 00 00 
  8004213e8a:	ff d0                	callq  *%rax
  8004213e8c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213e90:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e94:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213e98:	0f b7 c0             	movzwl %ax,%eax
  8004213e9b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213e9f:	77 0c                	ja     8004213ead <_dwarf_frame_run_inst+0x5b4>
  8004213ea1:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213ea8:	e9 1b 08 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213ead:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213eb1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213eb5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213eb9:	48 89 d0             	mov    %rdx,%rax
  8004213ebc:	48 01 c0             	add    %rax,%rax
  8004213ebf:	48 01 d0             	add    %rdx,%rax
  8004213ec2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ec6:	48 01 c8             	add    %rcx,%rax
  8004213ec9:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004213ecc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ed0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ed4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ed8:	48 89 d0             	mov    %rdx,%rax
  8004213edb:	48 01 c0             	add    %rax,%rax
  8004213ede:	48 01 d0             	add    %rdx,%rax
  8004213ee1:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ee5:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213ee9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213eed:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004213ef1:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213ef5:	e9 c0 07 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004213efa:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213efe:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213f02:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213f05:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f09:	48 89 c7             	mov    %rax,%rdi
  8004213f0c:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213f13:	00 00 00 
  8004213f16:	ff d0                	callq  *%rax
  8004213f18:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004213f1c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f20:	48 89 c7             	mov    %rax,%rdi
  8004213f23:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004213f2a:	00 00 00 
  8004213f2d:	ff d0                	callq  *%rax
  8004213f2f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213f33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f37:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213f3b:	0f b7 c0             	movzwl %ax,%eax
  8004213f3e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213f42:	77 0c                	ja     8004213f50 <_dwarf_frame_run_inst+0x657>
  8004213f44:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213f4b:	e9 78 07 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213f50:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f54:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f58:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f5c:	48 89 d0             	mov    %rdx,%rax
  8004213f5f:	48 01 c0             	add    %rax,%rax
  8004213f62:	48 01 d0             	add    %rdx,%rax
  8004213f65:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f69:	48 01 c8             	add    %rcx,%rax
  8004213f6c:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004213f6f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f73:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f7b:	48 89 d0             	mov    %rdx,%rax
  8004213f7e:	48 01 c0             	add    %rax,%rax
  8004213f81:	48 01 d0             	add    %rdx,%rax
  8004213f84:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f88:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f8c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213f90:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213f94:	e9 21 07 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004213f99:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213f9d:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213fa1:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004213fa5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213fa9:	48 89 c7             	mov    %rax,%rdi
  8004213fac:	48 b8 28 37 21 04 80 	movabs $0x8004213728,%rax
  8004213fb3:	00 00 00 
  8004213fb6:	ff d0                	callq  *%rax
			break;
  8004213fb8:	e9 fd 06 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004213fbd:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213fc1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213fc5:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004213fc8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004213fcc:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213fd0:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004213fd4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213fd8:	48 89 c7             	mov    %rax,%rdi
  8004213fdb:	48 b8 28 37 21 04 80 	movabs $0x8004213728,%rax
  8004213fe2:	00 00 00 
  8004213fe5:	ff d0                	callq  *%rax
			break;
  8004213fe7:	e9 ce 06 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004213fec:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ff0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213ff4:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213ff7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ffb:	48 89 c7             	mov    %rax,%rdi
  8004213ffe:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004214005:	00 00 00 
  8004214008:	ff d0                	callq  *%rax
  800421400a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800421400e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214012:	48 89 c7             	mov    %rax,%rdi
  8004214015:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  800421401c:	00 00 00 
  800421401f:	ff d0                	callq  *%rax
  8004214021:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004214025:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214029:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800421402c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214030:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004214034:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214038:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421403c:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004214040:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214044:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214048:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800421404c:	e9 69 06 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004214051:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004214055:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004214059:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421405c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214060:	48 89 c7             	mov    %rax,%rdi
  8004214063:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  800421406a:	00 00 00 
  800421406d:	ff d0                	callq  *%rax
  800421406f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004214073:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214077:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421407b:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  800421407f:	e9 36 06 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004214084:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004214088:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421408c:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  800421408f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214093:	48 89 c7             	mov    %rax,%rdi
  8004214096:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  800421409d:	00 00 00 
  80042140a0:	ff d0                	callq  *%rax
  80042140a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  80042140a6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140aa:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042140ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140b1:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  80042140b5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140b9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042140bd:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042140c1:	e9 f4 05 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  80042140c6:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042140ca:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042140ce:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  80042140d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140d5:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  80042140d8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140dc:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  80042140e0:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  80042140e4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042140e8:	48 89 c7             	mov    %rax,%rdi
  80042140eb:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042140f2:	00 00 00 
  80042140f5:	ff d0                	callq  *%rax
  80042140f7:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  80042140fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140ff:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004214103:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004214107:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421410b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421410f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004214113:	48 01 d0             	add    %rdx,%rax
  8004214116:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800421411a:	e9 9b 05 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  800421411f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004214123:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004214127:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421412a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421412e:	48 89 c7             	mov    %rax,%rdi
  8004214131:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004214138:	00 00 00 
  800421413b:	ff d0                	callq  *%rax
  800421413d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004214141:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214145:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214149:	0f b7 c0             	movzwl %ax,%eax
  800421414c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004214150:	77 0c                	ja     800421415e <_dwarf_frame_run_inst+0x865>
  8004214152:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004214159:	e9 6a 05 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800421415e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214162:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214166:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421416a:	48 89 d0             	mov    %rdx,%rax
  800421416d:	48 01 c0             	add    %rax,%rax
  8004214170:	48 01 d0             	add    %rdx,%rax
  8004214173:	48 c1 e0 03          	shl    $0x3,%rax
  8004214177:	48 01 c8             	add    %rcx,%rax
  800421417a:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  800421417d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214181:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214185:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214189:	48 89 d0             	mov    %rdx,%rax
  800421418c:	48 01 c0             	add    %rax,%rax
  800421418f:	48 01 d0             	add    %rdx,%rax
  8004214192:	48 c1 e0 03          	shl    $0x3,%rax
  8004214196:	48 01 c8             	add    %rcx,%rax
  8004214199:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  800421419d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141a1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141a5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141a9:	48 89 d0             	mov    %rdx,%rax
  80042141ac:	48 01 c0             	add    %rax,%rax
  80042141af:	48 01 d0             	add    %rdx,%rax
  80042141b2:	48 c1 e0 03          	shl    $0x3,%rax
  80042141b6:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  80042141ba:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042141be:	48 89 c7             	mov    %rax,%rdi
  80042141c1:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042141c8:	00 00 00 
  80042141cb:	ff d0                	callq  *%rax
			RL[reg].dw_offset_or_block_len =
  80042141cd:	48 89 43 08          	mov    %rax,0x8(%rbx)
			RL[reg].dw_block_ptr = p;
  80042141d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141d5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141d9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141dd:	48 89 d0             	mov    %rdx,%rax
  80042141e0:	48 01 c0             	add    %rax,%rax
  80042141e3:	48 01 d0             	add    %rdx,%rax
  80042141e6:	48 c1 e0 03          	shl    $0x3,%rax
  80042141ea:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042141ee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042141f2:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  80042141f6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042141fa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141fe:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004214202:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214206:	48 89 d0             	mov    %rdx,%rax
  8004214209:	48 01 c0             	add    %rax,%rax
  800421420c:	48 01 d0             	add    %rdx,%rax
  800421420f:	48 c1 e0 03          	shl    $0x3,%rax
  8004214213:	48 01 f0             	add    %rsi,%rax
  8004214216:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421421a:	48 01 c8             	add    %rcx,%rax
  800421421d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004214221:	e9 94 04 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004214226:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421422a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421422e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214231:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214235:	48 89 c7             	mov    %rax,%rdi
  8004214238:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  800421423f:	00 00 00 
  8004214242:	ff d0                	callq  *%rax
  8004214244:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004214248:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421424c:	48 89 c7             	mov    %rax,%rdi
  800421424f:	48 b8 9a 1d 21 04 80 	movabs $0x8004211d9a,%rax
  8004214256:	00 00 00 
  8004214259:	ff d0                	callq  *%rax
  800421425b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421425f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214263:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214267:	0f b7 c0             	movzwl %ax,%eax
  800421426a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421426e:	77 0c                	ja     800421427c <_dwarf_frame_run_inst+0x983>
  8004214270:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004214277:	e9 4c 04 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421427c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214280:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214284:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214288:	48 89 d0             	mov    %rdx,%rax
  800421428b:	48 01 c0             	add    %rax,%rax
  800421428e:	48 01 d0             	add    %rdx,%rax
  8004214291:	48 c1 e0 03          	shl    $0x3,%rax
  8004214295:	48 01 c8             	add    %rcx,%rax
  8004214298:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  800421429b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421429f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142a3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042142a7:	48 89 d0             	mov    %rdx,%rax
  80042142aa:	48 01 c0             	add    %rax,%rax
  80042142ad:	48 01 d0             	add    %rdx,%rax
  80042142b0:	48 c1 e0 03          	shl    $0x3,%rax
  80042142b4:	48 01 c8             	add    %rcx,%rax
  80042142b7:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042142bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042142bf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142c3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042142c7:	48 89 d0             	mov    %rdx,%rax
  80042142ca:	48 01 c0             	add    %rax,%rax
  80042142cd:	48 01 d0             	add    %rdx,%rax
  80042142d0:	48 c1 e0 03          	shl    $0x3,%rax
  80042142d4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042142d8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042142dc:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042142e0:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  80042142e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042142e8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142ec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042142f0:	48 89 d0             	mov    %rdx,%rax
  80042142f3:	48 01 c0             	add    %rax,%rax
  80042142f6:	48 01 d0             	add    %rdx,%rax
  80042142f9:	48 c1 e0 03          	shl    $0x3,%rax
  80042142fd:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214301:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004214308:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800421430d:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004214311:	e9 a4 03 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004214316:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421431a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421431e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214321:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214325:	48 89 c7             	mov    %rax,%rdi
  8004214328:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  800421432f:	00 00 00 
  8004214332:	ff d0                	callq  *%rax
  8004214334:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004214338:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421433c:	48 89 c7             	mov    %rax,%rdi
  800421433f:	48 b8 9a 1d 21 04 80 	movabs $0x8004211d9a,%rax
  8004214346:	00 00 00 
  8004214349:	ff d0                	callq  *%rax
  800421434b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  800421434f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214353:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004214356:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421435a:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  800421435e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214362:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214366:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  800421436a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421436e:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004214375:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  800421437a:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800421437e:	e9 37 03 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004214383:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004214387:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421438b:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  800421438e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214392:	48 89 c7             	mov    %rax,%rdi
  8004214395:	48 b8 9a 1d 21 04 80 	movabs $0x8004211d9a,%rax
  800421439c:	00 00 00 
  800421439f:	ff d0                	callq  *%rax
  80042143a1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  80042143a5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042143a9:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042143ac:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042143b0:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  80042143b4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042143b8:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  80042143bf:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  80042143c4:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042143c8:	e9 ed 02 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  80042143cd:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042143d1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042143d5:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042143d8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042143dc:	48 89 c7             	mov    %rax,%rdi
  80042143df:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042143e6:	00 00 00 
  80042143e9:	ff d0                	callq  *%rax
  80042143eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  80042143ef:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042143f3:	48 89 c7             	mov    %rax,%rdi
  80042143f6:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042143fd:	00 00 00 
  8004214400:	ff d0                	callq  *%rax
  8004214402:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004214406:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421440a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421440e:	0f b7 c0             	movzwl %ax,%eax
  8004214411:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004214415:	77 0c                	ja     8004214423 <_dwarf_frame_run_inst+0xb2a>
  8004214417:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421441e:	e9 a5 02 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004214423:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214427:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421442b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421442f:	48 89 d0             	mov    %rdx,%rax
  8004214432:	48 01 c0             	add    %rax,%rax
  8004214435:	48 01 d0             	add    %rdx,%rax
  8004214438:	48 c1 e0 03          	shl    $0x3,%rax
  800421443c:	48 01 c8             	add    %rcx,%rax
  800421443f:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004214442:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214446:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421444a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421444e:	48 89 d0             	mov    %rdx,%rax
  8004214451:	48 01 c0             	add    %rax,%rax
  8004214454:	48 01 d0             	add    %rdx,%rax
  8004214457:	48 c1 e0 03          	shl    $0x3,%rax
  800421445b:	48 01 c8             	add    %rcx,%rax
  800421445e:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004214462:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214466:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421446a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421446e:	48 89 d0             	mov    %rdx,%rax
  8004214471:	48 01 c0             	add    %rax,%rax
  8004214474:	48 01 d0             	add    %rdx,%rax
  8004214477:	48 c1 e0 03          	shl    $0x3,%rax
  800421447b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421447f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004214483:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214487:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  800421448b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421448f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214493:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214497:	48 89 d0             	mov    %rdx,%rax
  800421449a:	48 01 c0             	add    %rax,%rax
  800421449d:	48 01 d0             	add    %rdx,%rax
  80042144a0:	48 c1 e0 03          	shl    $0x3,%rax
  80042144a4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042144a8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042144af:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  80042144b4:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042144b8:	e9 fd 01 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  80042144bd:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042144c1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042144c5:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042144c8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042144cc:	48 89 c7             	mov    %rax,%rdi
  80042144cf:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042144d6:	00 00 00 
  80042144d9:	ff d0                	callq  *%rax
  80042144db:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042144df:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042144e3:	48 89 c7             	mov    %rax,%rdi
  80042144e6:	48 b8 9a 1d 21 04 80 	movabs $0x8004211d9a,%rax
  80042144ed:	00 00 00 
  80042144f0:	ff d0                	callq  *%rax
  80042144f2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042144f6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042144fa:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042144fe:	0f b7 c0             	movzwl %ax,%eax
  8004214501:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004214505:	77 0c                	ja     8004214513 <_dwarf_frame_run_inst+0xc1a>
  8004214507:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421450e:	e9 b5 01 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004214513:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214517:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421451b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421451f:	48 89 d0             	mov    %rdx,%rax
  8004214522:	48 01 c0             	add    %rax,%rax
  8004214525:	48 01 d0             	add    %rdx,%rax
  8004214528:	48 c1 e0 03          	shl    $0x3,%rax
  800421452c:	48 01 c8             	add    %rcx,%rax
  800421452f:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004214532:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214536:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421453a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421453e:	48 89 d0             	mov    %rdx,%rax
  8004214541:	48 01 c0             	add    %rax,%rax
  8004214544:	48 01 d0             	add    %rdx,%rax
  8004214547:	48 c1 e0 03          	shl    $0x3,%rax
  800421454b:	48 01 c8             	add    %rcx,%rax
  800421454e:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004214552:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214556:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421455a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421455e:	48 89 d0             	mov    %rdx,%rax
  8004214561:	48 01 c0             	add    %rax,%rax
  8004214564:	48 01 d0             	add    %rdx,%rax
  8004214567:	48 c1 e0 03          	shl    $0x3,%rax
  800421456b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421456f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004214573:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214577:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800421457b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421457f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214583:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214587:	48 89 d0             	mov    %rdx,%rax
  800421458a:	48 01 c0             	add    %rax,%rax
  800421458d:	48 01 d0             	add    %rdx,%rax
  8004214590:	48 c1 e0 03          	shl    $0x3,%rax
  8004214594:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214598:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421459f:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  80042145a4:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042145a8:	e9 0d 01 00 00       	jmpq   80042146ba <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  80042145ad:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042145b1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042145b5:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042145b8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042145bc:	48 89 c7             	mov    %rax,%rdi
  80042145bf:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042145c6:	00 00 00 
  80042145c9:	ff d0                	callq  *%rax
  80042145cb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042145cf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042145d3:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042145d7:	0f b7 c0             	movzwl %ax,%eax
  80042145da:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042145de:	77 0c                	ja     80042145ec <_dwarf_frame_run_inst+0xcf3>
  80042145e0:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042145e7:	e9 dc 00 00 00       	jmpq   80042146c8 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042145ec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042145f0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042145f4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042145f8:	48 89 d0             	mov    %rdx,%rax
  80042145fb:	48 01 c0             	add    %rax,%rax
  80042145fe:	48 01 d0             	add    %rdx,%rax
  8004214601:	48 c1 e0 03          	shl    $0x3,%rax
  8004214605:	48 01 c8             	add    %rcx,%rax
  8004214608:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  800421460b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421460f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214613:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214617:	48 89 d0             	mov    %rdx,%rax
  800421461a:	48 01 c0             	add    %rax,%rax
  800421461d:	48 01 d0             	add    %rdx,%rax
  8004214620:	48 c1 e0 03          	shl    $0x3,%rax
  8004214624:	48 01 c8             	add    %rcx,%rax
  8004214627:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  800421462b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421462f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214633:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214637:	48 89 d0             	mov    %rdx,%rax
  800421463a:	48 01 c0             	add    %rax,%rax
  800421463d:	48 01 d0             	add    %rdx,%rax
  8004214640:	48 c1 e0 03          	shl    $0x3,%rax
  8004214644:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004214648:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421464c:	48 89 c7             	mov    %rax,%rdi
  800421464f:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004214656:	00 00 00 
  8004214659:	ff d0                	callq  *%rax
			RL[reg].dw_offset_or_block_len =
  800421465b:	48 89 43 08          	mov    %rax,0x8(%rbx)
			RL[reg].dw_block_ptr = p;
  800421465f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214663:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214667:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421466b:	48 89 d0             	mov    %rdx,%rax
  800421466e:	48 01 c0             	add    %rax,%rax
  8004214671:	48 01 d0             	add    %rdx,%rax
  8004214674:	48 c1 e0 03          	shl    $0x3,%rax
  8004214678:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421467c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214680:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004214684:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004214688:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421468c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004214690:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214694:	48 89 d0             	mov    %rdx,%rax
  8004214697:	48 01 c0             	add    %rax,%rax
  800421469a:	48 01 d0             	add    %rdx,%rax
  800421469d:	48 c1 e0 03          	shl    $0x3,%rax
  80042146a1:	48 01 f0             	add    %rsi,%rax
  80042146a4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042146a8:	48 01 c8             	add    %rcx,%rax
  80042146ab:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  80042146af:	eb 09                	jmp    80042146ba <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042146b1:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  80042146b8:	eb 0e                	jmp    80042146c8 <_dwarf_frame_run_inst+0xdcf>
	while (p < pe) {
  80042146ba:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042146be:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042146c2:	0f 82 b8 f2 ff ff    	jb     8004213980 <_dwarf_frame_run_inst+0x87>
		}
	}

program_done:
	return (ret);
  80042146c8:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  80042146cb:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  80042146d2:	5b                   	pop    %rbx
  80042146d3:	5d                   	pop    %rbp
  80042146d4:	c3                   	retq   

00000080042146d5 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  80042146d5:	55                   	push   %rbp
  80042146d6:	48 89 e5             	mov    %rsp,%rbp
  80042146d9:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  80042146dd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042146e1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042146e5:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042146e9:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042146ed:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  80042146f1:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  80042146f5:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  80042146fa:	75 35                	jne    8004214731 <_dwarf_frame_get_internal_table+0x5c>
  80042146fc:	48 b9 58 06 22 04 80 	movabs $0x8004220658,%rcx
  8004214703:	00 00 00 
  8004214706:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  800421470d:	00 00 00 
  8004214710:	be 83 01 00 00       	mov    $0x183,%esi
  8004214715:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  800421471c:	00 00 00 
  800421471f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214724:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421472b:	00 00 00 
  800421472e:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  8004214731:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004214736:	75 35                	jne    800421476d <_dwarf_frame_get_internal_table+0x98>
  8004214738:	48 b9 67 06 22 04 80 	movabs $0x8004220667,%rcx
  800421473f:	00 00 00 
  8004214742:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  8004214749:	00 00 00 
  800421474c:	be 86 01 00 00       	mov    $0x186,%esi
  8004214751:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  8004214758:	00 00 00 
  800421475b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214760:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214767:	00 00 00 
  800421476a:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  800421476d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214771:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214775:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004214779:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421477d:	ba 18 00 00 00       	mov    $0x18,%edx
  8004214782:	be 00 00 00 00       	mov    $0x0,%esi
  8004214787:	48 89 c7             	mov    %rax,%rdi
  800421478a:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004214791:	00 00 00 
  8004214794:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  8004214796:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421479a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421479e:	0f b7 d0             	movzwl %ax,%edx
  80042147a1:	48 89 d0             	mov    %rdx,%rax
  80042147a4:	48 01 c0             	add    %rax,%rax
  80042147a7:	48 01 d0             	add    %rdx,%rax
  80042147aa:	48 c1 e0 03          	shl    $0x3,%rax
  80042147ae:	48 89 c2             	mov    %rax,%rdx
  80042147b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042147b5:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042147b9:	be 00 00 00 00       	mov    $0x0,%esi
  80042147be:	48 89 c7             	mov    %rax,%rdi
  80042147c1:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  80042147c8:	00 00 00 
  80042147cb:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  80042147cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042147d4:	eb 2f                	jmp    8004214805 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  80042147d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042147da:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042147de:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042147e1:	48 63 d0             	movslq %eax,%rdx
  80042147e4:	48 89 d0             	mov    %rdx,%rax
  80042147e7:	48 01 c0             	add    %rax,%rax
  80042147ea:	48 01 d0             	add    %rdx,%rax
  80042147ed:	48 c1 e0 03          	shl    $0x3,%rax
  80042147f1:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042147f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147f9:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  80042147fd:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004214801:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004214805:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214809:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421480d:	0f b7 c0             	movzwl %ax,%eax
  8004214810:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214813:	7f c1                	jg     80042147d6 <_dwarf_frame_get_internal_table+0x101>

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  8004214815:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214819:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421481d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  8004214821:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004214826:	75 35                	jne    800421485d <_dwarf_frame_get_internal_table+0x188>
  8004214828:	48 b9 73 06 22 04 80 	movabs $0x8004220673,%rcx
  800421482f:	00 00 00 
  8004214832:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  8004214839:	00 00 00 
  800421483c:	be 95 01 00 00       	mov    $0x195,%esi
  8004214841:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  8004214848:	00 00 00 
  800421484b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214850:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214857:	00 00 00 
  800421485a:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  800421485d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214861:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214865:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214869:	4c 8b 40 38          	mov    0x38(%rax),%r8
  800421486d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214871:	48 8b 48 70          	mov    0x70(%rax),%rcx
  8004214875:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214879:	48 8b 50 68          	mov    0x68(%rax),%rdx
  800421487d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004214881:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214885:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  8004214889:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800421488e:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  8004214892:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004214897:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  800421489e:	ff ff 
  80042148a0:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  80042148a7:	00 
  80042148a8:	48 89 c7             	mov    %rax,%rdi
  80042148ab:	48 b8 f9 38 21 04 80 	movabs $0x80042138f9,%rax
  80042148b2:	00 00 00 
  80042148b5:	ff d0                	callq  *%rax
  80042148b7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  80042148ba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042148be:	74 08                	je     80042148c8 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  80042148c0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042148c3:	e9 98 00 00 00       	jmpq   8004214960 <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  80042148c8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148cc:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042148d0:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042148d4:	77 6f                	ja     8004214945 <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  80042148d6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148da:	48 8b 78 30          	mov    0x30(%rax),%rdi
  80042148de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148e2:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042148e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148ea:	4c 8b 50 38          	mov    0x38(%rax),%r10
  80042148ee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148f2:	48 8b 48 58          	mov    0x58(%rax),%rcx
  80042148f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148fa:	48 8b 50 50          	mov    0x50(%rax),%rdx
  80042148fe:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004214902:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214906:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  800421490a:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  800421490f:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  8004214913:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004214918:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  800421491c:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004214921:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214925:	4d 89 d0             	mov    %r10,%r8
  8004214928:	48 89 c7             	mov    %rax,%rdi
  800421492b:	48 b8 f9 38 21 04 80 	movabs $0x80042138f9,%rax
  8004214932:	00 00 00 
  8004214935:	ff d0                	callq  *%rax
  8004214937:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  800421493a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421493e:	74 05                	je     8004214945 <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  8004214940:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004214943:	eb 1b                	jmp    8004214960 <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  8004214945:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214949:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421494d:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  8004214950:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214954:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214958:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  800421495b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214960:	c9                   	leaveq 
  8004214961:	c3                   	retq   

0000008004214962 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  8004214962:	55                   	push   %rbp
  8004214963:	48 89 e5             	mov    %rsp,%rbp
  8004214966:	48 83 ec 50          	sub    $0x50,%rsp
  800421496a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421496e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004214972:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004214976:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  800421497a:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  800421497e:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  8004214982:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004214987:	74 07                	je     8004214990 <dwarf_get_fde_info_for_all_regs+0x2e>
  8004214989:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421498e:	75 0a                	jne    800421499a <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004214990:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214995:	e9 eb 02 00 00       	jmpq   8004214c85 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  800421499a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421499f:	75 35                	jne    80042149d6 <dwarf_get_fde_info_for_all_regs+0x74>
  80042149a1:	48 b9 67 06 22 04 80 	movabs $0x8004220667,%rcx
  80042149a8:	00 00 00 
  80042149ab:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  80042149b2:	00 00 00 
  80042149b5:	be bf 01 00 00       	mov    $0x1bf,%esi
  80042149ba:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  80042149c1:	00 00 00 
  80042149c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042149c9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042149d0:	00 00 00 
  80042149d3:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  80042149d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042149da:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042149de:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042149e2:	77 19                	ja     80042149fd <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  80042149e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042149e8:	48 8b 50 30          	mov    0x30(%rax),%rdx
  80042149ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042149f0:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042149f4:	48 01 d0             	add    %rdx,%rax
	if (pc_requested < fde->fde_initloc ||
  80042149f7:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042149fb:	77 0a                	ja     8004214a07 <dwarf_get_fde_info_for_all_regs+0xa5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  80042149fd:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214a02:	e9 7e 02 00 00       	jmpq   8004214c85 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004214a07:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004214a0b:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004214a0f:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004214a13:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a17:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214a1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214a1f:	4d 89 c1             	mov    %r8,%r9
  8004214a22:	49 89 f8             	mov    %rdi,%r8
  8004214a25:	48 89 c7             	mov    %rax,%rdi
  8004214a28:	48 b8 d5 46 21 04 80 	movabs $0x80042146d5,%rax
  8004214a2f:	00 00 00 
  8004214a32:	ff d0                	callq  *%rax
  8004214a34:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  8004214a37:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004214a3b:	74 0a                	je     8004214a47 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  8004214a3d:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214a42:	e9 3e 02 00 00       	jmpq   8004214c85 <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  8004214a47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214a4b:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214a4f:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  8004214a53:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  8004214a58:	0f 87 b1 00 00 00    	ja     8004214b0f <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  8004214a5e:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  8004214a62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a66:	0f b6 00             	movzbl (%rax),%eax
		reg_table->rules[cfa].dw_offset_relevant =
  8004214a69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214a6d:	48 63 c9             	movslq %ecx,%rcx
  8004214a70:	48 83 c1 01          	add    $0x1,%rcx
  8004214a74:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214a78:	48 01 ca             	add    %rcx,%rdx
  8004214a7b:	88 02                	mov    %al,(%rdx)
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  8004214a7d:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214a81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a85:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004214a89:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214a8d:	48 63 c9             	movslq %ecx,%rcx
  8004214a90:	48 83 c1 01          	add    $0x1,%rcx
  8004214a94:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214a98:	48 01 ca             	add    %rcx,%rdx
  8004214a9b:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004214a9e:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214aa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214aa6:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214aaa:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214aae:	48 63 c9             	movslq %ecx,%rcx
  8004214ab1:	48 83 c1 01          	add    $0x1,%rcx
  8004214ab5:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214ab9:	48 01 ca             	add    %rcx,%rdx
  8004214abc:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004214ac0:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214ac4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ac8:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004214acc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214ad0:	48 63 c9             	movslq %ecx,%rcx
  8004214ad3:	48 83 c1 01          	add    $0x1,%rcx
  8004214ad7:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214adb:	48 01 ca             	add    %rcx,%rdx
  8004214ade:	48 83 c2 08          	add    $0x8,%rdx
  8004214ae2:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  8004214ae5:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004214ae9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004214aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214af1:	48 63 d2             	movslq %edx,%rdx
  8004214af4:	48 83 c2 01          	add    $0x1,%rdx
  8004214af8:	48 c1 e2 04          	shl    $0x4,%rdx
  8004214afc:	48 01 d0             	add    %rdx,%rax
  8004214aff:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004214b03:	48 8b 00             	mov    (%rax),%rax
  8004214b06:	48 89 01             	mov    %rax,(%rcx)
  8004214b09:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  8004214b0d:	eb 3c                	jmp    8004214b4b <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004214b0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b13:	0f b6 10             	movzbl (%rax),%edx
		reg_table->cfa_rule.dw_offset_relevant =
  8004214b16:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b1a:	88 10                	mov    %dl,(%rax)
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  8004214b1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b20:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  8004214b24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b28:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  8004214b2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b2f:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  8004214b33:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b37:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  8004214b3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b3f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004214b43:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b47:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004214b4b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004214b52:	e9 fd 00 00 00       	jmpq   8004214c54 <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  8004214b57:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  8004214b5b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214b5e:	75 05                	jne    8004214b65 <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  8004214b60:	e9 eb 00 00 00       	jmpq   8004214c50 <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  8004214b65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b69:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214b6d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214b70:	48 63 d0             	movslq %eax,%rdx
  8004214b73:	48 89 d0             	mov    %rdx,%rax
  8004214b76:	48 01 c0             	add    %rax,%rax
  8004214b79:	48 01 d0             	add    %rdx,%rax
  8004214b7c:	48 c1 e0 03          	shl    $0x3,%rax
  8004214b80:	48 01 c8             	add    %rcx,%rax
  8004214b83:	0f b6 00             	movzbl (%rax),%eax
		reg_table->rules[i].dw_offset_relevant =
  8004214b86:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214b8a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214b8d:	48 63 c9             	movslq %ecx,%rcx
  8004214b90:	48 83 c1 01          	add    $0x1,%rcx
  8004214b94:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214b98:	48 01 ca             	add    %rcx,%rdx
  8004214b9b:	88 02                	mov    %al,(%rdx)
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  8004214b9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ba1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214ba5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214ba8:	48 63 d0             	movslq %eax,%rdx
  8004214bab:	48 89 d0             	mov    %rdx,%rax
  8004214bae:	48 01 c0             	add    %rax,%rax
  8004214bb1:	48 01 d0             	add    %rdx,%rax
  8004214bb4:	48 c1 e0 03          	shl    $0x3,%rax
  8004214bb8:	48 01 c8             	add    %rcx,%rax
  8004214bbb:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		reg_table->rules[i].dw_value_type =
  8004214bbf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214bc3:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214bc6:	48 63 c9             	movslq %ecx,%rcx
  8004214bc9:	48 83 c1 01          	add    $0x1,%rcx
  8004214bcd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214bd1:	48 01 ca             	add    %rcx,%rdx
  8004214bd4:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214bd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214bdb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214bdf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214be2:	48 63 d0             	movslq %eax,%rdx
  8004214be5:	48 89 d0             	mov    %rdx,%rax
  8004214be8:	48 01 c0             	add    %rax,%rax
  8004214beb:	48 01 d0             	add    %rdx,%rax
  8004214bee:	48 c1 e0 03          	shl    $0x3,%rax
  8004214bf2:	48 01 c8             	add    %rcx,%rax
  8004214bf5:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214bf9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214bfd:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214c00:	48 63 c9             	movslq %ecx,%rcx
  8004214c03:	48 83 c1 01          	add    $0x1,%rcx
  8004214c07:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214c0b:	48 01 ca             	add    %rcx,%rdx
  8004214c0e:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  8004214c12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c16:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214c1a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214c1d:	48 63 d0             	movslq %eax,%rdx
  8004214c20:	48 89 d0             	mov    %rdx,%rax
  8004214c23:	48 01 c0             	add    %rax,%rax
  8004214c26:	48 01 d0             	add    %rdx,%rax
  8004214c29:	48 c1 e0 03          	shl    $0x3,%rax
  8004214c2d:	48 01 c8             	add    %rcx,%rax
  8004214c30:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset =
  8004214c34:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214c38:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214c3b:	48 63 c9             	movslq %ecx,%rcx
  8004214c3e:	48 83 c1 01          	add    $0x1,%rcx
  8004214c42:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214c46:	48 01 ca             	add    %rcx,%rdx
  8004214c49:	48 83 c2 08          	add    $0x8,%rdx
  8004214c4d:	48 89 02             	mov    %rax,(%rdx)
	     i++) {
  8004214c50:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004214c54:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004214c58:	7f 14                	jg     8004214c6e <dwarf_get_fde_info_for_all_regs+0x30c>
  8004214c5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214c5e:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004214c62:	0f b7 c0             	movzwl %ax,%eax
  8004214c65:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214c68:	0f 8f e9 fe ff ff    	jg     8004214b57 <dwarf_get_fde_info_for_all_regs+0x1f5>
	}

	if (row_pc) *row_pc = pc;
  8004214c6e:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004214c73:	74 0b                	je     8004214c80 <dwarf_get_fde_info_for_all_regs+0x31e>
  8004214c75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214c79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c7d:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  8004214c80:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214c85:	c9                   	leaveq 
  8004214c86:	c3                   	retq   

0000008004214c87 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004214c87:	55                   	push   %rbp
  8004214c88:	48 89 e5             	mov    %rsp,%rbp
  8004214c8b:	48 83 ec 40          	sub    $0x40,%rsp
  8004214c8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214c93:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004214c97:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004214c9b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004214c9f:	44 89 c0             	mov    %r8d,%eax
  8004214ca2:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004214ca6:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004214ca9:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004214cad:	75 0a                	jne    8004214cb9 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004214caf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214cb4:	e9 e6 01 00 00       	jmpq   8004214e9f <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004214cb9:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214cbd:	83 e0 f0             	and    $0xfffffff0,%eax
  8004214cc0:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004214cc3:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004214cc7:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214ccb:	83 f8 0c             	cmp    $0xc,%eax
  8004214cce:	0f 87 72 01 00 00    	ja     8004214e46 <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004214cd4:	89 c0                	mov    %eax,%eax
  8004214cd6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214cdd:	00 
  8004214cde:	48 b8 80 06 22 04 80 	movabs $0x8004220680,%rax
  8004214ce5:	00 00 00 
  8004214ce8:	48 01 d0             	add    %rdx,%rax
  8004214ceb:	48 8b 00             	mov    (%rax),%rax
  8004214cee:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004214cf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cf4:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214cf8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214cfc:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214cff:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214d03:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214d07:	48 89 cf             	mov    %rcx,%rdi
  8004214d0a:	ff d0                	callq  *%rax
  8004214d0c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214d10:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214d13:	e9 35 01 00 00       	jmpq   8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004214d18:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214d20:	48 89 d6             	mov    %rdx,%rsi
  8004214d23:	48 89 c7             	mov    %rax,%rdi
  8004214d26:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  8004214d2d:	00 00 00 
  8004214d30:	ff d0                	callq  *%rax
  8004214d32:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214d36:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214d39:	e9 0f 01 00 00       	jmpq   8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004214d3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d42:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214d46:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214d4a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214d4e:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214d53:	48 89 cf             	mov    %rcx,%rdi
  8004214d56:	ff d0                	callq  *%rax
  8004214d58:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214d5c:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214d5f:	e9 e9 00 00 00       	jmpq   8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004214d64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d68:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214d6c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214d70:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214d74:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214d79:	48 89 cf             	mov    %rcx,%rdi
  8004214d7c:	ff d0                	callq  *%rax
  8004214d7e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214d82:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214d85:	e9 c3 00 00 00       	jmpq   8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004214d8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d8e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214d92:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214d96:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214d9a:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214d9f:	48 89 cf             	mov    %rcx,%rdi
  8004214da2:	ff d0                	callq  *%rax
  8004214da4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214da8:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214dab:	e9 9d 00 00 00       	jmpq   8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004214db0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214db4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214db8:	48 89 d6             	mov    %rdx,%rsi
  8004214dbb:	48 89 c7             	mov    %rax,%rdi
  8004214dbe:	48 b8 77 1c 21 04 80 	movabs $0x8004211c77,%rax
  8004214dc5:	00 00 00 
  8004214dc8:	ff d0                	callq  *%rax
  8004214dca:	48 89 c2             	mov    %rax,%rdx
  8004214dcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214dd1:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214dd4:	eb 77                	jmp    8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214dd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dda:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214dde:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214de2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214de6:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214deb:	48 89 cf             	mov    %rcx,%rdi
  8004214dee:	ff d0                	callq  *%rax
  8004214df0:	48 0f bf d0          	movswq %ax,%rdx
  8004214df4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214df8:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214dfb:	eb 50                	jmp    8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004214dfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e01:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e05:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214e09:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214e0d:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214e12:	48 89 cf             	mov    %rcx,%rdi
  8004214e15:	ff d0                	callq  *%rax
  8004214e17:	48 63 d0             	movslq %eax,%rdx
  8004214e1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214e1e:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214e21:	eb 2a                	jmp    8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004214e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e27:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e2b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214e2f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214e33:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214e38:	48 89 cf             	mov    %rcx,%rdi
  8004214e3b:	ff d0                	callq  *%rax
  8004214e3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214e41:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214e44:	eb 07                	jmp    8004214e4d <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214e46:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214e4b:	eb 52                	jmp    8004214e9f <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004214e4d:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004214e51:	75 47                	jne    8004214e9a <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004214e53:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214e57:	83 f8 01             	cmp    $0x1,%eax
  8004214e5a:	7c 3d                	jl     8004214e99 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214e5c:	83 f8 04             	cmp    $0x4,%eax
  8004214e5f:	7e 0a                	jle    8004214e6b <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004214e61:	83 e8 09             	sub    $0x9,%eax
  8004214e64:	83 f8 03             	cmp    $0x3,%eax
  8004214e67:	77 30                	ja     8004214e99 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214e69:	eb 17                	jmp    8004214e82 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004214e6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214e6f:	48 8b 10             	mov    (%rax),%rdx
  8004214e72:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214e76:	48 01 c2             	add    %rax,%rdx
  8004214e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214e7d:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214e80:	eb 18                	jmp    8004214e9a <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004214e82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214e86:	48 8b 10             	mov    (%rax),%rdx
  8004214e89:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214e8d:	48 01 c2             	add    %rax,%rdx
  8004214e90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214e94:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214e97:	eb 01                	jmp    8004214e9a <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004214e99:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004214e9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214e9f:	c9                   	leaveq 
  8004214ea0:	c3                   	retq   

0000008004214ea1 <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004214ea1:	55                   	push   %rbp
  8004214ea2:	48 89 e5             	mov    %rsp,%rbp
  8004214ea5:	48 83 ec 50          	sub    $0x50,%rsp
  8004214ea9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214ead:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214eb1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004214eb5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214eb9:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214ebd:	48 85 c0             	test   %rax,%rax
  8004214ec0:	74 0f                	je     8004214ed1 <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004214ec2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214ec6:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214eca:	0f b6 00             	movzbl (%rax),%eax
  8004214ecd:	3c 7a                	cmp    $0x7a,%al
  8004214ecf:	74 35                	je     8004214f06 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004214ed1:	48 b9 e8 06 22 04 80 	movabs $0x80042206e8,%rcx
  8004214ed8:	00 00 00 
  8004214edb:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  8004214ee2:	00 00 00 
  8004214ee5:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004214eea:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  8004214ef1:	00 00 00 
  8004214ef4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214ef9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214f00:	00 00 00 
  8004214f03:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214f06:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214f0a:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214f0e:	48 83 c0 01          	add    $0x1,%rax
  8004214f12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004214f16:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214f1a:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214f1e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004214f22:	e9 af 00 00 00       	jmpq   8004214fd6 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004214f27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214f2b:	0f b6 00             	movzbl (%rax),%eax
  8004214f2e:	0f b6 c0             	movzbl %al,%eax
  8004214f31:	83 f8 50             	cmp    $0x50,%eax
  8004214f34:	74 18                	je     8004214f4e <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004214f36:	83 f8 52             	cmp    $0x52,%eax
  8004214f39:	74 77                	je     8004214fb2 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004214f3b:	83 f8 4c             	cmp    $0x4c,%eax
  8004214f3e:	0f 85 86 00 00 00    	jne    8004214fca <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004214f44:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004214f49:	e9 83 00 00 00       	jmpq   8004214fd1 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004214f4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214f52:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214f56:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214f5a:	0f b6 00             	movzbl (%rax),%eax
  8004214f5d:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004214f60:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004214f67:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214f68:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004214f6d:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004214f71:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214f75:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004214f79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f7d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214f81:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214f85:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214f8b:	48 89 c7             	mov    %rax,%rdi
  8004214f8e:	48 b8 87 4c 21 04 80 	movabs $0x8004214c87,%rax
  8004214f95:	00 00 00 
  8004214f98:	ff d0                	callq  *%rax
  8004214f9a:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004214f9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004214fa1:	74 05                	je     8004214fa8 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004214fa3:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214fa6:	eb 42                	jmp    8004214fea <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004214fa8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214fac:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004214fb0:	eb 1f                	jmp    8004214fd1 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004214fb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214fb6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214fba:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214fbe:	0f b6 10             	movzbl (%rax),%edx
  8004214fc1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214fc5:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004214fc8:	eb 07                	jmp    8004214fd1 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214fca:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214fcf:	eb 19                	jmp    8004214fea <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004214fd1:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	while (*aug_p != '\0') {
  8004214fd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214fda:	0f b6 00             	movzbl (%rax),%eax
  8004214fdd:	84 c0                	test   %al,%al
  8004214fdf:	0f 85 42 ff ff ff    	jne    8004214f27 <_dwarf_frame_parse_lsb_cie_augment+0x86>
	}

	return (DW_DLE_NONE);
  8004214fe5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214fea:	c9                   	leaveq 
  8004214feb:	c3                   	retq   

0000008004214fec <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004214fec:	55                   	push   %rbp
  8004214fed:	48 89 e5             	mov    %rsp,%rbp
  8004214ff0:	48 83 ec 60          	sub    $0x60,%rsp
  8004214ff4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214ff8:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214ffc:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004215000:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004215004:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004215008:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  800421500d:	75 35                	jne    8004215044 <_dwarf_frame_set_cie+0x58>
  800421500f:	48 b9 1d 07 22 04 80 	movabs $0x800422071d,%rcx
  8004215016:	00 00 00 
  8004215019:	48 ba 67 05 22 04 80 	movabs $0x8004220567,%rdx
  8004215020:	00 00 00 
  8004215023:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004215028:	48 bf 7c 05 22 04 80 	movabs $0x800422057c,%rdi
  800421502f:	00 00 00 
  8004215032:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215037:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421503e:	00 00 00 
  8004215041:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004215044:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215048:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  800421504c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215050:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215054:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004215057:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421505b:	48 8b 10             	mov    (%rax),%rdx
  800421505e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215062:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004215066:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421506a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421506e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215072:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215076:	48 89 d1             	mov    %rdx,%rcx
  8004215079:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800421507d:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215082:	48 89 cf             	mov    %rcx,%rdi
  8004215085:	ff d0                	callq  *%rax
  8004215087:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  800421508b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215090:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004215094:	75 2e                	jne    80042150c4 <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004215096:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  800421509d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150a1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042150a5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042150a9:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042150ad:	48 89 d1             	mov    %rdx,%rcx
  80042150b0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042150b4:	ba 08 00 00 00       	mov    $0x8,%edx
  80042150b9:	48 89 cf             	mov    %rcx,%rdi
  80042150bc:	ff d0                	callq  *%rax
  80042150be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042150c2:	eb 07                	jmp    80042150cb <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  80042150c4:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  80042150cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150cf:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042150d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042150d7:	48 8b 00             	mov    (%rax),%rax
  80042150da:	48 29 c2             	sub    %rax,%rdx
  80042150dd:	48 89 d0             	mov    %rdx,%rax
  80042150e0:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042150e4:	73 0a                	jae    80042150f0 <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042150e6:	b8 12 00 00 00       	mov    $0x12,%eax
  80042150eb:	e9 5d 03 00 00       	jmpq   800421544d <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  80042150f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042150f8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042150fc:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215100:	48 89 d1             	mov    %rdx,%rcx
  8004215103:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215106:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800421510a:	48 89 cf             	mov    %rcx,%rdi
  800421510d:	ff d0                	callq  *%rax
	cie->cie_length = length;
  800421510f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215113:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215117:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  800421511b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421511f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215123:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215127:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421512b:	48 89 d1             	mov    %rdx,%rcx
  800421512e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004215132:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215137:	48 89 cf             	mov    %rcx,%rdi
  800421513a:	ff d0                	callq  *%rax
  800421513c:	89 c2                	mov    %eax,%edx
  800421513e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215142:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004215146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421514a:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  800421514e:	66 83 f8 01          	cmp    $0x1,%ax
  8004215152:	74 26                	je     800421517a <_dwarf_frame_set_cie+0x18e>
  8004215154:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215158:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  800421515c:	66 83 f8 03          	cmp    $0x3,%ax
  8004215160:	74 18                	je     800421517a <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004215162:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215166:	0f b7 40 20          	movzwl 0x20(%rax),%eax
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  800421516a:	66 83 f8 04          	cmp    $0x4,%ax
  800421516e:	74 0a                	je     800421517a <_dwarf_frame_set_cie+0x18e>
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004215170:	b8 16 00 00 00       	mov    $0x16,%eax
  8004215175:	e9 d3 02 00 00       	jmpq   800421544d <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421517a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421517e:	48 8b 10             	mov    (%rax),%rdx
  8004215181:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215185:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215189:	48 01 d0             	add    %rdx,%rax
  800421518c:	48 89 c2             	mov    %rax,%rdx
  800421518f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215193:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004215197:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421519b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421519f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  80042151a3:	90                   	nop
  80042151a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042151a8:	48 8b 00             	mov    (%rax),%rax
  80042151ab:	48 8d 48 01          	lea    0x1(%rax),%rcx
  80042151af:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042151b3:	48 89 0a             	mov    %rcx,(%rdx)
  80042151b6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042151ba:	48 01 d0             	add    %rdx,%rax
  80042151bd:	0f b6 00             	movzbl (%rax),%eax
  80042151c0:	84 c0                	test   %al,%al
  80042151c2:	75 e0                	jne    80042151a4 <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  80042151c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151c8:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042151cc:	0f b6 00             	movzbl (%rax),%eax
  80042151cf:	84 c0                	test   %al,%al
  80042151d1:	74 48                	je     800421521b <_dwarf_frame_set_cie+0x22f>
  80042151d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151d7:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042151db:	0f b6 00             	movzbl (%rax),%eax
  80042151de:	3c 7a                	cmp    $0x7a,%al
  80042151e0:	74 39                	je     800421521b <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  80042151e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151e6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042151ea:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042151ee:	75 07                	jne    80042151f7 <_dwarf_frame_set_cie+0x20b>
  80042151f0:	b8 04 00 00 00       	mov    $0x4,%eax
  80042151f5:	eb 05                	jmp    80042151fc <_dwarf_frame_set_cie+0x210>
  80042151f7:	b8 0c 00 00 00       	mov    $0xc,%eax
  80042151fc:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  80042151ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215203:	48 8b 40 18          	mov    0x18(%rax),%rax
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004215207:	48 01 c2             	add    %rax,%rdx
  800421520a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421520e:	48 89 10             	mov    %rdx,(%rax)
		return (DW_DLE_NONE);
  8004215211:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215216:	e9 32 02 00 00       	jmpq   800421544d <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  800421521b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421521f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215223:	48 be 25 07 22 04 80 	movabs $0x8004220725,%rsi
  800421522a:	00 00 00 
  800421522d:	48 89 c7             	mov    %rax,%rdi
  8004215230:	48 b8 2e 16 21 04 80 	movabs $0x800421162e,%rax
  8004215237:	00 00 00 
  800421523a:	ff d0                	callq  *%rax
  800421523c:	48 85 c0             	test   %rax,%rax
  800421523f:	74 28                	je     8004215269 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215241:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215245:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215249:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421524d:	8b 52 28             	mov    0x28(%rdx),%edx
  8004215250:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004215254:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004215258:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800421525c:	48 89 cf             	mov    %rcx,%rdi
  800421525f:	ff d0                	callq  *%rax
  8004215261:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215265:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004215269:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421526d:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215271:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004215275:	48 89 d6             	mov    %rdx,%rsi
  8004215278:	48 89 c7             	mov    %rax,%rdi
  800421527b:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  8004215282:	00 00 00 
  8004215285:	ff d0                	callq  *%rax
  8004215287:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421528b:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421528f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215293:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215297:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421529b:	48 89 d6             	mov    %rdx,%rsi
  800421529e:	48 89 c7             	mov    %rax,%rdi
  80042152a1:	48 b8 77 1c 21 04 80 	movabs $0x8004211c77,%rax
  80042152a8:	00 00 00 
  80042152ab:	ff d0                	callq  *%rax
  80042152ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042152b1:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  80042152b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042152b9:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  80042152bd:	66 83 f8 01          	cmp    $0x1,%ax
  80042152c1:	75 2b                	jne    80042152ee <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  80042152c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152c7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152cb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042152cf:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042152d3:	48 89 d1             	mov    %rdx,%rcx
  80042152d6:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042152da:	ba 01 00 00 00       	mov    $0x1,%edx
  80042152df:	48 89 cf             	mov    %rcx,%rdi
  80042152e2:	ff d0                	callq  *%rax
  80042152e4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042152e8:	48 89 42 48          	mov    %rax,0x48(%rdx)
  80042152ec:	eb 26                	jmp    8004215314 <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042152ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152f2:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042152f6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042152fa:	48 89 d6             	mov    %rdx,%rsi
  80042152fd:	48 89 c7             	mov    %rax,%rdi
  8004215300:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  8004215307:	00 00 00 
  800421530a:	ff d0                	callq  *%rax
  800421530c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215310:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  8004215314:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215318:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421531c:	0f b6 00             	movzbl (%rax),%eax
  800421531f:	3c 7a                	cmp    $0x7a,%al
  8004215321:	0f 85 93 00 00 00    	jne    80042153ba <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004215327:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421532b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421532f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004215333:	48 89 d6             	mov    %rdx,%rsi
  8004215336:	48 89 c7             	mov    %rax,%rdi
  8004215339:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  8004215340:	00 00 00 
  8004215343:	ff d0                	callq  *%rax
  8004215345:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215349:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421534d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215351:	48 8b 10             	mov    (%rax),%rdx
  8004215354:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215358:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421535c:	48 01 d0             	add    %rdx,%rax
  800421535f:	48 89 c2             	mov    %rax,%rdx
  8004215362:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215366:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  800421536a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421536e:	48 8b 10             	mov    (%rax),%rdx
  8004215371:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215375:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004215379:	48 01 c2             	add    %rax,%rdx
  800421537c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215380:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004215383:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215387:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  800421538b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421538f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004215393:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215397:	48 89 ce             	mov    %rcx,%rsi
  800421539a:	48 89 c7             	mov    %rax,%rdi
  800421539d:	48 b8 a1 4e 21 04 80 	movabs $0x8004214ea1,%rax
  80042153a4:	00 00 00 
  80042153a7:	ff d0                	callq  *%rax
  80042153a9:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  80042153ac:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042153b0:	74 08                	je     80042153ba <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  80042153b2:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042153b5:	e9 93 00 00 00       	jmpq   800421544d <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042153ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042153be:	48 8b 10             	mov    (%rax),%rdx
  80042153c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153c5:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042153c9:	48 01 d0             	add    %rdx,%rax
  80042153cc:	48 89 c2             	mov    %rax,%rdx
  80042153cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153d3:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  80042153d7:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042153db:	75 2a                	jne    8004215407 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  80042153dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042153e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042153e9:	48 01 c2             	add    %rax,%rdx
  80042153ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042153f0:	48 8b 00             	mov    (%rax),%rax
  80042153f3:	48 29 c2             	sub    %rax,%rdx
  80042153f6:	48 89 d0             	mov    %rdx,%rax
  80042153f9:	48 8d 50 04          	lea    0x4(%rax),%rdx
  80042153fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215401:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215405:	eb 28                	jmp    800421542f <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004215407:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421540b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421540f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215413:	48 01 c2             	add    %rax,%rdx
  8004215416:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421541a:	48 8b 00             	mov    (%rax),%rax
  800421541d:	48 29 c2             	sub    %rax,%rdx
  8004215420:	48 89 d0             	mov    %rdx,%rax
  8004215423:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004215427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421542b:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  800421542f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215433:	48 8b 10             	mov    (%rax),%rdx
  8004215436:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421543a:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421543e:	48 01 c2             	add    %rax,%rdx
  8004215441:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215445:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004215448:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421544d:	c9                   	leaveq 
  800421544e:	c3                   	retq   

000000800421544f <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  800421544f:	55                   	push   %rbp
  8004215450:	48 89 e5             	mov    %rsp,%rbp
  8004215453:	48 83 ec 70          	sub    $0x70,%rsp
  8004215457:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421545b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421545f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004215463:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004215467:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  800421546b:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  800421546f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215473:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004215477:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421547b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421547f:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004215482:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215486:	48 8b 10             	mov    (%rax),%rdx
  8004215489:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421548d:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215491:	48 01 d0             	add    %rdx,%rax
  8004215494:	48 89 c2             	mov    %rax,%rdx
  8004215497:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421549b:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  800421549f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042154a3:	48 8b 10             	mov    (%rax),%rdx
  80042154a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042154aa:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042154ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154b2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042154b6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042154ba:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042154be:	48 89 d1             	mov    %rdx,%rcx
  80042154c1:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042154c5:	ba 04 00 00 00       	mov    $0x4,%edx
  80042154ca:	48 89 cf             	mov    %rcx,%rdi
  80042154cd:	ff d0                	callq  *%rax
  80042154cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  80042154d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042154d8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042154dc:	75 2e                	jne    800421550c <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  80042154de:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  80042154e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154e9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042154ed:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042154f1:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042154f5:	48 89 d1             	mov    %rdx,%rcx
  80042154f8:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042154fc:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215501:	48 89 cf             	mov    %rcx,%rdi
  8004215504:	ff d0                	callq  *%rax
  8004215506:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421550a:	eb 07                	jmp    8004215513 <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  800421550c:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004215513:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215517:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421551b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421551f:	48 8b 00             	mov    (%rax),%rax
  8004215522:	48 29 c2             	sub    %rax,%rdx
  8004215525:	48 89 d0             	mov    %rdx,%rax
  8004215528:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421552c:	73 0a                	jae    8004215538 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  800421552e:	b8 12 00 00 00       	mov    $0x12,%eax
  8004215533:	e9 ca 02 00 00       	jmpq   8004215802 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  8004215538:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421553c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215540:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004215544:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004215548:	74 5e                	je     80042155a8 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  800421554a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421554e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215552:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215556:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421555a:	48 89 d1             	mov    %rdx,%rcx
  800421555d:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215561:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215566:	48 89 cf             	mov    %rcx,%rdi
  8004215569:	ff d0                	callq  *%rax
  800421556b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421556f:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  8004215573:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215577:	48 8b 10             	mov    (%rax),%rdx
  800421557a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421557e:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215582:	48 29 c2             	sub    %rax,%rdx
  8004215585:	48 89 d0             	mov    %rdx,%rax
  8004215588:	48 83 e8 04          	sub    $0x4,%rax
  800421558c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004215590:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215594:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215598:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421559c:	75 3d                	jne    80042155db <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  800421559e:	b8 13 00 00 00       	mov    $0x13,%eax
  80042155a3:	e9 5a 02 00 00       	jmpq   8004215802 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  80042155a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042155ac:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042155b0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042155b4:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042155b8:	48 89 d1             	mov    %rdx,%rcx
  80042155bb:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042155be:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042155c2:	48 89 cf             	mov    %rcx,%rdi
  80042155c5:	ff d0                	callq  *%rax
  80042155c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042155cb:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  80042155cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042155d3:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042155d7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  80042155db:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042155df:	0f 84 c9 00 00 00    	je     80042156ae <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042155e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042155ed:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042155f1:	48 8b 00             	mov    (%rax),%rax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042155f4:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042155f8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042155fc:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215600:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004215604:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215608:	48 8b 40 38          	mov    0x38(%rax),%rax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421560c:	48 89 c2             	mov    %rax,%rdx
  800421560f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004215613:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004215617:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421561b:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800421561f:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215623:	48 89 c7             	mov    %rax,%rdi
  8004215626:	48 b8 87 4c 21 04 80 	movabs $0x8004214c87,%rax
  800421562d:	00 00 00 
  8004215630:	ff d0                	callq  *%rax
  8004215632:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004215635:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215639:	74 08                	je     8004215643 <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  800421563b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421563e:	e9 bf 01 00 00       	jmpq   8004215802 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  8004215643:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215647:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421564b:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  800421564f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215653:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215657:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800421565b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421565f:	48 8b 40 38          	mov    0x38(%rax),%rax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215663:	48 89 c2             	mov    %rax,%rdx
  8004215666:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800421566a:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  800421566e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215672:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004215676:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421567a:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004215680:	48 89 c7             	mov    %rax,%rdi
  8004215683:	48 b8 87 4c 21 04 80 	movabs $0x8004214c87,%rax
  800421568a:	00 00 00 
  800421568d:	ff d0                	callq  *%rax
  800421568f:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004215692:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215696:	74 08                	je     80042156a0 <_dwarf_frame_set_fde+0x251>
			return (ret);
  8004215698:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421569b:	e9 62 01 00 00       	jmpq   8004215802 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  80042156a0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042156a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042156a8:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042156ac:	eb 50                	jmp    80042156fe <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042156ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042156b2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042156b6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042156ba:	8b 52 28             	mov    0x28(%rdx),%edx
  80042156bd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042156c1:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042156c5:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042156c9:	48 89 cf             	mov    %rcx,%rdi
  80042156cc:	ff d0                	callq  *%rax
  80042156ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042156d2:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042156d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042156da:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042156de:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042156e2:	8b 52 28             	mov    0x28(%rdx),%edx
  80042156e5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042156e9:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042156ed:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042156f1:	48 89 cf             	mov    %rcx,%rdi
  80042156f4:	ff d0                	callq  *%rax
  80042156f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042156fa:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  80042156fe:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004215702:	74 6b                	je     800421576f <_dwarf_frame_set_fde+0x320>
  8004215704:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215708:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421570c:	0f b6 00             	movzbl (%rax),%eax
  800421570f:	3c 7a                	cmp    $0x7a,%al
  8004215711:	75 5c                	jne    800421576f <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004215713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215717:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421571b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421571f:	48 89 d6             	mov    %rdx,%rsi
  8004215722:	48 89 c7             	mov    %rax,%rdi
  8004215725:	48 b8 1b 1d 21 04 80 	movabs $0x8004211d1b,%rax
  800421572c:	00 00 00 
  800421572f:	ff d0                	callq  *%rax
  8004215731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215735:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004215739:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421573d:	48 8b 10             	mov    (%rax),%rdx
  8004215740:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215744:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215748:	48 01 d0             	add    %rdx,%rax
  800421574b:	48 89 c2             	mov    %rax,%rdx
  800421574e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215752:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  8004215756:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421575a:	48 8b 10             	mov    (%rax),%rdx
  800421575d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215761:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004215765:	48 01 c2             	add    %rax,%rdx
  8004215768:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421576c:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421576f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215773:	48 8b 10             	mov    (%rax),%rdx
  8004215776:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421577a:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421577e:	48 01 d0             	add    %rdx,%rax
  8004215781:	48 89 c2             	mov    %rax,%rdx
  8004215784:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215788:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  800421578c:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215790:	75 2a                	jne    80042157bc <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  8004215792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215796:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421579a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421579e:	48 01 c2             	add    %rax,%rdx
  80042157a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042157a5:	48 8b 00             	mov    (%rax),%rax
  80042157a8:	48 29 c2             	sub    %rax,%rdx
  80042157ab:	48 89 d0             	mov    %rdx,%rax
  80042157ae:	48 8d 50 04          	lea    0x4(%rax),%rdx
  80042157b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042157b6:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042157ba:	eb 28                	jmp    80042157e4 <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  80042157bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042157c0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042157c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042157c8:	48 01 c2             	add    %rax,%rdx
  80042157cb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042157cf:	48 8b 00             	mov    (%rax),%rax
  80042157d2:	48 29 c2             	sub    %rax,%rdx
  80042157d5:	48 89 d0             	mov    %rdx,%rax
  80042157d8:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042157dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042157e0:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  80042157e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042157e8:	48 8b 10             	mov    (%rax),%rdx
  80042157eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042157ef:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042157f3:	48 01 c2             	add    %rax,%rdx
  80042157f6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042157fa:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  80042157fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215802:	c9                   	leaveq 
  8004215803:	c3                   	retq   

0000008004215804 <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004215804:	55                   	push   %rbp
  8004215805:	48 89 e5             	mov    %rsp,%rbp
  8004215808:	48 83 ec 20          	sub    $0x20,%rsp
  800421580c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215810:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  8004215814:	48 b8 a0 d6 4d 04 80 	movabs $0x80044dd6a0,%rax
  800421581b:	00 00 00 
  800421581e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004215822:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215826:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421582a:	48 85 c0             	test   %rax,%rax
  800421582d:	74 07                	je     8004215836 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  800421582f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215834:	eb 33                	jmp    8004215869 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  8004215836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421583a:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  800421583e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215842:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  8004215846:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421584a:	48 b9 40 be 6d 04 80 	movabs $0x80046dbe40,%rcx
  8004215851:	00 00 00 
  8004215854:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  8004215858:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421585c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215860:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  8004215864:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215869:	c9                   	leaveq 
  800421586a:	c3                   	retq   

000000800421586b <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  800421586b:	55                   	push   %rbp
  800421586c:	48 89 e5             	mov    %rsp,%rbp
  800421586f:	48 83 ec 60          	sub    $0x60,%rsp
  8004215873:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215877:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421587a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421587e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  8004215882:	48 b8 a0 46 23 04 80 	movabs $0x80042346a0,%rax
  8004215889:	00 00 00 
  800421588c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  8004215890:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004215897:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421589b:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421589f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  80042158a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042158a7:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042158ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042158af:	48 39 c2             	cmp    %rax,%rdx
  80042158b2:	0f 86 fe 01 00 00    	jbe    8004215ab6 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  80042158b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042158bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  80042158c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042158c4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042158c8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042158cc:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042158d0:	48 89 d1             	mov    %rdx,%rcx
  80042158d3:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042158d7:	ba 04 00 00 00       	mov    $0x4,%edx
  80042158dc:	48 89 cf             	mov    %rcx,%rdi
  80042158df:	ff d0                	callq  *%rax
  80042158e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  80042158e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042158ea:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042158ee:	75 2e                	jne    800421591e <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  80042158f0:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  80042158f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042158fb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042158ff:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215903:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215907:	48 89 d1             	mov    %rdx,%rcx
  800421590a:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421590e:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215913:	48 89 cf             	mov    %rcx,%rdi
  8004215916:	ff d0                	callq  *%rax
  8004215918:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421591c:	eb 07                	jmp    8004215925 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  800421591e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  8004215925:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215929:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421592d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215931:	48 29 c2             	sub    %rax,%rdx
  8004215934:	48 89 d0             	mov    %rdx,%rax
  8004215937:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421593b:	72 0d                	jb     800421594a <_dwarf_get_next_fde+0xdf>
  800421593d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215942:	75 10                	jne    8004215954 <_dwarf_get_next_fde+0xe9>
  8004215944:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215948:	75 0a                	jne    8004215954 <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  800421594a:	b8 12 00 00 00       	mov    $0x12,%eax
  800421594f:	e9 67 01 00 00       	jmpq   8004215abb <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  8004215954:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215958:	74 11                	je     800421596b <_dwarf_get_next_fde+0x100>
  800421595a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421595f:	75 0a                	jne    800421596b <_dwarf_get_next_fde+0x100>
			return(-1);
  8004215961:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215966:	e9 50 01 00 00       	jmpq   8004215abb <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  800421596b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421596f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215973:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215977:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421597b:	48 89 d1             	mov    %rdx,%rcx
  800421597e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215981:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215985:	48 89 cf             	mov    %rcx,%rdi
  8004215988:	ff d0                	callq  *%rax
  800421598a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  800421598e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215992:	74 79                	je     8004215a0d <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  8004215994:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004215999:	75 32                	jne    80042159cd <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800421599b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421599f:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042159a3:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042159a7:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042159ab:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042159af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042159b3:	49 89 f8             	mov    %rdi,%r8
  80042159b6:	48 89 c7             	mov    %rax,%rdi
  80042159b9:	48 b8 ec 4f 21 04 80 	movabs $0x8004214fec,%rax
  80042159c0:	00 00 00 
  80042159c3:	ff d0                	callq  *%rax
  80042159c5:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042159c8:	e9 c8 00 00 00       	jmpq   8004215a95 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  80042159cd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042159d1:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042159d5:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042159d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042159dd:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042159e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042159e5:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042159e9:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042159ed:	4d 89 c1             	mov    %r8,%r9
  80042159f0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  80042159f6:	48 89 c7             	mov    %rax,%rdi
  80042159f9:	48 b8 4f 54 21 04 80 	movabs $0x800421544f,%rax
  8004215a00:	00 00 00 
  8004215a03:	ff d0                	callq  *%rax
  8004215a05:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215a08:	e9 88 00 00 00       	jmpq   8004215a95 <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004215a0d:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215a11:	75 0b                	jne    8004215a1e <_dwarf_get_next_fde+0x1b3>
  8004215a13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215a18:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004215a1c:	74 0d                	je     8004215a2b <_dwarf_get_next_fde+0x1c0>
  8004215a1e:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004215a22:	75 36                	jne    8004215a5a <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  8004215a24:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  8004215a29:	75 2f                	jne    8004215a5a <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004215a2b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215a2f:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004215a33:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215a37:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004215a3b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004215a3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215a43:	49 89 f8             	mov    %rdi,%r8
  8004215a46:	48 89 c7             	mov    %rax,%rdi
  8004215a49:	48 b8 ec 4f 21 04 80 	movabs $0x8004214fec,%rax
  8004215a50:	00 00 00 
  8004215a53:	ff d0                	callq  *%rax
  8004215a55:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215a58:	eb 3b                	jmp    8004215a95 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  8004215a5a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215a5e:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215a62:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215a66:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215a6a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215a6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215a72:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215a76:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215a7a:	4d 89 c1             	mov    %r8,%r9
  8004215a7d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004215a83:	48 89 c7             	mov    %rax,%rdi
  8004215a86:	48 b8 4f 54 21 04 80 	movabs $0x800421544f,%rax
  8004215a8d:	00 00 00 
  8004215a90:	ff d0                	callq  *%rax
  8004215a92:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  8004215a95:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004215a99:	74 07                	je     8004215aa2 <_dwarf_get_next_fde+0x237>
			return(-1);
  8004215a9b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215aa0:	eb 19                	jmp    8004215abb <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  8004215aa2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215aa6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  8004215aaa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215aae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215ab2:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  8004215ab6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215abb:	c9                   	leaveq 
  8004215abc:	c3                   	retq   

0000008004215abd <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  8004215abd:	55                   	push   %rbp
  8004215abe:	48 89 e5             	mov    %rsp,%rbp
  8004215ac1:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004215ac5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215ac9:	89 f0                	mov    %esi,%eax
  8004215acb:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004215acf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215ad3:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215ad7:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  8004215adb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215adf:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  8004215ae3:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004215ae7:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004215aeb:	c9                   	leaveq 
  8004215aec:	c3                   	retq   

0000008004215aed <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004215aed:	55                   	push   %rbp
  8004215aee:	48 89 e5             	mov    %rsp,%rbp
  8004215af1:	48 83 ec 10          	sub    $0x10,%rsp
  8004215af5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004215af9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  8004215afd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215b02:	75 0a                	jne    8004215b0e <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004215b04:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215b09:	e9 85 00 00 00       	jmpq   8004215b93 <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004215b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b12:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215b16:	48 85 c0             	test   %rax,%rax
  8004215b19:	75 25                	jne    8004215b40 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  8004215b1b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004215b1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b23:	48 89 d6             	mov    %rdx,%rsi
  8004215b26:	48 89 c7             	mov    %rax,%rdi
  8004215b29:	48 b8 04 58 21 04 80 	movabs $0x8004215804,%rax
  8004215b30:	00 00 00 
  8004215b33:	ff d0                	callq  *%rax
  8004215b35:	85 c0                	test   %eax,%eax
  8004215b37:	74 07                	je     8004215b40 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  8004215b39:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215b3e:	eb 53                	jmp    8004215b93 <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  8004215b40:	48 bf a0 46 23 04 80 	movabs $0x80042346a0,%rdi
  8004215b47:	00 00 00 
  8004215b4a:	48 b8 b9 35 21 04 80 	movabs $0x80042135b9,%rax
  8004215b51:	00 00 00 
  8004215b54:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  8004215b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b5a:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  8004215b61:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004215b62:	48 b8 a0 46 23 04 80 	movabs $0x80042346a0,%rax
  8004215b69:	00 00 00 
  8004215b6c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b74:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  8004215b78:	48 b8 a0 46 23 04 80 	movabs $0x80042346a0,%rax
  8004215b7f:	00 00 00 
  8004215b82:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215b86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215b8a:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  8004215b8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215b93:	c9                   	leaveq 
  8004215b94:	c3                   	retq   

0000008004215b95 <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004215b95:	55                   	push   %rbp
  8004215b96:	48 89 e5             	mov    %rsp,%rbp
  8004215b99:	53                   	push   %rbx
  8004215b9a:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004215ba1:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004215ba5:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004215ba9:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215bb0:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  8004215bb7:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004215bbe:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  8004215bc5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215bc9:	48 83 c0 48          	add    $0x48,%rax
  8004215bcd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004215bd1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215bd8:	00 
  8004215bd9:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215be0:	00 
  8004215be1:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215be8:	00 
  8004215be9:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215bf0:	00 
  8004215bf1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215bf5:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215bf9:	0f b6 c0             	movzbl %al,%eax
  8004215bfc:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215bff:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215c06:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215c0d:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215c14:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215c1b:	e9 0a 05 00 00       	jmpq   800421612a <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  8004215c20:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215c27:	0f b6 00             	movzbl (%rax),%eax
  8004215c2a:	84 c0                	test   %al,%al
  8004215c2c:	0f 85 78 01 00 00    	jne    8004215daa <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  8004215c32:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215c39:	48 83 c0 01          	add    $0x1,%rax
  8004215c3d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  8004215c44:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215c4b:	48 89 c7             	mov    %rax,%rdi
  8004215c4e:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004215c55:	00 00 00 
  8004215c58:	ff d0                	callq  *%rax
  8004215c5a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  8004215c5e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215c65:	0f b6 00             	movzbl (%rax),%eax
  8004215c68:	0f b6 c0             	movzbl %al,%eax
  8004215c6b:	83 f8 02             	cmp    $0x2,%eax
  8004215c6e:	74 7a                	je     8004215cea <_dwarf_lineno_run_program+0x155>
  8004215c70:	83 f8 03             	cmp    $0x3,%eax
  8004215c73:	0f 84 b3 00 00 00    	je     8004215d2c <_dwarf_lineno_run_program+0x197>
  8004215c79:	83 f8 01             	cmp    $0x1,%eax
  8004215c7c:	0f 85 09 01 00 00    	jne    8004215d8b <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  8004215c82:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215c89:	48 83 c0 01          	add    $0x1,%rax
  8004215c8d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  8004215c94:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  8004215c9b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215ca2:	00 
  8004215ca3:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215caa:	00 
  8004215cab:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215cb2:	00 
  8004215cb3:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215cba:	00 
  8004215cbb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215cbf:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215cc3:	0f b6 c0             	movzbl %al,%eax
  8004215cc6:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215cc9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215cd0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215cd7:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215cde:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215ce5:	e9 bb 00 00 00       	jmpq   8004215da5 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004215cea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215cf1:	48 83 c0 01          	add    $0x1,%rax
  8004215cf5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004215cfc:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004215d03:	00 00 00 
  8004215d06:	48 8b 00             	mov    (%rax),%rax
  8004215d09:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215d0d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004215d11:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004215d15:	0f b6 ca             	movzbl %dl,%ecx
  8004215d18:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215d1f:	89 ce                	mov    %ecx,%esi
  8004215d21:	48 89 d7             	mov    %rdx,%rdi
  8004215d24:	ff d0                	callq  *%rax
  8004215d26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004215d2a:	eb 79                	jmp    8004215da5 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  8004215d2c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215d33:	48 83 c0 01          	add    $0x1,%rax
  8004215d37:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004215d3e:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004215d45:	00 00 00 
  8004215d48:	48 8b 08             	mov    (%rax),%rcx
  8004215d4b:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004215d52:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004215d59:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d5d:	49 89 c8             	mov    %rcx,%r8
  8004215d60:	48 89 d1             	mov    %rdx,%rcx
  8004215d63:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215d68:	48 89 c7             	mov    %rax,%rdi
  8004215d6b:	48 b8 4d 61 21 04 80 	movabs $0x800421614d,%rax
  8004215d72:	00 00 00 
  8004215d75:	ff d0                	callq  *%rax
  8004215d77:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004215d7a:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004215d7e:	74 09                	je     8004215d89 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  8004215d80:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004215d81:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004215d84:	e9 ba 03 00 00       	jmpq   8004216143 <_dwarf_lineno_run_program+0x5ae>
				break;
  8004215d89:	eb 1a                	jmp    8004215da5 <_dwarf_lineno_run_program+0x210>
				p += opsize;
  8004215d8b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004215d92:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215d96:	48 01 d0             	add    %rdx,%rax
  8004215d99:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215da0:	e9 85 03 00 00       	jmpq   800421612a <_dwarf_lineno_run_program+0x595>
  8004215da5:	e9 80 03 00 00       	jmpq   800421612a <_dwarf_lineno_run_program+0x595>
		} else if (*p > 0 && *p < li->li_opbase) {
  8004215daa:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215db1:	0f b6 00             	movzbl (%rax),%eax
  8004215db4:	84 c0                	test   %al,%al
  8004215db6:	0f 84 3c 02 00 00    	je     8004215ff8 <_dwarf_lineno_run_program+0x463>
  8004215dbc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215dc3:	0f b6 10             	movzbl (%rax),%edx
  8004215dc6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215dca:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215dce:	38 c2                	cmp    %al,%dl
  8004215dd0:	0f 83 22 02 00 00    	jae    8004215ff8 <_dwarf_lineno_run_program+0x463>
			switch (*p++) {
  8004215dd6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215ddd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215de1:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215de8:	0f b6 00             	movzbl (%rax),%eax
  8004215deb:	0f b6 c0             	movzbl %al,%eax
  8004215dee:	83 f8 0c             	cmp    $0xc,%eax
  8004215df1:	0f 87 fb 01 00 00    	ja     8004215ff2 <_dwarf_lineno_run_program+0x45d>
  8004215df7:	89 c0                	mov    %eax,%eax
  8004215df9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004215e00:	00 
  8004215e01:	48 b8 28 07 22 04 80 	movabs $0x8004220728,%rax
  8004215e08:	00 00 00 
  8004215e0b:	48 01 d0             	add    %rdx,%rax
  8004215e0e:	48 8b 00             	mov    (%rax),%rax
  8004215e11:	ff e0                	jmpq   *%rax
				APPEND_ROW;
  8004215e13:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215e1a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215e1e:	73 0a                	jae    8004215e2a <_dwarf_lineno_run_program+0x295>
  8004215e20:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215e25:	e9 19 03 00 00       	jmpq   8004216143 <_dwarf_lineno_run_program+0x5ae>
  8004215e2a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215e32:	48 89 10             	mov    %rdx,(%rax)
  8004215e35:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e39:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215e40:	00 
  8004215e41:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e45:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215e49:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215e4d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215e55:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215e59:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e5d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e61:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215e65:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e69:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215e6c:	89 50 28             	mov    %edx,0x28(%rax)
  8004215e6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e73:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215e76:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215e79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e7d:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215e80:	89 50 30             	mov    %edx,0x30(%rax)
  8004215e83:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215e87:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215e8e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215e92:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215e96:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004215e9d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004215ea4:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004215eab:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215eb2:	e9 3c 01 00 00       	jmpq   8004215ff3 <_dwarf_lineno_run_program+0x45e>
				address += _dwarf_decode_uleb128(&p) *
  8004215eb7:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215ebe:	48 89 c7             	mov    %rax,%rdi
  8004215ec1:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004215ec8:	00 00 00 
  8004215ecb:	ff d0                	callq  *%rax
					li->li_minlen;
  8004215ecd:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004215ed1:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				address += _dwarf_decode_uleb128(&p) *
  8004215ed5:	0f b6 d2             	movzbl %dl,%edx
  8004215ed8:	48 0f af c2          	imul   %rdx,%rax
  8004215edc:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215ee0:	e9 0e 01 00 00       	jmpq   8004215ff3 <_dwarf_lineno_run_program+0x45e>
				line += _dwarf_decode_sleb128(&p);
  8004215ee5:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215eec:	48 89 c7             	mov    %rax,%rdi
  8004215eef:	48 b8 9a 1d 21 04 80 	movabs $0x8004211d9a,%rax
  8004215ef6:	00 00 00 
  8004215ef9:	ff d0                	callq  *%rax
  8004215efb:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004215eff:	e9 ef 00 00 00       	jmpq   8004215ff3 <_dwarf_lineno_run_program+0x45e>
				file = _dwarf_decode_uleb128(&p);
  8004215f04:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215f0b:	48 89 c7             	mov    %rax,%rdi
  8004215f0e:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004215f15:	00 00 00 
  8004215f18:	ff d0                	callq  *%rax
  8004215f1a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004215f1e:	e9 d0 00 00 00       	jmpq   8004215ff3 <_dwarf_lineno_run_program+0x45e>
				column = _dwarf_decode_uleb128(&p);
  8004215f23:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215f2a:	48 89 c7             	mov    %rax,%rdi
  8004215f2d:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004215f34:	00 00 00 
  8004215f37:	ff d0                	callq  *%rax
  8004215f39:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004215f3d:	e9 b1 00 00 00       	jmpq   8004215ff3 <_dwarf_lineno_run_program+0x45e>
				is_stmt = !is_stmt;
  8004215f42:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004215f46:	0f 94 c0             	sete   %al
  8004215f49:	0f b6 c0             	movzbl %al,%eax
  8004215f4c:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004215f4f:	e9 9f 00 00 00       	jmpq   8004215ff3 <_dwarf_lineno_run_program+0x45e>
				basic_block = 1;
  8004215f54:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004215f5b:	e9 93 00 00 00       	jmpq   8004215ff3 <_dwarf_lineno_run_program+0x45e>
				address += ADDRESS(255);
  8004215f60:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215f64:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215f68:	0f b6 c0             	movzbl %al,%eax
  8004215f6b:	ba ff 00 00 00       	mov    $0xff,%edx
  8004215f70:	89 d1                	mov    %edx,%ecx
  8004215f72:	29 c1                	sub    %eax,%ecx
  8004215f74:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215f78:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215f7c:	0f b6 d8             	movzbl %al,%ebx
  8004215f7f:	89 c8                	mov    %ecx,%eax
  8004215f81:	99                   	cltd   
  8004215f82:	f7 fb                	idiv   %ebx
  8004215f84:	89 c2                	mov    %eax,%edx
  8004215f86:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215f8a:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215f8e:	0f b6 c0             	movzbl %al,%eax
  8004215f91:	0f af c2             	imul   %edx,%eax
  8004215f94:	48 98                	cltq   
  8004215f96:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215f9a:	eb 57                	jmp    8004215ff3 <_dwarf_lineno_run_program+0x45e>
				address += dbg->decode(&p, 2);
  8004215f9c:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004215fa3:	00 00 00 
  8004215fa6:	48 8b 00             	mov    (%rax),%rax
  8004215fa9:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215fad:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215fb4:	be 02 00 00 00       	mov    $0x2,%esi
  8004215fb9:	48 89 d7             	mov    %rdx,%rdi
  8004215fbc:	ff d0                	callq  *%rax
  8004215fbe:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215fc2:	eb 2f                	jmp    8004215ff3 <_dwarf_lineno_run_program+0x45e>
				prologue_end = 1;
  8004215fc4:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004215fcb:	eb 26                	jmp    8004215ff3 <_dwarf_lineno_run_program+0x45e>
				epilogue_begin = 1;
  8004215fcd:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004215fd4:	eb 1d                	jmp    8004215ff3 <_dwarf_lineno_run_program+0x45e>
				isa = _dwarf_decode_uleb128(&p);
  8004215fd6:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215fdd:	48 89 c7             	mov    %rax,%rdi
  8004215fe0:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  8004215fe7:	00 00 00 
  8004215fea:	ff d0                	callq  *%rax
  8004215fec:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004215ff0:	eb 01                	jmp    8004215ff3 <_dwarf_lineno_run_program+0x45e>
				break;
  8004215ff2:	90                   	nop
		} else {
  8004215ff3:	e9 32 01 00 00       	jmpq   800421612a <_dwarf_lineno_run_program+0x595>
			line += LINE(*p);
  8004215ff8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215ffc:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004216000:	0f be c8             	movsbl %al,%ecx
  8004216003:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421600a:	0f b6 00             	movzbl (%rax),%eax
  800421600d:	0f b6 d0             	movzbl %al,%edx
  8004216010:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216014:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004216018:	0f b6 c0             	movzbl %al,%eax
  800421601b:	29 c2                	sub    %eax,%edx
  800421601d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216021:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004216025:	0f b6 f0             	movzbl %al,%esi
  8004216028:	89 d0                	mov    %edx,%eax
  800421602a:	99                   	cltd   
  800421602b:	f7 fe                	idiv   %esi
  800421602d:	89 d0                	mov    %edx,%eax
  800421602f:	01 c8                	add    %ecx,%eax
  8004216031:	48 98                	cltq   
  8004216033:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004216037:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421603e:	0f b6 00             	movzbl (%rax),%eax
  8004216041:	0f b6 d0             	movzbl %al,%edx
  8004216044:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216048:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  800421604c:	0f b6 c0             	movzbl %al,%eax
  800421604f:	89 d1                	mov    %edx,%ecx
  8004216051:	29 c1                	sub    %eax,%ecx
  8004216053:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216057:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  800421605b:	0f b6 d8             	movzbl %al,%ebx
  800421605e:	89 c8                	mov    %ecx,%eax
  8004216060:	99                   	cltd   
  8004216061:	f7 fb                	idiv   %ebx
  8004216063:	89 c2                	mov    %eax,%edx
  8004216065:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216069:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  800421606d:	0f b6 c0             	movzbl %al,%eax
  8004216070:	0f af c2             	imul   %edx,%eax
  8004216073:	48 98                	cltq   
  8004216075:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004216079:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216080:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004216084:	73 0a                	jae    8004216090 <_dwarf_lineno_run_program+0x4fb>
  8004216086:	b8 00 00 00 00       	mov    $0x0,%eax
  800421608b:	e9 b3 00 00 00       	jmpq   8004216143 <_dwarf_lineno_run_program+0x5ae>
  8004216090:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216094:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216098:	48 89 10             	mov    %rdx,(%rax)
  800421609b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421609f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  80042160a6:	00 
  80042160a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042160ab:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042160af:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042160b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042160b7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042160bb:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042160bf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042160c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042160c7:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042160cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042160cf:	8b 55 c8             	mov    -0x38(%rbp),%edx
  80042160d2:	89 50 28             	mov    %edx,0x28(%rax)
  80042160d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042160d9:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042160dc:	89 50 2c             	mov    %edx,0x2c(%rax)
  80042160df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042160e3:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042160e6:	89 50 30             	mov    %edx,0x30(%rax)
  80042160e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042160ed:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  80042160f4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042160f8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042160fc:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004216103:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  800421610a:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004216111:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004216118:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421611f:	48 83 c0 01          	add    $0x1,%rax
  8004216123:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	while (p < pe) {
  800421612a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004216131:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004216138:	0f 82 e2 fa ff ff    	jb     8004215c20 <_dwarf_lineno_run_program+0x8b>
	return (DW_DLE_NONE);
  800421613e:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004216143:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  800421614a:	5b                   	pop    %rbx
  800421614b:	5d                   	pop    %rbp
  800421614c:	c3                   	retq   

000000800421614d <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  800421614d:	55                   	push   %rbp
  800421614e:	48 89 e5             	mov    %rsp,%rbp
  8004216151:	53                   	push   %rbx
  8004216152:	48 83 ec 48          	sub    $0x48,%rsp
  8004216156:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421615a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421615e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004216162:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004216166:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  800421616a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421616e:	48 8b 00             	mov    (%rax),%rax
  8004216171:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004216175:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216179:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  800421617d:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004216181:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216185:	48 89 c7             	mov    %rax,%rdi
  8004216188:	48 b8 04 0f 21 04 80 	movabs $0x8004210f04,%rax
  800421618f:	00 00 00 
  8004216192:	ff d0                	callq  *%rax
  8004216194:	48 98                	cltq   
  8004216196:	48 83 c0 01          	add    $0x1,%rax
  800421619a:	48 01 d8             	add    %rbx,%rax
  800421619d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  80042161a1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042161a5:	48 89 c7             	mov    %rax,%rdi
  80042161a8:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042161af:	00 00 00 
  80042161b2:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  80042161b4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042161b8:	48 89 c7             	mov    %rax,%rdi
  80042161bb:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042161c2:	00 00 00 
  80042161c5:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  80042161c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042161cb:	48 89 c7             	mov    %rax,%rdi
  80042161ce:	48 b8 2c 1e 21 04 80 	movabs $0x8004211e2c,%rax
  80042161d5:	00 00 00 
  80042161d8:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  80042161da:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042161de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161e2:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  80042161e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042161ea:	48 83 c4 48          	add    $0x48,%rsp
  80042161ee:	5b                   	pop    %rbx
  80042161ef:	5d                   	pop    %rbp
  80042161f0:	c3                   	retq   

00000080042161f1 <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  80042161f1:	55                   	push   %rbp
  80042161f2:	48 89 e5             	mov    %rsp,%rbp
  80042161f5:	53                   	push   %rbx
  80042161f6:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  80042161fd:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004216204:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  800421620b:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004216212:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004216219:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004216220:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004216227:	00 
  8004216228:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  800421622f:	00 
  8004216230:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004216237:	00 
  8004216238:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  800421623f:	00 
  8004216240:	48 b8 90 07 22 04 80 	movabs $0x8004220790,%rax
  8004216247:	00 00 00 
  800421624a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  800421624e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004216252:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004216256:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  800421625d:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004216264:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004216268:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421626d:	75 35                	jne    80042162a4 <_dwarf_lineno_init+0xb3>
  800421626f:	48 b9 9c 07 22 04 80 	movabs $0x800422079c,%rcx
  8004216276:	00 00 00 
  8004216279:	48 ba a7 07 22 04 80 	movabs $0x80042207a7,%rdx
  8004216280:	00 00 00 
  8004216283:	be 13 01 00 00       	mov    $0x113,%esi
  8004216288:	48 bf bc 07 22 04 80 	movabs $0x80042207bc,%rdi
  800421628f:	00 00 00 
  8004216292:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216297:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421629e:	00 00 00 
  80042162a1:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  80042162a4:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042162ab:	00 00 00 
  80042162ae:	48 8b 00             	mov    (%rax),%rax
  80042162b1:	48 85 c0             	test   %rax,%rax
  80042162b4:	75 35                	jne    80042162eb <_dwarf_lineno_init+0xfa>
  80042162b6:	48 b9 d3 07 22 04 80 	movabs $0x80042207d3,%rcx
  80042162bd:	00 00 00 
  80042162c0:	48 ba a7 07 22 04 80 	movabs $0x80042207a7,%rdx
  80042162c7:	00 00 00 
  80042162ca:	be 14 01 00 00       	mov    $0x114,%esi
  80042162cf:	48 bf bc 07 22 04 80 	movabs $0x80042207bc,%rdi
  80042162d6:	00 00 00 
  80042162d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042162de:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042162e5:	00 00 00 
  80042162e8:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  80042162eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042162ef:	48 89 c7             	mov    %rax,%rdi
  80042162f2:	48 b8 b9 35 21 04 80 	movabs $0x80042135b9,%rax
  80042162f9:	00 00 00 
  80042162fc:	ff d0                	callq  *%rax
  80042162fe:	85 c0                	test   %eax,%eax
  8004216300:	74 0a                	je     800421630c <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004216302:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216307:	e9 4f 04 00 00       	jmpq   800421675b <_dwarf_lineno_init+0x56a>

	li = linfo;
  800421630c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004216313:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004216317:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800421631e:	00 00 00 
  8004216321:	48 8b 00             	mov    (%rax),%rax
  8004216324:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216328:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421632c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216330:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216337:	ba 04 00 00 00       	mov    $0x4,%edx
  800421633c:	48 89 cf             	mov    %rcx,%rdi
  800421633f:	ff d0                	callq  *%rax
  8004216341:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  8004216345:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421634a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421634e:	75 37                	jne    8004216387 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004216350:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004216357:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800421635e:	00 00 00 
  8004216361:	48 8b 00             	mov    (%rax),%rax
  8004216364:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216368:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421636c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216370:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216377:	ba 08 00 00 00       	mov    $0x8,%edx
  800421637c:	48 89 cf             	mov    %rcx,%rdi
  800421637f:	ff d0                	callq  *%rax
  8004216381:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216385:	eb 07                	jmp    800421638e <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004216387:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  800421638e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216392:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216396:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800421639d:	48 29 c2             	sub    %rax,%rdx
  80042163a0:	48 89 d0             	mov    %rdx,%rax
  80042163a3:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042163a7:	73 0a                	jae    80042163b3 <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  80042163a9:	b8 0f 00 00 00       	mov    $0xf,%eax
  80042163ae:	e9 a8 03 00 00       	jmpq   800421675b <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  80042163b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042163b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042163bb:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  80042163be:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  80042163c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042163c9:	48 01 d0             	add    %rdx,%rax
  80042163cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  80042163d0:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042163d7:	00 00 00 
  80042163da:	48 8b 00             	mov    (%rax),%rax
  80042163dd:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042163e1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042163e5:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042163e9:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042163f0:	ba 02 00 00 00       	mov    $0x2,%edx
  80042163f5:	48 89 cf             	mov    %rcx,%rdi
  80042163f8:	ff d0                	callq  *%rax
  80042163fa:	89 c2                	mov    %eax,%edx
  80042163fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216400:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  8004216404:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800421640b:	00 00 00 
  800421640e:	48 8b 00             	mov    (%rax),%rax
  8004216411:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216415:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216419:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421641d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216420:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216427:	48 89 cf             	mov    %rcx,%rdi
  800421642a:	ff d0                	callq  *%rax
  800421642c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004216430:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  8004216434:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800421643b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  800421643f:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004216446:	00 00 00 
  8004216449:	48 8b 00             	mov    (%rax),%rax
  800421644c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216450:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216454:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216458:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421645f:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216464:	48 89 cf             	mov    %rcx,%rdi
  8004216467:	ff d0                	callq  *%rax
  8004216469:	89 c2                	mov    %eax,%edx
  800421646b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421646f:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004216472:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004216479:	00 00 00 
  800421647c:	48 8b 00             	mov    (%rax),%rax
  800421647f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216483:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216487:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421648b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216492:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216497:	48 89 cf             	mov    %rcx,%rdi
  800421649a:	ff d0                	callq  *%rax
  800421649c:	89 c2                	mov    %eax,%edx
  800421649e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042164a2:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  80042164a5:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042164ac:	00 00 00 
  80042164af:	48 8b 00             	mov    (%rax),%rax
  80042164b2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042164b6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042164ba:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042164be:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042164c5:	ba 01 00 00 00       	mov    $0x1,%edx
  80042164ca:	48 89 cf             	mov    %rcx,%rdi
  80042164cd:	ff d0                	callq  *%rax
  80042164cf:	89 c2                	mov    %eax,%edx
  80042164d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042164d5:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  80042164d8:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  80042164df:	00 00 00 
  80042164e2:	48 8b 00             	mov    (%rax),%rax
  80042164e5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042164e9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042164ed:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042164f1:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042164f8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042164fd:	48 89 cf             	mov    %rcx,%rdi
  8004216500:	ff d0                	callq  *%rax
  8004216502:	89 c2                	mov    %eax,%edx
  8004216504:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216508:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  800421650b:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  8004216512:	00 00 00 
  8004216515:	48 8b 00             	mov    (%rax),%rax
  8004216518:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421651c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216520:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216524:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421652b:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216530:	48 89 cf             	mov    %rcx,%rdi
  8004216533:	ff d0                	callq  *%rax
  8004216535:	89 c2                	mov    %eax,%edx
  8004216537:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421653b:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  800421653e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216542:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216546:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004216549:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421654d:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004216551:	0f b6 c0             	movzbl %al,%eax
  8004216554:	83 e8 01             	sub    $0x1,%eax
  8004216557:	39 c2                	cmp    %eax,%edx
  8004216559:	7d 0c                	jge    8004216567 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  800421655b:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216562:	e9 f1 01 00 00       	jmpq   8004216758 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004216567:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421656b:	48 bb 80 c4 6d 04 80 	movabs $0x80046dc480,%rbx
  8004216572:	00 00 00 
  8004216575:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004216579:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004216580:	eb 41                	jmp    80042165c3 <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004216582:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216586:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421658a:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421658d:	48 98                	cltq   
  800421658f:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004216593:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800421659a:	00 00 00 
  800421659d:	48 8b 00             	mov    (%rax),%rax
  80042165a0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042165a4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042165a8:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042165ac:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042165b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042165b8:	48 89 cf             	mov    %rcx,%rdi
  80042165bb:	ff d0                	callq  *%rax
  80042165bd:	88 03                	mov    %al,(%rbx)
	for (i = 1; i < li->li_opbase; i++)
  80042165bf:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  80042165c3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042165c7:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042165cb:	0f b6 c0             	movzbl %al,%eax
  80042165ce:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  80042165d1:	7f af                	jg     8004216582 <_dwarf_lineno_init+0x391>

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  80042165d3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042165da:	00 
	p = ds->ds_data + offset;
  80042165db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042165df:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042165e3:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042165ea:	48 01 d0             	add    %rdx,%rax
  80042165ed:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  80042165f4:	eb 1f                	jmp    8004216615 <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  80042165f6:	90                   	nop
  80042165f7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042165fe:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004216602:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004216609:	0f b6 00             	movzbl (%rax),%eax
  800421660c:	84 c0                	test   %al,%al
  800421660e:	75 e7                	jne    80042165f7 <_dwarf_lineno_init+0x406>
			;
		length++;
  8004216610:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	while (*p != '\0') {
  8004216615:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421661c:	0f b6 00             	movzbl (%rax),%eax
  800421661f:	84 c0                	test   %al,%al
  8004216621:	75 d3                	jne    80042165f6 <_dwarf_lineno_init+0x405>
	}
	li->li_inclen = length;
  8004216623:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216627:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421662b:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  800421662f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216636:	48 89 c2             	mov    %rax,%rdx
  8004216639:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421663d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216641:	48 29 c2             	sub    %rax,%rdx
  8004216644:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216648:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421664c:	48 98                	cltq   
  800421664e:	48 39 c2             	cmp    %rax,%rdx
  8004216651:	7e 0c                	jle    800421665f <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004216653:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  800421665a:	e9 f9 00 00 00       	jmpq   8004216758 <_dwarf_lineno_init+0x567>
	}
	p++;
  800421665f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216666:	48 83 c0 01          	add    $0x1,%rax
  800421666a:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004216671:	eb 3c                	jmp    80042166af <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  8004216673:	48 b8 88 46 23 04 80 	movabs $0x8004234688,%rax
  800421667a:	00 00 00 
  800421667d:	48 8b 08             	mov    (%rax),%rcx
  8004216680:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004216687:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  800421668e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216692:	49 89 c8             	mov    %rcx,%r8
  8004216695:	48 89 d1             	mov    %rdx,%rcx
  8004216698:	ba 00 00 00 00       	mov    $0x0,%edx
  800421669d:	48 89 c7             	mov    %rax,%rdi
  80042166a0:	48 b8 4d 61 21 04 80 	movabs $0x800421614d,%rax
  80042166a7:	00 00 00 
  80042166aa:	ff d0                	callq  *%rax
  80042166ac:	89 45 dc             	mov    %eax,-0x24(%rbp)
	while (*p != '\0') {
  80042166af:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042166b6:	0f b6 00             	movzbl (%rax),%eax
  80042166b9:	84 c0                	test   %al,%al
  80042166bb:	75 b6                	jne    8004216673 <_dwarf_lineno_init+0x482>
		//p++;
	}

	p++;
  80042166bd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042166c4:	48 83 c0 01          	add    $0x1,%rax
  80042166c8:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  80042166cf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042166d6:	48 89 c2             	mov    %rax,%rdx
  80042166d9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042166dd:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042166e1:	48 29 c2             	sub    %rax,%rdx
  80042166e4:	48 89 d0             	mov    %rdx,%rax
  80042166e7:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  80042166eb:	48 89 c2             	mov    %rax,%rdx
  80042166ee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042166f2:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042166f6:	48 39 c2             	cmp    %rax,%rdx
  80042166f9:	74 09                	je     8004216704 <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042166fb:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216702:	eb 54                	jmp    8004216758 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  8004216704:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216708:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421670c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216710:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004216714:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421671b:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  8004216722:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  8004216729:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800421672d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216731:	4d 89 c1             	mov    %r8,%r9
  8004216734:	49 89 f8             	mov    %rdi,%r8
  8004216737:	48 89 c7             	mov    %rax,%rdi
  800421673a:	48 b8 95 5b 21 04 80 	movabs $0x8004215b95,%rax
  8004216741:	00 00 00 
  8004216744:	ff d0                	callq  *%rax
  8004216746:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  8004216749:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421674d:	74 02                	je     8004216751 <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  800421674f:	eb 07                	jmp    8004216758 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  8004216751:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216756:	eb 03                	jmp    800421675b <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  8004216758:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  800421675b:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004216762:	5b                   	pop    %rbx
  8004216763:	5d                   	pop    %rbp
  8004216764:	c3                   	retq   

0000008004216765 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004216765:	55                   	push   %rbp
  8004216766:	48 89 e5             	mov    %rsp,%rbp
  8004216769:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004216770:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004216777:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  800421677e:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004216785:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  800421678c:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  8004216793:	00 
  8004216794:	75 35                	jne    80042167cb <dwarf_srclines+0x66>
  8004216796:	48 b9 df 07 22 04 80 	movabs $0x80042207df,%rcx
  800421679d:	00 00 00 
  80042167a0:	48 ba a7 07 22 04 80 	movabs $0x80042207a7,%rdx
  80042167a7:	00 00 00 
  80042167aa:	be 9a 01 00 00       	mov    $0x19a,%esi
  80042167af:	48 bf bc 07 22 04 80 	movabs $0x80042207bc,%rdi
  80042167b6:	00 00 00 
  80042167b9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167be:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042167c5:	00 00 00 
  80042167c8:	41 ff d0             	callq  *%r8
	assert(linebuf);
  80042167cb:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  80042167d2:	00 
  80042167d3:	75 35                	jne    800421680a <dwarf_srclines+0xa5>
  80042167d5:	48 b9 e3 07 22 04 80 	movabs $0x80042207e3,%rcx
  80042167dc:	00 00 00 
  80042167df:	48 ba a7 07 22 04 80 	movabs $0x80042207a7,%rdx
  80042167e6:	00 00 00 
  80042167e9:	be 9b 01 00 00       	mov    $0x19b,%esi
  80042167ee:	48 bf bc 07 22 04 80 	movabs $0x80042207bc,%rdi
  80042167f5:	00 00 00 
  80042167f8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167fd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216804:	00 00 00 
  8004216807:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  800421680a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004216811:	ba 88 00 00 00       	mov    $0x88,%edx
  8004216816:	be 00 00 00 00       	mov    $0x0,%esi
  800421681b:	48 89 c7             	mov    %rax,%rdi
  800421681e:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004216825:	00 00 00 
  8004216828:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  800421682a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216831:	be 10 00 00 00       	mov    $0x10,%esi
  8004216836:	48 89 c7             	mov    %rax,%rdi
  8004216839:	48 b8 3e 31 21 04 80 	movabs $0x800421313e,%rax
  8004216840:	00 00 00 
  8004216843:	ff d0                	callq  *%rax
  8004216845:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216849:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421684e:	75 0a                	jne    800421685a <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004216850:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004216855:	e9 84 00 00 00       	jmpq   80042168de <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  800421685a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421685e:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004216862:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004216869:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  8004216870:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004216877:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421687e:	49 89 f8             	mov    %rdi,%r8
  8004216881:	48 89 c7             	mov    %rax,%rdi
  8004216884:	48 b8 f1 61 21 04 80 	movabs $0x80042161f1,%rax
  800421688b:	00 00 00 
  800421688e:	ff d0                	callq  *%rax
  8004216890:	85 c0                	test   %eax,%eax
  8004216892:	74 07                	je     800421689b <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  8004216894:	b8 01 00 00 00       	mov    $0x1,%eax
  8004216899:	eb 43                	jmp    80042168de <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  800421689b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042168a2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042168a6:	48 89 10             	mov    %rdx,(%rax)
  80042168a9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042168ad:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042168b1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042168b5:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042168b9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042168bd:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042168c1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042168c5:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042168c9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042168cd:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042168d1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042168d5:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  80042168d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042168de:	c9                   	leaveq 
  80042168df:	c3                   	retq   

00000080042168e0 <_dwarf_find_section>:
  80042168e0:	55                   	push   %rbp
  80042168e1:	48 89 e5             	mov    %rsp,%rbp
  80042168e4:	48 83 ec 20          	sub    $0x20,%rsp
  80042168e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042168ec:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042168f3:	00 
  80042168f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042168fb:	eb 57                	jmp    8004216954 <_dwarf_find_section+0x74>
  80042168fd:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216904:	00 00 00 
  8004216907:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421690a:	48 63 d2             	movslq %edx,%rdx
  800421690d:	48 c1 e2 05          	shl    $0x5,%rdx
  8004216911:	48 01 d0             	add    %rdx,%rax
  8004216914:	48 8b 00             	mov    (%rax),%rax
  8004216917:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421691b:	48 89 d6             	mov    %rdx,%rsi
  800421691e:	48 89 c7             	mov    %rax,%rdi
  8004216921:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216928:	00 00 00 
  800421692b:	ff d0                	callq  *%rax
  800421692d:	85 c0                	test   %eax,%eax
  800421692f:	75 1f                	jne    8004216950 <_dwarf_find_section+0x70>
  8004216931:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216934:	48 98                	cltq   
  8004216936:	48 c1 e0 05          	shl    $0x5,%rax
  800421693a:	48 89 c2             	mov    %rax,%rdx
  800421693d:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216944:	00 00 00 
  8004216947:	48 01 d0             	add    %rdx,%rax
  800421694a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421694e:	eb 0a                	jmp    800421695a <_dwarf_find_section+0x7a>
  8004216950:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216954:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004216958:	7e a3                	jle    80042168fd <_dwarf_find_section+0x1d>
  800421695a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421695e:	c9                   	leaveq 
  800421695f:	c3                   	retq   

0000008004216960 <find_debug_sections>:
  8004216960:	55                   	push   %rbp
  8004216961:	48 89 e5             	mov    %rsp,%rbp
  8004216964:	48 83 ec 40          	sub    $0x40,%rsp
  8004216968:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421696c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216970:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216974:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  800421697b:	00 
  800421697c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216980:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216984:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216988:	48 01 d0             	add    %rdx,%rax
  800421698b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421698f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216993:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216997:	0f b7 c0             	movzwl %ax,%eax
  800421699a:	48 c1 e0 06          	shl    $0x6,%rax
  800421699e:	48 89 c2             	mov    %rax,%rdx
  80042169a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042169a5:	48 01 d0             	add    %rdx,%rax
  80042169a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042169ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042169b0:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042169b4:	0f b7 c0             	movzwl %ax,%eax
  80042169b7:	48 c1 e0 06          	shl    $0x6,%rax
  80042169bb:	48 89 c2             	mov    %rax,%rdx
  80042169be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042169c2:	48 01 d0             	add    %rdx,%rax
  80042169c5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042169c9:	e9 4b 02 00 00       	jmpq   8004216c19 <find_debug_sections+0x2b9>
  80042169ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042169d2:	8b 00                	mov    (%rax),%eax
  80042169d4:	89 c2                	mov    %eax,%edx
  80042169d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042169da:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042169de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042169e2:	48 01 c8             	add    %rcx,%rax
  80042169e5:	48 01 d0             	add    %rdx,%rax
  80042169e8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042169ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042169f0:	48 be eb 07 22 04 80 	movabs $0x80042207eb,%rsi
  80042169f7:	00 00 00 
  80042169fa:	48 89 c7             	mov    %rax,%rdi
  80042169fd:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216a04:	00 00 00 
  8004216a07:	ff d0                	callq  *%rax
  8004216a09:	85 c0                	test   %eax,%eax
  8004216a0b:	75 4b                	jne    8004216a58 <find_debug_sections+0xf8>
  8004216a0d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216a11:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216a18:	00 00 00 
  8004216a1b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216a1f:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216a26:	00 00 00 
  8004216a29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216a2d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216a31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216a35:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216a39:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216a40:	00 00 00 
  8004216a43:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216a4b:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216a4f:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216a53:	e9 bc 01 00 00       	jmpq   8004216c14 <find_debug_sections+0x2b4>
  8004216a58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216a5c:	48 be f7 07 22 04 80 	movabs $0x80042207f7,%rsi
  8004216a63:	00 00 00 
  8004216a66:	48 89 c7             	mov    %rax,%rdi
  8004216a69:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216a70:	00 00 00 
  8004216a73:	ff d0                	callq  *%rax
  8004216a75:	85 c0                	test   %eax,%eax
  8004216a77:	75 4b                	jne    8004216ac4 <find_debug_sections+0x164>
  8004216a79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216a7d:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216a84:	00 00 00 
  8004216a87:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216a8b:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216a92:	00 00 00 
  8004216a95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216a99:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004216a9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216aa1:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216aa5:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216aac:	00 00 00 
  8004216aaf:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216ab3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216ab7:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216abb:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216abf:	e9 50 01 00 00       	jmpq   8004216c14 <find_debug_sections+0x2b4>
  8004216ac4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ac8:	48 be 0f 08 22 04 80 	movabs $0x800422080f,%rsi
  8004216acf:	00 00 00 
  8004216ad2:	48 89 c7             	mov    %rax,%rdi
  8004216ad5:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216adc:	00 00 00 
  8004216adf:	ff d0                	callq  *%rax
  8004216ae1:	85 c0                	test   %eax,%eax
  8004216ae3:	75 4b                	jne    8004216b30 <find_debug_sections+0x1d0>
  8004216ae5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216ae9:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216af0:	00 00 00 
  8004216af3:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216af7:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216afe:	00 00 00 
  8004216b01:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216b05:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216b09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216b0d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216b11:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216b18:	00 00 00 
  8004216b1b:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216b1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216b23:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216b27:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216b2b:	e9 e4 00 00 00       	jmpq   8004216c14 <find_debug_sections+0x2b4>
  8004216b30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b34:	48 be 05 08 22 04 80 	movabs $0x8004220805,%rsi
  8004216b3b:	00 00 00 
  8004216b3e:	48 89 c7             	mov    %rax,%rdi
  8004216b41:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216b48:	00 00 00 
  8004216b4b:	ff d0                	callq  *%rax
  8004216b4d:	85 c0                	test   %eax,%eax
  8004216b4f:	75 53                	jne    8004216ba4 <find_debug_sections+0x244>
  8004216b51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216b55:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216b59:	48 89 c2             	mov    %rax,%rdx
  8004216b5c:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216b63:	00 00 00 
  8004216b66:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216b6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216b6e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004216b72:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216b79:	00 00 00 
  8004216b7c:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216b80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216b84:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216b88:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216b8f:	00 00 00 
  8004216b92:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216b9a:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216b9e:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216ba2:	eb 70                	jmp    8004216c14 <find_debug_sections+0x2b4>
  8004216ba4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ba8:	48 be 1b 08 22 04 80 	movabs $0x800422081b,%rsi
  8004216baf:	00 00 00 
  8004216bb2:	48 89 c7             	mov    %rax,%rdi
  8004216bb5:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216bbc:	00 00 00 
  8004216bbf:	ff d0                	callq  *%rax
  8004216bc1:	85 c0                	test   %eax,%eax
  8004216bc3:	75 4f                	jne    8004216c14 <find_debug_sections+0x2b4>
  8004216bc5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216bc9:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216bd0:	00 00 00 
  8004216bd3:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216bda:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216be1:	00 00 00 
  8004216be4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216be8:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216bef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216bf3:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216bf7:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216bfe:	00 00 00 
  8004216c01:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216c08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216c0c:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216c10:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216c14:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004216c19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216c1d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004216c21:	0f 82 a7 fd ff ff    	jb     80042169ce <find_debug_sections+0x6e>
  8004216c27:	c9                   	leaveq 
  8004216c28:	c3                   	retq   

0000008004216c29 <read_section_headers>:
  8004216c29:	55                   	push   %rbp
  8004216c2a:	48 89 e5             	mov    %rsp,%rbp
  8004216c2d:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  8004216c34:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004216c3b:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  8004216c42:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004216c49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c4e:	ba 14 00 00 00       	mov    $0x14,%edx
  8004216c53:	48 89 f7             	mov    %rsi,%rdi
  8004216c56:	48 89 d1             	mov    %rdx,%rcx
  8004216c59:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  8004216c5c:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004216c63:	00 
  8004216c64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216c68:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004216c6f:	48 01 d0             	add    %rdx,%rax
  8004216c72:	48 83 e8 01          	sub    $0x1,%rax
  8004216c76:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216c7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216c7e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004216c83:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004216c87:	48 89 d0             	mov    %rdx,%rax
  8004216c8a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216c8e:	48 29 c2             	sub    %rax,%rdx
  8004216c91:	48 89 d0             	mov    %rdx,%rax
  8004216c94:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216c98:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004216c9f:	00 00 00 00 
  8004216ca3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216ca7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216cab:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004216cb2:	00 
  8004216cb3:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004216cba:	00 00 00 
  8004216cbd:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004216cc4:	75 11                	jne    8004216cd7 <read_section_headers+0xae>
  8004216cc6:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216ccd:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216cd1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216cd5:	eb 26                	jmp    8004216cfd <read_section_headers+0xd4>
  8004216cd7:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216cde:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216ce2:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216ce9:	48 01 c2             	add    %rax,%rdx
  8004216cec:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004216cf3:	ff ff ff 
  8004216cf6:	48 01 d0             	add    %rdx,%rax
  8004216cf9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216cfd:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216d04:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216d08:	0f b7 c0             	movzwl %ax,%eax
  8004216d0b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004216d0e:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216d15:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004216d19:	0f b7 c0             	movzwl %ax,%eax
  8004216d1c:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004216d1f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216d26:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004216d2a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216d2d:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004216d31:	48 63 f0             	movslq %eax,%rsi
  8004216d34:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216d38:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216d3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216d43:	48 89 c7             	mov    %rax,%rdi
  8004216d46:	48 b8 68 73 21 04 80 	movabs $0x8004217368,%rax
  8004216d4d:	00 00 00 
  8004216d50:	ff d0                	callq  *%rax
  8004216d52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216d56:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004216d5a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216d5e:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216d64:	48 89 c2             	mov    %rax,%rdx
  8004216d67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216d6b:	48 29 d0             	sub    %rdx,%rax
  8004216d6e:	48 89 c2             	mov    %rax,%rdx
  8004216d71:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216d75:	48 01 d0             	add    %rdx,%rax
  8004216d78:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004216d7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216d83:	eb 24                	jmp    8004216da9 <read_section_headers+0x180>
  8004216d85:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d88:	48 98                	cltq   
  8004216d8a:	48 c1 e0 06          	shl    $0x6,%rax
  8004216d8e:	48 89 c2             	mov    %rax,%rdx
  8004216d91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216d95:	48 01 c2             	add    %rax,%rdx
  8004216d98:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d9b:	48 98                	cltq   
  8004216d9d:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004216da4:	ff 
  8004216da5:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216da9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216dac:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216daf:	7c d4                	jl     8004216d85 <read_section_headers+0x15c>
  8004216db1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216db5:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216db9:	0f b7 c0             	movzwl %ax,%eax
  8004216dbc:	48 98                	cltq   
  8004216dbe:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216dc5:	ff 
  8004216dc6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004216dca:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216dd1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216dd5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216dd9:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216ddd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216de1:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216de5:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216dec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216df0:	48 01 c8             	add    %rcx,%rax
  8004216df3:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216dfa:	48 89 c7             	mov    %rax,%rdi
  8004216dfd:	48 b8 68 73 21 04 80 	movabs $0x8004217368,%rax
  8004216e04:	00 00 00 
  8004216e07:	ff d0                	callq  *%rax
  8004216e09:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216e0d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216e11:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216e15:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216e19:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004216e1d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004216e21:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216e27:	48 29 c2             	sub    %rax,%rdx
  8004216e2a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216e2e:	48 01 c2             	add    %rax,%rdx
  8004216e31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216e35:	48 01 d0             	add    %rdx,%rax
  8004216e38:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004216e3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216e43:	e9 04 05 00 00       	jmpq   800421734c <read_section_headers+0x723>
  8004216e48:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e4b:	48 98                	cltq   
  8004216e4d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e54:	ff 
  8004216e55:	8b 00                	mov    (%rax),%eax
  8004216e57:	89 c2                	mov    %eax,%edx
  8004216e59:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004216e5d:	48 01 d0             	add    %rdx,%rax
  8004216e60:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004216e64:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216e6b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216e70:	48 85 c0             	test   %rax,%rax
  8004216e73:	74 35                	je     8004216eaa <read_section_headers+0x281>
  8004216e75:	48 b9 26 08 22 04 80 	movabs $0x8004220826,%rcx
  8004216e7c:	00 00 00 
  8004216e7f:	48 ba 3f 08 22 04 80 	movabs $0x800422083f,%rdx
  8004216e86:	00 00 00 
  8004216e89:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004216e8e:	48 bf 54 08 22 04 80 	movabs $0x8004220854,%rdi
  8004216e95:	00 00 00 
  8004216e98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216e9d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216ea4:	00 00 00 
  8004216ea7:	41 ff d0             	callq  *%r8
  8004216eaa:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216eb1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216eb5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216eb9:	48 be eb 07 22 04 80 	movabs $0x80042207eb,%rsi
  8004216ec0:	00 00 00 
  8004216ec3:	48 89 c7             	mov    %rax,%rdi
  8004216ec6:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216ecd:	00 00 00 
  8004216ed0:	ff d0                	callq  *%rax
  8004216ed2:	85 c0                	test   %eax,%eax
  8004216ed4:	0f 85 d8 00 00 00    	jne    8004216fb2 <read_section_headers+0x389>
  8004216eda:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216edd:	48 98                	cltq   
  8004216edf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ee6:	ff 
  8004216ee7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216eeb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216eee:	48 98                	cltq   
  8004216ef0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ef7:	ff 
  8004216ef8:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216efc:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216f03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216f07:	48 01 c8             	add    %rcx,%rax
  8004216f0a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216f11:	48 89 c7             	mov    %rax,%rdi
  8004216f14:	48 b8 68 73 21 04 80 	movabs $0x8004217368,%rax
  8004216f1b:	00 00 00 
  8004216f1e:	ff d0                	callq  *%rax
  8004216f20:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f23:	48 98                	cltq   
  8004216f25:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216f2c:	ff 
  8004216f2d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216f31:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f34:	48 98                	cltq   
  8004216f36:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216f3d:	ff 
  8004216f3e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216f42:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004216f46:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216f4a:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216f50:	48 29 c2             	sub    %rax,%rdx
  8004216f53:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216f57:	48 01 c2             	add    %rax,%rdx
  8004216f5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216f5e:	48 01 c2             	add    %rax,%rdx
  8004216f61:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216f68:	00 00 00 
  8004216f6b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216f6f:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216f76:	00 00 00 
  8004216f79:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216f7d:	48 89 c2             	mov    %rax,%rdx
  8004216f80:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216f87:	00 00 00 
  8004216f8a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216f8e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f91:	48 98                	cltq   
  8004216f93:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216f9a:	ff 
  8004216f9b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216f9f:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004216fa6:	00 00 00 
  8004216fa9:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216fad:	e9 96 03 00 00       	jmpq   8004217348 <read_section_headers+0x71f>
  8004216fb2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216fb6:	48 be f7 07 22 04 80 	movabs $0x80042207f7,%rsi
  8004216fbd:	00 00 00 
  8004216fc0:	48 89 c7             	mov    %rax,%rdi
  8004216fc3:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004216fca:	00 00 00 
  8004216fcd:	ff d0                	callq  *%rax
  8004216fcf:	85 c0                	test   %eax,%eax
  8004216fd1:	0f 85 de 00 00 00    	jne    80042170b5 <read_section_headers+0x48c>
  8004216fd7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216fda:	48 98                	cltq   
  8004216fdc:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216fe3:	ff 
  8004216fe4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216fe8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216feb:	48 98                	cltq   
  8004216fed:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ff4:	ff 
  8004216ff5:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216ff9:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004217000:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217004:	48 01 c8             	add    %rcx,%rax
  8004217007:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421700e:	48 89 c7             	mov    %rax,%rdi
  8004217011:	48 b8 68 73 21 04 80 	movabs $0x8004217368,%rax
  8004217018:	00 00 00 
  800421701b:	ff d0                	callq  *%rax
  800421701d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217020:	48 98                	cltq   
  8004217022:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004217029:	ff 
  800421702a:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421702e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217031:	48 98                	cltq   
  8004217033:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421703a:	ff 
  800421703b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421703f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004217046:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421704d:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004217053:	48 29 c2             	sub    %rax,%rdx
  8004217056:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421705a:	48 01 c2             	add    %rax,%rdx
  800421705d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217061:	48 01 c2             	add    %rax,%rdx
  8004217064:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  800421706b:	00 00 00 
  800421706e:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004217072:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004217079:	00 00 00 
  800421707c:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004217080:	48 89 c2             	mov    %rax,%rdx
  8004217083:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  800421708a:	00 00 00 
  800421708d:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004217091:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217094:	48 98                	cltq   
  8004217096:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421709d:	ff 
  800421709e:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042170a2:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  80042170a9:	00 00 00 
  80042170ac:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042170b0:	e9 93 02 00 00       	jmpq   8004217348 <read_section_headers+0x71f>
  80042170b5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042170b9:	48 be 0f 08 22 04 80 	movabs $0x800422080f,%rsi
  80042170c0:	00 00 00 
  80042170c3:	48 89 c7             	mov    %rax,%rdi
  80042170c6:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  80042170cd:	00 00 00 
  80042170d0:	ff d0                	callq  *%rax
  80042170d2:	85 c0                	test   %eax,%eax
  80042170d4:	0f 85 de 00 00 00    	jne    80042171b8 <read_section_headers+0x58f>
  80042170da:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042170dd:	48 98                	cltq   
  80042170df:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042170e6:	ff 
  80042170e7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042170eb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042170ee:	48 98                	cltq   
  80042170f0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042170f7:	ff 
  80042170f8:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042170fc:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004217103:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217107:	48 01 c8             	add    %rcx,%rax
  800421710a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004217111:	48 89 c7             	mov    %rax,%rdi
  8004217114:	48 b8 68 73 21 04 80 	movabs $0x8004217368,%rax
  800421711b:	00 00 00 
  800421711e:	ff d0                	callq  *%rax
  8004217120:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217123:	48 98                	cltq   
  8004217125:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421712c:	ff 
  800421712d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004217131:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217134:	48 98                	cltq   
  8004217136:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421713d:	ff 
  800421713e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004217142:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004217149:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004217150:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004217156:	48 29 c2             	sub    %rax,%rdx
  8004217159:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421715d:	48 01 c2             	add    %rax,%rdx
  8004217160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217164:	48 01 c2             	add    %rax,%rdx
  8004217167:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  800421716e:	00 00 00 
  8004217171:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004217175:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  800421717c:	00 00 00 
  800421717f:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004217183:	48 89 c2             	mov    %rax,%rdx
  8004217186:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  800421718d:	00 00 00 
  8004217190:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004217194:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217197:	48 98                	cltq   
  8004217199:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042171a0:	ff 
  80042171a1:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042171a5:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  80042171ac:	00 00 00 
  80042171af:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042171b3:	e9 90 01 00 00       	jmpq   8004217348 <read_section_headers+0x71f>
  80042171b8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042171bc:	48 be 05 08 22 04 80 	movabs $0x8004220805,%rsi
  80042171c3:	00 00 00 
  80042171c6:	48 89 c7             	mov    %rax,%rdi
  80042171c9:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  80042171d0:	00 00 00 
  80042171d3:	ff d0                	callq  *%rax
  80042171d5:	85 c0                	test   %eax,%eax
  80042171d7:	75 65                	jne    800421723e <read_section_headers+0x615>
  80042171d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042171dc:	48 98                	cltq   
  80042171de:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042171e5:	ff 
  80042171e6:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042171ea:	48 89 c2             	mov    %rax,%rdx
  80042171ed:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  80042171f4:	00 00 00 
  80042171f7:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042171fb:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004217202:	00 00 00 
  8004217205:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004217209:	48 89 c2             	mov    %rax,%rdx
  800421720c:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004217213:	00 00 00 
  8004217216:	48 89 50 50          	mov    %rdx,0x50(%rax)
  800421721a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421721d:	48 98                	cltq   
  800421721f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004217226:	ff 
  8004217227:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421722b:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004217232:	00 00 00 
  8004217235:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004217239:	e9 0a 01 00 00       	jmpq   8004217348 <read_section_headers+0x71f>
  800421723e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004217242:	48 be 1b 08 22 04 80 	movabs $0x800422081b,%rsi
  8004217249:	00 00 00 
  800421724c:	48 89 c7             	mov    %rax,%rdi
  800421724f:	48 b8 d2 10 21 04 80 	movabs $0x80042110d2,%rax
  8004217256:	00 00 00 
  8004217259:	ff d0                	callq  *%rax
  800421725b:	85 c0                	test   %eax,%eax
  800421725d:	0f 85 e5 00 00 00    	jne    8004217348 <read_section_headers+0x71f>
  8004217263:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217266:	48 98                	cltq   
  8004217268:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421726f:	ff 
  8004217270:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004217274:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217277:	48 98                	cltq   
  8004217279:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004217280:	ff 
  8004217281:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004217285:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421728c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217290:	48 01 c8             	add    %rcx,%rax
  8004217293:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421729a:	48 89 c7             	mov    %rax,%rdi
  800421729d:	48 b8 68 73 21 04 80 	movabs $0x8004217368,%rax
  80042172a4:	00 00 00 
  80042172a7:	ff d0                	callq  *%rax
  80042172a9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042172ac:	48 98                	cltq   
  80042172ae:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042172b5:	ff 
  80042172b6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042172ba:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042172bd:	48 98                	cltq   
  80042172bf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042172c6:	ff 
  80042172c7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042172cb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  80042172d2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042172d9:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042172df:	48 29 c2             	sub    %rax,%rdx
  80042172e2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042172e6:	48 01 c2             	add    %rax,%rdx
  80042172e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042172ed:	48 01 c2             	add    %rax,%rdx
  80042172f0:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  80042172f7:	00 00 00 
  80042172fa:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004217301:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  8004217308:	00 00 00 
  800421730b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004217312:	48 89 c2             	mov    %rax,%rdx
  8004217315:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  800421731c:	00 00 00 
  800421731f:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004217326:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217329:	48 98                	cltq   
  800421732b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004217332:	ff 
  8004217333:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004217337:	48 b8 c0 46 23 04 80 	movabs $0x80042346c0,%rax
  800421733e:	00 00 00 
  8004217341:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004217348:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421734c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421734f:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004217352:	0f 8c f0 fa ff ff    	jl     8004216e48 <read_section_headers+0x21f>
  8004217358:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421735c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004217363:	48 01 d0             	add    %rdx,%rax
  8004217366:	c9                   	leaveq 
  8004217367:	c3                   	retq   

0000008004217368 <readseg>:
  8004217368:	55                   	push   %rbp
  8004217369:	48 89 e5             	mov    %rsp,%rbp
  800421736c:	48 83 ec 30          	sub    $0x30,%rsp
  8004217370:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217374:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004217378:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421737c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004217380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217384:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217388:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421738c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004217390:	48 01 d0             	add    %rdx,%rax
  8004217393:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421739b:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042173a0:	48 85 c0             	test   %rax,%rax
  80042173a3:	74 35                	je     80042173da <readseg+0x72>
  80042173a5:	48 b9 65 08 22 04 80 	movabs $0x8004220865,%rcx
  80042173ac:	00 00 00 
  80042173af:	48 ba 3f 08 22 04 80 	movabs $0x800422083f,%rdx
  80042173b6:	00 00 00 
  80042173b9:	be c4 00 00 00       	mov    $0xc4,%esi
  80042173be:	48 bf 54 08 22 04 80 	movabs $0x8004220854,%rdi
  80042173c5:	00 00 00 
  80042173c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173cd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042173d4:	00 00 00 
  80042173d7:	41 ff d0             	callq  *%r8
  80042173da:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  80042173e1:	ff 
  80042173e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042173e6:	48 c1 e8 09          	shr    $0x9,%rax
  80042173ea:	48 83 c0 01          	add    $0x1,%rax
  80042173ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042173f2:	eb 3c                	jmp    8004217430 <readseg+0xc8>
  80042173f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173f8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042173fc:	48 89 d6             	mov    %rdx,%rsi
  80042173ff:	48 89 c7             	mov    %rax,%rdi
  8004217402:	48 b8 f8 74 21 04 80 	movabs $0x80042174f8,%rax
  8004217409:	00 00 00 
  800421740c:	ff d0                	callq  *%rax
  800421740e:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004217415:	00 
  8004217416:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421741a:	48 8b 00             	mov    (%rax),%rax
  800421741d:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004217424:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217428:	48 89 10             	mov    %rdx,(%rax)
  800421742b:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004217430:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217434:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004217438:	72 ba                	jb     80042173f4 <readseg+0x8c>
  800421743a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421743e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004217443:	48 89 c2             	mov    %rax,%rdx
  8004217446:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421744a:	48 01 d0             	add    %rdx,%rax
  800421744d:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  8004217453:	76 2f                	jbe    8004217484 <readseg+0x11c>
  8004217455:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217459:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421745d:	48 89 d6             	mov    %rdx,%rsi
  8004217460:	48 89 c7             	mov    %rax,%rdi
  8004217463:	48 b8 f8 74 21 04 80 	movabs $0x80042174f8,%rax
  800421746a:	00 00 00 
  800421746d:	ff d0                	callq  *%rax
  800421746f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217473:	48 8b 00             	mov    (%rax),%rax
  8004217476:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  800421747d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217481:	48 89 10             	mov    %rdx,(%rax)
  8004217484:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217488:	48 8b 00             	mov    (%rax),%rax
  800421748b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004217490:	48 85 c0             	test   %rax,%rax
  8004217493:	74 35                	je     80042174ca <readseg+0x162>
  8004217495:	48 b9 78 08 22 04 80 	movabs $0x8004220878,%rcx
  800421749c:	00 00 00 
  800421749f:	48 ba 3f 08 22 04 80 	movabs $0x800422083f,%rdx
  80042174a6:	00 00 00 
  80042174a9:	be da 00 00 00       	mov    $0xda,%esi
  80042174ae:	48 bf 54 08 22 04 80 	movabs $0x8004220854,%rdi
  80042174b5:	00 00 00 
  80042174b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042174c4:	00 00 00 
  80042174c7:	41 ff d0             	callq  *%r8
  80042174ca:	c9                   	leaveq 
  80042174cb:	c3                   	retq   

00000080042174cc <waitdisk>:
  80042174cc:	55                   	push   %rbp
  80042174cd:	48 89 e5             	mov    %rsp,%rbp
  80042174d0:	48 83 ec 10          	sub    $0x10,%rsp
  80042174d4:	90                   	nop
  80042174d5:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042174dc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042174df:	89 c2                	mov    %eax,%edx
  80042174e1:	ec                   	in     (%dx),%al
  80042174e2:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  80042174e5:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042174e9:	0f b6 c0             	movzbl %al,%eax
  80042174ec:	25 c0 00 00 00       	and    $0xc0,%eax
  80042174f1:	83 f8 40             	cmp    $0x40,%eax
  80042174f4:	75 df                	jne    80042174d5 <waitdisk+0x9>
  80042174f6:	c9                   	leaveq 
  80042174f7:	c3                   	retq   

00000080042174f8 <readsect>:
  80042174f8:	55                   	push   %rbp
  80042174f9:	48 89 e5             	mov    %rsp,%rbp
  80042174fc:	48 83 ec 60          	sub    $0x60,%rsp
  8004217500:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004217504:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004217508:	48 b8 cc 74 21 04 80 	movabs $0x80042174cc,%rax
  800421750f:	00 00 00 
  8004217512:	ff d0                	callq  *%rax
  8004217514:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  800421751b:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800421751f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004217523:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217526:	ee                   	out    %al,(%dx)
  8004217527:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421752b:	0f b6 c0             	movzbl %al,%eax
  800421752e:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  8004217535:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004217538:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800421753c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421753f:	ee                   	out    %al,(%dx)
  8004217540:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004217544:	48 c1 e8 08          	shr    $0x8,%rax
  8004217548:	0f b6 c0             	movzbl %al,%eax
  800421754b:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004217552:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004217555:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004217559:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421755c:	ee                   	out    %al,(%dx)
  800421755d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004217561:	48 c1 e8 10          	shr    $0x10,%rax
  8004217565:	0f b6 c0             	movzbl %al,%eax
  8004217568:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  800421756f:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004217572:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004217576:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217579:	ee                   	out    %al,(%dx)
  800421757a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421757e:	48 c1 e8 18          	shr    $0x18,%rax
  8004217582:	83 c8 e0             	or     $0xffffffe0,%eax
  8004217585:	0f b6 c0             	movzbl %al,%eax
  8004217588:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  800421758f:	88 45 db             	mov    %al,-0x25(%rbp)
  8004217592:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217596:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217599:	ee                   	out    %al,(%dx)
  800421759a:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  80042175a1:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  80042175a5:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042175a9:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042175ac:	ee                   	out    %al,(%dx)
  80042175ad:	48 b8 cc 74 21 04 80 	movabs $0x80042174cc,%rax
  80042175b4:	00 00 00 
  80042175b7:	ff d0                	callq  *%rax
  80042175b9:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  80042175c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042175c4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042175c8:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  80042175cf:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042175d2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  80042175d6:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042175d9:	48 89 ce             	mov    %rcx,%rsi
  80042175dc:	48 89 f7             	mov    %rsi,%rdi
  80042175df:	89 c1                	mov    %eax,%ecx
  80042175e1:	fc                   	cld    
  80042175e2:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  80042175e4:	89 c8                	mov    %ecx,%eax
  80042175e6:	48 89 fe             	mov    %rdi,%rsi
  80042175e9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042175ed:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042175f0:	c9                   	leaveq 
  80042175f1:	c3                   	retq   
  80042175f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000080042175f8 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  80042175f8:	fa                   	cli    
	xorw    %ax, %ax
  80042175f9:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  80042175fb:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042175fd:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042175ff:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004217601:	0f 01 16             	lgdt   (%rsi)
  8004217604:	e0 70                	loopne 8004217676 <start64+0x10>
	movl    %cr0, %eax
  8004217606:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004217609:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  800421760d:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004217610:	ea                   	(bad)  
  8004217611:	1d                   	.byte 0x1d
  8004217612:	70 08                	jo     800421761c <start32+0x7>
	...

0000008004217615 <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  8004217615:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004217619:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  800421761b:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  800421761d:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  800421761f:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004217623:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004217625:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  8004217627:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  800421762c:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  800421762f:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421e6f6 <etext+0x89e>
	movl    %cr0, %eax
  8004217636:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004217639:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  800421763c:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  800421763f:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  8004217644:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  8004217647:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  800421764c:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  800421764e:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  8004217652:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  8004217654:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  8004217657:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  800421765c:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  800421765f:	ea                   	(bad)  
  8004217660:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004217661:	70 00                	jo     8004217663 <start32+0x4e>
  8004217663:	00 08                	add    %cl,(%rax)
	...

0000008004217666 <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  8004217666:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  800421766a:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  800421766c:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  800421766e:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004217670:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004217674:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004217676:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004217678:	48 a1 e0 b5 6d 04 80 	movabs 0x80046db5e0,%rax
  800421767f:	00 00 00 
	movq    %rax,%rsp
  8004217682:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  8004217685:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  800421768c:	48 b8 03 04 20 04 80 	movabs $0x8004200403,%rax
  8004217693:	00 00 00 
	call    *%rax
  8004217696:	ff d0                	callq  *%rax

0000008004217698 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004217698:	eb fe                	jmp    8004217698 <spin>
  800421769a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000080042176a0 <gdt>:
	...
  80042176a8:	ff                   	(bad)  
  80042176a9:	ff 00                	incl   (%rax)
  80042176ab:	00 00                	add    %al,(%rax)
  80042176ad:	9a                   	(bad)  
  80042176ae:	af                   	scas   %es:(%rdi),%eax
  80042176af:	00 ff                	add    %bh,%bh
  80042176b1:	ff 00                	incl   (%rax)
  80042176b3:	00 00                	add    %al,(%rax)
  80042176b5:	92                   	xchg   %eax,%edx
  80042176b6:	af                   	scas   %es:(%rdi),%eax
	...

00000080042176b8 <gdtdesc>:
  80042176b8:	17                   	(bad)  
  80042176b9:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  80042176bf:	90                   	nop

00000080042176c0 <gdt32>:
	...
  80042176c8:	ff                   	(bad)  
  80042176c9:	ff 00                	incl   (%rax)
  80042176cb:	00 00                	add    %al,(%rax)
  80042176cd:	9a                   	(bad)  
  80042176ce:	cf                   	iret   
  80042176cf:	00 ff                	add    %bh,%bh
  80042176d1:	ff 00                	incl   (%rax)
  80042176d3:	00 00                	add    %al,(%rax)
  80042176d5:	92                   	xchg   %eax,%edx
  80042176d6:	cf                   	iret   
	...

00000080042176d8 <gdt32desc>:
  80042176d8:	17                   	(bad)  
  80042176d9:	00 c8                	add    %cl,%al
  80042176db:	70 00                	jo     80042176dd <gdt32desc+0x5>
	...

00000080042176de <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  80042176de:	90                   	nop

00000080042176df <sum>:
  80042176df:	55                   	push   %rbp
  80042176e0:	48 89 e5             	mov    %rsp,%rbp
  80042176e3:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042176e7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042176eb:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042176ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042176f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042176fc:	eb 1a                	jmp    8004217718 <sum+0x39>
  80042176fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217701:	48 63 d0             	movslq %eax,%rdx
  8004217704:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217708:	48 01 d0             	add    %rdx,%rax
  800421770b:	0f b6 00             	movzbl (%rax),%eax
  800421770e:	0f b6 c0             	movzbl %al,%eax
  8004217711:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004217714:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217718:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421771b:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  800421771e:	7c de                	jl     80042176fe <sum+0x1f>
  8004217720:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217723:	c9                   	leaveq 
  8004217724:	c3                   	retq   

0000008004217725 <mpsearch1>:
  8004217725:	55                   	push   %rbp
  8004217726:	48 89 e5             	mov    %rsp,%rbp
  8004217729:	48 83 ec 40          	sub    $0x40,%rsp
  800421772d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004217731:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004217734:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217738:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421773c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217740:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217744:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217747:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421774a:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004217751:	00 00 00 
  8004217754:	48 8b 00             	mov    (%rax),%rax
  8004217757:	48 39 c2             	cmp    %rax,%rdx
  800421775a:	72 32                	jb     800421778e <mpsearch1+0x69>
  800421775c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217760:	48 89 c1             	mov    %rax,%rcx
  8004217763:	48 ba 98 08 22 04 80 	movabs $0x8004220898,%rdx
  800421776a:	00 00 00 
  800421776d:	be 74 00 00 00       	mov    $0x74,%esi
  8004217772:	48 bf bb 08 22 04 80 	movabs $0x80042208bb,%rdi
  8004217779:	00 00 00 
  800421777c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217781:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217788:	00 00 00 
  800421778b:	41 ff d0             	callq  *%r8
  800421778e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217795:	00 00 00 
  8004217798:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421779c:	48 01 d0             	add    %rdx,%rax
  800421779f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042177a3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042177a6:	48 63 d0             	movslq %eax,%rdx
  80042177a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042177ad:	48 01 d0             	add    %rdx,%rax
  80042177b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042177b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042177b8:	48 c1 e8 0c          	shr    $0xc,%rax
  80042177bc:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042177bf:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042177c2:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042177c9:	00 00 00 
  80042177cc:	48 8b 00             	mov    (%rax),%rax
  80042177cf:	48 39 c2             	cmp    %rax,%rdx
  80042177d2:	72 32                	jb     8004217806 <mpsearch1+0xe1>
  80042177d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042177d8:	48 89 c1             	mov    %rax,%rcx
  80042177db:	48 ba 98 08 22 04 80 	movabs $0x8004220898,%rdx
  80042177e2:	00 00 00 
  80042177e5:	be 74 00 00 00       	mov    $0x74,%esi
  80042177ea:	48 bf bb 08 22 04 80 	movabs $0x80042208bb,%rdi
  80042177f1:	00 00 00 
  80042177f4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042177f9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217800:	00 00 00 
  8004217803:	41 ff d0             	callq  *%r8
  8004217806:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421780d:	00 00 00 
  8004217810:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217814:	48 01 d0             	add    %rdx,%rax
  8004217817:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421781b:	eb 4d                	jmp    800421786a <mpsearch1+0x145>
  800421781d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217821:	ba 04 00 00 00       	mov    $0x4,%edx
  8004217826:	48 be ce 08 22 04 80 	movabs $0x80042208ce,%rsi
  800421782d:	00 00 00 
  8004217830:	48 89 c7             	mov    %rax,%rdi
  8004217833:	48 b8 df 13 21 04 80 	movabs $0x80042113df,%rax
  800421783a:	00 00 00 
  800421783d:	ff d0                	callq  *%rax
  800421783f:	85 c0                	test   %eax,%eax
  8004217841:	75 22                	jne    8004217865 <mpsearch1+0x140>
  8004217843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217847:	be 10 00 00 00       	mov    $0x10,%esi
  800421784c:	48 89 c7             	mov    %rax,%rdi
  800421784f:	48 b8 df 76 21 04 80 	movabs $0x80042176df,%rax
  8004217856:	00 00 00 
  8004217859:	ff d0                	callq  *%rax
  800421785b:	84 c0                	test   %al,%al
  800421785d:	75 06                	jne    8004217865 <mpsearch1+0x140>
  800421785f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217863:	eb 14                	jmp    8004217879 <mpsearch1+0x154>
  8004217865:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  800421786a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421786e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004217872:	72 a9                	jb     800421781d <mpsearch1+0xf8>
  8004217874:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217879:	c9                   	leaveq 
  800421787a:	c3                   	retq   

000000800421787b <mpsearch>:
  800421787b:	55                   	push   %rbp
  800421787c:	48 89 e5             	mov    %rsp,%rbp
  800421787f:	48 83 ec 30          	sub    $0x30,%rsp
  8004217883:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  800421788a:	00 
  800421788b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421788f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217893:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004217896:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004217899:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042178a0:	00 00 00 
  80042178a3:	48 8b 00             	mov    (%rax),%rax
  80042178a6:	48 39 c2             	cmp    %rax,%rdx
  80042178a9:	72 32                	jb     80042178dd <mpsearch+0x62>
  80042178ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042178af:	48 89 c1             	mov    %rax,%rcx
  80042178b2:	48 ba 98 08 22 04 80 	movabs $0x8004220898,%rdx
  80042178b9:	00 00 00 
  80042178bc:	be 8c 00 00 00       	mov    $0x8c,%esi
  80042178c1:	48 bf bb 08 22 04 80 	movabs $0x80042208bb,%rdi
  80042178c8:	00 00 00 
  80042178cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178d0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042178d7:	00 00 00 
  80042178da:	41 ff d0             	callq  *%r8
  80042178dd:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042178e4:	00 00 00 
  80042178e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042178eb:	48 01 d0             	add    %rdx,%rax
  80042178ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042178f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042178f6:	48 83 c0 0e          	add    $0xe,%rax
  80042178fa:	0f b7 00             	movzwl (%rax),%eax
  80042178fd:	0f b7 c0             	movzwl %ax,%eax
  8004217900:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217903:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004217907:	74 2c                	je     8004217935 <mpsearch+0xba>
  8004217909:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  800421790d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217910:	be 00 04 00 00       	mov    $0x400,%esi
  8004217915:	48 89 c7             	mov    %rax,%rdi
  8004217918:	48 b8 25 77 21 04 80 	movabs $0x8004217725,%rax
  800421791f:	00 00 00 
  8004217922:	ff d0                	callq  *%rax
  8004217924:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217928:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421792d:	74 49                	je     8004217978 <mpsearch+0xfd>
  800421792f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217933:	eb 59                	jmp    800421798e <mpsearch+0x113>
  8004217935:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217939:	48 83 c0 13          	add    $0x13,%rax
  800421793d:	0f b7 00             	movzwl (%rax),%eax
  8004217940:	0f b7 c0             	movzwl %ax,%eax
  8004217943:	c1 e0 0a             	shl    $0xa,%eax
  8004217946:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217949:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421794c:	2d 00 04 00 00       	sub    $0x400,%eax
  8004217951:	89 c0                	mov    %eax,%eax
  8004217953:	be 00 04 00 00       	mov    $0x400,%esi
  8004217958:	48 89 c7             	mov    %rax,%rdi
  800421795b:	48 b8 25 77 21 04 80 	movabs $0x8004217725,%rax
  8004217962:	00 00 00 
  8004217965:	ff d0                	callq  *%rax
  8004217967:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421796b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217970:	74 06                	je     8004217978 <mpsearch+0xfd>
  8004217972:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217976:	eb 16                	jmp    800421798e <mpsearch+0x113>
  8004217978:	be 00 00 01 00       	mov    $0x10000,%esi
  800421797d:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  8004217982:	48 b8 25 77 21 04 80 	movabs $0x8004217725,%rax
  8004217989:	00 00 00 
  800421798c:	ff d0                	callq  *%rax
  800421798e:	c9                   	leaveq 
  800421798f:	c3                   	retq   

0000008004217990 <mpconfig>:
  8004217990:	55                   	push   %rbp
  8004217991:	48 89 e5             	mov    %rsp,%rbp
  8004217994:	48 83 ec 30          	sub    $0x30,%rsp
  8004217998:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421799c:	48 b8 7b 78 21 04 80 	movabs $0x800421787b,%rax
  80042179a3:	00 00 00 
  80042179a6:	ff d0                	callq  *%rax
  80042179a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042179ac:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042179b1:	75 0a                	jne    80042179bd <mpconfig+0x2d>
  80042179b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179b8:	e9 f6 01 00 00       	jmpq   8004217bb3 <mpconfig+0x223>
  80042179bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042179c1:	8b 40 04             	mov    0x4(%rax),%eax
  80042179c4:	85 c0                	test   %eax,%eax
  80042179c6:	74 0c                	je     80042179d4 <mpconfig+0x44>
  80042179c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042179cc:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  80042179d0:	84 c0                	test   %al,%al
  80042179d2:	74 25                	je     80042179f9 <mpconfig+0x69>
  80042179d4:	48 bf d8 08 22 04 80 	movabs $0x80042208d8,%rdi
  80042179db:	00 00 00 
  80042179de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179e3:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  80042179ea:	00 00 00 
  80042179ed:	ff d2                	callq  *%rdx
  80042179ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179f4:	e9 ba 01 00 00       	jmpq   8004217bb3 <mpconfig+0x223>
  80042179f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042179fd:	8b 40 04             	mov    0x4(%rax),%eax
  8004217a00:	89 c0                	mov    %eax,%eax
  8004217a02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217a06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217a0a:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217a0e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217a11:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217a14:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004217a1b:	00 00 00 
  8004217a1e:	48 8b 00             	mov    (%rax),%rax
  8004217a21:	48 39 c2             	cmp    %rax,%rdx
  8004217a24:	72 32                	jb     8004217a58 <mpconfig+0xc8>
  8004217a26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217a2a:	48 89 c1             	mov    %rax,%rcx
  8004217a2d:	48 ba 98 08 22 04 80 	movabs $0x8004220898,%rdx
  8004217a34:	00 00 00 
  8004217a37:	be ad 00 00 00       	mov    $0xad,%esi
  8004217a3c:	48 bf bb 08 22 04 80 	movabs $0x80042208bb,%rdi
  8004217a43:	00 00 00 
  8004217a46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a4b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217a52:	00 00 00 
  8004217a55:	41 ff d0             	callq  *%r8
  8004217a58:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217a5f:	00 00 00 
  8004217a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217a66:	48 01 d0             	add    %rdx,%rax
  8004217a69:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217a6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217a71:	ba 04 00 00 00       	mov    $0x4,%edx
  8004217a76:	48 be 05 09 22 04 80 	movabs $0x8004220905,%rsi
  8004217a7d:	00 00 00 
  8004217a80:	48 89 c7             	mov    %rax,%rdi
  8004217a83:	48 b8 df 13 21 04 80 	movabs $0x80042113df,%rax
  8004217a8a:	00 00 00 
  8004217a8d:	ff d0                	callq  *%rax
  8004217a8f:	85 c0                	test   %eax,%eax
  8004217a91:	74 25                	je     8004217ab8 <mpconfig+0x128>
  8004217a93:	48 bf 10 09 22 04 80 	movabs $0x8004220910,%rdi
  8004217a9a:	00 00 00 
  8004217a9d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217aa2:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217aa9:	00 00 00 
  8004217aac:	ff d2                	callq  *%rdx
  8004217aae:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ab3:	e9 fb 00 00 00       	jmpq   8004217bb3 <mpconfig+0x223>
  8004217ab8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217abc:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004217ac0:	0f b7 d0             	movzwl %ax,%edx
  8004217ac3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217ac7:	89 d6                	mov    %edx,%esi
  8004217ac9:	48 89 c7             	mov    %rax,%rdi
  8004217acc:	48 b8 df 76 21 04 80 	movabs $0x80042176df,%rax
  8004217ad3:	00 00 00 
  8004217ad6:	ff d0                	callq  *%rax
  8004217ad8:	84 c0                	test   %al,%al
  8004217ada:	74 25                	je     8004217b01 <mpconfig+0x171>
  8004217adc:	48 bf 48 09 22 04 80 	movabs $0x8004220948,%rdi
  8004217ae3:	00 00 00 
  8004217ae6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217aeb:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217af2:	00 00 00 
  8004217af5:	ff d2                	callq  *%rdx
  8004217af7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217afc:	e9 b2 00 00 00       	jmpq   8004217bb3 <mpconfig+0x223>
  8004217b01:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217b05:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217b09:	3c 01                	cmp    $0x1,%al
  8004217b0b:	74 3b                	je     8004217b48 <mpconfig+0x1b8>
  8004217b0d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217b11:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217b15:	3c 04                	cmp    $0x4,%al
  8004217b17:	74 2f                	je     8004217b48 <mpconfig+0x1b8>
  8004217b19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217b1d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217b21:	0f b6 c0             	movzbl %al,%eax
  8004217b24:	89 c6                	mov    %eax,%esi
  8004217b26:	48 bf 70 09 22 04 80 	movabs $0x8004220970,%rdi
  8004217b2d:	00 00 00 
  8004217b30:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b35:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217b3c:	00 00 00 
  8004217b3f:	ff d2                	callq  *%rdx
  8004217b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b46:	eb 6b                	jmp    8004217bb3 <mpconfig+0x223>
  8004217b48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217b4c:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  8004217b50:	0f b7 c0             	movzwl %ax,%eax
  8004217b53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217b57:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  8004217b5b:	0f b7 ca             	movzwl %dx,%ecx
  8004217b5e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217b62:	48 01 ca             	add    %rcx,%rdx
  8004217b65:	89 c6                	mov    %eax,%esi
  8004217b67:	48 89 d7             	mov    %rdx,%rdi
  8004217b6a:	48 b8 df 76 21 04 80 	movabs $0x80042176df,%rax
  8004217b71:	00 00 00 
  8004217b74:	ff d0                	callq  *%rax
  8004217b76:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217b7a:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  8004217b7e:	38 d0                	cmp    %dl,%al
  8004217b80:	74 22                	je     8004217ba4 <mpconfig+0x214>
  8004217b82:	48 bf 90 09 22 04 80 	movabs $0x8004220990,%rdi
  8004217b89:	00 00 00 
  8004217b8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b91:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217b98:	00 00 00 
  8004217b9b:	ff d2                	callq  *%rdx
  8004217b9d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ba2:	eb 0f                	jmp    8004217bb3 <mpconfig+0x223>
  8004217ba4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217ba8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004217bac:	48 89 10             	mov    %rdx,(%rax)
  8004217baf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217bb3:	c9                   	leaveq 
  8004217bb4:	c3                   	retq   

0000008004217bb5 <mp_init>:
  8004217bb5:	55                   	push   %rbp
  8004217bb6:	48 89 e5             	mov    %rsp,%rbp
  8004217bb9:	53                   	push   %rbx
  8004217bba:	48 83 ec 58          	sub    $0x58,%rsp
  8004217bbe:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  8004217bc5:	00 00 00 
  8004217bc8:	48 bb 20 d0 6d 04 80 	movabs $0x80046dd020,%rbx
  8004217bcf:	00 00 00 
  8004217bd2:	48 89 18             	mov    %rbx,(%rax)
  8004217bd5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217bd9:	48 89 c7             	mov    %rax,%rdi
  8004217bdc:	48 b8 90 79 21 04 80 	movabs $0x8004217990,%rax
  8004217be3:	00 00 00 
  8004217be6:	ff d0                	callq  *%rax
  8004217be8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217bec:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217bf1:	75 05                	jne    8004217bf8 <mp_init+0x43>
  8004217bf3:	e9 d2 03 00 00       	jmpq   8004217fca <mp_init+0x415>
  8004217bf8:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  8004217bff:	00 00 00 
  8004217c02:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217c08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217c0c:	8b 40 24             	mov    0x24(%rax),%eax
  8004217c0f:	89 c2                	mov    %eax,%edx
  8004217c11:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  8004217c18:	00 00 00 
  8004217c1b:	48 89 10             	mov    %rdx,(%rax)
  8004217c1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217c22:	48 83 c0 2c          	add    $0x2c,%rax
  8004217c26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004217c2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217c31:	e9 17 02 00 00       	jmpq   8004217e4d <mp_init+0x298>
  8004217c36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217c3a:	0f b6 00             	movzbl (%rax),%eax
  8004217c3d:	0f b6 c0             	movzbl %al,%eax
  8004217c40:	85 c0                	test   %eax,%eax
  8004217c42:	74 16                	je     8004217c5a <mp_init+0xa5>
  8004217c44:	85 c0                	test   %eax,%eax
  8004217c46:	0f 88 b8 01 00 00    	js     8004217e04 <mp_init+0x24f>
  8004217c4c:	83 f8 04             	cmp    $0x4,%eax
  8004217c4f:	0f 8f af 01 00 00    	jg     8004217e04 <mp_init+0x24f>
  8004217c55:	e9 a3 01 00 00       	jmpq   8004217dfd <mp_init+0x248>
  8004217c5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217c5e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004217c62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217c66:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217c6a:	0f b6 c0             	movzbl %al,%eax
  8004217c6d:	83 e0 02             	and    $0x2,%eax
  8004217c70:	85 c0                	test   %eax,%eax
  8004217c72:	74 51                	je     8004217cc5 <mp_init+0x110>
  8004217c74:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217c7b:	00 00 00 
  8004217c7e:	8b 00                	mov    (%rax),%eax
  8004217c80:	48 98                	cltq   
  8004217c82:	48 c1 e0 03          	shl    $0x3,%rax
  8004217c86:	48 89 c2             	mov    %rax,%rdx
  8004217c89:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c8d:	48 01 d0             	add    %rdx,%rax
  8004217c90:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004217c97:	00 00 00 
  8004217c9a:	48 01 c2             	add    %rax,%rdx
  8004217c9d:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  8004217ca4:	00 00 00 
  8004217ca7:	48 89 10             	mov    %rdx,(%rax)
  8004217caa:	48 bf bd 09 22 04 80 	movabs $0x80042209bd,%rdi
  8004217cb1:	00 00 00 
  8004217cb4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217cb9:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217cc0:	00 00 00 
  8004217cc3:	ff d2                	callq  *%rdx
  8004217cc5:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217ccc:	00 00 00 
  8004217ccf:	8b 00                	mov    (%rax),%eax
  8004217cd1:	83 f8 03             	cmp    $0x3,%eax
  8004217cd4:	0f 8f f4 00 00 00    	jg     8004217dce <mp_init+0x219>
  8004217cda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217cde:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004217ce2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217ce6:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217cea:	0f b6 f0             	movzbl %al,%esi
  8004217ced:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217cf1:	8b 78 08             	mov    0x8(%rax),%edi
  8004217cf4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217cf8:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004217cfc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217d00:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004217d04:	0f b6 c8             	movzbl %al,%ecx
  8004217d07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217d0b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217d0f:	0f b6 d0             	movzbl %al,%edx
  8004217d12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217d16:	0f b6 00             	movzbl (%rax),%eax
  8004217d19:	0f b6 c0             	movzbl %al,%eax
  8004217d1c:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004217d21:	89 34 24             	mov    %esi,(%rsp)
  8004217d24:	41 89 f9             	mov    %edi,%r9d
  8004217d27:	4d 89 d0             	mov    %r10,%r8
  8004217d2a:	89 c6                	mov    %eax,%esi
  8004217d2c:	48 bf d0 09 22 04 80 	movabs $0x80042209d0,%rdi
  8004217d33:	00 00 00 
  8004217d36:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d3b:	49 ba 93 9c 20 04 80 	movabs $0x8004209c93,%r10
  8004217d42:	00 00 00 
  8004217d45:	41 ff d2             	callq  *%r10
  8004217d48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217d4c:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217d50:	0f b6 c0             	movzbl %al,%eax
  8004217d53:	83 e0 01             	and    $0x1,%eax
  8004217d56:	85 c0                	test   %eax,%eax
  8004217d58:	74 57                	je     8004217db1 <mp_init+0x1fc>
  8004217d5a:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217d61:	00 00 00 
  8004217d64:	8b 30                	mov    (%rax),%esi
  8004217d66:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217d6d:	00 00 00 
  8004217d70:	8b 00                	mov    (%rax),%eax
  8004217d72:	89 c2                	mov    %eax,%edx
  8004217d74:	48 b9 20 d0 6d 04 80 	movabs $0x80046dd020,%rcx
  8004217d7b:	00 00 00 
  8004217d7e:	48 63 c6             	movslq %esi,%rax
  8004217d81:	48 c1 e0 03          	shl    $0x3,%rax
  8004217d85:	48 89 c6             	mov    %rax,%rsi
  8004217d88:	48 c1 e6 04          	shl    $0x4,%rsi
  8004217d8c:	48 01 f0             	add    %rsi,%rax
  8004217d8f:	48 01 c8             	add    %rcx,%rax
  8004217d92:	88 10                	mov    %dl,(%rax)
  8004217d94:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217d9b:	00 00 00 
  8004217d9e:	8b 00                	mov    (%rax),%eax
  8004217da0:	8d 50 01             	lea    0x1(%rax),%edx
  8004217da3:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217daa:	00 00 00 
  8004217dad:	89 10                	mov    %edx,(%rax)
  8004217daf:	eb 45                	jmp    8004217df6 <mp_init+0x241>
  8004217db1:	48 bf 20 0a 22 04 80 	movabs $0x8004220a20,%rdi
  8004217db8:	00 00 00 
  8004217dbb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217dc0:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217dc7:	00 00 00 
  8004217dca:	ff d2                	callq  *%rdx
  8004217dcc:	eb 28                	jmp    8004217df6 <mp_init+0x241>
  8004217dce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217dd2:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217dd6:	0f b6 c0             	movzbl %al,%eax
  8004217dd9:	89 c6                	mov    %eax,%esi
  8004217ddb:	48 bf 50 0a 22 04 80 	movabs $0x8004220a50,%rdi
  8004217de2:	00 00 00 
  8004217de5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217dea:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217df1:	00 00 00 
  8004217df4:	ff d2                	callq  *%rdx
  8004217df6:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004217dfb:	eb 4c                	jmp    8004217e49 <mp_init+0x294>
  8004217dfd:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004217e02:	eb 45                	jmp    8004217e49 <mp_init+0x294>
  8004217e04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e08:	0f b6 00             	movzbl (%rax),%eax
  8004217e0b:	0f b6 c0             	movzbl %al,%eax
  8004217e0e:	89 c6                	mov    %eax,%esi
  8004217e10:	48 bf 78 0a 22 04 80 	movabs $0x8004220a78,%rdi
  8004217e17:	00 00 00 
  8004217e1a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e1f:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217e26:	00 00 00 
  8004217e29:	ff d2                	callq  *%rdx
  8004217e2b:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  8004217e32:	00 00 00 
  8004217e35:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217e3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217e3f:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217e43:	0f b7 c0             	movzwl %ax,%eax
  8004217e46:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217e49:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217e4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217e51:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217e55:	0f b7 c0             	movzwl %ax,%eax
  8004217e58:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004217e5b:	0f 87 d5 fd ff ff    	ja     8004217c36 <mp_init+0x81>
  8004217e61:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217e68:	eb 53                	jmp    8004217ebd <mp_init+0x308>
  8004217e6a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004217e71:	00 00 00 
  8004217e74:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217e77:	48 c1 e0 03          	shl    $0x3,%rax
  8004217e7b:	48 89 c1             	mov    %rax,%rcx
  8004217e7e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217e82:	48 01 c8             	add    %rcx,%rax
  8004217e85:	48 01 d0             	add    %rdx,%rax
  8004217e88:	48 83 c0 70          	add    $0x70,%rax
  8004217e8c:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004217e90:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004217e97:	00 00 00 
  8004217e9a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217e9d:	48 c1 e0 03          	shl    $0x3,%rax
  8004217ea1:	48 89 c1             	mov    %rax,%rcx
  8004217ea4:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217ea8:	48 01 c8             	add    %rcx,%rax
  8004217eab:	48 01 d0             	add    %rdx,%rax
  8004217eae:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004217eb2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217eb9:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217ebd:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217ec1:	76 a7                	jbe    8004217e6a <mp_init+0x2b5>
  8004217ec3:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  8004217eca:	00 00 00 
  8004217ecd:	48 8b 00             	mov    (%rax),%rax
  8004217ed0:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004217ed7:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  8004217ede:	00 00 00 
  8004217ee1:	8b 00                	mov    (%rax),%eax
  8004217ee3:	85 c0                	test   %eax,%eax
  8004217ee5:	75 41                	jne    8004217f28 <mp_init+0x373>
  8004217ee7:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217eee:	00 00 00 
  8004217ef1:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217ef7:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  8004217efe:	00 00 00 
  8004217f01:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217f08:	48 bf 98 0a 22 04 80 	movabs $0x8004220a98,%rdi
  8004217f0f:	00 00 00 
  8004217f12:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f17:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217f1e:	00 00 00 
  8004217f21:	ff d2                	callq  *%rdx
  8004217f23:	e9 a2 00 00 00       	jmpq   8004217fca <mp_init+0x415>
  8004217f28:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  8004217f2f:	00 00 00 
  8004217f32:	8b 10                	mov    (%rax),%edx
  8004217f34:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  8004217f3b:	00 00 00 
  8004217f3e:	48 8b 00             	mov    (%rax),%rax
  8004217f41:	0f b6 00             	movzbl (%rax),%eax
  8004217f44:	0f b6 c0             	movzbl %al,%eax
  8004217f47:	89 c6                	mov    %eax,%esi
  8004217f49:	48 bf c4 0a 22 04 80 	movabs $0x8004220ac4,%rdi
  8004217f50:	00 00 00 
  8004217f53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f58:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  8004217f5f:	00 00 00 
  8004217f62:	ff d1                	callq  *%rcx
  8004217f64:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004217f68:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217f6c:	84 c0                	test   %al,%al
  8004217f6e:	74 5a                	je     8004217fca <mp_init+0x415>
  8004217f70:	48 bf e8 0a 22 04 80 	movabs $0x8004220ae8,%rdi
  8004217f77:	00 00 00 
  8004217f7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f7f:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004217f86:	00 00 00 
  8004217f89:	ff d2                	callq  *%rdx
  8004217f8b:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004217f92:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217f96:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004217f9a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217f9d:	ee                   	out    %al,(%dx)
  8004217f9e:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004217fa5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217fa8:	89 c2                	mov    %eax,%edx
  8004217faa:	ec                   	in     (%dx),%al
  8004217fab:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004217fae:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004217fb2:	83 c8 01             	or     $0x1,%eax
  8004217fb5:	0f b6 c0             	movzbl %al,%eax
  8004217fb8:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004217fbf:	88 45 bb             	mov    %al,-0x45(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217fc2:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004217fc6:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217fc9:	ee                   	out    %al,(%dx)
  8004217fca:	48 83 c4 58          	add    $0x58,%rsp
  8004217fce:	5b                   	pop    %rbx
  8004217fcf:	5d                   	pop    %rbp
  8004217fd0:	c3                   	retq   

0000008004217fd1 <lapicw>:
  8004217fd1:	55                   	push   %rbp
  8004217fd2:	48 89 e5             	mov    %rsp,%rbp
  8004217fd5:	48 83 ec 08          	sub    $0x8,%rsp
  8004217fd9:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217fdc:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004217fdf:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217fe6:	00 00 00 
  8004217fe9:	48 8b 00             	mov    (%rax),%rax
  8004217fec:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217fef:	48 63 d2             	movslq %edx,%rdx
  8004217ff2:	48 c1 e2 02          	shl    $0x2,%rdx
  8004217ff6:	48 01 c2             	add    %rax,%rdx
  8004217ff9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217ffc:	89 02                	mov    %eax,(%rdx)
  8004217ffe:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004218005:	00 00 00 
  8004218008:	48 8b 00             	mov    (%rax),%rax
  800421800b:	48 83 c0 20          	add    $0x20,%rax
  800421800f:	8b 00                	mov    (%rax),%eax
  8004218011:	c9                   	leaveq 
  8004218012:	c3                   	retq   

0000008004218013 <lapic_init>:
  8004218013:	55                   	push   %rbp
  8004218014:	48 89 e5             	mov    %rsp,%rbp
  8004218017:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  800421801e:	00 00 00 
  8004218021:	48 8b 00             	mov    (%rax),%rax
  8004218024:	48 85 c0             	test   %rax,%rax
  8004218027:	75 05                	jne    800421802e <lapic_init+0x1b>
  8004218029:	e9 da 01 00 00       	jmpq   8004218208 <lapic_init+0x1f5>
  800421802e:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  8004218035:	00 00 00 
  8004218038:	48 8b 00             	mov    (%rax),%rax
  800421803b:	be 00 10 00 00       	mov    $0x1000,%esi
  8004218040:	48 89 c7             	mov    %rax,%rdi
  8004218043:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  800421804a:	00 00 00 
  800421804d:	ff d0                	callq  *%rax
  800421804f:	48 ba 08 e0 71 04 80 	movabs $0x800471e008,%rdx
  8004218056:	00 00 00 
  8004218059:	48 89 02             	mov    %rax,(%rdx)
  800421805c:	be 27 01 00 00       	mov    $0x127,%esi
  8004218061:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004218066:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  800421806d:	00 00 00 
  8004218070:	ff d0                	callq  *%rax
  8004218072:	be 0b 00 00 00       	mov    $0xb,%esi
  8004218077:	bf f8 00 00 00       	mov    $0xf8,%edi
  800421807c:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218083:	00 00 00 
  8004218086:	ff d0                	callq  *%rax
  8004218088:	be 20 00 02 00       	mov    $0x20020,%esi
  800421808d:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004218092:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218099:	00 00 00 
  800421809c:	ff d0                	callq  *%rax
  800421809e:	be 80 96 98 00       	mov    $0x989680,%esi
  80042180a3:	bf e0 00 00 00       	mov    $0xe0,%edi
  80042180a8:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  80042180af:	00 00 00 
  80042180b2:	ff d0                	callq  *%rax
  80042180b4:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042180bb:	00 00 00 
  80042180be:	ff d0                	callq  *%rax
  80042180c0:	48 98                	cltq   
  80042180c2:	48 c1 e0 03          	shl    $0x3,%rax
  80042180c6:	48 89 c2             	mov    %rax,%rdx
  80042180c9:	48 c1 e2 04          	shl    $0x4,%rdx
  80042180cd:	48 01 d0             	add    %rdx,%rax
  80042180d0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042180d7:	00 00 00 
  80042180da:	48 01 c2             	add    %rax,%rdx
  80042180dd:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  80042180e4:	00 00 00 
  80042180e7:	48 8b 00             	mov    (%rax),%rax
  80042180ea:	48 39 c2             	cmp    %rax,%rdx
  80042180ed:	74 16                	je     8004218105 <lapic_init+0xf2>
  80042180ef:	be 00 00 01 00       	mov    $0x10000,%esi
  80042180f4:	bf d4 00 00 00       	mov    $0xd4,%edi
  80042180f9:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218100:	00 00 00 
  8004218103:	ff d0                	callq  *%rax
  8004218105:	be 00 00 01 00       	mov    $0x10000,%esi
  800421810a:	bf d8 00 00 00       	mov    $0xd8,%edi
  800421810f:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218116:	00 00 00 
  8004218119:	ff d0                	callq  *%rax
  800421811b:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004218122:	00 00 00 
  8004218125:	48 8b 00             	mov    (%rax),%rax
  8004218128:	48 83 c0 30          	add    $0x30,%rax
  800421812c:	8b 00                	mov    (%rax),%eax
  800421812e:	c1 e8 10             	shr    $0x10,%eax
  8004218131:	0f b6 c0             	movzbl %al,%eax
  8004218134:	83 f8 03             	cmp    $0x3,%eax
  8004218137:	76 16                	jbe    800421814f <lapic_init+0x13c>
  8004218139:	be 00 00 01 00       	mov    $0x10000,%esi
  800421813e:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004218143:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  800421814a:	00 00 00 
  800421814d:	ff d0                	callq  *%rax
  800421814f:	be 33 00 00 00       	mov    $0x33,%esi
  8004218154:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004218159:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218160:	00 00 00 
  8004218163:	ff d0                	callq  *%rax
  8004218165:	be 00 00 00 00       	mov    $0x0,%esi
  800421816a:	bf a0 00 00 00       	mov    $0xa0,%edi
  800421816f:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218176:	00 00 00 
  8004218179:	ff d0                	callq  *%rax
  800421817b:	be 00 00 00 00       	mov    $0x0,%esi
  8004218180:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004218185:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  800421818c:	00 00 00 
  800421818f:	ff d0                	callq  *%rax
  8004218191:	be 00 00 00 00       	mov    $0x0,%esi
  8004218196:	bf 2c 00 00 00       	mov    $0x2c,%edi
  800421819b:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  80042181a2:	00 00 00 
  80042181a5:	ff d0                	callq  *%rax
  80042181a7:	be 00 00 00 00       	mov    $0x0,%esi
  80042181ac:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042181b1:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  80042181b8:	00 00 00 
  80042181bb:	ff d0                	callq  *%rax
  80042181bd:	be 00 85 08 00       	mov    $0x88500,%esi
  80042181c2:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042181c7:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  80042181ce:	00 00 00 
  80042181d1:	ff d0                	callq  *%rax
  80042181d3:	90                   	nop
  80042181d4:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  80042181db:	00 00 00 
  80042181de:	48 8b 00             	mov    (%rax),%rax
  80042181e1:	48 05 00 03 00 00    	add    $0x300,%rax
  80042181e7:	8b 00                	mov    (%rax),%eax
  80042181e9:	25 00 10 00 00       	and    $0x1000,%eax
  80042181ee:	85 c0                	test   %eax,%eax
  80042181f0:	75 e2                	jne    80042181d4 <lapic_init+0x1c1>
  80042181f2:	be 00 00 00 00       	mov    $0x0,%esi
  80042181f7:	bf 20 00 00 00       	mov    $0x20,%edi
  80042181fc:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218203:	00 00 00 
  8004218206:	ff d0                	callq  *%rax
  8004218208:	5d                   	pop    %rbp
  8004218209:	c3                   	retq   

000000800421820a <cpunum>:
  800421820a:	55                   	push   %rbp
  800421820b:	48 89 e5             	mov    %rsp,%rbp
  800421820e:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004218215:	00 00 00 
  8004218218:	48 8b 00             	mov    (%rax),%rax
  800421821b:	48 85 c0             	test   %rax,%rax
  800421821e:	74 18                	je     8004218238 <cpunum+0x2e>
  8004218220:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004218227:	00 00 00 
  800421822a:	48 8b 00             	mov    (%rax),%rax
  800421822d:	48 83 c0 20          	add    $0x20,%rax
  8004218231:	8b 00                	mov    (%rax),%eax
  8004218233:	c1 e8 18             	shr    $0x18,%eax
  8004218236:	eb 05                	jmp    800421823d <cpunum+0x33>
  8004218238:	b8 00 00 00 00       	mov    $0x0,%eax
  800421823d:	5d                   	pop    %rbp
  800421823e:	c3                   	retq   

000000800421823f <lapic_eoi>:
  800421823f:	55                   	push   %rbp
  8004218240:	48 89 e5             	mov    %rsp,%rbp
  8004218243:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  800421824a:	00 00 00 
  800421824d:	48 8b 00             	mov    (%rax),%rax
  8004218250:	48 85 c0             	test   %rax,%rax
  8004218253:	74 16                	je     800421826b <lapic_eoi+0x2c>
  8004218255:	be 00 00 00 00       	mov    $0x0,%esi
  800421825a:	bf 2c 00 00 00       	mov    $0x2c,%edi
  800421825f:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218266:	00 00 00 
  8004218269:	ff d0                	callq  *%rax
  800421826b:	5d                   	pop    %rbp
  800421826c:	c3                   	retq   

000000800421826d <microdelay>:
  800421826d:	55                   	push   %rbp
  800421826e:	48 89 e5             	mov    %rsp,%rbp
  8004218271:	48 83 ec 04          	sub    $0x4,%rsp
  8004218275:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004218278:	c9                   	leaveq 
  8004218279:	c3                   	retq   

000000800421827a <lapic_startap>:
  800421827a:	55                   	push   %rbp
  800421827b:	48 89 e5             	mov    %rsp,%rbp
  800421827e:	48 83 ec 40          	sub    $0x40,%rsp
  8004218282:	89 f8                	mov    %edi,%eax
  8004218284:	89 75 c8             	mov    %esi,-0x38(%rbp)
  8004218287:	88 45 cc             	mov    %al,-0x34(%rbp)
  800421828a:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004218291:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  8004218295:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004218299:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421829c:	ee                   	out    %al,(%dx)
  800421829d:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  80042182a4:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  80042182a8:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042182ac:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042182af:	ee                   	out    %al,(%dx)
  80042182b0:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  80042182b7:	00 
  80042182b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042182bc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042182c0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042182c3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042182c6:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042182cd:	00 00 00 
  80042182d0:	48 8b 00             	mov    (%rax),%rax
  80042182d3:	48 39 c2             	cmp    %rax,%rdx
  80042182d6:	72 32                	jb     800421830a <lapic_startap+0x90>
  80042182d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042182dc:	48 89 c1             	mov    %rax,%rcx
  80042182df:	48 ba 30 0b 22 04 80 	movabs $0x8004220b30,%rdx
  80042182e6:	00 00 00 
  80042182e9:	be 99 00 00 00       	mov    $0x99,%esi
  80042182ee:	48 bf 53 0b 22 04 80 	movabs $0x8004220b53,%rdi
  80042182f5:	00 00 00 
  80042182f8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042182fd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218304:	00 00 00 
  8004218307:	41 ff d0             	callq  *%r8
  800421830a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004218311:	00 00 00 
  8004218314:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004218318:	48 01 d0             	add    %rdx,%rax
  800421831b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421831f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218323:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004218328:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421832c:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004218330:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004218333:	c1 e8 04             	shr    $0x4,%eax
  8004218336:	66 89 02             	mov    %ax,(%rdx)
  8004218339:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800421833d:	c1 e0 18             	shl    $0x18,%eax
  8004218340:	89 c6                	mov    %eax,%esi
  8004218342:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004218347:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  800421834e:	00 00 00 
  8004218351:	ff d0                	callq  *%rax
  8004218353:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004218358:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421835d:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  8004218364:	00 00 00 
  8004218367:	ff d0                	callq  *%rax
  8004218369:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421836e:	48 b8 6d 82 21 04 80 	movabs $0x800421826d,%rax
  8004218375:	00 00 00 
  8004218378:	ff d0                	callq  *%rax
  800421837a:	be 00 85 00 00       	mov    $0x8500,%esi
  800421837f:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004218384:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  800421838b:	00 00 00 
  800421838e:	ff d0                	callq  *%rax
  8004218390:	bf 64 00 00 00       	mov    $0x64,%edi
  8004218395:	48 b8 6d 82 21 04 80 	movabs $0x800421826d,%rax
  800421839c:	00 00 00 
  800421839f:	ff d0                	callq  *%rax
  80042183a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042183a8:	eb 4b                	jmp    80042183f5 <lapic_startap+0x17b>
  80042183aa:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042183ae:	c1 e0 18             	shl    $0x18,%eax
  80042183b1:	89 c6                	mov    %eax,%esi
  80042183b3:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042183b8:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  80042183bf:	00 00 00 
  80042183c2:	ff d0                	callq  *%rax
  80042183c4:	8b 45 c8             	mov    -0x38(%rbp),%eax
  80042183c7:	c1 e8 0c             	shr    $0xc,%eax
  80042183ca:	80 cc 06             	or     $0x6,%ah
  80042183cd:	89 c6                	mov    %eax,%esi
  80042183cf:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042183d4:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  80042183db:	00 00 00 
  80042183de:	ff d0                	callq  *%rax
  80042183e0:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042183e5:	48 b8 6d 82 21 04 80 	movabs $0x800421826d,%rax
  80042183ec:	00 00 00 
  80042183ef:	ff d0                	callq  *%rax
  80042183f1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042183f5:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  80042183f9:	7e af                	jle    80042183aa <lapic_startap+0x130>
  80042183fb:	c9                   	leaveq 
  80042183fc:	c3                   	retq   

00000080042183fd <lapic_ipi>:
  80042183fd:	55                   	push   %rbp
  80042183fe:	48 89 e5             	mov    %rsp,%rbp
  8004218401:	48 83 ec 08          	sub    $0x8,%rsp
  8004218405:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004218408:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421840b:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004218410:	89 c6                	mov    %eax,%esi
  8004218412:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004218417:	48 b8 d1 7f 21 04 80 	movabs $0x8004217fd1,%rax
  800421841e:	00 00 00 
  8004218421:	ff d0                	callq  *%rax
  8004218423:	90                   	nop
  8004218424:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  800421842b:	00 00 00 
  800421842e:	48 8b 00             	mov    (%rax),%rax
  8004218431:	48 05 00 03 00 00    	add    $0x300,%rax
  8004218437:	8b 00                	mov    (%rax),%eax
  8004218439:	25 00 10 00 00       	and    $0x1000,%eax
  800421843e:	85 c0                	test   %eax,%eax
  8004218440:	75 e2                	jne    8004218424 <lapic_ipi+0x27>
  8004218442:	c9                   	leaveq 
  8004218443:	c3                   	retq   

0000008004218444 <xchg>:
xchg(volatile uint32_t *addr,uint32_t newval){
  8004218444:	55                   	push   %rbp
  8004218445:	48 89 e5             	mov    %rsp,%rbp
  8004218448:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421844c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218450:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	__asm __volatile("lock; xchgl %0, %1":
  8004218453:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004218457:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421845a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421845e:	f0 87 02             	lock xchg %eax,(%rdx)
  8004218461:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return result;
  8004218464:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004218467:	c9                   	leaveq 
  8004218468:	c3                   	retq   

0000008004218469 <get_caller_pcs>:
  8004218469:	55                   	push   %rbp
  800421846a:	48 89 e5             	mov    %rsp,%rbp
  800421846d:	48 83 ec 28          	sub    $0x28,%rsp
  8004218471:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004218475:	48 89 e8             	mov    %rbp,%rax
  8004218478:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  800421847c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218480:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218484:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421848b:	eb 45                	jmp    80042184d2 <get_caller_pcs+0x69>
  800421848d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004218492:	74 44                	je     80042184d8 <get_caller_pcs+0x6f>
  8004218494:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800421849b:	00 00 00 
  800421849e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042184a2:	76 34                	jbe    80042184d8 <get_caller_pcs+0x6f>
  80042184a4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042184a7:	48 98                	cltq   
  80042184a9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042184b0:	00 
  80042184b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184b5:	48 01 c2             	add    %rax,%rdx
  80042184b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042184bc:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042184c0:	48 89 02             	mov    %rax,(%rdx)
  80042184c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042184c7:	48 8b 00             	mov    (%rax),%rax
  80042184ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042184ce:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042184d2:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  80042184d6:	7e b5                	jle    800421848d <get_caller_pcs+0x24>
  80042184d8:	eb 1f                	jmp    80042184f9 <get_caller_pcs+0x90>
  80042184da:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042184dd:	48 98                	cltq   
  80042184df:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042184e6:	00 
  80042184e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184eb:	48 01 d0             	add    %rdx,%rax
  80042184ee:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042184f5:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042184f9:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  80042184fd:	7e db                	jle    80042184da <get_caller_pcs+0x71>
  80042184ff:	c9                   	leaveq 
  8004218500:	c3                   	retq   

0000008004218501 <holding>:
  8004218501:	55                   	push   %rbp
  8004218502:	48 89 e5             	mov    %rsp,%rbp
  8004218505:	53                   	push   %rbx
  8004218506:	48 83 ec 18          	sub    $0x18,%rsp
  800421850a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421850e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218512:	8b 00                	mov    (%rax),%eax
  8004218514:	85 c0                	test   %eax,%eax
  8004218516:	74 3d                	je     8004218555 <holding+0x54>
  8004218518:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421851c:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004218520:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004218527:	00 00 00 
  800421852a:	ff d0                	callq  *%rax
  800421852c:	48 98                	cltq   
  800421852e:	48 c1 e0 03          	shl    $0x3,%rax
  8004218532:	48 89 c2             	mov    %rax,%rdx
  8004218535:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218539:	48 01 d0             	add    %rdx,%rax
  800421853c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004218543:	00 00 00 
  8004218546:	48 01 d0             	add    %rdx,%rax
  8004218549:	48 39 c3             	cmp    %rax,%rbx
  800421854c:	75 07                	jne    8004218555 <holding+0x54>
  800421854e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218553:	eb 05                	jmp    800421855a <holding+0x59>
  8004218555:	b8 00 00 00 00       	mov    $0x0,%eax
  800421855a:	48 83 c4 18          	add    $0x18,%rsp
  800421855e:	5b                   	pop    %rbx
  800421855f:	5d                   	pop    %rbp
  8004218560:	c3                   	retq   

0000008004218561 <__spin_initlock>:
  8004218561:	55                   	push   %rbp
  8004218562:	48 89 e5             	mov    %rsp,%rbp
  8004218565:	48 83 ec 10          	sub    $0x10,%rsp
  8004218569:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421856d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004218571:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218575:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  800421857b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421857f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004218583:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004218587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421858b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004218592:	00 
  8004218593:	c9                   	leaveq 
  8004218594:	c3                   	retq   

0000008004218595 <spin_lock>:
  8004218595:	55                   	push   %rbp
  8004218596:	48 89 e5             	mov    %rsp,%rbp
  8004218599:	53                   	push   %rbx
  800421859a:	48 83 ec 18          	sub    $0x18,%rsp
  800421859e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042185a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042185a6:	48 89 c7             	mov    %rax,%rdi
  80042185a9:	48 b8 01 85 21 04 80 	movabs $0x8004218501,%rax
  80042185b0:	00 00 00 
  80042185b3:	ff d0                	callq  *%rax
  80042185b5:	85 c0                	test   %eax,%eax
  80042185b7:	74 44                	je     80042185fd <spin_lock+0x68>
  80042185b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042185bd:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042185c1:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042185c8:	00 00 00 
  80042185cb:	ff d0                	callq  *%rax
  80042185cd:	49 89 d8             	mov    %rbx,%r8
  80042185d0:	89 c1                	mov    %eax,%ecx
  80042185d2:	48 ba 78 0b 22 04 80 	movabs $0x8004220b78,%rdx
  80042185d9:	00 00 00 
  80042185dc:	be 42 00 00 00       	mov    $0x42,%esi
  80042185e1:	48 bf a2 0b 22 04 80 	movabs $0x8004220ba2,%rdi
  80042185e8:	00 00 00 
  80042185eb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185f0:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  80042185f7:	00 00 00 
  80042185fa:	41 ff d1             	callq  *%r9
  80042185fd:	eb 02                	jmp    8004218601 <spin_lock+0x6c>
  80042185ff:	f3 90                	pause  
  8004218601:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218605:	be 01 00 00 00       	mov    $0x1,%esi
  800421860a:	48 89 c7             	mov    %rax,%rdi
  800421860d:	48 b8 44 84 21 04 80 	movabs $0x8004218444,%rax
  8004218614:	00 00 00 
  8004218617:	ff d0                	callq  *%rax
  8004218619:	85 c0                	test   %eax,%eax
  800421861b:	75 e2                	jne    80042185ff <spin_lock+0x6a>
  800421861d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004218624:	00 00 00 
  8004218627:	ff d0                	callq  *%rax
  8004218629:	48 98                	cltq   
  800421862b:	48 c1 e0 03          	shl    $0x3,%rax
  800421862f:	48 89 c2             	mov    %rax,%rdx
  8004218632:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218636:	48 01 d0             	add    %rdx,%rax
  8004218639:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004218640:	00 00 00 
  8004218643:	48 01 c2             	add    %rax,%rdx
  8004218646:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421864a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421864e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218652:	48 83 c0 18          	add    $0x18,%rax
  8004218656:	48 89 c7             	mov    %rax,%rdi
  8004218659:	48 b8 69 84 21 04 80 	movabs $0x8004218469,%rax
  8004218660:	00 00 00 
  8004218663:	ff d0                	callq  *%rax
  8004218665:	48 83 c4 18          	add    $0x18,%rsp
  8004218669:	5b                   	pop    %rbx
  800421866a:	5d                   	pop    %rbp
  800421866b:	c3                   	retq   

000000800421866c <spin_unlock>:
  800421866c:	55                   	push   %rbp
  800421866d:	48 89 e5             	mov    %rsp,%rbp
  8004218670:	41 54                	push   %r12
  8004218672:	53                   	push   %rbx
  8004218673:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  800421867a:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004218681:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218688:	48 89 c7             	mov    %rax,%rdi
  800421868b:	48 b8 01 85 21 04 80 	movabs $0x8004218501,%rax
  8004218692:	00 00 00 
  8004218695:	ff d0                	callq  *%rax
  8004218697:	85 c0                	test   %eax,%eax
  8004218699:	0f 85 d2 01 00 00    	jne    8004218871 <spin_unlock+0x205>
  800421869f:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042186a6:	48 8d 48 18          	lea    0x18(%rax),%rcx
  80042186aa:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  80042186b1:	ba 28 00 00 00       	mov    $0x28,%edx
  80042186b6:	48 89 ce             	mov    %rcx,%rsi
  80042186b9:	48 89 c7             	mov    %rax,%rdi
  80042186bc:	48 b8 94 12 21 04 80 	movabs $0x8004211294,%rax
  80042186c3:	00 00 00 
  80042186c6:	ff d0                	callq  *%rax
  80042186c8:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042186cf:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042186d3:	48 85 c0             	test   %rax,%rax
  80042186d6:	75 39                	jne    8004218711 <spin_unlock+0xa5>
  80042186d8:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042186df:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042186e3:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  80042186ea:	00 00 00 
  80042186ed:	ff d0                	callq  *%rax
  80042186ef:	48 89 da             	mov    %rbx,%rdx
  80042186f2:	89 c6                	mov    %eax,%esi
  80042186f4:	48 bf b8 0b 22 04 80 	movabs $0x8004220bb8,%rdi
  80042186fb:	00 00 00 
  80042186fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218703:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800421870a:	00 00 00 
  800421870d:	ff d1                	callq  *%rcx
  800421870f:	eb 4d                	jmp    800421875e <spin_unlock+0xf2>
  8004218711:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218718:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421871c:	0f b6 00             	movzbl (%rax),%eax
  800421871f:	44 0f b6 e0          	movzbl %al,%r12d
  8004218723:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421872a:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421872e:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  8004218735:	00 00 00 
  8004218738:	ff d0                	callq  *%rax
  800421873a:	44 89 e1             	mov    %r12d,%ecx
  800421873d:	48 89 da             	mov    %rbx,%rdx
  8004218740:	89 c6                	mov    %eax,%esi
  8004218742:	48 bf f8 0b 22 04 80 	movabs $0x8004220bf8,%rdi
  8004218749:	00 00 00 
  800421874c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218751:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  8004218758:	00 00 00 
  800421875b:	41 ff d0             	callq  *%r8
  800421875e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004218765:	e9 c3 00 00 00       	jmpq   800421882d <spin_unlock+0x1c1>
  800421876a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421876d:	48 98                	cltq   
  800421876f:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218776:	89 c0                	mov    %eax,%eax
  8004218778:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  800421877f:	48 89 d6             	mov    %rdx,%rsi
  8004218782:	48 89 c7             	mov    %rax,%rdi
  8004218785:	48 b8 75 fe 20 04 80 	movabs $0x800420fe75,%rax
  800421878c:	00 00 00 
  800421878f:	ff d0                	callq  *%rax
  8004218791:	85 c0                	test   %eax,%eax
  8004218793:	78 6b                	js     8004218800 <spin_unlock+0x194>
  8004218795:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218798:	48 98                	cltq   
  800421879a:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042187a1:	89 c2                	mov    %eax,%edx
  80042187a3:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  80042187aa:	48 29 c2             	sub    %rax,%rdx
  80042187ad:	49 89 d0             	mov    %rdx,%r8
  80042187b0:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  80042187b7:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  80042187bd:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  80042187c3:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  80042187ca:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042187cd:	48 98                	cltq   
  80042187cf:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042187d6:	4c 89 04 24          	mov    %r8,(%rsp)
  80042187da:	49 89 f9             	mov    %rdi,%r9
  80042187dd:	41 89 f0             	mov    %esi,%r8d
  80042187e0:	89 c6                	mov    %eax,%esi
  80042187e2:	48 bf 2e 0c 22 04 80 	movabs $0x8004220c2e,%rdi
  80042187e9:	00 00 00 
  80042187ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187f1:	49 ba 93 9c 20 04 80 	movabs $0x8004209c93,%r10
  80042187f8:	00 00 00 
  80042187fb:	41 ff d2             	callq  *%r10
  80042187fe:	eb 29                	jmp    8004218829 <spin_unlock+0x1bd>
  8004218800:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218803:	48 98                	cltq   
  8004218805:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421880c:	89 c6                	mov    %eax,%esi
  800421880e:	48 bf 45 0c 22 04 80 	movabs $0x8004220c45,%rdi
  8004218815:	00 00 00 
  8004218818:	b8 00 00 00 00       	mov    $0x0,%eax
  800421881d:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004218824:	00 00 00 
  8004218827:	ff d2                	callq  *%rdx
  8004218829:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800421882d:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  8004218831:	7f 14                	jg     8004218847 <spin_unlock+0x1db>
  8004218833:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218836:	48 98                	cltq   
  8004218838:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421883f:	85 c0                	test   %eax,%eax
  8004218841:	0f 85 23 ff ff ff    	jne    800421876a <spin_unlock+0xfe>
  8004218847:	48 ba 4d 0c 22 04 80 	movabs $0x8004220c4d,%rdx
  800421884e:	00 00 00 
  8004218851:	be 6c 00 00 00       	mov    $0x6c,%esi
  8004218856:	48 bf a2 0b 22 04 80 	movabs $0x8004220ba2,%rdi
  800421885d:	00 00 00 
  8004218860:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218865:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421886c:	00 00 00 
  800421886f:	ff d1                	callq  *%rcx
  8004218871:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218878:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  800421887f:	00 
  8004218880:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218887:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421888e:	00 
  800421888f:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218896:	be 00 00 00 00       	mov    $0x0,%esi
  800421889b:	48 89 c7             	mov    %rax,%rdi
  800421889e:	48 b8 44 84 21 04 80 	movabs $0x8004218444,%rax
  80042188a5:	00 00 00 
  80042188a8:	ff d0                	callq  *%rax
  80042188aa:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  80042188b1:	5b                   	pop    %rbx
  80042188b2:	41 5c                	pop    %r12
  80042188b4:	5d                   	pop    %rbp
  80042188b5:	c3                   	retq   

00000080042188b6 <e1000_attach>:
  80042188b6:	55                   	push   %rbp
  80042188b7:	48 89 e5             	mov    %rsp,%rbp
  80042188ba:	48 83 ec 40          	sub    $0x40,%rsp
  80042188be:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042188c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042188c6:	48 89 c7             	mov    %rax,%rdi
  80042188c9:	48 b8 73 97 21 04 80 	movabs $0x8004219773,%rax
  80042188d0:	00 00 00 
  80042188d3:	ff d0                	callq  *%rax
  80042188d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042188d9:	8b 40 30             	mov    0x30(%rax),%eax
  80042188dc:	89 c2                	mov    %eax,%edx
  80042188de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042188e2:	8b 40 18             	mov    0x18(%rax),%eax
  80042188e5:	89 c0                	mov    %eax,%eax
  80042188e7:	48 89 d6             	mov    %rdx,%rsi
  80042188ea:	48 89 c7             	mov    %rax,%rdi
  80042188ed:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042188f4:	00 00 00 
  80042188f7:	ff d0                	callq  *%rax
  80042188f9:	48 ba 20 d7 4d 04 80 	movabs $0x80044dd720,%rdx
  8004218900:	00 00 00 
  8004218903:	48 89 02             	mov    %rax,(%rdx)
  8004218906:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421890d:	e9 a9 00 00 00       	jmpq   80042189bb <e1000_attach+0x105>
  8004218912:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218915:	48 98                	cltq   
  8004218917:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  800421891e:	48 b8 40 d8 4d 04 80 	movabs $0x80044dd840,%rax
  8004218925:	00 00 00 
  8004218928:	48 01 d0             	add    %rdx,%rax
  800421892b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421892f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218936:	00 00 00 
  8004218939:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421893d:	77 32                	ja     8004218971 <e1000_attach+0xbb>
  800421893f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004218943:	48 89 c1             	mov    %rax,%rcx
  8004218946:	48 ba 60 0c 22 04 80 	movabs $0x8004220c60,%rdx
  800421894d:	00 00 00 
  8004218950:	be 97 00 00 00       	mov    $0x97,%esi
  8004218955:	48 bf 84 0c 22 04 80 	movabs $0x8004220c84,%rdi
  800421895c:	00 00 00 
  800421895f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218964:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421896b:	00 00 00 
  800421896e:	41 ff d0             	callq  *%r8
  8004218971:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218978:	ff ff ff 
  800421897b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421897f:	48 01 c2             	add    %rax,%rdx
  8004218982:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  8004218989:	00 00 00 
  800421898c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421898f:	48 63 c9             	movslq %ecx,%rcx
  8004218992:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218996:	48 01 c8             	add    %rcx,%rax
  8004218999:	48 89 10             	mov    %rdx,(%rax)
  800421899c:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  80042189a3:	00 00 00 
  80042189a6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042189a9:	48 63 d2             	movslq %edx,%rdx
  80042189ac:	48 c1 e2 04          	shl    $0x4,%rdx
  80042189b0:	48 01 d0             	add    %rdx,%rax
  80042189b3:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  80042189b7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042189bb:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042189bf:	0f 8e 4d ff ff ff    	jle    8004218912 <e1000_attach+0x5c>
  80042189c5:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042189cc:	00 00 00 
  80042189cf:	48 8b 00             	mov    (%rax),%rax
  80042189d2:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  80042189d9:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  80042189e0:	00 00 00 
  80042189e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042189e7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042189ee:	00 00 00 
  80042189f1:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042189f5:	77 32                	ja     8004218a29 <e1000_attach+0x173>
  80042189f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042189fb:	48 89 c1             	mov    %rax,%rcx
  80042189fe:	48 ba 60 0c 22 04 80 	movabs $0x8004220c60,%rdx
  8004218a05:	00 00 00 
  8004218a08:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004218a0d:	48 bf 84 0c 22 04 80 	movabs $0x8004220c84,%rdi
  8004218a14:	00 00 00 
  8004218a17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a1c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218a23:	00 00 00 
  8004218a26:	41 ff d0             	callq  *%r8
  8004218a29:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004218a30:	ff ff ff 
  8004218a33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a37:	48 01 c8             	add    %rcx,%rax
  8004218a3a:	89 02                	mov    %eax,(%rdx)
  8004218a3c:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218a43:	00 00 00 
  8004218a46:	48 8b 00             	mov    (%rax),%rax
  8004218a49:	48 05 08 38 00 00    	add    $0x3808,%rax
  8004218a4f:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  8004218a55:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218a5c:	00 00 00 
  8004218a5f:	48 8b 00             	mov    (%rax),%rax
  8004218a62:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004218a69:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218a70:	00 00 00 
  8004218a73:	48 8b 00             	mov    (%rax),%rax
  8004218a76:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218a7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a82:	89 01                	mov    %eax,(%rcx)
  8004218a84:	89 02                	mov    %eax,(%rdx)
  8004218a86:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218a8d:	00 00 00 
  8004218a90:	48 8b 00             	mov    (%rax),%rax
  8004218a93:	48 05 00 04 00 00    	add    $0x400,%rax
  8004218a99:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  8004218a9f:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218aa6:	00 00 00 
  8004218aa9:	48 8b 00             	mov    (%rax),%rax
  8004218aac:	48 05 10 04 00 00    	add    $0x410,%rax
  8004218ab2:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004218ab8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218abf:	e9 8e 00 00 00       	jmpq   8004218b52 <e1000_attach+0x29c>
  8004218ac4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218ac7:	48 98                	cltq   
  8004218ac9:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218acd:	48 89 c2             	mov    %rax,%rdx
  8004218ad0:	48 b8 a0 75 4e 04 80 	movabs $0x80044e75a0,%rax
  8004218ad7:	00 00 00 
  8004218ada:	48 01 d0             	add    %rdx,%rax
  8004218add:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218ae1:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218ae8:	00 00 00 
  8004218aeb:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004218aef:	77 32                	ja     8004218b23 <e1000_attach+0x26d>
  8004218af1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218af5:	48 89 c1             	mov    %rax,%rcx
  8004218af8:	48 ba 60 0c 22 04 80 	movabs $0x8004220c60,%rdx
  8004218aff:	00 00 00 
  8004218b02:	be b8 00 00 00       	mov    $0xb8,%esi
  8004218b07:	48 bf 84 0c 22 04 80 	movabs $0x8004220c84,%rdi
  8004218b0e:	00 00 00 
  8004218b11:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b16:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218b1d:	00 00 00 
  8004218b20:	41 ff d0             	callq  *%r8
  8004218b23:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218b2a:	ff ff ff 
  8004218b2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218b31:	48 01 c2             	add    %rax,%rdx
  8004218b34:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218b3b:	00 00 00 
  8004218b3e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218b41:	48 63 c9             	movslq %ecx,%rcx
  8004218b44:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218b48:	48 01 c8             	add    %rcx,%rax
  8004218b4b:	48 89 10             	mov    %rdx,(%rax)
  8004218b4e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218b52:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  8004218b59:	0f 8e 65 ff ff ff    	jle    8004218ac4 <e1000_attach+0x20e>
  8004218b5f:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218b66:	00 00 00 
  8004218b69:	48 8b 00             	mov    (%rax),%rax
  8004218b6c:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  8004218b73:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218b7a:	00 00 00 
  8004218b7d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004218b81:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218b88:	00 00 00 
  8004218b8b:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004218b8f:	77 32                	ja     8004218bc3 <e1000_attach+0x30d>
  8004218b91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218b95:	48 89 c1             	mov    %rax,%rcx
  8004218b98:	48 ba 60 0c 22 04 80 	movabs $0x8004220c60,%rdx
  8004218b9f:	00 00 00 
  8004218ba2:	be ba 00 00 00       	mov    $0xba,%esi
  8004218ba7:	48 bf 84 0c 22 04 80 	movabs $0x8004220c84,%rdi
  8004218bae:	00 00 00 
  8004218bb1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bb6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218bbd:	00 00 00 
  8004218bc0:	41 ff d0             	callq  *%r8
  8004218bc3:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004218bca:	ff ff ff 
  8004218bcd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218bd1:	48 01 c8             	add    %rcx,%rax
  8004218bd4:	89 02                	mov    %eax,(%rdx)
  8004218bd6:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218bdd:	00 00 00 
  8004218be0:	48 8b 00             	mov    (%rax),%rax
  8004218be3:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004218be9:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004218bef:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218bf6:	00 00 00 
  8004218bf9:	48 8b 00             	mov    (%rax),%rax
  8004218bfc:	48 05 10 28 00 00    	add    $0x2810,%rax
  8004218c02:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218c08:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218c0f:	00 00 00 
  8004218c12:	48 8b 00             	mov    (%rax),%rax
  8004218c15:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218c1b:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004218c21:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218c28:	00 00 00 
  8004218c2b:	48 8b 00             	mov    (%rax),%rax
  8004218c2e:	48 05 00 01 00 00    	add    $0x100,%rax
  8004218c34:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  8004218c3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c3f:	c9                   	leaveq 
  8004218c40:	c3                   	retq   

0000008004218c41 <e1000_transmit>:
  8004218c41:	55                   	push   %rbp
  8004218c42:	48 89 e5             	mov    %rsp,%rbp
  8004218c45:	48 83 ec 20          	sub    $0x20,%rsp
  8004218c49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218c4d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218c50:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218c57:	00 00 00 
  8004218c5a:	48 8b 00             	mov    (%rax),%rax
  8004218c5d:	48 85 c0             	test   %rax,%rax
  8004218c60:	74 09                	je     8004218c6b <e1000_transmit+0x2a>
  8004218c62:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004218c69:	76 0a                	jbe    8004218c75 <e1000_transmit+0x34>
  8004218c6b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004218c70:	e9 39 01 00 00       	jmpq   8004218dae <e1000_transmit+0x16d>
  8004218c75:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218c7c:	00 00 00 
  8004218c7f:	48 8b 00             	mov    (%rax),%rax
  8004218c82:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004218c88:	8b 00                	mov    (%rax),%eax
  8004218c8a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218c8d:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  8004218c94:	00 00 00 
  8004218c97:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218c9a:	48 63 d2             	movslq %edx,%rdx
  8004218c9d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218ca1:	48 01 d0             	add    %rdx,%rax
  8004218ca4:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218ca8:	0f b6 c0             	movzbl %al,%eax
  8004218cab:	83 e0 01             	and    $0x1,%eax
  8004218cae:	85 c0                	test   %eax,%eax
  8004218cb0:	75 25                	jne    8004218cd7 <e1000_transmit+0x96>
  8004218cb2:	48 bf 94 0c 22 04 80 	movabs $0x8004220c94,%rdi
  8004218cb9:	00 00 00 
  8004218cbc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218cc1:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  8004218cc8:	00 00 00 
  8004218ccb:	ff d2                	callq  *%rdx
  8004218ccd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218cd2:	e9 d7 00 00 00       	jmpq   8004218dae <e1000_transmit+0x16d>
  8004218cd7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218cda:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218cdd:	48 98                	cltq   
  8004218cdf:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004218ce6:	48 b8 40 d8 4d 04 80 	movabs $0x80044dd840,%rax
  8004218ced:	00 00 00 
  8004218cf0:	48 01 c1             	add    %rax,%rcx
  8004218cf3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cf7:	48 89 c6             	mov    %rax,%rsi
  8004218cfa:	48 89 cf             	mov    %rcx,%rdi
  8004218cfd:	48 b8 94 12 21 04 80 	movabs $0x8004211294,%rax
  8004218d04:	00 00 00 
  8004218d07:	ff d0                	callq  *%rax
  8004218d09:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218d0c:	48 ba 30 d7 4d 04 80 	movabs $0x80044dd730,%rdx
  8004218d13:	00 00 00 
  8004218d16:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218d19:	48 63 c9             	movslq %ecx,%rcx
  8004218d1c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218d20:	48 01 ca             	add    %rcx,%rdx
  8004218d23:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004218d27:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  8004218d2e:	00 00 00 
  8004218d31:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218d34:	48 63 d2             	movslq %edx,%rdx
  8004218d37:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218d3b:	48 01 d0             	add    %rdx,%rax
  8004218d3e:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218d42:	83 e0 fe             	and    $0xfffffffe,%eax
  8004218d45:	89 c2                	mov    %eax,%edx
  8004218d47:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  8004218d4e:	00 00 00 
  8004218d51:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218d54:	48 63 c9             	movslq %ecx,%rcx
  8004218d57:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218d5b:	48 01 c8             	add    %rcx,%rax
  8004218d5e:	88 50 0c             	mov    %dl,0xc(%rax)
  8004218d61:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  8004218d68:	00 00 00 
  8004218d6b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218d6e:	48 63 d2             	movslq %edx,%rdx
  8004218d71:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218d75:	48 01 d0             	add    %rdx,%rax
  8004218d78:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  8004218d7c:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218d83:	00 00 00 
  8004218d86:	48 8b 00             	mov    (%rax),%rax
  8004218d89:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218d90:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218d93:	8d 50 01             	lea    0x1(%rax),%edx
  8004218d96:	89 d0                	mov    %edx,%eax
  8004218d98:	c1 f8 1f             	sar    $0x1f,%eax
  8004218d9b:	c1 e8 1c             	shr    $0x1c,%eax
  8004218d9e:	01 c2                	add    %eax,%edx
  8004218da0:	83 e2 0f             	and    $0xf,%edx
  8004218da3:	29 c2                	sub    %eax,%edx
  8004218da5:	89 d0                	mov    %edx,%eax
  8004218da7:	89 01                	mov    %eax,(%rcx)
  8004218da9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218dae:	c9                   	leaveq 
  8004218daf:	c3                   	retq   

0000008004218db0 <e1000_receive>:
  8004218db0:	55                   	push   %rbp
  8004218db1:	48 89 e5             	mov    %rsp,%rbp
  8004218db4:	48 83 ec 20          	sub    $0x20,%rsp
  8004218db8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218dbc:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218dbf:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218dc6:	00 00 00 
  8004218dc9:	48 8b 00             	mov    (%rax),%rax
  8004218dcc:	48 85 c0             	test   %rax,%rax
  8004218dcf:	75 0a                	jne    8004218ddb <e1000_receive+0x2b>
  8004218dd1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218dd6:	e9 59 01 00 00       	jmpq   8004218f34 <e1000_receive+0x184>
  8004218ddb:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218de2:	00 00 00 
  8004218de5:	48 8b 00             	mov    (%rax),%rax
  8004218de8:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218dee:	8b 00                	mov    (%rax),%eax
  8004218df0:	8d 48 01             	lea    0x1(%rax),%ecx
  8004218df3:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004218df8:	89 c8                	mov    %ecx,%eax
  8004218dfa:	f7 e2                	mul    %edx
  8004218dfc:	89 d0                	mov    %edx,%eax
  8004218dfe:	c1 e8 06             	shr    $0x6,%eax
  8004218e01:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004218e07:	29 c1                	sub    %eax,%ecx
  8004218e09:	89 c8                	mov    %ecx,%eax
  8004218e0b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218e0e:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218e15:	00 00 00 
  8004218e18:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218e1b:	48 63 d2             	movslq %edx,%rdx
  8004218e1e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218e22:	48 01 d0             	add    %rdx,%rax
  8004218e25:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218e29:	0f b6 c0             	movzbl %al,%eax
  8004218e2c:	83 e0 01             	and    $0x1,%eax
  8004218e2f:	85 c0                	test   %eax,%eax
  8004218e31:	75 0a                	jne    8004218e3d <e1000_receive+0x8d>
  8004218e33:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e38:	e9 f7 00 00 00       	jmpq   8004218f34 <e1000_receive+0x184>
  8004218e3d:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218e44:	00 00 00 
  8004218e47:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218e4a:	48 63 d2             	movslq %edx,%rdx
  8004218e4d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218e51:	48 01 d0             	add    %rdx,%rax
  8004218e54:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218e58:	0f b6 c0             	movzbl %al,%eax
  8004218e5b:	83 e0 02             	and    $0x2,%eax
  8004218e5e:	85 c0                	test   %eax,%eax
  8004218e60:	75 35                	jne    8004218e97 <e1000_receive+0xe7>
  8004218e62:	48 b9 a8 0c 22 04 80 	movabs $0x8004220ca8,%rcx
  8004218e69:	00 00 00 
  8004218e6c:	48 ba d2 0c 22 04 80 	movabs $0x8004220cd2,%rdx
  8004218e73:	00 00 00 
  8004218e76:	be ef 00 00 00       	mov    $0xef,%esi
  8004218e7b:	48 bf 84 0c 22 04 80 	movabs $0x8004220c84,%rdi
  8004218e82:	00 00 00 
  8004218e85:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e8a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218e91:	00 00 00 
  8004218e94:	41 ff d0             	callq  *%r8
  8004218e97:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218e9a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218e9d:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218ea4:	00 00 00 
  8004218ea7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218eaa:	48 63 d2             	movslq %edx,%rdx
  8004218ead:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218eb1:	48 01 d0             	add    %rdx,%rax
  8004218eb4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218eb8:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004218ebc:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218ec0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218ec3:	39 c2                	cmp    %eax,%edx
  8004218ec5:	0f 46 c2             	cmovbe %edx,%eax
  8004218ec8:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218ecb:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218ece:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218ed1:	48 98                	cltq   
  8004218ed3:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218ed7:	48 89 c1             	mov    %rax,%rcx
  8004218eda:	48 b8 a0 75 4e 04 80 	movabs $0x80044e75a0,%rax
  8004218ee1:	00 00 00 
  8004218ee4:	48 01 c1             	add    %rax,%rcx
  8004218ee7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218eeb:	48 89 ce             	mov    %rcx,%rsi
  8004218eee:	48 89 c7             	mov    %rax,%rdi
  8004218ef1:	48 b8 94 12 21 04 80 	movabs $0x8004211294,%rax
  8004218ef8:	00 00 00 
  8004218efb:	ff d0                	callq  *%rax
  8004218efd:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218f04:	00 00 00 
  8004218f07:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218f0a:	48 63 d2             	movslq %edx,%rdx
  8004218f0d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218f11:	48 01 d0             	add    %rdx,%rax
  8004218f14:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004218f18:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218f1f:	00 00 00 
  8004218f22:	48 8b 00             	mov    (%rax),%rax
  8004218f25:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004218f2c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218f2f:	89 02                	mov    %eax,(%rdx)
  8004218f31:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218f34:	c9                   	leaveq 
  8004218f35:	c3                   	retq   

0000008004218f36 <pci_conf1_set_addr>:
  8004218f36:	55                   	push   %rbp
  8004218f37:	48 89 e5             	mov    %rsp,%rbp
  8004218f3a:	48 83 ec 20          	sub    $0x20,%rsp
  8004218f3e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218f41:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218f44:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004218f47:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004218f4a:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004218f51:	76 35                	jbe    8004218f88 <pci_conf1_set_addr+0x52>
  8004218f53:	48 b9 e8 0c 22 04 80 	movabs $0x8004220ce8,%rcx
  8004218f5a:	00 00 00 
  8004218f5d:	48 ba f2 0c 22 04 80 	movabs $0x8004220cf2,%rdx
  8004218f64:	00 00 00 
  8004218f67:	be 31 00 00 00       	mov    $0x31,%esi
  8004218f6c:	48 bf 07 0d 22 04 80 	movabs $0x8004220d07,%rdi
  8004218f73:	00 00 00 
  8004218f76:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218f7b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218f82:	00 00 00 
  8004218f85:	41 ff d0             	callq  *%r8
  8004218f88:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004218f8c:	76 35                	jbe    8004218fc3 <pci_conf1_set_addr+0x8d>
  8004218f8e:	48 b9 15 0d 22 04 80 	movabs $0x8004220d15,%rcx
  8004218f95:	00 00 00 
  8004218f98:	48 ba f2 0c 22 04 80 	movabs $0x8004220cf2,%rdx
  8004218f9f:	00 00 00 
  8004218fa2:	be 32 00 00 00       	mov    $0x32,%esi
  8004218fa7:	48 bf 07 0d 22 04 80 	movabs $0x8004220d07,%rdi
  8004218fae:	00 00 00 
  8004218fb1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218fb6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218fbd:	00 00 00 
  8004218fc0:	41 ff d0             	callq  *%r8
  8004218fc3:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004218fc7:	76 35                	jbe    8004218ffe <pci_conf1_set_addr+0xc8>
  8004218fc9:	48 b9 1e 0d 22 04 80 	movabs $0x8004220d1e,%rcx
  8004218fd0:	00 00 00 
  8004218fd3:	48 ba f2 0c 22 04 80 	movabs $0x8004220cf2,%rdx
  8004218fda:	00 00 00 
  8004218fdd:	be 33 00 00 00       	mov    $0x33,%esi
  8004218fe2:	48 bf 07 0d 22 04 80 	movabs $0x8004220d07,%rdi
  8004218fe9:	00 00 00 
  8004218fec:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218ff1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218ff8:	00 00 00 
  8004218ffb:	41 ff d0             	callq  *%r8
  8004218ffe:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004219005:	76 35                	jbe    800421903c <pci_conf1_set_addr+0x106>
  8004219007:	48 b9 27 0d 22 04 80 	movabs $0x8004220d27,%rcx
  800421900e:	00 00 00 
  8004219011:	48 ba f2 0c 22 04 80 	movabs $0x8004220cf2,%rdx
  8004219018:	00 00 00 
  800421901b:	be 34 00 00 00       	mov    $0x34,%esi
  8004219020:	48 bf 07 0d 22 04 80 	movabs $0x8004220d07,%rdi
  8004219027:	00 00 00 
  800421902a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421902f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219036:	00 00 00 
  8004219039:	41 ff d0             	callq  *%r8
  800421903c:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421903f:	83 e0 03             	and    $0x3,%eax
  8004219042:	85 c0                	test   %eax,%eax
  8004219044:	74 35                	je     800421907b <pci_conf1_set_addr+0x145>
  8004219046:	48 b9 34 0d 22 04 80 	movabs $0x8004220d34,%rcx
  800421904d:	00 00 00 
  8004219050:	48 ba f2 0c 22 04 80 	movabs $0x8004220cf2,%rdx
  8004219057:	00 00 00 
  800421905a:	be 35 00 00 00       	mov    $0x35,%esi
  800421905f:	48 bf 07 0d 22 04 80 	movabs $0x8004220d07,%rdi
  8004219066:	00 00 00 
  8004219069:	b8 00 00 00 00       	mov    $0x0,%eax
  800421906e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219075:	00 00 00 
  8004219078:	41 ff d0             	callq  *%r8
  800421907b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421907e:	c1 e0 10             	shl    $0x10,%eax
  8004219081:	89 c2                	mov    %eax,%edx
  8004219083:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219086:	c1 e0 0b             	shl    $0xb,%eax
  8004219089:	09 c2                	or     %eax,%edx
  800421908b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421908e:	c1 e0 08             	shl    $0x8,%eax
  8004219091:	09 d0                	or     %edx,%eax
  8004219093:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004219096:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421909b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421909e:	48 b8 e4 47 23 04 80 	movabs $0x80042347e4,%rax
  80042190a5:	00 00 00 
  80042190a8:	8b 00                	mov    (%rax),%eax
  80042190aa:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042190ad:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042190b0:	89 45 f4             	mov    %eax,-0xc(%rbp)
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  80042190b3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042190b6:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042190b9:	ef                   	out    %eax,(%dx)
  80042190ba:	c9                   	leaveq 
  80042190bb:	c3                   	retq   

00000080042190bc <pci_conf_read>:
  80042190bc:	55                   	push   %rbp
  80042190bd:	48 89 e5             	mov    %rsp,%rbp
  80042190c0:	48 83 ec 20          	sub    $0x20,%rsp
  80042190c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042190c8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042190cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190cf:	8b 50 0c             	mov    0xc(%rax),%edx
  80042190d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190d6:	8b 70 08             	mov    0x8(%rax),%esi
  80042190d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190dd:	48 8b 00             	mov    (%rax),%rax
  80042190e0:	8b 40 08             	mov    0x8(%rax),%eax
  80042190e3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  80042190e6:	89 c7                	mov    %eax,%edi
  80042190e8:	48 b8 36 8f 21 04 80 	movabs $0x8004218f36,%rax
  80042190ef:	00 00 00 
  80042190f2:	ff d0                	callq  *%rax
  80042190f4:	48 b8 e8 47 23 04 80 	movabs $0x80042347e8,%rax
  80042190fb:	00 00 00 
  80042190fe:	8b 00                	mov    (%rax),%eax
  8004219100:	89 45 fc             	mov    %eax,-0x4(%rbp)
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004219103:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219106:	89 c2                	mov    %eax,%edx
  8004219108:	ed                   	in     (%dx),%eax
  8004219109:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  800421910c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421910f:	c9                   	leaveq 
  8004219110:	c3                   	retq   

0000008004219111 <pci_conf_write>:
  8004219111:	55                   	push   %rbp
  8004219112:	48 89 e5             	mov    %rsp,%rbp
  8004219115:	48 83 ec 20          	sub    $0x20,%rsp
  8004219119:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421911d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004219120:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004219123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219127:	8b 50 0c             	mov    0xc(%rax),%edx
  800421912a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421912e:	8b 70 08             	mov    0x8(%rax),%esi
  8004219131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219135:	48 8b 00             	mov    (%rax),%rax
  8004219138:	8b 40 08             	mov    0x8(%rax),%eax
  800421913b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800421913e:	89 c7                	mov    %eax,%edi
  8004219140:	48 b8 36 8f 21 04 80 	movabs $0x8004218f36,%rax
  8004219147:	00 00 00 
  800421914a:	ff d0                	callq  *%rax
  800421914c:	48 b8 e8 47 23 04 80 	movabs $0x80042347e8,%rax
  8004219153:	00 00 00 
  8004219156:	8b 00                	mov    (%rax),%eax
  8004219158:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421915b:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421915e:	89 45 f8             	mov    %eax,-0x8(%rbp)
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004219161:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219164:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004219167:	ef                   	out    %eax,(%dx)
  8004219168:	c9                   	leaveq 
  8004219169:	c3                   	retq   

000000800421916a <pci_attach_match>:
  800421916a:	55                   	push   %rbp
  800421916b:	48 89 e5             	mov    %rsp,%rbp
  800421916e:	48 83 ec 30          	sub    $0x30,%rsp
  8004219172:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004219175:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004219178:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  800421917c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004219180:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219187:	e9 aa 00 00 00       	jmpq   8004219236 <pci_attach_match+0xcc>
  800421918c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421918f:	48 c1 e0 04          	shl    $0x4,%rax
  8004219193:	48 89 c2             	mov    %rax,%rdx
  8004219196:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421919a:	48 01 d0             	add    %rdx,%rax
  800421919d:	8b 00                	mov    (%rax),%eax
  800421919f:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042191a2:	0f 85 8a 00 00 00    	jne    8004219232 <pci_attach_match+0xc8>
  80042191a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042191ab:	48 c1 e0 04          	shl    $0x4,%rax
  80042191af:	48 89 c2             	mov    %rax,%rdx
  80042191b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042191b6:	48 01 d0             	add    %rdx,%rax
  80042191b9:	8b 40 04             	mov    0x4(%rax),%eax
  80042191bc:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  80042191bf:	75 71                	jne    8004219232 <pci_attach_match+0xc8>
  80042191c1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042191c4:	48 c1 e0 04          	shl    $0x4,%rax
  80042191c8:	48 89 c2             	mov    %rax,%rdx
  80042191cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042191cf:	48 01 d0             	add    %rdx,%rax
  80042191d2:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042191d6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042191da:	48 89 d7             	mov    %rdx,%rdi
  80042191dd:	ff d0                	callq  *%rax
  80042191df:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042191e2:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042191e6:	7e 05                	jle    80042191ed <pci_attach_match+0x83>
  80042191e8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042191eb:	eb 6c                	jmp    8004219259 <pci_attach_match+0xef>
  80042191ed:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042191f1:	79 3f                	jns    8004219232 <pci_attach_match+0xc8>
  80042191f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042191f6:	48 c1 e0 04          	shl    $0x4,%rax
  80042191fa:	48 89 c2             	mov    %rax,%rdx
  80042191fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219201:	48 01 d0             	add    %rdx,%rax
  8004219204:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004219208:	8b 75 f8             	mov    -0x8(%rbp),%esi
  800421920b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421920e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219211:	41 89 f0             	mov    %esi,%r8d
  8004219214:	89 c6                	mov    %eax,%esi
  8004219216:	48 bf 48 0d 22 04 80 	movabs $0x8004220d48,%rdi
  800421921d:	00 00 00 
  8004219220:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219225:	49 b9 93 9c 20 04 80 	movabs $0x8004209c93,%r9
  800421922c:	00 00 00 
  800421922f:	41 ff d1             	callq  *%r9
  8004219232:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219236:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219239:	48 c1 e0 04          	shl    $0x4,%rax
  800421923d:	48 89 c2             	mov    %rax,%rdx
  8004219240:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219244:	48 01 d0             	add    %rdx,%rax
  8004219247:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421924b:	48 85 c0             	test   %rax,%rax
  800421924e:	0f 85 38 ff ff ff    	jne    800421918c <pci_attach_match+0x22>
  8004219254:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219259:	c9                   	leaveq 
  800421925a:	c3                   	retq   

000000800421925b <pci_attach>:
  800421925b:	55                   	push   %rbp
  800421925c:	48 89 e5             	mov    %rsp,%rbp
  800421925f:	48 83 ec 10          	sub    $0x10,%rsp
  8004219263:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421926b:	8b 40 14             	mov    0x14(%rax),%eax
  800421926e:	c1 e8 10             	shr    $0x10,%eax
  8004219271:	0f b6 c0             	movzbl %al,%eax
  8004219274:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219278:	8b 52 14             	mov    0x14(%rdx),%edx
  800421927b:	89 d7                	mov    %edx,%edi
  800421927d:	c1 ef 18             	shr    $0x18,%edi
  8004219280:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219284:	48 89 d1             	mov    %rdx,%rcx
  8004219287:	48 ba 00 48 23 04 80 	movabs $0x8004234800,%rdx
  800421928e:	00 00 00 
  8004219291:	89 c6                	mov    %eax,%esi
  8004219293:	48 b8 6a 91 21 04 80 	movabs $0x800421916a,%rax
  800421929a:	00 00 00 
  800421929d:	ff d0                	callq  *%rax
  800421929f:	85 c0                	test   %eax,%eax
  80042192a1:	75 39                	jne    80042192dc <pci_attach+0x81>
  80042192a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042192a7:	8b 40 10             	mov    0x10(%rax),%eax
  80042192aa:	c1 e8 10             	shr    $0x10,%eax
  80042192ad:	89 c6                	mov    %eax,%esi
  80042192af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042192b3:	8b 40 10             	mov    0x10(%rax),%eax
  80042192b6:	0f b7 c0             	movzwl %ax,%eax
  80042192b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042192bd:	48 89 d1             	mov    %rdx,%rcx
  80042192c0:	48 ba 20 48 23 04 80 	movabs $0x8004234820,%rdx
  80042192c7:	00 00 00 
  80042192ca:	89 c7                	mov    %eax,%edi
  80042192cc:	48 b8 6a 91 21 04 80 	movabs $0x800421916a,%rax
  80042192d3:	00 00 00 
  80042192d6:	ff d0                	callq  *%rax
  80042192d8:	85 c0                	test   %eax,%eax
  80042192da:	74 07                	je     80042192e3 <pci_attach+0x88>
  80042192dc:	b8 01 00 00 00       	mov    $0x1,%eax
  80042192e1:	eb 05                	jmp    80042192e8 <pci_attach+0x8d>
  80042192e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042192e8:	c9                   	leaveq 
  80042192e9:	c3                   	retq   

00000080042192ea <pci_print_func>:
  80042192ea:	55                   	push   %rbp
  80042192eb:	48 89 e5             	mov    %rsp,%rbp
  80042192ee:	48 83 ec 40          	sub    $0x40,%rsp
  80042192f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042192f6:	48 b8 40 48 23 04 80 	movabs $0x8004234840,%rax
  80042192fd:	00 00 00 
  8004219300:	48 8b 00             	mov    (%rax),%rax
  8004219303:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219307:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421930b:	8b 40 14             	mov    0x14(%rax),%eax
  800421930e:	c1 e8 18             	shr    $0x18,%eax
  8004219311:	83 f8 06             	cmp    $0x6,%eax
  8004219314:	77 20                	ja     8004219336 <pci_print_func+0x4c>
  8004219316:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421931a:	8b 40 14             	mov    0x14(%rax),%eax
  800421931d:	c1 e8 18             	shr    $0x18,%eax
  8004219320:	89 c2                	mov    %eax,%edx
  8004219322:	48 b8 40 48 23 04 80 	movabs $0x8004234840,%rax
  8004219329:	00 00 00 
  800421932c:	89 d2                	mov    %edx,%edx
  800421932e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004219332:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219336:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421933a:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  800421933e:	0f b6 f8             	movzbl %al,%edi
  8004219341:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219345:	8b 40 14             	mov    0x14(%rax),%eax
  8004219348:	c1 e8 10             	shr    $0x10,%eax
  800421934b:	0f b6 f0             	movzbl %al,%esi
  800421934e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219352:	8b 40 14             	mov    0x14(%rax),%eax
  8004219355:	c1 e8 18             	shr    $0x18,%eax
  8004219358:	41 89 c1             	mov    %eax,%r9d
  800421935b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421935f:	8b 40 10             	mov    0x10(%rax),%eax
  8004219362:	c1 e8 10             	shr    $0x10,%eax
  8004219365:	41 89 c2             	mov    %eax,%r10d
  8004219368:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421936c:	8b 40 10             	mov    0x10(%rax),%eax
  800421936f:	44 0f b7 c0          	movzwl %ax,%r8d
  8004219373:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219377:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421937a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421937e:	8b 50 08             	mov    0x8(%rax),%edx
  8004219381:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219385:	48 8b 00             	mov    (%rax),%rax
  8004219388:	8b 40 08             	mov    0x8(%rax),%eax
  800421938b:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  800421938f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  8004219393:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004219398:	89 74 24 08          	mov    %esi,0x8(%rsp)
  800421939c:	44 89 0c 24          	mov    %r9d,(%rsp)
  80042193a0:	45 89 d1             	mov    %r10d,%r9d
  80042193a3:	89 c6                	mov    %eax,%esi
  80042193a5:	48 bf e8 0d 22 04 80 	movabs $0x8004220de8,%rdi
  80042193ac:	00 00 00 
  80042193af:	b8 00 00 00 00       	mov    $0x0,%eax
  80042193b4:	49 ba 93 9c 20 04 80 	movabs $0x8004209c93,%r10
  80042193bb:	00 00 00 
  80042193be:	41 ff d2             	callq  *%r10
  80042193c1:	c9                   	leaveq 
  80042193c2:	c3                   	retq   

00000080042193c3 <pci_scan_bus>:
  80042193c3:	55                   	push   %rbp
  80042193c4:	48 89 e5             	mov    %rsp,%rbp
  80042193c7:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  80042193ce:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  80042193d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042193dc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042193e0:	ba 50 00 00 00       	mov    $0x50,%edx
  80042193e5:	be 00 00 00 00       	mov    $0x0,%esi
  80042193ea:	48 89 c7             	mov    %rax,%rdi
  80042193ed:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  80042193f4:	00 00 00 
  80042193f7:	ff d0                	callq  *%rax
  80042193f9:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004219400:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004219404:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  800421940b:	e9 22 02 00 00       	jmpq   8004219632 <pci_scan_bus+0x26f>
  8004219410:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004219414:	be 0c 00 00 00       	mov    $0xc,%esi
  8004219419:	48 89 c7             	mov    %rax,%rdi
  800421941c:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  8004219423:	00 00 00 
  8004219426:	ff d0                	callq  *%rax
  8004219428:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421942b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421942e:	c1 e8 10             	shr    $0x10,%eax
  8004219431:	83 e0 7f             	and    $0x7f,%eax
  8004219434:	83 f8 01             	cmp    $0x1,%eax
  8004219437:	0f 87 ec 01 00 00    	ja     8004219629 <pci_scan_bus+0x266>
  800421943d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219441:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219445:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421944c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219450:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  8004219457:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421945b:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004219462:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219466:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  800421946d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219471:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004219478:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421947c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004219483:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219487:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421948e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219492:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004219499:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421949d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042194a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042194a8:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042194af:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  80042194b6:	00 00 00 
  80042194b9:	e9 45 01 00 00       	jmpq   8004219603 <pci_scan_bus+0x240>
  80042194be:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042194c5:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  80042194cc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042194d3:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  80042194da:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042194e1:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  80042194e8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042194ef:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  80042194f6:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042194fd:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004219504:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421950b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004219512:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004219519:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800421951d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004219524:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004219528:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421952f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004219533:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421953a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800421953e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  8004219545:	be 00 00 00 00       	mov    $0x0,%esi
  800421954a:	48 89 c7             	mov    %rax,%rdi
  800421954d:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  8004219554:	00 00 00 
  8004219557:	ff d0                	callq  *%rax
  8004219559:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421955f:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  8004219565:	0f b7 c0             	movzwl %ax,%eax
  8004219568:	3d ff ff 00 00       	cmp    $0xffff,%eax
  800421956d:	0f 84 81 00 00 00    	je     80042195f4 <pci_scan_bus+0x231>
  8004219573:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421957a:	be 3c 00 00 00       	mov    $0x3c,%esi
  800421957f:	48 89 c7             	mov    %rax,%rdi
  8004219582:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  8004219589:	00 00 00 
  800421958c:	ff d0                	callq  *%rax
  800421958e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219591:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004219594:	88 45 98             	mov    %al,-0x68(%rbp)
  8004219597:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421959e:	be 08 00 00 00       	mov    $0x8,%esi
  80042195a3:	48 89 c7             	mov    %rax,%rdi
  80042195a6:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  80042195ad:	00 00 00 
  80042195b0:	ff d0                	callq  *%rax
  80042195b2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  80042195b8:	48 b8 e0 47 23 04 80 	movabs $0x80042347e0,%rax
  80042195bf:	00 00 00 
  80042195c2:	8b 00                	mov    (%rax),%eax
  80042195c4:	85 c0                	test   %eax,%eax
  80042195c6:	74 16                	je     80042195de <pci_scan_bus+0x21b>
  80042195c8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042195cf:	48 89 c7             	mov    %rax,%rdi
  80042195d2:	48 b8 ea 92 21 04 80 	movabs $0x80042192ea,%rax
  80042195d9:	00 00 00 
  80042195dc:	ff d0                	callq  *%rax
  80042195de:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042195e5:	48 89 c7             	mov    %rax,%rdi
  80042195e8:	48 b8 5b 92 21 04 80 	movabs $0x800421925b,%rax
  80042195ef:	00 00 00 
  80042195f2:	ff d0                	callq  *%rax
  80042195f4:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  80042195fa:	83 c0 01             	add    $0x1,%eax
  80042195fd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004219603:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004219609:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421960c:	25 00 00 80 00       	and    $0x800000,%eax
  8004219611:	85 c0                	test   %eax,%eax
  8004219613:	74 07                	je     800421961c <pci_scan_bus+0x259>
  8004219615:	b8 08 00 00 00       	mov    $0x8,%eax
  800421961a:	eb 05                	jmp    8004219621 <pci_scan_bus+0x25e>
  800421961c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219621:	39 c2                	cmp    %eax,%edx
  8004219623:	0f 82 95 fe ff ff    	jb     80042194be <pci_scan_bus+0xfb>
  8004219629:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421962c:	83 c0 01             	add    $0x1,%eax
  800421962f:	89 45 a8             	mov    %eax,-0x58(%rbp)
  8004219632:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004219635:	83 f8 1f             	cmp    $0x1f,%eax
  8004219638:	0f 86 d2 fd ff ff    	jbe    8004219410 <pci_scan_bus+0x4d>
  800421963e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219641:	c9                   	leaveq 
  8004219642:	c3                   	retq   

0000008004219643 <pci_bridge_attach>:
  8004219643:	55                   	push   %rbp
  8004219644:	48 89 e5             	mov    %rsp,%rbp
  8004219647:	48 83 ec 30          	sub    $0x30,%rsp
  800421964b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421964f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219653:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004219658:	48 89 c7             	mov    %rax,%rdi
  800421965b:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  8004219662:	00 00 00 
  8004219665:	ff d0                	callq  *%rax
  8004219667:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421966a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421966e:	be 18 00 00 00       	mov    $0x18,%esi
  8004219673:	48 89 c7             	mov    %rax,%rdi
  8004219676:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  800421967d:	00 00 00 
  8004219680:	ff d0                	callq  *%rax
  8004219682:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004219685:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219688:	83 e0 0f             	and    $0xf,%eax
  800421968b:	83 f8 01             	cmp    $0x1,%eax
  800421968e:	75 40                	jne    80042196d0 <pci_bridge_attach+0x8d>
  8004219690:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219694:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219697:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421969b:	8b 50 08             	mov    0x8(%rax),%edx
  800421969e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196a2:	48 8b 00             	mov    (%rax),%rax
  80042196a5:	8b 40 08             	mov    0x8(%rax),%eax
  80042196a8:	89 c6                	mov    %eax,%esi
  80042196aa:	48 bf 28 0e 22 04 80 	movabs $0x8004220e28,%rdi
  80042196b1:	00 00 00 
  80042196b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042196b9:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  80042196c0:	00 00 00 
  80042196c3:	41 ff d0             	callq  *%r8
  80042196c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042196cb:	e9 a1 00 00 00       	jmpq   8004219771 <pci_bridge_attach+0x12e>
  80042196d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042196d4:	ba 10 00 00 00       	mov    $0x10,%edx
  80042196d9:	be 00 00 00 00       	mov    $0x0,%esi
  80042196de:	48 89 c7             	mov    %rax,%rdi
  80042196e1:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  80042196e8:	00 00 00 
  80042196eb:	ff d0                	callq  *%rax
  80042196ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196f1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042196f5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042196f8:	c1 e8 08             	shr    $0x8,%eax
  80042196fb:	0f b6 c0             	movzbl %al,%eax
  80042196fe:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004219701:	48 b8 e0 47 23 04 80 	movabs $0x80042347e0,%rax
  8004219708:	00 00 00 
  800421970b:	8b 00                	mov    (%rax),%eax
  800421970d:	85 c0                	test   %eax,%eax
  800421970f:	74 48                	je     8004219759 <pci_bridge_attach+0x116>
  8004219711:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219714:	c1 e8 10             	shr    $0x10,%eax
  8004219717:	0f b6 f8             	movzbl %al,%edi
  800421971a:	8b 75 e8             	mov    -0x18(%rbp),%esi
  800421971d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219721:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219724:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219728:	8b 50 08             	mov    0x8(%rax),%edx
  800421972b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421972f:	48 8b 00             	mov    (%rax),%rax
  8004219732:	8b 40 08             	mov    0x8(%rax),%eax
  8004219735:	41 89 f9             	mov    %edi,%r9d
  8004219738:	41 89 f0             	mov    %esi,%r8d
  800421973b:	89 c6                	mov    %eax,%esi
  800421973d:	48 bf 60 0e 22 04 80 	movabs $0x8004220e60,%rdi
  8004219744:	00 00 00 
  8004219747:	b8 00 00 00 00       	mov    $0x0,%eax
  800421974c:	49 ba 93 9c 20 04 80 	movabs $0x8004209c93,%r10
  8004219753:	00 00 00 
  8004219756:	41 ff d2             	callq  *%r10
  8004219759:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421975d:	48 89 c7             	mov    %rax,%rdi
  8004219760:	48 b8 c3 93 21 04 80 	movabs $0x80042193c3,%rax
  8004219767:	00 00 00 
  800421976a:	ff d0                	callq  *%rax
  800421976c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219771:	c9                   	leaveq 
  8004219772:	c3                   	retq   

0000008004219773 <pci_func_enable>:
  8004219773:	55                   	push   %rbp
  8004219774:	48 89 e5             	mov    %rsp,%rbp
  8004219777:	48 83 ec 40          	sub    $0x40,%rsp
  800421977b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421977f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219783:	ba 07 00 00 00       	mov    $0x7,%edx
  8004219788:	be 04 00 00 00       	mov    $0x4,%esi
  800421978d:	48 89 c7             	mov    %rax,%rdi
  8004219790:	48 b8 11 91 21 04 80 	movabs $0x8004219111,%rax
  8004219797:	00 00 00 
  800421979a:	ff d0                	callq  *%rax
  800421979c:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  80042197a3:	e9 ee 01 00 00       	jmpq   8004219996 <pci_func_enable+0x223>
  80042197a8:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042197ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042197af:	89 d6                	mov    %edx,%esi
  80042197b1:	48 89 c7             	mov    %rax,%rdi
  80042197b4:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  80042197bb:	00 00 00 
  80042197be:	ff d0                	callq  *%rax
  80042197c0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042197c3:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  80042197ca:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  80042197cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042197d1:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80042197d6:	89 ce                	mov    %ecx,%esi
  80042197d8:	48 89 c7             	mov    %rax,%rdi
  80042197db:	48 b8 11 91 21 04 80 	movabs $0x8004219111,%rax
  80042197e2:	00 00 00 
  80042197e5:	ff d0                	callq  *%rax
  80042197e7:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042197ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042197ee:	89 d6                	mov    %edx,%esi
  80042197f0:	48 89 c7             	mov    %rax,%rdi
  80042197f3:	48 b8 bc 90 21 04 80 	movabs $0x80042190bc,%rax
  80042197fa:	00 00 00 
  80042197fd:	ff d0                	callq  *%rax
  80042197ff:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004219802:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004219806:	75 05                	jne    800421980d <pci_func_enable+0x9a>
  8004219808:	e9 83 01 00 00       	jmpq   8004219990 <pci_func_enable+0x21d>
  800421980d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219810:	83 e8 10             	sub    $0x10,%eax
  8004219813:	c1 e8 02             	shr    $0x2,%eax
  8004219816:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004219819:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421981c:	83 e0 01             	and    $0x1,%eax
  800421981f:	85 c0                	test   %eax,%eax
  8004219821:	75 65                	jne    8004219888 <pci_func_enable+0x115>
  8004219823:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219826:	83 e0 06             	and    $0x6,%eax
  8004219829:	83 f8 04             	cmp    $0x4,%eax
  800421982c:	75 07                	jne    8004219835 <pci_func_enable+0xc2>
  800421982e:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  8004219835:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219838:	83 e0 f0             	and    $0xfffffff0,%eax
  800421983b:	f7 d8                	neg    %eax
  800421983d:	23 45 e8             	and    -0x18(%rbp),%eax
  8004219840:	83 e0 f0             	and    $0xfffffff0,%eax
  8004219843:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004219846:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219849:	83 e0 f0             	and    $0xfffffff0,%eax
  800421984c:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421984f:	48 b8 a0 b5 6d 04 80 	movabs $0x80046db5a0,%rax
  8004219856:	00 00 00 
  8004219859:	8b 00                	mov    (%rax),%eax
  800421985b:	85 c0                	test   %eax,%eax
  800421985d:	74 7a                	je     80042198d9 <pci_func_enable+0x166>
  800421985f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004219862:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219865:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219868:	89 c6                	mov    %eax,%esi
  800421986a:	48 bf 90 0e 22 04 80 	movabs $0x8004220e90,%rdi
  8004219871:	00 00 00 
  8004219874:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219879:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  8004219880:	00 00 00 
  8004219883:	41 ff d0             	callq  *%r8
  8004219886:	eb 51                	jmp    80042198d9 <pci_func_enable+0x166>
  8004219888:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421988b:	83 e0 fc             	and    $0xfffffffc,%eax
  800421988e:	f7 d8                	neg    %eax
  8004219890:	23 45 e8             	and    -0x18(%rbp),%eax
  8004219893:	83 e0 fc             	and    $0xfffffffc,%eax
  8004219896:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004219899:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421989c:	83 e0 fc             	and    $0xfffffffc,%eax
  800421989f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042198a2:	48 b8 a0 b5 6d 04 80 	movabs $0x80046db5a0,%rax
  80042198a9:	00 00 00 
  80042198ac:	8b 00                	mov    (%rax),%eax
  80042198ae:	85 c0                	test   %eax,%eax
  80042198b0:	74 27                	je     80042198d9 <pci_func_enable+0x166>
  80042198b2:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042198b5:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042198b8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042198bb:	89 c6                	mov    %eax,%esi
  80042198bd:	48 bf b8 0e 22 04 80 	movabs $0x8004220eb8,%rdi
  80042198c4:	00 00 00 
  80042198c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042198cc:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  80042198d3:	00 00 00 
  80042198d6:	41 ff d0             	callq  *%r8
  80042198d9:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042198dc:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  80042198df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042198e3:	89 ce                	mov    %ecx,%esi
  80042198e5:	48 89 c7             	mov    %rax,%rdi
  80042198e8:	48 b8 11 91 21 04 80 	movabs $0x8004219111,%rax
  80042198ef:	00 00 00 
  80042198f2:	ff d0                	callq  *%rax
  80042198f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042198f8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042198fb:	48 63 d2             	movslq %edx,%rdx
  80042198fe:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  8004219902:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219905:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004219909:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421990d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219910:	48 63 d2             	movslq %edx,%rdx
  8004219913:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  8004219917:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421991a:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  800421991d:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004219921:	74 6d                	je     8004219990 <pci_func_enable+0x21d>
  8004219923:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004219927:	75 67                	jne    8004219990 <pci_func_enable+0x21d>
  8004219929:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421992d:	8b 40 10             	mov    0x10(%rax),%eax
  8004219930:	c1 e8 10             	shr    $0x10,%eax
  8004219933:	41 89 c0             	mov    %eax,%r8d
  8004219936:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421993a:	8b 40 10             	mov    0x10(%rax),%eax
  800421993d:	0f b7 f8             	movzwl %ax,%edi
  8004219940:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219944:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219947:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421994b:	8b 50 08             	mov    0x8(%rax),%edx
  800421994e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219952:	48 8b 00             	mov    (%rax),%rax
  8004219955:	8b 40 08             	mov    0x8(%rax),%eax
  8004219958:	8b 75 f0             	mov    -0x10(%rbp),%esi
  800421995b:	89 74 24 10          	mov    %esi,0x10(%rsp)
  800421995f:	8b 75 f4             	mov    -0xc(%rbp),%esi
  8004219962:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004219966:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004219969:	89 34 24             	mov    %esi,(%rsp)
  800421996c:	45 89 c1             	mov    %r8d,%r9d
  800421996f:	41 89 f8             	mov    %edi,%r8d
  8004219972:	89 c6                	mov    %eax,%esi
  8004219974:	48 bf e0 0e 22 04 80 	movabs $0x8004220ee0,%rdi
  800421997b:	00 00 00 
  800421997e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219983:	49 ba 93 9c 20 04 80 	movabs $0x8004209c93,%r10
  800421998a:	00 00 00 
  800421998d:	41 ff d2             	callq  *%r10
  8004219990:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219993:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004219996:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  800421999a:	0f 86 08 fe ff ff    	jbe    80042197a8 <pci_func_enable+0x35>
  80042199a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042199a4:	8b 40 10             	mov    0x10(%rax),%eax
  80042199a7:	c1 e8 10             	shr    $0x10,%eax
  80042199aa:	89 c7                	mov    %eax,%edi
  80042199ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042199b0:	8b 40 10             	mov    0x10(%rax),%eax
  80042199b3:	0f b7 f0             	movzwl %ax,%esi
  80042199b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042199ba:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042199bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042199c1:	8b 50 08             	mov    0x8(%rax),%edx
  80042199c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042199c8:	48 8b 00             	mov    (%rax),%rax
  80042199cb:	8b 40 08             	mov    0x8(%rax),%eax
  80042199ce:	41 89 f9             	mov    %edi,%r9d
  80042199d1:	41 89 f0             	mov    %esi,%r8d
  80042199d4:	89 c6                	mov    %eax,%esi
  80042199d6:	48 bf 40 0f 22 04 80 	movabs $0x8004220f40,%rdi
  80042199dd:	00 00 00 
  80042199e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042199e5:	49 ba 93 9c 20 04 80 	movabs $0x8004209c93,%r10
  80042199ec:	00 00 00 
  80042199ef:	41 ff d2             	callq  *%r10
  80042199f2:	c9                   	leaveq 
  80042199f3:	c3                   	retq   

00000080042199f4 <pci_init>:
  80042199f4:	55                   	push   %rbp
  80042199f5:	48 89 e5             	mov    %rsp,%rbp
  80042199f8:	ba 10 00 00 00       	mov    $0x10,%edx
  80042199fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004219a02:	48 bf b0 b5 6d 04 80 	movabs $0x80046db5b0,%rdi
  8004219a09:	00 00 00 
  8004219a0c:	48 b8 09 12 21 04 80 	movabs $0x8004211209,%rax
  8004219a13:	00 00 00 
  8004219a16:	ff d0                	callq  *%rax
  8004219a18:	48 bf b0 b5 6d 04 80 	movabs $0x80046db5b0,%rdi
  8004219a1f:	00 00 00 
  8004219a22:	48 b8 c3 93 21 04 80 	movabs $0x80042193c3,%rax
  8004219a29:	00 00 00 
  8004219a2c:	ff d0                	callq  *%rax
  8004219a2e:	5d                   	pop    %rbp
  8004219a2f:	c3                   	retq   

0000008004219a30 <time_init>:
  8004219a30:	55                   	push   %rbp
  8004219a31:	48 89 e5             	mov    %rsp,%rbp
  8004219a34:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  8004219a3b:	00 00 00 
  8004219a3e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004219a44:	5d                   	pop    %rbp
  8004219a45:	c3                   	retq   

0000008004219a46 <time_tick>:
  8004219a46:	55                   	push   %rbp
  8004219a47:	48 89 e5             	mov    %rsp,%rbp
  8004219a4a:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  8004219a51:	00 00 00 
  8004219a54:	8b 00                	mov    (%rax),%eax
  8004219a56:	8d 50 01             	lea    0x1(%rax),%edx
  8004219a59:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  8004219a60:	00 00 00 
  8004219a63:	89 10                	mov    %edx,(%rax)
  8004219a65:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  8004219a6c:	00 00 00 
  8004219a6f:	8b 10                	mov    (%rax),%edx
  8004219a71:	89 d0                	mov    %edx,%eax
  8004219a73:	c1 e0 02             	shl    $0x2,%eax
  8004219a76:	01 d0                	add    %edx,%eax
  8004219a78:	01 c0                	add    %eax,%eax
  8004219a7a:	89 c2                	mov    %eax,%edx
  8004219a7c:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  8004219a83:	00 00 00 
  8004219a86:	8b 00                	mov    (%rax),%eax
  8004219a88:	39 c2                	cmp    %eax,%edx
  8004219a8a:	73 2a                	jae    8004219ab6 <time_tick+0x70>
  8004219a8c:	48 ba 6f 0f 22 04 80 	movabs $0x8004220f6f,%rdx
  8004219a93:	00 00 00 
  8004219a96:	be 14 00 00 00       	mov    $0x14,%esi
  8004219a9b:	48 bf 8a 0f 22 04 80 	movabs $0x8004220f8a,%rdi
  8004219aa2:	00 00 00 
  8004219aa5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219aaa:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219ab1:	00 00 00 
  8004219ab4:	ff d1                	callq  *%rcx
  8004219ab6:	5d                   	pop    %rbp
  8004219ab7:	c3                   	retq   

0000008004219ab8 <time_msec>:
  8004219ab8:	55                   	push   %rbp
  8004219ab9:	48 89 e5             	mov    %rsp,%rbp
  8004219abc:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  8004219ac3:	00 00 00 
  8004219ac6:	8b 10                	mov    (%rax),%edx
  8004219ac8:	89 d0                	mov    %edx,%eax
  8004219aca:	c1 e0 02             	shl    $0x2,%eax
  8004219acd:	01 d0                	add    %edx,%eax
  8004219acf:	01 c0                	add    %eax,%eax
  8004219ad1:	5d                   	pop    %rbp
  8004219ad2:	c3                   	retq   

0000008004219ad3 <page2ppn>:
  8004219ad3:	55                   	push   %rbp
  8004219ad4:	48 89 e5             	mov    %rsp,%rbp
  8004219ad7:	48 83 ec 08          	sub    $0x8,%rsp
  8004219adb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219adf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219ae3:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004219aea:	00 00 00 
  8004219aed:	48 8b 00             	mov    (%rax),%rax
  8004219af0:	48 29 c2             	sub    %rax,%rdx
  8004219af3:	48 89 d0             	mov    %rdx,%rax
  8004219af6:	48 c1 f8 04          	sar    $0x4,%rax
  8004219afa:	c9                   	leaveq 
  8004219afb:	c3                   	retq   

0000008004219afc <page2pa>:
  8004219afc:	55                   	push   %rbp
  8004219afd:	48 89 e5             	mov    %rsp,%rbp
  8004219b00:	48 83 ec 08          	sub    $0x8,%rsp
  8004219b04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219b0c:	48 89 c7             	mov    %rax,%rdi
  8004219b0f:	48 b8 d3 9a 21 04 80 	movabs $0x8004219ad3,%rax
  8004219b16:	00 00 00 
  8004219b19:	ff d0                	callq  *%rax
  8004219b1b:	48 c1 e0 0c          	shl    $0xc,%rax
  8004219b1f:	c9                   	leaveq 
  8004219b20:	c3                   	retq   

0000008004219b21 <pa2page>:
  8004219b21:	55                   	push   %rbp
  8004219b22:	48 89 e5             	mov    %rsp,%rbp
  8004219b25:	48 83 ec 10          	sub    $0x10,%rsp
  8004219b29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219b2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219b31:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219b35:	48 89 c2             	mov    %rax,%rdx
  8004219b38:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004219b3f:	00 00 00 
  8004219b42:	48 8b 00             	mov    (%rax),%rax
  8004219b45:	48 39 c2             	cmp    %rax,%rdx
  8004219b48:	72 2a                	jb     8004219b74 <pa2page+0x53>
  8004219b4a:	48 ba a0 0f 22 04 80 	movabs $0x8004220fa0,%rdx
  8004219b51:	00 00 00 
  8004219b54:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004219b59:	48 bf bf 0f 22 04 80 	movabs $0x8004220fbf,%rdi
  8004219b60:	00 00 00 
  8004219b63:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b68:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219b6f:	00 00 00 
  8004219b72:	ff d1                	callq  *%rcx
  8004219b74:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004219b7b:	00 00 00 
  8004219b7e:	48 8b 00             	mov    (%rax),%rax
  8004219b81:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219b85:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004219b89:	48 c1 e2 04          	shl    $0x4,%rdx
  8004219b8d:	48 01 d0             	add    %rdx,%rax
  8004219b90:	c9                   	leaveq 
  8004219b91:	c3                   	retq   

0000008004219b92 <page2kva>:
  8004219b92:	55                   	push   %rbp
  8004219b93:	48 89 e5             	mov    %rsp,%rbp
  8004219b96:	48 83 ec 20          	sub    $0x20,%rsp
  8004219b9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219b9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219ba2:	48 89 c7             	mov    %rax,%rdi
  8004219ba5:	48 b8 fc 9a 21 04 80 	movabs $0x8004219afc,%rax
  8004219bac:	00 00 00 
  8004219baf:	ff d0                	callq  *%rax
  8004219bb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219bb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219bb9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219bbd:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219bc0:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219bc3:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004219bca:	00 00 00 
  8004219bcd:	48 8b 00             	mov    (%rax),%rax
  8004219bd0:	48 39 c2             	cmp    %rax,%rdx
  8004219bd3:	72 32                	jb     8004219c07 <page2kva+0x75>
  8004219bd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219bd9:	48 89 c1             	mov    %rax,%rcx
  8004219bdc:	48 ba d0 0f 22 04 80 	movabs $0x8004220fd0,%rdx
  8004219be3:	00 00 00 
  8004219be6:	be 62 00 00 00       	mov    $0x62,%esi
  8004219beb:	48 bf bf 0f 22 04 80 	movabs $0x8004220fbf,%rdi
  8004219bf2:	00 00 00 
  8004219bf5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219bfa:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219c01:	00 00 00 
  8004219c04:	41 ff d0             	callq  *%r8
  8004219c07:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219c0e:	00 00 00 
  8004219c11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c15:	48 01 d0             	add    %rdx,%rax
  8004219c18:	c9                   	leaveq 
  8004219c19:	c3                   	retq   

0000008004219c1a <epte_addr>:
  8004219c1a:	55                   	push   %rbp
  8004219c1b:	48 89 e5             	mov    %rsp,%rbp
  8004219c1e:	48 83 ec 08          	sub    $0x8,%rsp
  8004219c22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219c26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c2a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219c30:	c9                   	leaveq 
  8004219c31:	c3                   	retq   

0000008004219c32 <epte_present>:
  8004219c32:	55                   	push   %rbp
  8004219c33:	48 89 e5             	mov    %rsp,%rbp
  8004219c36:	48 83 ec 08          	sub    $0x8,%rsp
  8004219c3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c42:	83 e0 07             	and    $0x7,%eax
  8004219c45:	48 85 c0             	test   %rax,%rax
  8004219c48:	0f 95 c0             	setne  %al
  8004219c4b:	0f b6 c0             	movzbl %al,%eax
  8004219c4e:	c9                   	leaveq 
  8004219c4f:	c3                   	retq   

0000008004219c50 <ept_lookup_gpa>:
  8004219c50:	55                   	push   %rbp
  8004219c51:	48 89 e5             	mov    %rsp,%rbp
  8004219c54:	48 83 ec 20          	sub    $0x20,%rsp
  8004219c58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219c5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219c60:	89 55 ec             	mov    %edx,-0x14(%rbp)
  8004219c63:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004219c67:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004219c6c:	75 07                	jne    8004219c75 <ept_lookup_gpa+0x25>
  8004219c6e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004219c73:	eb 1e                	jmp    8004219c93 <ept_lookup_gpa+0x43>
  8004219c75:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004219c79:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219c7c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004219c80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c84:	48 89 c7             	mov    %rax,%rdi
  8004219c87:	48 b8 95 9c 21 04 80 	movabs $0x8004219c95,%rax
  8004219c8e:	00 00 00 
  8004219c91:	ff d0                	callq  *%rax
  8004219c93:	c9                   	leaveq 
  8004219c94:	c3                   	retq   

0000008004219c95 <ept_pml4e_walk>:
  8004219c95:	55                   	push   %rbp
  8004219c96:	48 89 e5             	mov    %rsp,%rbp
  8004219c99:	48 83 ec 60          	sub    $0x60,%rsp
  8004219c9d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004219ca1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004219ca5:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004219ca8:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  8004219cac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219cb0:	48 c1 e8 27          	shr    $0x27,%rax
  8004219cb4:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219cb9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219cc1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219cc8:	00 
  8004219cc9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219ccd:	48 01 d0             	add    %rdx,%rax
  8004219cd0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219cd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219cd8:	48 8b 00             	mov    (%rax),%rax
  8004219cdb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219ce1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219ce5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004219cec:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004219cf1:	0f 85 c5 00 00 00    	jne    8004219dbc <ept_pml4e_walk+0x127>
  8004219cf7:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004219cfb:	75 0a                	jne    8004219d07 <ept_pml4e_walk+0x72>
  8004219cfd:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
  8004219d02:	e9 3a 01 00 00       	jmpq   8004219e41 <ept_pml4e_walk+0x1ac>
  8004219d07:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219d0c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219d13:	00 00 00 
  8004219d16:	ff d0                	callq  *%rax
  8004219d18:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004219d1c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004219d21:	75 0a                	jne    8004219d2d <ept_pml4e_walk+0x98>
  8004219d23:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004219d28:	e9 14 01 00 00       	jmpq   8004219e41 <ept_pml4e_walk+0x1ac>
  8004219d2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219d31:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219d35:	8d 50 01             	lea    0x1(%rax),%edx
  8004219d38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219d3c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219d40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219d44:	48 89 c7             	mov    %rax,%rdi
  8004219d47:	48 b8 fc 9a 21 04 80 	movabs $0x8004219afc,%rax
  8004219d4e:	00 00 00 
  8004219d51:	ff d0                	callq  *%rax
  8004219d53:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219d57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219d5b:	48 89 c7             	mov    %rax,%rdi
  8004219d5e:	48 b8 92 9b 21 04 80 	movabs $0x8004219b92,%rax
  8004219d65:	00 00 00 
  8004219d68:	ff d0                	callq  *%rax
  8004219d6a:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004219d6e:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004219d71:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004219d75:	48 89 c7             	mov    %rax,%rdi
  8004219d78:	48 b8 43 9e 21 04 80 	movabs $0x8004219e43,%rax
  8004219d7f:	00 00 00 
  8004219d82:	ff d0                	callq  *%rax
  8004219d84:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004219d87:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004219d8b:	79 15                	jns    8004219da2 <ept_pml4e_walk+0x10d>
  8004219d8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219d91:	48 89 c7             	mov    %rax,%rdi
  8004219d94:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219d9b:	00 00 00 
  8004219d9e:	ff d0                	callq  *%rax
  8004219da0:	eb 12                	jmp    8004219db4 <ept_pml4e_walk+0x11f>
  8004219da2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219da6:	48 83 c8 07          	or     $0x7,%rax
  8004219daa:	48 89 c2             	mov    %rax,%rdx
  8004219dad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219db1:	48 89 10             	mov    %rdx,(%rax)
  8004219db4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219db7:	e9 85 00 00 00       	jmpq   8004219e41 <ept_pml4e_walk+0x1ac>
  8004219dbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219dc0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219dc4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219dc8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219dcc:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004219dcf:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004219dd2:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004219dd9:	00 00 00 
  8004219ddc:	48 8b 00             	mov    (%rax),%rax
  8004219ddf:	48 39 c2             	cmp    %rax,%rdx
  8004219de2:	72 32                	jb     8004219e16 <ept_pml4e_walk+0x181>
  8004219de4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219de8:	48 89 c1             	mov    %rax,%rcx
  8004219deb:	48 ba d0 0f 22 04 80 	movabs $0x8004220fd0,%rdx
  8004219df2:	00 00 00 
  8004219df5:	be 58 00 00 00       	mov    $0x58,%esi
  8004219dfa:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  8004219e01:	00 00 00 
  8004219e04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e09:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219e10:	00 00 00 
  8004219e13:	41 ff d0             	callq  *%r8
  8004219e16:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219e1d:	00 00 00 
  8004219e20:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219e24:	48 01 d0             	add    %rdx,%rax
  8004219e27:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004219e2b:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004219e2e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004219e32:	48 89 c7             	mov    %rax,%rdi
  8004219e35:	48 b8 43 9e 21 04 80 	movabs $0x8004219e43,%rax
  8004219e3c:	00 00 00 
  8004219e3f:	ff d0                	callq  *%rax
  8004219e41:	c9                   	leaveq 
  8004219e42:	c3                   	retq   

0000008004219e43 <ept_pdpe_walk>:
  8004219e43:	55                   	push   %rbp
  8004219e44:	48 89 e5             	mov    %rsp,%rbp
  8004219e47:	48 83 ec 60          	sub    $0x60,%rsp
  8004219e4b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004219e4f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004219e53:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004219e56:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  8004219e5a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219e5e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004219e62:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219e67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219e6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219e6f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219e76:	00 
  8004219e77:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219e7b:	48 01 d0             	add    %rdx,%rax
  8004219e7e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219e82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219e86:	48 8b 00             	mov    (%rax),%rax
  8004219e89:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219e8f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219e93:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004219e9a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004219e9f:	0f 85 c5 00 00 00    	jne    8004219f6a <ept_pdpe_walk+0x127>
  8004219ea5:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004219ea9:	75 0a                	jne    8004219eb5 <ept_pdpe_walk+0x72>
  8004219eab:	b8 15 00 00 00       	mov    $0x15,%eax
  8004219eb0:	e9 3a 01 00 00       	jmpq   8004219fef <ept_pdpe_walk+0x1ac>
  8004219eb5:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219eba:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219ec1:	00 00 00 
  8004219ec4:	ff d0                	callq  *%rax
  8004219ec6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004219eca:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004219ecf:	75 0a                	jne    8004219edb <ept_pdpe_walk+0x98>
  8004219ed1:	b8 04 00 00 00       	mov    $0x4,%eax
  8004219ed6:	e9 14 01 00 00       	jmpq   8004219fef <ept_pdpe_walk+0x1ac>
  8004219edb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219edf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219ee3:	8d 50 01             	lea    0x1(%rax),%edx
  8004219ee6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219eea:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219eee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219ef2:	48 89 c7             	mov    %rax,%rdi
  8004219ef5:	48 b8 fc 9a 21 04 80 	movabs $0x8004219afc,%rax
  8004219efc:	00 00 00 
  8004219eff:	ff d0                	callq  *%rax
  8004219f01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219f05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219f09:	48 89 c7             	mov    %rax,%rdi
  8004219f0c:	48 b8 92 9b 21 04 80 	movabs $0x8004219b92,%rax
  8004219f13:	00 00 00 
  8004219f16:	ff d0                	callq  *%rax
  8004219f18:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004219f1c:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004219f1f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004219f23:	48 89 c7             	mov    %rax,%rdi
  8004219f26:	48 b8 f1 9f 21 04 80 	movabs $0x8004219ff1,%rax
  8004219f2d:	00 00 00 
  8004219f30:	ff d0                	callq  *%rax
  8004219f32:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004219f35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004219f39:	79 15                	jns    8004219f50 <ept_pdpe_walk+0x10d>
  8004219f3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219f3f:	48 89 c7             	mov    %rax,%rdi
  8004219f42:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219f49:	00 00 00 
  8004219f4c:	ff d0                	callq  *%rax
  8004219f4e:	eb 12                	jmp    8004219f62 <ept_pdpe_walk+0x11f>
  8004219f50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219f54:	48 83 c8 07          	or     $0x7,%rax
  8004219f58:	48 89 c2             	mov    %rax,%rdx
  8004219f5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219f5f:	48 89 10             	mov    %rdx,(%rax)
  8004219f62:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219f65:	e9 85 00 00 00       	jmpq   8004219fef <ept_pdpe_walk+0x1ac>
  8004219f6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219f6e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219f72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219f76:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219f7a:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004219f7d:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004219f80:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004219f87:	00 00 00 
  8004219f8a:	48 8b 00             	mov    (%rax),%rax
  8004219f8d:	48 39 c2             	cmp    %rax,%rdx
  8004219f90:	72 32                	jb     8004219fc4 <ept_pdpe_walk+0x181>
  8004219f92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219f96:	48 89 c1             	mov    %rax,%rcx
  8004219f99:	48 ba d0 0f 22 04 80 	movabs $0x8004220fd0,%rdx
  8004219fa0:	00 00 00 
  8004219fa3:	be 76 00 00 00       	mov    $0x76,%esi
  8004219fa8:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  8004219faf:	00 00 00 
  8004219fb2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219fb7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219fbe:	00 00 00 
  8004219fc1:	41 ff d0             	callq  *%r8
  8004219fc4:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219fcb:	00 00 00 
  8004219fce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219fd2:	48 01 d0             	add    %rdx,%rax
  8004219fd5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004219fd9:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004219fdc:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004219fe0:	48 89 c7             	mov    %rax,%rdi
  8004219fe3:	48 b8 f1 9f 21 04 80 	movabs $0x8004219ff1,%rax
  8004219fea:	00 00 00 
  8004219fed:	ff d0                	callq  *%rax
  8004219fef:	c9                   	leaveq 
  8004219ff0:	c3                   	retq   

0000008004219ff1 <ept_pgdir_walk>:
  8004219ff1:	55                   	push   %rbp
  8004219ff2:	48 89 e5             	mov    %rsp,%rbp
  8004219ff5:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004219ff9:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004219ffd:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  800421a001:	89 55 8c             	mov    %edx,-0x74(%rbp)
  800421a004:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  800421a008:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421a00c:	48 c1 e8 15          	shr    $0x15,%rax
  800421a010:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421a015:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a019:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a01d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a024:	00 
  800421a025:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421a029:	48 01 d0             	add    %rdx,%rax
  800421a02c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421a030:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a034:	48 8b 00             	mov    (%rax),%rax
  800421a037:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800421a03d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a041:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421a046:	0f 85 19 01 00 00    	jne    800421a165 <ept_pgdir_walk+0x174>
  800421a04c:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
  800421a050:	75 0a                	jne    800421a05c <ept_pgdir_walk+0x6b>
  800421a052:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
  800421a057:	e9 ab 01 00 00       	jmpq   800421a207 <ept_pgdir_walk+0x216>
  800421a05c:	bf 01 00 00 00       	mov    $0x1,%edi
  800421a061:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a068:	00 00 00 
  800421a06b:	ff d0                	callq  *%rax
  800421a06d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a071:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421a076:	75 0a                	jne    800421a082 <ept_pgdir_walk+0x91>
  800421a078:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421a07d:	e9 85 01 00 00       	jmpq   800421a207 <ept_pgdir_walk+0x216>
  800421a082:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a086:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a08a:	8d 50 01             	lea    0x1(%rax),%edx
  800421a08d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a091:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a095:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a099:	48 89 c7             	mov    %rax,%rdi
  800421a09c:	48 b8 fc 9a 21 04 80 	movabs $0x8004219afc,%rax
  800421a0a3:	00 00 00 
  800421a0a6:	ff d0                	callq  *%rax
  800421a0a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a0ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a0b0:	48 83 c8 07          	or     $0x7,%rax
  800421a0b4:	48 89 c2             	mov    %rax,%rdx
  800421a0b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a0bb:	48 89 10             	mov    %rdx,(%rax)
  800421a0be:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421a0c2:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a0c6:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421a0cb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421a0cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a0d3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a0da:	00 
  800421a0db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a0df:	48 01 d0             	add    %rdx,%rax
  800421a0e2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a0e6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a0ea:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800421a0ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a0f2:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a0f6:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421a0f9:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421a0fc:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421a103:	00 00 00 
  800421a106:	48 8b 00             	mov    (%rax),%rax
  800421a109:	48 39 c2             	cmp    %rax,%rdx
  800421a10c:	72 32                	jb     800421a140 <ept_pgdir_walk+0x14f>
  800421a10e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a112:	48 89 c1             	mov    %rax,%rcx
  800421a115:	48 ba d0 0f 22 04 80 	movabs $0x8004220fd0,%rdx
  800421a11c:	00 00 00 
  800421a11f:	be 8d 00 00 00       	mov    $0x8d,%esi
  800421a124:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  800421a12b:	00 00 00 
  800421a12e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a133:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a13a:	00 00 00 
  800421a13d:	41 ff d0             	callq  *%r8
  800421a140:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a147:	00 00 00 
  800421a14a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a14e:	48 01 d0             	add    %rdx,%rax
  800421a151:	48 89 c2             	mov    %rax,%rdx
  800421a154:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421a158:	48 89 10             	mov    %rdx,(%rax)
  800421a15b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a160:	e9 a2 00 00 00       	jmpq   800421a207 <ept_pgdir_walk+0x216>
  800421a165:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421a169:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a16d:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421a172:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421a176:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a17a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a181:	00 
  800421a182:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a186:	48 01 d0             	add    %rdx,%rax
  800421a189:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421a18d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a191:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421a195:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421a199:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a19d:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  800421a1a0:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800421a1a3:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421a1aa:	00 00 00 
  800421a1ad:	48 8b 00             	mov    (%rax),%rax
  800421a1b0:	48 39 c2             	cmp    %rax,%rdx
  800421a1b3:	72 32                	jb     800421a1e7 <ept_pgdir_walk+0x1f6>
  800421a1b5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421a1b9:	48 89 c1             	mov    %rax,%rcx
  800421a1bc:	48 ba d0 0f 22 04 80 	movabs $0x8004220fd0,%rdx
  800421a1c3:	00 00 00 
  800421a1c6:	be 94 00 00 00       	mov    $0x94,%esi
  800421a1cb:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  800421a1d2:	00 00 00 
  800421a1d5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a1da:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a1e1:	00 00 00 
  800421a1e4:	41 ff d0             	callq  *%r8
  800421a1e7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a1ee:	00 00 00 
  800421a1f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421a1f5:	48 01 d0             	add    %rdx,%rax
  800421a1f8:	48 89 c2             	mov    %rax,%rdx
  800421a1fb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421a1ff:	48 89 10             	mov    %rdx,(%rax)
  800421a202:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a207:	c9                   	leaveq 
  800421a208:	c3                   	retq   

000000800421a209 <ept_gpa2hva>:
  800421a209:	55                   	push   %rbp
  800421a20a:	48 89 e5             	mov    %rsp,%rbp
  800421a20d:	48 83 ec 40          	sub    $0x40,%rsp
  800421a211:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421a215:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421a219:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421a21d:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  800421a221:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421a225:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a229:	48 89 d1             	mov    %rdx,%rcx
  800421a22c:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a231:	48 89 c7             	mov    %rax,%rdi
  800421a234:	48 b8 50 9c 21 04 80 	movabs $0x8004219c50,%rax
  800421a23b:	00 00 00 
  800421a23e:	ff d0                	callq  *%rax
  800421a240:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421a243:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421a247:	79 10                	jns    800421a259 <ept_gpa2hva+0x50>
  800421a249:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a24d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421a254:	e9 b1 00 00 00       	jmpq   800421a30a <ept_gpa2hva+0x101>
  800421a259:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a25d:	48 8b 00             	mov    (%rax),%rax
  800421a260:	48 89 c7             	mov    %rax,%rdi
  800421a263:	48 b8 32 9c 21 04 80 	movabs $0x8004219c32,%rax
  800421a26a:	00 00 00 
  800421a26d:	ff d0                	callq  *%rax
  800421a26f:	85 c0                	test   %eax,%eax
  800421a271:	75 10                	jne    800421a283 <ept_gpa2hva+0x7a>
  800421a273:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a277:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421a27e:	e9 87 00 00 00       	jmpq   800421a30a <ept_gpa2hva+0x101>
  800421a283:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a287:	48 8b 00             	mov    (%rax),%rax
  800421a28a:	48 89 c7             	mov    %rax,%rdi
  800421a28d:	48 b8 1a 9c 21 04 80 	movabs $0x8004219c1a,%rax
  800421a294:	00 00 00 
  800421a297:	ff d0                	callq  *%rax
  800421a299:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421a29d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a2a1:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a2a5:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421a2a8:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a2ab:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421a2b2:	00 00 00 
  800421a2b5:	48 8b 00             	mov    (%rax),%rax
  800421a2b8:	48 39 c2             	cmp    %rax,%rdx
  800421a2bb:	72 32                	jb     800421a2ef <ept_gpa2hva+0xe6>
  800421a2bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a2c1:	48 89 c1             	mov    %rax,%rcx
  800421a2c4:	48 ba d0 0f 22 04 80 	movabs $0x8004220fd0,%rdx
  800421a2cb:	00 00 00 
  800421a2ce:	be a3 00 00 00       	mov    $0xa3,%esi
  800421a2d3:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  800421a2da:	00 00 00 
  800421a2dd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a2e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a2e9:	00 00 00 
  800421a2ec:	41 ff d0             	callq  *%r8
  800421a2ef:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a2f6:	00 00 00 
  800421a2f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a2fd:	48 01 d0             	add    %rdx,%rax
  800421a300:	48 89 c2             	mov    %rax,%rdx
  800421a303:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a307:	48 89 10             	mov    %rdx,(%rax)
  800421a30a:	c9                   	leaveq 
  800421a30b:	c3                   	retq   

000000800421a30c <free_ept_level>:
  800421a30c:	55                   	push   %rbp
  800421a30d:	48 89 e5             	mov    %rsp,%rbp
  800421a310:	48 83 ec 40          	sub    $0x40,%rsp
  800421a314:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421a318:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421a31b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a31f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421a323:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421a32a:	e9 82 01 00 00       	jmpq   800421a4b1 <free_ept_level+0x1a5>
  800421a32f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421a333:	0f 84 fe 00 00 00    	je     800421a437 <free_ept_level+0x12b>
  800421a339:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a33c:	48 98                	cltq   
  800421a33e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a345:	00 
  800421a346:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a34a:	48 01 d0             	add    %rdx,%rax
  800421a34d:	48 8b 00             	mov    (%rax),%rax
  800421a350:	48 89 c7             	mov    %rax,%rdi
  800421a353:	48 b8 32 9c 21 04 80 	movabs $0x8004219c32,%rax
  800421a35a:	00 00 00 
  800421a35d:	ff d0                	callq  *%rax
  800421a35f:	85 c0                	test   %eax,%eax
  800421a361:	0f 84 46 01 00 00    	je     800421a4ad <free_ept_level+0x1a1>
  800421a367:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a36a:	48 98                	cltq   
  800421a36c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a373:	00 
  800421a374:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a378:	48 01 d0             	add    %rdx,%rax
  800421a37b:	48 8b 00             	mov    (%rax),%rax
  800421a37e:	48 89 c7             	mov    %rax,%rdi
  800421a381:	48 b8 1a 9c 21 04 80 	movabs $0x8004219c1a,%rax
  800421a388:	00 00 00 
  800421a38b:	ff d0                	callq  *%rax
  800421a38d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a391:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421a394:	8d 50 ff             	lea    -0x1(%rax),%edx
  800421a397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a39b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a39f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a3a3:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a3a7:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a3aa:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  800421a3ad:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421a3b4:	00 00 00 
  800421a3b7:	48 8b 00             	mov    (%rax),%rax
  800421a3ba:	48 39 c1             	cmp    %rax,%rcx
  800421a3bd:	72 32                	jb     800421a3f1 <free_ept_level+0xe5>
  800421a3bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a3c3:	48 89 c1             	mov    %rax,%rcx
  800421a3c6:	48 ba d0 0f 22 04 80 	movabs $0x8004220fd0,%rdx
  800421a3cd:	00 00 00 
  800421a3d0:	be b0 00 00 00       	mov    $0xb0,%esi
  800421a3d5:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  800421a3dc:	00 00 00 
  800421a3df:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a3e4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a3eb:	00 00 00 
  800421a3ee:	41 ff d0             	callq  *%r8
  800421a3f1:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  800421a3f8:	00 00 00 
  800421a3fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a3ff:	48 01 c8             	add    %rcx,%rax
  800421a402:	89 d6                	mov    %edx,%esi
  800421a404:	48 89 c7             	mov    %rax,%rdi
  800421a407:	48 b8 0c a3 21 04 80 	movabs $0x800421a30c,%rax
  800421a40e:	00 00 00 
  800421a411:	ff d0                	callq  *%rax
  800421a413:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a417:	48 89 c7             	mov    %rax,%rdi
  800421a41a:	48 b8 21 9b 21 04 80 	movabs $0x8004219b21,%rax
  800421a421:	00 00 00 
  800421a424:	ff d0                	callq  *%rax
  800421a426:	48 89 c7             	mov    %rax,%rdi
  800421a429:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a430:	00 00 00 
  800421a433:	ff d0                	callq  *%rax
  800421a435:	eb 76                	jmp    800421a4ad <free_ept_level+0x1a1>
  800421a437:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a43a:	48 98                	cltq   
  800421a43c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a443:	00 
  800421a444:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a448:	48 01 d0             	add    %rdx,%rax
  800421a44b:	48 8b 00             	mov    (%rax),%rax
  800421a44e:	48 89 c7             	mov    %rax,%rdi
  800421a451:	48 b8 32 9c 21 04 80 	movabs $0x8004219c32,%rax
  800421a458:	00 00 00 
  800421a45b:	ff d0                	callq  *%rax
  800421a45d:	85 c0                	test   %eax,%eax
  800421a45f:	74 4c                	je     800421a4ad <free_ept_level+0x1a1>
  800421a461:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a464:	48 98                	cltq   
  800421a466:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a46d:	00 
  800421a46e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a472:	48 01 d0             	add    %rdx,%rax
  800421a475:	48 8b 00             	mov    (%rax),%rax
  800421a478:	48 89 c7             	mov    %rax,%rdi
  800421a47b:	48 b8 1a 9c 21 04 80 	movabs $0x8004219c1a,%rax
  800421a482:	00 00 00 
  800421a485:	ff d0                	callq  *%rax
  800421a487:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a48b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a48f:	48 89 c7             	mov    %rax,%rdi
  800421a492:	48 b8 21 9b 21 04 80 	movabs $0x8004219b21,%rax
  800421a499:	00 00 00 
  800421a49c:	ff d0                	callq  *%rax
  800421a49e:	48 89 c7             	mov    %rax,%rdi
  800421a4a1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a4a8:	00 00 00 
  800421a4ab:	ff d0                	callq  *%rax
  800421a4ad:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421a4b1:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  800421a4b8:	0f 8e 71 fe ff ff    	jle    800421a32f <free_ept_level+0x23>
  800421a4be:	90                   	nop
  800421a4bf:	c9                   	leaveq 
  800421a4c0:	c3                   	retq   

000000800421a4c1 <free_guest_mem>:
  800421a4c1:	55                   	push   %rbp
  800421a4c2:	48 89 e5             	mov    %rsp,%rbp
  800421a4c5:	48 83 ec 20          	sub    $0x20,%rsp
  800421a4c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421a4cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a4d1:	be 03 00 00 00       	mov    $0x3,%esi
  800421a4d6:	48 89 c7             	mov    %rax,%rdi
  800421a4d9:	48 b8 0c a3 21 04 80 	movabs $0x800421a30c,%rax
  800421a4e0:	00 00 00 
  800421a4e3:	ff d0                	callq  *%rax
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  800421a4e5:	0f 20 d8             	mov    %cr3,%rax
  800421a4e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  800421a4ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a4f0:	0f 22 d8             	mov    %rax,%cr3
  800421a4f3:	c9                   	leaveq 
  800421a4f4:	c3                   	retq   

000000800421a4f5 <ept_page_insert>:
  800421a4f5:	55                   	push   %rbp
  800421a4f6:	48 89 e5             	mov    %rsp,%rbp
  800421a4f9:	48 83 ec 20          	sub    $0x20,%rsp
  800421a4fd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a501:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421a505:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421a509:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  800421a50c:	48 ba 00 10 22 04 80 	movabs $0x8004221000,%rdx
  800421a513:	00 00 00 
  800421a516:	be 9f 00 00 00       	mov    $0x9f,%esi
  800421a51b:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  800421a522:	00 00 00 
  800421a525:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a52a:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a531:	00 00 00 
  800421a534:	ff d1                	callq  *%rcx

000000800421a536 <ept_map_hva2gpa>:
  800421a536:	55                   	push   %rbp
  800421a537:	48 89 e5             	mov    %rsp,%rbp
  800421a53a:	48 83 ec 40          	sub    $0x40,%rsp
  800421a53e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421a542:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421a546:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421a54a:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  800421a54d:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)
  800421a551:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421a558:	00 
  800421a559:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421a560:	00 
  800421a561:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421a568:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a56c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a570:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421a577:	00 00 00 
  800421a57a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421a57e:	77 32                	ja     800421a5b2 <ept_map_hva2gpa+0x7c>
  800421a580:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a584:	48 89 c1             	mov    %rax,%rcx
  800421a587:	48 ba 28 10 22 04 80 	movabs $0x8004221028,%rdx
  800421a58e:	00 00 00 
  800421a591:	be b8 00 00 00       	mov    $0xb8,%esi
  800421a596:	48 bf f3 0f 22 04 80 	movabs $0x8004220ff3,%rdi
  800421a59d:	00 00 00 
  800421a5a0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a5a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a5ac:	00 00 00 
  800421a5af:	41 ff d0             	callq  *%r8
  800421a5b2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421a5b9:	ff ff ff 
  800421a5bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a5c0:	48 01 d0             	add    %rdx,%rax
  800421a5c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a5c7:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  800421a5cb:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  800421a5cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a5d3:	48 89 d1             	mov    %rdx,%rcx
  800421a5d6:	ba 01 00 00 00       	mov    $0x1,%edx
  800421a5db:	48 89 c7             	mov    %rax,%rdi
  800421a5de:	48 b8 50 9c 21 04 80 	movabs $0x8004219c50,%rax
  800421a5e5:	00 00 00 
  800421a5e8:	ff d0                	callq  *%rax
  800421a5ea:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421a5ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421a5f1:	75 49                	jne    800421a63c <ept_map_hva2gpa+0x106>
  800421a5f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a5f7:	48 8b 00             	mov    (%rax),%rax
  800421a5fa:	48 85 c0             	test   %rax,%rax
  800421a5fd:	74 25                	je     800421a624 <ept_map_hva2gpa+0xee>
  800421a5ff:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
  800421a603:	74 18                	je     800421a61d <ept_map_hva2gpa+0xe7>
  800421a605:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a609:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421a60c:	48 63 d2             	movslq %edx,%rdx
  800421a60f:	48 0b 55 f8          	or     -0x8(%rbp),%rdx
  800421a613:	48 89 10             	mov    %rdx,(%rax)
  800421a616:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a61b:	eb 22                	jmp    800421a63f <ept_map_hva2gpa+0x109>
  800421a61d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421a622:	eb 1b                	jmp    800421a63f <ept_map_hva2gpa+0x109>
  800421a624:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a628:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421a62b:	48 63 d2             	movslq %edx,%rdx
  800421a62e:	48 0b 55 f8          	or     -0x8(%rbp),%rdx
  800421a632:	48 89 10             	mov    %rdx,(%rax)
  800421a635:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a63a:	eb 03                	jmp    800421a63f <ept_map_hva2gpa+0x109>
  800421a63c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421a63f:	c9                   	leaveq 
  800421a640:	c3                   	retq   

000000800421a641 <ept_alloc_static>:
  800421a641:	55                   	push   %rbp
  800421a642:	48 89 e5             	mov    %rsp,%rbp
  800421a645:	53                   	push   %rbx
  800421a646:	48 83 ec 48          	sub    $0x48,%rsp
  800421a64a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421a64e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421a652:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421a659:	00 
  800421a65a:	eb 6e                	jmp    800421a6ca <ept_alloc_static+0x89>
  800421a65c:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a661:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a668:	00 00 00 
  800421a66b:	ff d0                	callq  *%rax
  800421a66d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a671:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a675:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a679:	8d 50 01             	lea    0x1(%rax),%edx
  800421a67c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a680:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a684:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  800421a688:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a68c:	48 89 c7             	mov    %rax,%rdi
  800421a68f:	48 b8 92 9b 21 04 80 	movabs $0x8004219b92,%rax
  800421a696:	00 00 00 
  800421a699:	ff d0                	callq  *%rax
  800421a69b:	48 89 c6             	mov    %rax,%rsi
  800421a69e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a6a2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a6a8:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421a6ad:	48 89 da             	mov    %rbx,%rdx
  800421a6b0:	48 89 c7             	mov    %rax,%rdi
  800421a6b3:	48 b8 36 a5 21 04 80 	movabs $0x800421a536,%rax
  800421a6ba:	00 00 00 
  800421a6bd:	ff d0                	callq  *%rax
  800421a6bf:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a6c2:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421a6c9:	00 
  800421a6ca:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421a6d1:	00 
  800421a6d2:	76 88                	jbe    800421a65c <ept_alloc_static+0x1b>
  800421a6d4:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  800421a6db:	00 
  800421a6dc:	eb 6e                	jmp    800421a74c <ept_alloc_static+0x10b>
  800421a6de:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a6e3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a6ea:	00 00 00 
  800421a6ed:	ff d0                	callq  *%rax
  800421a6ef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a6f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a6f7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a6fb:	8d 50 01             	lea    0x1(%rax),%edx
  800421a6fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a702:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a706:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  800421a70a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a70e:	48 89 c7             	mov    %rax,%rdi
  800421a711:	48 b8 92 9b 21 04 80 	movabs $0x8004219b92,%rax
  800421a718:	00 00 00 
  800421a71b:	ff d0                	callq  *%rax
  800421a71d:	48 89 c6             	mov    %rax,%rsi
  800421a720:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a724:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a72a:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421a72f:	48 89 da             	mov    %rbx,%rdx
  800421a732:	48 89 c7             	mov    %rax,%rdi
  800421a735:	48 b8 36 a5 21 04 80 	movabs $0x800421a536,%rax
  800421a73c:	00 00 00 
  800421a73f:	ff d0                	callq  *%rax
  800421a741:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a744:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421a74b:	00 
  800421a74c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a750:	48 8b 00             	mov    (%rax),%rax
  800421a753:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421a757:	77 85                	ja     800421a6de <ept_alloc_static+0x9d>
  800421a759:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a75e:	48 83 c4 48          	add    $0x48,%rsp
  800421a762:	5b                   	pop    %rbx
  800421a763:	5d                   	pop    %rbp
  800421a764:	c3                   	retq   

000000800421a765 <vmcs_writel>:
  800421a765:	55                   	push   %rbp
  800421a766:	48 89 e5             	mov    %rsp,%rbp
  800421a769:	48 83 ec 20          	sub    $0x20,%rsp
  800421a76d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a770:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421a774:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a778:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a77b:	f8                   	clc    
  800421a77c:	0f 79 d0             	vmwrite %rax,%rdx
  800421a77f:	0f 96 c0             	setbe  %al
  800421a782:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421a785:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421a789:	c9                   	leaveq 
  800421a78a:	c3                   	retq   

000000800421a78b <vmcs_readl>:
  800421a78b:	55                   	push   %rbp
  800421a78c:	48 89 e5             	mov    %rsp,%rbp
  800421a78f:	48 83 ec 14          	sub    $0x14,%rsp
  800421a793:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a796:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a799:	89 c2                	mov    %eax,%edx
  800421a79b:	0f 78 d0             	vmread %rdx,%rax
  800421a79e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a7a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a7a6:	c9                   	leaveq 
  800421a7a7:	c3                   	retq   

000000800421a7a8 <cpuid>:
{
  800421a7a8:	55                   	push   %rbp
  800421a7a9:	48 89 e5             	mov    %rsp,%rbp
  800421a7ac:	53                   	push   %rbx
  800421a7ad:	48 83 ec 38          	sub    $0x38,%rsp
  800421a7b1:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  800421a7b4:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  800421a7b8:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421a7bc:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  800421a7c0:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	asm volatile("cpuid" 
  800421a7c4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421a7c7:	0f a2                	cpuid  
  800421a7c9:	89 de                	mov    %ebx,%esi
  800421a7cb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421a7ce:	89 75 f0             	mov    %esi,-0x10(%rbp)
  800421a7d1:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  800421a7d4:	89 55 e8             	mov    %edx,-0x18(%rbp)
	if (eaxp)
  800421a7d7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421a7dc:	74 09                	je     800421a7e7 <cpuid+0x3f>
		*eaxp = eax;
  800421a7de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a7e2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421a7e5:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  800421a7e7:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421a7ec:	74 09                	je     800421a7f7 <cpuid+0x4f>
		*ebxp = ebx;
  800421a7ee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a7f2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421a7f5:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  800421a7f7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421a7fc:	74 09                	je     800421a807 <cpuid+0x5f>
		*ecxp = ecx;
  800421a7fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a802:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a805:	89 10                	mov    %edx,(%rax)
	if (edxp)
  800421a807:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421a80c:	74 09                	je     800421a817 <cpuid+0x6f>
		*edxp = edx;
  800421a80e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a812:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421a815:	89 10                	mov    %edx,(%rax)
}
  800421a817:	48 83 c4 38          	add    $0x38,%rsp
  800421a81b:	5b                   	pop    %rbx
  800421a81c:	5d                   	pop    %rbp
  800421a81d:	c3                   	retq   

000000800421a81e <page2ppn>:
  800421a81e:	55                   	push   %rbp
  800421a81f:	48 89 e5             	mov    %rsp,%rbp
  800421a822:	48 83 ec 08          	sub    $0x8,%rsp
  800421a826:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a82a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421a82e:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800421a835:	00 00 00 
  800421a838:	48 8b 00             	mov    (%rax),%rax
  800421a83b:	48 29 c2             	sub    %rax,%rdx
  800421a83e:	48 89 d0             	mov    %rdx,%rax
  800421a841:	48 c1 f8 04          	sar    $0x4,%rax
  800421a845:	c9                   	leaveq 
  800421a846:	c3                   	retq   

000000800421a847 <page2pa>:
  800421a847:	55                   	push   %rbp
  800421a848:	48 89 e5             	mov    %rsp,%rbp
  800421a84b:	48 83 ec 08          	sub    $0x8,%rsp
  800421a84f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a853:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a857:	48 89 c7             	mov    %rax,%rdi
  800421a85a:	48 b8 1e a8 21 04 80 	movabs $0x800421a81e,%rax
  800421a861:	00 00 00 
  800421a864:	ff d0                	callq  *%rax
  800421a866:	48 c1 e0 0c          	shl    $0xc,%rax
  800421a86a:	c9                   	leaveq 
  800421a86b:	c3                   	retq   

000000800421a86c <page2kva>:
  800421a86c:	55                   	push   %rbp
  800421a86d:	48 89 e5             	mov    %rsp,%rbp
  800421a870:	48 83 ec 20          	sub    $0x20,%rsp
  800421a874:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421a878:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a87c:	48 89 c7             	mov    %rax,%rdi
  800421a87f:	48 b8 47 a8 21 04 80 	movabs $0x800421a847,%rax
  800421a886:	00 00 00 
  800421a889:	ff d0                	callq  *%rax
  800421a88b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a88f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a893:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a897:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421a89a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421a89d:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421a8a4:	00 00 00 
  800421a8a7:	48 8b 00             	mov    (%rax),%rax
  800421a8aa:	48 39 c2             	cmp    %rax,%rdx
  800421a8ad:	72 32                	jb     800421a8e1 <page2kva+0x75>
  800421a8af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a8b3:	48 89 c1             	mov    %rax,%rcx
  800421a8b6:	48 ba 50 10 22 04 80 	movabs $0x8004221050,%rdx
  800421a8bd:	00 00 00 
  800421a8c0:	be 62 00 00 00       	mov    $0x62,%esi
  800421a8c5:	48 bf 73 10 22 04 80 	movabs $0x8004221073,%rdi
  800421a8cc:	00 00 00 
  800421a8cf:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a8d4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a8db:	00 00 00 
  800421a8de:	41 ff d0             	callq  *%r8
  800421a8e1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a8e8:	00 00 00 
  800421a8eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a8ef:	48 01 d0             	add    %rdx,%rax
  800421a8f2:	c9                   	leaveq 
  800421a8f3:	c3                   	retq   

000000800421a8f4 <lock_kernel>:
  800421a8f4:	55                   	push   %rbp
  800421a8f5:	48 89 e5             	mov    %rsp,%rbp
  800421a8f8:	48 bf 60 47 23 04 80 	movabs $0x8004234760,%rdi
  800421a8ff:	00 00 00 
  800421a902:	48 b8 95 85 21 04 80 	movabs $0x8004218595,%rax
  800421a909:	00 00 00 
  800421a90c:	ff d0                	callq  *%rax
  800421a90e:	5d                   	pop    %rbp
  800421a90f:	c3                   	retq   

000000800421a910 <unlock_kernel>:
  800421a910:	55                   	push   %rbp
  800421a911:	48 89 e5             	mov    %rsp,%rbp
  800421a914:	48 bf 60 47 23 04 80 	movabs $0x8004234760,%rdi
  800421a91b:	00 00 00 
  800421a91e:	48 b8 6c 86 21 04 80 	movabs $0x800421866c,%rax
  800421a925:	00 00 00 
  800421a928:	ff d0                	callq  *%rax
  800421a92a:	f3 90                	pause  
  800421a92c:	5d                   	pop    %rbp
  800421a92d:	c3                   	retq   

000000800421a92e <vmx_list_vms>:
  800421a92e:	55                   	push   %rbp
  800421a92f:	48 89 e5             	mov    %rsp,%rbp
  800421a932:	48 83 ec 10          	sub    $0x10,%rsp
  800421a936:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421a93d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421a944:	e9 96 00 00 00       	jmpq   800421a9df <vmx_list_vms+0xb1>
  800421a949:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421a950:	00 00 00 
  800421a953:	48 8b 10             	mov    (%rax),%rdx
  800421a956:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a959:	48 98                	cltq   
  800421a95b:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421a962:	48 01 d0             	add    %rdx,%rax
  800421a965:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421a96b:	83 f8 03             	cmp    $0x3,%eax
  800421a96e:	75 6b                	jne    800421a9db <vmx_list_vms+0xad>
  800421a970:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421a974:	75 1b                	jne    800421a991 <vmx_list_vms+0x63>
  800421a976:	48 bf 82 10 22 04 80 	movabs $0x8004221082,%rdi
  800421a97d:	00 00 00 
  800421a980:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a985:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421a98c:	00 00 00 
  800421a98f:	ff d2                	callq  *%rdx
  800421a991:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421a995:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421a99c:	00 00 00 
  800421a99f:	48 8b 10             	mov    (%rax),%rdx
  800421a9a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a9a5:	48 98                	cltq   
  800421a9a7:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421a9ae:	48 01 d0             	add    %rdx,%rax
  800421a9b1:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a9b7:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421a9ba:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421a9bd:	89 c6                	mov    %eax,%esi
  800421a9bf:	48 bf 90 10 22 04 80 	movabs $0x8004221090,%rdi
  800421a9c6:	00 00 00 
  800421a9c9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a9ce:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  800421a9d5:	00 00 00 
  800421a9d8:	41 ff d0             	callq  *%r8
  800421a9db:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421a9df:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421a9e6:	0f 8e 5d ff ff ff    	jle    800421a949 <vmx_list_vms+0x1b>
  800421a9ec:	c9                   	leaveq 
  800421a9ed:	c3                   	retq   

000000800421a9ee <vmx_sel_resume>:
  800421a9ee:	55                   	push   %rbp
  800421a9ef:	48 89 e5             	mov    %rsp,%rbp
  800421a9f2:	48 83 ec 20          	sub    $0x20,%rsp
  800421a9f6:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a9f9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421aa00:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421aa07:	e9 84 00 00 00       	jmpq   800421aa90 <vmx_sel_resume+0xa2>
  800421aa0c:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421aa13:	00 00 00 
  800421aa16:	48 8b 10             	mov    (%rax),%rdx
  800421aa19:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421aa1c:	48 98                	cltq   
  800421aa1e:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421aa25:	48 01 d0             	add    %rdx,%rax
  800421aa28:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421aa2e:	83 f8 03             	cmp    $0x3,%eax
  800421aa31:	75 59                	jne    800421aa8c <vmx_sel_resume+0x9e>
  800421aa33:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421aa37:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421aa3a:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421aa3d:	75 4d                	jne    800421aa8c <vmx_sel_resume+0x9e>
  800421aa3f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421aa42:	89 c6                	mov    %eax,%esi
  800421aa44:	48 bf 9d 10 22 04 80 	movabs $0x800422109d,%rdi
  800421aa4b:	00 00 00 
  800421aa4e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa53:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421aa5a:	00 00 00 
  800421aa5d:	ff d2                	callq  *%rdx
  800421aa5f:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421aa66:	00 00 00 
  800421aa69:	48 8b 10             	mov    (%rax),%rdx
  800421aa6c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421aa6f:	48 98                	cltq   
  800421aa71:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421aa78:	48 01 d0             	add    %rdx,%rax
  800421aa7b:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800421aa82:	00 00 00 
  800421aa85:	b8 01 00 00 00       	mov    $0x1,%eax
  800421aa8a:	eb 36                	jmp    800421aac2 <vmx_sel_resume+0xd4>
  800421aa8c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421aa90:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421aa97:	0f 8e 6f ff ff ff    	jle    800421aa0c <vmx_sel_resume+0x1e>
  800421aa9d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421aaa0:	89 c6                	mov    %eax,%esi
  800421aaa2:	48 bf b0 10 22 04 80 	movabs $0x80042210b0,%rdi
  800421aaa9:	00 00 00 
  800421aaac:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aab1:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421aab8:	00 00 00 
  800421aabb:	ff d2                	callq  *%rdx
  800421aabd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aac2:	c9                   	leaveq 
  800421aac3:	c3                   	retq   

000000800421aac4 <vmx_check_support>:
  800421aac4:	55                   	push   %rbp
  800421aac5:	48 89 e5             	mov    %rsp,%rbp
  800421aac8:	48 83 ec 10          	sub    $0x10,%rsp
  800421aacc:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800421aad0:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
  800421aad4:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  800421aad8:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  800421aadc:	49 89 f0             	mov    %rsi,%r8
  800421aadf:	48 89 c6             	mov    %rax,%rsi
  800421aae2:	bf 01 00 00 00       	mov    $0x1,%edi
  800421aae7:	48 b8 a8 a7 21 04 80 	movabs $0x800421a7a8,%rax
  800421aaee:	00 00 00 
  800421aaf1:	ff d0                	callq  *%rax
  800421aaf3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421aaf6:	89 c6                	mov    %eax,%esi
  800421aaf8:	48 bf d8 10 22 04 80 	movabs $0x80042210d8,%rdi
  800421aaff:	00 00 00 
  800421ab02:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab07:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421ab0e:	00 00 00 
  800421ab11:	ff d2                	callq  *%rdx
  800421ab13:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421ab16:	83 e0 20             	and    $0x20,%eax
  800421ab19:	85 c0                	test   %eax,%eax
  800421ab1b:	74 07                	je     800421ab24 <vmx_check_support+0x60>
  800421ab1d:	b8 01 00 00 00       	mov    $0x1,%eax
  800421ab22:	eb 2a                	jmp    800421ab4e <vmx_check_support+0x8a>
  800421ab24:	48 ba f7 10 22 04 80 	movabs $0x80042210f7,%rdx
  800421ab2b:	00 00 00 
  800421ab2e:	be 46 00 00 00       	mov    $0x46,%esi
  800421ab33:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421ab3a:	00 00 00 
  800421ab3d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab42:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ab49:	00 00 00 
  800421ab4c:	ff d1                	callq  *%rcx
  800421ab4e:	c9                   	leaveq 
  800421ab4f:	c3                   	retq   

000000800421ab50 <vmx_check_ept>:
  800421ab50:	55                   	push   %rbp
  800421ab51:	48 89 e5             	mov    %rsp,%rbp
  800421ab54:	48 83 ec 30          	sub    $0x30,%rsp
  800421ab58:	c7 45 fc 82 04 00 00 	movl   $0x482,-0x4(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ab5f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ab62:	89 c1                	mov    %eax,%ecx
  800421ab64:	0f 32                	rdmsr  
  800421ab66:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800421ab69:	89 45 f4             	mov    %eax,-0xc(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ab6c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421ab73:	00 
	ret = edx;
  800421ab74:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421ab77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ret = ret << 32;
  800421ab7b:	48 c1 65 e8 20       	shlq   $0x20,-0x18(%rbp)
	ret |= eax;
  800421ab80:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421ab83:	48 09 45 e8          	or     %rax,-0x18(%rbp)

	return ret;
  800421ab87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ab8b:	48 c1 e8 3f          	shr    $0x3f,%rax
  800421ab8f:	48 83 f8 01          	cmp    $0x1,%rax
  800421ab93:	75 4f                	jne    800421abe4 <vmx_check_ept+0x94>
  800421ab95:	c7 45 e4 8b 04 00 00 	movl   $0x48b,-0x1c(%rbp)
	__asm __volatile("rdmsr"
  800421ab9c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421ab9f:	89 c1                	mov    %eax,%ecx
  800421aba1:	0f 32                	rdmsr  
  800421aba3:	89 55 e0             	mov    %edx,-0x20(%rbp)
  800421aba6:	89 45 dc             	mov    %eax,-0x24(%rbp)
	uint64_t ret = 0;
  800421aba9:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421abb0:	00 
	ret = edx;
  800421abb1:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421abb4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	ret = ret << 32;
  800421abb8:	48 c1 65 d0 20       	shlq   $0x20,-0x30(%rbp)
	ret |= eax;
  800421abbd:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421abc0:	48 09 45 d0          	or     %rax,-0x30(%rbp)
	return ret;
  800421abc4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421abc8:	48 89 c2             	mov    %rax,%rdx
  800421abcb:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  800421abd2:	00 00 00 
  800421abd5:	48 21 d0             	and    %rdx,%rax
  800421abd8:	48 85 c0             	test   %rax,%rax
  800421abdb:	74 07                	je     800421abe4 <vmx_check_ept+0x94>
  800421abdd:	b8 01 00 00 00       	mov    $0x1,%eax
  800421abe2:	eb 2a                	jmp    800421ac0e <vmx_check_ept+0xbe>
  800421abe4:	48 ba 1f 11 22 04 80 	movabs $0x800422111f,%rdx
  800421abeb:	00 00 00 
  800421abee:	be 5f 00 00 00       	mov    $0x5f,%esi
  800421abf3:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421abfa:	00 00 00 
  800421abfd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac02:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ac09:	00 00 00 
  800421ac0c:	ff d1                	callq  *%rcx
  800421ac0e:	c9                   	leaveq 
  800421ac0f:	c3                   	retq   

000000800421ac10 <check_fixed_bits>:
  800421ac10:	55                   	push   %rbp
  800421ac11:	48 89 e5             	mov    %rsp,%rbp
  800421ac14:	48 83 ec 30          	sub    $0x30,%rsp
  800421ac18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421ac1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421ac20:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421ac24:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421ac2b:	e9 96 00 00 00       	jmpq   800421acc6 <check_fixed_bits+0xb6>
  800421ac30:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac33:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421ac37:	89 c1                	mov    %eax,%ecx
  800421ac39:	48 d3 ea             	shr    %cl,%rdx
  800421ac3c:	48 89 d0             	mov    %rdx,%rax
  800421ac3f:	83 e0 01             	and    $0x1,%eax
  800421ac42:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421ac45:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  800421ac49:	75 1e                	jne    800421ac69 <check_fixed_bits+0x59>
  800421ac4b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac4e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421ac52:	89 c1                	mov    %eax,%ecx
  800421ac54:	48 d3 ea             	shr    %cl,%rdx
  800421ac57:	48 89 d0             	mov    %rdx,%rax
  800421ac5a:	83 e0 01             	and    $0x1,%eax
  800421ac5d:	48 85 c0             	test   %rax,%rax
  800421ac60:	75 60                	jne    800421acc2 <check_fixed_bits+0xb2>
  800421ac62:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac67:	eb 6e                	jmp    800421acd7 <check_fixed_bits+0xc7>
  800421ac69:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421ac6d:	75 1e                	jne    800421ac8d <check_fixed_bits+0x7d>
  800421ac6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac72:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421ac76:	89 c1                	mov    %eax,%ecx
  800421ac78:	48 d3 ea             	shr    %cl,%rdx
  800421ac7b:	48 89 d0             	mov    %rdx,%rax
  800421ac7e:	83 e0 01             	and    $0x1,%eax
  800421ac81:	48 85 c0             	test   %rax,%rax
  800421ac84:	74 3c                	je     800421acc2 <check_fixed_bits+0xb2>
  800421ac86:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac8b:	eb 4a                	jmp    800421acd7 <check_fixed_bits+0xc7>
  800421ac8d:	48 b9 3a 11 22 04 80 	movabs $0x800422113a,%rcx
  800421ac94:	00 00 00 
  800421ac97:	48 ba 40 11 22 04 80 	movabs $0x8004221140,%rdx
  800421ac9e:	00 00 00 
  800421aca1:	be 78 00 00 00       	mov    $0x78,%esi
  800421aca6:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421acad:	00 00 00 
  800421acb0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421acb5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421acbc:	00 00 00 
  800421acbf:	41 ff d0             	callq  *%r8
  800421acc2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421acc6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421acc9:	83 f8 3f             	cmp    $0x3f,%eax
  800421accc:	0f 86 5e ff ff ff    	jbe    800421ac30 <check_fixed_bits+0x20>
  800421acd2:	b8 01 00 00 00       	mov    $0x1,%eax
  800421acd7:	c9                   	leaveq 
  800421acd8:	c3                   	retq   

000000800421acd9 <vmx_init_vmcs>:
  800421acd9:	55                   	push   %rbp
  800421acda:	48 89 e5             	mov    %rsp,%rbp
  800421acdd:	48 83 ec 40          	sub    $0x40,%rsp
  800421ace1:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
	__asm __volatile("rdmsr"
  800421ace8:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421aceb:	89 c1                	mov    %eax,%ecx
  800421aced:	0f 32                	rdmsr  
  800421acef:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800421acf2:	89 45 d4             	mov    %eax,-0x2c(%rbp)
	uint64_t ret = 0;
  800421acf5:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800421acfc:	00 
	ret = edx;
  800421acfd:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421ad00:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  800421ad04:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  800421ad09:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421ad0c:	48 09 45 c8          	or     %rax,-0x38(%rbp)
	return ret;
  800421ad10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ad14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421ad18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ad1c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421ad1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ad23:	48 c1 e8 20          	shr    $0x20,%rax
  800421ad27:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421ad2c:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421ad2f:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  800421ad36:	76 35                	jbe    800421ad6d <vmx_init_vmcs+0x94>
  800421ad38:	48 b9 55 11 22 04 80 	movabs $0x8004221155,%rcx
  800421ad3f:	00 00 00 
  800421ad42:	48 ba 40 11 22 04 80 	movabs $0x8004221140,%rdx
  800421ad49:	00 00 00 
  800421ad4c:	be 88 00 00 00       	mov    $0x88,%esi
  800421ad51:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421ad58:	00 00 00 
  800421ad5b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad60:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ad67:	00 00 00 
  800421ad6a:	41 ff d0             	callq  *%r8
  800421ad6d:	bf 01 00 00 00       	mov    $0x1,%edi
  800421ad72:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421ad79:	00 00 00 
  800421ad7c:	ff d0                	callq  *%rax
  800421ad7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421ad82:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421ad87:	75 07                	jne    800421ad90 <vmx_init_vmcs+0xb7>
  800421ad89:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad8e:	eb 4d                	jmp    800421addd <vmx_init_vmcs+0x104>
  800421ad90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ad94:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421ad98:	8d 50 01             	lea    0x1(%rax),%edx
  800421ad9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ad9f:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421ada3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ada7:	48 89 c7             	mov    %rax,%rdi
  800421adaa:	48 b8 6c a8 21 04 80 	movabs $0x800421a86c,%rax
  800421adb1:	00 00 00 
  800421adb4:	ff d0                	callq  *%rax
  800421adb6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421adba:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  800421adbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421adc2:	ba 04 00 00 00       	mov    $0x4,%edx
  800421adc7:	48 89 ce             	mov    %rcx,%rsi
  800421adca:	48 89 c7             	mov    %rax,%rdi
  800421adcd:	48 b8 ab 13 21 04 80 	movabs $0x80042113ab,%rax
  800421add4:	00 00 00 
  800421add7:	ff d0                	callq  *%rax
  800421add9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421addd:	c9                   	leaveq 
  800421adde:	c3                   	retq   

000000800421addf <vmx_init_vmxon>:
  800421addf:	55                   	push   %rbp
  800421ade0:	48 89 e5             	mov    %rsp,%rbp
  800421ade3:	53                   	push   %rbx
  800421ade4:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  800421adeb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421adf0:	48 ba d9 ac 21 04 80 	movabs $0x800421acd9,%rdx
  800421adf7:	00 00 00 
  800421adfa:	ff d2                	callq  *%rdx
  800421adfc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421ae00:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421ae05:	75 0a                	jne    800421ae11 <vmx_init_vmxon+0x32>
  800421ae07:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421ae0c:	e9 75 04 00 00       	jmpq   800421b286 <vmx_init_vmxon+0x4a7>
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421ae11:	0f 20 c0             	mov    %cr0,%rax
  800421ae14:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  800421ae18:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421ae1c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421ae20:	0f 20 e0             	mov    %cr4,%rax
  800421ae23:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421ae27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ae2b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421ae2f:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  800421ae34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ae38:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  800421ae3c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ae40:	0f 22 c0             	mov    %rax,%cr0
  800421ae43:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
	__asm __volatile("rdmsr"
  800421ae4a:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421ae4d:	89 c1                	mov    %eax,%ecx
  800421ae4f:	0f 32                	rdmsr  
  800421ae51:	89 55 a8             	mov    %edx,-0x58(%rbp)
  800421ae54:	89 45 a4             	mov    %eax,-0x5c(%rbp)
	uint64_t ret = 0;
  800421ae57:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  800421ae5e:	00 
	ret = edx;
  800421ae5f:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421ae62:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  800421ae66:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  800421ae6b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421ae6e:	48 09 45 98          	or     %rax,-0x68(%rbp)
	return ret;
  800421ae72:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421ae76:	48 89 c6             	mov    %rax,%rsi
  800421ae79:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
	__asm __volatile("rdmsr"
  800421ae80:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421ae83:	89 c1                	mov    %eax,%ecx
  800421ae85:	0f 32                	rdmsr  
  800421ae87:	89 55 90             	mov    %edx,-0x70(%rbp)
  800421ae8a:	89 45 8c             	mov    %eax,-0x74(%rbp)
	uint64_t ret = 0;
  800421ae8d:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421ae94:	00 
	ret = edx;
  800421ae95:	8b 45 90             	mov    -0x70(%rbp),%eax
  800421ae98:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  800421ae9c:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  800421aea1:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421aea4:	48 09 45 80          	or     %rax,-0x80(%rbp)
	return ret;
  800421aea8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421aeac:	48 89 c1             	mov    %rax,%rcx
  800421aeaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421aeb3:	48 89 f2             	mov    %rsi,%rdx
  800421aeb6:	48 89 ce             	mov    %rcx,%rsi
  800421aeb9:	48 89 c7             	mov    %rax,%rdi
  800421aebc:	48 b8 10 ac 21 04 80 	movabs $0x800421ac10,%rax
  800421aec3:	00 00 00 
  800421aec6:	ff d0                	callq  *%rax
  800421aec8:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421aecb:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421aecf:	83 f0 01             	xor    $0x1,%eax
  800421aed2:	84 c0                	test   %al,%al
  800421aed4:	74 1d                	je     800421aef3 <vmx_init_vmxon+0x114>
  800421aed6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421aeda:	48 89 c7             	mov    %rax,%rdi
  800421aedd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421aee4:	00 00 00 
  800421aee7:	ff d0                	callq  *%rax
  800421aee9:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421aeee:	e9 93 03 00 00       	jmpq   800421b286 <vmx_init_vmxon+0x4a7>
  800421aef3:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  800421aefa:	00 
  800421aefb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421aeff:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  800421af06:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421af0d:	0f 22 e0             	mov    %rax,%cr4
  800421af10:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  800421af17:	04 00 00 
	__asm __volatile("rdmsr"
  800421af1a:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421af20:	89 c1                	mov    %eax,%ecx
  800421af22:	0f 32                	rdmsr  
  800421af24:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  800421af2a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
	uint64_t ret = 0;
  800421af30:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421af37:	00 00 00 00 
	ret = edx;
  800421af3b:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421af41:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  800421af48:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  800421af4f:	20 
	ret |= eax;
  800421af50:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421af56:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)
	return ret;
  800421af5d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421af64:	48 89 c6             	mov    %rax,%rsi
  800421af67:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  800421af6e:	04 00 00 
	__asm __volatile("rdmsr"
  800421af71:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421af77:	89 c1                	mov    %eax,%ecx
  800421af79:	0f 32                	rdmsr  
  800421af7b:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  800421af81:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
	uint64_t ret = 0;
  800421af87:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  800421af8e:	00 00 00 00 
	ret = edx;
  800421af92:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  800421af98:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  800421af9f:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  800421afa6:	20 
	ret |= eax;
  800421afa7:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  800421afad:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)
	return ret;
  800421afb4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421afbb:	48 89 c1             	mov    %rax,%rcx
  800421afbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421afc2:	48 89 f2             	mov    %rsi,%rdx
  800421afc5:	48 89 ce             	mov    %rcx,%rsi
  800421afc8:	48 89 c7             	mov    %rax,%rdi
  800421afcb:	48 b8 10 ac 21 04 80 	movabs $0x800421ac10,%rax
  800421afd2:	00 00 00 
  800421afd5:	ff d0                	callq  *%rax
  800421afd7:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421afda:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421afde:	83 f0 01             	xor    $0x1,%eax
  800421afe1:	84 c0                	test   %al,%al
  800421afe3:	74 1d                	je     800421b002 <vmx_init_vmxon+0x223>
  800421afe5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421afe9:	48 89 c7             	mov    %rax,%rdi
  800421afec:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421aff3:	00 00 00 
  800421aff6:	ff d0                	callq  *%rax
  800421aff8:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421affd:	e9 84 02 00 00       	jmpq   800421b286 <vmx_init_vmxon+0x4a7>
  800421b002:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  800421b009:	00 00 00 
	__asm __volatile("rdmsr"
  800421b00c:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421b012:	89 c1                	mov    %eax,%ecx
  800421b014:	0f 32                	rdmsr  
  800421b016:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  800421b01c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
	uint64_t ret = 0;
  800421b022:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421b029:	00 00 00 00 
	ret = edx;
  800421b02d:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  800421b033:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  800421b03a:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  800421b041:	20 
	ret |= eax;
  800421b042:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b048:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)
	return ret;
  800421b04f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421b056:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b05a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b05e:	83 e0 04             	and    $0x4,%eax
  800421b061:	48 85 c0             	test   %rax,%rax
  800421b064:	0f 85 e8 00 00 00    	jne    800421b152 <vmx_init_vmxon+0x373>
  800421b06a:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421b06f:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421b076:	00 00 00 
  800421b079:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b07d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b084:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b08b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b091:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b098:	48 c1 e8 20          	shr    $0x20,%rax
  800421b09c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421b0a2:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421b0a8:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b0ae:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b0b4:	0f 30                	wrmsr  
  800421b0b6:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421b0bd:	00 00 00 
	__asm __volatile("rdmsr"
  800421b0c0:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b0c6:	89 c1                	mov    %eax,%ecx
  800421b0c8:	0f 32                	rdmsr  
  800421b0ca:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421b0d0:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
	uint64_t ret = 0;
  800421b0d6:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421b0dd:	00 00 00 00 
	ret = edx;
  800421b0e1:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421b0e7:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421b0ee:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421b0f5:	20 
	ret |= eax;
  800421b0f6:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b0fc:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)
	return ret;
  800421b103:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421b10a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b10e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b112:	83 e0 04             	and    $0x4,%eax
  800421b115:	48 85 c0             	test   %rax,%rax
  800421b118:	75 38                	jne    800421b152 <vmx_init_vmxon+0x373>
  800421b11a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b11e:	48 89 c7             	mov    %rax,%rdi
  800421b121:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b128:	00 00 00 
  800421b12b:	ff d0                	callq  *%rax
  800421b12d:	48 bf 70 11 22 04 80 	movabs $0x8004221170,%rdi
  800421b134:	00 00 00 
  800421b137:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b13c:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421b143:	00 00 00 
  800421b146:	ff d2                	callq  *%rdx
  800421b148:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421b14d:	e9 34 01 00 00       	jmpq   800421b286 <vmx_init_vmxon+0x4a7>
  800421b152:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b156:	83 e0 01             	and    $0x1,%eax
  800421b159:	48 85 c0             	test   %rax,%rax
  800421b15c:	75 4c                	jne    800421b1aa <vmx_init_vmxon+0x3cb>
  800421b15e:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421b163:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421b16a:	00 00 00 
  800421b16d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b171:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
	eax = (uint32_t) val;
  800421b178:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b17f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b185:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b18c:	48 c1 e8 20          	shr    $0x20,%rax
  800421b190:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421b196:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421b19c:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421b1a2:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421b1a8:	0f 30                	wrmsr  
  800421b1aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b1ae:	48 89 c7             	mov    %rax,%rdi
  800421b1b1:	48 b8 47 a8 21 04 80 	movabs $0x800421a847,%rax
  800421b1b8:	00 00 00 
  800421b1bb:	ff d0                	callq  *%rax
  800421b1bd:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421b1c4:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421b1cb:	f8                   	clc    
  800421b1cc:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421b1d3:	ff 
  800421b1d4:	0f 96 c0             	setbe  %al
  800421b1d7:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421b1dd:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421b1e4:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421b1e7:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421b1eb:	74 1a                	je     800421b207 <vmx_init_vmxon+0x428>
  800421b1ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b1f1:	48 89 c7             	mov    %rax,%rdi
  800421b1f4:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b1fb:	00 00 00 
  800421b1fe:	ff d0                	callq  *%rax
  800421b200:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b205:	eb 7f                	jmp    800421b286 <vmx_init_vmxon+0x4a7>
  800421b207:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421b20e:	00 00 00 
  800421b211:	ff d0                	callq  *%rax
  800421b213:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421b21a:	00 00 00 
  800421b21d:	48 98                	cltq   
  800421b21f:	48 c1 e0 03          	shl    $0x3,%rax
  800421b223:	48 89 c1             	mov    %rax,%rcx
  800421b226:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b22a:	48 01 c8             	add    %rcx,%rax
  800421b22d:	48 01 d0             	add    %rdx,%rax
  800421b230:	48 83 c0 70          	add    $0x70,%rax
  800421b234:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421b238:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421b23f:	00 00 00 
  800421b242:	ff d0                	callq  *%rax
  800421b244:	89 c3                	mov    %eax,%ebx
  800421b246:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b24a:	48 89 c7             	mov    %rax,%rdi
  800421b24d:	48 b8 6c a8 21 04 80 	movabs $0x800421a86c,%rax
  800421b254:	00 00 00 
  800421b257:	ff d0                	callq  *%rax
  800421b259:	48 89 c2             	mov    %rax,%rdx
  800421b25c:	48 b9 20 d0 6d 04 80 	movabs $0x80046dd020,%rcx
  800421b263:	00 00 00 
  800421b266:	48 63 c3             	movslq %ebx,%rax
  800421b269:	48 c1 e0 03          	shl    $0x3,%rax
  800421b26d:	48 89 c6             	mov    %rax,%rsi
  800421b270:	48 c1 e6 04          	shl    $0x4,%rsi
  800421b274:	48 01 f0             	add    %rsi,%rax
  800421b277:	48 01 c8             	add    %rcx,%rax
  800421b27a:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421b27e:	48 89 10             	mov    %rdx,(%rax)
  800421b281:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b286:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421b28d:	5b                   	pop    %rbx
  800421b28e:	5d                   	pop    %rbp
  800421b28f:	c3                   	retq   

000000800421b290 <vmcs_host_init>:
  800421b290:	55                   	push   %rbp
  800421b291:	48 89 e5             	mov    %rsp,%rbp
  800421b294:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421b29b:	0f 20 c0             	mov    %cr0,%rax
  800421b29e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421b2a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b2a6:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421b2ad:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421b2b1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421b2b5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b2b8:	48 89 d6             	mov    %rdx,%rsi
  800421b2bb:	89 c7                	mov    %eax,%edi
  800421b2bd:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b2c4:	00 00 00 
  800421b2c7:	ff d0                	callq  *%rax
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421b2c9:	0f 20 d8             	mov    %cr3,%rax
  800421b2cc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421b2d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b2d4:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421b2db:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421b2df:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421b2e3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b2e6:	48 89 d6             	mov    %rdx,%rsi
  800421b2e9:	89 c7                	mov    %eax,%edi
  800421b2eb:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b2f2:	00 00 00 
  800421b2f5:	ff d0                	callq  *%rax
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421b2f7:	0f 20 e0             	mov    %cr4,%rax
  800421b2fa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421b2fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b302:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421b309:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421b30d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421b311:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421b314:	48 89 d6             	mov    %rdx,%rsi
  800421b317:	89 c7                	mov    %eax,%edi
  800421b319:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b320:	00 00 00 
  800421b323:	ff d0                	callq  *%rax
  800421b325:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421b32c:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421b332:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421b336:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421b339:	48 89 d6             	mov    %rdx,%rsi
  800421b33c:	89 c7                	mov    %eax,%edi
  800421b33e:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b345:	00 00 00 
  800421b348:	ff d0                	callq  *%rax
  800421b34a:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421b351:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421b357:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421b35b:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b35e:	48 89 d6             	mov    %rdx,%rsi
  800421b361:	89 c7                	mov    %eax,%edi
  800421b363:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b36a:	00 00 00 
  800421b36d:	ff d0                	callq  *%rax
  800421b36f:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421b376:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421b37c:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421b380:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b383:	48 89 d6             	mov    %rdx,%rsi
  800421b386:	89 c7                	mov    %eax,%edi
  800421b388:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b38f:	00 00 00 
  800421b392:	ff d0                	callq  *%rax
  800421b394:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421b39b:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421b3a1:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421b3a5:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b3a8:	48 89 d6             	mov    %rdx,%rsi
  800421b3ab:	89 c7                	mov    %eax,%edi
  800421b3ad:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b3b4:	00 00 00 
  800421b3b7:	ff d0                	callq  *%rax
  800421b3b9:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421b3c0:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421b3c6:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421b3ca:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421b3cd:	48 89 d6             	mov    %rdx,%rsi
  800421b3d0:	89 c7                	mov    %eax,%edi
  800421b3d2:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b3d9:	00 00 00 
  800421b3dc:	ff d0                	callq  *%rax
  800421b3de:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421b3e5:	0c 00 00 
  800421b3e8:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421b3ef:	08 00 
  800421b3f1:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421b3f8:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b3fe:	48 89 d6             	mov    %rdx,%rsi
  800421b401:	89 c7                	mov    %eax,%edi
  800421b403:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b40a:	00 00 00 
  800421b40d:	ff d0                	callq  *%rax
  800421b40f:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421b416:	00 00 00 
  800421b419:	ff d0                	callq  *%rax
  800421b41b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421b422:	00 00 00 
  800421b425:	48 98                	cltq   
  800421b427:	48 c1 e0 03          	shl    $0x3,%rax
  800421b42b:	48 89 c1             	mov    %rax,%rcx
  800421b42e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b432:	48 01 c8             	add    %rcx,%rax
  800421b435:	48 01 d0             	add    %rdx,%rax
  800421b438:	0f b6 00             	movzbl (%rax),%eax
  800421b43b:	0f b6 c0             	movzbl %al,%eax
  800421b43e:	01 c0                	add    %eax,%eax
  800421b440:	83 c0 05             	add    $0x5,%eax
  800421b443:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421b446:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b449:	c1 e0 03             	shl    $0x3,%eax
  800421b44c:	0f b7 c0             	movzwl %ax,%eax
  800421b44f:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421b456:	0c 00 00 
  800421b459:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421b460:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421b467:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421b46d:	48 89 d6             	mov    %rdx,%rsi
  800421b470:	89 c7                	mov    %eax,%edi
  800421b472:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b479:	00 00 00 
  800421b47c:	ff d0                	callq  *%rax
  800421b47e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421b485:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421b48c:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421b493:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421b49a:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421b4a1:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421b4a8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421b4af:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421b4b2:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421b4b9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421b4c0:	66 89 10             	mov    %dx,(%rax)
  800421b4c3:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b4ca:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421b4d1:	6c 00 00 
  800421b4d4:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421b4db:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b4e2:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b4e8:	48 89 d6             	mov    %rdx,%rsi
  800421b4eb:	89 c7                	mov    %eax,%edi
  800421b4ed:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b4f4:	00 00 00 
  800421b4f7:	ff d0                	callq  *%rax
  800421b4f9:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421b500:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421b507:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421b50e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421b515:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421b51c:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421b523:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421b52a:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421b52d:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421b534:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421b53b:	66 89 10             	mov    %dx,(%rax)
  800421b53e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b545:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421b54c:	6c 00 00 
  800421b54f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421b556:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421b55d:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b563:	48 89 d6             	mov    %rdx,%rsi
  800421b566:	89 c7                	mov    %eax,%edi
  800421b568:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b56f:	00 00 00 
  800421b572:	ff d0                	callq  *%rax
  800421b574:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421b57b:	6c 00 00 
  800421b57e:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421b585:	00 00 00 00 
  800421b589:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421b590:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421b596:	48 89 d6             	mov    %rdx,%rsi
  800421b599:	89 c7                	mov    %eax,%edi
  800421b59b:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b5a2:	00 00 00 
  800421b5a5:	ff d0                	callq  *%rax
  800421b5a7:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421b5ae:	6c 00 00 
  800421b5b1:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421b5b8:	00 00 00 00 
  800421b5bc:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421b5c3:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b5c9:	48 89 d6             	mov    %rdx,%rsi
  800421b5cc:	89 c7                	mov    %eax,%edi
  800421b5ce:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b5d5:	00 00 00 
  800421b5d8:	ff d0                	callq  *%rax
  800421b5da:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421b5e1:	00 00 00 
  800421b5e4:	ff d0                	callq  *%rax
  800421b5e6:	48 98                	cltq   
  800421b5e8:	48 c1 e0 03          	shl    $0x3,%rax
  800421b5ec:	48 89 c2             	mov    %rax,%rdx
  800421b5ef:	48 c1 e2 04          	shl    $0x4,%rdx
  800421b5f3:	48 01 d0             	add    %rdx,%rax
  800421b5f6:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421b5fa:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800421b601:	00 00 00 
  800421b604:	48 01 d0             	add    %rdx,%rax
  800421b607:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421b60e:	6c 00 00 
  800421b611:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421b618:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421b61f:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b625:	48 89 d6             	mov    %rdx,%rsi
  800421b628:	89 c7                	mov    %eax,%edi
  800421b62a:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b631:	00 00 00 
  800421b634:	ff d0                	callq  *%rax
  800421b636:	48 b8 35 cd 21 04 80 	movabs $0x800421cd35,%rax
  800421b63d:	00 00 00 
  800421b640:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421b644:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421b648:	48 89 c6             	mov    %rax,%rsi
  800421b64b:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421b650:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b657:	00 00 00 
  800421b65a:	ff d0                	callq  *%rax
  800421b65c:	c9                   	leaveq 
  800421b65d:	c3                   	retq   

000000800421b65e <vmcs_guest_init>:
  800421b65e:	55                   	push   %rbp
  800421b65f:	48 89 e5             	mov    %rsp,%rbp
  800421b662:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421b669:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421b670:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421b676:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421b67a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b67d:	48 89 d6             	mov    %rdx,%rsi
  800421b680:	89 c7                	mov    %eax,%edi
  800421b682:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b689:	00 00 00 
  800421b68c:	ff d0                	callq  *%rax
  800421b68e:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421b695:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421b69b:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421b69f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421b6a2:	48 89 d6             	mov    %rdx,%rsi
  800421b6a5:	89 c7                	mov    %eax,%edi
  800421b6a7:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b6ae:	00 00 00 
  800421b6b1:	ff d0                	callq  *%rax
  800421b6b3:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421b6ba:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421b6c0:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421b6c4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b6c7:	48 89 d6             	mov    %rdx,%rsi
  800421b6ca:	89 c7                	mov    %eax,%edi
  800421b6cc:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b6d3:	00 00 00 
  800421b6d6:	ff d0                	callq  *%rax
  800421b6d8:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421b6df:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421b6e5:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421b6e9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b6ec:	48 89 d6             	mov    %rdx,%rsi
  800421b6ef:	89 c7                	mov    %eax,%edi
  800421b6f1:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b6f8:	00 00 00 
  800421b6fb:	ff d0                	callq  *%rax
  800421b6fd:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421b704:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421b70a:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421b70e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b711:	48 89 d6             	mov    %rdx,%rsi
  800421b714:	89 c7                	mov    %eax,%edi
  800421b716:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b71d:	00 00 00 
  800421b720:	ff d0                	callq  *%rax
  800421b722:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421b729:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421b72f:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421b733:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b736:	48 89 d6             	mov    %rdx,%rsi
  800421b739:	89 c7                	mov    %eax,%edi
  800421b73b:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b742:	00 00 00 
  800421b745:	ff d0                	callq  *%rax
  800421b747:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421b74e:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421b754:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421b758:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b75b:	48 89 d6             	mov    %rdx,%rsi
  800421b75e:	89 c7                	mov    %eax,%edi
  800421b760:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b767:	00 00 00 
  800421b76a:	ff d0                	callq  *%rax
  800421b76c:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421b773:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421b779:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421b77d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421b780:	48 89 d6             	mov    %rdx,%rsi
  800421b783:	89 c7                	mov    %eax,%edi
  800421b785:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b78c:	00 00 00 
  800421b78f:	ff d0                	callq  *%rax
  800421b791:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421b798:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421b79f:	00 
  800421b7a0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421b7a4:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421b7a7:	48 89 d6             	mov    %rdx,%rsi
  800421b7aa:	89 c7                	mov    %eax,%edi
  800421b7ac:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b7b3:	00 00 00 
  800421b7b6:	ff d0                	callq  *%rax
  800421b7b8:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421b7bf:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421b7c6:	00 
  800421b7c7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421b7cb:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b7ce:	48 89 d6             	mov    %rdx,%rsi
  800421b7d1:	89 c7                	mov    %eax,%edi
  800421b7d3:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b7da:	00 00 00 
  800421b7dd:	ff d0                	callq  *%rax
  800421b7df:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421b7e6:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421b7ed:	00 
  800421b7ee:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421b7f2:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b7f5:	48 89 d6             	mov    %rdx,%rsi
  800421b7f8:	89 c7                	mov    %eax,%edi
  800421b7fa:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b801:	00 00 00 
  800421b804:	ff d0                	callq  *%rax
  800421b806:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421b80d:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421b814:	00 
  800421b815:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421b819:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b81c:	48 89 d6             	mov    %rdx,%rsi
  800421b81f:	89 c7                	mov    %eax,%edi
  800421b821:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b828:	00 00 00 
  800421b82b:	ff d0                	callq  *%rax
  800421b82d:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421b834:	68 00 00 
  800421b837:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421b83e:	00 00 00 00 
  800421b842:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421b849:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b84f:	48 89 d6             	mov    %rdx,%rsi
  800421b852:	89 c7                	mov    %eax,%edi
  800421b854:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b85b:	00 00 00 
  800421b85e:	ff d0                	callq  *%rax
  800421b860:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421b867:	68 00 00 
  800421b86a:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421b871:	00 00 00 00 
  800421b875:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421b87c:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421b882:	48 89 d6             	mov    %rdx,%rsi
  800421b885:	89 c7                	mov    %eax,%edi
  800421b887:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b88e:	00 00 00 
  800421b891:	ff d0                	callq  *%rax
  800421b893:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421b89a:	68 00 00 
  800421b89d:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421b8a4:	00 00 00 00 
  800421b8a8:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b8af:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b8b5:	48 89 d6             	mov    %rdx,%rsi
  800421b8b8:	89 c7                	mov    %eax,%edi
  800421b8ba:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b8c1:	00 00 00 
  800421b8c4:	ff d0                	callq  *%rax
  800421b8c6:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421b8cd:	68 00 00 
  800421b8d0:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421b8d7:	00 00 00 00 
  800421b8db:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421b8e2:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421b8e8:	48 89 d6             	mov    %rdx,%rsi
  800421b8eb:	89 c7                	mov    %eax,%edi
  800421b8ed:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b8f4:	00 00 00 
  800421b8f7:	ff d0                	callq  *%rax
  800421b8f9:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421b900:	68 00 00 
  800421b903:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421b90a:	00 00 00 00 
  800421b90e:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421b915:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b91b:	48 89 d6             	mov    %rdx,%rsi
  800421b91e:	89 c7                	mov    %eax,%edi
  800421b920:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b927:	00 00 00 
  800421b92a:	ff d0                	callq  *%rax
  800421b92c:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421b933:	68 00 00 
  800421b936:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421b93d:	00 00 00 00 
  800421b941:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421b948:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421b94e:	48 89 d6             	mov    %rdx,%rsi
  800421b951:	89 c7                	mov    %eax,%edi
  800421b953:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b95a:	00 00 00 
  800421b95d:	ff d0                	callq  *%rax
  800421b95f:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421b966:	48 00 00 
  800421b969:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421b970:	ff 00 00 
  800421b973:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b979:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b97f:	48 89 d6             	mov    %rdx,%rsi
  800421b982:	89 c7                	mov    %eax,%edi
  800421b984:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b98b:	00 00 00 
  800421b98e:	ff d0                	callq  *%rax
  800421b990:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421b997:	48 00 00 
  800421b99a:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421b9a1:	ff 00 00 
  800421b9a4:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421b9aa:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b9b0:	48 89 d6             	mov    %rdx,%rsi
  800421b9b3:	89 c7                	mov    %eax,%edi
  800421b9b5:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b9bc:	00 00 00 
  800421b9bf:	ff d0                	callq  *%rax
  800421b9c1:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421b9c8:	48 00 00 
  800421b9cb:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421b9d2:	ff 00 00 
  800421b9d5:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421b9db:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b9e1:	48 89 d6             	mov    %rdx,%rsi
  800421b9e4:	89 c7                	mov    %eax,%edi
  800421b9e6:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421b9ed:	00 00 00 
  800421b9f0:	ff d0                	callq  *%rax
  800421b9f2:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421b9f9:	48 00 00 
  800421b9fc:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421ba03:	ff 00 00 
  800421ba06:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421ba0c:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421ba12:	48 89 d6             	mov    %rdx,%rsi
  800421ba15:	89 c7                	mov    %eax,%edi
  800421ba17:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421ba1e:	00 00 00 
  800421ba21:	ff d0                	callq  *%rax
  800421ba23:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421ba2a:	48 00 00 
  800421ba2d:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421ba34:	ff 00 00 
  800421ba37:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421ba3d:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421ba43:	48 89 d6             	mov    %rdx,%rsi
  800421ba46:	89 c7                	mov    %eax,%edi
  800421ba48:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421ba4f:	00 00 00 
  800421ba52:	ff d0                	callq  *%rax
  800421ba54:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421ba5b:	48 00 00 
  800421ba5e:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421ba65:	ff 00 00 
  800421ba68:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421ba6e:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421ba74:	48 89 d6             	mov    %rdx,%rsi
  800421ba77:	89 c7                	mov    %eax,%edi
  800421ba79:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421ba80:	00 00 00 
  800421ba83:	ff d0                	callq  *%rax
  800421ba85:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421ba8c:	48 00 00 
  800421ba8f:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421ba96:	ff 00 00 
  800421ba99:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421ba9f:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421baa5:	48 89 d6             	mov    %rdx,%rsi
  800421baa8:	89 c7                	mov    %eax,%edi
  800421baaa:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bab1:	00 00 00 
  800421bab4:	ff d0                	callq  *%rax
  800421bab6:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421babd:	48 00 00 
  800421bac0:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421bac7:	ff 0f 00 
  800421baca:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421bad0:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421bad6:	48 89 d6             	mov    %rdx,%rsi
  800421bad9:	89 c7                	mov    %eax,%edi
  800421badb:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bae2:	00 00 00 
  800421bae5:	ff d0                	callq  *%rax
  800421bae7:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421baee:	48 00 00 
  800421baf1:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421baf8:	00 00 00 
  800421bafb:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421bb01:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421bb07:	48 89 d6             	mov    %rdx,%rsi
  800421bb0a:	89 c7                	mov    %eax,%edi
  800421bb0c:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bb13:	00 00 00 
  800421bb16:	ff d0                	callq  *%rax
  800421bb18:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421bb1f:	48 00 00 
  800421bb22:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421bb29:	03 00 00 
  800421bb2c:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421bb32:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421bb38:	48 89 d6             	mov    %rdx,%rsi
  800421bb3b:	89 c7                	mov    %eax,%edi
  800421bb3d:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bb44:	00 00 00 
  800421bb47:	ff d0                	callq  *%rax
  800421bb49:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421bb50:	48 00 00 
  800421bb53:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421bb5a:	00 00 00 
  800421bb5d:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421bb63:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421bb69:	48 89 d6             	mov    %rdx,%rsi
  800421bb6c:	89 c7                	mov    %eax,%edi
  800421bb6e:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bb75:	00 00 00 
  800421bb78:	ff d0                	callq  *%rax
  800421bb7a:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421bb81:	48 00 00 
  800421bb84:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421bb8b:	00 00 00 
  800421bb8e:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421bb94:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421bb9a:	48 89 d6             	mov    %rdx,%rsi
  800421bb9d:	89 c7                	mov    %eax,%edi
  800421bb9f:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bba6:	00 00 00 
  800421bba9:	ff d0                	callq  *%rax
  800421bbab:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421bbb2:	48 00 00 
  800421bbb5:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421bbbc:	00 00 00 
  800421bbbf:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421bbc5:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421bbcb:	48 89 d6             	mov    %rdx,%rsi
  800421bbce:	89 c7                	mov    %eax,%edi
  800421bbd0:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bbd7:	00 00 00 
  800421bbda:	ff d0                	callq  *%rax
  800421bbdc:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421bbe3:	48 00 00 
  800421bbe6:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421bbed:	00 00 00 
  800421bbf0:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421bbf6:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421bbfc:	48 89 d6             	mov    %rdx,%rsi
  800421bbff:	89 c7                	mov    %eax,%edi
  800421bc01:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bc08:	00 00 00 
  800421bc0b:	ff d0                	callq  *%rax
  800421bc0d:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421bc14:	48 00 00 
  800421bc17:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421bc1e:	00 00 00 
  800421bc21:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421bc27:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421bc2d:	48 89 d6             	mov    %rdx,%rsi
  800421bc30:	89 c7                	mov    %eax,%edi
  800421bc32:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bc39:	00 00 00 
  800421bc3c:	ff d0                	callq  *%rax
  800421bc3e:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421bc45:	48 00 00 
  800421bc48:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421bc4f:	00 00 00 
  800421bc52:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421bc58:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421bc5e:	48 89 d6             	mov    %rdx,%rsi
  800421bc61:	89 c7                	mov    %eax,%edi
  800421bc63:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bc6a:	00 00 00 
  800421bc6d:	ff d0                	callq  *%rax
  800421bc6f:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421bc76:	48 00 00 
  800421bc79:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421bc80:	00 00 00 
  800421bc83:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421bc89:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421bc8f:	48 89 d6             	mov    %rdx,%rsi
  800421bc92:	89 c7                	mov    %eax,%edi
  800421bc94:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bc9b:	00 00 00 
  800421bc9e:	ff d0                	callq  *%rax
  800421bca0:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421bca7:	48 00 00 
  800421bcaa:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421bcb1:	00 00 00 
  800421bcb4:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421bcba:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421bcc0:	48 89 d6             	mov    %rdx,%rsi
  800421bcc3:	89 c7                	mov    %eax,%edi
  800421bcc5:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bccc:	00 00 00 
  800421bccf:	ff d0                	callq  *%rax
  800421bcd1:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421bcd8:	48 00 00 
  800421bcdb:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421bce2:	00 00 00 
  800421bce5:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421bceb:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421bcf1:	48 89 d6             	mov    %rdx,%rsi
  800421bcf4:	89 c7                	mov    %eax,%edi
  800421bcf6:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bcfd:	00 00 00 
  800421bd00:	ff d0                	callq  *%rax
  800421bd02:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421bd09:	48 00 00 
  800421bd0c:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421bd13:	00 00 00 
  800421bd16:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421bd1c:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421bd22:	48 89 d6             	mov    %rdx,%rsi
  800421bd25:	89 c7                	mov    %eax,%edi
  800421bd27:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bd2e:	00 00 00 
  800421bd31:	ff d0                	callq  *%rax
  800421bd33:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421bd3a:	68 00 00 
  800421bd3d:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421bd44:	00 00 00 00 
  800421bd48:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421bd4f:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421bd55:	48 89 d6             	mov    %rdx,%rsi
  800421bd58:	89 c7                	mov    %eax,%edi
  800421bd5a:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bd61:	00 00 00 
  800421bd64:	ff d0                	callq  *%rax
  800421bd66:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421bd6d:	68 00 00 
  800421bd70:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421bd77:	20 00 00 00 
  800421bd7b:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421bd82:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421bd88:	48 89 d6             	mov    %rdx,%rsi
  800421bd8b:	89 c7                	mov    %eax,%edi
  800421bd8d:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bd94:	00 00 00 
  800421bd97:	ff d0                	callq  *%rax
  800421bd99:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421bda0:	68 00 00 
  800421bda3:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421bdaa:	00 20 00 00 
  800421bdae:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421bdb5:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421bdbb:	48 89 d6             	mov    %rdx,%rsi
  800421bdbe:	89 c7                	mov    %eax,%edi
  800421bdc0:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bdc7:	00 00 00 
  800421bdca:	ff d0                	callq  *%rax
  800421bdcc:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421bdd3:	28 00 00 
  800421bdd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421bddb:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421bde2:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421bde9:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421bdef:	48 89 d6             	mov    %rdx,%rsi
  800421bdf2:	89 c7                	mov    %eax,%edi
  800421bdf4:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bdfb:	00 00 00 
  800421bdfe:	ff d0                	callq  *%rax
  800421be00:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421be07:	28 00 00 
  800421be0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421be0f:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421be16:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421be1d:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421be23:	48 89 d6             	mov    %rdx,%rsi
  800421be26:	89 c7                	mov    %eax,%edi
  800421be28:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421be2f:	00 00 00 
  800421be32:	ff d0                	callq  *%rax
  800421be34:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421be3b:	68 00 00 
  800421be3e:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421be45:	00 00 00 00 
  800421be49:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421be50:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421be56:	48 89 d6             	mov    %rdx,%rsi
  800421be59:	89 c7                	mov    %eax,%edi
  800421be5b:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421be62:	00 00 00 
  800421be65:	ff d0                	callq  *%rax
  800421be67:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421be6e:	68 00 00 
  800421be71:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421be78:	02 00 00 00 
  800421be7c:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421be83:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421be89:	48 89 d6             	mov    %rdx,%rsi
  800421be8c:	89 c7                	mov    %eax,%edi
  800421be8e:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421be95:	00 00 00 
  800421be98:	ff d0                	callq  *%rax
  800421be9a:	c9                   	leaveq 
  800421be9b:	c3                   	retq   

000000800421be9c <vmx_read_capability_msr>:
  800421be9c:	55                   	push   %rbp
  800421be9d:	48 89 e5             	mov    %rsp,%rbp
  800421bea0:	48 83 ec 38          	sub    $0x38,%rsp
  800421bea4:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421bea7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421beab:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421beaf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421beb2:	89 45 f4             	mov    %eax,-0xc(%rbp)
	__asm __volatile("rdmsr"
  800421beb5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421beb8:	89 c1                	mov    %eax,%ecx
  800421beba:	0f 32                	rdmsr  
  800421bebc:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421bebf:	89 45 ec             	mov    %eax,-0x14(%rbp)
	uint64_t ret = 0;
  800421bec2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421bec9:	00 
	ret = edx;
  800421beca:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421becd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421bed1:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421bed6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421bed9:	48 09 45 e0          	or     %rax,-0x20(%rbp)
	return ret;
  800421bedd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421bee1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421bee5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421bee9:	48 c1 e8 20          	shr    $0x20,%rax
  800421beed:	89 c2                	mov    %eax,%edx
  800421beef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421bef3:	89 10                	mov    %edx,(%rax)
  800421bef5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421bef9:	89 c2                	mov    %eax,%edx
  800421befb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421beff:	89 10                	mov    %edx,(%rax)
  800421bf01:	c9                   	leaveq 
  800421bf02:	c3                   	retq   

000000800421bf03 <vmcs_ctls_init>:
  800421bf03:	55                   	push   %rbp
  800421bf04:	48 89 e5             	mov    %rsp,%rbp
  800421bf07:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421bf0e:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421bf15:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421bf1c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421bf23:	48 89 c6             	mov    %rax,%rsi
  800421bf26:	bf 81 04 00 00       	mov    $0x481,%edi
  800421bf2b:	48 b8 9c be 21 04 80 	movabs $0x800421be9c,%rax
  800421bf32:	00 00 00 
  800421bf35:	ff d0                	callq  *%rax
  800421bf37:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421bf3d:	83 c8 01             	or     $0x1,%eax
  800421bf40:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421bf46:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421bf4c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421bf52:	21 d0                	and    %edx,%eax
  800421bf54:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421bf5b:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421bf5e:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421bf61:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bf64:	48 89 d6             	mov    %rdx,%rsi
  800421bf67:	89 c7                	mov    %eax,%edi
  800421bf69:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421bf70:	00 00 00 
  800421bf73:	ff d0                	callq  *%rax
  800421bf75:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421bf7c:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421bf83:	48 89 c6             	mov    %rax,%rsi
  800421bf86:	bf 82 04 00 00       	mov    $0x482,%edi
  800421bf8b:	48 b8 9c be 21 04 80 	movabs $0x800421be9c,%rax
  800421bf92:	00 00 00 
  800421bf95:	ff d0                	callq  *%rax
  800421bf97:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421bf9d:	c1 e8 1f             	shr    $0x1f,%eax
  800421bfa0:	83 f8 01             	cmp    $0x1,%eax
  800421bfa3:	74 35                	je     800421bfda <vmcs_ctls_init+0xd7>
  800421bfa5:	48 b9 a0 11 22 04 80 	movabs $0x80042211a0,%rcx
  800421bfac:	00 00 00 
  800421bfaf:	48 ba 40 11 22 04 80 	movabs $0x8004221140,%rdx
  800421bfb6:	00 00 00 
  800421bfb9:	be 5e 01 00 00       	mov    $0x15e,%esi
  800421bfbe:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421bfc5:	00 00 00 
  800421bfc8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bfcd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421bfd4:	00 00 00 
  800421bfd7:	41 ff d0             	callq  *%r8
  800421bfda:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bfe0:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421bfe5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421bfeb:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bff1:	0c 80                	or     $0x80,%al
  800421bff3:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421bff9:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bfff:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421c004:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c00a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c010:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421c015:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c01b:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421c021:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421c027:	21 d0                	and    %edx,%eax
  800421c029:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421c030:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421c033:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421c036:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c039:	48 89 d6             	mov    %rdx,%rsi
  800421c03c:	89 c7                	mov    %eax,%edi
  800421c03e:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c045:	00 00 00 
  800421c048:	ff d0                	callq  *%rax
  800421c04a:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421c051:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421c058:	48 89 c6             	mov    %rax,%rsi
  800421c05b:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421c060:	48 b8 9c be 21 04 80 	movabs $0x800421be9c,%rax
  800421c067:	00 00 00 
  800421c06a:	ff d0                	callq  *%rax
  800421c06c:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c072:	83 c8 02             	or     $0x2,%eax
  800421c075:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c07b:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c081:	0c 80                	or     $0x80,%al
  800421c083:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c089:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421c08f:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421c095:	21 d0                	and    %edx,%eax
  800421c097:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421c09e:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421c0a1:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421c0a4:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c0a7:	48 89 d6             	mov    %rdx,%rsi
  800421c0aa:	89 c7                	mov    %eax,%edi
  800421c0ac:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c0b3:	00 00 00 
  800421c0b6:	ff d0                	callq  *%rax
  800421c0b8:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421c0bf:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421c0c6:	48 89 c6             	mov    %rax,%rsi
  800421c0c9:	bf 83 04 00 00       	mov    $0x483,%edi
  800421c0ce:	48 b8 9c be 21 04 80 	movabs $0x800421be9c,%rax
  800421c0d5:	00 00 00 
  800421c0d8:	ff d0                	callq  *%rax
  800421c0da:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c0e0:	80 cc 02             	or     $0x2,%ah
  800421c0e3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c0e9:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c0ef:	80 cc 80             	or     $0x80,%ah
  800421c0f2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c0f8:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421c0fe:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421c104:	21 d0                	and    %edx,%eax
  800421c106:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421c10d:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421c110:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421c113:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421c116:	48 89 d6             	mov    %rdx,%rsi
  800421c119:	89 c7                	mov    %eax,%edi
  800421c11b:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c122:	00 00 00 
  800421c125:	ff d0                	callq  *%rax
  800421c127:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c12e:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c135:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c139:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c140:	00 00 00 
  800421c143:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421c147:	77 32                	ja     800421c17b <vmcs_ctls_init+0x278>
  800421c149:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c14d:	48 89 c1             	mov    %rax,%rcx
  800421c150:	48 ba c8 11 22 04 80 	movabs $0x80042211c8,%rdx
  800421c157:	00 00 00 
  800421c15a:	be 82 01 00 00       	mov    $0x182,%esi
  800421c15f:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421c166:	00 00 00 
  800421c169:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c16e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c175:	00 00 00 
  800421c178:	41 ff d0             	callq  *%r8
  800421c17b:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c182:	ff ff ff 
  800421c185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c189:	48 01 d0             	add    %rdx,%rax
  800421c18c:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421c193:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421c197:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421c19b:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421c19e:	48 89 d6             	mov    %rdx,%rsi
  800421c1a1:	89 c7                	mov    %eax,%edi
  800421c1a3:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c1aa:	00 00 00 
  800421c1ad:	ff d0                	callq  *%rax
  800421c1af:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c1b6:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c1bc:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421c1c3:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421c1c6:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421c1c9:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421c1cc:	48 89 d6             	mov    %rdx,%rsi
  800421c1cf:	89 c7                	mov    %eax,%edi
  800421c1d1:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c1d8:	00 00 00 
  800421c1db:	ff d0                	callq  *%rax
  800421c1dd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c1e4:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421c1eb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c1ef:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c1f6:	00 00 00 
  800421c1f9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421c1fd:	77 32                	ja     800421c231 <vmcs_ctls_init+0x32e>
  800421c1ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c203:	48 89 c1             	mov    %rax,%rcx
  800421c206:	48 ba c8 11 22 04 80 	movabs $0x80042211c8,%rdx
  800421c20d:	00 00 00 
  800421c210:	be 86 01 00 00       	mov    $0x186,%esi
  800421c215:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421c21c:	00 00 00 
  800421c21f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c224:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c22b:	00 00 00 
  800421c22e:	41 ff d0             	callq  *%r8
  800421c231:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c238:	ff ff ff 
  800421c23b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c23f:	48 01 d0             	add    %rdx,%rax
  800421c242:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421c249:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421c24d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421c251:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421c254:	48 89 d6             	mov    %rdx,%rsi
  800421c257:	89 c7                	mov    %eax,%edi
  800421c259:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c260:	00 00 00 
  800421c263:	ff d0                	callq  *%rax
  800421c265:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c26c:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c272:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421c279:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421c27c:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421c27f:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421c282:	48 89 d6             	mov    %rdx,%rsi
  800421c285:	89 c7                	mov    %eax,%edi
  800421c287:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c28e:	00 00 00 
  800421c291:	ff d0                	callq  *%rax
  800421c293:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421c29a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421c2a1:	48 89 c6             	mov    %rax,%rsi
  800421c2a4:	bf 84 04 00 00       	mov    $0x484,%edi
  800421c2a9:	48 b8 9c be 21 04 80 	movabs $0x800421be9c,%rax
  800421c2b0:	00 00 00 
  800421c2b3:	ff d0                	callq  *%rax
  800421c2b5:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c2bc:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c2c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421c2c7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c2ce:	00 00 00 
  800421c2d1:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c2d5:	77 32                	ja     800421c309 <vmcs_ctls_init+0x406>
  800421c2d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c2db:	48 89 c1             	mov    %rax,%rcx
  800421c2de:	48 ba c8 11 22 04 80 	movabs $0x80042211c8,%rdx
  800421c2e5:	00 00 00 
  800421c2e8:	be 90 01 00 00       	mov    $0x190,%esi
  800421c2ed:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421c2f4:	00 00 00 
  800421c2f7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c2fc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c303:	00 00 00 
  800421c306:	41 ff d0             	callq  *%r8
  800421c309:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c310:	ff ff ff 
  800421c313:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c317:	48 01 d0             	add    %rdx,%rax
  800421c31a:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421c321:	20 00 00 
  800421c324:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421c32b:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421c332:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421c338:	48 89 d6             	mov    %rdx,%rsi
  800421c33b:	89 c7                	mov    %eax,%edi
  800421c33d:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c344:	00 00 00 
  800421c347:	ff d0                	callq  *%rax
  800421c349:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c350:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c356:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421c35d:	40 00 00 
  800421c360:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421c366:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421c36c:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421c372:	48 89 d6             	mov    %rdx,%rsi
  800421c375:	89 c7                	mov    %eax,%edi
  800421c377:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c37e:	00 00 00 
  800421c381:	ff d0                	callq  *%rax
  800421c383:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421c389:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421c38f:	21 d0                	and    %edx,%eax
  800421c391:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421c398:	40 00 00 
  800421c39b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421c3a1:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421c3a7:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421c3ad:	48 89 d6             	mov    %rdx,%rsi
  800421c3b0:	89 c7                	mov    %eax,%edi
  800421c3b2:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c3b9:	00 00 00 
  800421c3bc:	ff d0                	callq  *%rax
  800421c3be:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c3c5:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421c3cc:	48 83 c8 18          	or     $0x18,%rax
  800421c3d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421c3d4:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421c3db:	20 00 00 
  800421c3de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c3e2:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421c3e9:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421c3f0:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421c3f6:	48 89 d6             	mov    %rdx,%rsi
  800421c3f9:	89 c7                	mov    %eax,%edi
  800421c3fb:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c402:	00 00 00 
  800421c405:	ff d0                	callq  *%rax
  800421c407:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c40e:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421c414:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421c41b:	40 00 00 
  800421c41e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421c424:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421c42a:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421c430:	48 89 d6             	mov    %rdx,%rsi
  800421c433:	89 c7                	mov    %eax,%edi
  800421c435:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c43c:	00 00 00 
  800421c43f:	ff d0                	callq  *%rax
  800421c441:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c448:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421c44f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421c453:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c45a:	00 00 00 
  800421c45d:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421c461:	77 32                	ja     800421c495 <vmcs_ctls_init+0x592>
  800421c463:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c467:	48 89 c1             	mov    %rax,%rcx
  800421c46a:	48 ba c8 11 22 04 80 	movabs $0x80042211c8,%rdx
  800421c471:	00 00 00 
  800421c474:	be 9d 01 00 00       	mov    $0x19d,%esi
  800421c479:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421c480:	00 00 00 
  800421c483:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c488:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c48f:	00 00 00 
  800421c492:	41 ff d0             	callq  *%r8
  800421c495:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c49c:	ff ff ff 
  800421c49f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c4a3:	48 01 d0             	add    %rdx,%rax
  800421c4a6:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421c4ad:	20 00 00 
  800421c4b0:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421c4b7:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421c4be:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421c4c4:	48 89 d6             	mov    %rdx,%rsi
  800421c4c7:	89 c7                	mov    %eax,%edi
  800421c4c9:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c4d0:	00 00 00 
  800421c4d3:	ff d0                	callq  *%rax
  800421c4d5:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c4dc:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421c4e3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421c4e7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c4ee:	00 00 00 
  800421c4f1:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421c4f5:	77 32                	ja     800421c529 <vmcs_ctls_init+0x626>
  800421c4f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c4fb:	48 89 c1             	mov    %rax,%rcx
  800421c4fe:	48 ba c8 11 22 04 80 	movabs $0x80042211c8,%rdx
  800421c505:	00 00 00 
  800421c508:	be 9f 01 00 00       	mov    $0x19f,%esi
  800421c50d:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421c514:	00 00 00 
  800421c517:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c51c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c523:	00 00 00 
  800421c526:	41 ff d0             	callq  *%r8
  800421c529:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c530:	ff ff ff 
  800421c533:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c537:	48 01 d0             	add    %rdx,%rax
  800421c53a:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421c541:	20 00 00 
  800421c544:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421c54b:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421c552:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421c558:	48 89 d6             	mov    %rdx,%rsi
  800421c55b:	89 c7                	mov    %eax,%edi
  800421c55d:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421c564:	00 00 00 
  800421c567:	ff d0                	callq  *%rax
  800421c569:	c9                   	leaveq 
  800421c56a:	c3                   	retq   

000000800421c56b <vmcs_dump_cpu>:
  800421c56b:	55                   	push   %rbp
  800421c56c:	48 89 e5             	mov    %rsp,%rbp
  800421c56f:	53                   	push   %rbx
  800421c570:	48 83 ec 28          	sub    $0x28,%rsp
  800421c574:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421c579:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421c580:	00 00 00 
  800421c583:	ff d0                	callq  *%rax
  800421c585:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421c589:	48 bf ec 11 22 04 80 	movabs $0x80042211ec,%rdi
  800421c590:	00 00 00 
  800421c593:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c598:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421c59f:	00 00 00 
  800421c5a2:	ff d2                	callq  *%rdx
  800421c5a4:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421c5ab:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421c5ae:	89 c7                	mov    %eax,%edi
  800421c5b0:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421c5b7:	00 00 00 
  800421c5ba:	ff d0                	callq  *%rax
  800421c5bc:	48 89 c3             	mov    %rax,%rbx
  800421c5bf:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421c5c6:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421c5c9:	89 c7                	mov    %eax,%edi
  800421c5cb:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421c5d2:	00 00 00 
  800421c5d5:	ff d0                	callq  *%rax
  800421c5d7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421c5db:	48 89 d1             	mov    %rdx,%rcx
  800421c5de:	48 89 da             	mov    %rbx,%rdx
  800421c5e1:	48 89 c6             	mov    %rax,%rsi
  800421c5e4:	48 bf 10 12 22 04 80 	movabs $0x8004221210,%rdi
  800421c5eb:	00 00 00 
  800421c5ee:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c5f3:	49 b8 93 9c 20 04 80 	movabs $0x8004209c93,%r8
  800421c5fa:	00 00 00 
  800421c5fd:	41 ff d0             	callq  *%r8
  800421c600:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421c607:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421c60a:	89 c7                	mov    %eax,%edi
  800421c60c:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421c613:	00 00 00 
  800421c616:	ff d0                	callq  *%rax
  800421c618:	48 89 c3             	mov    %rax,%rbx
  800421c61b:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421c622:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421c625:	89 c7                	mov    %eax,%edi
  800421c627:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421c62e:	00 00 00 
  800421c631:	ff d0                	callq  *%rax
  800421c633:	48 89 da             	mov    %rbx,%rdx
  800421c636:	48 89 c6             	mov    %rax,%rsi
  800421c639:	48 bf 48 12 22 04 80 	movabs $0x8004221248,%rdi
  800421c640:	00 00 00 
  800421c643:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c648:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800421c64f:	00 00 00 
  800421c652:	ff d1                	callq  *%rcx
  800421c654:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421c65b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421c65e:	89 c7                	mov    %eax,%edi
  800421c660:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421c667:	00 00 00 
  800421c66a:	ff d0                	callq  *%rax
  800421c66c:	48 89 c6             	mov    %rax,%rsi
  800421c66f:	48 bf 6a 12 22 04 80 	movabs $0x800422126a,%rdi
  800421c676:	00 00 00 
  800421c679:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c67e:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421c685:	00 00 00 
  800421c688:	ff d2                	callq  *%rdx
  800421c68a:	48 bf 7f 12 22 04 80 	movabs $0x800422127f,%rdi
  800421c691:	00 00 00 
  800421c694:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c699:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421c6a0:	00 00 00 
  800421c6a3:	ff d2                	callq  *%rdx
  800421c6a5:	48 83 c4 28          	add    $0x28,%rsp
  800421c6a9:	5b                   	pop    %rbx
  800421c6aa:	5d                   	pop    %rbp
  800421c6ab:	c3                   	retq   

000000800421c6ac <vmexit>:
  800421c6ac:	55                   	push   %rbp
  800421c6ad:	48 89 e5             	mov    %rsp,%rbp
  800421c6b0:	41 54                	push   %r12
  800421c6b2:	53                   	push   %rbx
  800421c6b3:	48 83 ec 10          	sub    $0x10,%rsp
  800421c6b7:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421c6be:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421c6c2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421c6c5:	0f b7 c0             	movzwl %ax,%eax
  800421c6c8:	83 f8 30             	cmp    $0x30,%eax
  800421c6cb:	0f 87 03 05 00 00    	ja     800421cbd4 <vmexit+0x528>
  800421c6d1:	89 c0                	mov    %eax,%eax
  800421c6d3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421c6da:	00 
  800421c6db:	48 b8 e8 12 22 04 80 	movabs $0x80042212e8,%rax
  800421c6e2:	00 00 00 
  800421c6e5:	48 01 d0             	add    %rdx,%rax
  800421c6e8:	48 8b 00             	mov    (%rax),%rax
  800421c6eb:	ff e0                	jmpq   *%rax
  800421c6ed:	c7 45 e4 04 44 00 00 	movl   $0x4404,-0x1c(%rbp)
  800421c6f4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421c6f7:	89 c7                	mov    %eax,%edi
  800421c6f9:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421c700:	00 00 00 
  800421c703:	ff d0                	callq  *%rax
  800421c705:	89 c2                	mov    %eax,%edx
  800421c707:	48 b8 c4 b5 6d 04 80 	movabs $0x80046db5c4,%rax
  800421c70e:	00 00 00 
  800421c711:	89 10                	mov    %edx,(%rax)
  800421c713:	48 b8 c4 b5 6d 04 80 	movabs $0x80046db5c4,%rax
  800421c71a:	00 00 00 
  800421c71d:	8b 18                	mov    (%rax),%ebx
  800421c71f:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c726:	00 00 00 
  800421c729:	ff d0                	callq  *%rax
  800421c72b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c732:	00 00 00 
  800421c735:	48 98                	cltq   
  800421c737:	48 c1 e0 03          	shl    $0x3,%rax
  800421c73b:	48 89 c1             	mov    %rax,%rcx
  800421c73e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c742:	48 01 c8             	add    %rcx,%rax
  800421c745:	48 01 d0             	add    %rdx,%rax
  800421c748:	48 83 c0 08          	add    $0x8,%rax
  800421c74c:	48 8b 00             	mov    (%rax),%rax
  800421c74f:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421c756:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c75d:	00 00 00 
  800421c760:	ff d0                	callq  *%rax
  800421c762:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c769:	00 00 00 
  800421c76c:	48 98                	cltq   
  800421c76e:	48 c1 e0 03          	shl    $0x3,%rax
  800421c772:	48 89 c1             	mov    %rax,%rcx
  800421c775:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c779:	48 01 c8             	add    %rcx,%rax
  800421c77c:	48 01 d0             	add    %rdx,%rax
  800421c77f:	48 83 c0 08          	add    $0x8,%rax
  800421c783:	48 8b 00             	mov    (%rax),%rax
  800421c786:	89 da                	mov    %ebx,%edx
  800421c788:	4c 89 e6             	mov    %r12,%rsi
  800421c78b:	48 89 c7             	mov    %rax,%rdi
  800421c78e:	48 b8 c8 d5 21 04 80 	movabs $0x800421d5c8,%rax
  800421c795:	00 00 00 
  800421c798:	ff d0                	callq  *%rax
  800421c79a:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c79d:	e9 32 04 00 00       	jmpq   800421cbd4 <vmexit+0x528>
  800421c7a2:	48 b8 c4 b5 6d 04 80 	movabs $0x80046db5c4,%rax
  800421c7a9:	00 00 00 
  800421c7ac:	8b 18                	mov    (%rax),%ebx
  800421c7ae:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c7b5:	00 00 00 
  800421c7b8:	ff d0                	callq  *%rax
  800421c7ba:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c7c1:	00 00 00 
  800421c7c4:	48 98                	cltq   
  800421c7c6:	48 c1 e0 03          	shl    $0x3,%rax
  800421c7ca:	48 89 c1             	mov    %rax,%rcx
  800421c7cd:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c7d1:	48 01 c8             	add    %rcx,%rax
  800421c7d4:	48 01 d0             	add    %rdx,%rax
  800421c7d7:	48 83 c0 08          	add    $0x8,%rax
  800421c7db:	48 8b 00             	mov    (%rax),%rax
  800421c7de:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421c7e5:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c7ec:	00 00 00 
  800421c7ef:	ff d0                	callq  *%rax
  800421c7f1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c7f8:	00 00 00 
  800421c7fb:	48 98                	cltq   
  800421c7fd:	48 c1 e0 03          	shl    $0x3,%rax
  800421c801:	48 89 c1             	mov    %rax,%rcx
  800421c804:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c808:	48 01 c8             	add    %rcx,%rax
  800421c80b:	48 01 d0             	add    %rdx,%rax
  800421c80e:	48 83 c0 08          	add    $0x8,%rax
  800421c812:	48 8b 00             	mov    (%rax),%rax
  800421c815:	89 da                	mov    %ebx,%edx
  800421c817:	4c 89 e6             	mov    %r12,%rsi
  800421c81a:	48 89 c7             	mov    %rax,%rdi
  800421c81d:	48 b8 47 d5 21 04 80 	movabs $0x800421d547,%rax
  800421c824:	00 00 00 
  800421c827:	ff d0                	callq  *%rax
  800421c829:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c82c:	e9 a3 03 00 00       	jmpq   800421cbd4 <vmexit+0x528>
  800421c831:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c838:	00 00 00 
  800421c83b:	ff d0                	callq  *%rax
  800421c83d:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c844:	00 00 00 
  800421c847:	48 98                	cltq   
  800421c849:	48 c1 e0 03          	shl    $0x3,%rax
  800421c84d:	48 89 c1             	mov    %rax,%rcx
  800421c850:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c854:	48 01 c8             	add    %rcx,%rax
  800421c857:	48 01 d0             	add    %rdx,%rax
  800421c85a:	48 83 c0 08          	add    $0x8,%rax
  800421c85e:	48 8b 00             	mov    (%rax),%rax
  800421c861:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c868:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c86f:	00 00 00 
  800421c872:	ff d0                	callq  *%rax
  800421c874:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c87b:	00 00 00 
  800421c87e:	48 98                	cltq   
  800421c880:	48 c1 e0 03          	shl    $0x3,%rax
  800421c884:	48 89 c1             	mov    %rax,%rcx
  800421c887:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c88b:	48 01 c8             	add    %rcx,%rax
  800421c88e:	48 01 d0             	add    %rdx,%rax
  800421c891:	48 83 c0 08          	add    $0x8,%rax
  800421c895:	48 8b 00             	mov    (%rax),%rax
  800421c898:	48 89 de             	mov    %rbx,%rsi
  800421c89b:	48 89 c7             	mov    %rax,%rdi
  800421c89e:	48 b8 75 d6 21 04 80 	movabs $0x800421d675,%rax
  800421c8a5:	00 00 00 
  800421c8a8:	ff d0                	callq  *%rax
  800421c8aa:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c8ad:	e9 22 03 00 00       	jmpq   800421cbd4 <vmexit+0x528>
  800421c8b2:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c8b9:	00 00 00 
  800421c8bc:	ff d0                	callq  *%rax
  800421c8be:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c8c5:	00 00 00 
  800421c8c8:	48 98                	cltq   
  800421c8ca:	48 c1 e0 03          	shl    $0x3,%rax
  800421c8ce:	48 89 c1             	mov    %rax,%rcx
  800421c8d1:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c8d5:	48 01 c8             	add    %rcx,%rax
  800421c8d8:	48 01 d0             	add    %rdx,%rax
  800421c8db:	48 83 c0 08          	add    $0x8,%rax
  800421c8df:	48 8b 00             	mov    (%rax),%rax
  800421c8e2:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c8e9:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c8f0:	00 00 00 
  800421c8f3:	ff d0                	callq  *%rax
  800421c8f5:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c8fc:	00 00 00 
  800421c8ff:	48 98                	cltq   
  800421c901:	48 c1 e0 03          	shl    $0x3,%rax
  800421c905:	48 89 c1             	mov    %rax,%rcx
  800421c908:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c90c:	48 01 c8             	add    %rcx,%rax
  800421c90f:	48 01 d0             	add    %rdx,%rax
  800421c912:	48 83 c0 08          	add    $0x8,%rax
  800421c916:	48 8b 00             	mov    (%rax),%rax
  800421c919:	48 89 de             	mov    %rbx,%rsi
  800421c91c:	48 89 c7             	mov    %rax,%rdi
  800421c91f:	48 b8 7d d7 21 04 80 	movabs $0x800421d77d,%rax
  800421c926:	00 00 00 
  800421c929:	ff d0                	callq  *%rax
  800421c92b:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c92e:	e9 a1 02 00 00       	jmpq   800421cbd4 <vmexit+0x528>
  800421c933:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c93a:	00 00 00 
  800421c93d:	ff d0                	callq  *%rax
  800421c93f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c946:	00 00 00 
  800421c949:	48 98                	cltq   
  800421c94b:	48 c1 e0 03          	shl    $0x3,%rax
  800421c94f:	48 89 c1             	mov    %rax,%rcx
  800421c952:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c956:	48 01 c8             	add    %rcx,%rax
  800421c959:	48 01 d0             	add    %rdx,%rax
  800421c95c:	48 83 c0 08          	add    $0x8,%rax
  800421c960:	48 8b 00             	mov    (%rax),%rax
  800421c963:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c96a:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c971:	00 00 00 
  800421c974:	ff d0                	callq  *%rax
  800421c976:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c97d:	00 00 00 
  800421c980:	48 98                	cltq   
  800421c982:	48 c1 e0 03          	shl    $0x3,%rax
  800421c986:	48 89 c1             	mov    %rax,%rcx
  800421c989:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c98d:	48 01 c8             	add    %rcx,%rax
  800421c990:	48 01 d0             	add    %rdx,%rax
  800421c993:	48 83 c0 08          	add    $0x8,%rax
  800421c997:	48 8b 00             	mov    (%rax),%rax
  800421c99a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421c9a1:	48 89 de             	mov    %rbx,%rsi
  800421c9a4:	48 89 c7             	mov    %rax,%rdi
  800421c9a7:	48 b8 f0 d8 21 04 80 	movabs $0x800421d8f0,%rax
  800421c9ae:	00 00 00 
  800421c9b1:	ff d0                	callq  *%rax
  800421c9b3:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c9b6:	e9 19 02 00 00       	jmpq   800421cbd4 <vmexit+0x528>
  800421c9bb:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c9c2:	00 00 00 
  800421c9c5:	ff d0                	callq  *%rax
  800421c9c7:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c9ce:	00 00 00 
  800421c9d1:	48 98                	cltq   
  800421c9d3:	48 c1 e0 03          	shl    $0x3,%rax
  800421c9d7:	48 89 c1             	mov    %rax,%rcx
  800421c9da:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c9de:	48 01 c8             	add    %rcx,%rax
  800421c9e1:	48 01 d0             	add    %rdx,%rax
  800421c9e4:	48 83 c0 08          	add    $0x8,%rax
  800421c9e8:	48 8b 00             	mov    (%rax),%rax
  800421c9eb:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c9f2:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421c9f9:	00 00 00 
  800421c9fc:	ff d0                	callq  *%rax
  800421c9fe:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ca05:	00 00 00 
  800421ca08:	48 98                	cltq   
  800421ca0a:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca0e:	48 89 c1             	mov    %rax,%rcx
  800421ca11:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca15:	48 01 c8             	add    %rcx,%rax
  800421ca18:	48 01 d0             	add    %rdx,%rax
  800421ca1b:	48 83 c0 08          	add    $0x8,%rax
  800421ca1f:	48 8b 00             	mov    (%rax),%rax
  800421ca22:	48 89 de             	mov    %rbx,%rsi
  800421ca25:	48 89 c7             	mov    %rax,%rdi
  800421ca28:	48 b8 e2 da 21 04 80 	movabs $0x800421dae2,%rax
  800421ca2f:	00 00 00 
  800421ca32:	ff d0                	callq  *%rax
  800421ca34:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ca37:	e9 98 01 00 00       	jmpq   800421cbd4 <vmexit+0x528>
  800421ca3c:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421ca43:	00 00 00 
  800421ca46:	ff d0                	callq  *%rax
  800421ca48:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ca4f:	00 00 00 
  800421ca52:	48 98                	cltq   
  800421ca54:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca58:	48 89 c1             	mov    %rax,%rcx
  800421ca5b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca5f:	48 01 c8             	add    %rcx,%rax
  800421ca62:	48 01 d0             	add    %rdx,%rax
  800421ca65:	48 83 c0 08          	add    $0x8,%rax
  800421ca69:	48 8b 00             	mov    (%rax),%rax
  800421ca6c:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421ca73:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421ca7a:	00 00 00 
  800421ca7d:	ff d0                	callq  *%rax
  800421ca7f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ca86:	00 00 00 
  800421ca89:	48 98                	cltq   
  800421ca8b:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca8f:	48 89 c1             	mov    %rax,%rcx
  800421ca92:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca96:	48 01 c8             	add    %rcx,%rax
  800421ca99:	48 01 d0             	add    %rdx,%rax
  800421ca9c:	48 83 c0 08          	add    $0x8,%rax
  800421caa0:	48 8b 00             	mov    (%rax),%rax
  800421caa3:	48 89 de             	mov    %rbx,%rsi
  800421caa6:	48 89 c7             	mov    %rax,%rdi
  800421caa9:	48 b8 c1 dc 21 04 80 	movabs $0x800421dcc1,%rax
  800421cab0:	00 00 00 
  800421cab3:	ff d0                	callq  *%rax
  800421cab5:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cab8:	e9 17 01 00 00       	jmpq   800421cbd4 <vmexit+0x528>
  800421cabd:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421cac4:	00 00 00 
  800421cac7:	ff d0                	callq  *%rax
  800421cac9:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cad0:	00 00 00 
  800421cad3:	48 98                	cltq   
  800421cad5:	48 c1 e0 03          	shl    $0x3,%rax
  800421cad9:	48 89 c1             	mov    %rax,%rcx
  800421cadc:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cae0:	48 01 c8             	add    %rcx,%rax
  800421cae3:	48 01 d0             	add    %rdx,%rax
  800421cae6:	48 83 c0 08          	add    $0x8,%rax
  800421caea:	48 8b 00             	mov    (%rax),%rax
  800421caed:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421caf4:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421cafb:	00 00 00 
  800421cafe:	ff d0                	callq  *%rax
  800421cb00:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cb07:	00 00 00 
  800421cb0a:	48 98                	cltq   
  800421cb0c:	48 c1 e0 03          	shl    $0x3,%rax
  800421cb10:	48 89 c1             	mov    %rax,%rcx
  800421cb13:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cb17:	48 01 c8             	add    %rcx,%rax
  800421cb1a:	48 01 d0             	add    %rdx,%rax
  800421cb1d:	48 83 c0 08          	add    $0x8,%rax
  800421cb21:	48 8b 00             	mov    (%rax),%rax
  800421cb24:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421cb2b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421cb32:	00 00 00 
  800421cb35:	ff d0                	callq  *%rax
  800421cb37:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cb3e:	00 00 00 
  800421cb41:	48 98                	cltq   
  800421cb43:	48 c1 e0 03          	shl    $0x3,%rax
  800421cb47:	48 89 c1             	mov    %rax,%rcx
  800421cb4a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cb4e:	48 01 c8             	add    %rcx,%rax
  800421cb51:	48 01 d0             	add    %rdx,%rax
  800421cb54:	48 83 c0 08          	add    $0x8,%rax
  800421cb58:	48 8b 00             	mov    (%rax),%rax
  800421cb5b:	48 89 da             	mov    %rbx,%rdx
  800421cb5e:	4c 89 e6             	mov    %r12,%rsi
  800421cb61:	48 89 c7             	mov    %rax,%rdi
  800421cb64:	48 b8 f3 dc 21 04 80 	movabs $0x800421dcf3,%rax
  800421cb6b:	00 00 00 
  800421cb6e:	ff d0                	callq  *%rax
  800421cb70:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cb73:	eb 5f                	jmp    800421cbd4 <vmexit+0x528>
  800421cb75:	48 bf a0 12 22 04 80 	movabs $0x80042212a0,%rdi
  800421cb7c:	00 00 00 
  800421cb7f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cb84:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421cb8b:	00 00 00 
  800421cb8e:	ff d2                	callq  *%rdx
  800421cb90:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421cb97:	00 00 00 
  800421cb9a:	ff d0                	callq  *%rax
  800421cb9c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cba3:	00 00 00 
  800421cba6:	48 98                	cltq   
  800421cba8:	48 c1 e0 03          	shl    $0x3,%rax
  800421cbac:	48 89 c1             	mov    %rax,%rcx
  800421cbaf:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cbb3:	48 01 c8             	add    %rcx,%rax
  800421cbb6:	48 01 d0             	add    %rdx,%rax
  800421cbb9:	48 83 c0 08          	add    $0x8,%rax
  800421cbbd:	48 8b 00             	mov    (%rax),%rax
  800421cbc0:	48 89 c7             	mov    %rax,%rdi
  800421cbc3:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  800421cbca:	00 00 00 
  800421cbcd:	ff d0                	callq  *%rax
  800421cbcf:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cbd3:	90                   	nop
  800421cbd4:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421cbd8:	83 f0 01             	xor    $0x1,%eax
  800421cbdb:	84 c0                	test   %al,%al
  800421cbdd:	74 6b                	je     800421cc4a <vmexit+0x59e>
  800421cbdf:	48 bf c0 12 22 04 80 	movabs $0x80042212c0,%rdi
  800421cbe6:	00 00 00 
  800421cbe9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbee:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421cbf5:	00 00 00 
  800421cbf8:	ff d2                	callq  *%rdx
  800421cbfa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbff:	48 ba 6b c5 21 04 80 	movabs $0x800421c56b,%rdx
  800421cc06:	00 00 00 
  800421cc09:	ff d2                	callq  *%rdx
  800421cc0b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421cc12:	00 00 00 
  800421cc15:	ff d0                	callq  *%rax
  800421cc17:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cc1e:	00 00 00 
  800421cc21:	48 98                	cltq   
  800421cc23:	48 c1 e0 03          	shl    $0x3,%rax
  800421cc27:	48 89 c1             	mov    %rax,%rcx
  800421cc2a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cc2e:	48 01 c8             	add    %rcx,%rax
  800421cc31:	48 01 d0             	add    %rdx,%rax
  800421cc34:	48 83 c0 08          	add    $0x8,%rax
  800421cc38:	48 8b 00             	mov    (%rax),%rax
  800421cc3b:	48 89 c7             	mov    %rax,%rdi
  800421cc3e:	48 b8 2f 95 20 04 80 	movabs $0x800420952f,%rax
  800421cc45:	00 00 00 
  800421cc48:	ff d0                	callq  *%rax
  800421cc4a:	48 b8 36 da 20 04 80 	movabs $0x800420da36,%rax
  800421cc51:	00 00 00 
  800421cc54:	ff d0                	callq  *%rax

000000800421cc56 <asm_vmrun>:
  800421cc56:	55                   	push   %rbp
  800421cc57:	48 89 e5             	mov    %rsp,%rbp
  800421cc5a:	41 57                	push   %r15
  800421cc5c:	41 56                	push   %r14
  800421cc5e:	41 55                	push   %r13
  800421cc60:	41 54                	push   %r12
  800421cc62:	53                   	push   %rbx
  800421cc63:	48 83 ec 28          	sub    $0x28,%rsp
  800421cc67:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421cc6b:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421cc72:	00 00 00 
  800421cc75:	ff d0                	callq  *%rax
  800421cc77:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cc7e:	00 00 00 
  800421cc81:	48 98                	cltq   
  800421cc83:	48 c1 e0 03          	shl    $0x3,%rax
  800421cc87:	48 89 c1             	mov    %rax,%rcx
  800421cc8a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cc8e:	48 01 c8             	add    %rcx,%rax
  800421cc91:	48 01 d0             	add    %rdx,%rax
  800421cc94:	48 83 c0 08          	add    $0x8,%rax
  800421cc98:	48 8b 00             	mov    (%rax),%rax
  800421cc9b:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421cca1:	89 c2                	mov    %eax,%edx
  800421cca3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421cca7:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800421ccae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ccb2:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421ccb8:	48 b8 10 a9 21 04 80 	movabs $0x800421a910,%rax
  800421ccbf:	00 00 00 
  800421ccc2:	ff d0                	callq  *%rax
  800421ccc4:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421ccc8:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421cccd:	52                   	push   %rdx
  800421ccce:	55                   	push   %rbp
  800421cccf:	51                   	push   %rcx
  800421ccd0:	51                   	push   %rcx
  800421ccd1:	48 89 e0             	mov    %rsp,%rax
  800421ccd4:	0f 79 d0             	vmwrite %rax,%rdx
  800421ccd7:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421ccde:	0f 20 d2             	mov    %cr2,%rdx
  800421cce1:	48 39 c2             	cmp    %rax,%rdx
  800421cce4:	74 03                	je     800421cce9 <asm_vmrun+0x93>
  800421cce6:	0f 22 d0             	mov    %rax,%cr2
  800421cce9:	83 b9 80 00 00 00 01 	cmpl   $0x1,0x80(%rcx)
  800421ccf0:	48 8b 41 70          	mov    0x70(%rcx),%rax
  800421ccf4:	48 8b 59 68          	mov    0x68(%rcx),%rbx
  800421ccf8:	48 8b 51 58          	mov    0x58(%rcx),%rdx
  800421ccfc:	48 8b 71 40          	mov    0x40(%rcx),%rsi
  800421cd00:	48 8b 79 48          	mov    0x48(%rcx),%rdi
  800421cd04:	48 8b 69 50          	mov    0x50(%rcx),%rbp
  800421cd08:	4c 8b 41 38          	mov    0x38(%rcx),%r8
  800421cd0c:	4c 8b 49 30          	mov    0x30(%rcx),%r9
  800421cd10:	4c 8b 51 28          	mov    0x28(%rcx),%r10
  800421cd14:	4c 8b 59 20          	mov    0x20(%rcx),%r11
  800421cd18:	4c 8b 61 18          	mov    0x18(%rcx),%r12
  800421cd1c:	4c 8b 69 10          	mov    0x10(%rcx),%r13
  800421cd20:	4c 8b 71 08          	mov    0x8(%rcx),%r14
  800421cd24:	4c 8b 39             	mov    (%rcx),%r15
  800421cd27:	48 8b 49 60          	mov    0x60(%rcx),%rcx
  800421cd2b:	75 05                	jne    800421cd32 <l3>
  800421cd2d:	0f 01 c2             	vmlaunch 
  800421cd30:	eb 03                	jmp    800421cd35 <l4>

000000800421cd32 <l3>:
  800421cd32:	0f 01 c3             	vmresume 

000000800421cd35 <l4>:
  800421cd35:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421cd3a:	59                   	pop    %rcx
  800421cd3b:	48 89 41 70          	mov    %rax,0x70(%rcx)
  800421cd3f:	48 89 59 68          	mov    %rbx,0x68(%rcx)
  800421cd43:	8f 41 60             	popq   0x60(%rcx)
  800421cd46:	48 89 51 58          	mov    %rdx,0x58(%rcx)
  800421cd4a:	48 89 71 40          	mov    %rsi,0x40(%rcx)
  800421cd4e:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  800421cd52:	48 89 69 50          	mov    %rbp,0x50(%rcx)
  800421cd56:	4c 89 41 38          	mov    %r8,0x38(%rcx)
  800421cd5a:	4c 89 49 30          	mov    %r9,0x30(%rcx)
  800421cd5e:	4c 89 51 28          	mov    %r10,0x28(%rcx)
  800421cd62:	4c 89 59 20          	mov    %r11,0x20(%rcx)
  800421cd66:	4c 89 61 18          	mov    %r12,0x18(%rcx)
  800421cd6a:	4c 89 69 10          	mov    %r13,0x10(%rcx)
  800421cd6e:	4c 89 71 08          	mov    %r14,0x8(%rcx)
  800421cd72:	4c 89 39             	mov    %r15,(%rcx)
  800421cd75:	0f 20 d0             	mov    %cr2,%rax
  800421cd78:	48 89 81 90 00 00 00 	mov    %rax,0x90(%rcx)
  800421cd7f:	5d                   	pop    %rbp
  800421cd80:	5a                   	pop    %rdx
  800421cd81:	0f 96 41 78          	setbe  0x78(%rcx)
  800421cd85:	48 b8 f4 a8 21 04 80 	movabs $0x800421a8f4,%rax
  800421cd8c:	00 00 00 
  800421cd8f:	ff d0                	callq  *%rax
  800421cd91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421cd95:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421cd99:	66 85 c0             	test   %ax,%ax
  800421cd9c:	74 20                	je     800421cdbe <l4+0x89>
  800421cd9e:	48 bf 70 14 22 04 80 	movabs $0x8004221470,%rdi
  800421cda5:	00 00 00 
  800421cda8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cdad:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421cdb4:	00 00 00 
  800421cdb7:	ff d2                	callq  *%rdx
  800421cdb9:	e9 af 00 00 00       	jmpq   800421ce6d <l4+0x138>
  800421cdbe:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421cdc5:	00 00 00 
  800421cdc8:	ff d0                	callq  *%rax
  800421cdca:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cdd1:	00 00 00 
  800421cdd4:	48 98                	cltq   
  800421cdd6:	48 c1 e0 03          	shl    $0x3,%rax
  800421cdda:	48 89 c1             	mov    %rax,%rcx
  800421cddd:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cde1:	48 01 c8             	add    %rcx,%rax
  800421cde4:	48 01 d0             	add    %rdx,%rax
  800421cde7:	48 83 c0 08          	add    $0x8,%rax
  800421cdeb:	48 8b 18             	mov    (%rax),%rbx
  800421cdee:	c7 45 cc 1c 68 00 00 	movl   $0x681c,-0x34(%rbp)
  800421cdf5:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421cdf8:	89 c7                	mov    %eax,%edi
  800421cdfa:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421ce01:	00 00 00 
  800421ce04:	ff d0                	callq  *%rax
  800421ce06:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421ce0d:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421ce14:	00 00 00 
  800421ce17:	ff d0                	callq  *%rax
  800421ce19:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ce20:	00 00 00 
  800421ce23:	48 98                	cltq   
  800421ce25:	48 c1 e0 03          	shl    $0x3,%rax
  800421ce29:	48 89 c1             	mov    %rax,%rcx
  800421ce2c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ce30:	48 01 c8             	add    %rcx,%rax
  800421ce33:	48 01 d0             	add    %rdx,%rax
  800421ce36:	48 83 c0 08          	add    $0x8,%rax
  800421ce3a:	48 8b 18             	mov    (%rax),%rbx
  800421ce3d:	c7 45 c8 1e 68 00 00 	movl   $0x681e,-0x38(%rbp)
  800421ce44:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421ce47:	89 c7                	mov    %eax,%edi
  800421ce49:	48 b8 8b a7 21 04 80 	movabs $0x800421a78b,%rax
  800421ce50:	00 00 00 
  800421ce53:	ff d0                	callq  *%rax
  800421ce55:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421ce5c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ce61:	48 ba ac c6 21 04 80 	movabs $0x800421c6ac,%rdx
  800421ce68:	00 00 00 
  800421ce6b:	ff d2                	callq  *%rdx
  800421ce6d:	48 83 c4 28          	add    $0x28,%rsp
  800421ce71:	5b                   	pop    %rbx
  800421ce72:	41 5c                	pop    %r12
  800421ce74:	41 5d                	pop    %r13
  800421ce76:	41 5e                	pop    %r14
  800421ce78:	41 5f                	pop    %r15
  800421ce7a:	5d                   	pop    %rbp
  800421ce7b:	c3                   	retq   

000000800421ce7c <msr_setup>:
  800421ce7c:	55                   	push   %rbp
  800421ce7d:	48 89 e5             	mov    %rsp,%rbp
  800421ce80:	48 83 ec 40          	sub    $0x40,%rsp
  800421ce84:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421ce88:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421ce8f:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421ce96:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421ce9d:	7e 35                	jle    800421ced4 <msr_setup+0x58>
  800421ce9f:	48 b9 90 14 22 04 80 	movabs $0x8004221490,%rcx
  800421cea6:	00 00 00 
  800421cea9:	48 ba 40 11 22 04 80 	movabs $0x8004221140,%rdx
  800421ceb0:	00 00 00 
  800421ceb3:	be 9c 02 00 00       	mov    $0x29c,%esi
  800421ceb8:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421cebf:	00 00 00 
  800421cec2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cec7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cece:	00 00 00 
  800421ced1:	41 ff d0             	callq  *%r8
  800421ced4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ced8:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421cedb:	89 50 28             	mov    %edx,0x28(%rax)
  800421cede:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421cee5:	e9 97 00 00 00       	jmpq   800421cf81 <msr_setup+0x105>
  800421ceea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ceee:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421cef2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421cef5:	48 63 d2             	movslq %edx,%rdx
  800421cef8:	48 c1 e2 04          	shl    $0x4,%rdx
  800421cefc:	48 01 d0             	add    %rdx,%rax
  800421ceff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421cf03:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf06:	48 98                	cltq   
  800421cf08:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421cf0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421cf10:	89 10                	mov    %edx,(%rax)
  800421cf12:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf15:	48 98                	cltq   
  800421cf17:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421cf1b:	89 45 ec             	mov    %eax,-0x14(%rbp)
	__asm __volatile("rdmsr"
  800421cf1e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421cf21:	89 c1                	mov    %eax,%ecx
  800421cf23:	0f 32                	rdmsr  
  800421cf25:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421cf28:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	uint64_t ret = 0;
  800421cf2b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421cf32:	00 
	ret = edx;
  800421cf33:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421cf36:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421cf3a:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421cf3f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421cf42:	48 09 45 d8          	or     %rax,-0x28(%rbp)
	return ret;
  800421cf46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf4a:	48 89 c2             	mov    %rax,%rdx
  800421cf4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421cf51:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421cf55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cf59:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421cf5d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421cf60:	48 63 d2             	movslq %edx,%rdx
  800421cf63:	48 c1 e2 04          	shl    $0x4,%rdx
  800421cf67:	48 01 d0             	add    %rdx,%rax
  800421cf6a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421cf6e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf71:	48 98                	cltq   
  800421cf73:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421cf77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421cf7b:	89 10                	mov    %edx,(%rax)
  800421cf7d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421cf81:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf84:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421cf87:	0f 8c 5d ff ff ff    	jl     800421ceea <msr_setup+0x6e>
  800421cf8d:	c9                   	leaveq 
  800421cf8e:	c3                   	retq   

000000800421cf8f <bitmap_setup>:
  800421cf8f:	55                   	push   %rbp
  800421cf90:	48 89 e5             	mov    %rsp,%rbp
  800421cf93:	48 83 ec 30          	sub    $0x30,%rsp
  800421cf97:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421cf9b:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421cfa2:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421cfa9:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421cfb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421cfb7:	e9 07 01 00 00       	jmpq   800421d0c3 <bitmap_setup+0x134>
  800421cfbc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cfbf:	48 98                	cltq   
  800421cfc1:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cfc5:	c1 e8 06             	shr    $0x6,%eax
  800421cfc8:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421cfcb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cfce:	48 98                	cltq   
  800421cfd0:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cfd4:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421cfd9:	77 51                	ja     800421d02c <bitmap_setup+0x9d>
  800421cfdb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cfdf:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421cfe3:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421cfe6:	48 63 d2             	movslq %edx,%rdx
  800421cfe9:	48 c1 e2 03          	shl    $0x3,%rdx
  800421cfed:	48 01 c2             	add    %rax,%rdx
  800421cff0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cff4:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421cff8:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421cffb:	48 63 c9             	movslq %ecx,%rcx
  800421cffe:	48 c1 e1 03          	shl    $0x3,%rcx
  800421d002:	48 01 c8             	add    %rcx,%rax
  800421d005:	48 8b 30             	mov    (%rax),%rsi
  800421d008:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d00b:	48 98                	cltq   
  800421d00d:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d011:	83 e0 3f             	and    $0x3f,%eax
  800421d014:	bf 01 00 00 00       	mov    $0x1,%edi
  800421d019:	89 c1                	mov    %eax,%ecx
  800421d01b:	48 d3 e7             	shl    %cl,%rdi
  800421d01e:	48 89 f8             	mov    %rdi,%rax
  800421d021:	48 09 f0             	or     %rsi,%rax
  800421d024:	48 89 02             	mov    %rax,(%rdx)
  800421d027:	e9 93 00 00 00       	jmpq   800421d0bf <bitmap_setup+0x130>
  800421d02c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d02f:	48 98                	cltq   
  800421d031:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d035:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421d03a:	77 4e                	ja     800421d08a <bitmap_setup+0xfb>
  800421d03c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d040:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421d044:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d047:	48 63 d2             	movslq %edx,%rdx
  800421d04a:	48 c1 e2 03          	shl    $0x3,%rdx
  800421d04e:	48 01 c2             	add    %rax,%rdx
  800421d051:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d055:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421d059:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421d05c:	48 63 c9             	movslq %ecx,%rcx
  800421d05f:	48 c1 e1 03          	shl    $0x3,%rcx
  800421d063:	48 01 c8             	add    %rcx,%rax
  800421d066:	48 8b 30             	mov    (%rax),%rsi
  800421d069:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d06c:	48 98                	cltq   
  800421d06e:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d072:	83 e0 3f             	and    $0x3f,%eax
  800421d075:	bf 01 00 00 00       	mov    $0x1,%edi
  800421d07a:	89 c1                	mov    %eax,%ecx
  800421d07c:	48 d3 e7             	shl    %cl,%rdi
  800421d07f:	48 89 f8             	mov    %rdi,%rax
  800421d082:	48 09 f0             	or     %rsi,%rax
  800421d085:	48 89 02             	mov    %rax,(%rdx)
  800421d088:	eb 35                	jmp    800421d0bf <bitmap_setup+0x130>
  800421d08a:	48 b9 3a 11 22 04 80 	movabs $0x800422113a,%rcx
  800421d091:	00 00 00 
  800421d094:	48 ba 40 11 22 04 80 	movabs $0x8004221140,%rdx
  800421d09b:	00 00 00 
  800421d09e:	be a7 02 00 00       	mov    $0x2a7,%esi
  800421d0a3:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421d0aa:	00 00 00 
  800421d0ad:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d0b2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d0b9:	00 00 00 
  800421d0bc:	41 ff d0             	callq  *%r8
  800421d0bf:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d0c3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d0c6:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421d0c9:	0f 8c ed fe ff ff    	jl     800421cfbc <bitmap_setup+0x2d>
  800421d0cf:	c9                   	leaveq 
  800421d0d0:	c3                   	retq   

000000800421d0d1 <vmx_vmrun>:
  800421d0d1:	55                   	push   %rbp
  800421d0d2:	48 89 e5             	mov    %rsp,%rbp
  800421d0d5:	48 83 ec 70          	sub    $0x70,%rsp
  800421d0d9:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421d0dd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d0e1:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421d0e7:	83 f8 03             	cmp    $0x3,%eax
  800421d0ea:	74 0a                	je     800421d0f6 <vmx_vmrun+0x25>
  800421d0ec:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421d0f1:	e9 ac 02 00 00       	jmpq   800421d3a2 <vmx_vmrun+0x2d1>
  800421d0f6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d0fa:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d100:	83 f8 01             	cmp    $0x1,%eax
  800421d103:	0f 85 2f 01 00 00    	jne    800421d238 <vmx_vmrun+0x167>
  800421d109:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d10d:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d114:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d118:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d11f:	00 00 00 
  800421d122:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421d126:	77 32                	ja     800421d15a <vmx_vmrun+0x89>
  800421d128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d12c:	48 89 c1             	mov    %rax,%rcx
  800421d12f:	48 ba c8 11 22 04 80 	movabs $0x80042211c8,%rdx
  800421d136:	00 00 00 
  800421d139:	be b7 02 00 00       	mov    $0x2b7,%esi
  800421d13e:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421d145:	00 00 00 
  800421d148:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d14d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d154:	00 00 00 
  800421d157:	41 ff d0             	callq  *%r8
  800421d15a:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d161:	ff ff ff 
  800421d164:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d168:	48 01 d0             	add    %rdx,%rax
  800421d16b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d16f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d173:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421d177:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421d17b:	f8                   	clc    
  800421d17c:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421d181:	0f 96 c0             	setbe  %al
  800421d184:	88 45 df             	mov    %al,-0x21(%rbp)
  800421d187:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421d18b:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d18e:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d192:	74 0a                	je     800421d19e <vmx_vmrun+0xcd>
  800421d194:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d199:	e9 04 02 00 00       	jmpq   800421d3a2 <vmx_vmrun+0x2d1>
  800421d19e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d1a2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421d1a6:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421d1aa:	f8                   	clc    
  800421d1ab:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421d1af:	0f 96 c0             	setbe  %al
  800421d1b2:	88 45 de             	mov    %al,-0x22(%rbp)
  800421d1b5:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421d1b9:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d1bc:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d1c0:	74 0a                	je     800421d1cc <vmx_vmrun+0xfb>
  800421d1c2:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d1c7:	e9 d6 01 00 00       	jmpq   800421d3a2 <vmx_vmrun+0x2d1>
  800421d1cc:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d1d1:	48 ba 90 b2 21 04 80 	movabs $0x800421b290,%rdx
  800421d1d8:	00 00 00 
  800421d1db:	ff d2                	callq  *%rdx
  800421d1dd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d1e2:	48 ba 5e b6 21 04 80 	movabs $0x800421b65e,%rdx
  800421d1e9:	00 00 00 
  800421d1ec:	ff d2                	callq  *%rdx
  800421d1ee:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d1f2:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d1f8:	48 89 c7             	mov    %rax,%rdi
  800421d1fb:	48 b8 8f cf 21 04 80 	movabs $0x800421cf8f,%rax
  800421d202:	00 00 00 
  800421d205:	ff d0                	callq  *%rax
  800421d207:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d20b:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d211:	48 89 c7             	mov    %rax,%rdi
  800421d214:	48 b8 7c ce 21 04 80 	movabs $0x800421ce7c,%rax
  800421d21b:	00 00 00 
  800421d21e:	ff d0                	callq  *%rax
  800421d220:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d224:	48 89 c7             	mov    %rax,%rdi
  800421d227:	48 b8 03 bf 21 04 80 	movabs $0x800421bf03,%rax
  800421d22e:	00 00 00 
  800421d231:	ff d0                	callq  *%rax
  800421d233:	e9 8c 00 00 00       	jmpq   800421d2c4 <vmx_vmrun+0x1f3>
  800421d238:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d23c:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d243:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421d247:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d24e:	00 00 00 
  800421d251:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421d255:	77 32                	ja     800421d289 <vmx_vmrun+0x1b8>
  800421d257:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d25b:	48 89 c1             	mov    %rax,%rcx
  800421d25e:	48 ba c8 11 22 04 80 	movabs $0x80042211c8,%rdx
  800421d265:	00 00 00 
  800421d268:	be d0 02 00 00       	mov    $0x2d0,%esi
  800421d26d:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421d274:	00 00 00 
  800421d277:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d27c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d283:	00 00 00 
  800421d286:	41 ff d0             	callq  *%r8
  800421d289:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d290:	ff ff ff 
  800421d293:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d297:	48 01 d0             	add    %rdx,%rax
  800421d29a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421d29e:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421d2a2:	f8                   	clc    
  800421d2a3:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421d2a7:	0f 96 c0             	setbe  %al
  800421d2aa:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421d2ad:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421d2b1:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d2b4:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d2b8:	74 0a                	je     800421d2c4 <vmx_vmrun+0x1f3>
  800421d2ba:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d2bf:	e9 de 00 00 00       	jmpq   800421d3a2 <vmx_vmrun+0x2d1>
  800421d2c4:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421d2cb:	00 00 00 
  800421d2ce:	ff d0                	callq  *%rax
  800421d2d0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421d2d7:	00 00 00 
  800421d2da:	48 98                	cltq   
  800421d2dc:	48 c1 e0 03          	shl    $0x3,%rax
  800421d2e0:	48 89 c1             	mov    %rax,%rcx
  800421d2e3:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d2e7:	48 01 c8             	add    %rcx,%rax
  800421d2ea:	48 01 d0             	add    %rdx,%rax
  800421d2ed:	48 83 c0 08          	add    $0x8,%rax
  800421d2f1:	48 8b 00             	mov    (%rax),%rax
  800421d2f4:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421d2fb:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421d302:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d306:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421d30a:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421d30d:	48 89 d6             	mov    %rdx,%rsi
  800421d310:	89 c7                	mov    %eax,%edi
  800421d312:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421d319:	00 00 00 
  800421d31c:	ff d0                	callq  *%rax
  800421d31e:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421d325:	00 00 00 
  800421d328:	ff d0                	callq  *%rax
  800421d32a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421d331:	00 00 00 
  800421d334:	48 98                	cltq   
  800421d336:	48 c1 e0 03          	shl    $0x3,%rax
  800421d33a:	48 89 c1             	mov    %rax,%rcx
  800421d33d:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d341:	48 01 c8             	add    %rcx,%rax
  800421d344:	48 01 d0             	add    %rdx,%rax
  800421d347:	48 83 c0 08          	add    $0x8,%rax
  800421d34b:	48 8b 00             	mov    (%rax),%rax
  800421d34e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421d355:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421d35c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421d360:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421d364:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d367:	48 89 d6             	mov    %rdx,%rsi
  800421d36a:	89 c7                	mov    %eax,%edi
  800421d36c:	48 b8 65 a7 21 04 80 	movabs $0x800421a765,%rax
  800421d373:	00 00 00 
  800421d376:	ff d0                	callq  *%rax
  800421d378:	48 ba a7 14 22 04 80 	movabs $0x80042214a7,%rdx
  800421d37f:	00 00 00 
  800421d382:	be d9 02 00 00       	mov    $0x2d9,%esi
  800421d387:	48 bf 12 11 22 04 80 	movabs $0x8004221112,%rdi
  800421d38e:	00 00 00 
  800421d391:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d396:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421d39d:	00 00 00 
  800421d3a0:	ff d1                	callq  *%rcx
  800421d3a2:	c9                   	leaveq 
  800421d3a3:	c3                   	retq   

000000800421d3a4 <vmcs_writel>:
  800421d3a4:	55                   	push   %rbp
  800421d3a5:	48 89 e5             	mov    %rsp,%rbp
  800421d3a8:	48 83 ec 20          	sub    $0x20,%rsp
  800421d3ac:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d3af:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421d3b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d3b7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421d3ba:	f8                   	clc    
  800421d3bb:	0f 79 d0             	vmwrite %rax,%rdx
  800421d3be:	0f 96 c0             	setbe  %al
  800421d3c1:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421d3c4:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421d3c8:	c9                   	leaveq 
  800421d3c9:	c3                   	retq   

000000800421d3ca <vmcs_readl>:
  800421d3ca:	55                   	push   %rbp
  800421d3cb:	48 89 e5             	mov    %rsp,%rbp
  800421d3ce:	48 83 ec 14          	sub    $0x14,%rsp
  800421d3d2:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d3d5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d3d8:	89 c2                	mov    %eax,%edx
  800421d3da:	0f 78 d0             	vmread %rdx,%rax
  800421d3dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d3e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d3e5:	c9                   	leaveq 
  800421d3e6:	c3                   	retq   

000000800421d3e7 <page2ppn>:
  800421d3e7:	55                   	push   %rbp
  800421d3e8:	48 89 e5             	mov    %rsp,%rbp
  800421d3eb:	48 83 ec 08          	sub    $0x8,%rsp
  800421d3ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d3f3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421d3f7:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800421d3fe:	00 00 00 
  800421d401:	48 8b 00             	mov    (%rax),%rax
  800421d404:	48 29 c2             	sub    %rax,%rdx
  800421d407:	48 89 d0             	mov    %rdx,%rax
  800421d40a:	48 c1 f8 04          	sar    $0x4,%rax
  800421d40e:	c9                   	leaveq 
  800421d40f:	c3                   	retq   

000000800421d410 <page2pa>:
  800421d410:	55                   	push   %rbp
  800421d411:	48 89 e5             	mov    %rsp,%rbp
  800421d414:	48 83 ec 08          	sub    $0x8,%rsp
  800421d418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d41c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d420:	48 89 c7             	mov    %rax,%rdi
  800421d423:	48 b8 e7 d3 21 04 80 	movabs $0x800421d3e7,%rax
  800421d42a:	00 00 00 
  800421d42d:	ff d0                	callq  *%rax
  800421d42f:	48 c1 e0 0c          	shl    $0xc,%rax
  800421d433:	c9                   	leaveq 
  800421d434:	c3                   	retq   

000000800421d435 <page2kva>:
  800421d435:	55                   	push   %rbp
  800421d436:	48 89 e5             	mov    %rsp,%rbp
  800421d439:	48 83 ec 20          	sub    $0x20,%rsp
  800421d43d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421d441:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d445:	48 89 c7             	mov    %rax,%rdi
  800421d448:	48 b8 10 d4 21 04 80 	movabs $0x800421d410,%rax
  800421d44f:	00 00 00 
  800421d452:	ff d0                	callq  *%rax
  800421d454:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d458:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d45c:	48 c1 e8 0c          	shr    $0xc,%rax
  800421d460:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421d463:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d466:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421d46d:	00 00 00 
  800421d470:	48 8b 00             	mov    (%rax),%rax
  800421d473:	48 39 c2             	cmp    %rax,%rdx
  800421d476:	72 32                	jb     800421d4aa <page2kva+0x75>
  800421d478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d47c:	48 89 c1             	mov    %rax,%rcx
  800421d47f:	48 ba c0 14 22 04 80 	movabs $0x80042214c0,%rdx
  800421d486:	00 00 00 
  800421d489:	be 62 00 00 00       	mov    $0x62,%esi
  800421d48e:	48 bf e3 14 22 04 80 	movabs $0x80042214e3,%rdi
  800421d495:	00 00 00 
  800421d498:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d49d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d4a4:	00 00 00 
  800421d4a7:	41 ff d0             	callq  *%r8
  800421d4aa:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421d4b1:	00 00 00 
  800421d4b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d4b8:	48 01 d0             	add    %rdx,%rax
  800421d4bb:	c9                   	leaveq 
  800421d4bc:	c3                   	retq   

000000800421d4bd <vmx_get_vmdisk_number>:
  800421d4bd:	55                   	push   %rbp
  800421d4be:	48 89 e5             	mov    %rsp,%rbp
  800421d4c1:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421d4c8:	00 00 00 
  800421d4cb:	8b 00                	mov    (%rax),%eax
  800421d4cd:	5d                   	pop    %rbp
  800421d4ce:	c3                   	retq   

000000800421d4cf <vmx_incr_vmdisk_number>:
  800421d4cf:	55                   	push   %rbp
  800421d4d0:	48 89 e5             	mov    %rsp,%rbp
  800421d4d3:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421d4da:	00 00 00 
  800421d4dd:	8b 00                	mov    (%rax),%eax
  800421d4df:	8d 50 01             	lea    0x1(%rax),%edx
  800421d4e2:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421d4e9:	00 00 00 
  800421d4ec:	89 10                	mov    %edx,(%rax)
  800421d4ee:	5d                   	pop    %rbp
  800421d4ef:	c3                   	retq   

000000800421d4f0 <find_msr_in_region>:
  800421d4f0:	55                   	push   %rbp
  800421d4f1:	48 89 e5             	mov    %rsp,%rbp
  800421d4f4:	48 83 ec 28          	sub    $0x28,%rsp
  800421d4f8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d4fb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421d4ff:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421d502:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  800421d506:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d50a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d50e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d515:	eb 21                	jmp    800421d538 <find_msr_in_region+0x48>
  800421d517:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d51b:	8b 00                	mov    (%rax),%eax
  800421d51d:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421d520:	75 12                	jne    800421d534 <find_msr_in_region+0x44>
  800421d522:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d526:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421d52a:	48 89 10             	mov    %rdx,(%rax)
  800421d52d:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d532:	eb 11                	jmp    800421d545 <find_msr_in_region+0x55>
  800421d534:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d538:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d53b:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421d53e:	7c d7                	jl     800421d517 <find_msr_in_region+0x27>
  800421d540:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d545:	c9                   	leaveq 
  800421d546:	c3                   	retq   

000000800421d547 <handle_interrupt_window>:
  800421d547:	55                   	push   %rbp
  800421d548:	48 89 e5             	mov    %rsp,%rbp
  800421d54b:	48 83 ec 38          	sub    $0x38,%rsp
  800421d54f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421d553:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421d557:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421d55a:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421d561:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421d564:	89 c7                	mov    %eax,%edi
  800421d566:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421d56d:	00 00 00 
  800421d570:	ff d0                	callq  *%rax
  800421d572:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421d575:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421d579:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421d580:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d583:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421d586:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421d589:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421d58c:	48 89 d6             	mov    %rdx,%rsi
  800421d58f:	89 c7                	mov    %eax,%edi
  800421d591:	48 b8 a4 d3 21 04 80 	movabs $0x800421d3a4,%rax
  800421d598:	00 00 00 
  800421d59b:	ff d0                	callq  *%rax
  800421d59d:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421d5a4:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d5a7:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421d5aa:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421d5ad:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d5b0:	48 89 d6             	mov    %rdx,%rsi
  800421d5b3:	89 c7                	mov    %eax,%edi
  800421d5b5:	48 b8 a4 d3 21 04 80 	movabs $0x800421d3a4,%rax
  800421d5bc:	00 00 00 
  800421d5bf:	ff d0                	callq  *%rax
  800421d5c1:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d5c6:	c9                   	leaveq 
  800421d5c7:	c3                   	retq   

000000800421d5c8 <handle_interrupts>:
  800421d5c8:	55                   	push   %rbp
  800421d5c9:	48 89 e5             	mov    %rsp,%rbp
  800421d5cc:	48 83 ec 48          	sub    $0x48,%rsp
  800421d5d0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421d5d4:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421d5d8:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421d5db:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421d5e2:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421d5e5:	89 c7                	mov    %eax,%edi
  800421d5e7:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421d5ee:	00 00 00 
  800421d5f1:	ff d0                	callq  *%rax
  800421d5f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d5f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d5fb:	25 00 02 00 00       	and    $0x200,%eax
  800421d600:	48 85 c0             	test   %rax,%rax
  800421d603:	75 45                	jne    800421d64a <handle_interrupts+0x82>
  800421d605:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421d60c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d60f:	89 c7                	mov    %eax,%edi
  800421d611:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421d618:	00 00 00 
  800421d61b:	ff d0                	callq  *%rax
  800421d61d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421d620:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421d624:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421d62b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421d62e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421d631:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421d634:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421d637:	48 89 d6             	mov    %rdx,%rsi
  800421d63a:	89 c7                	mov    %eax,%edi
  800421d63c:	48 b8 a4 d3 21 04 80 	movabs $0x800421d3a4,%rax
  800421d643:	00 00 00 
  800421d646:	ff d0                	callq  *%rax
  800421d648:	eb 24                	jmp    800421d66e <handle_interrupts+0xa6>
  800421d64a:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421d651:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421d654:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421d657:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421d65a:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421d65d:	48 89 d6             	mov    %rdx,%rsi
  800421d660:	89 c7                	mov    %eax,%edi
  800421d662:	48 b8 a4 d3 21 04 80 	movabs $0x800421d3a4,%rax
  800421d669:	00 00 00 
  800421d66c:	ff d0                	callq  *%rax
  800421d66e:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d673:	c9                   	leaveq 
  800421d674:	c3                   	retq   

000000800421d675 <handle_rdmsr>:
  800421d675:	55                   	push   %rbp
  800421d676:	48 89 e5             	mov    %rsp,%rbp
  800421d679:	53                   	push   %rbx
  800421d67a:	48 83 ec 48          	sub    $0x48,%rsp
  800421d67e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d682:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421d686:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d68a:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421d68e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421d692:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421d697:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421d69b:	0f 85 d0 00 00 00    	jne    800421d771 <handle_rdmsr+0xfc>
  800421d6a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d6a5:	8b 50 28             	mov    0x28(%rax),%edx
  800421d6a8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d6ac:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421d6b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d6b4:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421d6b8:	89 c7                	mov    %eax,%edi
  800421d6ba:	48 b8 f0 d4 21 04 80 	movabs $0x800421d4f0,%rax
  800421d6c1:	00 00 00 
  800421d6c4:	ff d0                	callq  *%rax
  800421d6c6:	88 45 e7             	mov    %al,-0x19(%rbp)
  800421d6c9:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421d6cd:	83 f0 01             	xor    $0x1,%eax
  800421d6d0:	84 c0                	test   %al,%al
  800421d6d2:	74 35                	je     800421d709 <handle_rdmsr+0x94>
  800421d6d4:	48 b9 f2 14 22 04 80 	movabs $0x80042214f2,%rcx
  800421d6db:	00 00 00 
  800421d6de:	48 ba f4 14 22 04 80 	movabs $0x80042214f4,%rdx
  800421d6e5:	00 00 00 
  800421d6e8:	be 6a 00 00 00       	mov    $0x6a,%esi
  800421d6ed:	48 bf 09 15 22 04 80 	movabs $0x8004221509,%rdi
  800421d6f4:	00 00 00 
  800421d6f7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d6fc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d703:	00 00 00 
  800421d706:	41 ff d0             	callq  *%r8
  800421d709:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d70d:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421d711:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421d715:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d719:	48 c1 e0 20          	shl    $0x20,%rax
  800421d71d:	48 89 c2             	mov    %rax,%rdx
  800421d720:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d724:	48 89 50 58          	mov    %rdx,0x58(%rax)
  800421d728:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d72c:	89 c2                	mov    %eax,%edx
  800421d72e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d732:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421d736:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d73a:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421d741:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421d748:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421d74b:	89 c7                	mov    %eax,%edi
  800421d74d:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421d754:	00 00 00 
  800421d757:	ff d0                	callq  *%rax
  800421d759:	89 c0                	mov    %eax,%eax
  800421d75b:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421d75f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d763:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800421d76a:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d76f:	eb 05                	jmp    800421d776 <handle_rdmsr+0x101>
  800421d771:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d776:	48 83 c4 48          	add    $0x48,%rsp
  800421d77a:	5b                   	pop    %rbx
  800421d77b:	5d                   	pop    %rbp
  800421d77c:	c3                   	retq   

000000800421d77d <handle_wrmsr>:
  800421d77d:	55                   	push   %rbp
  800421d77e:	48 89 e5             	mov    %rsp,%rbp
  800421d781:	53                   	push   %rbx
  800421d782:	48 83 ec 58          	sub    $0x58,%rsp
  800421d786:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421d78a:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421d78e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d792:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421d796:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421d79a:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421d79f:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421d7a3:	0f 85 3b 01 00 00    	jne    800421d8e4 <handle_wrmsr+0x167>
  800421d7a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421d7ad:	8b 50 28             	mov    0x28(%rax),%edx
  800421d7b0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421d7b4:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421d7b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d7bc:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421d7c0:	89 c7                	mov    %eax,%edi
  800421d7c2:	48 b8 f0 d4 21 04 80 	movabs $0x800421d4f0,%rax
  800421d7c9:	00 00 00 
  800421d7cc:	ff d0                	callq  *%rax
  800421d7ce:	88 45 e7             	mov    %al,-0x19(%rbp)
  800421d7d1:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421d7d5:	83 f0 01             	xor    $0x1,%eax
  800421d7d8:	84 c0                	test   %al,%al
  800421d7da:	74 35                	je     800421d811 <handle_wrmsr+0x94>
  800421d7dc:	48 b9 f2 14 22 04 80 	movabs $0x80042214f2,%rcx
  800421d7e3:	00 00 00 
  800421d7e6:	48 ba f4 14 22 04 80 	movabs $0x80042214f4,%rdx
  800421d7ed:	00 00 00 
  800421d7f0:	be 80 00 00 00       	mov    $0x80,%esi
  800421d7f5:	48 bf 09 15 22 04 80 	movabs $0x8004221509,%rdi
  800421d7fc:	00 00 00 
  800421d7ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d804:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d80b:	00 00 00 
  800421d80e:	41 ff d0             	callq  *%r8
  800421d811:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d815:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421d819:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421d81d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d821:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421d825:	48 c1 e0 20          	shl    $0x20,%rax
  800421d829:	48 89 c2             	mov    %rax,%rdx
  800421d82c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d830:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421d834:	48 09 d0             	or     %rdx,%rax
  800421d837:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d83b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d83f:	25 00 01 00 00       	and    $0x100,%eax
  800421d844:	48 85 c0             	test   %rax,%rax
  800421d847:	75 54                	jne    800421d89d <handle_wrmsr+0x120>
  800421d849:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421d84d:	25 00 01 00 00       	and    $0x100,%eax
  800421d852:	48 85 c0             	test   %rax,%rax
  800421d855:	74 46                	je     800421d89d <handle_wrmsr+0x120>
  800421d857:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421d85e:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421d861:	89 c7                	mov    %eax,%edi
  800421d863:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421d86a:	00 00 00 
  800421d86d:	ff d0                	callq  *%rax
  800421d86f:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421d872:	81 4d cc 00 02 00 00 	orl    $0x200,-0x34(%rbp)
  800421d879:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421d880:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d883:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421d886:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421d889:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421d88c:	48 89 d6             	mov    %rdx,%rsi
  800421d88f:	89 c7                	mov    %eax,%edi
  800421d891:	48 b8 a4 d3 21 04 80 	movabs $0x800421d3a4,%rax
  800421d898:	00 00 00 
  800421d89b:	ff d0                	callq  *%rax
  800421d89d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d8a1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421d8a5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421d8a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d8ad:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421d8b4:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421d8bb:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421d8be:	89 c7                	mov    %eax,%edi
  800421d8c0:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421d8c7:	00 00 00 
  800421d8ca:	ff d0                	callq  *%rax
  800421d8cc:	89 c0                	mov    %eax,%eax
  800421d8ce:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421d8d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d8d6:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800421d8dd:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d8e2:	eb 05                	jmp    800421d8e9 <handle_wrmsr+0x16c>
  800421d8e4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d8e9:	48 83 c4 58          	add    $0x58,%rsp
  800421d8ed:	5b                   	pop    %rbx
  800421d8ee:	5d                   	pop    %rbp
  800421d8ef:	c3                   	retq   

000000800421d8f0 <handle_eptviolation>:
  800421d8f0:	55                   	push   %rbp
  800421d8f1:	48 89 e5             	mov    %rsp,%rbp
  800421d8f4:	53                   	push   %rbx
  800421d8f5:	48 83 ec 48          	sub    $0x48,%rsp
  800421d8f9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d8fd:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421d901:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421d908:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d90b:	89 c7                	mov    %eax,%edi
  800421d90d:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421d914:	00 00 00 
  800421d917:	ff d0                	callq  *%rax
  800421d919:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421d91d:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421d924:	00 
  800421d925:	76 1f                	jbe    800421d946 <handle_eptviolation+0x56>
  800421d927:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421d92e:	00 
  800421d92f:	0f 86 f9 00 00 00    	jbe    800421da2e <handle_eptviolation+0x13e>
  800421d935:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d939:	48 8b 00             	mov    (%rax),%rax
  800421d93c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421d940:	0f 86 e8 00 00 00    	jbe    800421da2e <handle_eptviolation+0x13e>
  800421d946:	bf 00 00 00 00       	mov    $0x0,%edi
  800421d94b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421d952:	00 00 00 
  800421d955:	ff d0                	callq  *%rax
  800421d957:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421d95b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421d960:	75 25                	jne    800421d987 <handle_eptviolation+0x97>
  800421d962:	48 bf 20 15 22 04 80 	movabs $0x8004221520,%rdi
  800421d969:	00 00 00 
  800421d96c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d971:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421d978:	00 00 00 
  800421d97b:	ff d2                	callq  *%rdx
  800421d97d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d982:	e9 54 01 00 00       	jmpq   800421dadb <handle_eptviolation+0x1eb>
  800421d987:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d98b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421d98f:	8d 50 01             	lea    0x1(%rax),%edx
  800421d992:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d996:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421d99a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d99e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d9a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421d9a6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800421d9ac:	48 89 c3             	mov    %rax,%rbx
  800421d9af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d9b3:	48 89 c7             	mov    %rax,%rdi
  800421d9b6:	48 b8 35 d4 21 04 80 	movabs $0x800421d435,%rax
  800421d9bd:	00 00 00 
  800421d9c0:	ff d0                	callq  *%rax
  800421d9c2:	48 89 c6             	mov    %rax,%rsi
  800421d9c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d9c9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421d9cf:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421d9d4:	48 89 da             	mov    %rbx,%rdx
  800421d9d7:	48 89 c7             	mov    %rax,%rdi
  800421d9da:	48 b8 36 a5 21 04 80 	movabs $0x800421a536,%rax
  800421d9e1:	00 00 00 
  800421d9e4:	ff d0                	callq  *%rax
  800421d9e6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421d9e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421d9ed:	79 35                	jns    800421da24 <handle_eptviolation+0x134>
  800421d9ef:	48 b9 70 15 22 04 80 	movabs $0x8004221570,%rcx
  800421d9f6:	00 00 00 
  800421d9f9:	48 ba f4 14 22 04 80 	movabs $0x80042214f4,%rdx
  800421da00:	00 00 00 
  800421da03:	be aa 00 00 00       	mov    $0xaa,%esi
  800421da08:	48 bf 09 15 22 04 80 	movabs $0x8004221509,%rdi
  800421da0f:	00 00 00 
  800421da12:	b8 00 00 00 00       	mov    $0x0,%eax
  800421da17:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421da1e:	00 00 00 
  800421da21:	41 ff d0             	callq  *%r8
  800421da24:	b8 01 00 00 00       	mov    $0x1,%eax
  800421da29:	e9 ad 00 00 00       	jmpq   800421dadb <handle_eptviolation+0x1eb>
  800421da2e:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421da35:	00 
  800421da36:	76 7c                	jbe    800421dab4 <handle_eptviolation+0x1c4>
  800421da38:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421da3f:	00 
  800421da40:	77 72                	ja     800421dab4 <handle_eptviolation+0x1c4>
  800421da42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421da46:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421da4c:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421da51:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421da56:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421da5d:	00 00 00 
  800421da60:	48 89 c7             	mov    %rax,%rdi
  800421da63:	48 b8 36 a5 21 04 80 	movabs $0x800421a536,%rax
  800421da6a:	00 00 00 
  800421da6d:	ff d0                	callq  *%rax
  800421da6f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421da72:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421da76:	79 35                	jns    800421daad <handle_eptviolation+0x1bd>
  800421da78:	48 b9 70 15 22 04 80 	movabs $0x8004221570,%rcx
  800421da7f:	00 00 00 
  800421da82:	48 ba f4 14 22 04 80 	movabs $0x80042214f4,%rdx
  800421da89:	00 00 00 
  800421da8c:	be b7 00 00 00       	mov    $0xb7,%esi
  800421da91:	48 bf 09 15 22 04 80 	movabs $0x8004221509,%rdi
  800421da98:	00 00 00 
  800421da9b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421daa0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421daa7:	00 00 00 
  800421daaa:	41 ff d0             	callq  *%r8
  800421daad:	b8 01 00 00 00       	mov    $0x1,%eax
  800421dab2:	eb 27                	jmp    800421dadb <handle_eptviolation+0x1eb>
  800421dab4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421dab8:	48 89 c6             	mov    %rax,%rsi
  800421dabb:	48 bf 78 15 22 04 80 	movabs $0x8004221578,%rdi
  800421dac2:	00 00 00 
  800421dac5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421daca:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421dad1:	00 00 00 
  800421dad4:	ff d2                	callq  *%rdx
  800421dad6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dadb:	48 83 c4 48          	add    $0x48,%rsp
  800421dadf:	5b                   	pop    %rbx
  800421dae0:	5d                   	pop    %rbp
  800421dae1:	c3                   	retq   

000000800421dae2 <handle_ioinstr>:
  800421dae2:	55                   	push   %rbp
  800421dae3:	48 89 e5             	mov    %rsp,%rbp
  800421dae6:	53                   	push   %rbx
  800421dae7:	48 83 ec 38          	sub    $0x38,%rsp
  800421daeb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421daef:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421daf3:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421dafa:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421dafd:	89 c7                	mov    %eax,%edi
  800421daff:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421db06:	00 00 00 
  800421db09:	ff d0                	callq  *%rax
  800421db0b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421db0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421db13:	48 c1 e8 10          	shr    $0x10,%rax
  800421db17:	25 ff ff 00 00       	and    $0xffff,%eax
  800421db1c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421db1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421db23:	48 c1 e8 03          	shr    $0x3,%rax
  800421db27:	83 e0 01             	and    $0x1,%eax
  800421db2a:	48 85 c0             	test   %rax,%rax
  800421db2d:	0f 95 c0             	setne  %al
  800421db30:	88 45 db             	mov    %al,-0x25(%rbp)
  800421db33:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421db37:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421db3b:	75 2e                	jne    800421db6b <handle_ioinstr+0x89>
  800421db3d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421db41:	83 f0 01             	xor    $0x1,%eax
  800421db44:	84 c0                	test   %al,%al
  800421db46:	0f 84 fa 00 00 00    	je     800421dc46 <handle_ioinstr+0x164>
  800421db4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db50:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421db54:	89 c2                	mov    %eax,%edx
  800421db56:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421db5d:	00 00 00 
  800421db60:	89 10                	mov    %edx,(%rax)
  800421db62:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421db66:	e9 db 00 00 00       	jmpq   800421dc46 <handle_ioinstr+0x164>
  800421db6b:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421db6f:	0f 85 d1 00 00 00    	jne    800421dc46 <handle_ioinstr+0x164>
  800421db75:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421db79:	0f 84 c7 00 00 00    	je     800421dc46 <handle_ioinstr+0x164>
  800421db7f:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421db86:	00 00 00 
  800421db89:	8b 00                	mov    (%rax),%eax
  800421db8b:	83 f8 15             	cmp    $0x15,%eax
  800421db8e:	75 15                	jne    800421dba5 <handle_ioinstr+0xc3>
  800421db90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db94:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421db9b:	00 
  800421db9c:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421dba0:	e9 a1 00 00 00       	jmpq   800421dc46 <handle_ioinstr+0x164>
  800421dba5:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dbac:	00 00 00 
  800421dbaf:	8b 00                	mov    (%rax),%eax
  800421dbb1:	83 f8 16             	cmp    $0x16,%eax
  800421dbb4:	75 12                	jne    800421dbc8 <handle_ioinstr+0xe6>
  800421dbb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dbba:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421dbc1:	00 
  800421dbc2:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421dbc6:	eb 7e                	jmp    800421dc46 <handle_ioinstr+0x164>
  800421dbc8:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dbcf:	00 00 00 
  800421dbd2:	8b 00                	mov    (%rax),%eax
  800421dbd4:	83 f8 17             	cmp    $0x17,%eax
  800421dbd7:	75 2a                	jne    800421dc03 <handle_ioinstr+0x121>
  800421dbd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421dbdd:	48 8b 00             	mov    (%rax),%rax
  800421dbe0:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421dbe7:	48 85 c0             	test   %rax,%rax
  800421dbea:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421dbee:	48 c1 f8 0a          	sar    $0xa,%rax
  800421dbf2:	0f b6 d0             	movzbl %al,%edx
  800421dbf5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dbf9:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421dbfd:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421dc01:	eb 43                	jmp    800421dc46 <handle_ioinstr+0x164>
  800421dc03:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dc0a:	00 00 00 
  800421dc0d:	8b 00                	mov    (%rax),%eax
  800421dc0f:	83 f8 18             	cmp    $0x18,%eax
  800421dc12:	75 32                	jne    800421dc46 <handle_ioinstr+0x164>
  800421dc14:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421dc18:	48 8b 00             	mov    (%rax),%rax
  800421dc1b:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421dc22:	48 85 c0             	test   %rax,%rax
  800421dc25:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421dc29:	48 c1 f8 0a          	sar    $0xa,%rax
  800421dc2d:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421dc33:	48 c1 f8 08          	sar    $0x8,%rax
  800421dc37:	0f b6 d0             	movzbl %al,%edx
  800421dc3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dc3e:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421dc42:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421dc46:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421dc4a:	74 3b                	je     800421dc87 <handle_ioinstr+0x1a5>
  800421dc4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dc50:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421dc57:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421dc5e:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421dc61:	89 c7                	mov    %eax,%edi
  800421dc63:	48 b8 ca d3 21 04 80 	movabs $0x800421d3ca,%rax
  800421dc6a:	00 00 00 
  800421dc6d:	ff d0                	callq  *%rax
  800421dc6f:	89 c0                	mov    %eax,%eax
  800421dc71:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421dc75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dc79:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800421dc80:	b8 01 00 00 00       	mov    $0x1,%eax
  800421dc85:	eb 33                	jmp    800421dcba <handle_ioinstr+0x1d8>
  800421dc87:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dc8e:	00 00 00 
  800421dc91:	8b 10                	mov    (%rax),%edx
  800421dc93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dc97:	48 89 c6             	mov    %rax,%rsi
  800421dc9a:	48 bf a2 15 22 04 80 	movabs $0x80042215a2,%rdi
  800421dca1:	00 00 00 
  800421dca4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dca9:	48 b9 93 9c 20 04 80 	movabs $0x8004209c93,%rcx
  800421dcb0:	00 00 00 
  800421dcb3:	ff d1                	callq  *%rcx
  800421dcb5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dcba:	48 83 c4 38          	add    $0x38,%rsp
  800421dcbe:	5b                   	pop    %rbx
  800421dcbf:	5d                   	pop    %rbp
  800421dcc0:	c3                   	retq   

000000800421dcc1 <handle_cpuid>:
  800421dcc1:	55                   	push   %rbp
  800421dcc2:	48 89 e5             	mov    %rsp,%rbp
  800421dcc5:	48 83 ec 10          	sub    $0x10,%rsp
  800421dcc9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421dccd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421dcd1:	48 bf a9 15 22 04 80 	movabs $0x80042215a9,%rdi
  800421dcd8:	00 00 00 
  800421dcdb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dce0:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421dce7:	00 00 00 
  800421dcea:	ff d2                	callq  *%rdx
  800421dcec:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dcf1:	c9                   	leaveq 
  800421dcf2:	c3                   	retq   

000000800421dcf3 <handle_vmcall>:
  800421dcf3:	55                   	push   %rbp
  800421dcf4:	48 89 e5             	mov    %rsp,%rbp
  800421dcf7:	48 83 ec 70          	sub    $0x70,%rsp
  800421dcfb:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421dcff:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421dd03:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800421dd07:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  800421dd0b:	48 c7 45 f0 00 60 00 	movq   $0x6000,-0x10(%rbp)
  800421dd12:	00 
  800421dd13:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dd17:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421dd1b:	48 83 f8 06          	cmp    $0x6,%rax
  800421dd1f:	0f 87 2d 01 00 00    	ja     800421de52 <handle_vmcall+0x15f>
  800421dd25:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421dd2c:	00 
  800421dd2d:	48 b8 98 16 22 04 80 	movabs $0x8004221698,%rax
  800421dd34:	00 00 00 
  800421dd37:	48 01 d0             	add    %rdx,%rax
  800421dd3a:	48 8b 00             	mov    (%rax),%rax
  800421dd3d:	ff e0                	jmpq   *%rax
  800421dd3f:	48 bf c8 15 22 04 80 	movabs $0x80042215c8,%rdi
  800421dd46:	00 00 00 
  800421dd49:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dd4e:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421dd55:	00 00 00 
  800421dd58:	ff d2                	callq  *%rdx
  800421dd5a:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  800421dd5e:	e9 ef 00 00 00       	jmpq   800421de52 <handle_vmcall+0x15f>
  800421dd63:	48 bf f0 15 22 04 80 	movabs $0x80042215f0,%rdi
  800421dd6a:	00 00 00 
  800421dd6d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dd72:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421dd79:	00 00 00 
  800421dd7c:	ff d2                	callq  *%rdx
  800421dd7e:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  800421dd82:	e9 cb 00 00 00       	jmpq   800421de52 <handle_vmcall+0x15f>
  800421dd87:	48 bf 18 16 22 04 80 	movabs $0x8004221618,%rdi
  800421dd8e:	00 00 00 
  800421dd91:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dd96:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421dd9d:	00 00 00 
  800421dda0:	ff d2                	callq  *%rdx
  800421dda2:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  800421dda6:	e9 a7 00 00 00       	jmpq   800421de52 <handle_vmcall+0x15f>
  800421ddab:	48 b8 3f 82 21 04 80 	movabs $0x800421823f,%rax
  800421ddb2:	00 00 00 
  800421ddb5:	ff d0                	callq  *%rax
  800421ddb7:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  800421ddbb:	e9 92 00 00 00       	jmpq   800421de52 <handle_vmcall+0x15f>
  800421ddc0:	48 bf 40 16 22 04 80 	movabs $0x8004221640,%rdi
  800421ddc7:	00 00 00 
  800421ddca:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ddcf:	48 ba 93 9c 20 04 80 	movabs $0x8004209c93,%rdx
  800421ddd6:	00 00 00 
  800421ddd9:	ff d2                	callq  *%rdx
  800421dddb:	48 b8 0a 82 21 04 80 	movabs $0x800421820a,%rax
  800421dde2:	00 00 00 
  800421dde5:	ff d0                	callq  *%rax
  800421dde7:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ddee:	00 00 00 
  800421ddf1:	48 98                	cltq   
  800421ddf3:	48 c1 e0 03          	shl    $0x3,%rax
  800421ddf7:	48 89 c1             	mov    %rax,%rcx
  800421ddfa:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ddfe:	48 01 c8             	add    %rcx,%rax
  800421de01:	48 01 d0             	add    %rdx,%rax
  800421de04:	48 83 c0 08          	add    $0x8,%rax
  800421de08:	48 8b 00             	mov    (%rax),%rax
  800421de0b:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421de12:	00 00 00 
  800421de15:	be 00 00 00 00       	mov    $0x0,%esi
  800421de1a:	48 bf c8 da 4b 04 80 	movabs $0x80044bdac8,%rdi
  800421de21:	00 00 00 
  800421de24:	48 b8 ce 8f 20 04 80 	movabs $0x8004208fce,%rax
  800421de2b:	00 00 00 
  800421de2e:	ff d0                	callq  *%rax
  800421de30:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  800421de34:	eb 1c                	jmp    800421de52 <handle_vmcall+0x15f>
  800421de36:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421de3d:	00 00 00 
  800421de40:	8b 00                	mov    (%rax),%eax
  800421de42:	48 63 d0             	movslq %eax,%rdx
  800421de45:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421de49:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421de4d:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  800421de51:	90                   	nop
  800421de52:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421de56:	c9                   	leaveq 
  800421de57:	c3                   	retq   
