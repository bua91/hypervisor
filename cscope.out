cscope 15 $HOME/virtualization/new/prep8               0001846495
	@boot/main.c

1 
	~<öc/x86.h
>

2 
	~<öc/ñf.h
>

32 
	#SECTSIZE
 512

	)

33 
	#ELFHDR
 ((
Elf
 *) 0x10000)

34 

	)

35 
ªad£˘
(*, 
uöt32_t
);

36 
ªad£g
(
uöt32_t
, uint32_t, uint32_t);

40 
	$boŸmaö
()

44 
Proghdr
 *
ph
, *
ïh
;

46 
mu…iboŸ_öfo
[];

48 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

51 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
)

52 
bad
;

56 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

57 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

58 ; 
ph
 < 
ïh
;Öh++)

59 
	`ªad£g
(
ph
->
p_∑
,Öh->
p_memsz
,Öh->
p_off£t
);

64 
__asm
 
	`__vﬁ©ûe
("mov»%0, %%ebx": : "r" (
mu…iboŸ_öfo
));

65 (((*)()Ë((
uöt32_t
)(
ELFHDR
->
e_íåy
)))();

67 
bad
:

68 
	`outw
(0x8A00, 0x8A00);

69 
	`outw
(0x8A00, 0x8E00);

72 
	}
}

77 
	$ªad£g
(
uöt32_t
 
∑
, uöt32_à
cou¡
, uöt32_à
off£t
)

79 
uöt32_t
 
íd_∑
;

81 
íd_∑
 = 
∑
 + 
cou¡
;

82 
uöt32_t
 
‹goff
 = 
off£t
;

85 
∑
 &~(
SECTSIZE
 - 1);

88 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

93 
∑
 < 
íd_∑
) {

94 
	`ªad£˘
((
uöt8_t
*Ë
∑
, 
off£t
);

95 
∑
 +
SECTSIZE
;

96 
off£t
++;

98 
	}
}

101 
	$waôdisk
()

104 (
	`öb
(0x1F7) & 0xC0) != 0x40)

106 
	}
}

109 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

112 
	`waôdisk
();

114 
	`outb
(0x1F2, 1);

115 
	`outb
(0x1F3, 
off£t
);

116 
	`outb
(0x1F4, 
off£t
 >> 8);

117 
	`outb
(0x1F5, 
off£t
 >> 16);

118 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

119 
	`outb
(0x1F7, 0x20);

122 
	`waôdisk
();

125 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

126 
	}
}

	@fs/bc.c

3 
	~"fs.h
"

7 
	$diskaddr
(
uöt64_t
 
blockno
)

9 i‡(
blockno
 =0 || (
su≥r
 && blocknÿ>su≥r->
s_nblocks
))

10 
	`∑nic
("bad blockÇumbî %08x i¿diskaddr", 
blockno
);

11  (*Ë(
DISKMAP
 + 
blockno
 * 
BLKSIZE
);

12 
	}
}

15 
boﬁ


16 
	$va_is_m≠≥d
(*
va
)

18  (
uvpml4e
[
	`VPML4E
(
va
)] & 
PTE_P
Ë&& (
uvpde
[
	`VPDPE
(va)] & PTE_PË&& (
uvpd
[
	`VPD
(va)] & PTE_PË&& (
uv±
[
	`PGNUM
(va)] & PTE_P);

19 
	}
}

22 
boﬁ


23 
	$va_is_dúty
(*
va
)

25  (
uv±
[
	`PGNUM
(
va
)] & 
PTE_D
) != 0;

26 
	}
}

32 
	$bc_pgÁu…
(
UTøp‰ame
 *
utf
)

34 *
addr
 = (*Ë
utf
->
utf_Áu…_va
;

35 
uöt64_t
 
blockno
 = ((uöt64_t)
addr
 - 
DISKMAP
Ë/ 
BLKSIZE
;

36 
r
;

39 i‡(
addr
 < (*)
DISKMAP
 ||ádd∏>(*)(DISKMAP + 
DISKSIZE
))

40 
	`∑nic
("page fault in FS:Éip %08x, va %08x,Érr %04x",

41 
utf
->
utf_rù
, 
addr
, utf->
utf_îr
);

44 i‡(
su≥r
 && 
blockno
 >su≥r->
s_nblocks
)

45 
	`∑nic
("ªadögÇ⁄-exi°íàblock %08x\n", 
blockno
);

52 
addr
 = 
	`ROUNDDOWN
◊ddr, 
PGSIZE
);

53 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
addr
, 
PTE_U
|
PTE_P
|
PTE_W
)) < 0)

54 
	`∑nic
("ö bc_pgÁu…, sys_∑ge_Æloc: %e", 
r
);

60 #i‚de‡
VMM_GUEST


63 i‡((
r
 = 
	`ide_ªad
(
blockno
 * 
BLKSECTS
, 
addr
, BLKSECTS)) < 0)

64 
	`∑nic
("ö bc_pgÁu…, ide_ªad: %e", 
r
);

71 i‡((
r
 = 
	`ho°_ªad
(
blockno
 * 
BLKSECTS
, 
addr
, BLKSECTS)) < 0)

72 
	`∑nic
("ö bc_pgÁu…, ho°_ªad: %e", 
r
);

78 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
addr
, 0,áddr, 
uv±
[
	`PGNUM
◊ddr)] & 
PTE_SYSCALL
)) < 0)

79 
	`∑nic
("ö bc_pgÁu…, sys_∑ge_m≠: %e", 
r
);

84 i‡(
bôm≠
 && 
	`block_is_‰ì
(
blockno
))

85 
	`∑nic
("ªadög fªêblock %08x\n", 
blockno
);

86 
	}
}

96 
	$Êush_block
(*
addr
)

98 
uöt64_t
 
blockno
 = ((uöt64_t)
addr
 - 
DISKMAP
Ë/ 
BLKSIZE
;

100 i‡(
addr
 < (*)
DISKMAP
 ||ádd∏>(*)(DISKMAP + 
DISKSIZE
))

101 
	`∑nic
("Êush_block o‡bad v®%08x", 
addr
);

104 i‡(!
	`va_is_m≠≥d
(
addr
Ë|| !
	`va_is_dúty
(addr))

108 
addr
 = 
	`ROUNDDOWN
◊ddr, 
BLKSIZE
);

109 #i‚de‡
VMM_GUEST


110 
	`ide_wrôe
(
blockno
 * 
BLKSECTS
, (*Ë
addr
, BLKSECTS);

114 
	`ho°_wrôe
(
blockno
 * 
BLKSECTS
, (*Ë
addr
, BLKSECTS);

117 
	`sys_∑ge_m≠
(0, 
addr
, 0,áddr, 
uv±
[
	`PGNUM
◊ddr)] & 
PTE_SYSCALL
);

119 
	}
}

124 
	$check_bc
()

126 
Su≥r
 
backup
;

129 
	`memmove
(&
backup
, 
	`diskaddr
(1),  backup);

132 
	`°r˝y
(
	`diskaddr
(1), "OOPS!\n");

133 
	`Êush_block
(
	`diskaddr
(1));

134 
	`as£π
(
	`va_is_m≠≥d
(
	`diskaddr
(1)));

135 
	`as£π
(!
	`va_is_dúty
(
	`diskaddr
(1)));

138 
	`sys_∑ge_unm≠
(0, 
	`diskaddr
(1));

139 
	`as£π
(!
	`va_is_m≠≥d
(
	`diskaddr
(1)));

142 
	`as£π
(
	`°rcmp
(
	`diskaddr
(1), "OOPS!\n") == 0);

145 
	`memmove
(
	`diskaddr
(1), &
backup
,  backup);

146 
	`Êush_block
(
	`diskaddr
(1));

148 
	`˝rötf
("block cache is good\n");

149 
	}
}

152 
	$bc_öô
()

154 
Su≥r
 
su≥r
;

155 
	`£t_pgÁu…_h™dÀr
(
bc_pgÁu…
);

156 
	`check_bc
();

159 
	`memmove
(&
su≥r
, 
	`diskaddr
(1),  super);

160 
	}
}

	@fs/fs.c

2 
	~<öc/°rög.h
>

5 
	~"fs.h
"

13 
	$check_su≥r
()

15 i‡(
su≥r
->
s_magic
 !
FS_MAGIC
)

16 
	`∑nic
("bad file system magicÇumber");

18 i‡(
su≥r
->
s_nblocks
 > 
DISKSIZE
/
BLKSIZE
)

19 
	`∑nic
("file system isÅooÜarge");

21 
	`˝rötf
("superblock is good\n");

22 
	}
}

30 
boﬁ


31 
	$block_is_‰ì
(
uöt32_t
 
blockno
)

33 i‡(
su≥r
 =0 || 
blockno
 >su≥r->
s_nblocks
)

35 i‡(
bôm≠
[
blockno
 / 32] & (1 << (blockno % 32)))

38 
	}
}

42 
	$‰ì_block
(
uöt32_t
 
blockno
)

45 i‡(
blockno
 == 0)

46 
	`∑nic
("attemptÅo free zero block");

47 
bôm≠
[
blockno
/32] |= 1<<(blockno%32);

48 
	}
}

59 
	$Æloc_block
()

66 
i
 = 0, 
j
;

67 
œ°Æloc
;

69 
i
 = 0; i < 
su≥r
->
s_nblocks
; i++) {

70 
j
 = (
œ°Æloc
+
i
)%
su≥r
->
s_nblocks
;

71 i‡(
	`block_is_‰ì
(
j
)) {

72 
bôm≠
[
j
/32] &= ~(1<<(j%32));

73 
	`Êush_block
(&
bôm≠
[
j
/32]);

74 
œ°Æloc
 = 
j
;

75  
j
;

79  -
E_NO_DISK
;

80 
	}
}

87 
	$check_bôm≠
()

89 
uöt32_t
 
i
;

92 
i
 = 0; i * 
BLKBITSIZE
 < 
su≥r
->
s_nblocks
; i++)

93 
	`as£π
(!
	`block_is_‰ì
(2+
i
));

96 
	`as£π
(!
	`block_is_‰ì
(0));

97 
	`as£π
(!
	`block_is_‰ì
(1));

99 
	`˝rötf
("bitmap is good\n");

100 
	}
}

110 
	$fs_öô
()

112 
	`°©ic_as£π
((
Fûe
) == 256);

116 #i‚de‡
VMM_GUEST


118 i‡(
	`ide_¥obe_disk1
())

119 
	`ide_£t_disk
(1);

121 
	`ide_£t_disk
(0);

123 
	`ho°_ùc_öô
();

128 
	`bc_öô
();

131 
su≥r
 = 
	`diskaddr
(1);

132 
	`check_su≥r
();

135 
bôm≠
 = 
	`diskaddr
(2);

136 
	`check_bôm≠
();

137 
	}
}

159 
	$fûe_block_wÆk
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
, uöt32_à**
µdiskbno
, 
boﬁ
 
Æloc
)

162 
r
;

163 
uöt32_t
 *
±r
;

164 *
blk
;

166 i‡(
fûebno
 < 
NDIRECT
)

167 
±r
 = &
f
->
f_dúe˘
[
fûebno
];

168 i‡(
fûebno
 < 
NDIRECT
 + 
NINDIRECT
) {

169 i‡(
f
->
f_ödúe˘
 == 0) {

170 i‡(
Æloc
 == 0)

171  -
E_NOT_FOUND
;

172 i‡((
r
 = 
	`Æloc_block
()) < 0)

173  
r
;

174 
f
->
f_ödúe˘
 = 
r
;

175 
	`mem£t
(
	`diskaddr
(
r
), 0, 
BLKSIZE
);

177 
±r
 = (
uöt32_t
*)
	`diskaddr
(
f
->
f_ödúe˘
Ë+ 
fûebno
 - 
NDIRECT
;

179  -
E_INVAL
;

181 *
µdiskbno
 = 
±r
;

184 
	}
}

194 
	$fûe_gë_block
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
, **
blk
)

197 
r
;

198 
uöt32_t
 *
±r
;

200 i‡((
r
 = 
	`fûe_block_wÆk
(
f
, 
fûebno
, &
±r
, 1)) < 0)

201  
r
;

202 i‡(*
±r
 == 0) {

203 i‡((
r
 = 
	`Æloc_block
()) < 0)

204  
r
;

205 *
±r
 = 
r
;

207 *
blk
 = 
	`diskaddr
(*
±r
);

210 
	}
}

217 
	$dú_lookup
(
Fûe
 *
dú
, c⁄° *
«me
, Fûê**
fûe
)

219 
r
;

220 
uöt32_t
 
i
, 
j
, 
nblock
;

221 *
blk
;

222 
Fûe
 *
f
;

227 
	`as£π
((
dú
->
f_size
 % 
BLKSIZE
) == 0);

228 
nblock
 = 
dú
->
f_size
 / 
BLKSIZE
;

229 
i
 = 0; i < 
nblock
; i++) {

230 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

231  
r
;

232 
f
 = (
Fûe
*Ë
blk
;

233 
j
 = 0; j < 
BLKFILES
; j++)

234 i‡(
	`°rcmp
(
f
[
j
].
f_«me
, 
«me
) == 0) {

235 *
fûe
 = &
f
[
j
];

239  -
E_NOT_FOUND
;

240 
	}
}

245 
	$dú_Æloc_fûe
(
Fûe
 *
dú
, Fûê**
fûe
)

247 
r
;

248 
uöt32_t
 
nblock
, 
i
, 
j
;

249 *
blk
;

250 
Fûe
 *
f
;

252 
	`as£π
((
dú
->
f_size
 % 
BLKSIZE
) == 0);

253 
nblock
 = 
dú
->
f_size
 / 
BLKSIZE
;

254 
i
 = 0; i < 
nblock
; i++) {

255 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

256  
r
;

257 
f
 = (
Fûe
*Ë
blk
;

258 
j
 = 0; j < 
BLKFILES
; j++)

259 i‡(
f
[
j
].
f_«me
[0] == '\0') {

260 *
fûe
 = &
f
[
j
];

264 
dú
->
f_size
 +
BLKSIZE
;

265 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

266  
r
;

267 
f
 = (
Fûe
*Ë
blk
;

268 *
fûe
 = &
f
[0];

270 
	}
}

274 
	$skù_¶ash
(c⁄° *
p
)

276 *
p
 == '/')

277 
p
++;

278  
p
;

279 
	}
}

288 
	$wÆk_∑th
(c⁄° *
∑th
, 
Fûe
 **
pdú
, Fûê**
pf
, *
œ°ñem
)

290 c⁄° *
p
;

291 
«me
[
MAXNAMELEN
];

292 
Fûe
 *
dú
, *
f
;

293 
r
;

297 
∑th
 = 
	`skù_¶ash
(path);

298 
f
 = &
su≥r
->
s_roŸ
;

299 
dú
 = 0;

300 
«me
[0] = 0;

302 i‡(
pdú
)

303 *
pdú
 = 0;

304 *
pf
 = 0;

305 *
∑th
 != '\0') {

306 
dú
 = 
f
;

307 
p
 = 
∑th
;

308 *
∑th
 != '/' && *path != '\0')

309 
∑th
++;

310 i‡(
∑th
 - 
p
 >
MAXNAMELEN
)

311  -
E_BAD_PATH
;

312 
	`memmove
(
«me
, 
p
, 
∑th
 -Ö);

313 
«me
[
∑th
 - 
p
] = '\0';

314 
∑th
 = 
	`skù_¶ash
(path);

316 i‡(
dú
->
f_ty≥
 !
FTYPE_DIR
)

317  -
E_NOT_FOUND
;

319 i‡((
r
 = 
	`dú_lookup
(
dú
, 
«me
, &
f
)) < 0) {

320 i‡(
r
 =-
E_NOT_FOUND
 && *
∑th
 == '\0') {

321 i‡(
pdú
)

322 *
pdú
 = 
dú
;

323 i‡(
œ°ñem
)

324 
	`°r˝y
(
œ°ñem
, 
«me
);

325 *
pf
 = 0;

327  
r
;

331 i‡(
pdú
)

332 *
pdú
 = 
dú
;

333 *
pf
 = 
f
;

335 
	}
}

344 
	$fûe_¸óã
(c⁄° *
∑th
, 
Fûe
 **
pf
)

346 
«me
[
MAXNAMELEN
];

347 
r
;

348 
Fûe
 *
dú
, *
f
;

350 i‡((
r
 = 
	`wÆk_∑th
(
∑th
, &
dú
, &
f
, 
«me
)) == 0)

351  -
E_FILE_EXISTS
;

352 i‡(
r
 !-
E_NOT_FOUND
 || 
dú
 == 0)

353  
r
;

354 i‡((
r
 = 
	`dú_Æloc_fûe
(
dú
, &
f
)) < 0)

355  
r
;

356 
	`°r˝y
(
f
->
f_«me
, 
«me
);

357 *
pf
 = 
f
;

358 
	`fûe_Êush
(
dú
);

360 
	}
}

365 
	$fûe_›í
(c⁄° *
∑th
, 
Fûe
 **
pf
)

367  
	`wÆk_∑th
(
∑th
, 0, 
pf
, 0);

368 
	}
}

373 
ssize_t


374 
	$fûe_ªad
(
Fûe
 *
f
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

376 
r
, 
bn
;

377 
off_t
 
pos
;

378 *
blk
;

380 i‡(
off£t
 >
f
->
f_size
)

383 
cou¡
 = 
	`MIN
(cou¡, 
f
->
f_size
 - 
off£t
);

385 
pos
 = 
off£t
;Öo†< off£à+ 
cou¡
; ) {

386 i‡((
r
 = 
	`fûe_gë_block
(
f
, 
pos
 / 
BLKSIZE
, &
blk
)) < 0)

387  
r
;

388 
bn
 = 
	`MIN
(
BLKSIZE
 - 
pos
 % BLKSIZE, 
off£t
 + 
cou¡
 -Öos);

389 
	`memmove
(
buf
, 
blk
 + 
pos
 % 
BLKSIZE
, 
bn
);

390 
pos
 +
bn
;

391 
buf
 +
bn
;

394  
cou¡
;

395 
	}
}

403 
	$fûe_wrôe
(
Fûe
 *
f
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

405 
r
, 
bn
;

406 
off_t
 
pos
;

407 *
blk
;

410 i‡(
off£t
 + 
cou¡
 > 
f
->
f_size
)

411 i‡((
r
 = 
	`fûe_£t_size
(
f
, 
off£t
 + 
cou¡
)) < 0)

412  
r
;

414 
pos
 = 
off£t
;Öo†< off£à+ 
cou¡
; ) {

415 i‡((
r
 = 
	`fûe_gë_block
(
f
, 
pos
 / 
BLKSIZE
, &
blk
)) < 0)

416  
r
;

417 
bn
 = 
	`MIN
(
BLKSIZE
 - 
pos
 % BLKSIZE, 
off£t
 + 
cou¡
 -Öos);

418 
	`memmove
(
blk
 + 
pos
 % 
BLKSIZE
, 
buf
, 
bn
);

419 
pos
 +
bn
;

420 
buf
 +
bn
;

423  
cou¡
;

424 
	}
}

429 
	$fûe_‰ì_block
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
)

431 
r
;

432 
uöt32_t
 *
±r
;

434 i‡((
r
 = 
	`fûe_block_wÆk
(
f
, 
fûebno
, &
±r
, 0)) < 0)

435  
r
;

436 i‡(*
±r
) {

437 
	`‰ì_block
(*
±r
);

438 *
±r
 = 0;

441 
	}
}

453 
	$fûe_åunˇã_blocks
(
Fûe
 *
f
, 
off_t
 
√wsize
)

455 
r
;

456 
uöt32_t
 
bno
, 
ﬁd_nblocks
, 
√w_nblocks
;

458 
ﬁd_nblocks
 = (
f
->
f_size
 + 
BLKSIZE
 - 1) / BLKSIZE;

459 
√w_nblocks
 = (
√wsize
 + 
BLKSIZE
 - 1) / BLKSIZE;

460 
bno
 = 
√w_nblocks
; bnÿ< 
ﬁd_nblocks
; bno++)

461 i‡((
r
 = 
	`fûe_‰ì_block
(
f
, 
bno
)) < 0)

462 
	`˝rötf
("w¨nög: fûe_‰ì_block: %e", 
r
);

464 i‡(
√w_nblocks
 <
NDIRECT
 && 
f
->
f_ödúe˘
) {

465 
	`‰ì_block
(
f
->
f_ödúe˘
);

466 
f
->
f_ödúe˘
 = 0;

468 
	}
}

472 
	$fûe_£t_size
(
Fûe
 *
f
, 
off_t
 
√wsize
)

474 i‡(
f
->
f_size
 > 
√wsize
)

475 
	`fûe_åunˇã_blocks
(
f
, 
√wsize
);

476 
f
->
f_size
 = 
√wsize
;

477 
	`Êush_block
(
f
);

479 
	}
}

486 
	$fûe_Êush
(
Fûe
 *
f
)

488 
i
;

489 
uöt32_t
 *
pdiskbno
;

491 
i
 = 0; i < (
f
->
f_size
 + 
BLKSIZE
 - 1) / BLKSIZE; i++) {

492 i‡(
	`fûe_block_wÆk
(
f
, 
i
, &
pdiskbno
, 0) < 0 ||

493 
pdiskbno
 =
NULL
 || *pdiskbno == 0)

495 
	`Êush_block
(
	`diskaddr
(*
pdiskbno
));

497 
	`Êush_block
(
f
);

498 i‡(
f
->
f_ödúe˘
)

499 
	`Êush_block
(
	`diskaddr
(
f
->
f_ödúe˘
));

500 
	}
}

504 
	$fûe_ªmove
(c⁄° *
∑th
)

506 
r
;

507 
Fûe
 *
f
;

509 i‡((
r
 = 
	`wÆk_∑th
(
∑th
, 0, &
f
, 0)) < 0)

510  
r
;

512 
	`fûe_åunˇã_blocks
(
f
, 0);

513 
f
->
f_«me
[0] = '\0';

514 
f
->
f_size
 = 0;

515 
	`Êush_block
(
f
);

518 
	}
}

522 
	$fs_sync
()

524 
i
;

525 
i
 = 1; i < 
su≥r
->
s_nblocks
; i++)

526 
	`Êush_block
(
	`diskaddr
(
i
));

527 
	}
}

	@fs/fs.h

2 
	~<öc/fs.h
>

3 
	~<öc/lib.h
>

5 
	#SECTSIZE
 512

6 
	#BLKSECTS
 (
BLKSIZE
 / 
SECTSIZE
)

7 

	)

10 
	#DISKMAP
 0x10000000

	)

13 
	#DISKSIZE
 0xC0000000

	)

15 
Su≥r
 *
	gsu≥r
;

16 
uöt32_t
 *
	gbôm≠
;

19 
boﬁ
 
ide_¥obe_disk1
();

20 
ide_£t_disk
(
diskno
);

22 
ide_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

23 
ide_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

26 * 
diskaddr
(
uöt64_t
 
blockno
);

27 
boﬁ
 
va_is_m≠≥d
(*
va
);

28 
boﬁ
 
va_is_dúty
(*
va
);

29 
Êush_block
(*
addr
);

30 
bc_öô
();

33 
fs_öô
();

34 
fûe_gë_block
(
Fûe
 *
f
, 
uöt32_t
 
fûe_blockno
, **
pblk
);

35 
fûe_¸óã
(c⁄° *
∑th
, 
Fûe
 **
f
);

36 
fûe_›í
(c⁄° *
∑th
, 
Fûe
 **
f
);

37 
ssize_t
 
fûe_ªad
(
Fûe
 *
f
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

38 
fûe_wrôe
(
Fûe
 *
f
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

39 
fûe_£t_size
(
Fûe
 *
f
, 
off_t
 
√wsize
);

40 
fûe_Êush
(
Fûe
 *
f
);

41 
fûe_ªmove
(c⁄° *
∑th
);

42 
fs_sync
();

43 
fûe_block_wÆk
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
, uöt32_à**
µdiskbno
, 
boﬁ
 
Æloc
);

45 
boﬁ
 
block_is_‰ì
(
uöt32_t
 
blockno
);

46 
Æloc_block
();

49 
fs_ã°
();

52 #ifde‡
VMM_GUEST


54 
uöt64_t
 
gë_ho°_fd
();

55 
ho°_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

56 
ho°_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

57 
ho°_ùc_öô
();

	@fs/fsformat.c

7 
	#off_t
 
xxx_off_t


	)

8 
	#boﬁ
 
xxx_boﬁ


	)

9 
	~<as£π.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

12 
	~<öây≥s.h
>

13 
	~<°d¨g.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<uni°d.h
>

18 
	~<sys/mm™.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/ty≥s.h
>

21 #unde‡
off_t


22 #unde‡
boﬁ


26 
	#JOS_INC_TYPES_H


	)

28 
uöt32_t
 
	tphyßddr_t
;

29 
uöt32_t
 
	toff_t
;

30 
	tboﬁ
;

32 
	~<öc/mmu.h
>

33 
	~<öc/fs.h
>

35 
	#ROUNDUP
(
n
, 
v
Ë(“Ë- 1 + (vË- (“Ë- 1Ë% (v))

	)

36 
	#MAX_DIR_ENTS
 128

	)

38 
	#FLAG_BIN
 1

	)

39 
	#FLAG_ETC
 2

	)

40 
	#FLAG_SBIN
 3

	)

41 
	#FLAG_ROOT
 0

	)

43 
	#FLAG_VMM
 4

	)

46 
	sDú


48 
Fûe
 *
	mf
;

49 
Fûe
 *
	míts
;

50 
	mn
;

53 
uöt32_t
 
	gnblocks
;

54 *
	gdiskm≠
, *
	gdiskpos
;

55 
Su≥r
 *
	gsu≥r
;

56 
uöt32_t
 *
	gbôm≠
;

59 
	$∑nic
(c⁄° *
fmt
, ...)

61 
va_li°
 
≠
;

63 
	`va_°¨t
(
≠
, 
fmt
);

64 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

65 
	`va_íd
(
≠
);

66 
	`Âutc
('\n', 
°dîr
);

67 
	`ab‹t
();

68 
	}
}

71 
	$ªadn
(
f
, *
out
, 
size_t
 
n
)

73 
size_t
 
p
 = 0;

74 
p
 < 
n
) {

75 
size_t
 
m
 = 
	`ªad
(
f
, 
out
 + 
p
, 
n
 -Ö);

76 i‡(
m
 < 0)

77 
	`∑nic
("ªad: %s", 
	`°ªº‹
(
î∫o
));

78 i‡(
m
 == 0)

79 
	`∑nic
("read: Unexpected EOF");

80 
p
 +
m
;

82 
	}
}

85 
uöt32_t


86 
	$blockof
(*
pos
)

88  ((*)
pos
 - 
diskm≠
Ë/ 
BLKSIZE
;

89 
	}
}

92 
	$Æloc
(
uöt32_t
 
byãs
)

94 *
°¨t
 = 
diskpos
;

95 
diskpos
 +
	`ROUNDUP
(
byãs
, 
BLKSIZE
);

96 i‡(
	`blockof
(
diskpos
Ë>
nblocks
)

97 
	`∑nic
("out of disk blocks");

98  
°¨t
;

99 
	}
}

102 
	$›ídisk
(c⁄° *
«me
)

104 
r
, 
diskfd
, 
nbôblocks
;

106 i‡((
diskfd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_CREAT
, 0666)) < 0)

107 
	`∑nic
("›í %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

109 i‡((
r
 = 
	`·runˇã
(
diskfd
, 0)) < 0

110 || (
r
 = 
	`·runˇã
(
diskfd
, 
nblocks
 * 
BLKSIZE
)) < 0)

111 
	`∑nic
("åunˇã %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

113 i‡((
diskm≠
 = 
	`mm≠
(
NULL
, 
nblocks
 * 
BLKSIZE
, 
PROT_READ
|
PROT_WRITE
,

114 
MAP_SHARED
, 
diskfd
, 0)Ë=
MAP_FAILED
)

115 
	`∑nic
("mm≠ %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

117 
	`˛o£
(
diskfd
);

119 
diskpos
 = 
diskm≠
;

120 
	`Æloc
(
BLKSIZE
);

121 
su≥r
 = 
	`Æloc
(
BLKSIZE
);

122 
su≥r
->
s_magic
 = 
FS_MAGIC
;

123 
su≥r
->
s_nblocks
 = 
nblocks
;

124 
su≥r
->
s_roŸ
.
f_ty≥
 = 
FTYPE_DIR
;

125 
	`°r˝y
(
su≥r
->
s_roŸ
.
f_«me
, "/");

127 
nbôblocks
 = (
nblocks
 + 
BLKBITSIZE
 - 1) / BLKBITSIZE;

128 
bôm≠
 = 
	`Æloc
(
nbôblocks
 * 
BLKSIZE
);

129 
	`mem£t
(
bôm≠
, 0xFF, 
nbôblocks
 * 
BLKSIZE
);

130 
	}
}

133 
	$föishdisk
()

135 
r
, 
i
;

137 
i
 = 0; i < 
	`blockof
(
diskpos
); ++i)

138 
bôm≠
[
i
/32] &= ~(1<<(i%32));

140 i‡((
r
 = 
	`msync
(
diskm≠
, 
nblocks
 * 
BLKSIZE
, 
MS_SYNC
)) < 0)

141 
	`∑nic
("msync: %s", 
	`°ªº‹
(
î∫o
));

142 
	}
}

145 
	$föishfûe
(
Fûe
 *
f
, 
uöt32_t
 
°¨t
, uöt32_à
Àn
)

147 
i
;

148 
f
->
f_size
 = 
Àn
;

149 
Àn
 = 
	`ROUNDUP
÷í, 
BLKSIZE
);

150 
i
 = 0; i < 
Àn
 / 
BLKSIZE
 && i < 
NDIRECT
; ++i)

151 
f
->
f_dúe˘
[
i
] = 
°¨t
 + i;

152 i‡(
i
 =
NDIRECT
) {

153 
uöt32_t
 *
öd
 = 
	`Æloc
(
BLKSIZE
);

154 
f
->
f_ödúe˘
 = 
	`blockof
(
öd
);

155 ; 
i
 < 
Àn
 / 
BLKSIZE
; ++i)

156 
öd
[
i
 - 
NDIRECT
] = 
°¨t
 + i;

158 
	}
}

161 
	$°¨tdú
(
Fûe
 *
f
, 
Dú
 *
dout
)

163 
dout
->
f
 = f;

164 
dout
->
íts
 = 
	`mÆloc
(
MAX_DIR_ENTS
 *  *dout->ents);

165 
dout
->
n
 = 0;

166 
	}
}

168 
Fûe
 *

169 
	$dúadd
(
Dú
 *
d
, 
uöt32_t
 
ty≥
, c⁄° *
«me
)

171 
Fûe
 *
out
 = &
d
->
íts
[d->
n
++];

172 i‡(
d
->
n
 > 
MAX_DIR_ENTS
)

173 
	`∑nic
("too many directoryÉntries");

174 
	`°r˝y
(
out
->
f_«me
, 
«me
);

175 
out
->
f_ty≥
 = 
ty≥
;

176  
out
;

177 
	}
}

180 
	$föishdú
(
Dú
 *
d
)

182 
size
 = 
d
->
n
 * (
Fûe
);

183 
Fûe
 *
°¨t
 = 
	`Æloc
(
size
);

184 
	`memmove
(
°¨t
, 
d
->
íts
, 
size
);

185 
	`föishfûe
(
d
->
f
, 
	`blockof
(
°¨t
), 
	`ROUNDUP
(
size
, 
BLKSIZE
));

186 
	`‰ì
(
d
->
íts
);

187 
d
->
íts
 = 
NULL
;

188 
	}
}

191 
	$wrôefûe
(
Dú
 *
dú
, c⁄° *
«me
)

193 
r
, 
fd
;

194 
Fûe
 *
f
;

195 
°©
 
°
;

196 c⁄° *
œ°
;

197 *
°¨t
;

199 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0)

200 
	`∑nic
("›í %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

201 i‡((
r
 = 
	`f°©
(
fd
, &
°
)) < 0)

202 
	`∑nic
("°© %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

203 i‡(!
	`S_ISREG
(
°
.
°_mode
))

204 
	`∑nic
("%†i†nŸáÑeguœ∏fûe", 
«me
);

205 i‡(
°
.
°_size
 >
MAXFILESIZE
)

206 
	`∑nic
("%†toÿœrge", 
«me
);

208 
œ°
 = 
	`°ºchr
(
«me
, '/');

209 i‡(
œ°
)

210 
œ°
++;

212 
œ°
 = 
«me
;

214 
f
 = 
	`dúadd
(
dú
, 
FTYPE_REG
, 
œ°
);

215 
°¨t
 = 
	`Æloc
(
°
.
°_size
);

216 
	`ªadn
(
fd
, 
°¨t
, 
°
.
°_size
);

217 
	`föishfûe
(
f
, 
	`blockof
(
°¨t
), 
°
.
°_size
);

218 
	`˛o£
(
fd
);

219 
	}
}

222 
	$ußge
()

224 
	`Ârötf
(
°dîr
, "Usage: fsformat fs.img NBLOCKS files...\n");

225 
	`exô
(2);

226 
	}
}

229 
	$maö
(
¨gc
, **
¨gv
)

231 
i
;

232 *
s
;

233 
Dú
 
roŸ
;

234 
Êag
=
FLAG_ROOT
;

235 
Dú
 
bö
, 
sbö
;

236 
Fûe
 *
b
, *
sb
;

238 
Dú
 
vmm
;

239 
Fûe
 *
v
;

241 
	`as£π
(
BLKSIZE
 % (
Fûe
) == 0);

243 i‡(
¨gc
 < 3)

244 
	`ußge
();

246 
nblocks
 = 
	`°πﬁ
(
¨gv
[2], &
s
, 0);

247 i‡(*
s
 || s =
¨gv
[2] || 
nblocks
 < 2 ||Çblocks > 10240)

248 
	`ußge
();

250 
	`›ídisk
(
¨gv
[1]);

252 
	`°¨tdú
(&
su≥r
->
s_roŸ
, &
roŸ
);

254 
b
 = 
	`dúadd
(&
roŸ
, 
FTYPE_DIR
, "bin");

255 
	`°¨tdú
(
b
, &
bö
);

257 
sb
 = 
	`dúadd
(&
roŸ
, 
FTYPE_DIR
, "sbin");

258 
	`°¨tdú
(
sb
, &
sbö
);

261 
v
 = 
	`dúadd
(&
roŸ
, 
FTYPE_DIR
, "vmm");

262 
	`°¨tdú
(
v
, &
vmm
);

265 
i
 = 3; i < 
¨gc
; i++) {

266 if(
	`°rcmp
("-b", 
¨gv
[
i
]) == 0) {

267 
Êag
 = 
FLAG_BIN
;

269 } if(
	`°rcmp
("-sb", 
¨gv
[
i
]) == 0) {

270 
Êag
 = 
FLAG_SBIN
;

273 } if(
	`°rcmp
("-g", 
¨gv
[
i
]) == 0) {

274 
Êag
 = 
FLAG_VMM
;

279 
Êag
){

280 
FLAG_ROOT
:

281 
	`wrôefûe
(&
roŸ
, 
¨gv
[
i
]);

283 
FLAG_BIN
:

284 
	`wrôefûe
(&
bö
, 
¨gv
[
i
]);

286 
FLAG_SBIN
:

287 
	`wrôefûe
(&
sbö
, 
¨gv
[
i
]);

290 
FLAG_VMM
:

291 
	`wrôefûe
(&
vmm
, 
¨gv
[
i
]);

297 
	`föishdú
(&
bö
);

298 
	`föishdú
(&
sbö
);

300 
	`föishdú
(&
vmm
);

302 
	`föishdú
(&
roŸ
);

303 
	`föishdisk
();

305 
	}
}

	@fs/ide.c

8 
	~"fs.h
"

9 
	~<öc/x86.h
>

11 
	#IDE_BSY
 0x80

	)

12 
	#IDE_DRDY
 0x40

	)

13 
	#IDE_DF
 0x20

	)

14 
	#IDE_ERR
 0x01

	)

16 
	gdiskno
 = 1;

20 
	$ide_waô_ªady
(
boﬁ
 
check_îr‹
)

22 
r
;

24 ((
r
 = 
	`öb
(0x1F7)Ë& (
IDE_BSY
|
IDE_DRDY
)) != IDE_DRDY)

27 i‡(
check_îr‹
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

30 
	}
}

32 
boﬁ


33 
	$ide_¥obe_disk1
()

35 
r
, 
x
;

38 
	`ide_waô_ªady
(0);

41 
	`outb
(0x1F6, 0xE0 | (1<<4));

44 
x
 = 0;

45 
x
 < 1000 && ((
r
 = 
	`öb
(0x1F7)Ë& (
IDE_BSY
|
IDE_DF
|
IDE_ERR
)) != 0;

46 
x
++)

50 
	`outb
(0x1F6, 0xE0 | (0<<4));

52 
	`˝rötf
("Devi˚ 1Öª£n˚: %d\n", (
x
 < 1000));

53  (
x
 < 1000);

54 
	}
}

57 
	$ide_£t_disk
(
d
)

59 i‡(
d
 != 0 && d != 1)

60 
	`∑nic
("bad diskÇumber");

61 
diskno
 = 
d
;

62 
	}
}

66 
	$ide_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
)

68 
r
;

70 
	`as£π
(
n£cs
 <= 256);

73 
	`ide_waô_ªady
(0);

75 
	`outb
(0x1F2, 
n£cs
);

76 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

77 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

78 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

79 
	`outb
(0x1F6, 0xE0 | ((
diskno
&1)<<4Ë| ((
£˙o
>>24)&0x0F));

80 
	`outb
(0x1F7, 0x20);

82 ; 
n£cs
 > 0;Ç£cs--, 
d°
 +
SECTSIZE
) {

83 i‡((
r
 = 
	`ide_waô_ªady
(1)) < 0)

84  
r
;

85 
	`ösw
(0x1F0, 
d°
, 
SECTSIZE
/2);

89 
	}
}

92 
	$ide_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
)

94 
r
;

96 
	`as£π
(
n£cs
 <= 256);

99 
	`ide_waô_ªady
(0);

101 
	`outb
(0x1F2, 
n£cs
);

102 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

103 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

104 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

105 
	`outb
(0x1F6, 0xE0 | ((
diskno
&1)<<4Ë| ((
£˙o
>>24)&0x0F));

106 
	`outb
(0x1F7, 0x30);

108 ; 
n£cs
 > 0;Ç£cs--, 
§c
 +
SECTSIZE
) {

109 i‡((
r
 = 
	`ide_waô_ªady
(1)) < 0)

110  
r
;

111 
	`outsw
(0x1F0, 
§c
, 
SECTSIZE
/2);

115 
	}
}

	@fs/serv.c

7 
	~<öc/x86.h
>

8 
	~<öc/°rög.h
>

10 
	~"fs.h
"

13 
	#debug
 0

	)

33 
	sO≥nFûe
 {

34 
uöt32_t
 
	mo_fûeid
;

35 
Fûe
 *
	mo_fûe
;

36 
	mo_mode
;

37 
Fd
 *
	mo_fd
;

41 
	#MAXOPEN
 1024

	)

42 
	#FILEVA
 0xD0000000

	)

45 
O≥nFûe
 
	g›íèb
[
MAXOPEN
] = {

50 
Fsùc
 *
	gf§eq
 = (Fsipc *)0x0ffff000;

53 
	$£rve_öô
()

55 
i
;

56 
uöçå_t
 
va
 = 
FILEVA
;

57 
i
 = 0; i < 
MAXOPEN
; i++) {

58 
›íèb
[
i
].
o_fûeid
 = i;

59 
›íèb
[
i
].
o_fd
 = (
Fd
*Ë
va
;

60 
va
 +
PGSIZE
;

62 
	}
}

66 
	$›ífûe_Æloc
(
O≥nFûe
 **
o
)

68 
i
, 
r
;

71 
i
 = 0; i < 
MAXOPEN
; i++) {

72 
	`∑gîef
(
›íèb
[
i
].
o_fd
)) {

75 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
›íèb
[
i
].
o_fd
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

76  
r
;

78 #ifde‡
VMM_GUEST


79 
›íèb
[
i
].
o_fûeid
 +
MAXOPEN
;

80 *
o
 = &
›íèb
[
i
];

81 
	`mem£t
(
›íèb
[
i
].
o_fd
, 0, 
PGSIZE
);

82  (*
o
)->
o_fûeid
;

90 #ifde‡
VMM_GUEST


91 i‡((
uöt64_t
Ë
›íèb
[
i
].
o_fd
 !
	`gë_ho°_fd
()) {

95 
›íèb
[
i
].
o_fûeid
 +
MAXOPEN
;

96 *
o
 = &
›íèb
[
i
];

97 
	`mem£t
(
›íèb
[
i
].
o_fd
, 0, 
PGSIZE
);

98  (*
o
)->
o_fûeid
;

100 #ifde‡
VMM_GUEST


106  -
E_MAX_OPEN
;

107 
	}
}

111 
	$›ífûe_lookup
(
ívid_t
 
ívid
, 
uöt32_t
 
fûeid
, 
O≥nFûe
 **
po
)

113 
O≥nFûe
 *
o
;

115 
o
 = &
›íèb
[
fûeid
 % 
MAXOPEN
];

116 i‡(
	`∑gîef
(
o
->
o_fd
Ë=1 || o->
o_fûeid
 !
fûeid
)

117  -
E_INVAL
;

118 *
po
 = 
o
;

120 
	}
}

126 
	$£rve_›í
(
ívid_t
 
ívid
, 
F§eq_›í
 *
ªq
,

127 **
pg_°‹e
, *
≥rm_°‹e
)

129 
∑th
[
MAXPATHLEN
];

130 
Fûe
 *
f
;

131 
fûeid
;

132 
r
;

133 
O≥nFûe
 *
o
;

135 i‡(
debug
)

136 
	`˝rötf
("£rve_›í %08x %†0x%x\n", 
ívid
, 
ªq
->
ªq_∑th
,Ñeq->
ªq_omode
);

139 
	`memmove
(
∑th
, 
ªq
->
ªq_∑th
, 
MAXPATHLEN
);

140 
∑th
[
MAXPATHLEN
-1] = 0;

143 i‡((
r
 = 
	`›ífûe_Æloc
(&
o
)) < 0) {

144 i‡(
debug
)

145 
	`˝rötf
("›ífûe_Ælo¯Áûed: %e", 
r
);

146  
r
;

148 
fûeid
 = 
r
;

151 i‡(
ªq
->
ªq_omode
 & 
O_CREAT
) {

152 i‡((
r
 = 
	`fûe_¸óã
(
∑th
, &
f
)) < 0) {

153 i‡(!(
ªq
->
ªq_omode
 & 
O_EXCL
Ë&& 
r
 =-
E_FILE_EXISTS
)

154 
åy_›í
;

155 i‡(
debug
)

156 
	`˝rötf
("fûe_¸óã faûed: %e", 
r
);

157  
r
;

160 
åy_›í
:

161 i‡((
r
 = 
	`fûe_›í
(
∑th
, &
f
)) < 0) {

162 i‡(
debug
)

163 
	`˝rötf
("fûe_›í faûed: %e", 
r
);

164  
r
;

169 i‡(
ªq
->
ªq_omode
 & 
O_TRUNC
) {

170 i‡((
r
 = 
	`fûe_£t_size
(
f
, 0)) < 0) {

171 i‡(
debug
)

172 
	`˝rötf
("fûe_£t_sizêÁûed: %e", 
r
);

173  
r
;

178 
o
->
o_fûe
 = 
f
;

181 
o
->
o_fd
->
fd_fûe
.
id
 = o->
o_fûeid
;

182 
o
->
o_fd
->
fd_omode
 = 
ªq
->
ªq_omode
 & 
O_ACCMODE
;

183 
o
->
o_fd
->
fd_dev_id
 = 
devfûe
.
dev_id
;

184 
o
->
o_mode
 = 
ªq
->
ªq_omode
;

186 i‡(
debug
)

187 
	`˝rötf
("£ndög suc˚ss,Öagê%08x\n", (
uöçå_t
Ë
o
->
o_fd
);

191 *
pg_°‹e
 = 
o
->
o_fd
;

192 *
≥rm_°‹e
 = 
PTE_P
|
PTE_U
|
PTE_W
|
PTE_SHARE
;

195 
	}
}

200 
	$£rve_£t_size
(
ívid_t
 
ívid
, 
F§eq_£t_size
 *
ªq
)

202 
O≥nFûe
 *
o
;

203 
r
;

205 i‡(
debug
)

206 
	`˝rötf
("£rve_£t_sizê%08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_size
);

213 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

214  
r
;

218  
	`fûe_£t_size
(
o
->
o_fûe
, 
ªq
->
ªq_size
);

219 
	}
}

226 
	$£rve_ªad
(
ívid_t
 
ívid
, 
Fsùc
 *
ùc
)

228 
F§eq_ªad
 *
ªq
 = &
ùc
->
ªad
;

229 
F§ë_ªad
 *
ªt
 = &
ùc
->
ªadRë
;

231 i‡(
debug
)

232 
	`˝rötf
("£rve_ªad %08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_n
);

241 
O≥nFûe
 *
o
;

242 
r
;

244 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

245  
r
;

247 i‡((
r
 = 
	`fûe_ªad
(
o
->
o_fûe
, 
ªt
->
ªt_buf
,

248 
	`MIN
(
ªq
->
ªq_n
,  
ªt
->
ªt_buf
),

249 
o
->
o_fd
->
fd_off£t
)) < 0)

250  
r
;

252 
o
->
o_fd
->
fd_off£t
 +
r
;

253  
r
;

255 
	}
}

263 
	$£rve_wrôe
(
ívid_t
 
ívid
, 
F§eq_wrôe
 *
ªq
)

265 i‡(
debug
)

266 
	`˝rötf
("£rve_wrôê%08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_n
);

269 
O≥nFûe
 *
o
;

270 
r
;

272 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

273  
r
;

275 i‡(
ªq
->
ªq_n
 > ‘eq->
ªq_buf
))

276  -
E_INVAL
;

278 i‡((
r
 = 
	`fûe_wrôe
(
o
->
o_fûe
, 
ªq
->
ªq_buf
,Ñeq->
ªq_n
, o->
o_fd
->
fd_off£t
)) < 0)

279  
r
;

281 
o
->
o_fd
->
fd_off£t
 +
r
;

282  
r
;

284 
	}
}

289 
	$£rve_°©
(
ívid_t
 
ívid
, 
Fsùc
 *
ùc
)

291 
F§eq_°©
 *
ªq
 = &
ùc
->
°©
;

292 
F§ë_°©
 *
ªt
 = &
ùc
->
°©Rë
;

293 
O≥nFûe
 *
o
;

294 
r
;

296 i‡(
debug
)

297 
	`˝rötf
("£rve_°© %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
);

299 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

300  
r
;

302 
	`°r˝y
(
ªt
->
ªt_«me
, 
o
->
o_fûe
->
f_«me
);

303 
ªt
->
ªt_size
 = 
o
->
o_fûe
->
f_size
;

304 
ªt
->
ªt_isdú
 = (
o
->
o_fûe
->
f_ty≥
 =
FTYPE_DIR
);

306 
	}
}

310 
	$£rve_Êush
(
ívid_t
 
ívid
, 
F§eq_Êush
 *
ªq
)

312 
O≥nFûe
 *
o
;

313 
r
;

315 i‡(
debug
)

316 
	`˝rötf
("£rve_Êush %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
);

318 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

319  
r
;

320 
	`fûe_Êush
(
o
->
o_fûe
);

322 
	}
}

326 
	$£rve_ªmove
(
ívid_t
 
ívid
, 
F§eq_ªmove
 *
ªq
)

328 
∑th
[
MAXPATHLEN
];

329 
r
;

331 i‡(
debug
)

332 
	`˝rötf
("£rve_ªmovê%08x %s\n", 
ívid
, 
ªq
->
ªq_∑th
);

338 
	`memmove
(
∑th
, 
ªq
->
ªq_∑th
, 
MAXPATHLEN
);

339 
∑th
[
MAXPATHLEN
-1] = 0;

342  
	`fûe_ªmove
(
∑th
);

343 
	}
}

347 
	$£rve_sync
(
ívid_t
 
ívid
, 
Fsùc
 *
ªq
)

349 
	`fs_sync
();

351 
	}
}

355 (*
	tfsh™dÀr
)(
	tívid_t
 
	tívid
, 
	tFsùc
 *
	tªq
);

357 
fsh™dÀr
 
h™dÀrs
[] = {

360 [
FSREQ_READ
] = 
£rve_ªad
,

361 [
FSREQ_STAT
] = 
£rve_°©
,

362 [
FSREQ_FLUSH
] = (
fsh™dÀr
)
£rve_Êush
,

363 [
FSREQ_SET_SIZE
] = (
fsh™dÀr
)
£rve_£t_size
,

364 [
FSREQ_WRITE
] = (
fsh™dÀr
)
£rve_wrôe
,

365 [
FSREQ_REMOVE
] = (
fsh™dÀr
)
£rve_ªmove
,

367 [
FSREQ_SYNC
] = 
£rve_sync


368 
	}
};

369 
	#NHANDLERS
 ((
h™dÀrs
)/(h™dÀrs[0]))

	)

372 
	$£rve
()

374 
uöt32_t
 
ªq
, 
whom
;

375 
≥rm
, 
r
;

376 *
pg
;

379 
≥rm
 = 0;

380 
ªq
 = 
	`ùc_ªcv
((
öt32_t
 *Ë&
whom
, 
f§eq
, &
≥rm
);

381 i‡(
debug
)

382 
	`˝rötf
("fsÑeq %d from %08x [page %08x: %s]\n",

383 
ªq
, 
whom
, 
uv±
[
	`PGNUM
(
f§eq
)], fsreq);

386 i‡(!(
≥rm
 & 
PTE_P
)) {

387 
	`˝rötf
("InvalidÑequest from %08x:ÇoárgumentÖage\n",

388 
whom
);

392 
pg
 = 
NULL
;

393 i‡(
ªq
 =
FSREQ_OPEN
) {

394 
r
 = 
	`£rve_›í
(
whom
, (
F§eq_›í
*)
f§eq
, &
pg
, &
≥rm
);

395 } i‡(
ªq
 < 
NHANDLERS
 && 
h™dÀrs
[req]) {

396 
r
 = 
h™dÀrs
[
ªq
](
whom
, 
f§eq
);

398 
	`˝rötf
("InvÆidÑeque° codê%d from %08x\n", 
ªq
, 
whom
);

399 
r
 = -
E_INVAL
;

401 
	`ùc_£nd
(
whom
, 
r
, 
pg
, 
≥rm
);

402 if(
debug
)

403 
	`˝rötf
("FS: Síàª•⁄£ %dÅÿ%x\n", 
r
, 
whom
);

404 
	`sys_∑ge_unm≠
(0, 
f§eq
);

406 
	}
}

409 
	$umaö
(
¨gc
, **
¨gv
)

411 
	`°©ic_as£π
((
Fûe
) == 256);

412 
bö¨y«me
 = "fs";

413 
	`˝rötf
("FS isÑunning\n");

416 
	`outw
(0x8A00, 0x8A00);

417 
	`˝rötf
("FS can do I/O\n");

419 
	`£rve_öô
();

420 
	`fs_öô
();

422 
	`£rve
();

423 
	}
}

	@fs/test.c

3 
	~<öc/x86.h
>

4 
	~<öc/°rög.h
>

6 
	~"fs.h
"

8 *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

11 
	$fs_ã°
()

13 
Fûe
 *
f
;

14 
r
;

15 *
blk
;

16 
uöt32_t
 *
bôs
;

19 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë
PGSIZE
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

20 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

21 
bôs
 = (
uöt32_t
*Ë
PGSIZE
;

22 
	`memmove
(
bôs
, 
bôm≠
, 
PGSIZE
);

24 i‡((
r
 = 
	`Æloc_block
()) < 0)

25 
	`∑nic
("Æloc_block: %e", 
r
);

27 
	`as£π
(
bôs
[
r
/32] & (1 << (r%32)));

29 
	`as£π
(!(
bôm≠
[
r
/32] & (1 << (r%32))));

30 
	`˝rötf
("alloc_block is good\n");

32 i‡((
r
 = 
	`fûe_›í
("/nŸ-found", &
f
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

33 
	`∑nic
("fûe_›í /nŸ-found: %e", 
r
);

34 i‡(
r
 == 0)

35 
	`∑nic
("file_open /not-found succeeded!");

36 i‡((
r
 = 
	`fûe_›í
("/√wmŸd", &
f
)) < 0)

37 
	`∑nic
("fûe_›í /√wmŸd: %e", 
r
);

38 
	`˝rötf
("file_open is good\n");

40 i‡((
r
 = 
	`fûe_gë_block
(
f
, 0, &
blk
)) < 0)

41 
	`∑nic
("fûe_gë_block: %e", 
r
);

42 i‡(
	`°rcmp
(
blk
, 
msg
) != 0)

43 
	`∑nic
("file_get_blockÑeturned wrong data");

44 
	`˝rötf
("file_get_block is good\n");

46 *(vﬁ©ûê*)
blk
 = *(volatile *)blk;

47 
	`as£π
((
uv±
[
	`PGNUM
(
blk
)] & 
PTE_D
));

48 
	`fûe_Êush
(
f
);

49 
	`as£π
(!(
uv±
[
	`PGNUM
(
blk
)] & 
PTE_D
));

50 
	`˝rötf
("file_flush is good\n");

52 i‡((
r
 = 
	`fûe_£t_size
(
f
, 0)) < 0)

53 
	`∑nic
("fûe_£t_size: %e", 
r
);

54 
	`as£π
(
f
->
f_dúe˘
[0] == 0);

55 
	`as£π
(!(
uv±
[
	`PGNUM
(
f
)] & 
PTE_D
));

56 
	`˝rötf
("file_truncate is good\n");

58 i‡((
r
 = 
	`fûe_£t_size
(
f
, 
	`°æí
(
msg
))) < 0)

59 
	`∑nic
("fûe_£t_sizê2: %e", 
r
);

60 
	`as£π
(!(
uv±
[
	`PGNUM
(
f
)] & 
PTE_D
));

61 i‡((
r
 = 
	`fûe_gë_block
(
f
, 0, &
blk
)) < 0)

62 
	`∑nic
("fûe_gë_block 2: %e", 
r
);

63 
	`°r˝y
(
blk
, 
msg
);

64 
	`as£π
((
uv±
[
	`PGNUM
(
blk
)] & 
PTE_D
));

65 
	`fûe_Êush
(
f
);

66 
	`as£π
(!(
uv±
[
	`PGNUM
(
blk
)] & 
PTE_D
));

67 
	`as£π
(!(
uv±
[
	`PGNUM
(
f
)] & 
PTE_D
));

68 
	`˝rötf
("fileÑewrite is good\n");

69 
	}
}

	@fs/vmx_host.c

2 #ifde‡
VMM_GUEST


5 
	~"fs.h
"

7 
	~<öc/vmx.h
>

8 
	~<öc/fs.h
>

9 
	~<öc/lib.h
>

11 
	#HOST_FS_FILE
 "/vmm/fs.img"

	)

13 
Fd
 *
	gho°_fd
;

14 
Fsùc
 
ho°_fsùcbuf
 
__©åibuã__
((
Æig√d
(
PGSIZE
)));

17 
	$ho°_fsùc
(
ty≥
, *
d°va
)

19 
	`ùc_ho°_£nd
(
VMX_HOST_FS_ENV
, 
ty≥
, &
ho°_fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

20  
	`ùc_ho°_ªcv
(
d°va
);

21 
	}
}

24 
uöt64_t


25 
	$gë_ho°_fd
()

27  (
uöt64_t
Ë
ho°_fd
;

28 
	}
}

31 
	$ho°_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
)

33 
r
, 
ªad
 = 0;

35 if(
ho°_fd
->
fd_fûe
.
id
 == 0) {

36 
	`ho°_ùc_öô
();

39 
ho°_fd
->
fd_off£t
 = 
£˙o
 * 
SECTSIZE
;

41 ; 
n£cs
 > 0;Çsecs-=2) {

43 
ho°_fsùcbuf
.
ªad
.
ªq_fûeid
 = 
ho°_fd
->
fd_fûe
.
id
;

44 
ho°_fsùcbuf
.
ªad
.
ªq_n
 = 
SECTSIZE
 * 2;

45 i‡((
r
 = 
	`ho°_fsùc
(
FSREQ_READ
, 
NULL
)) < 0)

46  
r
;

48 
	`memmove
(
d°
+
ªad
, &
ho°_fsùcbuf
, 
r
);

49 
ªad
 +
SECTSIZE
 * 2;

53 
	}
}

56 
	$ho°_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
)

58 
r
, 
wrôãn
 = 0;

60 if(
ho°_fd
->
fd_fûe
.
id
 == 0) {

61 
	`ho°_ùc_öô
();

64 
ho°_fd
->
fd_off£t
 = 
£˙o
 * 
SECTSIZE
;

65 ; 
n£cs
 > 0;Çsecs-=2) {

66 
ho°_fsùcbuf
.
wrôe
.
ªq_fûeid
 = 
ho°_fd
->
fd_fûe
.
id
;

67 
ho°_fsùcbuf
.
wrôe
.
ªq_n
 = 
SECTSIZE
 * 2;

68 
	`memmove
(
ho°_fsùcbuf
.
wrôe
.
ªq_buf
, 
§c
+
wrôãn
, 
SECTSIZE
 * 2);

69 i‡((
r
 = 
	`ho°_fsùc
(
FSREQ_WRITE
, 
NULL
)) < 0)

70  
r
;

71 
wrôãn
 +
SECTSIZE
 * 2;

74 
	}
}

77 
	$ho°_ùc_öô
()

79 
r
;

80 
vmdisk_numbî
;

81 
∑th_°rög
[50];

82 i‡((
r
 = 
	`fd_Æloc
(&
ho°_fd
)) < 0)

83 
	`∑nic
("Couldn'tállocateán fd!");

84 
	`asm
("vmˇŒ":"˜"(
vmdisk_numbî
): "0"(
VMX_VMCALL_GETDISKIMGNUM
));

85 
	`¢¥ötf
(
∑th_°rög
, 50, "/vmm/fs%d.img", 
vmdisk_numbî
);

86 
	`°r˝y
(
ho°_fsùcbuf
.
›í
.
ªq_∑th
, 
∑th_°rög
);

87 
ho°_fsùcbuf
.
›í
.
ªq_omode
 = 
O_RDWR
;

89 i‡((
r
 = 
	`ho°_fsùc
(
FSREQ_OPEN
, 
ho°_fd
)) < 0) {

90 
	`fd_˛o£
(
ho°_fd
, 0);

91 
	`∑nic
("Couldn't open host file!");

94 
	}
}

	@inc/args.h

2 #i‚de‡
JOS_INC_ARGS_H


3 
	#JOS_INC_ARGS_H


	)

5 
	gArg°©e
;

11 
¨g°¨t
(*
¨gc
, **
¨gv
, 
Arg°©e
 *
¨gs
);

25 
¨g√xt
(
Arg°©e
 *);

32 *
¨g√xtvÆue
(
Arg°©e
 *);

37 *
¨gvÆue
(
Arg°©e
 *);

76 
	sArg°©e
 {

77 *
	m¨gc
;

78 c⁄° **
	m¨gv
;

79 c⁄° *
	mcuørg
;

80 c⁄° *
	m¨gvÆue
;

	@inc/assert.h

3 #i‚de‡
JOS_INC_ASSERT_H


4 
	#JOS_INC_ASSERT_H


	)

6 
	~<öc/°dio.h
>

8 
_w¨n
(const *, , const *, ...);

9 
	$_∑nic
(c⁄° *, , c⁄° *, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
	#w¨n
(...Ë
	`_w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...Ë
	`_∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

14 
	#as£π
(
x
) \

15 dÿ{ i‡(!(
x
)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

18 
	#°©ic_as£π
(
x
ËxË0: (x):

	)

	@inc/elf.h

1 #i‚de‡
JOS_INC_ELF_H


2 
	#JOS_INC_ELF_H


	)

4 
	#ELF_MAGIC
 0x464C457FU

	)

6 
	sElf
 {

7 
uöt32_t
 
	me_magic
;

8 
uöt8_t
 
	me_ñf
[12];

9 
uöt16_t
 
	me_ty≥
;

10 
uöt16_t
 
	me_machöe
;

11 
uöt32_t
 
	me_vîsi⁄
;

12 
uöt64_t
 
	me_íåy
;

13 
uöt64_t
 
	me_phoff
;

14 
uöt64_t
 
	me_shoff
;

15 
uöt32_t
 
	me_Êags
;

16 
uöt16_t
 
	me_ehsize
;

17 
uöt16_t
 
	me_phítsize
;

18 
uöt16_t
 
	me_phnum
;

19 
uöt16_t
 
	me_shítsize
;

20 
uöt16_t
 
	me_shnum
;

21 
uöt16_t
 
	me_sh°∫dx
;

24 
	sProghdr
 {

25 
uöt32_t
 
	mp_ty≥
;

26 
uöt32_t
 
	mp_Êags
;

27 
uöt64_t
 
	mp_off£t
;

28 
uöt64_t
 
	mp_va
;

29 
uöt64_t
 
	mp_∑
;

30 
uöt64_t
 
	mp_fûesz
;

31 
uöt64_t
 
	mp_memsz
;

32 
uöt64_t
 
	mp_Æign
;

35 
	sSe˘hdr
 {

36 
uöt32_t
 
	msh_«me
;

37 
uöt32_t
 
	msh_ty≥
;

38 
uöt64_t
 
	msh_Êags
;

39 
uöt64_t
 
	msh_addr
;

40 
uöt64_t
 
	msh_off£t
;

41 
uöt64_t
 
	msh_size
;

42 
uöt32_t
 
	msh_lök
;

43 
uöt32_t
 
	msh_öfo
;

44 
uöt64_t
 
	msh_addølign
;

45 
uöt64_t
 
	msh_ítsize
;

50 
	#ELF_PROG_LOAD
 1

	)

53 
	#ELF_PROG_FLAG_EXEC
 1

	)

54 
	#ELF_PROG_FLAG_WRITE
 2

	)

55 
	#ELF_PROG_FLAG_READ
 4

	)

58 
	#ELF_SHT_NULL
 0

	)

59 
	#ELF_SHT_PROGBITS
 1

	)

60 
	#ELF_SHT_SYMTAB
 2

	)

61 
	#ELF_SHT_STRTAB
 3

	)

64 
	#ELF_SHN_UNDEF
 0

	)

	@inc/env.h

4 #i‚de‡
JOS_INC_ENV_H


5 
	#JOS_INC_ENV_H


	)

7 
	~<öc/ty≥s.h
>

8 
	~<öc/å≠.h
>

9 
	~<öc/memœyout.h
>

11 
	~<öc/vmx.h
>

14 
öt32_t
 
	tívid_t
;

15 
pml4e_t
 *
boŸ_pml4e
;

16 
phyßddr_t
 
boŸ_¸3
;

33 
	#LOG2NENV
 10

	)

34 
	#NENV
 (1 << 
LOG2NENV
)

	)

35 
	#ENVX
(
ívid
Ë(”nvidË& (
NENV
 - 1))

	)

39 
	mENV_FREE
 = 0,

40 
	mENV_DYING
,

41 
	mENV_RUNNABLE
,

42 
	mENV_RUNNING
,

43 
	mENV_NOT_RUNNABLE


47 
	eEnvTy≥
 {

48 
	mENV_TYPE_USER
 = 0,

50 
	mENV_TYPE_FS
,

52 
	mENV_TYPE_NS
,

54 
	mENV_TYPE_GUEST
,

55 
	mENV_TYPE_IDLE
,

59 
	sEnv
 {

60 
Tøp‰ame
 
	mív_tf
;

61 
Env
 *
	mív_lök
;

62 
ívid_t
 
	mív_id
;

63 
ívid_t
 
	mív_∑ª¡_id
;

64 
EnvTy≥
 
	mív_ty≥
;

65 
	mív_°©us
;

66 
uöt32_t
 
	mív_runs
;

68 
	mív_˝unum
;

72 
pml4e_t
 *
	mív_pml4e
;

74 
phyßddr_t
 
	mív_¸3
;

78 *
	mív_pgÁu…_upˇŒ
;

81 
boﬁ
 
	mív_ùc_ªcvög
;

82 *
	mív_ùc_d°va
;

83 
uöt32_t
 
	mív_ùc_vÆue
;

84 
ívid_t
 
	mív_ùc_‰om
;

85 
	mív_ùc_≥rm
;

87 
uöt8_t
 *
	mñf
;

89 
VmxGue°Info
 
	mív_vmxöfo
;

	@inc/ept.h

2 #i‚de‡
JOS_INC_EPT_H


3 
	#JOS_INC_EPT_H


	)

5 
	#__EPTE_READ
 0x01

	)

6 
	#__EPTE_WRITE
 0x02

	)

7 
	#__EPTE_EXEC
 0x04

	)

8 
	#__EPTE_IPAT
 0x40

	)

9 
	#__EPTE_SZ
 0x80

	)

10 
	#__EPTE_A
 0x100

	)

11 
	#__EPTE_D
 0x200

	)

12 
	#__EPTE_TYPE
(
n
Ë((“Ë& 0x7Ë<< 3)

	)

15 
	mEPTE_TYPE_UC
 = 0,

16 
	mEPTE_TYPE_WC
 = 1,

17 
	mEPTE_TYPE_WT
 = 4,

18 
	mEPTE_TYPE_WP
 = 5,

19 
	mEPTE_TYPE_WB
 = 6,

22 
	#__EPTE_NONE
 0

	)

23 
	#__EPTE_FULL
 (
__EPTE_READ
 | 
__EPTE_WRITE
 | 
__EPTE_EXEC
)

	)

	@inc/error.h

4 #i‚de‡
JOS_INC_ERROR_H


5 
	#JOS_INC_ERROR_H


	)

9 
	mE_UNSPECIFIED
 = 1,

10 
	mE_BAD_ENV
 = 2,

12 
	mE_INVAL
 = 3,

13 
	mE_NO_MEM
 = 4,

14 
	mE_NO_FREE_ENV
 = 5,

16 
	mE_FAULT
 = 6,

17 
	mE_NO_SYS
 = 7,

20 
	mE_IPC_NOT_RECV
 = 8,

21 
	mE_EOF
 = 9,

25 
	mE_NO_DISK
 = 10,

26 
	mE_MAX_OPEN
 = 11,

27 
	mE_NOT_FOUND
 = 12,

28 
	mE_BAD_PATH
 = 13,

29 
	mE_FILE_EXISTS
 = 14,

30 
	mE_NOT_EXEC
 = 15,

31 
	mE_NOT_SUPP
 = 16,

34 
	mE_NO_VMX
 = 17,

36 
	mE_NO_EPT
 = 18,

37 
	mE_VMX_ON
 = 19,

38 
	mE_VMCS_INIT
 = 20,

39 
	mE_NO_ENT
 = 21,

40 
	mMAXERROR


	@inc/fd.h

6 #i‚de‡
JOS_INC_FD_H


7 
	#JOS_INC_FD_H


	)

9 
	~<öc/ty≥s.h
>

10 
	~<öc/fs.h
>

12 
	gFd
;

13 
	gSèt
;

14 
	gDev
;

17 
	sDev
 {

18 
	mdev_id
;

19 c⁄° *
	mdev_«me
;

20 
ssize_t
 (*
dev_ªad
)(
Fd
 *
	mfd
, *
	mbuf
, 
size_t
 
	mÀn
);

21 
ssize_t
 (*
dev_wrôe
)(
Fd
 *
	mfd
, c⁄° *
	mbuf
, 
size_t
 
	mÀn
);

22 (*
	mdev_˛o£
)(
Fd
 *
	mfd
);

23 (*
	mdev_°©
)(
Fd
 *
	mfd
, 
Sèt
 *
	m°©
);

24 (*
	mdev_åunc
)(
Fd
 *
	mfd
, 
off_t
 
	mÀngth
);

27 
	sFdFûe
 {

28 
	mid
;

32 
	sFdSock
 {

33 
	msockid
;

37 
	sFd
 {

38 
	mfd_dev_id
;

39 
off_t
 
	mfd_off£t
;

40 
	mfd_omode
;

43 
FdFûe
 
	mfd_fûe
;

46 
FdSock
 
	mfd_sock
;

51 
	sSèt
 {

52 
	m°_«me
[
MAXNAMELEN
];

53 
off_t
 
	m°_size
;

54 
	m°_isdú
;

55 
Dev
 *
	m°_dev
;

58 * 
fd2d©a
(
Fd
 *
fd
);

59 
uöt64_t
 
fd2num
(
Fd
 *
fd
);

60 
fd_Æloc
(
Fd
 **
fd_°‹e
);

61 
fd_˛o£
(
Fd
 *
fd
, 
boﬁ
 
mu°_exi°
);

62 
fd_lookup
(
fdnum
, 
Fd
 **
fd_°‹e
);

63 
dev_lookup
(
devid
, 
Dev
 **
dev_°‹e
);

65 
Dev
 
devfûe
;

67 
Dev
 
devsock
;

69 
Dev
 
devc⁄s
;

70 
Dev
 
devpùe
;

	@inc/fs.h

4 #i‚de‡
JOS_INC_FS_H


5 
	#JOS_INC_FS_H


	)

7 
	~<öc/ty≥s.h
>

8 
	~<öc/mmu.h
>

13 
	#BLKSIZE
 
PGSIZE


	)

14 
	#BLKBITSIZE
 (
BLKSIZE
 * 8)

	)

18 
	#MAXNAMELEN
 128

	)

21 
	#MAXPATHLEN
 1024

	)

24 
	#NDIRECT
 10

	)

26 
	#NINDIRECT
 (
BLKSIZE
 / 4)

	)

28 
	#MAXFILESIZE
 ((
NDIRECT
 + 
NINDIRECT
Ë* 
BLKSIZE
)

	)

30 
	sFûe
 {

31 
	mf_«me
[
MAXNAMELEN
];

32 
off_t
 
	mf_size
;

33 
uöt32_t
 
	mf_ty≥
;

37 
uöt32_t
 
	mf_dúe˘
[
NDIRECT
];

38 
uöt32_t
 
	mf_ödúe˘
;

42 
uöt8_t
 
	mf_∑d
[256 - 
MAXNAMELEN
 - 8 - 4*
NDIRECT
 - 4];

43 } 
__©åibuã__
((
∑cked
));

46 
	#BLKFILES
 (
BLKSIZE
 / (
Fûe
))

	)

49 
	#FTYPE_REG
 0

50 
	#FTYPE_DIR
 1

51 

	)

55 
	#FS_MAGIC
 0x4A0530AE

56 

	)

57 
	sSu≥r
 {

58 
uöt32_t
 
	ms_magic
;

59 
uöt32_t
 
	ms_nblocks
;

60 
Fûe
 
	ms_roŸ
;

65 
	mFSREQ_OPEN
 = 1,

66 
	mFSREQ_SET_SIZE
,

68 
	mFSREQ_READ
,

69 
	mFSREQ_WRITE
,

71 
	mFSREQ_STAT
,

72 
	mFSREQ_FLUSH
,

73 
	mFSREQ_REMOVE
,

75 
	mFSREQ_SYNC


79 
	uFsùc
 {

80 
	sF§eq_›í
 {

81 
	mªq_∑th
[
MAXPATHLEN
];

82 
	mªq_omode
;

83 } 
	m›í
;

84 
	sF§eq_£t_size
 {

85 
	mªq_fûeid
;

86 
off_t
 
	mªq_size
;

87 } 
	m£t_size
;

88 
	sF§eq_ªad
 {

89 
	mªq_fûeid
;

90 
size_t
 
	mªq_n
;

91 } 
	mªad
;

92 
	sF§ë_ªad
 {

93 
	mªt_buf
[
PGSIZE
];

94 } 
	mªadRë
;

95 
	sF§eq_wrôe
 {

96 
	mªq_fûeid
;

97 
size_t
 
	mªq_n
;

98 
	mªq_buf
[
PGSIZE
 - ((Ë+ (
size_t
))];

99 } 
	mwrôe
;

100 
	sF§eq_°©
 {

101 
	mªq_fûeid
;

102 } 
	m°©
;

103 
	sF§ë_°©
 {

104 
	mªt_«me
[
MAXNAMELEN
];

105 
off_t
 
	mªt_size
;

106 
	mªt_isdú
;

107 } 
	m°©Rë
;

108 
	sF§eq_Êush
 {

109 
	mªq_fûeid
;

110 } 
	mÊush
;

111 
	sF§eq_ªmove
 {

112 
	mªq_∑th
[
MAXPATHLEN
];

113 } 
	mªmove
;

117 
	m_∑d
[
PGSIZE
];

	@inc/kbdreg.h

1 #i‚de‡
JOS_KBDREG_H


2 
	#JOS_KBDREG_H


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

	)

20 
	#KBS_DIB
 0x01

	)

21 
	#KBS_IBF
 0x02

	)

22 
	#KBS_WARM
 0x04

	)

23 
	#KBS_OCMD
 0x08

	)

24 
	#KBS_NOSEC
 0x10

	)

25 
	#KBS_TERR
 0x20

	)

26 
	#KBS_RERR
 0x40

	)

27 
	#KBS_PERR
 0x80

	)

29 
	#KBCMDP
 0x64

	)

30 
	#KBC_RAMREAD
 0x20

	)

31 
	#KBC_RAMWRITE
 0x60

	)

32 
	#KBC_AUXDISABLE
 0xa7

	)

33 
	#KBC_AUXENABLE
 0xa8

	)

34 
	#KBC_AUXTEST
 0xa9

	)

35 
	#KBC_KBDECHO
 0xd2

	)

36 
	#KBC_AUXECHO
 0xd3

	)

37 
	#KBC_AUXWRITE
 0xd4

	)

38 
	#KBC_SELFTEST
 0xØ

	)

39 
	#KBC_KBDTEST
 0xab

	)

40 
	#KBC_KBDDISABLE
 0xad

	)

41 
	#KBC_KBDENABLE
 0x´

	)

42 
	#KBC_PULSE0
 0x„

	)

43 
	#KBC_PULSE1
 0xfd

	)

44 
	#KBC_PULSE2
 0xfb

	)

45 
	#KBC_PULSE3
 0xf7

	)

47 
	#KBDATAP
 0x60

	)

48 
	#KBOUTP
 0x60

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

	)

54 
	#KC8_MDISABLE
 0x20

	)

55 
	#KC8_KDISABLE
 0x10

	)

56 
	#KC8_IGNSEC
 0x08

	)

57 
	#KC8_CPU
 0x04

	)

58 
	#KC8_MENABLE
 0x02

	)

59 
	#KC8_KENABLE
 0x01

	)

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

	)

64 
	#KBC_RESEND
 0xFE

	)

65 
	#KBC_SETDEFAULT
 0xF6

	)

66 
	#KBC_DISABLE
 0xF5

	)

67 
	#KBC_ENABLE
 0xF4

	)

68 
	#KBC_TYPEMATIC
 0xF3

	)

69 
	#KBC_SETTABLE
 0xF0

	)

70 
	#KBC_MODEIND
 0xED

	)

71 
	#KBC_ECHO
 0xEE

	)

74 
	#KBR_EXTENDED
 0xE0

	)

75 
	#KBR_RESEND
 0xFE

	)

76 
	#KBR_ACK
 0xFA

	)

77 
	#KBR_OVERRUN
 0x00

	)

78 
	#KBR_FAILURE
 0xFD

	)

79 
	#KBR_BREAK
 0xF0

	)

80 
	#KBR_RSTDONE
 0xAA

	)

81 
	#KBR_ECHO
 0xEE

	)

	@inc/lib.h

8 #i‚de‡
JOS_INC_LIB_H


9 
	#JOS_INC_LIB_H
 1

	)

11 
	~<öc/ty≥s.h
>

12 
	~<öc/°dio.h
>

13 
	~<öc/°d¨g.h
>

14 
	~<öc/°rög.h
>

15 
	~<öc/îr‹.h
>

16 
	~<öc/as£π.h
>

17 
	~<öc/ív.h
>

18 
	~<öc/memœyout.h
>

19 
	~<öc/sysˇŒ.h
>

21 
	~<öc/å≠.h
>

23 
	~<öc/fs.h
>

24 
	~<öc/fd.h
>

25 
	~<öc/¨gs.h
>

27 
	~<öc/mÆloc.h
>

28 
	~<öc/ns.h
>

30 
	~<öc/vmx.h
>

33 
	#USED
(
x
Ë()(x)

	)

36 
umaö
(
¨gc
, **
¨gv
);

39 c⁄° *
bö¨y«me
;

40 c⁄° vﬁ©ûê
Env
 *
thi£nv
;

41 c⁄° vﬁ©ûê
Env
 
ívs
[
NENV
];

42 c⁄° vﬁ©ûê
PageInfo
 
∑ges
[];

45 
exô
();

49 
£t_pgÁu…_h™dÀr
((*
h™dÀr
)(
UTøp‰ame
 *
utf
));

53 * 
	`ªadlöe
(c⁄° *
buf
);

56 
	`sys_˝uts
(c⁄° *
°rög
, 
size_t
 
Àn
);

57 
	`sys_cgëc
();

58 
ívid_t
 
	`sys_gëívid
();

59 
	`sys_ív_de°roy
(
ívid_t
);

61 
	`sys_yõld
();

62 
ívid_t
 
	`sys_exof‹k
();

63 
	`sys_ív_£t_°©us
(
ívid_t
 
ív
, 
°©us
);

65 
	`sys_ív_£t_å≠‰ame
(
ívid_t
 
ív
, 
Tøp‰ame
 *
tf
);

67 
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ív
, *
upˇŒ
);

68 
	`sys_∑ge_Æloc
(
ívid_t
 
ív
, *
pg
, 
≥rm
);

69 
	`sys_∑ge_m≠
(
ívid_t
 
§c_ív
, *
§c_pg
,

70 
ívid_t
 
d°_ív
, *
d°_pg
, 
≥rm
);

71 
	`sys_∑ge_unm≠
(
ívid_t
 
ív
, *
pg
);

72 
	`sys_ùc_åy_£nd
(
ívid_t
 
to_ív
, 
uöt64_t
 
vÆue
, *
pg
, 
≥rm
);

73 
	`sys_ùc_ªcv
(*
rcv_pg
);

75 
	`sys_time_m£c
();

77 
	`sys_√t_å™smô
(c⁄° *
d©a
, 
Àn
);

78 
	`sys_√t_ª˚ive
(*
buf
, 
Àn
);

80 
	`sys_ït_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,Énvid_à
gue°
, * 
gue°_∑
, 
≥rm
);

81 
ívid_t
 
	`sys_ív_mkgue°
(
uöt64_t
 
gphysz
, uöt64_à
gRIP
);

82 #i‚de‡
VMM_GUEST


83 
	`sys_vmx_li°_vms
();

84 
	`sys_vmx_£l_ªsume
(
i
);

85 
	`sys_vmx_gë_vmdisk_numbî
();

86 
	`sys_vmx_ö¸_vmdisk_numbî
();

91 
__ölöe
 
ívid_t
 
	`__©åibuã__
((
Æways_ölöe
))

92 
	$sys_exof‹k
()

94 
ívid_t
 
ªt
;

95 
__asm
 
	`__vﬁ©ûe
("int %2"

96 : "˜" (
ªt
)

97 : "a" (
SYS_exof‹k
),

98 "i" (
T_SYSCALL
)

100  
ªt
;

101 
	}
}

104 
ùc_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆue
, *
pg
, 
≥rm
);

105 
öt32_t
 
ùc_ªcv
(
ívid_t
 *
‰om_ív_°‹e
, *
pg
, *
≥rm_°‹e
);

106 
ívid_t
 
ùc_föd_ív
(
EnvTy≥
 
ty≥
);

109 #ifde‡
VMM_GUEST


110 
ùc_ho°_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆue
, *
pg
, 
≥rm
);

111 
öt32_t
 
ùc_ho°_ªcv
(*
pg
);

116 
	#PTE_SHARE
 0x400

	)

117 
ívid_t
 
f‹k
();

118 
ívid_t
 
sf‹k
();

123 
˛o£
(
fd
);

124 
ssize_t
 
ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
);

125 
ssize_t
 
wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
);

126 
£ek
(
fd
, 
off_t
 
off£t
);

127 
˛o£_Æl
();

128 
ssize_t
 
ªadn
(
fd
, *
buf
, 
size_t
 
nbyãs
);

129 
dup
(
ﬁdfd
, 
√wfd
);

130 
f°©
(
fd
, 
Sèt
 *
°©buf
);

131 
°©
(c⁄° *
∑th
, 
Sèt
 *
°©buf
);

134 
›í
(c⁄° *
∑th
, 
mode
);

135 
·runˇã
(
fd
, 
off_t
 
size
);

136 
ªmove
(c⁄° *
∑th
);

137 
sync
();

139 
c›y
(*
§c
, *
de°
);

144 
∑gîef
(*
addr
);

148 
ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

149 
böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

150 
shutdown
(
s
, 
how
);

151 
c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

152 
li°í
(
s
, 
backlog
);

153 
sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

156 
nsùc_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

157 
nsùc_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

158 
nsùc_shutdown
(
s
, 
how
);

159 
nsùc_˛o£
(
s
);

160 
nsùc_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

161 
nsùc_li°í
(
s
, 
backlog
);

162 
nsùc_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
);

163 
nsùc_£nd
(
s
, c⁄° *
buf
, 
size
, 
Êags
);

164 
nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

168 
ívid_t
 
•awn
(c⁄° *
¥ogøm
, c⁄° **
¨gv
);

169 
ívid_t
 
•aw∆
(c⁄° *
¥ogøm
, c⁄° *
¨g0
, ...);

174 
˝utch¨
(
c
);

175 
gëch¨
();

176 
isc⁄s
(
fd
);

177 
›íc⁄s
();

180 
pùe
(
pùefds
[2]);

181 
pùeis˛o£d
(
pùefd
);

184 
waô
(
ívid_t
 
ív
);

188 
	#O_RDONLY
 0x0000

	)

189 
	#O_WRONLY
 0x0001

	)

190 
	#O_RDWR
 0x0002

	)

191 
	#O_ACCMODE
 0x0003

	)

193 
	#O_CREAT
 0x0100

	)

194 
	#O_TRUNC
 0x0200

	)

195 
	#O_EXCL
 0x0400

	)

196 
	#O_MKDIR
 0x0800

	)

	@inc/malloc.h

2 #i‚de‡
JOS_INC_MALLOC_H


3 
	#JOS_INC_MALLOC_H
 1

	)

5 *
mÆloc
(
size_t
 
size
);

6 
‰ì
(*
addr
);

	@inc/memlayout.h

2 #i‚de‡
JOS_INC_MEMLAYOUT_H


3 
	#JOS_INC_MEMLAYOUT_H


	)

5 #i‚de‡
__ASSEMBLER__


6 
	~<öc/ty≥s.h
>

7 
	~<öc/mmu.h
>

8 
	~<öc/queue.h
>

17 
	#GD_KT
 0x08

18 
	#GD_KD
 0x10

19 
	#GD_UT
 0x18

20 
	#GD_UD
 0x20

21 
	#GD_TSS0
 0x28

22 

	)

91 
	#KERNBASE
 0x8004000000

	)

96 
	#IOPHYSMEM
 0x0A0000

	)

97 
	#EXTPHYSMEM
 0x100000

	)

100 
	#KSTACKTOP
 
KERNBASE


	)

101 
	#KSTKSIZE
 (16*
PGSIZE
)

102 
	#KSTKGAP
 (8*
PGSIZE
)

103 

	)

105 
	#MMIOLIM
 (
KSTACKTOP
 - 
PTSIZE
)

	)

106 
	#MMIOBASE
 (
MMIOLIM
 - 
PTSIZE
)

	)

108 
	#ULIM
 (
MMIOBASE
)

	)

117 
	#UVPT
 0x10000000000

	)

119 
	#UPAGES
 (
ULIM
 - 25 * 
PTSIZE
)

	)

121 
	#UENVS
 (
UPAGES
 - 
PTSIZE
)

	)

128 
	#UTOP
 
UENVS


	)

131 
	#UXSTACKTOP
 0xef800000

	)

134 
	#USTACKTOP
 (
UXSTACKTOP
 - 2*
PGSIZE
)

	)

137 
	#UTEXT
 (4*
PTSIZE
)

	)

141 
	#UTEMP
 ((*Ë(()(2*
PTSIZE
)))

	)

144 
	#PFTEMP
 (
UTEMP
 + 
PTSIZE
 - 
PGSIZE
)

	)

146 
	#USTABDATA
 (
PTSIZE
)

	)

150 
	#MPENTRY_PADDR
 0x7000

	)

153 #i‚de‡
__ASSEMBLER__


155 
uöt64_t
 
	tpml4e_t
;

156 
uöt64_t
 
	tpd≥_t
;

157 
uöt64_t
 
	t±e_t
;

158 
uöt64_t
 
	tpde_t
;

161 #i‡
JOS_USER


176 vﬁ©ûê
±e_t
 
uv±
[];

177 vﬁ©ûê
pde_t
 
uvpd
[];

178 vﬁ©ûê
pde_t
 
uvpde
[];

179 vﬁ©ûê
pde_t
 
uvpml4e
[];

182 
LIST_HEAD
(
Page_li°
,
Page
);

183 
	$LIST_ENTRY
(
	tPage
Ë
	tPage_LIST_íåy_t
;

194 
	sPageInfo
 {

196 
PageInfo
 *
µ_lök
;

203 
uöt16_t
 
µ_ªf
;

	@inc/mmu.h

1 #i‚de‡
JOS_INC_MMU_H


2 
	#JOS_INC_MMU_H


	)

30 
	#PPN
(
∑
Ë(((
uöçå_t
Ë’a)Ë>> 
PTXSHIFT
)

	)

31 
	#VPN
(
œ
Ë
	`PPN
(la)

32 
	#PGNUM
(
œ
Ë
	`PPN
(la)

33 

	)

35 
	#PDX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
Ë& 0x1FF)

	)

36 
	#VPD
(
œ
Ë(((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
)

37 
	#VPDPE
(
œ
Ë(((
uöçå_t
Ë÷a)Ë>> 
PDPESHIFT
)

	)

38 
	#VPML4E
(
œ
Ë(((
uöçå_t
Ë÷a)Ë>> 
PML4SHIFT
)

	)

40 
	#PML4
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PML4SHIFT
Ë& 0x1FF)

	)

43 
	#PTX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
Ë& 0x1FF)

	)

44 
	#PDPE
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDPESHIFT
Ë& 0x1FF)

	)

48 
	#PGOFF
(
œ
Ë(((
uöçå_t
Ë÷a)Ë& 0xFFF)

	)

51 
	#PGADDR
(
m
,
p
,
d
, 
t
, 
o
Ë((*Ë((mË<< 
PML4SHIFT
| (pË<< 
PDPESHIFT
 | (dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

54 
	#NPMLENTRIES
 512

55 
	#NPDPENTRIES
 512

56 
	#NPDENTRIES
 512

	)

57 
	#NPTENTRIES
 512

	)

59 
	#PGSIZE
 4096

60 
	#PGSHIFT
 12

61 

	)

62 
	#PTSIZE
 (
PGSIZE
*
NPTENTRIES
)

63 
	#PTSHIFT
 21

64 

	)

65 
	#PTXSHIFT
 12

66 
	#PDXSHIFT
 21

67 
	#PDPESHIFT
 30

	)

68 
	#PML4SHIFT
 39

	)

71 
	#PTE_P
 0x001

72 
	#PTE_W
 0x002

73 
	#PTE_U
 0x004

74 
	#PTE_PWT
 0x008

75 
	#PTE_PCD
 0x010

76 
	#PTE_A
 0x020

77 
	#PTE_D
 0x040

78 
	#PTE_PS
 0x080

79 
	#PTE_MBZ
 0x180

80 

	)

83 
	#PTE_AVAIL
 0xE00

84 

	)

86 
	#PTE_SYSCALL
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

89 
	#PTE_USER
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

92 
	#PTE_ADDR
(
±e
Ë((
phyßddr_t
Ë’ãË& ~0xFFF)

	)

95 
	#CR0_PE
 0x00000001

96 
	#CR0_MP
 0x00000002

97 
	#CR0_EM
 0x00000004

98 
	#CR0_TS
 0x00000008

99 
	#CR0_ET
 0x00000010

100 
	#CR0_NE
 0x00000020

101 
	#CR0_WP
 0x00010000

102 
	#CR0_AM
 0x00040000

103 
	#CR0_NW
 0x20000000

104 
	#CR0_CD
 0x40000000

105 
	#CR0_PG
 0x80000000

106 

	)

107 
	#CR4_PCE
 0x00000100

108 
	#CR4_MCE
 0x00000040

109 
	#CR4_PSE
 0x00000010

110 
	#CR4_DE
 0x00000008

111 
	#CR4_TSD
 0x00000004

112 
	#CR4_PVI
 0x00000002

113 
	#CR4_VME
 0x00000001

114 
	#CR4_VMXE
 0x00002000

115 

	)

117 
	#CR4_PAE
 0x00000020

	)

118 
	#EFER_MSR
 0xC0000080

	)

119 
	#EFER_LME
 8

	)

122 
	#FL_CF
 0x00000001

123 
	#FL_PF
 0x00000004

124 
	#FL_AF
 0x00000010

125 
	#FL_ZF
 0x00000040

126 
	#FL_SF
 0x00000080

127 
	#FL_TF
 0x00000100

128 
	#FL_IF
 0x00000200

129 
	#FL_DF
 0x00000400

130 
	#FL_OF
 0x00000800

131 
	#FL_IOPL_MASK
 0x00003000

132 
	#FL_IOPL_0
 0x00000000

133 
	#FL_IOPL_1
 0x00001000

134 
	#FL_IOPL_2
 0x00002000

135 
	#FL_IOPL_3
 0x00003000

136 
	#FL_NT
 0x00004000

137 
	#FL_RF
 0x00010000

138 
	#FL_VM
 0x00020000

139 
	#FL_AC
 0x00040000

140 
	#FL_VIF
 0x00080000

141 
	#FL_VIP
 0x00100000

142 
	#FL_ID
 0x00200000

143 

	)

145 
	#FEC_PR
 0x1

146 
	#FEC_WR
 0x2

147 
	#FEC_U
 0x4

148 

	)

156 #ifde‡
__ASSEMBLER__


161 
	#SEG_NULL
 \

162 .
w‹d
 0, 0; \

163 .
byã
 0, 0, 0, 0

	)

164 
	#SEG
(
ty≥
,
ba£
,
lim
) \

165 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

166 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

167 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

169 
	#SEG64
(
ty≥
,
ba£
,
lim
) \

170 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

171 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

172 (0xA0 | (((
lim
Ë>> 28Ë& 0xF)), (((
ba£
Ë>> 24Ë& 0xff)

	)

174 
	#SEG64USER
(
ty≥
,
ba£
,
lim
) \

175 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

176 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0xf0 | (
ty≥
)), \

177 (0xA0 | (((
lim
Ë>> 28Ë& 0xF)), (((
ba£
Ë>> 24Ë& 0xff)

	)

180 
	~<öc/ty≥s.h
>

183 
	sSegdesc
 {

184 
	msd_lim_15_0
 : 16;

185 
	msd_ba£_15_0
 : 16;

186 
	msd_ba£_23_16
 : 8;

187 
	msd_ty≥
 : 4;

188 
	msd_s
 : 1;

189 
	msd_d∂
 : 2;

190 
	msd_p
 : 1;

191 
	msd_lim_19_16
 : 4;

192 
	msd_avl
 : 1;

193 
	msd_l
 : 1;

194 
	msd_db
 : 1;

195 
	msd_g
 : 1;

196 
	msd_ba£_31_24
 : 8;

198 
	sSy°emSegdesc64
{

199 
	msd_lim_15_0
 : 16;

200 
	msd_ba£_15_0
 : 16;

201 
	msd_ba£_23_16
 : 8;

202 
	msd_ty≥
 : 4;

203 
	msd_s
 : 1;

204 
	msd_d∂
 : 2;

205 
	msd_p
 : 1;

206 
	msd_lim_19_16
 : 4;

207 
	msd_avl
 : 1;

208 
	msd_rsv1
 : 2;

209 
	msd_g
 : 1;

210 
	msd_ba£_31_24
 : 8;

211 
uöt32_t
 
	msd_ba£_63_32
;

212 
	msd_ªs1
 : 8;

213 
	msd_˛ór
 : 8;

214 
	msd_ªs2
 : 16;

217 
	#SEG_NULL
 (
Segdesc
){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	)

219 
	#SEG_FAULT
 (
Segdesc
){ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 }

	)

221 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

222 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

223 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 0, 1, 1, \

224 (Ë(
ba£
Ë>> 24 }

	)

225 
	#SEG64
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

226 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

227 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 1, 0, 1, \

228 (Ë(
ba£
Ë>> 24 }

	)

230 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

231 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

232 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 16, 0, 0, 1, 0, \

233 (Ë(
ba£
Ë>> 24 }

	)

238 
	#STA_X
 0x8

239 
	#STA_E
 0x4

240 
	#STA_C
 0x4

241 
	#STA_W
 0x2

242 
	#STA_R
 0x2

243 
	#STA_A
 0x1

244 

	)

247 
	#STS_LDT
 0x2

253 
	#STS_T64A
 0x9

254 
	#STS_T64B
 0xB

255 
	#STS_CG64
 0xC

256 
	#STS_IG64
 0xE

257 
	#STS_TG64
 0xF

258 

	)

266 #i‚de‡
__ASSEMBLER__


269 
	sTask°©e
 {

270 
uöt32_t
 
	mts_ªs1
;

271 
uöçå_t
 
	mts_e•0
;

272 
uöçå_t
 
	mts_e•1
;

273 
uöçå_t
 
	mts_e•2
;

274 
uöt64_t
 
	mts_ªs2
;

275 
uöt64_t
 
	mts_i°1
;

276 
uöt64_t
 
	mts_i°2
;

277 
uöt64_t
 
	mts_i°3
;

278 
uöt64_t
 
	mts_i°4
;

279 
uöt64_t
 
	mts_i°5
;

280 
uöt64_t
 
	mts_i°6
;

281 
uöt64_t
 
	mts_i°7
;

282 
uöt64_t
 
	mts_ªs3
;

283 
uöt16_t
 
	mts_ªs4
;

284 
uöt16_t
 
	mts_iomb
;

285 }
__©åibuã__
 ((
∑cked
));

288 
	sG©edesc
 {

289 
	mgd_off_15_0
 : 16;

290 
	mgd_ss
 : 16;

291 
	mgd_i°
 : 3;

292 
	mgd_rsv1
 : 5;

293 
	mgd_ty≥
 : 4;

294 
	mgd_s
 : 1;

295 
	mgd_d∂
 : 2;

296 
	mgd_p
 : 1;

297 
	mgd_off_31_16
 : 16;

298 
uöt32_t
 
	mgd_off_32_63
;

299 
uöt32_t
 
	mgd_rsv2
;

302 
	#SETTSS
(
desc
,
ty≥
,
ba£
,
lim
,
d∂
) \

304 (
desc
)->
sd_lim_15_0
 = (
uöt64_t
Ë(
lim
) & 0xffff; \

305 (
desc
)->
sd_ba£_15_0
 = (
uöt64_t
)(
ba£
) & 0xffff; \

306 (
desc
)->
sd_ba£_23_16
 = ((
uöt64_t
)(
ba£
)>>16) & 0xff; \

307 (
desc
)->
sd_ty≥
 = 
ty≥
; \

308 (
desc
)->
sd_s
 = 0; \

309 (
desc
)->
sd_d∂
 = 0; \

310 (
desc
)->
sd_p
 = 1; \

311 (
desc
)->
sd_lim_19_16
 = ((
uöt64_t
)(
lim
) >> 16) & 0xf; \

312 (
desc
)->
sd_avl
 = 0; \

313 (
desc
)->
sd_rsv1
 = 0; \

314 (
desc
)->
sd_g
 = 0; \

315 (
desc
)->
sd_ba£_31_24
 = ((
uöt64_t
)(
ba£
)>>24)& 0xff; \

316 (
desc
)->
sd_ba£_63_32
 = ((
uöt64_t
)(
ba£
)>>32) & 0xffffffff; \

317 (
desc
)->
sd_ªs1
 = 0; \

318 (
desc
)->
sd_˛ór
 = 0; \

319 (
desc
)->
sd_ªs2
 = 0; \

320 }

	)

335 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) \

337 (
g©e
).
gd_off_15_0
 = (
uöt64_t
Ë(
off
) & 0xffff; \

338 (
g©e
).
gd_ss
 = (
£l
); \

339 (
g©e
).
gd_i°
 = 0; \

340 (
g©e
).
gd_rsv1
 = 0; \

341 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG64
 : 
STS_IG64
; \

342 (
g©e
).
gd_s
 = 0; \

343 (
g©e
).
gd_d∂
 = (
d∂
); \

344 (
g©e
).
gd_p
 = 1; \

345 (
g©e
).
gd_off_31_16
 = ((
uöt64_t
Ë(
off
) >> 16) & 0xffff; \

346 (
g©e
).
gd_off_32_63
 = ((
uöt64_t
Ë(
off
) >> 32) & 0xffffffff; \

347 (
g©e
).
gd_rsv2
 = 0; \

348 }

	)

351 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) \

353 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

354 (
g©e
).
gd_ss
 = (
ss
); \

355 (
g©e
).
gd_i°
 = 0; \

356 (
g©e
).
gd_rsv1
 = 0; \

357 (
g©e
).
gd_ty≥
 = 
STS_CG64
; \

358 (
g©e
).
gd_s
 = 0; \

359 (
g©e
).
gd_d∂
 = (
d∂
); \

360 (
g©e
).
gd_p
 = 1; \

361 (
g©e
).
gd_off_31_16
 = ((
uöt32_t
Ë(
off
) >> 16) & 0xffff; \

362 (
g©e
).
gd_off_32_63
 = ((
uöt64_t
Ë(
off
) >> 32) & 0xffffffff; \

363 (
g©e
).
gd_rsv2
 = 0; \

364 }

	)

367 
	sP£udodesc
 {

368 
uöt16_t
 
	mpd_lim
;

369 
uöt64_t
 
	mpd_ba£
;

370 } 
__©åibuã__
 ((
∑cked
));

	@inc/ns.h

4 #i‚de‡
JOS_INC_NS_H


5 
	#JOS_INC_NS_H


	)

7 
	~<öc/ty≥s.h
>

8 
	~<öc/mmu.h
>

9 
	~<lwù/sockës.h
>

11 
	sjif_pkt
 {

12 
	mjp_Àn
;

13 
	mjp_d©a
[0];

20 
	mNSREQ_ACCEPT
 = 1,

21 
	mNSREQ_BIND
,

22 
	mNSREQ_SHUTDOWN
,

23 
	mNSREQ_CLOSE
,

24 
	mNSREQ_CONNECT
,

25 
	mNSREQ_LISTEN
,

27 
	mNSREQ_RECV
,

28 
	mNSREQ_SEND
,

29 
	mNSREQ_SOCKET
,

32 
	mNSREQ_INPUT
,

35 
	mNSREQ_OUTPUT
,

38 
	mNSREQ_TIMER
,

41 
	uNsùc
 {

42 
	sN§eq_ac˚±
 {

43 
	mªq_s
;

44 } 
	mac˚±
;

46 
	sN§ë_ac˚±
 {

47 
sockaddr
 
	mªt_addr
;

48 
sockÀn_t
 
	mªt_addæí
;

49 } 
	mac˚±Rë
;

51 
	sN§eq_böd
 {

52 
	mªq_s
;

53 
sockaddr
 
	mªq_«me
;

54 
sockÀn_t
 
	mªq_«mñí
;

55 } 
	mböd
;

57 
	sN§eq_shutdown
 {

58 
	mªq_s
;

59 
	mªq_how
;

60 } 
	mshutdown
;

62 
	sN§eq_˛o£
 {

63 
	mªq_s
;

64 } 
	m˛o£
;

66 
	sN§eq_c⁄√˘
 {

67 
	mªq_s
;

68 
sockaddr
 
	mªq_«me
;

69 
sockÀn_t
 
	mªq_«mñí
;

70 } 
	mc⁄√˘
;

72 
	sN§eq_li°í
 {

73 
	mªq_s
;

74 
	mªq_backlog
;

75 } 
	mli°í
;

77 
	sN§eq_ªcv
 {

78 
	mªq_s
;

79 
	mªq_Àn
;

80 
	mªq_Êags
;

81 } 
	mªcv
;

83 
	sN§ë_ªcv
 {

84 
	mªt_buf
[0];

85 } 
	mªcvRë
;

87 
	sN§eq_£nd
 {

88 
	mªq_s
;

89 
	mªq_size
;

90 
	mªq_Êags
;

91 
	mªq_buf
[0];

92 } 
	m£nd
;

94 
	sN§eq_sockë
 {

95 
	mªq_domaö
;

96 
	mªq_ty≥
;

97 
	mªq_¥Ÿocﬁ
;

98 } 
	msockë
;

100 
jif_pkt
 
	mpkt
;

103 
	m_∑d
[
PGSIZE
];

	@inc/queue.h

35 #i‚de‡
JOS_INC_QUEUE_H


36 
	#JOS_INC_QUEUE_H


	)

52 
	sFrob


54 
	m‰obozz
;

55 
LIST_ENTRY
(
Frob
Ë
	m‰ob_lök
;

58 
	$LIST_HEAD
(
Frob_li°
, 
Frob
)

60 
Frob_li°
 
Êi°
;

62 
	`LIST_INIT
(&
Êi°
);

63 
Êi°
 = 
	`LIST_HEAD_INITIALIZER
(&flist);

65 if(
	$LIST_EMPTY
(&
Êi°
))

66 
	`¥ötf
("list isÉmpty\n");

68 
Frob
 *
f
 = 
	`LIST_FIRST
(&
Êi°
);

69 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

70 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

72 
f
=
	`LIST_FIRST
(&
Êi°
); f != 0;

73 
f
 = 
	$LIST_NEXT
(
f
, 
‰ob_lök
))

74 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

76 
	$LIST_FOREACH
(
f
, &
Êi°
, 
‰ob_lök
)

77 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

79 
f
 = 
	`LIST_NEXT
(
	`LIST_FIRST
(&
Êi°
));

80 
	`LIST_INSERT_AFTER
(
f
, 
g
, 
‰ob_lök
);

81 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

82 
	`LIST_INSERT_BEFORE
(
f
, 
g
, 
‰ob_lök
);

83 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

84 
	`LIST_INSERT_HEAD
(&
Êi°
, 
g
, 
‰ob_lök
);

109 
	#LIST_HEAD
(
«me
, 
ty≥
) \

110 
	s«me
 { \

111 
ty≥
 *
lh_fú°
; \

112 }

	)

118 
	#LIST_HEAD_INITIALIZER
(
hód
) \

119 { 
NULL
 
	}

	)
}

129 
	#LIST_ENTRY
(
ty≥
) \

131 
ty≥
 *
À_√xt
; \

132 
ty≥
 **
À_¥ev
; \

133 }

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

147 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

153 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

160 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

161 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

162 (
v¨
); \

163 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

168 
	#LIST_INIT
(
hód
) do { \

169 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

170 } 0)

	)

177 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

178 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

179 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

180 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

181 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

182 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

183 } 0)

	)

190 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

191 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

192 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

193 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

194 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

195 } 0)

	)

201 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

202 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

203 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

204 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

205 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

206 } 0)

	)

212 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

213 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

214 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

215 (
ñm
)->
fõld
.
À_¥ev
; \

216 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

217 } 0)

	)

	@inc/stab.h

1 #i‚de‡
JOS_STAB_H


2 
	#JOS_STAB_H


	)

3 
	~<öc/ty≥s.h
>

15 
	#N_GSYM
 0x20

16 
	#N_FNAME
 0x22

17 
	#N_FUN
 0x24

18 
	#N_STSYM
 0x26

19 
	#N_LCSYM
 0x28

20 
	#N_MAIN
 0x2a

21 
	#N_PC
 0x30

22 
	#N_RSYM
 0x40

23 
	#N_SLINE
 0x44

24 
	#N_DSLINE
 0x46

25 
	#N_BSLINE
 0x48

26 
	#N_SSYM
 0x60

27 
	#N_SO
 0x64

28 
	#N_LSYM
 0x80

29 
	#N_BINCL
 0x82

30 
	#N_SOL
 0x84

31 
	#N_PSYM
 0xa0

32 
	#N_EINCL
 0xa2

33 
	#N_ENTRY
 0xa4

34 
	#N_LBRAC
 0xc0

35 
	#N_EXCL
 0xc2

36 
	#N_RBRAC
 0xe0

37 
	#N_BCOMM
 0xe2

38 
	#N_ECOMM
 0xe4

39 
	#N_ECOML
 0xe8

40 
	#N_LENG
 0xfe

41 

	)

43 
	sSèb
 {

44 
uöt32_t
 
	mn_°rx
;

45 
uöt8_t
 
	mn_ty≥
;

46 
uöt8_t
 
	mn_Ÿhî
;

47 
uöt16_t
 
	mn_desc
;

48 
uöt32_t
 
	mn_vÆue
;

	@inc/stdarg.h

3 #i‚de‡
JOS_INC_STDARG_H


4 
	#JOS_INC_STDARG_H


	)

7 
__buûtö_va_li°
 
	tva_li°
;

9 
	#va_°¨t
(
≠
, 
œ°
Ë
	`__buûtö_va_°¨t
◊p,Üa°)

	)

11 
	#va_¨g
(
≠
, 
ty≥
Ë
	`__buûtö_va_¨g
◊p,Åy≥)

	)

13 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

15 
	#va_c›y
(
d
,
s
Ë
	`__buûtö_va_c›y
(d,s)

	)

	@inc/stdio.h

1 #i‚de‡
JOS_INC_STDIO_H


2 
	#JOS_INC_STDIO_H


	)

4 
	~<öc/°d¨g.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*Ë0)

	)

11 
˝utch¨
(
c
);

12 
gëch¨
();

13 
isc⁄s
(
fd
);

16 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

17 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
);

18 
	`¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, ...);

19 
	`v¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, 
va_li°
);

22 
	`˝rötf
(c⁄° *
fmt
, ...);

23 
	`v˝rötf
(c⁄° *
fmt
, 
va_li°
);

26 
	`¥ötf
(c⁄° *
fmt
, ...);

27 
	`Ârötf
(
fd
, c⁄° *
fmt
, ...);

28 
	`vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
);

31 * 
	`ªadlöe
(c⁄° *
¥om±
);

	@inc/string.h

1 #i‚de‡
JOS_INC_STRING_H


2 
	#JOS_INC_STRING_H


	)

4 
	~<öc/ty≥s.h
>

6 
°æí
(c⁄° *
s
);

7 
°∫Àn
(c⁄° *
s
, 
size_t
 
size
);

8 * 
°r˝y
(*
d°
, c⁄° *
§c
);

9 * 
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

10 * 
°rˇt
(*
d°
, c⁄° *
§c
);

11 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

12 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

13 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
size
);

14 * 
°rchr
(c⁄° *
s
, 
c
);

15 * 
°rföd
(c⁄° *
s
, 
c
);

17 * 
mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

18 * 
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

19 * 
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

20 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

21 * 
memföd
(c⁄° *
s
, 
c
, 
size_t
 
Àn
);

23 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

24 * 
°r°r
(c⁄° *
ö
, c⁄° *
°r
);

	@inc/syscall.h

2 #i‚de‡
JOS_INC_SYSCALL_H


3 
	#JOS_INC_SYSCALL_H


	)

7 
	mSYS_˝uts
 = 0,

8 
	mSYS_cgëc
,

9 
	mSYS_gëívid
,

10 
	mSYS_ív_de°roy
,

12 
	mSYS_∑ge_Æloc
,

13 
	mSYS_∑ge_m≠
,

14 
	mSYS_∑ge_unm≠
,

15 
	mSYS_exof‹k
,

16 
	mSYS_ív_£t_°©us
,

18 
	mSYS_ív_£t_å≠‰ame
,

20 
	mSYS_ív_£t_pgÁu…_upˇŒ
,

21 
	mSYS_yõld
,

22 
	mSYS_ùc_åy_£nd
,

23 
	mSYS_ùc_ªcv
,

25 
	mSYS_time_m£c
,

27 
	mSYS_√t_å™smô
,

28 
	mSYS_√t_ª˚ive
,

30 
	mSYS_ït_m≠
,

31 
	mSYS_ív_mkgue°
,

32 #i‚de‡
VMM_GUEST


33 
	mSYS_vmx_li°_vms
,

34 
	mSYS_vmx_£l_ªsume
,

35 
	mSYS_vmx_gë_vmdisk_numbî
,

36 
	mSYS_vmx_ö¸_vmdisk_numbî
,

39 
	mNSYSCALLS


	@inc/trap.h

2 #i‚de‡
JOS_INC_TRAP_H


3 
	#JOS_INC_TRAP_H


	)

7 
	#T_DIVIDE
 0

8 
	#T_DEBUG
 1

9 
	#T_NMI
 2

10 
	#T_BRKPT
 3

11 
	#T_OFLOW
 4

12 
	#T_BOUND
 5

13 
	#T_ILLOP
 6

14 
	#T_DEVICE
 7

15 
	#T_DBLFLT
 8

17 
	#T_TSS
 10

18 
	#T_SEGNP
 11

19 
	#T_STACK
 12

20 
	#T_GPFLT
 13

21 
	#T_PGFLT
 14

23 
	#T_FPERR
 16

24 
	#T_ALIGN
 17

25 
	#T_MCHK
 18

26 
	#T_SIMDERR
 19

27 

	)

30 
	#T_SYSCALL
 48

31 
	#T_DEFAULT
 500

32 

	)

33 
	#IRQ_OFFSET
 32

34 

	)

36 
	#IRQ_TIMER
 0

	)

37 
	#IRQ_KBD
 1

	)

38 
	#IRQ_SERIAL
 4

	)

39 
	#IRQ_SPURIOUS
 7

	)

40 
	#IRQ_IDE
 14

	)

41 
	#IRQ_ERROR
 19

	)

43 #i‚de‡
__ASSEMBLER__


45 
	~<öc/ty≥s.h
>

47 
	sPushRegs
 {

49 
uöt64_t
 
	mªg_r15
;

50 
uöt64_t
 
	mªg_r14
;

51 
uöt64_t
 
	mªg_r13
;

52 
uöt64_t
 
	mªg_r12
;

53 
uöt64_t
 
	mªg_r11
;

54 
uöt64_t
 
	mªg_r10
;

55 
uöt64_t
 
	mªg_r9
;

56 
uöt64_t
 
	mªg_r8
;

57 
uöt64_t
 
	mªg_rsi
;

58 
uöt64_t
 
	mªg_rdi
;

59 
uöt64_t
 
	mªg_rbp
;

60 
uöt64_t
 
	mªg_rdx
;

61 
uöt64_t
 
	mªg_rcx
;

62 
uöt64_t
 
	mªg_rbx
;

63 
uöt64_t
 
	mªg_øx
;

64 } 
__©åibuã__
((
∑cked
));

66 
	sTøp‰ame
 {

67 
PushRegs
 
	mtf_ªgs
;

68 
uöt16_t
 
	mtf_es
;

69 
uöt16_t
 
	mtf_∑ddög1
;

70 
uöt32_t
 
	mtf_∑ddög2
;

71 
uöt16_t
 
	mtf_ds
;

72 
uöt16_t
 
	mtf_∑ddög3
;

73 
uöt32_t
 
	mtf_∑ddög4
;

74 
uöt64_t
 
	mtf_å≠no
;

76 
uöt64_t
 
	mtf_îr
;

77 
uöçå_t
 
	mtf_rù
;

78 
uöt16_t
 
	mtf_cs
;

79 
uöt16_t
 
	mtf_∑ddög5
;

80 
uöt32_t
 
	mtf_∑ddög6
;

81 
uöt64_t
 
	mtf_eÊags
;

83 
uöçå_t
 
	mtf_r•
;

84 
uöt16_t
 
	mtf_ss
;

85 
uöt16_t
 
	mtf_∑ddög7
;

86 
uöt32_t
 
	mtf_∑ddög8
;

87 } 
__©åibuã__
((
∑cked
));

90 
	sUTøp‰ame
 {

92 
uöt64_t
 
	mutf_Áu…_va
;

93 
uöt64_t
 
	mutf_îr
;

95 
PushRegs
 
	mutf_ªgs
;

96 
uöçå_t
 
	mutf_rù
;

97 
uöt64_t
 
	mutf_eÊags
;

99 
uöçå_t
 
	mutf_r•
;

100 } 
__©åibuã__
((
∑cked
));

	@inc/types.h

1 #i‚de‡
JOS_INC_TYPES_H


2 
	#JOS_INC_TYPES_H


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*Ë0)

	)

9 
_Boﬁ
 
	tboﬁ
;

10 íum { 
	mÁl£
, 
	måue
 };

13 
__sig√d
 
	töt8_t
;

14 
	tuöt8_t
;

15 
	töt16_t
;

16 
	tuöt16_t
;

17 
	töt32_t
;

18 
	tuöt32_t
;

19 
	töt64_t
;

20 
	tuöt64_t
;

26 
öt32_t
 
	töçå_t
;

27 
uöt64_t
 
	tuöçå_t
;

28 
uöt64_t
 
	tphyßddr_t
;

31 
uöt64_t
 
	tµn_t
;

34 
uöt64_t
 
	tsize_t
;

37 
öt32_t
 
	tssize_t
;

40 
öt32_t
 
	toff_t
;

43 
	#MIN
(
_a
, 
_b
) \

45 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

46 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

47 
__a
 <
__b
 ? __a : __b; \

48 })

	)

49 
	#MAX
(
_a
, 
_b
) \

51 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

52 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

53 
__a
 >
__b
 ? __a : __b; \

54 })

	)

58 
	#ROUNDDOWN
(
a
, 
n
) \

60 
uöt64_t
 
__a
 = (uöt64_tË(
a
); \

61 (
	`ty≥of
(
a
)Ë(
__a
 - __®% (
n
)); \

62 })

	)

64 
	#ROUNDUP
(
a
, 
n
) \

66 
uöt64_t
 
__n
 = (uöt64_tË(
n
); \

67 (
	`ty≥of
(
a
)Ë(
	`ROUNDDOWN
((
uöt64_t
Ë◊Ë+ 
__n
 - 1, __n)); \

68 })

	)

71 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë(&(—y≥*)0)->membî))

	)

	@inc/vmx.h

2 #i‚de‡
JOS_INC_VMX_H


3 
	#JOS_INC_VMX_H


	)

5 
	#GUEST_MEM_SZ
 16 * 1024 * 1024

	)

6 
	#MAX_MSR_COUNT
 ( 
PGSIZE
 / 2 ) / ( 128 / 8 )

	)

8 #i‚de‡
__ASSEMBLER__


10 
	sVmxGue°Info
 {

11 
öt64_t
 
	mphys_sz
;

12 
uöçå_t
 *
	mvmcs
;

15 
uöt32_t
 
	mex˚±i⁄_bm≠
;

17 
uöt64_t
 *
	mio_bm≠_a
;

18 
uöt64_t
 *
	mio_bm≠_b
;

20 
	mm§_cou¡
;

21 
uöçå_t
 *
	mm§_ho°_¨ó
;

22 
uöçå_t
 *
	mm§_gue°_¨ó
;

23 
	mv˝unum
;

28 #i‡
deföed
(
VMM_GUEST
Ë|| deföed(
VMM_HOST
)

31 
	#VMX_VMCALL_MBMAP
 0x1

	)

32 
	#VMX_VMCALL_IPCSEND
 0x2

	)

33 
	#VMX_VMCALL_IPCRECV
 0x3

	)

34 
	#VMX_VMCALL_LAPICEOI
 0x4

	)

35 
	#VMX_VMCALL_BACKTOHOST
 0x5

	)

36 
	#VMX_VMCALL_GETDISKIMGNUM
 0x6

	)

37 
	#VMX_VMCALL_ALLOC_CPU
 0x7

	)

38 
	#VMX_VMCALL_GUEST_YIELD
 0x8

	)

39 
	#VMX_VMCALL_CPUNUM
 0x9

	)

41 
	#VMX_HOST_FS_ENV
 0x1

	)

	@inc/x86.h

1 #i‚de‡
JOS_INC_X86_H


2 
	#JOS_INC_X86_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/mmu.h
>

7 
ölöe
 
uöt32_t
 
xchg
(vﬁ©ûêuöt32_à*
addr
,uöt32_à
√wvÆ
);

8 
__ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
__ölöe
 
uöt8_t
 
	$öb
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
__ölöe
 
	$ösb
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
__ölöe
 
uöt16_t
 
	$öw
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
__ölöe
 
	$ösw
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
__ölöe
 
uöt32_t
 
	$öl
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
__ölöe
 
	$ö¶
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
__ölöe
 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
__ölöe
 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
__ölöe
 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
__ölöe
 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
__ölöe
 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
__ölöe
 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
__ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
__ölöe
 
	$lidt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
__ölöe
 
	$lgdt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
__ölöe
 
	$Œdt
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
__ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
__ölöe
 
	$l¸0
(
uöt64_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
__ölöe
 
uöt64_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
__ölöe
 
uöt64_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
__ölöe
 
	$l¸3
(
uöt64_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
__ölöe
 
uöt64_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
__ölöe
 
	$l¸4
(
uöt64_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
__ölöe
 
uöt64_t
 
	$r¸4
(Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
__ölöe
 
	$ébÊush
(Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
__ölöe
 
uöt64_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
__ölöe
 
	$wrôe_eÊags
(
uöt64_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
__ölöe
 
uöt64_t
 
	$ªad_rbp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
__ölöe
 
uöt64_t
 
	$ªad_r•
(Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
__ölöe
 
	`˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
);

39 
__ölöe
 
uöt64_t
 
	$ªad_tsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
__ölöe
 
uöt64_t
 
	$ªad_m§
(
uöt32_t
 
ecx
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
__ölöe
 
	$wrôe_m§
–
uöt32_t
 
ecx
, 
uöt64_t
 
vÆ
 ) 
	`__©åibuã__
((
Æways_ölöe
));

42 
__ölöe
 
	$ªad_idå
 (
uöt64_t
 *
idtba£
, 
uöt16_t
 *
idéimô
Ë
	`__©åibuã__
((
Æways_ölöe
));

43 
__ölöe
 
	$ªad_gdå
 (
uöt64_t
 *
gdtba£
, 
uöt16_t
 *
gdéimô
Ë
	`__©åibuã__
((
Æways_ölöe
));

45 
__ölöe
 

46 
	$bªakpoöt
()

48 
__asm
 
	`__vﬁ©ûe
("int3");

49 
	}
}

51 
__ölöe
 
uöt8_t


52 
	$öb
(
p‹t
)

54 
uöt8_t
 
d©a
;

55 
__asm
 
	`__vﬁ©ûe
("öb %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

56  
d©a
;

57 
	}
}

59 
__ölöe
 

60 
	$ösb
(
p‹t
, *
addr
, 
˙t
)

62 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsb" :

63 "=D" (
addr
), "=c" (
˙t
) :

64 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

66 
	}
}

68 
__ölöe
 
uöt16_t


69 
	$öw
(
p‹t
)

71 
uöt16_t
 
d©a
;

72 
__asm
 
	`__vﬁ©ûe
("öw %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

73  
d©a
;

74 
	}
}

76 
__ölöe
 

77 
	$ösw
(
p‹t
, *
addr
, 
˙t
)

79 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsw" :

80 "=D" (
addr
), "=c" (
˙t
) :

81 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

83 
	}
}

85 
__ölöe
 
uöt32_t


86 
	$öl
(
p‹t
)

88 
uöt32_t
 
d©a
;

89 
__asm
 
	`__vﬁ©ûe
("ö»%w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

90  
d©a
;

91 
	}
}

93 
__ölöe
 

94 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

96 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsl" :

97 "=D" (
addr
), "=c" (
˙t
) :

98 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

100 
	}
}

102 
__ölöe
 

103 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
)

105 
__asm
 
	`__vﬁ©ûe
("outb %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

106 
	}
}

108 
__ölöe
 

109 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
)

111 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsb" :

112 "=S" (
addr
), "=c" (
˙t
) :

113 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

115 
	}
}

117 
__ölöe
 

118 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
)

120 
__asm
 
	`__vﬁ©ûe
("outw %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

121 
	}
}

123 
__ölöe
 

124 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
)

126 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsw" :

127 "=S" (
addr
), "=c" (
˙t
) :

128 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

130 
	}
}

132 
__ölöe
 

133 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

135 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsl" :

136 "=S" (
addr
), "=c" (
˙t
) :

137 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

139 
	}
}

141 
__ölöe
 

142 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
)

144 
__asm
 
	`__vﬁ©ûe
("oué %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

145 
	}
}

147 
__ölöe
 

148 
	$övÕg
(*
addr
)

150 
__asm
 
	`__vﬁ©ûe
("övÕg (%0)" : : "r" (
addr
) : "memory");

151 
	}
}

153 
__ölöe
 

154 
	$lidt
(*
p
)

156 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
p
));

157 
	}
}

159 
__ölöe
 

160 
	$Œdt
(
uöt16_t
 
£l
)

162 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

163 
	}
}

165 
__ölöe
 

166 
	$lgdt
(*
p
)

168 
__asm
 
	`__vﬁ©ûe
("lgdà(%0)" : : "r" (
p
));

169 
	}
}

170 
__ölöe
 

171 
	$…r
(
uöt16_t
 
£l
)

173 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

174 
	}
}

176 
__ölöe
 

177 
	$l¸0
(
uöt64_t
 
vÆ
)

179 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸0" : : "r" (
vÆ
));

180 
	}
}

182 
__ölöe
 
uöt64_t


183 
	$r¸0
()

185 
uöt64_t
 
vÆ
;

186 
__asm
 
	`__vﬁ©ûe
("movq %%¸0,%0" : "Ù" (
vÆ
));

187  
vÆ
;

188 
	}
}

190 
__ölöe
 
uöt64_t


191 
	$r¸2
()

193 
uöt64_t
 
vÆ
;

194 
__asm
 
	`__vﬁ©ûe
("movq %%¸2,%0" : "Ù" (
vÆ
));

195  
vÆ
;

196 
	}
}

198 
__ölöe
 

199 
	$l¸3
(
uöt64_t
 
vÆ
)

201 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸3" : : "r" (
vÆ
));

202 
	}
}

204 
__ölöe
 
uöt64_t


205 
	$r¸3
()

207 
uöt64_t
 
vÆ
;

208 
__asm
 
	`__vﬁ©ûe
("movq %%¸3,%0" : "Ù" (
vÆ
));

209  
vÆ
;

210 
	}
}

212 
__ölöe
 

213 
	$l¸4
(
uöt64_t
 
vÆ
)

215 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸4" : : "r" (
vÆ
));

216 
	}
}

218 
__ölöe
 
uöt64_t


219 
	$r¸4
()

221 
uöt64_t
 
¸4
;

222 
__asm
 
	`__vﬁ©ûe
("movq %%¸4,%0" : "Ù" (
¸4
));

223  
¸4
;

224 
	}
}

226 
__ölöe
 

227 
	$ébÊush
()

229 
uöt64_t
 
¸3
;

230 
__asm
 
	`__vﬁ©ûe
("movq %%¸3,%0" : "Ù" (
¸3
));

231 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸3" : : "r" (
¸3
));

232 
	}
}

234 
__ölöe
 
uöt64_t


235 
	$ªad_eÊags
()

237 
uöt64_t
 
rÊags
;

238 
__asm
 
	`__vﬁ©ûe
("pushfq;Ö›q %0" : "Ù" (
rÊags
));

239  
rÊags
;

240 
	}
}

242 
__ölöe
 

243 
	$wrôe_eÊags
(
uöt64_t
 
eÊags
)

245 
__asm
 
	`__vﬁ©ûe
("pushq %0;Ö›fq" : : "r" (
eÊags
));

246 
	}
}

248 
__ölöe
 
uöt64_t


249 
	$ªad_rbp
()

251 
uöt64_t
 
rbp
;

252 
__asm
 
	`__vﬁ©ûe
("movq %%rbp,%0" : "Ù" (
rbp
)::"cc","memory");

253  
rbp
;

254 
	}
}

256 
__ölöe
 
uöt64_t


257 
	$ªad_r•
()

259 
uöt64_t
 
e•
;

260 
__asm
 
	`__vﬁ©ûe
("movq %%r•,%0" : "Ù" (
e•
));

261  
e•
;

262 
	}
}

264 
	#ªad_rù
(
v¨
Ë
__asm
 
	`__vﬁ©ûe
("Àaq (%%rù), %0" : "Ù" (v¨)::"cc","mem‹y")

	)

266 
__ölöe
 

267 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

269 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

270 
asm
 volatile("cpuid"

271 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

272 : "a" (
öfo
));

273 i‡(
óxp
)

274 *
óxp
 = 
óx
;

275 i‡(
ebxp
)

276 *
ebxp
 = 
ebx
;

277 i‡(
ecxp
)

278 *
ecxp
 = 
ecx
;

279 i‡(
edxp
)

280 *
edxp
 = 
edx
;

281 
	}
}

283 
ölöe
 
uöt32_t


284 
	$xchg
(vﬁ©ûê
uöt32_t
 *
addr
,uöt32_à
√wvÆ
){

285 
uöt32_t
 
ªsu…
;

286 
__asm
 
	`__vﬁ©ûe
("lock; xchgl %0, %1":

287 "+m" (*
addr
), "˜" (
ªsu…
):

288 "1"(
√wvÆ
):

290  
ªsu…
;

291 
	}
}

293 
__ölöe
 
uöt64_t


294 
	$ªad_tsc
()

296 
uöt64_t
 
tsc
;

297 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "=A" (
tsc
));

298  
tsc
;

299 
	}
}

301 
__ölöe
 
uöt64_t


302 
	$ªad_m§
–
uöt32_t
 
ecx
 ) {

303 
uöt32_t
 
edx
, 
óx
;

304 
__asm
 
	`__vﬁ©ûe
("rdmsr"

305 : "=d" (
edx
), "˜" (
óx
)

306 : "c" (
ecx
));

307 
uöt64_t
 
ªt
 = 0;

308 
ªt
 = 
edx
;

309 
ªt
 =Ñet << 32;

310 
ªt
 |
óx
;

312  
ªt
;

313 
	}
}

315 
__ölöe
 

316 
	$wrôe_m§
–
uöt32_t
 
ecx
, 
uöt64_t
 
vÆ
 ) {

317 
uöt32_t
 
edx
, 
óx
;

318 
óx
 = (
uöt32_t
Ë
vÆ
;

319 
edx
 = (
uöt32_t
Ë–
vÆ
 >> 32 );

320 
__asm
 
	`__vﬁ©ûe
("wrmsr"

321 :: "c" (
ecx
), "d" (
edx
), "a" (
óx
) );

322 
	}
}

324 
__ölöe
 

325 
	$ªad_idå
 (
uöt64_t
 *
idtba£
, 
uöt16_t
 *
idéimô
)

327 
P£udodesc
 
idå
;

329 
asm
 volatile ("sidt %0"

330 : "=m" (
idå
));

331 *
idtba£
 = 
idå
.
pd_ba£
;

332 *
idéimô
 = 
idå
.
pd_lim
;

333 
	}
}

335 
__ölöe
 

336 
	$ªad_gdå
 (
uöt64_t
 *
gdtba£
, 
uöt16_t
 *
gdéimô
)

338 
P£udodesc
 
gdå
;

340 
asm
 volatile ("sgdt %0"

341 : "=m" (
gdå
));

342 *
gdtba£
 = 
gdå
.
pd_ba£
;

343 *
gdéimô
 = 
gdå
.
pd_lim
;

344 
	}
}

	@kern/console.c

3 
	~<öc/x86.h
>

4 
	~<öc/memœyout.h
>

5 
	~<öc/kbdªg.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kîn/c⁄sﬁe.h
>

11 
	~<kîn/picúq.h
>

13 
	~<öc/vmx.h
>

14 
	~<vmm/vmx.h
>

17 
c⁄s_öå
((*
¥oc
)());

18 
	`c⁄s_putc
(
c
);

22 
	$dñay
()

24 
	`öb
(0x84);

25 
	`öb
(0x84);

26 
	`öb
(0x84);

27 
	`öb
(0x84);

28 
	}
}

32 
	#COM1
 0x3F8

	)

34 
	#COM_RX
 0

35 
	#COM_TX
 0

36 
	#COM_DLL
 0

37 
	#COM_DLM
 1

38 
	#COM_IER
 1

39 
	#COM_IER_RDI
 0x01

40 
	#COM_IIR
 2

41 
	#COM_FCR
 2

42 
	#COM_LCR
 3

43 
	#COM_LCR_DLAB
 0x80

44 
	#COM_LCR_WLEN8
 0x03

45 
	#COM_MCR
 4

46 
	#COM_MCR_RTS
 0x02

47 
	#COM_MCR_DTR
 0x01

48 
	#COM_MCR_OUT2
 0x08

49 
	#COM_LSR
 5

50 
	#COM_LSR_DATA
 0x01

51 
	#COM_LSR_TXRDY
 0x20

52 
	#COM_LSR_TSRE
 0x40

53 

	)

54 
boﬁ
 
	g£rül_exi°s
;

57 
	$£rül_¥oc_d©a
()

59 i‡(!(
	`öb
(
COM1
+
COM_LSR
Ë& 
COM_LSR_DATA
))

61  
	`öb
(
COM1
+
COM_RX
);

62 
	}
}

65 
	$£rül_öå
()

67 i‡(
£rül_exi°s
)

68 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

69 
	}
}

72 
	$£rül_putc
(
c
)

74 
i
;

76 
i
 = 0;

77 !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
Ë&& 
i
 < 12800;

78 
i
++)

79 
	`dñay
();

81 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

82 
	}
}

85 
	$£rül_öô
()

88 
	`outb
(
COM1
+
COM_FCR
, 0);

91 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_DLAB
);

92 
	`outb
(
COM1
+
COM_DLL
, (
uöt8_t
) (115200 / 9600));

93 
	`outb
(
COM1
+
COM_DLM
, 0);

96 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_WLEN8
 & ~
COM_LCR_DLAB
);

99 
	`outb
(
COM1
+
COM_MCR
, 0);

101 
	`outb
(
COM1
+
COM_IER
, 
COM_IER_RDI
);

105 
£rül_exi°s
 = (
	`öb
(
COM1
+
COM_LSR
) != 0xFF);

106 (Ë
	`öb
(
COM1
+
COM_IIR
);

107 (Ë
	`öb
(
COM1
+
COM_RX
);

111 i‡(
£rül_exi°s
)

112 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<4));

114 
	}
}

123 
	$Õt_putc
(
c
)

125 
i
;

127 
i
 = 0; !(
	`öb
(0x378+1) & 0x80) && i < 12800; i++)

128 
	`dñay
();

129 
	`outb
(0x378+0, 
c
);

130 
	`outb
(0x378+2, 0x08|0x04|0x01);

131 
	`outb
(0x378+2, 0x08);

132 
	}
}

139 
	gaddr_6845
;

140 
uöt16_t
 *
	g¸t_buf
;

141 
uöt16_t
 
	g¸t_pos
;

145 
	$cga_öô
()

147 vﬁ©ûê
uöt16_t
 *
˝
;

148 
uöt16_t
 
was
;

149 
pos
;

151 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
CGA_BUF
);

152 
was
 = *
˝
;

153 *
˝
 = (
uöt16_t
) 0xA55A;

154 i‡(*
˝
 != 0xA55A) {

155 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
MONO_BUF
);

156 
addr_6845
 = 
MONO_BASE
;

158 *
˝
 = 
was
;

159 
addr_6845
 = 
CGA_BASE
;

163 
	`outb
(
addr_6845
, 14);

164 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

165 
	`outb
(
addr_6845
, 15);

166 
pos
 |
	`öb
(
addr_6845
 + 1);

168 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

169 
¸t_pos
 = 
pos
;

170 
	}
}

176 
	$cga_putc
(
c
)

180 i‡(!(
c
 & ~0xFF))

181 
c
 |= 0x0700;

183 
c
 & 0xff) {

185 i‡(
¸t_pos
 > 0) {

186 
¸t_pos
--;

187 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

191 
¸t_pos
 +
CRT_COLS
;

194 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

197 
	`c⁄s_putc
(' ');

198 
	`c⁄s_putc
(' ');

199 
	`c⁄s_putc
(' ');

200 
	`c⁄s_putc
(' ');

201 
	`c⁄s_putc
(' ');

204 
¸t_buf
[
¸t_pos
++] = 
c
;

211 i‡(
¸t_pos
 >
CRT_SIZE
) {

212 
i
;

215 
	`memmove
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

216 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i++)

217 
¸t_buf
[
i
] = 0x0700 | ' ';

218 
¸t_pos
 -
CRT_COLS
;

222 
	`outb
(
addr_6845
, 14);

223 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

224 
	`outb
(
addr_6845
, 15);

225 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

226 
	}
}

232 
	#NO
 0

	)

234 
	#SHIFT
 (1<<0)

	)

235 
	#CTL
 (1<<1)

	)

236 
	#ALT
 (1<<2)

	)

238 
	#CAPSLOCK
 (1<<3)

	)

239 
	#NUMLOCK
 (1<<4)

	)

240 
	#SCROLLLOCK
 (1<<5)

	)

242 
	#E0ESC
 (1<<6)

	)

244 
uöt8_t
 
	gshi·code
[256] =

246 [0x1D] = 
CTL
,

247 [0x2A] = 
SHIFT
,

248 [0x36] = 
SHIFT
,

249 [0x38] = 
ALT
,

250 [0x9D] = 
CTL
,

251 [0xB8] = 
ALT


254 
uöt8_t
 
	gtoggÀcode
[256] =

256 [0x3A] = 
CAPSLOCK
,

257 [0x45] = 
NUMLOCK
,

258 [0x46] = 
SCROLLLOCK


261 
uöt8_t
 
	gn‹mÆm≠
[256] =

263 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

266 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

268 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

269 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

270 
NO
, ' ', NO, NO, NO, NO, NO, NO,

271 
NO
, NO, NO, NO, NO, NO, NO, '7',

273 '2', '3', '0', '.', 
NO
, NO, NO, NO,

274 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

275 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

276 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

277 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

278 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

279 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


282 
uöt8_t
 
	gshi·m≠
[256] =

284 
NO
, 033, '!', '@', '#', '$', '%', '^',

287 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

289 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

290 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

291 
NO
, ' ', NO, NO, NO, NO, NO, NO,

292 
NO
, NO, NO, NO, NO, NO, NO, '7',

294 '2', '3', '0', '.', 
NO
, NO, NO, NO,

295 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

296 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

297 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

298 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

299 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

300 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


303 
	#C
(
x
Ë(x - '@')

	)

305 
uöt8_t
 
	g˘lm≠
[256] =

307 
NO
, NO, NO, NO, NO, NO, NO, NO,

308 
NO
, NO, NO, NO, NO, NO, NO, NO,

309 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

310 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

311 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

312 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

313 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

314 [0x97] = 
KEY_HOME
,

315 [0xB5] = 
C
('/'), [0xC8] = 
KEY_UP
,

316 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

317 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

318 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

319 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


322 
uöt8_t
 *
	gch¨code
[4] = {

323 
n‹mÆm≠
,

324 
shi·m≠
,

325 
˘lm≠
,

326 
˘lm≠


334 
	$kbd_¥oc_d©a
()

336 
c
;

337 
uöt8_t
 
d©a
;

338 
uöt32_t
 
shi·
;

339 
r
;

340 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0)

343 
d©a
 = 
	`öb
(
KBDATAP
);

345 i‡(
d©a
 == 0xE0) {

347 
shi·
 |
E0ESC
;

349 } i‡(
d©a
 & 0x80) {

351 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

352 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

354 } i‡(
shi·
 & 
E0ESC
) {

356 
d©a
 |= 0x80;

357 
shi·
 &~
E0ESC
;

360 
shi·
 |
shi·code
[
d©a
];

361 
shi·
 ^
toggÀcode
[
d©a
];

363 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

364 i‡(
shi·
 & 
CAPSLOCK
) {

365 i‡('a' <
c
 && c <= 'z')

366 
c
 += 'A' - 'a';

367 i‡('A' <
c
 && c <= 'Z')

368 
c
 += 'a' - 'A';

374 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

375 
	`˝rötf
("Rebooting!\n");

376 
	`outb
(0x92, 0x3);

379 #ifde‡
VMM_GUEST


380 i‡(
c
 == 0x1b) {

381 
	`˝rötf
("ESCÖressed\n");

382 
	`asm
("vmˇŒ":"˜"(
r
): "0"(
VMX_VMCALL_BACKTOHOST
));

386  
c
;

387 
	}
}

390 
	$kbd_öå
()

392 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

393 
	}
}

396 
	$kbd_öô
()

400 
	`kbd_öå
();

401 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<1));

403 
	}
}

412 
	#CONSBUFSIZE
 512

	)

415 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

416 
uöt32_t
 
	mΩos
;

417 
uöt32_t
 
	mwpos
;

418 } 
	gc⁄s
;

423 
c⁄s_öå
((*
¥oc
)())

425 
c
;

427 (
c
 = (*
¥oc
)()) != -1) {

428 i‡(
c
 == 0)

430 
c⁄s
.
buf
[c⁄s.
wpos
++] = 
c
;

431 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
)

432 
c⁄s
.
wpos
 = 0;

434 
	}
}

438 
	$c⁄s_gëc
()

440 
c
;

445 
	`£rül_öå
();

446 
	`kbd_öå
();

449 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

450 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
++];

451 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
)

452 
c⁄s
.
Ωos
 = 0;

453  
c
;

456 
	}
}

460 
	$c⁄s_putc
(
c
)

462 
	`£rül_putc
(
c
);

463 
	`Õt_putc
(
c
);

464 
	`cga_putc
(
c
);

465 
	}
}

469 
	$c⁄s_öô
()

471 
	`cga_öô
();

472 
	`kbd_öô
();

473 
	`£rül_öô
();

475 i‡(!
£rül_exi°s
)

476 
	`˝rötf
("SerialÖort doesÇotÉxist!\n");

477 
	}
}

483 
	$˝utch¨
(
c
)

485 
	`c⁄s_putc
(
c
);

486 
	}
}

489 
	$gëch¨
()

491 
c
;

493 (
c
 = 
	`c⁄s_gëc
()) == 0)

495  
c
;

496 
	}
}

499 
	$isc⁄s
(
fdnum
)

503 
	}
}

	@kern/console.h

3 #i‚de‡
_CONSOLE_H_


4 
	#_CONSOLE_H_


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/ty≥s.h
>

11 
	#MONO_BASE
 0x3B4

	)

12 
	#MONO_BUF
 0xB0000

	)

13 
	#CGA_BASE
 0x3D4

	)

14 
	#CGA_BUF
 0xB8000

	)

16 
	#CRT_ROWS
 25

	)

17 
	#CRT_COLS
 80

	)

18 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

20 
c⁄s_öô
();

21 
c⁄s_gëc
();

23 
kbd_öå
();

24 
£rül_öå
();

	@kern/cpu.h

3 #i‚de‡
JOS_INC_CPU_H


4 
	#JOS_INC_CPU_H


	)

6 
	~<öc/ty≥s.h
>

7 
	~<öc/memœyout.h
>

8 
	~<öc/mmu.h
>

9 
	~<öc/ív.h
>

12 
	#NCPU
 4

	)

19 
	mCPU_UNUSED
 = 0,

20 
	mCPU_STARTED
,

21 
	mCPU_HALTED
,

25 
	sCpuInfo
 {

26 
uöt8_t
 
	m˝u_id
;

27 vﬁ©ûê
	m˝u_°©us
;

28 
Env
 *
	m˝u_ív
;

29 
Task°©e
 
	m˝u_ts
;

31 
boﬁ
 
	mis_vmx_roŸ
;

32 
uöçå_t
 
	mvmx⁄_ªgi⁄
;

37 
CpuInfo
 
˝us
[
NCPU
];

38 
n˝u
;

39 
CpuInfo
 *
boŸ˝u
;

40 
phyßddr_t
 
œpiˇddr
;

43 
≥r˝u_k°acks
[
NCPU
][
KSTKSIZE
];

45 
˝unum
();

46 
	#this˝u
 (&
˝us
[
	`˝unum
()])

	)

48 
mp_öô
();

49 
œpic_öô
();

50 
œpic_°¨èp
(
uöt8_t
 
≠icid
, 
uöt32_t
 
addr
);

51 
œpic_eoi
();

52 
œpic_ùi
(
ve˘‹
);

	@kern/dwarf.h

1 #i‚de‡
DWARF_H


2 
	#DWARF_H


	)

4 
	#NATTRDEF
 32

5 
	#NATTRVAL
 120

6 

	)

7 
	g_Dw¨f_Dõ
;

10 
	tDw¨f_Boﬁ
;

11 
off_t
 
	tDw¨f_Off
;

12 
uöt64_t
 
	tDw¨f_Unsig√d
;

13 
uöt16_t
 
	tDw¨f_HÆf
;

14 
uöt8_t
 
	tDw¨f_SmÆl
;

15 
öt64_t
 
	tDw¨f_Sig√d
;

16 
uöt64_t
 
	tDw¨f_Addr
;

17 *
	tDw¨f_På
;

19 
_Dw¨f_Debug
 *
	tDw¨f_Debug
;

20 
_Dw¨f_Fde
 *
	tDw¨f_Fde
;

21 
_Dw¨f_Fde
 *
	tDw¨f_P_Fde
;

22 
_Dw¨f_Cõ
 *
	tDw¨f_Cõ
;

25 #i‚de‡
DW_FRAME_HIGHEST_NORMAL_REGISTER


26 
	#DW_FRAME_HIGHEST_NORMAL_REGISTER
 63

	)

29 
	#DW_FRAME_RA_COL
 (
DW_FRAME_HIGHEST_NORMAL_REGISTER
 + 1)

	)

30 
	#DW_FRAME_STATIC_LINK
 (
DW_FRAME_HIGHEST_NORMAL_REGISTER
 + 2)

	)

32 #i‚de‡
DW_FRAME_LAST_REG_NUM


33 
	#DW_FRAME_LAST_REG_NUM
 (
DW_FRAME_HIGHEST_NORMAL_REGISTER
 + 3)

	)

36 #i‚de‡
DW_FRAME_REG_INITIAL_VALUE


37 
	#DW_FRAME_REG_INITIAL_VALUE
 
DW_FRAME_SAME_VAL


	)

40 
	#DW_FRAME_UNDEFINED_VAL
 1034

	)

41 
	#DW_FRAME_SAME_VAL
 1035

	)

42 
	#DW_FRAME_CFA_COL3
 1436

	)

44 
	#DW_EXPR_OFFSET
 0

	)

45 
	#DW_EXPR_VAL_OFFSET
 1

	)

46 
	#DW_EXPR_EXPRESSION
 2

	)

47 
	#DW_EXPR_VAL_EXPRESSION
 3

	)

49 
	#DW_FRAME_CFA_COL
 0

	)

51 #i‚de‡
DW_REG_TABLE_SIZE


52 
	#DW_REG_TABLE_SIZE
 66

	)

55 
	#DW_OP_fbªg
 0x91

	)

58 
Dw¨f_SmÆl
 
	mdw_off£t_ªÀv™t
;

59 
Dw¨f_SmÆl
 
	mdw_vÆue_ty≥
;

60 
Dw¨f_HÆf
 
	mdw_ªgnum
;

61 
Dw¨f_Unsig√d
 
	mdw_off£t_‹_block_Àn
;

62 
Dw¨f_På
 
	mdw_block_±r
;

63 } 
	tDw¨f_RegèbÀ_E¡ry3
;

66 
Dw¨f_RegèbÀ_E¡ry3
 
	mπ3_cÁ_ruÀ
;

67 
Dw¨f_HÆf
 
	mπ3_ªg_èbÀ_size
;

68 
Dw¨f_RegèbÀ_E¡ry3
 *
	mπ3_ruÀs
;

69 } 
	tDw¨f_RegèbÀ3
;

72 
Dw¨f_SmÆl
 
	mdw_off£t_ªÀv™t
;

73 
Dw¨f_SmÆl
 
	mdw_vÆue_ty≥
;

74 
Dw¨f_HÆf
 
	mdw_ªgnum
;

75 
Dw¨f_Addr
 
	mdw_off£t
;

76 } 
	tDw¨f_RegèbÀ_E¡ry
;

79 
Dw¨f_RegèbÀ_E¡ry
 
	mcÁ_ruÀ
;

80 
Dw¨f_RegèbÀ_E¡ry
 
	mruÀs
[
DW_REG_TABLE_SIZE
];

81 } 
	tDw¨f_RegèbÀ
;

83 
	s_Dw¨f_AârDef
 {

84 
uöt64_t
 
	mad_©åib
;

85 
uöt64_t
 
	mad_f‹m
;

86 
uöt64_t
 
	mad_off£t
;

87 }
	tDw¨f_AârDef
;

89 
	s_Dw¨f_Abbªv
 {

90 
uöt64_t
 
	mab_íåy
;

91 
uöt64_t
 
	mab_èg
;

92 
uöt8_t
 
	mab_chûdªn
;

93 
uöt64_t
 
	mab_off£t
;

94 
uöt64_t
 
	mab_Àngth
;

95 
uöt64_t
 
	mab_©num
;

96 
Dw¨f_AârDef
 
	mab_©ådef
[
NATTRDEF
];

97 }
	tDw¨f_Abbªv
;

99 
	s_Dw¨f_CU


102 
uöt64_t
 
	mcu_Àngth
;

103 
uöt16_t
 
	mvîsi⁄
;

104 
uöt8_t
 
	maddr_size
;

105 
uöt64_t
 
	mdebug_abbªv_off£t
;

108 
uöt8_t
 
	mcu_Àngth_size
;

109 
uöt8_t
 
	mcu_dw¨f_size
;

110 
uöt64_t
 
	mcu_√xt_off£t
;

111 
uöt64_t
 
	mcu_dõ_off£t
;

112 
uöt64_t
 
	mcu_off£t
;

113 }
	tDw¨f_CU
;

115 
	s_Dw¨f_Debug


117 
uöt64_t
 
	mcuº_off_dbgöfo
;

118 
uöt64_t
 
	mdbg_öfo_off£t_ñf
;

119 
uöt64_t
 
	mdbg_öfo_size
;

120 
uöt64_t
 (*
ªad
)(
	muöt8_t
 *, 
	muöt64_t
 *, );

121 
uöt64_t
 (*
decode
)(
	muöt8_t
 **, );

122 
	mdbg_poöãr_size
;

124 
uöt64_t
 
	mcuº_off_eh
;

125 
uöt64_t
 
	mdbg_eh_off£t
;

126 
uöt64_t
 
	mdbg_eh_size
;

128 
Dw¨f_HÆf
 
	mdbg_‰ame_ruÀ_èbÀ_size
;

129 
Dw¨f_HÆf
 
	mdbg_‰ame_ruÀ_öôül_vÆue
;

130 
Dw¨f_HÆf
 
	mdbg_‰ame_cÁ_vÆue
;

131 
Dw¨f_HÆf
 
	mdbg_‰ame_ßme_vÆue
;

132 
Dw¨f_HÆf
 
	mdbg_‰ame_undeföed_vÆue
;

134 
Dw¨f_RegèbÀ3
 *
	mdbg_öã∫Æ_ªg_èbÀ
;

138 
uöt8_t
 
	mÃ_©om
;

139 
uöt64_t
 
	mÃ_numbî
;

140 
uöt64_t
 
	mÃ_numbî2
;

141 
uöt64_t
 
	mÃ_off£t
;

142 } 
	tDw¨f_Loc
;

145 
uöt64_t
 
	mld_l›c
;

146 
uöt64_t
 
	mld_hùc
;

147 
uöt16_t
 
	mld_˚¡s
;

148 
Dw¨f_Loc
 
	mld_s
;;

149 } 
	tDw¨f_Locdesc
;

152 
uöt64_t
 
	mbl_Àn
;

153 *
	mbl_d©a
;

154 } 
	tDw¨f_Block
;

156 
	s_Dw¨f_Aâribuã
 {

157 
_Dw¨f_Dõ
 *
	m©_dõ
;

159 
uöt64_t
 
	m©_off£t
;

160 
uöt64_t
 
	m©_©åib
;

161 
uöt64_t
 
	m©_f‹m
;

162 
	m©_ödúe˘
;

164 
uöt64_t
 
	mu64
;

165 
öt64_t
 
	ms64
;

166 *
	ms
;

167 
uöt8_t
 *
	mu8p
;

168 } 
	mu
[2];

169 
Dw¨f_Block
 
	m©_block
;

170 
Dw¨f_Locdesc
 *
	m©_ld
;

171 
uöt64_t
 
	m©_ªlsym
;

172 c⁄° *
	m©_ªl£c
;

173 }
	tDw¨f_Aâribuã
;

175 
	s_Dw¨f_Dõ
 {

176 
uöt64_t
 
	mdõ_off£t
;

177 
uöt64_t
 
	mdõ_√xt_off
;

178 
uöt64_t
 
	mdõ_abnum
;

179 
uöt64_t
 
	mdõ_èg
;

180 
Dw¨f_Abbªv
 
	mdõ_ab
;

181 *
	mdõ_«me
;

182 
uöt8_t
 
	mdõ_©å_cou¡
;

183 
Dw¨f_CU
 *
	mcu_hódî
;

184 
_Dw¨f_Dõ
 *
	mcu_dõ
;

185 
Dw¨f_Aâribuã
 
	mdõ_©å
[
NATTRVAL
];

186 }
	tDw¨f_Dõ
;

189 
	mDW_OBJECT_MSB
,

190 
	mDW_OBJECT_LSB


191 } 
	tDw¨f_Endü¬ess
;

193 
	s_Dw¨f_Cõ
 {

194 
Dw¨f_Debug
 
	mcõ_dbg
;

195 
Dw¨f_Unsig√d
 
	mcõ_ödex
;

196 
Dw¨f_Unsig√d
 
	mcõ_off£t
;

197 
Dw¨f_Unsig√d
 
	mcõ_Àngth
;

198 
Dw¨f_HÆf
 
	mcõ_vîsi⁄
;

199 
uöt8_t
 *
	mcõ_augmít
;

200 
Dw¨f_Unsig√d
 
	mcõ_ehd©a
;

201 
Dw¨f_Unsig√d
 
	mcõ_ˇf
;

202 
Dw¨f_Sig√d
 
	mcõ_daf
;

203 
Dw¨f_Unsig√d
 
	mcõ_ø
;

204 
Dw¨f_Unsig√d
 
	mcõ_augÀn
;

205 
uöt8_t
 *
	mcõ_augd©a
;

206 
uöt8_t
 
	mcõ_fde_ícode
;

207 
Dw¨f_På
 
	mcõ_öôö°
;

208 
Dw¨f_Unsig√d
 
	mcõ_ö°Àn
;

211 
	s_Dw¨f_Fde
 {

212 
Dw¨f_Debug
 
	mfde_dbg
;

213 
Dw¨f_Cõ
 
	mfde_cõ
;

214 
Dw¨f_På
 
	mfde_addr
;

215 
Dw¨f_Unsig√d
 
	mfde_off£t
;

216 
Dw¨f_Unsig√d
 
	mfde_Àngth
;

217 
Dw¨f_Unsig√d
 
	mfde_cõoff
;

218 
Dw¨f_Unsig√d
 
	mfde_öôloc
;

219 
Dw¨f_Unsig√d
 
	mfde_adønge
;

220 
Dw¨f_Unsig√d
 
	mfde_augÀn
;

221 
uöt8_t
 *
	mfde_augd©a
;

222 
uöt8_t
 *
	mfde_ö°
;

223 
Dw¨f_Unsig√d
 
	mfde_ö°Àn
;

224 
Dw¨f_Unsig√d
 
	mfde_ö°ˇp
;

225 
Dw¨f_Unsig√d
 
	mfde_symndx
;

226 
Dw¨f_Unsig√d
 
	mfde_esymndx
;

227 
Dw¨f_Addr
 
	mfde_eoff
;

230 
	s_Dw¨f_Eº‹
 {

231 
	mîr_îr‹
;

232 
	mîr_ñ„º‹
;

233 c⁄° *
	mîr_func
;

234 
	mîr_löe
;

235 
	mîr_msg
[1024];

236 } 
	tDw¨f_Eº‹
;

238 
	s_Dw¨f_Se˘i⁄
 {

239 c⁄° *
	mds_«me
;

240 
Dw¨f_SmÆl
 *
	mds_d©a
;

241 
Dw¨f_Unsig√d
 
	mds_addr
;

242 
Dw¨f_Unsig√d
 
	mds_size
;

243 } 
	tDw¨f_Se˘i⁄
;

245 
	s_Dw¨f_Löe_
 {

247 
Dw¨f_Addr
 
	m _addr
;

248 
Dw¨f_Unsig√d
 
	m _symndx
;

249 
Dw¨f_Unsig√d
 
	m _fûío
;

250 
Dw¨f_Unsig√d
 
	m _löío
;

251 
Dw¨f_Sig√d
 
	m _cﬁumn
;

252 
Dw¨f_Boﬁ
 
	m _bblock
;

253 
Dw¨f_Boﬁ
 
	m _°mt
;

254 
Dw¨f_Boﬁ
 
	m _íd£q
;

256 }
	t_Dw¨f_Löe
;

258 
	s_Dw¨f_LöeInfo_
 {

259 
Dw¨f_Unsig√d
 
	mli_Àngth
;

260 
Dw¨f_HÆf
 
	mli_vîsi⁄
;

261 
Dw¨f_Unsig√d
 
	mli_hdæí
;

262 
Dw¨f_SmÆl
 
	mli_möÀn
;

263 
Dw¨f_SmÆl
 
	mli_def°mt
;

264 
öt8_t
 
	mli_lba£
;

265 
Dw¨f_SmÆl
 
	mli_Ã™ge
;

266 
Dw¨f_SmÆl
 
	mli_›ba£
;

267 
Dw¨f_SmÆl
 *
	mli_›Àn
;

268 **
	mli_öcdús
;

269 
Dw¨f_Unsig√d
 
	mli_ö˛í
;

270 **
	mli_l‚¨øy
;

271 
Dw¨f_Unsig√d
 
	mli_lÊí
;

273 
_Dw¨f_Löe
 
	mli_löe
;

274 
Dw¨f_Unsig√d
 
	mli_ Àn
;

276 }
	t_Dw¨f_LöeInfo
;

278 
_Dw¨f_LöeInfo
 *
	tDw¨f_LöeInfo
;

279 
_Dw¨f_Löe
 *
	tDw¨f_Löe
;

281 
dw¨f_§˛öes
(
Dw¨f_Dõ
 *
dõ
, 
Dw¨f_Löe
 
löebuf
, 
Dw¨f_Addr
 
pc
, 
Dw¨f_Eº‹
 *
îr‹
);

	@kern/dwarf_api.h

1 #i‚de‡
DWARF_API_H


2 
	#DWARF_API_H


	)

3 
	~<kîn/kdebug.h
>

5 
uöçå_t
 
ªad_£˘i⁄_hódîs
(uintptr_t, uintptr_t);

6 
föd_debug_£˘i⁄s
(
uöçå_t
);

7 
dw¨f_gë_pc_öfo
(
uöçå_t
 
addr
, 
Rùdebugöfo
 *
öfo
);

	@kern/dwarf_define.h

29 #i‚def 
_DWARF_DEFINE_H_


30 
	#_DWARF_DEFINE_H_


	)

32 
	#DW_TAG_¨øy_ty≥
 0x01

	)

33 
	#DW_TAG_˛ass_ty≥
 0x02

	)

34 
	#DW_TAG_íåy_poöt
 0x03

	)

35 
	#DW_TAG_íumî©i⁄_ty≥
 0x04

	)

36 
	#DW_TAG_f‹mÆ_∑ømëî
 0x05

	)

37 
	#DW_TAG_imp‹ãd_de˛¨©i⁄
 0x08

	)

38 
	#DW_TAG_œbñ
 0x0a

	)

39 
	#DW_TAG_Àxiˇl_block
 0x0b

	)

40 
	#DW_TAG_membî
 0x0d

	)

41 
	#DW_TAG_poöãr_ty≥
 0x0f

	)

42 
	#DW_TAG_ª„ªn˚_ty≥
 0x10

	)

43 
	#DW_TAG_compûe_unô
 0x11

	)

44 
	#DW_TAG_°rög_ty≥
 0x12

	)

45 
	#DW_TAG_°ru˘uª_ty≥
 0x13

	)

46 
	#DW_TAG_subroutöe_ty≥
 0x15

	)

47 
	#DW_TAG_ty≥def
 0x16

	)

48 
	#DW_TAG_uni⁄_ty≥
 0x17

	)

49 
	#DW_TAG_un•ecifõd_∑ømëîs
 0x18

	)

50 
	#DW_TAG_v¨ü¡
 0x19

	)

51 
	#DW_TAG_comm⁄_block
 0x1a

	)

52 
	#DW_TAG_comm⁄_ö˛usi⁄
 0x1b

	)

53 
	#DW_TAG_öhîô™˚
 0x1c

	)

54 
	#DW_TAG_ölöed_subroutöe
 0x1d

	)

55 
	#DW_TAG_moduÀ
 0x1e

	)

56 
	#DW_TAG_±r_to_membî_ty≥
 0x1f

	)

57 
	#DW_TAG_£t_ty≥
 0x20

	)

58 
	#DW_TAG_subønge_ty≥
 0x21

	)

59 
	#DW_TAG_wôh_°mt
 0x22

	)

60 
	#DW_TAG_ac˚ss_de˛¨©i⁄
 0x23

	)

61 
	#DW_TAG_ba£_ty≥
 0x24

	)

62 
	#DW_TAG_ˇtch_block
 0x25

	)

63 
	#DW_TAG_c⁄°_ty≥
 0x26

	)

64 
	#DW_TAG_c⁄°™t
 0x27

	)

65 
	#DW_TAG_íumî©‹
 0x28

	)

66 
	#DW_TAG_‰õnd
 0x2a

	)

67 
	#DW_TAG_«mñi°
 0x2b

	)

68 
	#DW_TAG_«mñi°_ôem
 0x2c

	)

69 
	#DW_TAG_∑cked_ty≥
 0x2d

	)

70 
	#DW_TAG_sub¥ogøm
 0x2e

	)

71 
	#DW_TAG_ãm∂©e_ty≥_∑ømëî
 0x2f

	)

72 
	#DW_TAG_ãm∂©e_ty≥_∑øm
 0x2f

	)

73 
	#DW_TAG_ãm∂©e_vÆue_∑ømëî
 0x30

	)

74 
	#DW_TAG_ãm∂©e_vÆue_∑øm
 0x30

	)

75 
	#DW_TAG_thrown_ty≥
 0x31

	)

76 
	#DW_TAG_åy_block
 0x32

	)

77 
	#DW_TAG_v¨ü¡_∑π
 0x33

	)

78 
	#DW_TAG_v¨übÀ
 0x34

	)

79 
	#DW_TAG_vﬁ©ûe_ty≥
 0x35

	)

80 
	#DW_TAG_dw¨f_¥o˚duª
 0x36

	)

81 
	#DW_TAG_ª°ri˘_ty≥
 0x37

	)

82 
	#DW_TAG_öãrÁ˚_ty≥
 0x38

	)

83 
	#DW_TAG_«me•a˚
 0x39

	)

84 
	#DW_TAG_imp‹ãd_moduÀ
 0x3a

	)

85 
	#DW_TAG_un•ecifõd_ty≥
 0x3b

	)

86 
	#DW_TAG_∑πül_unô
 0x3c

	)

87 
	#DW_TAG_imp‹ãd_unô
 0x3d

	)

88 
	#DW_TAG_c⁄dôi⁄
 0x3f

	)

89 
	#DW_TAG_sh¨ed_ty≥
 0x40

	)

90 
	#DW_TAG_ty≥_unô
 0x41

	)

91 
	#DW_TAG_rvÆue_ª„ªn˚_ty≥
 0x42

	)

92 
	#DW_TAG_ãm∂©e_Æüs
 0x43

	)

93 
	#DW_TAG_lo_u£r
 0x4080

	)

94 
	#DW_TAG_hi_u£r
 0xffff

	)

96 
	#DW_CHILDREN_no
 0x00

	)

97 
	#DW_CHILDREN_yes
 0x01

	)

99 
	#DW_AT_siblög
 0x01

	)

100 
	#DW_AT_loˇti⁄
 0x02

	)

101 
	#DW_AT_«me
 0x03

	)

102 
	#DW_AT_‹dîög
 0x09

	)

103 
	#DW_AT_subs¸_d©a
 0x0a

	)

104 
	#DW_AT_byã_size
 0x0b

	)

105 
	#DW_AT_bô_off£t
 0x0c

	)

106 
	#DW_AT_bô_size
 0x0d

	)

107 
	#DW_AT_ñemít_li°
 0x0f

	)

108 
	#DW_AT_°mt_li°
 0x10

	)

109 
	#DW_AT_low_pc
 0x11

	)

110 
	#DW_AT_high_pc
 0x12

	)

111 
	#DW_AT_œnguage
 0x13

	)

112 
	#DW_AT_membî
 0x14

	)

113 
	#DW_AT_dis¸
 0x15

	)

114 
	#DW_AT_dis¸_vÆue
 0x16

	)

115 
	#DW_AT_visibûôy
 0x17

	)

116 
	#DW_AT_imp‹t
 0x18

	)

117 
	#DW_AT_°rög_Àngth
 0x19

	)

118 
	#DW_AT_comm⁄_ª„ªn˚
 0x1a

	)

119 
	#DW_AT_comp_dú
 0x1b

	)

120 
	#DW_AT_c⁄°_vÆue
 0x1c

	)

121 
	#DW_AT_c⁄èöög_ty≥
 0x1d

	)

122 
	#DW_AT_deÁu…_vÆue
 0x1e

	)

123 
	#DW_AT_ölöe
 0x20

	)

124 
	#DW_AT_is_›ti⁄Æ
 0x21

	)

125 
	#DW_AT_lowî_bound
 0x22

	)

126 
	#DW_AT_¥odu˚r
 0x25

	)

127 
	#DW_AT_¥ŸŸy≥d
 0x27

	)

128 
	#DW_AT_ªtu∫_addr
 0x2a

	)

129 
	#DW_AT_°¨t_sc›e
 0x2c

	)

130 
	#DW_AT_bô_°ride
 0x2e

	)

131 
	#DW_AT_°ride_size
 0x2e

	)

132 
	#DW_AT_uµî_bound
 0x2f

	)

133 
	#DW_AT_ab°ø˘_‹igö
 0x31

	)

134 
	#DW_AT_ac˚ssibûôy
 0x32

	)

135 
	#DW_AT_addªss_˛ass
 0x33

	)

136 
	#DW_AT_¨tificül
 0x34

	)

137 
	#DW_AT_ba£_ty≥s
 0x35

	)

138 
	#DW_AT_ˇŒög_c⁄víti⁄
 0x36

	)

139 
	#DW_AT_cou¡
 0x37

	)

140 
	#DW_AT_d©a_membî_loˇti⁄
 0x38

	)

141 
	#DW_AT_de˛_cﬁumn
 0x39

	)

142 
	#DW_AT_de˛_fûe
 0x3a

	)

143 
	#DW_AT_de˛_löe
 0x3b

	)

144 
	#DW_AT_de˛¨©i⁄
 0x3c

	)

145 
	#DW_AT_dis¸_li°
 0x3d

	)

146 
	#DW_AT_ícodög
 0x3e

	)

147 
	#DW_AT_exã∫Æ
 0x3f

	)

148 
	#DW_AT_‰ame_ba£
 0x40

	)

149 
	#DW_AT_‰õnd
 0x41

	)

150 
	#DW_AT_idítifõr_ˇ£
 0x42

	)

151 
	#DW_AT_ma¸o_öfo
 0x43

	)

152 
	#DW_AT_«mñi°_ôem
 0x44

	)

153 
	#DW_AT_¥i‹ôy
 0x45

	)

154 
	#DW_AT_£gmít
 0x46

	)

155 
	#DW_AT_•ecifiˇti⁄
 0x47

	)

156 
	#DW_AT_°©ic_lök
 0x48

	)

157 
	#DW_AT_ty≥
 0x49

	)

158 
	#DW_AT_u£_loˇti⁄
 0x4a

	)

159 
	#DW_AT_v¨übÀ_∑ømëî
 0x4b

	)

160 
	#DW_AT_vútuÆôy
 0x4c

	)

161 
	#DW_AT_vèbÀ_ñem_loˇti⁄
 0x4d

	)

162 
	#DW_AT_Æloˇãd
 0x4e

	)

163 
	#DW_AT_assocüãd
 0x4f

	)

164 
	#DW_AT_d©a_loˇti⁄
 0x50

	)

165 
	#DW_AT_byã_°ride
 0x51

	)

166 
	#DW_AT_íåy_pc
 0x52

	)

167 
	#DW_AT_u£_UTF8
 0x53

	)

168 
	#DW_AT_exãnsi⁄
 0x54

	)

169 
	#DW_AT_ønges
 0x55

	)

170 
	#DW_AT_åampﬁöe
 0x56

	)

171 
	#DW_AT_ˇŒ_cﬁumn
 0x57

	)

172 
	#DW_AT_ˇŒ_fûe
 0x58

	)

173 
	#DW_AT_ˇŒ_löe
 0x59

	)

174 
	#DW_AT_des¸ùti⁄
 0x5a

	)

175 
	#DW_AT_bö¨y_sˇÀ
 0x5b

	)

176 
	#DW_AT_decimÆ_sˇÀ
 0x5c

	)

177 
	#DW_AT_smÆl
 0x5d

	)

178 
	#DW_AT_decimÆ_sign
 0x5e

	)

179 
	#DW_AT_digô_cou¡
 0x5f

	)

180 
	#DW_AT_pi˘uª_°rög
 0x60

	)

181 
	#DW_AT_muèbÀ
 0x61

	)

182 
	#DW_AT_thªads_sˇÀd
 0x62

	)

183 
	#DW_AT_ex∂icô
 0x63

	)

184 
	#DW_AT_obje˘_poöãr
 0x64

	)

185 
	#DW_AT_ídünôy
 0x65

	)

186 
	#DW_AT_ñemíèl
 0x66

	)

187 
	#DW_AT_puª
 0x67

	)

188 
	#DW_AT_ªcursive
 0x68

	)

189 
	#DW_AT_sig«tuª
 0x69

	)

190 
	#DW_AT_maö_sub¥ogøm
 0x6a

	)

191 
	#DW_AT_d©a_bô_off£t
 0x6b

	)

192 
	#DW_AT_c⁄°_ex¥
 0x6c

	)

193 
	#DW_AT_íum_˛ass
 0x6d

	)

194 
	#DW_AT_lökage_«me
 0x6e

	)

195 
	#DW_AT_lo_u£r
 0x2000

	)

196 
	#DW_AT_hi_u£r
 0x3fff

	)

198 
	#DW_FORM_addr
 0x01

	)

199 
	#DW_FORM_block2
 0x03

	)

200 
	#DW_FORM_block4
 0x04

	)

201 
	#DW_FORM_d©a2
 0x05

	)

202 
	#DW_FORM_d©a4
 0x06

	)

203 
	#DW_FORM_d©a8
 0x07

	)

204 
	#DW_FORM_°rög
 0x08

	)

205 
	#DW_FORM_block
 0x09

	)

206 
	#DW_FORM_block1
 0x0a

	)

207 
	#DW_FORM_d©a1
 0x0b

	)

208 
	#DW_FORM_Êag
 0x0c

	)

209 
	#DW_FORM_sd©a
 0x0d

	)

210 
	#DW_FORM_°Ω
 0x0e

	)

211 
	#DW_FORM_ud©a
 0x0f

	)

212 
	#DW_FORM_ªf_addr
 0x10

	)

213 
	#DW_FORM_ªf1
 0x11

	)

214 
	#DW_FORM_ªf2
 0x12

	)

215 
	#DW_FORM_ªf4
 0x13

	)

216 
	#DW_FORM_ªf8
 0x14

	)

217 
	#DW_FORM_ªf_ud©a
 0x15

	)

218 
	#DW_FORM_ödúe˘
 0x16

	)

219 
	#DW_FORM_£c_off£t
 0x17

	)

220 
	#DW_FORM_ex¥loc
 0x18

	)

221 
	#DW_FORM_Êag_¥e£¡
 0x19

	)

222 
	#DW_FORM_ªf_sig8
 0x20

	)

224 
	#DW_OP_addr
 0x03

	)

225 
	#DW_OP_dîef
 0x06

	)

226 
	#DW_OP_c⁄°1u
 0x08

	)

227 
	#DW_OP_c⁄°1s
 0x09

	)

228 
	#DW_OP_c⁄°2u
 0x0a

	)

229 
	#DW_OP_c⁄°2s
 0x0b

	)

230 
	#DW_OP_c⁄°4u
 0x0c

	)

231 
	#DW_OP_c⁄°4s
 0x0d

	)

232 
	#DW_OP_c⁄°8u
 0x0e

	)

233 
	#DW_OP_c⁄°8s
 0x0f

	)

234 
	#DW_OP_c⁄°u
 0x10

	)

235 
	#DW_OP_c⁄°s
 0x11

	)

236 
	#DW_OP_dup
 0x12

	)

237 
	#DW_OP_dr›
 0x13

	)

238 
	#DW_OP_ovî
 0x14

	)

239 
	#DW_OP_pick
 0x15

	)

240 
	#DW_OP_sw≠
 0x16

	)

241 
	#DW_OP_rŸ
 0x17

	)

242 
	#DW_OP_xdîef
 0x18

	)

243 
	#DW_OP_abs
 0x19

	)

244 
	#DW_OP_™d
 0x1a

	)

245 
	#DW_OP_div
 0x1b

	)

246 
	#DW_OP_möus
 0x1c

	)

247 
	#DW_OP_mod
 0x1d

	)

248 
	#DW_OP_mul
 0x1e

	)

249 
	#DW_OP_√g
 0x1f

	)

250 
	#DW_OP_nŸ
 0x20

	)

251 
	#DW_OP_‹
 0x21

	)

252 
	#DW_OP_∂us
 0x22

	)

253 
	#DW_OP_∂us_uc⁄°
 0x23

	)

254 
	#DW_OP_shl
 0x24

	)

255 
	#DW_OP_shr
 0x25

	)

256 
	#DW_OP_shø
 0x26

	)

257 
	#DW_OP_x‹
 0x27

	)

258 
	#DW_OP_bø
 0x28

	)

259 
	#DW_OP_eq
 0x29

	)

260 
	#DW_OP_ge
 0x2a

	)

261 
	#DW_OP_gt
 0x2b

	)

262 
	#DW_OP_À
 0x2c

	)

263 
	#DW_OP_…
 0x2d

	)

264 
	#DW_OP_√
 0x2e

	)

265 
	#DW_OP_skù
 0x2f

	)

266 
	#DW_OP_lô0
 0x30

	)

267 
	#DW_OP_lô1
 0x31

	)

268 
	#DW_OP_lô2
 0x32

	)

269 
	#DW_OP_lô3
 0x33

	)

270 
	#DW_OP_lô4
 0x34

	)

271 
	#DW_OP_lô5
 0x35

	)

272 
	#DW_OP_lô6
 0x36

	)

273 
	#DW_OP_lô7
 0x37

	)

274 
	#DW_OP_lô8
 0x38

	)

275 
	#DW_OP_lô9
 0x39

	)

276 
	#DW_OP_lô10
 0x3a

	)

277 
	#DW_OP_lô11
 0x3b

	)

278 
	#DW_OP_lô12
 0x3c

	)

279 
	#DW_OP_lô13
 0x3d

	)

280 
	#DW_OP_lô14
 0x3e

	)

281 
	#DW_OP_lô15
 0x3f

	)

282 
	#DW_OP_lô16
 0x40

	)

283 
	#DW_OP_lô17
 0x41

	)

284 
	#DW_OP_lô18
 0x42

	)

285 
	#DW_OP_lô19
 0x43

	)

286 
	#DW_OP_lô20
 0x44

	)

287 
	#DW_OP_lô21
 0x45

	)

288 
	#DW_OP_lô22
 0x46

	)

289 
	#DW_OP_lô23
 0x47

	)

290 
	#DW_OP_lô24
 0x48

	)

291 
	#DW_OP_lô25
 0x49

	)

292 
	#DW_OP_lô26
 0x4a

	)

293 
	#DW_OP_lô27
 0x4b

	)

294 
	#DW_OP_lô28
 0x4c

	)

295 
	#DW_OP_lô29
 0x4d

	)

296 
	#DW_OP_lô30
 0x4e

	)

297 
	#DW_OP_lô31
 0x4f

	)

298 
	#DW_OP_ªg0
 0x50

	)

299 
	#DW_OP_ªg1
 0x51

	)

300 
	#DW_OP_ªg2
 0x52

	)

301 
	#DW_OP_ªg3
 0x53

	)

302 
	#DW_OP_ªg4
 0x54

	)

303 
	#DW_OP_ªg5
 0x55

	)

304 
	#DW_OP_ªg6
 0x56

	)

305 
	#DW_OP_ªg7
 0x57

	)

306 
	#DW_OP_ªg8
 0x58

	)

307 
	#DW_OP_ªg9
 0x59

	)

308 
	#DW_OP_ªg10
 0x5a

	)

309 
	#DW_OP_ªg11
 0x5b

	)

310 
	#DW_OP_ªg12
 0x5c

	)

311 
	#DW_OP_ªg13
 0x5d

	)

312 
	#DW_OP_ªg14
 0x5e

	)

313 
	#DW_OP_ªg15
 0x5f

	)

314 
	#DW_OP_ªg16
 0x60

	)

315 
	#DW_OP_ªg17
 0x61

	)

316 
	#DW_OP_ªg18
 0x62

	)

317 
	#DW_OP_ªg19
 0x63

	)

318 
	#DW_OP_ªg20
 0x64

	)

319 
	#DW_OP_ªg21
 0x65

	)

320 
	#DW_OP_ªg22
 0x66

	)

321 
	#DW_OP_ªg23
 0x67

	)

322 
	#DW_OP_ªg24
 0x68

	)

323 
	#DW_OP_ªg25
 0x69

	)

324 
	#DW_OP_ªg26
 0x6a

	)

325 
	#DW_OP_ªg27
 0x6b

	)

326 
	#DW_OP_ªg28
 0x6c

	)

327 
	#DW_OP_ªg29
 0x6d

	)

328 
	#DW_OP_ªg30
 0x6e

	)

329 
	#DW_OP_ªg31
 0x6f

	)

330 
	#DW_OP_bªg0
 0x70

	)

331 
	#DW_OP_bªg1
 0x71

	)

332 
	#DW_OP_bªg2
 0x72

	)

333 
	#DW_OP_bªg3
 0x73

	)

334 
	#DW_OP_bªg4
 0x74

	)

335 
	#DW_OP_bªg5
 0x75

	)

336 
	#DW_OP_bªg6
 0x76

	)

337 
	#DW_OP_bªg7
 0x77

	)

338 
	#DW_OP_bªg8
 0x78

	)

339 
	#DW_OP_bªg9
 0x79

	)

340 
	#DW_OP_bªg10
 0x7a

	)

341 
	#DW_OP_bªg11
 0x7b

	)

342 
	#DW_OP_bªg12
 0x7c

	)

343 
	#DW_OP_bªg13
 0x7d

	)

344 
	#DW_OP_bªg14
 0x7e

	)

345 
	#DW_OP_bªg15
 0x7f

	)

346 
	#DW_OP_bªg16
 0x80

	)

347 
	#DW_OP_bªg17
 0x81

	)

348 
	#DW_OP_bªg18
 0x82

	)

349 
	#DW_OP_bªg19
 0x83

	)

350 
	#DW_OP_bªg20
 0x84

	)

351 
	#DW_OP_bªg21
 0x85

	)

352 
	#DW_OP_bªg22
 0x86

	)

353 
	#DW_OP_bªg23
 0x87

	)

354 
	#DW_OP_bªg24
 0x88

	)

355 
	#DW_OP_bªg25
 0x89

	)

356 
	#DW_OP_bªg26
 0x8a

	)

357 
	#DW_OP_bªg27
 0x8b

	)

358 
	#DW_OP_bªg28
 0x8c

	)

359 
	#DW_OP_bªg29
 0x8d

	)

360 
	#DW_OP_bªg30
 0x8e

	)

361 
	#DW_OP_bªg31
 0x8f

	)

362 
	#DW_OP_ªgx
 0x90

	)

363 
	#DW_OP_fbªg
 0x91

	)

364 
	#DW_OP_bªgx
 0x92

	)

365 
	#DW_OP_põ˚
 0x93

	)

366 
	#DW_OP_dîef_size
 0x94

	)

367 
	#DW_OP_xdîef_size
 0x95

	)

368 
	#DW_OP_n›
 0x96

	)

369 
	#DW_OP_push_obje˘_addªss
 0x97

	)

370 
	#DW_OP_ˇŒ2
 0x98

	)

371 
	#DW_OP_ˇŒ4
 0x99

	)

372 
	#DW_OP_ˇŒ_ªf
 0x9a

	)

373 
	#DW_OP_f‹m_és_addªss
 0x9b

	)

374 
	#DW_OP_ˇŒ_‰ame_cÁ
 0x9c

	)

375 
	#DW_OP_bô_põ˚
 0x9d

	)

376 
	#DW_OP_im∂icô_vÆue
 0x9e

	)

377 
	#DW_OP_°ack_vÆue
 0x9f

	)

378 
	#DW_OP_lo_u£r
 0xe0

	)

379 
	#DW_OP_GNU_push_és_addªss
 0xe0

	)

380 
	#DW_OP_hi_u£r
 0xff

	)

382 
	#DW_ATE_addªss
 0x1

	)

383 
	#DW_ATE_boﬁón
 0x2

	)

384 
	#DW_ATE_com∂ex_Êﬂt
 0x3

	)

385 
	#DW_ATE_Êﬂt
 0x4

	)

386 
	#DW_ATE_sig√d
 0x5

	)

387 
	#DW_ATE_sig√d_ch¨
 0x6

	)

388 
	#DW_ATE_unsig√d
 0x7

	)

389 
	#DW_ATE_unsig√d_ch¨
 0x8

	)

390 
	#DW_ATE_imagö¨y_Êﬂt
 0x9

	)

391 
	#DW_ATE_∑cked_decimÆ
 0xa

	)

392 
	#DW_ATE_numîic_°rög
 0xb

	)

393 
	#DW_ATE_edôed
 0xc

	)

394 
	#DW_ATE_sig√d_fixed
 0xd

	)

395 
	#DW_ATE_unsig√d_fixed
 0xe

	)

396 
	#DW_ATE_decimÆ_Êﬂt
 0xf

	)

397 
	#DW_ATE_lo_u£r
 0x80

	)

398 
	#DW_ATE_hi_u£r
 0xff

	)

400 
	#DW_ACCESS_public
 0x01

	)

401 
	#DW_ACCESS_¥Ÿe˘ed
 0x02

	)

402 
	#DW_ACCESS_¥iv©e
 0x03

	)

404 
	#DW_END_deÁu…
 0x00

	)

405 
	#DW_END_big
 0x01

	)

406 
	#DW_END_lôée
 0x02

	)

407 
	#DW_END_lo_u£r
 0x40

	)

408 
	#DW_END_high_u£r
 0xff

	)

410 
	#DW_VIS_loˇl
 0x01

	)

411 
	#DW_VIS_exp‹ãd
 0x02

	)

412 
	#DW_VIS_quÆifõd
 0x03

	)

414 
	#DW_VIRTUALITY_n⁄e
 0x00

	)

415 
	#DW_VIRTUALITY_vútuÆ
 0x01

	)

416 
	#DW_VIRTUALITY_puª_vútuÆ
 0x02

	)

418 
	#DW_LANG_C89
 0x0001

	)

419 
	#DW_LANG_C
 0x0002

	)

420 
	#DW_LANG_Ada83
 0x0003

	)

421 
	#DW_LANG_C_∂us_∂us
 0x0004

	)

422 
	#DW_LANG_Cobﬁ74
 0x0005

	)

423 
	#DW_LANG_Cobﬁ85
 0x0006

	)

424 
	#DW_LANG_F‹å™77
 0x0007

	)

425 
	#DW_LANG_F‹å™90
 0x0008

	)

426 
	#DW_LANG_Pasˇl83
 0x0009

	)

427 
	#DW_LANG_Moduœ2
 0x000a

	)

428 
	#DW_LANG_Java
 0x000b

	)

429 
	#DW_LANG_C99
 0x000c

	)

430 
	#DW_LANG_Ada95
 0x000d

	)

431 
	#DW_LANG_F‹å™95
 0x000e

	)

432 
	#DW_LANG_PLI
 0x000f

	)

433 
	#DW_LANG_ObjC
 0x0010

	)

434 
	#DW_LANG_ObjC_∂us_∂us
 0x0011

	)

435 
	#DW_LANG_UPC
 0x0012

	)

436 
	#DW_LANG_D
 0x0013

	)

437 
	#DW_LANG_lo_u£r
 0x8000

	)

438 
	#DW_LANG_hi_u£r
 0xffff

	)

440 
	#DW_ID_ˇ£_£nsôive
 0x00

	)

441 
	#DW_ID_up_ˇ£
 0x01

	)

442 
	#DW_ID_down_ˇ£
 0x02

	)

443 
	#DW_ID_ˇ£_ö£nsôive
 0x03

	)

445 
	#DW_CC_n‹mÆ
 0x01

	)

446 
	#DW_CC_¥ogøm
 0x02

	)

447 
	#DW_CC_noˇŒ
 0x03

	)

448 
	#DW_CC_lo_u£r
 0x40

	)

449 
	#DW_CC_hi_u£r
 0xff

	)

451 
	#DW_INL_nŸ_ölöed
 0x00

	)

452 
	#DW_INL_ölöed
 0x01

	)

453 
	#DW_INL_de˛¨ed_nŸ_ölöed
 0x02

	)

454 
	#DW_INL_de˛¨ed_ölöed
 0x03

	)

456 
	#DW_ORD_row_maj‹
 0x00

	)

457 
	#DW_ORD_cﬁ_maj‹
 0x01

	)

459 
	#DW_DS_unsig√d
 0x01

	)

460 
	#DW_DS_Àadög_ovîpunch
 0x02

	)

461 
	#DW_DS_åaûög_ovîpunch
 0x03

	)

462 
	#DW_DS_Àadög_£∑øã
 0x04

	)

463 
	#DW_DS_åaûög_£∑øã
 0x05

	)

465 
	#DW_DSC_œbñ
 0x00

	)

466 
	#DW_DSC_ønge
 0x01

	)

468 
	#DW_LNS_c›y
 0x01

	)

469 
	#DW_LNS_adv™˚_pc
 0x02

	)

470 
	#DW_LNS_adv™˚_löe
 0x03

	)

471 
	#DW_LNS_£t_fûe
 0x04

	)

472 
	#DW_LNS_£t_cﬁumn
 0x05

	)

473 
	#DW_LNS_√g©e_°mt
 0x06

	)

474 
	#DW_LNS_£t_basic_block
 0x07

	)

475 
	#DW_LNS_c⁄°_add_pc
 0x08

	)

476 
	#DW_LNS_fixed_adv™˚_pc
 0x09

	)

477 
	#DW_LNS_£t_¥ﬁogue_íd
 0x0a

	)

478 
	#DW_LNS_£t_ïûogue_begö
 0x0b

	)

479 
	#DW_LNS_£t_iß
 0x0c

	)

481 
	#DW_LNE_íd_£quí˚
 0x01

	)

482 
	#DW_LNE_£t_addªss
 0x02

	)

483 
	#DW_LNE_deföe_fûe
 0x03

	)

484 
	#DW_LNE_lo_u£r
 0x80

	)

485 
	#DW_LNE_hi_u£r
 0xff

	)

487 
	#DW_MACINFO_deföe
 0x01

	)

488 
	#DW_MACINFO_undef
 0x02

	)

489 
	#DW_MACINFO_°¨t_fûe
 0x03

	)

490 
	#DW_MACINFO_íd_fûe
 0x04

	)

491 
	#DW_MACINFO_víd‹_ext
 0xff

	)

493 
	#DW_CFA_adv™˚_loc
 0x40

	)

494 
	#DW_CFA_off£t
 0x80

	)

495 
	#DW_CFA_ª°‹e
 0xc0

	)

496 
	#DW_CFA_exãnded
 0

	)

498 
	#DW_CFA_n›
 0x00

	)

499 
	#DW_CFA_£t_loc
 0x01

	)

500 
	#DW_CFA_adv™˚_loc1
 0x02

	)

501 
	#DW_CFA_adv™˚_loc2
 0x03

	)

502 
	#DW_CFA_adv™˚_loc4
 0x04

	)

503 
	#DW_CFA_off£t_exãnded
 0x05

	)

504 
	#DW_CFA_ª°‹e_exãnded
 0x06

	)

505 
	#DW_CFA_undeföed
 0x07

	)

506 
	#DW_CFA_ßme_vÆue
 0x08

	)

507 
	#DW_CFA_ªgi°î
 0x09

	)

508 
	#DW_CFA_ªmembî_°©e
 0x0a

	)

509 
	#DW_CFA_ª°‹e_°©e
 0x0b

	)

510 
	#DW_CFA_def_cÁ
 0x0c

	)

511 
	#DW_CFA_def_cÁ_ªgi°î
 0x0d

	)

512 
	#DW_CFA_def_cÁ_off£t
 0x0e

	)

513 
	#DW_CFA_def_cÁ_ex¥essi⁄
 0x0f

	)

514 
	#DW_CFA_ex¥essi⁄
 0x10

	)

515 
	#DW_CFA_off£t_exãnded_sf
 0x11

	)

516 
	#DW_CFA_def_cÁ_sf
 0x12

	)

517 
	#DW_CFA_def_cÁ_off£t_sf
 0x13

	)

518 
	#DW_CFA_vÆ_off£t
 0x14

	)

519 
	#DW_CFA_vÆ_off£t_sf
 0x15

	)

520 
	#DW_CFA_vÆ_ex¥essi⁄
 0x16

	)

521 
	#DW_CFA_lo_u£r
 0x1c

	)

522 
	#DW_CFA_high_u£r
 0x3f

	)

528 
	#DW_EH_PE_ab•å
 0x00

	)

529 
	#DW_EH_PE_uÀb128
 0x01

	)

530 
	#DW_EH_PE_ud©a2
 0x02

	)

531 
	#DW_EH_PE_ud©a4
 0x03

	)

532 
	#DW_EH_PE_ud©a8
 0x04

	)

533 
	#DW_EH_PE_¶eb128
 0x09

	)

534 
	#DW_EH_PE_sd©a2
 0x0a

	)

535 
	#DW_EH_PE_sd©a4
 0x0b

	)

536 
	#DW_EH_PE_sd©a8
 0x0c

	)

537 
	#DW_EH_PE_p¸ñ
 0x10

	)

538 
	#DW_EH_PE_ãxåñ
 0x20

	)

539 
	#DW_EH_PE_d©¨ñ
 0x30

	)

540 
	#DW_EH_PE_fun¸ñ
 0x40

	)

541 
	#DW_EH_PE_Æig√d
 0x50

	)

542 
	#DW_EH_PE_omô
 0xff

	)

	@kern/dwarf_elf.h

1 #i‚de‡
ELF_H


2 
	#ELF_H


	)

4 
	#ELF_MAGIC
 0x464C457FU

	)

6 
	#EI_NIDENT
 16

	)

7 
	#EI_DATA
 5

	)

9 
	#ELFDATANONE
 0

	)

10 
	#ELFDATA2LSB
 1

	)

11 
	#ELFDATA2MSB
 2

	)

13 
	#ELFCLASSNONE
 0

	)

14 
	#ELFCLASS32
 1

	)

15 
	#ELFCLASS64
 2

	)

17 *
ñf_ba£_±r
;

19 
	#X86_64
 1

	)

21 #ifde‡
X86_64


23 
	s_Elf64
 {

26 
	me_idít
[16];

27 
uöt16_t
 
	me_ty≥
;

28 
uöt16_t
 
	me_machöe
;

29 
uöt32_t
 
	me_vîsi⁄
;

30 
uöt64_t
 
	me_íåy
;

31 
uöt64_t
 
	me_phoff
;

32 
uöt64_t
 
	me_shoff
;

33 
uöt32_t
 
	me_Êags
;

34 
uöt16_t
 
	me_ehsize
;

35 
uöt16_t
 
	me_phítsize
;

36 
uöt16_t
 
	me_phnum
;

37 
uöt16_t
 
	me_shítsize
;

38 
uöt16_t
 
	me_shnum
;

39 
uöt16_t
 
	me_sh°∫dx
;

40 }
	tElf64
;

42 
	s_Proghdr64
 {

43 
uöt32_t
 
	mp_ty≥
;

44 
uöt32_t
 
	mp_Êags
;

45 
uöt64_t
 
	mp_off£t
;

46 
uöt64_t
 
	mp_va
;

47 
uöt64_t
 
	mp_∑
;

48 
uöt64_t
 
	mp_fûesz
;

49 
uöt64_t
 
	mp_memsz
;

50 
uöt64_t
 
	mp_Æign
;

51 }
	tProghdr64
;

54 
uöt32_t
 
	msh_«me
;

55 
uöt32_t
 
	msh_ty≥
;

56 
uöt64_t
 
	msh_Êags
;

57 
uöt64_t
 
	msh_addr
;

58 
uöt64_t
 
	msh_off£t
;

59 
uöt64_t
 
	msh_size
;

60 
uöt32_t
 
	msh_lök
;

61 
uöt32_t
 
	msh_öfo
;

62 
uöt64_t
 
	msh_addølign
;

63 
uöt64_t
 
	msh_ítsize
;

64 } 
	tSe˘hdr64
;

66 
	#Elf
 
Elf64


	)

67 
	#Proghdr
 
Proghdr64


	)

68 
	#Se˘hdr
 
Se˘hdr64


	)

72 
	s_Elf32
 {

73 
	me_idít
[16];

74 
uöt16_t
 
	me_ty≥
;

75 
uöt16_t
 
	me_machöe
;

76 
uöt32_t
 
	me_vîsi⁄
;

77 
uöt32_t
 
	me_íåy
;

78 
uöt32_t
 
	me_phoff
;

79 
uöt32_t
 
	me_shoff
;

80 
uöt32_t
 
	me_Êags
;

81 
uöt16_t
 
	me_ehsize
;

82 
uöt16_t
 
	me_phítsize
;

83 
uöt16_t
 
	me_phnum
;

84 
uöt16_t
 
	me_shítsize
;

85 
uöt16_t
 
	me_shnum
;

86 
uöt16_t
 
	me_sh°∫dx
;

87 }
	tElf32
;

89 
	sProghdr
 {

90 
uöt32_t
 
	mp_ty≥
;

91 
uöt32_t
 
	mp_Êags
;

92 
uöt32_t
 
	mp_off£t
;

93 
uöt32_t
 
	mp_va
;

94 
uöt32_t
 
	mp_∑
;

95 
uöt32_t
 
	mp_fûesz
;

96 
uöt32_t
 
	mp_memsz
;

97 
uöt32_t
 
	mp_Æign
;

98 }
	tProghdr32
;

100 
	sSe˘hdr
 {

101 
uöt32_t
 
	msh_«me
;

102 
uöt32_t
 
	msh_ty≥
;

103 
uöt32_t
 
	msh_Êags
;

104 
uöt32_t
 
	msh_addr
;

105 
uöt32_t
 
	msh_off£t
;

106 
uöt32_t
 
	msh_size
;

107 
uöt32_t
 
	msh_lök
;

108 
uöt32_t
 
	msh_öfo
;

109 
uöt32_t
 
	msh_addølign
;

110 
uöt32_t
 
	msh_ítsize
;

111 }
	tSe˘hdr32
;

113 
	#Elf
 
Elf32


	)

114 
	#Proghdr
 
Proghdr32


	)

115 
	#Se˘hdr
 
Se˘hdr32


	)

120 
	#ELF_PROG_LOAD
 1

	)

123 
	#ELF_PROG_FLAG_EXEC
 1

	)

124 
	#ELF_PROG_FLAG_WRITE
 2

	)

125 
	#ELF_PROG_FLAG_READ
 4

	)

128 
	#ELF_SHT_NULL
 0

	)

129 
	#ELF_SHT_PROGBITS
 1

	)

130 
	#ELF_SHT_SYMTAB
 2

	)

131 
	#ELF_SHT_STRTAB
 3

	)

134 
	#ELF_SHN_UNDEF
 0

	)

	@kern/dwarf_error.h

1 #i‚de‡
DWARF_ERROR_H_


2 
	#DWARF_ERROR_H_


	)

4 
	#DW_DLV_NO_ENTRY
 -1

	)

5 
	#DW_DLV_OK
 0

	)

6 
	#DW_DLV_ERROR
 1

	)

9 
	mDW_DLE_NONE
,

10 
	mDW_DLE_ERROR
,

11 
	mDW_DLE_ARGUMENT
,

12 
	mDW_DLE_DEBUG_INFO_NULL
,

13 
	mDW_DLE_NO_ENTRY
,

14 
	mDW_DLE_MEMORY
,

15 
	mDW_DLE_ELF
,

16 
	mDW_DLE_CU_LENGTH_ERROR
,

17 
	mDW_DLE_VERSION_STAMP_ERROR
,

18 
	mDW_DLE_DEBUG_ABBREV_NULL
,

19 
	mDW_DLE_DIE_NO_CU_CONTEXT
,

20 
	mDW_DLE_LOC_EXPR_BAD
,

21 
	mDW_DLE_EXPR_LENGTH_BAD
,

22 
	mDW_DLE_DEBUG_LOC_SECTION_SHORT
,

23 
	mDW_DLE_ATTR_FORM_BAD
,

24 
	mDW_DLE_DEBUG_LINE_LENGTH_BAD
,

25 
	mDW_DLE_LINE_FILE_NUM_BAD
,

26 
	mDW_DLE_DIR_INDEX_BAD
,

27 
	mDW_DLE_DEBUG_FRAME_LENGTH_BAD
,

28 
	mDW_DLE_NO_CIE_FOR_FDE
,

29 
	mDW_DLE_FRAME_AUGMENTATION_UNKNOWN
,

30 
	mDW_DLE_FRAME_INSTR_EXEC_ERROR
,

31 
	mDW_DLE_FRAME_VERSION_BAD
,

32 
	mDW_DLE_FRAME_TABLE_COL_BAD
,

33 
	mDW_DLE_DF_REG_NUM_TOO_HIGH
,

34 
	mDW_DLE_PC_NOT_IN_FDE_RANGE
,

35 
	mDW_DLE_ARANGE_OFFSET_BAD
,

36 
	mDW_DLE_DEBUG_MACRO_INCONSISTENT
,

37 
	mDW_DLE_ELF_SECT_ERR
,

38 
	mDW_DLE_NUM


41 
	#DWARF_SET_ERROR
(
x
, 
y
 ,
z
Ë{ }

	)

	@kern/dwarf_lineno.h

1 #i‚de‡
DWARF_LINENO_H


3 
Dw¨f_Aâribuã
 *
_dw¨f_©å_föd
(
Dw¨f_Dõ
 *, 
uöt16_t
);

7 
_dw¨f_löío_add_fûe
(
Dw¨f_LöeInfo
, 
uöt8_t
 **, c⁄° *, 
Dw¨f_Eº‹
 *, 
Dw¨f_Debug
);

10 
_dw¨f_löío_run_¥ogøm
(
Dw¨f_CU
 *
cu
, 
Dw¨f_LöeInfo
 
li
, 
uöt8_t
 *
p
,

11 
uöt8_t
 *
≥
, 
Dw¨f_Addr
 
pc
, 
Dw¨f_Eº‹
 *
îr‹
);

14 
_dw¨f_löío_add_fûe
(
Dw¨f_LöeInfo
 
li
, 
uöt8_t
 **
p
, c⁄° *
compdú
,

15 
Dw¨f_Eº‹
 *
îr‹
, 
Dw¨f_Debug
 
dbg
);

18 
_dw¨f_löío_öô
(
Dw¨f_Dõ
 *
dõ
, 
uöt64_t
 
off£t
, 
Dw¨f_LöeInfo
 
löfo
, 
Dw¨f_Addr
 
pc
, 
Dw¨f_Eº‹
 *
îr‹
);

	@kern/e1000.c

2 
	~<kîn/e1000.h
>

6 
	~<öc/as£π.h
>

7 
	~<öc/îr‹.h
>

8 
	~<öc/°rög.h
>

9 
	~<kîn/pm≠.h
>

12 
	#E1000_STATUS
 (0x00008/4Ë

	)

13 
	#E1000_EERD
 (0x00014/4Ë

	)

15 
	#E1000_EERD_START
 0x01

	)

16 
	#E1000_EERD_DONE
 0x10

	)

18 
	#E1000_IMS
 (0x000D0/4Ë

	)

19 
	#E1000_RCTL
 (0x00100/4Ë

	)

20 
	#E1000_TCTL
 (0x00400/4Ë

	)

21 
	#E1000_TIPG
 (0x00410/4Ë

	)

22 
	#E1000_RDBAL
 (0x02800/4Ë

	)

23 
	#E1000_RDLEN
 (0x02808/4Ë

	)

24 
	#E1000_RDH
 (0x02810/4Ë

	)

25 
	#E1000_RDT
 (0x02818/4Ë

	)

26 
	#E1000_TDBAL
 (0x03800/4Ë

	)

27 
	#E1000_TDLEN
 (0x03808/4Ë

	)

28 
	#E1000_TDH
 (0x03810/4Ë

	)

29 
	#E1000_TDT
 (0x03818/4Ë

	)

30 
	#E1000_RAL
 (0x05400/4Ë

	)

31 
	#E1000_RAH
 (0x05404/4Ë

	)

35 
	#E1000_TCTL_RST
 0x00000001

	)

36 
	#E1000_TCTL_EN
 0x00000002

	)

37 
	#E1000_TCTL_BCE
 0x00000004

	)

38 
	#E1000_TCTL_PSP
 0x00000008

	)

39 
	#E1000_TCTL_CT
 0x00000ff0

	)

40 
	#E1000_TCTL_CT_SHIFT
 4

	)

41 
	#E1000_TCTL_COLD
 0x003ff000

	)

42 
	#E1000_TCTL_COLD_SHIFT
 12

	)

43 
	#E1000_TCTL_SWXOFF
 0x00400000

	)

44 
	#E1000_TCTL_PBE
 0x00800000

	)

45 
	#E1000_TCTL_RTLC
 0x01000000

	)

46 
	#E1000_TCTL_NRTU
 0x02000000

	)

47 
	#E1000_TCTL_MULR
 0x10000000

	)

50 
	#E1000_RCTL_RST
 0x00000001

	)

51 
	#E1000_RCTL_EN
 0x00000002

	)

52 
	#E1000_RCTL_SBP
 0x00000004

	)

53 
	#E1000_RCTL_UPE
 0x00000008

	)

54 
	#E1000_RCTL_MPE
 0x00000010

	)

55 
	#E1000_RCTL_LPE
 0x00000020

	)

56 
	#E1000_RCTL_LBM_NO
 0x00000000

	)

57 
	#E1000_RCTL_LBM_MAC
 0x00000040

	)

58 
	#E1000_RCTL_LBM_SLP
 0x00000080

	)

59 
	#E1000_RCTL_LBM_TCVR
 0x000000C0

	)

60 
	#E1000_RCTL_DTYP_MASK
 0x00000C00

	)

61 
	#E1000_RCTL_DTYP_PS
 0x00000400

	)

62 
	#E1000_RCTL_RDMTS_HALF
 0x00000000

	)

63 
	#E1000_RCTL_RDMTS_QUAT
 0x00000100

	)

64 
	#E1000_RCTL_RDMTS_EIGTH
 0x00000200

	)

65 
	#E1000_RCTL_MO_SHIFT
 12

	)

66 
	#E1000_RCTL_MO_0
 0x00000000

	)

67 
	#E1000_RCTL_MO_1
 0x00001000

	)

68 
	#E1000_RCTL_MO_2
 0x00002000

	)

69 
	#E1000_RCTL_MO_3
 0x00003000

	)

70 
	#E1000_RCTL_MDR
 0x00004000

	)

71 
	#E1000_RCTL_BAM
 0x00008000

	)

73 
	#E1000_RCTL_SZ_2048
 0x00000000

	)

74 
	#E1000_RCTL_SZ_1024
 0x00010000

	)

75 
	#E1000_RCTL_SZ_512
 0x00020000

	)

76 
	#E1000_RCTL_SZ_256
 0x00030000

	)

78 
	#E1000_RCTL_SZ_16384
 0x00010000

	)

79 
	#E1000_RCTL_SZ_8192
 0x00020000

	)

80 
	#E1000_RCTL_SZ_4096
 0x00030000

	)

81 
	#E1000_RCTL_VFE
 0x00040000

	)

82 
	#E1000_RCTL_CFIEN
 0x00080000

	)

83 
	#E1000_RCTL_CFI
 0x00100000

	)

84 
	#E1000_RCTL_DPF
 0x00400000

	)

85 
	#E1000_RCTL_PMCF
 0x00800000

	)

86 
	#E1000_RCTL_BSEX
 0x02000000

	)

87 
	#E1000_RCTL_SECRC
 0x04000000

	)

88 
	#E1000_RCTL_FLXBUF_MASK
 0x78000000

	)

89 
	#E1000_RCTL_FLXBUF_SHIFT
 27

	)

91 vﬁ©ûê
uöt32_t
 *
	gªgs
;

94 
	#DATA_MAX
 1518

	)

98 
	#E1000_TXD_CMD_EOP
 0x01

	)

99 
	#E1000_TXD_CMD_RS
 0x08

	)

102 
	#E1000_TXD_STAT_DD
 0x00000001

	)

105 
	stx_desc


107 
uöt64_t
 
	maddr
;

108 
uöt16_t
 
	mÀngth
;

109 
uöt8_t
 
	mcso
;

110 
uöt8_t
 
	mcmd
;

111 
uöt8_t
 
	m°©us
;

112 
uöt8_t
 
	mcss
;

113 
uöt16_t
 
	m•ecül
;

114 } 
__©åibuã__
((
∑cked
));

116 
	#TX_RING_SIZE
 16

	)

117 
tx_desc
 
	gtx_rög
[
TX_RING_SIZE
] 
__©åibuã__
((
Æig√d
(16)));

118 
	gtx_d©a
[
TX_RING_SIZE
][
DATA_MAX
];

121 
	#E1000_RXD_STAT_DD
 0x01

	)

122 
	#E1000_RXD_STAT_EOP
 0x02

	)

125 
	srx_desc


127 
uöt64_t
 
	maddr
;

128 
uöt16_t
 
	mÀngth
;

129 
uöt16_t
 
	mcsum
;

130 
uöt8_t
 
	m°©us
;

131 
uöt8_t
 
	mîr‹s
;

132 
uöt16_t
 
	m•ecül
;

133 } 
__©åibuã__
((
∑cked
));

135 
	#RX_RING_SIZE
 1000

	)

136 
rx_desc
 
	grx_rög
[
RX_RING_SIZE
] 
__©åibuã__
((
Æig√d
(16)));

137 
	grx_d©a
[
RX_RING_SIZE
][2048];

140 
	$e1000_©èch
(
pci_func
 *
pcif
)

142 
i
;

144 
	`pci_func_íabÀ
(
pcif
);

147 
ªgs
 = 
	`mmio_m≠_ªgi⁄
(
pcif
->
ªg_ba£
[0],Öcif->
ªg_size
[0]);

150 
i
 = 0; i < 
TX_RING_SIZE
; i++) {

151 
tx_rög
[
i
].
addr
 = 
	`PADDR
(
tx_d©a
[i]);

152 
tx_rög
[
i
].
°©us
 = 
E1000_TXD_STAT_DD
;

154 
ªgs
[
E1000_TDBAL
] = 
	`PADDR
(
tx_rög
);

155 
	`°©ic_as£π
((
tx_rög
) % 128 == 0);

156 
ªgs
[
E1000_TDLEN
] = (
tx_rög
);

157 
ªgs
[
E1000_TDH
] =Ñegs[
E1000_TDT
] = 0;

158 
ªgs
[
E1000_TCTL
] = (
E1000_TCTL_EN
 | 
E1000_TCTL_PSP
 |

159 (0x10 << 
E1000_TCTL_CT_SHIFT
) |

160 (0x40 << 
E1000_TCTL_COLD_SHIFT
));

161 
ªgs
[
E1000_TIPG
] = 10 | (8<<10) | (6<<20);

165 
ªgs
[
E1000_EERD
] = 0x0;

166 
ªgs
[
E1000_EERD
] |
E1000_EERD_START
;

167 !(
ªgs
[
E1000_EERD
] & 
E1000_EERD_DONE
));

168 
ªgs
[
E1000_RAL
] =Ñegs[
E1000_EERD
] >> 16;

170 
ªgs
[
E1000_EERD
] = 0x1 << 8;

171 
ªgs
[
E1000_EERD
] |
E1000_EERD_START
;

172 !(
ªgs
[
E1000_EERD
] & 
E1000_EERD_DONE
));

173 
ªgs
[
E1000_RAL
] |ªgs[
E1000_EERD
] & 0xffff0000;

175 
ªgs
[
E1000_EERD
] = 0x2 << 8;

176 
ªgs
[
E1000_EERD
] |
E1000_EERD_START
;

177 !(
ªgs
[
E1000_EERD
] & 
E1000_EERD_DONE
));

178 
ªgs
[
E1000_RAH
] =Ñegs[
E1000_EERD
] >> 16;

180 
ªgs
[
E1000_RAH
] |= 0x1 << 31;

183 
i
 = 0; i < 
RX_RING_SIZE
; i++) {

184 
rx_rög
[
i
].
addr
 = 
	`PADDR
(
rx_d©a
[i]);

186 
ªgs
[
E1000_RDBAL
] = 
	`PADDR
(
rx_rög
);

187 
	`°©ic_as£π
((
rx_rög
) % 128 == 0);

188 
ªgs
[
E1000_RDLEN
] = (
rx_rög
);

189 
ªgs
[
E1000_RDH
] = 0;

190 
ªgs
[
E1000_RDT
] = 
RX_RING_SIZE
 - 1;

192 
ªgs
[
E1000_RCTL
] = 
E1000_RCTL_EN
 | 
E1000_RCTL_BAM
 | 
E1000_RCTL_SZ_2048


193 | 
E1000_RCTL_SECRC
;

196 
	}
}

199 
	$e1000_å™smô
(c⁄° *
buf
, 
Àn
)

201 i‡(!
ªgs
 || 
Àn
 > 
DATA_MAX
)

202  -
E_INVAL
;

204 
èû
 = 
ªgs
[
E1000_TDT
];

209 i‡(!(
tx_rög
[
èû
].
°©us
 & 
E1000_TXD_STAT_DD
)) {

210 
	`˝rötf
("TXÑing overflow\n");

215 
	`memmove
(
tx_d©a
[
èû
], 
buf
, 
Àn
);

216 
tx_rög
[
èû
].
Àngth
 = 
Àn
;

217 
tx_rög
[
èû
].
°©us
 &~
E1000_TXD_STAT_DD
;

220 
tx_rög
[
èû
].
cmd
 = 
E1000_TXD_CMD_EOP
 | 
E1000_TXD_CMD_RS
;

223 
ªgs
[
E1000_TDT
] = (
èû
 + 1Ë% 
TX_RING_SIZE
;

226 
	}
}

229 
	$e1000_ª˚ive
(*
buf
, 
Àn
)

231 i‡(!
ªgs
)

234 
èû
 = (
ªgs
[
E1000_RDT
] + 1Ë% 
RX_RING_SIZE
;

237 i‡(!(
rx_rög
[
èû
].
°©us
 & 
E1000_RXD_STAT_DD
))

239 
	`as£π
(
rx_rög
[
èû
].
°©us
 & 
E1000_RXD_STAT_EOP
);

242 
Àn
 = 
	`MIN
÷í, 
rx_rög
[
èû
].
Àngth
);

243 
	`memmove
(
buf
, 
rx_d©a
[
èû
], 
Àn
);

244 
rx_rög
[
èû
].
°©us
 = 0;

247 
ªgs
[
E1000_RDT
] = 
èû
;

248  
Àn
;

249 
	}
}

	@kern/e1000.h

2 #i‚de‡
JOS_KERN_E1000_H


3 
	#JOS_KERN_E1000_H


	)

6 
	~<kîn/pci.h
>

8 
e1000_©èch
(
pci_func
 *
pcif
);

9 
e1000_å™smô
(c⁄° *
buf
, 
Àn
);

10 
e1000_ª˚ive
(*
buf
, 
Àn
);

	@kern/elf_rw.c

1 
	~<öc/x86.h
>

2 
	~<öc/°dio.h
>

3 
	~<öc/as£π.h
>

4 
	~<öc/memœyout.h
>

5 
	~<öc/°rög.h
>

6 
	~"dw¨f_ñf.h
"

7 
	~"dw¨f.h
"

10 
	~<kîn/pm≠.h
>

13 
	#SECTSIZE
 512

	)

14 
	#OFFSET_CORRECT
(
x
Ë(x - 
	`ROUNDDOWN
(x, 
SECTSIZE
))

	)

15 
	#KELFHDR
 (0x10000+
KERNBASE
)

	)

18 
	mDEBUG_INFO
,

19 
	mDEBUG_ABBREV
,

20 
	mDEBUG_FRAME
,

21 
	mDEBUG_LINE
,

22 
	mDEBUG_STR
,

23 
	mNDEBUG_SECT
,

26 
Dw¨f_Se˘i⁄
 
	g£˘i⁄_öfo
[
NDEBUG_SECT
] = {

27 {.
ds_«me
=".debug_öfo", .
	gds_d©a
=
NULL
, .
	gds_addr
=0, .
	gds_size
=0},

28 {.
	gds_«me
=".debug_abbªv", .
	gds_d©a
=
NULL
, .
	gds_addr
=0, .
	gds_size
=0},

29 {.
	gds_«me
=".eh_‰ame", .
	gds_d©a
=
NULL
, .
	gds_addr
=0, .
	gds_size
=0},

30 {.
	gds_«me
=".debug_löe", .
	gds_d©a
=
NULL
, .
	gds_addr
=0, .
	gds_size
=0},

31 {.
	gds_«me
=".debug_°r", .
	gds_d©a
=
NULL
, .
	gds_addr
=0, .
	gds_size
=0},

34 
ªad£˘
(*, 
uöt64_t
);

35 
ªad£g
(
uöt64_t
, uint64_t, uint64_t, uint64_t*);

37 
uöçå_t


38 
ªad_£˘i⁄_hódîs
(
uöçå_t
, uintptr_t);

40 
Dw¨f_Se˘i⁄
 *

41 
	$_dw¨f_föd_£˘i⁄
(c⁄° *
«me
)

43 
Dw¨f_Se˘i⁄
 *
ªt
=
NULL
;

44 
i
;

46 
i
=0; i < 
NDEBUG_SECT
; i++) {

47 if(!
	`°rcmp
(
£˘i⁄_öfo
[
i
].
ds_«me
, 
«me
)) {

48 
ªt
 = (
£˘i⁄_öfo
 + 
i
);

53  
ªt
;

54 
	}
}

56 
	$föd_debug_£˘i⁄s
(
uöçå_t
 
ñf
)

58 
Elf
 *
ehdr
 = (El‡*)
ñf
;

59 
uöçå_t
 
debug_addªss
 = 
USTABDATA
;

60 
Se˘hdr
 *
sh
 = (Se˘hd∏*)(((
uöt8_t
 *)
ehdr
 +Éhdr->
e_shoff
));

61 
Se˘hdr
 *
sh°r_èb
 = 
sh
 + 
ehdr
->
e_sh°∫dx
;

62 
Se˘hdr
* 
esh
 = 
sh
 + 
ehdr
->
e_shnum
;

63 ;
sh
 < 
esh
; sh++) {

64 * 
«me
 = (*)((
uöt8_t
*)
ñf
 + 
sh°r_èb
->
sh_off£t
Ë+ 
sh
->
sh_«me
;

65 if(!
	`°rcmp
(
«me
, ".debug_info")) {

66 
£˘i⁄_öfo
[
DEBUG_INFO
].
ds_d©a
 = (
uöt8_t
*)
debug_addªss
;

67 
£˘i⁄_öfo
[
DEBUG_INFO
].
ds_addr
 = 
debug_addªss
;

68 
£˘i⁄_öfo
[
DEBUG_INFO
].
ds_size
 = 
sh
->
sh_size
;

69 
debug_addªss
 +
sh
->
sh_size
;

70 } if(!
	`°rcmp
(
«me
, ".debug_abbrev")) {

71 
£˘i⁄_öfo
[
DEBUG_ABBREV
].
ds_d©a
 = (
uöt8_t
*)
debug_addªss
;

72 
£˘i⁄_öfo
[
DEBUG_ABBREV
].
ds_addr
 = 
debug_addªss
;

73 
£˘i⁄_öfo
[
DEBUG_ABBREV
].
ds_size
 = 
sh
->
sh_size
;

74 
debug_addªss
 +
sh
->
sh_size
;

75 } if(!
	`°rcmp
(
«me
, ".debug_line")){

76 
£˘i⁄_öfo
[
DEBUG_LINE
].
ds_d©a
 = (
uöt8_t
*)
debug_addªss
;

77 
£˘i⁄_öfo
[
DEBUG_LINE
].
ds_addr
 = 
debug_addªss
;

78 
£˘i⁄_öfo
[
DEBUG_LINE
].
ds_size
 = 
sh
->
sh_size
;

79 
debug_addªss
 +
sh
->
sh_size
;

80 } if(!
	`°rcmp
(
«me
, ".eh_frame")){

81 
£˘i⁄_öfo
[
DEBUG_FRAME
].
ds_d©a
 = (
uöt8_t
*)
sh
->
sh_addr
;

82 
£˘i⁄_öfo
[
DEBUG_FRAME
].
ds_addr
 = 
sh
->
sh_addr
;

83 
£˘i⁄_öfo
[
DEBUG_FRAME
].
ds_size
 = 
sh
->
sh_size
;

84 
debug_addªss
 +
sh
->
sh_size
;

85 } if(!
	`°rcmp
(
«me
, ".debug_str")) {

86 
£˘i⁄_öfo
[
DEBUG_STR
].
ds_d©a
 = (
uöt8_t
*)
debug_addªss
;

87 
£˘i⁄_öfo
[
DEBUG_STR
].
ds_addr
 = 
debug_addªss
;

88 
£˘i⁄_öfo
[
DEBUG_STR
].
ds_size
 = 
sh
->
sh_size
;

89 
debug_addªss
 +
sh
->
sh_size
;

93 
	}
}

95 
uöt64_t


96 
	$ªad_£˘i⁄_hódîs
(
uöçå_t
 
ñfhdr
, uöçå_à
to_va
)

98 
Se˘hdr
* 
£˘hdr_±r
[20] = {0};

99 * 
kvba£
 = 
	`ROUNDUP
((*)
to_va
, 
SECTSIZE
);

100 
uöt64_t
 
kvoff£t
 = 0;

101 *
‹ig_£˘hdr
 = (*)
kvba£
;

102 * 
£˘hdr
 = 
NULL
;

103 
uöt64_t
 
off£t
;

104 if(
ñfhdr
 =
KELFHDR
)

105 
off£t
 = ((
Elf
*)
ñfhdr
)->
e_shoff
;

107 
off£t
 = ((
Elf
*)
ñfhdr
)->
e_shoff
 + (ñfhd∏- 
KERNBASE
);

109 
numSe˘i⁄Hódîs
 = ((
Elf
*)
ñfhdr
)->
e_shnum
;

110 
sizeSe˘i⁄s
 = ((
Elf
*)
ñfhdr
)->
e_shítsize
;

111 *
«mëab
;

112 
i
;

113 
uöt64_t
 
ãmp
;

114 *
«me
;

116 
Elf
 *
ehdr
 = (El‡*)
ñfhdr
;

117 
Se˘hdr
 *
£c_«me
;

119 
	`ªad£g
((
uöt64_t
)
‹ig_£˘hdr
 , 
numSe˘i⁄Hódîs
 * 
sizeSe˘i⁄s
,

120 
off£t
, &
kvoff£t
);

121 
£˘hdr
 = (*)
‹ig_£˘hdr
 + (
off£t
 - 
	`ROUNDDOWN
(off£t, 
SECTSIZE
));

122 
i
 = 0; i < 
numSe˘i⁄Hódîs
; i++)

124 
£˘hdr_±r
[
i
] = (
Se˘hdr
*)(
£˘hdr
) + i;

127 
£c_«me
 = 
£˘hdr_±r
[
ehdr
->
e_sh°∫dx
];

128 
ãmp
 = 
kvoff£t
;

129 
	`ªad£g
((
uöt64_t
)((*)
kvba£
 + 
kvoff£t
), 
£c_«me
->
sh_size
,

130 
£c_«me
->
sh_off£t
, &
kvoff£t
);

131 
«mëab
 = (*)((*)
kvba£
 + 
ãmp
Ë+ 
	`OFFSET_CORRECT
(
£c_«me
->
sh_off£t
);

133 
i
 = 0; i < 
numSe˘i⁄Hódîs
; i++)

135 
«me
 = (*)(
«mëab
 + 
£˘hdr_±r
[
i
]->
sh_«me
);

136 
	`as£π
(
kvoff£t
 % 
SECTSIZE
 == 0);

137 
ãmp
 = 
kvoff£t
;

138 #ifde‡
DWARF_DEBUG


139 
	`˝rötf
("Se˘Name: %s\n", 
«me
);

141 if(!
	`°rcmp
(
«me
, ".debug_info"))

143 
	`ªad£g
((
uöt64_t
)((*)
kvba£
 + 
kvoff£t
), 
£˘hdr_±r
[
i
]->
sh_size
,

144 
£˘hdr_±r
[
i
]->
sh_off£t
, &
kvoff£t
);

145 
£˘i⁄_öfo
[
DEBUG_INFO
].
ds_d©a
 = (
uöt8_t
 *)((*)
kvba£
 + 
ãmp
Ë+ 
	`OFFSET_CORRECT
(
£˘hdr_±r
[
i
]->
sh_off£t
);

146 
£˘i⁄_öfo
[
DEBUG_INFO
].
ds_addr
 = (
uöçå_t
)£˘i⁄_öfo[DEBUG_INFO].
ds_d©a
;

147 
£˘i⁄_öfo
[
DEBUG_INFO
].
ds_size
 = 
£˘hdr_±r
[
i
]->
sh_size
;

149 if(!
	`°rcmp
(
«me
, ".debug_abbrev"))

151 
	`ªad£g
((
uöt64_t
)((*)
kvba£
 + 
kvoff£t
), 
£˘hdr_±r
[
i
]->
sh_size
,

152 
£˘hdr_±r
[
i
]->
sh_off£t
, &
kvoff£t
);

153 
£˘i⁄_öfo
[
DEBUG_ABBREV
].
ds_d©a
 = (
uöt8_t
 *)((*)
kvba£
 + 
ãmp
Ë+ 
	`OFFSET_CORRECT
(
£˘hdr_±r
[
i
]->
sh_off£t
);

154 
£˘i⁄_öfo
[
DEBUG_ABBREV
].
ds_addr
 = (
uöçå_t
)£˘i⁄_öfo[DEBUG_ABBREV].
ds_d©a
;

155 
£˘i⁄_öfo
[
DEBUG_ABBREV
].
ds_size
 = 
£˘hdr_±r
[
i
]->
sh_size
;

157 if(!
	`°rcmp
(
«me
, ".debug_line"))

159 
	`ªad£g
((
uöt64_t
)((*)
kvba£
 + 
kvoff£t
), 
£˘hdr_±r
[
i
]->
sh_size
,

160 
£˘hdr_±r
[
i
]->
sh_off£t
, &
kvoff£t
);

161 
£˘i⁄_öfo
[
DEBUG_LINE
].
ds_d©a
 = (
uöt8_t
 *)((*)
kvba£
 + 
ãmp
Ë+ 
	`OFFSET_CORRECT
(
£˘hdr_±r
[
i
]->
sh_off£t
);

162 
£˘i⁄_öfo
[
DEBUG_LINE
].
ds_addr
 = (
uöçå_t
)£˘i⁄_öfo[DEBUG_LINE].
ds_d©a
;

163 
£˘i⁄_öfo
[
DEBUG_LINE
].
ds_size
 = 
£˘hdr_±r
[
i
]->
sh_size
;

165 if(!
	`°rcmp
(
«me
, ".eh_frame"))

167 
£˘i⁄_öfo
[
DEBUG_FRAME
].
ds_d©a
 = (
uöt8_t
 *)
£˘hdr_±r
[
i
]->
sh_addr
;

168 
£˘i⁄_öfo
[
DEBUG_FRAME
].
ds_addr
 = (
uöçå_t
)£˘i⁄_öfo[DEBUG_FRAME].
ds_d©a
;

169 
£˘i⁄_öfo
[
DEBUG_FRAME
].
ds_size
 = 
£˘hdr_±r
[
i
]->
sh_size
;

171 if(!
	`°rcmp
(
«me
, ".debug_str"))

173 
	`ªad£g
((
uöt64_t
)((*)
kvba£
 + 
kvoff£t
), 
£˘hdr_±r
[
i
]->
sh_size
,

174 
£˘hdr_±r
[
i
]->
sh_off£t
, &
kvoff£t
);

175 
£˘i⁄_öfo
[
DEBUG_STR
].
ds_d©a
 = (
uöt8_t
 *)((*)
kvba£
 + 
ãmp
Ë+ 
	`OFFSET_CORRECT
(
£˘hdr_±r
[
i
]->
sh_off£t
);

176 
£˘i⁄_öfo
[
DEBUG_STR
].
ds_addr
 = (
uöçå_t
)£˘i⁄_öfo[DEBUG_STR].
ds_d©a
;

177 
£˘i⁄_öfo
[
DEBUG_STR
].
ds_size
 = 
£˘hdr_±r
[
i
]->
sh_size
;

181  ((
uöçå_t
)
kvba£
 + 
kvoff£t
);

182 
	}
}

187 
	$ªad£g
(
uöt64_t
 
∑
, uöt64_à
cou¡
, uöt64_à
off£t
, uöt64_t* 
kvoff£t
)

189 
uöt64_t
 
íd_∑
;

190 
uöt64_t
 
‹goff
 = 
off£t
;

192 
íd_∑
 = 
∑
 + 
cou¡
;

194 
	`as£π
(
∑
 % 
SECTSIZE
 == 0);

196 
∑
 &~(
SECTSIZE
 - 1);

199 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

204 
∑
 < 
íd_∑
) {

205 
	`ªad£˘
((
uöt8_t
*Ë
∑
, 
off£t
);

206 
∑
 +
SECTSIZE
;

207 *
kvoff£t
 +
SECTSIZE
;

208 
off£t
++;

211 if(((
‹goff
 % 
SECTSIZE
Ë+ 
cou¡
) > SECTSIZE)

213 
	`ªad£˘
((
uöt8_t
*Ë
∑
, 
off£t
);

214 *
kvoff£t
 +
SECTSIZE
;

216 
	`as£π
(*
kvoff£t
 % 
SECTSIZE
 == 0);

217 
	}
}

220 
	$waôdisk
()

223 (
	`öb
(0x1F7) & 0xC0) != 0x40)

225 
	}
}

228 
	$ªad£˘
(*
d°
, 
uöt64_t
 
off£t
)

231 
	`waôdisk
();

233 
	`outb
(0x1F2, 1);

234 
	`outb
(0x1F3, 
off£t
);

235 
	`outb
(0x1F4, 
off£t
 >> 8);

236 
	`outb
(0x1F5, 
off£t
 >> 16);

237 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

238 
	`outb
(0x1F7, 0x20);

241 
	`waôdisk
();

244 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

245 
	}
}

	@kern/env.c

4 
	~<öc/x86.h
>

5 
	~<öc/mmu.h
>

6 
	~<öc/îr‹.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/as£π.h
>

9 
	~<öc/ñf.h
>

11 
	~<kîn/ív.h
>

12 
	~<kîn/pm≠.h
>

13 
	~<kîn/å≠.h
>

14 
	~<kîn/m⁄ô‹.h
>

15 
	~<kîn/ma¸o.h
>

16 
	~<kîn/dw¨f_≠i.h
>

18 
	~<kîn/sched.h
>

19 
	~<kîn/˝u.h
>

20 
	~<kîn/•ölock.h
>

22 
	~<vmm/vmx.h
>

23 
	~<vmm/ït.h
>

25 
boﬁ
 
boŸ°øµed
;

26 
	gv˝u_cou¡
 = 0;

29 
Env
 *
	gívs
 = 
NULL
;

31 
Env
 *
	gív_‰ì_li°
;

34 
	#ENVGENSHIFT
 12

35 

	)

52 
Segdesc
 
	ggdt
[2*
NCPU
 + 5] =

57 
SEG_NULL
,

60 [
GD_KT
 >> 3] = 
SEG64
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff,0),

63 [
GD_KD
 >> 3] = 
SEG64
(
STA_W
, 0x0, 0xffffffff,0),

66 [
GD_UT
 >> 3] = 
SEG64
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff,3),

69 [
GD_UD
 >> 3] = 
SEG64
(
STA_W
, 0x0, 0xffffffff,3),

75 [
GD_TSS0
 >> 3] = 
SEG_NULL
,

77 [6] = 
SEG_NULL


80 
P£udodesc
 
	ggdt_pd
 = {

81 (
gdt
) - 1, () gdt

94 
	$ívid2ív
(
ívid_t
 
ívid
, 
Env
 **
ív_°‹e
, 
boﬁ
 
check≥rm
)

96 
Env
 *
e
;

99 i‡(
ívid
 == 0) {

100 *
ív_°‹e
 = 
cuªnv
;

109 
e
 = &
ívs
[
	`ENVX
(
ívid
)];

110 i‡(
e
->
ív_°©us
 =
ENV_FREE
 ||É->
ív_id
 !
ívid
) {

111 *
ív_°‹e
 = 0;

112  -
E_BAD_ENV
;

120 i‡(
check≥rm
 && 
e
 !
cuªnv
 &&É->
ív_∑ª¡_id
 !cuªnv->
ív_id
) {

121 *
ív_°‹e
 = 0;

122  -
E_BAD_ENV
;

125 *
ív_°‹e
 = 
e
;

127 
	}
}

136 
	$ív_öô
()

141 
i
;

142 
i
 = 0; i < 
NENV
; i++) {

143 
ívs
[
i
].
ív_°©us
 = 
ENV_FREE
;

144 
ívs
[
i
].
ív_lök
 = &envs[i+1];

146 
ívs
[
NENV
-1].
ív_lök
 = 
NULL
;

147 
ív_‰ì_li°
 = &
ívs
[0];

151 
	`ív_öô_≥r˝u
();

152 
	}
}

156 
	$ív_öô_≥r˝u
()

158 
	`lgdt
(&
gdt_pd
);

162 
asm
 vﬁ©ûe("movw %%ax,%%gs" :: "a" (
GD_UD
|3));

163 
asm
 vﬁ©ûe("movw %%ax,%%fs" :: "a" (
GD_UD
|3));

166 
asm
 vﬁ©ûe("movw %%ax,%%es" :: "a" (
GD_KD
));

167 
asm
 vﬁ©ûe("movw %%ax,%%ds" :: "a" (
GD_KD
));

168 
asm
 vﬁ©ûe("movw %%ax,%%ss" :: "a" (
GD_KD
));

170 
asm
 vﬁ©ûe("pushq %%rbx \¿\àmovab†$1f,%%øx \¿\àpushq %%øx \n\àÃëq \¿1:\n" :: "b" (
GD_KT
):"cc","memory");

173 
	`Œdt
(0);

174 
	}
}

187 
	$ív_£tup_vm
(
Env
 *
e
)

189 
r
;

190 
i
;

191 
PageInfo
 *
p
 = 
NULL
;

194 i‡(!(
p
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
)))

195  -
E_NO_MEM
;

216 
p
->
µ_ªf
 += 1;

217 
e
->
ív_pml4e
 = 
	`∑ge2kva
(
p
);

218 
e
->
ív_¸3
 = 
	`∑ge2∑
(
p
);

220 
	`mem£t
(
e
->
ív_pml4e
, 0, 
PGSIZE
);

221 
e
->
ív_pml4e
[1] = 
boŸ_pml4e
[1];

226 
e
->
ív_pml4e
[
	`PML4
(
UVPT
)] =É->
ív_¸3
 | 
PTE_P
 | 
PTE_U
;

229 
	}
}

232 #i‚de‡
VMM_GUEST


234 
	$ív_gue°_Æloc
(
Env
 **
√wív_°‹e
, 
ívid_t
 
∑ª¡_id
)

236 
öt32_t
 
gíî©i⁄
;

237 
Env
 *
e
;

239 i‡(!(
e
 = 
ív_‰ì_li°
))

240  -
E_NO_FREE_ENV
;

242 
	`mem£t
(&
e
->
ív_vmxöfo
, 0, (
VmxGue°Info
));

245 
PageInfo
 *
p
 = 
NULL
;

247 i‡(!(
p
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
)))

248  -
E_NO_MEM
;

250 
	`mem£t
(
p
, 0, (
PageInfo
));

251 
p
->
µ_ªf
 += 1;

252 
e
->
ív_pml4e
 = 
	`∑ge2kva
(
p
);

253 
e
->
ív_¸3
 = 
	`∑ge2∑
(
p
);

256 
PageInfo
 *
q
 = 
	`vmx_öô_vmcs
();

257 i‡(!
q
) {

258 
	`∑ge_de¸ef
(
p
);

259  -
E_NO_MEM
;

261 
q
->
µ_ªf
 += 1;

262 
e
->
ív_vmxöfo
.
vmcs
 = 
	`∑ge2kva
(
q
);

265 
PageInfo
 *
r
 = 
NULL
;

266 i‡(!(
r
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
))) {

267 
	`∑ge_de¸ef
(
p
);

268 
	`∑ge_de¸ef
(
q
);

269  -
E_NO_MEM
;

271 
r
->
µ_ªf
 += 1;

272 
e
->
ív_vmxöfo
.
m§_ho°_¨ó
 = 
	`∑ge2kva
(
r
);

273 
e
->
ív_vmxöfo
.
m§_gue°_¨ó
 = 
	`∑ge2kva
(
r
Ë+ 
PGSIZE
 / 2;

276 
PageInfo
 *
s
 = 
NULL
;

277 i‡(!(
s
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
))) {

278 
	`∑ge_de¸ef
(
p
);

279 
	`∑ge_de¸ef
(
q
);

280 
	`∑ge_de¸ef
(
r
);

281  -
E_NO_MEM
;

283 
s
->
µ_ªf
 += 1;

284 
e
->
ív_vmxöfo
.
io_bm≠_a
 = 
	`∑ge2kva
(
s
);

286 
PageInfo
 *
t
 = 
NULL
;

287 i‡(!(
t
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
))) {

288 
	`∑ge_de¸ef
(
p
);

289 
	`∑ge_de¸ef
(
q
);

290 
	`∑ge_de¸ef
(
r
);

291 
	`∑ge_de¸ef
(
s
);

292  -
E_NO_MEM
;

294 
t
->
µ_ªf
 += 1;

295 
e
->
ív_vmxöfo
.
io_bm≠_b
 = 
	`∑ge2kva
(
t
);

298 
gíî©i⁄
 = (
e
->
ív_id
 + (1 << 
ENVGENSHIFT
)Ë& ~(
NENV
 - 1);

299 i‡(
gíî©i⁄
 <= 0)

300 
gíî©i⁄
 = 1 << 
ENVGENSHIFT
;

301 
e
->
ív_id
 = 
gíî©i⁄
 | (ê- 
ívs
);

304 
e
->
ív_∑ª¡_id
 = 
∑ª¡_id
;

305 
e
->
ív_ty≥
 = 
ENV_TYPE_GUEST
;

306 
e
->
ív_°©us
 = 
ENV_RUNNABLE
;

307 
e
->
ív_runs
 = 0;

308 
e
->
ív_vmxöfo
.
v˝unum
 = 
v˝u_cou¡
++;

309 
	`˝rötf
("VCPUNUMáŒoˇãd: %d\n", 
e
->
ív_vmxöfo
.
v˝unum
);

311 
	`mem£t
(&
e
->
ív_tf
, 0, (e->env_tf));

313 
e
->
ív_pgÁu…_upˇŒ
 = 0;

314 
e
->
ív_ùc_ªcvög
 = 0;

317 
ív_‰ì_li°
 = 
e
->
ív_lök
;

318 *
√wív_°‹e
 = 
e
;

321 
	}
}

323 
	$ív_gue°_‰ì
(
Env
 *
e
) {

325 
	`∑ge_de¸ef
(
	`∑2∑ge
(
	`PADDR
(
e
->
ív_vmxöfo
.
vmcs
)));

327 
	`∑ge_de¸ef
(
	`∑2∑ge
(
	`PADDR
(
e
->
ív_vmxöfo
.
m§_ho°_¨ó
)));

329 
	`∑ge_de¸ef
(
	`∑2∑ge
(
	`PADDR
(
e
->
ív_vmxöfo
.
io_bm≠_a
)));

330 
	`∑ge_de¸ef
(
	`∑2∑ge
(
	`PADDR
(
e
->
ív_vmxöfo
.
io_bm≠_b
)));

334 
	`‰ì_gue°_mem
(
e
->
ív_pml4e
);

337 
	`∑ge_de¸ef
(
	`∑2∑ge
(
e
->
ív_¸3
));

338 
e
->
ív_pml4e
 = 0;

339 
e
->
ív_¸3
 = 0;

342 
e
->
ív_°©us
 = 
ENV_FREE
;

343 
e
->
ív_lök
 = 
ív_‰ì_li°
;

344 
ív_‰ì_li°
 = 
e
;

346 
	`˝rötf
("[%08x] fªêvmx gue°Énv %08x\n", 
cuªnv
 ? cuªnv->
ív_id
 : 0, 
e
->env_id);

347 
	}
}

360 
	$ív_Æloc
(
Env
 **
√wív_°‹e
, 
ívid_t
 
∑ª¡_id
)

362 
öt32_t
 
gíî©i⁄
;

363 
r
;

364 
Env
 *
e
;

366 i‡(!(
e
 = 
ív_‰ì_li°
))

367  -
E_NO_FREE_ENV
;

370 i‡((
r
 = 
	`ív_£tup_vm
(
e
)) < 0)

371  
r
;

374 
gíî©i⁄
 = (
e
->
ív_id
 + (1 << 
ENVGENSHIFT
)Ë& ~(
NENV
 - 1);

375 i‡(
gíî©i⁄
 <= 0)

376 
gíî©i⁄
 = 1 << 
ENVGENSHIFT
;

377 
e
->
ív_id
 = 
gíî©i⁄
 | (ê- 
ívs
);

380 
e
->
ív_∑ª¡_id
 = 
∑ª¡_id
;

381 
e
->
ív_ty≥
 = 
ENV_TYPE_USER
;

382 
e
->
ív_°©us
 = 
ENV_RUNNABLE
;

383 
e
->
ív_runs
 = 0;

389 
	`mem£t
(&
e
->
ív_tf
, 0, (e->env_tf));

399 
e
->
ív_tf
.
tf_ds
 = 
GD_UD
 | 3;

400 
e
->
ív_tf
.
tf_es
 = 
GD_UD
 | 3;

401 
e
->
ív_tf
.
tf_ss
 = 
GD_UD
 | 3;

402 
e
->
ív_tf
.
tf_r•
 = 
USTACKTOP
;

403 
e
->
ív_tf
.
tf_cs
 = 
GD_UT
 | 3;

410 
e
->
ív_tf
.
tf_eÊags
 = 
FL_IF
;

414 
e
->
ív_pgÁu…_upˇŒ
 = 0;

417 
e
->
ív_ùc_ªcvög
 = 0;

421 
ív_‰ì_li°
 = 
e
->
ív_lök
;

422 *
√wív_°‹e
 = 
e
;

428 
	}
}

438 
	$ªgi⁄_Æloc
(
Env
 *
e
, *
va
, 
size_t
 
Àn
)

441 
r
;

442 
PageInfo
 *
µ
;

443 *
ídva
 = (
uöt8_t
*Ë
va
 + 
Àn
;

445 
va
 < 
ídva
) {

447 i‡(!(
µ
 = 
	`∑ge_Æloc
(0)))

448 
	`∑nic
("m≠_£gmít: couldÇŸáŒo¯∑ge: %e\n", -
E_NO_MEM
);

451 i‡((
r
 = 
	`∑ge_ö£π
(
e
->
ív_pml4e
, 
µ
, 
va
, 
PTE_P
|
PTE_W
|
PTE_U
)) < 0)

452 
	`∑nic
("m≠_£gmít: couldÇŸ in£πÖage: %e\n", 
r
);

454 
va
 = 
	`ROUNDDOWN
((
uöt8_t
*Ëv®+ 
PGSIZE
, PGSIZE);

464 
	}
}

489 
	$lﬂd_icode
(
Env
 *
e
, 
uöt8_t
 *
bö¨y
)

492 
Elf
 *
ñf
 = (El‡*)
bö¨y
;

493 
Proghdr
 *
ph
, *
ïh
;

495 i‡(
ñf
 &&Élf->
e_magic
 =
ELF_MAGIC
) {

496 
	`l¸3
(
	`PADDR
((
uöt64_t
)
e
->
ív_pml4e
));

497 
ph
 = (
Proghdr
 *)((
uöt8_t
 *)
ñf
 +Élf->
e_phoff
);

498 
ïh
 = 
ph
 + 
ñf
->
e_phnum
;

499 ;
ph
 < 
ïh
;Öh++) {

500 i‡(
ph
->
p_ty≥
 =
ELF_PROG_LOAD
) {

501 
	`ªgi⁄_Æloc
(
e
, (*)
ph
->
p_va
,Öh->
p_memsz
);

502 
	`mem˝y
((*)
ph
->
p_va
, (*)((
uöt8_t
 *)
ñf
 +Öh->
p_off£t
),Öh->
p_fûesz
);

503 i‡(
ph
->
p_fûesz
 <Öh->
p_memsz
) {

504 
	`mem£t
((*)(
ph
->
p_va
 +Öh->
p_fûesz
), 0,Öh->
p_memsz
-ph->p_filesz);

508 
	`ªgi⁄_Æloc
(
e
, (*Ë(
USTACKTOP
 - 
PGSIZE
), PGSIZE);

509 
e
->
ív_tf
.
tf_rù
 = 
ñf
->
e_íåy
;

510 
e
->
ív_tf
.
tf_r•
 = 
USTACKTOP
;

512 
uöçå_t
 
debug_addªss
 = 
USTABDATA
;

513 
Se˘hdr
 *
sh
 = (Se˘hd∏*)(((
uöt8_t
 *)
ñf
 +Élf->
e_shoff
));

514 
Se˘hdr
 *
sh°r_èb
 = 
sh
 + 
ñf
->
e_sh°∫dx
;

515 
Se˘hdr
* 
esh
 = 
sh
 + 
ñf
->
e_shnum
;

516 ;
sh
 < 
esh
; sh++) {

517 * 
«me
 = (*)((
uöt8_t
*)
ñf
 + 
sh°r_èb
->
sh_off£t
Ë+ 
sh
->
sh_«me
;

518 if(!
	`°rcmp
(
«me
, ".debug_info") || !strcmp(name, ".debug_abbrev")

519 || !
	`°rcmp
(
«me
, ".debug_line") || !strcmp(name, ".eh_frame")

520 || !
	`°rcmp
(
«me
, ".debug_str")) {

521 
	`ªgi⁄_Æloc
(
e
 ,(*)
debug_addªss
, 
sh
->
sh_size
);

522 
	`mem˝y
((*)
debug_addªss
, (*)((
uöt8_t
 *)
ñf
 + 
sh
->
sh_off£t
),

523 
sh
->
sh_size
);

524 
debug_addªss
 +
sh
->
sh_size
;

527 
	`l¸3
(
boŸ_¸3
);

529 
	`∑nic
("Invalid Binary");

533 
e
->
ñf
 = 
bö¨y
;

535 
	}
}

545 
	$ív_¸óã
(
uöt8_t
 *
bö¨y
, 
EnvTy≥
 
ty≥
)

549 
r
;

550 
Env
 *
e
;

551 i‡((
r
 = 
	`ív_Æloc
(&
e
, 0)) < 0)

552 
	`∑nic
("ív_¸óã: couldÇŸáŒoˇãÉnv: %e\n", 
r
);

553 
	`lﬂd_icode
(
e
, 
bö¨y
);

554 
e
->
ív_ty≥
 = 
ty≥
;

560 i‡(
ty≥
 =
ENV_TYPE_FS
)

561 
e
->
ív_tf
.
tf_eÊags
 |
FL_IOPL_3
;

563 
	}
}

569 
	$ív_‰ì
(
Env
 *
e
)

571 
±e_t
 *
±
;

572 
uöt64_t
 
pdío
, 
±ío
;

573 
phyßddr_t
 
∑
;

576 #i‚de‡
VMM_GUEST


577 if(
e
->
ív_ty≥
 =
ENV_TYPE_GUEST
) {

578 
	`ív_gue°_‰ì
(
e
);

587 i‡(
e
 =
cuªnv
)

588 
	`l¸3
(
boŸ_¸3
);

596 
pd≥_t
 *
ív_pd≥
 = 
	`KADDR
(
	`PTE_ADDR
(
e
->
ív_pml4e
[0]));

597 
pdío_limô
;

598 
uöt64_t
 
pd≥_ödex
;

601 
pd≥_ödex
=0;pdpe_index<=3;pdpe_index++){

602 if(!(
ív_pd≥
[
pd≥_ödex
] & 
PTE_P
))

604 
pde_t
 *
ív_pgdú
 = 
	`KADDR
(
	`PTE_ADDR
(
ív_pd≥
[
pd≥_ödex
]));

605 
pdío_limô
 = 
pd≥_ödex
==3?
	`PDX
(
UTOP
):PDX(0xFFFFFFFF);

606 
	`°©ic_as£π
(
UTOP
 % 
PTSIZE
 == 0);

607 
pdío
 = 0;Ödíÿ< 
pdío_limô
;Ödeno++) {

610 i‡(!(
ív_pgdú
[
pdío
] & 
PTE_P
))

613 
∑
 = 
	`PTE_ADDR
(
ív_pgdú
[
pdío
]);

614 
±
 = (
±e_t
*Ë
	`KADDR
(
∑
);

617 
±ío
 = 0;Öãnÿ< 
	`PTX
(~0);Öteno++) {

618 i‡(
±
[
±ío
] & 
PTE_P
){

619 
	`∑ge_ªmove
(
e
->
ív_pml4e
, 
	`PGADDR
((
uöt64_t
)0,
pd≥_ödex
,
pdío
, 
±ío
, 0));

624 
ív_pgdú
[
pdío
] = 0;

625 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

628 
∑
 = 
	`PTE_ADDR
(
ív_pd≥
[
pd≥_ödex
]);

629 
ív_pd≥
[
pd≥_ödex
] = 0;

630 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

633 
	`∑ge_de¸ef
(
	`∑2∑ge
(
	`PTE_ADDR
(
e
->
ív_pml4e
[0])));

635 
e
->
ív_pml4e
[0] = 0;

636 
∑
 = 
e
->
ív_¸3
;

637 
e
->
ív_pml4e
 = 0;

638 
e
->
ív_¸3
 = 0;

639 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

642 
e
->
ív_°©us
 = 
ENV_FREE
;

643 
e
->
ív_lök
 = 
ív_‰ì_li°
;

644 
ív_‰ì_li°
 = 
e
;

645 
	}
}

655 
	$ív_de°roy
(
Env
 *
e
)

661 i‡(
e
->
ív_°©us
 =
ENV_RUNNING
 && 
cuªnv
 !=É) {

662 
e
->
ív_°©us
 = 
ENV_DYING
;

666 
	`ív_‰ì
(
e
);

667 i‡(
cuªnv
 =
e
) {

668 
cuªnv
 = 
NULL
;

669 
	`sched_yõld
();

672 
	}
}

682 
	$ív_p›_tf
(
Tøp‰ame
 *
tf
)

686 
cuªnv
->
ív_˝unum
 = 
	`˝unum
();

688 
__asm
 
	`__vﬁ©ûe
("movq %0,%%rsp\n"

689 
POPA


695 : : "g" (
tf
) : "memory");

696 
	`∑nic
("iret failed");

697 
	}
}

706 
	$ív_run
(
Env
 *
e
)

710 i‡(
cuªnv
 !
e
) {

711 i‡(
cuªnv
 && cuªnv->
ív_°©us
 =
ENV_RUNNING
)

712 
cuªnv
->
ív_°©us
 = 
ENV_RUNNABLE
;

719 
cuªnv
 = 
e
;

720 
e
->
ív_°©us
 = 
ENV_RUNNING
;

721 
e
->
ív_runs
++;

725 if(
e
->
ív_ty≥
 !
ENV_TYPE_GUEST
)

726 
	`l¸3
(
e
->
ív_¸3
);

730 
	`as£π
(
e
->
ív_°©us
 =
ENV_RUNNING
);

734 #i‚de‡
VMM_GUEST


735 if(
e
->
ív_ty≥
 =
ENV_TYPE_GUEST
) {

736 
	`vmx_vmrun
(
e
);

737 
	`∑nic
 ("vmx_runÇeverÑeturns\n");

740 
	`u∆ock_kî√l
();

741 
	`ív_p›_tf
(&
e
->
ív_tf
);

744 
	`u∆ock_kî√l
();

745 
	`ív_p›_tf
(&
e
->
ív_tf
);

751 
	}
}

	@kern/env.h

4 #i‚de‡
JOS_KERN_ENV_H


5 
	#JOS_KERN_ENV_H


	)

7 
	~<öc/ív.h
>

9 
	~<kîn/˝u.h
>

12 
Env
 *
ívs
;

14 
	#cuªnv
 (
this˝u
->
˝u_ív
)

15 #löê18 "../kîn/ív.h"

	)

16 
Segdesc
 
gdt
[];

18 
ív_öô
();

19 
ív_öô_≥r˝u
();

20 
ív_Æloc
(
Env
 **
e
, 
ívid_t
 
∑ª¡_id
);

21 
ív_‰ì
(
Env
 *
e
);

22 
ív_¸óã
(
uöt8_t
 *
bö¨y
, 
EnvTy≥
 
ty≥
);

23 
ív_de°roy
(
Env
 *
e
);

25 
ívid2ív
(
ívid_t
 
ívid
, 
Env
 **
ív_°‹e
, 
boﬁ
 
check≥rm
);

27 
	$ív_run
(
Env
 *
e
Ë
	`__©åibuã__
((
n‹ëu∫
));

28 
	$ív_p›_tf
(
Tøp‰ame
 *
tf
Ë
	`__©åibuã__
((
n‹ëu∫
));

31 
	`ív_gue°_Æloc
(
Env
 **
√wív_°‹e
, 
ívid_t
 
∑ª¡_id
);

36 
	#ENV_PASTE3
(
x
, 
y
, 
z
Ëx ## y ## 
	)
z

39 #i‚de‡
VMM_GUEST


40 
	#ENV_CREATE
(
x
, 
ty≥
) \

42 
uöt8_t
 
	`ENV_PASTE3
(
_bö¨y_obj_
, 
x
, 
_°¨t
)[]; \

43 
	`ív_¸óã
(
	`ENV_PASTE3
(
_bö¨y_obj_
, 
x
, 
_°¨t
), \

44 
ty≥
); \

45 
	}
} 0)

	)

47 
	#ENV_CREATE
(
x
, 
ty≥
) \

49 
uöt8_t
 
	`ENV_PASTE3
(
_bö¨y_vmm_gue°_obj_
, 
x
, 
_°¨t
)[]; \

50 
	`ív_¸óã
(
	`ENV_PASTE3
(
_bö¨y_vmm_gue°_obj_
, 
x
, 
_°¨t
), \

51 
ty≥
); \

52 } 0)

	)

	@kern/init.c

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/as£π.h
>

6 
	~<öc/memœyout.h
>

8 
	~<kîn/m⁄ô‹.h
>

9 
	~<kîn/c⁄sﬁe.h
>

10 
	~<kîn/kdebug.h
>

11 
	~<kîn/dw¨f_≠i.h
>

13 
	~<kîn/pm≠.h
>

14 
	~<kîn/k˛ock.h
>

16 
	~<kîn/ív.h
>

17 
	~<kîn/å≠.h
>

19 
	~<kîn/sched.h
>

20 
	~<kîn/picúq.h
>

21 
	~<kîn/˝u.h
>

22 
	~<kîn/•ölock.h
>

24 
	~<kîn/time.h
>

25 
	~<kîn/pci.h
>

27 #i‡
deföed
(
TEST_EPT_MAP
)

28 
ã°_ït_m≠
();

32 
uöt64_t
 
	gíd_debug
;

35 
boŸ_≠s
();

39 
m≥¡ry_°¨t
[], 
m≥¡ry_íd
[];

41 #ifde‡
VMM_GUEST


43 
boŸ_vútuÆ_≠s
();

45 
öt64_t
 
	$vmˇŒ
(
num
, 
check
, 
uöt64_t
 
a1
, uöt64_à
a2
, uöt64_à
a3
, uöt64_à
a4
, uöt64_à
a5
)

47 
öt64_t
 
ªt
;

48 
asm
 vﬁ©ûe("vmˇŒ\n" : "˜" (
ªt
Ë: "a" (
num
), "d" (
a1
), "c" (
a2
), "b" (
a3
), "D" (
a4
), "S" (
a5
) : "cc", "memory");

49 if(
check
 && 
ªt
 > 0Ë
	`∑nic
("vmˇŒ %dÑëu∫ed %d (> 0)", 
num
,Ñet);

50  
ªt
;

51 
	}
}

58 
	$i386_öô
()

62 
ed©a
[], 
íd
[];

67 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

71 
	`c⁄s_öô
();

74 
	`˝rötf
("6828 decimal is %o octal!\n", 6828);

78 #ifde‡
VMM_GUEST


81 
uöt32_t
 
ecx
 = 0;

82 
	`˝uid
(0x1, 
NULL
, NULL, &
ecx
, NULL);

83 i‡(
ecx
 & 0x20)

84 
	`∑nic
("[ERR] VMXÉxtensionÉxposedÅo guest.\n");

86 
	`˝rötf
("VMXÉxtension hidden from guest.\n");

90 #i‚de‡
VMM_GUEST


91 
íd
[];

92 
íd_debug
 = 
	`ªad_£˘i⁄_hódîs
((0x10000+
KERNBASE
), (
uöçå_t
)
íd
);

98 
	`x64_vm_öô
();

102 
	`ív_öô
();

103 
	`å≠_öô
();

107 #i‚de‡
VMM_GUEST


109 
	`mp_öô
();

110 
	`œpic_öô
();

115 
	`pic_öô
();

117 #i‚de‡
VMM_GUEST


119 
	`time_öô
();

120 
	`pci_öô
();

127 
	`lock_kî√l
();

131 #i‚de‡
VMM_GUEST


133 
	`boŸ_≠s
();

143 
	`ENV_CREATE
(
fs_fs
, 
ENV_TYPE_FS
);

146 #i‡
	`deföed
(
TEST
)

148 
	`ENV_CREATE
(
TEST
, 
ENV_TYPE_USER
);

152 #i‡
	`deföed
(
TEST_EPT_MAP
)

153 
	`ã°_ït_m≠
();

158 
	`ENV_CREATE
(
u£r_icode
, 
ENV_TYPE_USER
);

164 
	`kbd_öå
();

169 
	`sched_yõld
();

171 
	}
}

177 *
	gm≥¡ry_k°ack
;

181 
	$boŸ_≠s
()

183 
m≥¡ry_°¨t
[], 
m≥¡ry_íd
[];

184 *
code
;

185 
CpuInfo
 *
c
;

188 
code
 = 
	`KADDR
(
MPENTRY_PADDR
);

189 
	`memmove
(
code
, 
m≥¡ry_°¨t
, 
m≥¡ry_íd
 - mpentry_start);

191 
c
 = 
˝us
; c < cpu†+ 
n˝u
; c++) {

192 i‡(
c
 =
˝us
 + 
	`˝unum
())

196 
m≥¡ry_k°ack
 = 
≥r˝u_k°acks
[
c
 - 
˝us
] + 
KSTKSIZE
;

198 
	`œpic_°¨èp
(
c
->
˝u_id
, 
	`PADDR
(
code
));

200 
c
->
˝u_°©us
 !
CPU_STARTED
)

203 
	}
}

207 
	$mp_maö
()

210 
	`l¸3
(
boŸ_¸3
);

211 
	`˝rötf
("SMP: CPU %d sèπög\n", 
	`˝unum
());

213 
	`œpic_öô
();

214 
	`ív_öô_≥r˝u
();

215 
	`å≠_öô_≥r˝u
();

216 
	`xchg
(&
this˝u
->
˝u_°©us
, 
CPU_STARTED
);

224 
	`lock_kî√l
();

225 
	`sched_yõld
();

227 
	}
}

235 c⁄° *
	g∑nic°r
;

242 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

244 
va_li°
 
≠
;

246 i‡(
∑nic°r
)

247 
dód
;

248 
∑nic°r
 = 
fmt
;

251 
__asm
 
	`__vﬁ©ûe
("cli; cld");

253 
	`va_°¨t
(
≠
, 
fmt
);

255 
	`˝rötf
("kî√»∑ni¯⁄ CPU %dáà%s:%d: ", 
	`˝unum
(), 
fûe
, 
löe
);

257 
	`v˝rötf
(
fmt
, 
≠
);

258 
	`˝rötf
("\n");

259 
	`va_íd
(
≠
);

261 
dód
:

264 
	`m⁄ô‹
(
NULL
);

265 
	}
}

269 
	$_w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

271 
va_li°
 
≠
;

273 
	`va_°¨t
(
≠
, 
fmt
);

274 
	`˝rötf
("kî√»w¨nögáà%s:%d: ", 
fûe
, 
löe
);

275 
	`v˝rötf
(
fmt
, 
≠
);

276 
	`˝rötf
("\n");

277 
	`va_íd
(
≠
);

278 
	}
}

	@kern/kclock.c

6 
	~<öc/x86.h
>

8 
	~<kîn/k˛ock.h
>

12 
	$mc146818_ªad
(
ªg
)

14 
	`outb
(
IO_RTC
, 
ªg
);

15  
	`öb
(
IO_RTC
+1);

16 
	}
}

19 
	$mc146818_wrôe
(
ªg
, 
d©um
)

21 
	`outb
(
IO_RTC
, 
ªg
);

22 
	`outb
(
IO_RTC
+1, 
d©um
);

23 
	}
}

	@kern/kclock.h

4 #i‚de‡
JOS_KERN_KCLOCK_H


5 
	#JOS_KERN_KCLOCK_H


	)

6 #i‚de‡
JOS_KERNEL


10 
	#IO_RTC
 0x070

	)

12 
	#MC_NVRAM_START
 0xê

	)

13 
	#MC_NVRAM_SIZE
 50

	)

16 
	#NVRAM_BASELO
 (
MC_NVRAM_START
 + 7Ë

	)

17 
	#NVRAM_BASEHI
 (
MC_NVRAM_START
 + 8Ë

	)

20 
	#NVRAM_EXTLO
 (
MC_NVRAM_START
 + 9Ë

	)

21 
	#NVRAM_EXTHI
 (
MC_NVRAM_START
 + 10Ë

	)

24 
	#NVRAM_PEXTLO
 (
MC_NVRAM_START
 + 34Ë

	)

25 
	#NVRAM_PEXTHI
 (
MC_NVRAM_START
 + 35Ë

	)

28 
	#NVRAM_EXTGT16LO
 (
MC_NVRAM_START
 + 38Ë

	)

29 
	#NVRAM_EXTGT16HI
 (
MC_NVRAM_START
 + 39Ë

	)

32 
	#NVRAM_CENTURY
 (
MC_NVRAM_START
 + 36Ë

	)

34 
mc146818_ªad
(
ªg
);

35 
mc146818_wrôe
(
ªg
, 
d©um
);

	@kern/kdebug.c

1 
	~<öc/°ab.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/memœyout.h
>

4 
	~<öc/as£π.h
>

6 
	~<kîn/kdebug.h
>

7 
	~<kîn/dw¨f.h
>

8 
	~<kîn/dw¨f_≠i.h
>

9 
	~<kîn/dw¨f_ñf.h
>

10 
	~<kîn/dw¨f_deföe.h
>

11 
	~<kîn/dw¨f_îr‹.h
>

14 
	~<kîn/pm≠.h
>

15 
	~<kîn/ív.h
>

18 
_Dw¨f_Fde
 
	g_fde
;

19 
Dw¨f_Fde
 
	gfde
 = &
_fde
;

20 
_Dw¨f_Cõ
 
	g_cõ
;

21 
Dw¨f_Cõ
 
	gcõ
 = &
_cõ
;

23 
_dw¨f_öô
(
Dw¨f_Debug
 
dbg
, *
obj
);

24 
_gë_√xt_cu
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_CU
 *
cu
);

25 
dw¨f_siblögof
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Dõ
 *
dõ
, Dw¨f_Dõ *
ªt_dõ
,

26 
Dw¨f_CU
 *
cu
);

27 
Dw¨f_Aâribuã
 * 
_dw¨f_©å_föd
(
Dw¨f_Dõ
 *, 
uöt16_t
);

28 
dw¨f_chûd
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_CU
 *
cu
, 
Dw¨f_Dõ
 *
dõ
,

29 
Dw¨f_Dõ
 *
ªt_dõ
);

30 
dw¨f_offdõ
(
Dw¨f_Debug
 
dbg
, 
uöt64_t
 
off£t
, 
Dw¨f_Dõ
 *
ªt_dõ
,

31 
Dw¨f_CU
 
cu
);

32 
Dw¨f_Se˘i⁄
 * 
_dw¨f_föd_£˘i⁄
(c⁄° *
«me
);

35 
dw¨f_lo˛i°
(
Dw¨f_Aâribuã
 * 
©å
,

36 
Dw¨f_Locdesc
 * 
locdesc
,

37 
Dw¨f_Sig√d
 * 
li°Àn
, 
Dw¨f_Eº‹
 * 
îr‹
);

39 
dw¨f_öô_eh_£˘i⁄
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Eº‹
 *
îr‹
);

41 
dw¨f_gë_fde_©_pc
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Addr
 
pc
,

42 
Dw¨f_Fde
 
ªt_fde
, 
Dw¨f_Cõ
 
cõ
,

43 
Dw¨f_Eº‹
 *
îr‹
);

45 
dw¨f_gë_fde_öfo_f‹_Æl_ªgs
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Fde
 
fde
,

46 
Dw¨f_Addr
 
pc_ªque°ed
,

47 
Dw¨f_RegèbÀ
 *
ªg_èbÀ
, 
Dw¨f_Addr
 *
row_pc
,

48 
Dw¨f_Eº‹
 *
îr‹
);

50 
öt64_t


51 
_dw¨f_ªad_¶eb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
);

52 
uöt64_t


53 
_dw¨f_ªad_uÀb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
);

54 
öt64_t


55 
_dw¨f_decode_¶eb128
(
uöt8_t
 **
dp
);

56 
uöt64_t


57 
_dw¨f_decode_uÀb128
(
uöt8_t
 **
dp
);

59 
_Dw¨f_Debug
 
	gmydebug
;

60 
Dw¨f_Debug
 
	gdbg
 = &
mydebug
;

61 #ifde‡
X86_64


63 c⁄° *c⁄° 
	gdw¨f_ªg«mes_x86_64
[] =

79 "es", "cs", "ss", "ds", "fs", "gs", 
NULL
, NULL,

80 "fs.ba£", "gs.ba£", 
NULL
, NULL,

85 
	#ªg_«mes_±r
 
dw¨f_ªg«mes_x86_64


	)

88 c⁄° *c⁄° 
	gdw¨f_ªg«mes_i386
[] =

92 "eù", "eÊags", 
NULL
,

95 
NULL
, NULL,

101 "es", "cs", "ss", "ds", "fs", "gs", 
NULL
, NULL,

105 
	#ªg_«mes_±r
 
dw¨f_ªg«mes_i386


	)

111 
	sU£rSèbD©a
 {

112 c⁄° 
Sèb
 *
	m°abs
;

113 c⁄° 
Sèb
 *
	m°ab_íd
;

114 c⁄° *
	m°ab°r
;

115 c⁄° *
	m°ab°r_íd
;

119 
	$li°_func_dõ
(
Rùdebugöfo
 *
öfo
, 
Dw¨f_Dõ
 *
dõ
, 
uöt64_t
 
addr
)

121 
_Dw¨f_Löe
 
 
;

122 
Dw¨f_Aâribuã
 *
low
;

123 
Dw¨f_Aâribuã
 *
high
;

124 
Dw¨f_CU
 *
cu
 = 
dõ
->
cu_hódî
;

125 
Dw¨f_Dõ
 *
cudõ
 = 
dõ
->
cu_dõ
;

126 
Dw¨f_Dõ
 
ªt
, 
sib
=*
dõ
;

127 
Dw¨f_Aâribuã
 *
©å
;

128 
uöt64_t
 
off£t
;

129 
uöt64_t
 
ªt_vÆ
=8;

130 
uöt64_t
 
ªt_off£t
=0;

132 if(
dõ
->
dõ_èg
 !
DW_TAG_sub¥ogøm
)

135 
	`mem£t
(&
 
, 0, (
_Dw¨f_Löe
));

137 
low
 = 
	`_dw¨f_©å_föd
(
dõ
, 
DW_AT_low_pc
);

138 
high
 = 
	`_dw¨f_©å_föd
(
dõ
, 
DW_AT_high_pc
);

140 if((
low
 && (low->
u
[0].
u64
 < 
addr
)Ë&& (
high
 && (high->u[0].u64 >áddr)))

142 
öfo
->
rù_fûe
 = 
dõ
->
cu_dõ
->
dõ_«me
;

144 
öfo
->
rù_‚_«me
 = 
dõ
->
dõ_«me
;

145 
öfo
->
rù_‚_«mñí
 = 
	`°æí
(
dõ
->
dõ_«me
);

147 
öfo
->
rù_‚_addr
 = (
uöçå_t
)
low
->
u
[0].
u64
;

149 
	`as£π
(
dõ
->
cu_dõ
);

150 
	`dw¨f_§˛öes
(
dõ
->
cu_dõ
, &
 
, 
addr
, 
NULL
);

152 
öfo
->
rù_löe
 = 
 
.
 _löío
;

153 
öfo
->
rù_‚_«rg
 = 0;

155 
Dw¨f_Aâribuã
* 
©å
;

157 if(
	`dw¨f_chûd
(
dbg
, 
cu
, &
sib
, &
ªt
Ë!
DW_DLE_NO_ENTRY
)

159 if(
ªt
.
dõ_èg
 !
DW_TAG_f‹mÆ_∑ømëî
)

160 
œ°
;

162 
©å
 = 
	`_dw¨f_©å_föd
(&
ªt
, 
DW_AT_ty≥
);

164 
åy_agaö
:

165 if(
©å
 !
NULL
)

167 
off£t
 = (
uöt64_t
)
cu
->
cu_off£t
 + 
©å
->
u
[0].
u64
;

168 
	`dw¨f_offdõ
(
dbg
, 
off£t
, &
sib
, *
cu
);

169 
©å
 = 
	`_dw¨f_©å_föd
(&
sib
, 
DW_AT_byã_size
);

171 if(
©å
 !
NULL
)

173 
ªt_vÆ
 = 
©å
->
u
[0].
u64
;

177 
©å
 = 
	`_dw¨f_©å_föd
(&
sib
, 
DW_AT_ty≥
);

178 
åy_agaö
;

182 
ªt_off£t
 = 0;

183 
©å
 = 
	`_dw¨f_©å_föd
(&
ªt
, 
DW_AT_loˇti⁄
);

184 i‡(
©å
 !
NULL
)

186 
Dw¨f_Unsig√d
 
loc_Àn
 = 
©å
->
©_block
.
bl_Àn
;

187 
Dw¨f_SmÆl
 *
loc_±r
 = 
©å
->
©_block
.
bl_d©a
;

188 
Dw¨f_SmÆl
 
©om
;

189 
Dw¨f_Unsig√d
 
›1
, 
›2
;

191 
©å
->
©_f‹m
) {

192 
DW_FORM_block1
:

193 
DW_FORM_block2
:

194 
DW_FORM_block4
:

195 
off£t
 = 0;

196 
©om
 = *(
loc_±r
++);

197 
off£t
++;

198 i‡(
©om
 =
DW_OP_fbªg
) {

199 
uöt8_t
 *
p
 = 
loc_±r
;

200 
ªt_off£t
 = 
	`_dw¨f_decode_¶eb128
(&
p
);

201 
off£t
 +
p
 - 
loc_±r
;

202 
loc_±r
 = 
p
;

208 
öfo
->
size_‚_¨g
[öfo->
rù_‚_«rg
] = 
ªt_vÆ
;

209 
öfo
->
off£t_‚_¨g
[öfo->
rù_‚_«rg
] = 
ªt_off£t
;

210 
öfo
->
rù_‚_«rg
++;

211 
sib
 = 
ªt
;

213 
	`dw¨f_siblögof
(
dbg
, &
sib
, &
ªt
, 
cu
Ë=
DW_DLV_OK
)

215 if(
ªt
.
dõ_èg
 !
DW_TAG_f‹mÆ_∑ømëî
)

218 
©å
 = 
	`_dw¨f_©å_föd
(&
ªt
, 
DW_AT_ty≥
);

220 if(
©å
 !
NULL
)

222 
off£t
 = (
uöt64_t
)
cu
->
cu_off£t
 + 
©å
->
u
[0].
u64
;

223 
	`dw¨f_offdõ
(
dbg
, 
off£t
, &
sib
, *
cu
);

224 
©å
 = 
	`_dw¨f_©å_föd
(&
sib
, 
DW_AT_byã_size
);

226 if(
©å
 !
NULL
)

228 
ªt_vÆ
 = 
©å
->
u
[0].
u64
;

232 
ªt_off£t
 = 0;

233 
©å
 = 
	`_dw¨f_©å_föd
(&
ªt
, 
DW_AT_loˇti⁄
);

234 i‡(
©å
 !
NULL
)

236 
Dw¨f_Unsig√d
 
loc_Àn
 = 
©å
->
©_block
.
bl_Àn
;

237 
Dw¨f_SmÆl
 *
loc_±r
 = 
©å
->
©_block
.
bl_d©a
;

238 
Dw¨f_SmÆl
 
©om
;

239 
Dw¨f_Unsig√d
 
›1
, 
›2
;

241 
©å
->
©_f‹m
) {

242 
DW_FORM_block1
:

243 
DW_FORM_block2
:

244 
DW_FORM_block4
:

245 
off£t
 = 0;

246 
©om
 = *(
loc_±r
++);

247 
off£t
++;

248 i‡(
©om
 =
DW_OP_fbªg
) {

249 
uöt8_t
 *
p
 = 
loc_±r
;

250 
ªt_off£t
 = 
	`_dw¨f_decode_¶eb128
(&
p
);

251 
off£t
 +
p
 - 
loc_±r
;

252 
loc_±r
 = 
p
;

258 
öfo
->
size_‚_¨g
[öfo->
rù_‚_«rg
]=
ªt_vÆ
;

259 
öfo
->
off£t_‚_¨g
[öfo->
rù_‚_«rg
]=
ªt_off£t
;

260 
öfo
->
rù_‚_«rg
++;

261 
sib
 = 
ªt
;

264 
œ°
:

269 
	}
}

279 
	$debugöfo_rù
(
uöçå_t
 
addr
, 
Rùdebugöfo
 *
öfo
)

281 
Env
* 
œ°ív
 = 
NULL
;

282 * 
ñf
;

283 
Dw¨f_Se˘i⁄
 *
£˘
;

284 
Dw¨f_CU
 
cu
;

285 
Dw¨f_Dõ
 
dõ
, 
cudõ
, 
dõ2
;

286 
Dw¨f_RegèbÀ
 *
π
 = 
NULL
;

288 
uöt64_t
 
pc
 = (
uöçå_t
)
addr
;

292 
öfo
->
rù_fûe
 = "<unknown>";

293 
öfo
->
rù_löe
 = 0;

294 
öfo
->
rù_‚_«me
 = "<unknown>";

295 
öfo
->
rù_‚_«mñí
 = 9;

296 
öfo
->
rù_‚_addr
 = 
addr
;

297 
öfo
->
rù_‚_«rg
 = 0;

300 i‡(
addr
 >
ULIM
) {

301 
ñf
 = (*)0x10000 + 
KERNBASE
;

304 if(
cuªnv
 !
œ°ív
) {

305 
	`föd_debug_£˘i⁄s
((
uöçå_t
)
cuªnv
->
ñf
);

306 
œ°ív
 = 
cuªnv
;

308 
ñf
 = 
cuªnv
->elf;

311 
	`_dw¨f_öô
(
dbg
, 
ñf
);

313 
£˘
 = 
	`_dw¨f_föd_£˘i⁄
(".debug_info");

314 
dbg
->
dbg_öfo_off£t_ñf
 = (
uöt64_t
)
£˘
->
ds_d©a
;

315 
dbg
->
dbg_öfo_size
 = 
£˘
->
ds_size
;

317 
	`as£π
(
dbg
->
dbg_öfo_size
);

318 
	`_gë_√xt_cu
(
dbg
, &
cu
) == 0)

320 if(
	`dw¨f_siblögof
(
dbg
, 
NULL
, &
cudõ
, &
cu
Ë=
DW_DLE_NO_ENTRY
)

323 
cudõ
.
cu_hódî
 = &
cu
;

324 
cudõ
.
cu_dõ
 = 
NULL
;

326 if(
	`dw¨f_chûd
(
dbg
, &
cu
, &
cudõ
, &
dõ
Ë=
DW_DLE_NO_ENTRY
)

329 
dõ
.
cu_hódî
 = &
cu
;

330 
dõ
.
cu_dõ
 = &
cudõ
;

333 if(
	`li°_func_dõ
(
öfo
, &
dõ
, 
addr
))

334 
föd_d⁄e
;

335 if(
	`dw¨f_siblögof
(
dbg
, &
dõ
, &
dõ2
, &
cu
) < 0)

337 
dõ
 = 
dõ2
;

338 
dõ
.
cu_hódî
 = &
cu
;

339 
dõ
.
cu_dõ
 = &
cudõ
;

345 
föd_d⁄e
:

347 i‡(
	`dw¨f_öô_eh_£˘i⁄
(
dbg
, 
NULL
Ë=
DW_DLV_ERROR
)

350 i‡(
	`dw¨f_gë_fde_©_pc
(
dbg
, 
addr
, 
fde
, 
cõ
, 
NULL
Ë=
DW_DLV_OK
) {

351 
	`dw¨f_gë_fde_öfo_f‹_Æl_ªgs
(
dbg
, 
fde
, 
addr
,

352 &
öfo
->
ªg_èbÀ
,

353 
NULL
, NULL);

356 
	`˝rötf
("CFA:Ñeg %s off %d\n",

357 
ªg_«mes_±r
[
öfo
->
ªg_èbÀ
.
cÁ_ruÀ
.
dw_ªgnum
],

358 
öfo
->
ªg_èbÀ
.
cÁ_ruÀ
.
dw_off£t
);

360 
i
 = 0; i < (
ªg_«mes_±r
) / (reg_names_ptr[0]); i++) {

361 i‡(!
ªg_«mes_±r
[
i
])

363 
öfo
->
ªg_èbÀ
.
ruÀs
[
i
].
dw_ªgnum
) {

364 
DW_FRAME_UNDEFINED_VAL
:

365 
	`˝rötf
("%s: \n", 
ªg_«mes_±r
[
i
]);

367 
DW_FRAME_CFA_COL3
:

368 
	`˝rötf
("%s: of‡%d\n", 
ªg_«mes_±r
[
i
],

369 
öfo
->
ªg_èbÀ
.
ruÀs
[
i
].
dw_off£t
);

371 
DW_FRAME_SAME_VAL
:

374 
	`˝rötf
("%s:Ñeg %s\n", 
ªg_«mes_±r
[
i
],

375 
ªg_«mes_±r
[
öfo
->
ªg_èbÀ
.
ruÀs
[
i
].
dw_ªgnum
]);

382 
	}
}

	@kern/kdebug.h

1 #i‚de‡
JOS_KERN_KDEBUG_H


2 
	#JOS_KERN_KDEBUG_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<kîn/dw¨f.h
>

8 
	sRùdebugöfo
 {

9 c⁄° *
	mrù_fûe
;

10 
	mrù_löe
;

12 c⁄° *
	mrù_‚_«me
;

14 
	mrù_‚_«mñí
;

15 
uöçå_t
 
	mrù_‚_addr
;

16 
	mrù_‚_«rg
;

17 
	msize_‚_¨g
[10];

18 
uöçå_t
 
	moff£t_‚_¨g
[10];

19 
Dw¨f_RegèbÀ
 
	mªg_èbÀ
;

22 
debugöfo_rù
(
uöçå_t
 
rù
, 
Rùdebugöfo
 *
öfo
);

	@kern/lapic.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/memœyout.h
>

7 
	~<öc/å≠.h
>

8 
	~<öc/mmu.h
>

9 
	~<öc/°dio.h
>

10 
	~<öc/x86.h
>

11 
	~<kîn/pm≠.h
>

12 
	~<kîn/˝u.h
>

15 
	#ID
 (0x0020/4)

16 
	#VER
 (0x0030/4)

17 
	#TPR
 (0x0080/4)

18 
	#EOI
 (0x00B0/4)

19 
	#SVR
 (0x00F0/4)

20 
	#ENABLE
 0x00000100

21 
	#ESR
 (0x0280/4)

22 
	#ICRLO
 (0x0300/4)

23 
	#INIT
 0x00000500

24 
	#STARTUP
 0x00000600

25 
	#DELIVS
 0x00001000

26 
	#ASSERT
 0x00004000

27 
	#DEASSERT
 0x00000000

	)

28 
	#LEVEL
 0x00008000

29 
	#BCAST
 0x00080000

30 
	#OTHERS
 0x000C0000

31 
	#BUSY
 0x00001000

	)

32 
	#FIXED
 0x00000000

	)

33 
	#ICRHI
 (0x0310/4)

34 
	#TIMER
 (0x0320/4)

35 
	#X1
 0x0000000B

36 
	#PERIODIC
 0x00020000

37 
	#PCINT
 (0x0340/4)

38 
	#LINT0
 (0x0350/4)

39 
	#LINT1
 (0x0360/4)

40 
	#ERROR
 (0x0370/4)

41 
	#MASKED
 0x00010000

42 
	#TICR
 (0x0380/4)

43 
	#TCCR
 (0x0390/4)

44 
	#TDCR
 (0x03E0/4)

45 

	)

46 
phyßddr_t
 
	gœpiˇddr
;

47 vﬁ©ûê
uöt32_t
 *
	gœpic
;

50 
	$œpicw
(
ödex
, 
vÆue
)

52 
œpic
[
ödex
] = 
vÆue
;

53 
œpic
[
ID
];

54 
	}
}

57 
	$œpic_öô
()

59 i‡(!
œpiˇddr
)

64 
œpic
 = 
	`mmio_m≠_ªgi⁄
(
œpiˇddr
, 4096);

67 
	`œpicw
(
SVR
, 
ENABLE
 | (
IRQ_OFFSET
 + 
IRQ_SPURIOUS
));

73 
	`œpicw
(
TDCR
, 
X1
);

74 
	`œpicw
(
TIMER
, 
PERIODIC
 | (
IRQ_OFFSET
 + 
IRQ_TIMER
));

75 
	`œpicw
(
TICR
, 10000000);

84 i‡(
this˝u
 !
boŸ˝u
)

85 
	`œpicw
(
LINT0
, 
MASKED
);

88 
	`œpicw
(
LINT1
, 
MASKED
);

92 i‡(((
œpic
[
VER
]>>16) & 0xFF) >= 4)

93 
	`œpicw
(
PCINT
, 
MASKED
);

96 
	`œpicw
(
ERROR
, 
IRQ_OFFSET
 + 
IRQ_ERROR
);

99 
	`œpicw
(
ESR
, 0);

100 
	`œpicw
(
ESR
, 0);

103 
	`œpicw
(
EOI
, 0);

106 
	`œpicw
(
ICRHI
, 0);

107 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

108 
œpic
[
ICRLO
] & 
DELIVS
)

112 
	`œpicw
(
TPR
, 0);

113 
	}
}

116 
	$˝unum
()

118 i‡(
œpic
)

119  
œpic
[
ID
] >> 24;

121 
	}
}

125 
	$œpic_eoi
()

127 i‡(
œpic
)

128 
	`œpicw
(
EOI
, 0);

129 
	}
}

134 
	$mi¸odñay
(
us
)

136 
	}
}

138 
	#IO_RTC
 0x70

	)

143 
	$œpic_°¨èp
(
uöt8_t
 
≠icid
, 
uöt32_t
 
addr
)

145 
i
;

146 
uöt16_t
 *
wrv
;

151 
	`outb
(
IO_RTC
, 0xF);

152 
	`outb
(
IO_RTC
+1, 0x0A);

153 
wrv
 = (
uöt16_t
 *)
	`KADDR
((0x40 << 4 | 0x67));

154 
wrv
[0] = 0;

155 
wrv
[1] = 
addr
 >> 4;

159 
	`œpicw
(
ICRHI
, 
≠icid
 << 24);

160 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

161 
	`mi¸odñay
(200);

162 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

163 
	`mi¸odñay
(100);

170 
i
 = 0; i < 2; i++) {

171 
	`œpicw
(
ICRHI
, 
≠icid
 << 24);

172 
	`œpicw
(
ICRLO
, 
STARTUP
 | (
addr
 >> 12));

173 
	`mi¸odñay
(200);

175 
	}
}

178 
	$œpic_ùi
(
ve˘‹
)

180 
	`œpicw
(
ICRLO
, 
OTHERS
 | 
FIXED
 | 
ve˘‹
);

181 
œpic
[
ICRLO
] & 
DELIVS
)

183 
	}
}

	@kern/libdwarf_frame.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/as£π.h
>

4 
	~"dw¨f_îr‹.h
"

5 
	~"dw¨f_deföe.h
"

6 
	~"dw¨f.h
"

8 
_dw¨f_gë_√xt_fde
(
Dw¨f_Debug
, , 
Dw¨f_Eº‹
 *, 
Dw¨f_Fde
);

10 
Dw¨f_Se˘i⁄
 
	gdebug_‰ame_£c
 = {".eh_frame", 0, 0, 0};

12 
Dw¨f_RegèbÀ3
 
	gglobÆ_π_èbÀ
 = {{0}};

13 
Dw¨f_RegèbÀ_E¡ry3
 
	gglobÆ_ruÀs
[
DW_FRAME_LAST_REG_NUM
];

15 
Dw¨f_RegèbÀ3
 
	gglobÆ_π_èbÀ_shadow
 = {{0}};

16 
Dw¨f_RegèbÀ_E¡ry3
 
	gglobÆ_ruÀs_shadow
[
DW_FRAME_LAST_REG_NUM
];

18 
uöt64_t


19 
_dw¨f_ªad_lsb
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
, 
byãs_to_ªad
);

20 
uöt64_t


21 
_dw¨f_decode_lsb
(
uöt8_t
 **
d©a
, 
byãs_to_ªad
);

22 
uöt64_t


23 
_dw¨f_ªad_msb
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
, 
byãs_to_ªad
);

24 
uöt64_t


25 
_dw¨f_decode_msb
(
uöt8_t
 **
d©a
, 
byãs_to_ªad
);

26 
öt64_t


27 
_dw¨f_ªad_¶eb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
);

28 
uöt64_t


29 
_dw¨f_ªad_uÀb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
);

30 
öt64_t


31 
_dw¨f_decode_¶eb128
(
uöt8_t
 **
dp
);

32 
uöt64_t


33 
_dw¨f_decode_uÀb128
(
uöt8_t
 **
dp
);

36 
_dw¨f_‰ame_£t_fde
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Fde
 
ªtfde
, 
Dw¨f_Se˘i⁄
 *
ds
,

37 
Dw¨f_Unsig√d
 *
off
, 
eh_‰ame
, 
Dw¨f_Cõ
 
cõ
, 
Dw¨f_Eº‹
 *
îr‹
);

39 
_dw¨f_‰ame_£˘i⁄_lﬂd_eh
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Eº‹
 *
îr‹
);

41 
_dw¨f_föd_£˘i⁄_íh™˚d
(
Dw¨f_Se˘i⁄
 *
ds
);

44 
	$_dw¨f_‰ame_∑øms_öô
(
Dw¨f_Debug
 
dbg
)

47 
dbg
->
dbg_‰ame_ruÀ_èbÀ_size
 = 
DW_FRAME_LAST_REG_NUM
;

48 
dbg
->
dbg_‰ame_ruÀ_öôül_vÆue
 = 
DW_FRAME_REG_INITIAL_VALUE
;

49 
dbg
->
dbg_‰ame_cÁ_vÆue
 = 
DW_FRAME_CFA_COL3
;

50 
dbg
->
dbg_‰ame_ßme_vÆue
 = 
DW_FRAME_SAME_VAL
;

51 
dbg
->
dbg_‰ame_undeföed_vÆue
 = 
DW_FRAME_UNDEFINED_VAL
;

52 
	}
}

56 
	$dw¨f_gë_fde_©_pc
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Addr
 
pc
,

57 
_Dw¨f_Fde
 *
ªt_fde
, 
Dw¨f_Cõ
 
cõ
,

58 
Dw¨f_Eº‹
 *
îr‹
)

60 
Dw¨f_Fde
 
fde
 = 
ªt_fde
;

61 
	`mem£t
(
fde
, 0, (
_Dw¨f_Fde
));

62 
fde
->
fde_cõ
 = 
cõ
;

64 i‡(
ªt_fde
 =
NULL
)

65  (
DW_DLV_ERROR
);

67 
dbg
->
cuº_off_eh
 < dbg->
dbg_eh_size
) {

68 i‡(
	`_dw¨f_gë_√xt_fde
(
dbg
, 
åue
, 
îr‹
, 
fde
) < 0)

70  
DW_DLV_NO_ENTRY
;

72 i‡(
pc
 >
fde
->
fde_öôloc
 &&Öc < fde->fde_initloc +

73 
fde
->
fde_adønge
)

74  (
DW_DLV_OK
);

77 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_NO_ENTRY
);

78  (
DW_DLV_NO_ENTRY
);

79 
	}
}

82 
	$_dw¨f_‰ame_ªgèbÀ_c›y
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_RegèbÀ3
 **
de°
,

83 
Dw¨f_RegèbÀ3
 *
§c
, 
Dw¨f_Eº‹
 *
îr‹
)

85 
i
;

87 
	`as£π
(
de°
 !
NULL
);

88 
	`as£π
(
§c
 !
NULL
);

90 i‡(*
de°
 =
NULL
) {

91 *
de°
 = &
globÆ_π_èbÀ_shadow
;

92 (*
de°
)->
π3_ªg_èbÀ_size
 = 
§c
->rt3_reg_table_size;

93 (*
de°
)->
π3_ruÀs
 = 
globÆ_ruÀs_shadow
;

96 
	`mem˝y
(&(*
de°
)->
π3_cÁ_ruÀ
, &
§c
->rt3_cfa_rule,

97 (
Dw¨f_RegèbÀ_E¡ry3
));

99 
i
 = 0; i < (*
de°
)->
π3_ªg_èbÀ_size
 &&

100 
i
 < 
§c
->
π3_ªg_èbÀ_size
; i++)

101 
	`mem˝y
(&(*
de°
)->
π3_ruÀs
[
i
], &
§c
->rt3_rules[i],

102 (
Dw¨f_RegèbÀ_E¡ry3
));

104 ; 
i
 < (*
de°
)->
π3_ªg_èbÀ_size
; i++)

105 (*
de°
)->
π3_ruÀs
[
i
].
dw_ªgnum
 =

106 
dbg
->
dbg_‰ame_undeföed_vÆue
;

108  (
DW_DLE_NONE
);

109 
	}
}

112 
	$_dw¨f_‰ame_run_ö°
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_RegèbÀ3
 *
π
, 
uöt8_t
 *
ö°s
,

113 
Dw¨f_Unsig√d
 
Àn
, Dw¨f_Unsig√d 
ˇf
, 
Dw¨f_Sig√d
 
daf
, 
Dw¨f_Addr
 
pc
,

114 
Dw¨f_Addr
 
pc_ªq
, Dw¨f_Add∏*
row_pc
, 
Dw¨f_Eº‹
 *
îr‹
)

116 
Dw¨f_RegèbÀ3
 *
öô_π
, *
ßved_π
;

117 
uöt8_t
 *
p
, *
≥
;

118 
uöt8_t
 
high2
, 
low6
;

119 
uöt64_t
 
ªg
, 
ªg2
, 
uoff
, 
soff
;

120 
ªt
;

122 
	#CFA
 
π
->
π3_cÁ_ruÀ


	)

123 
	#INITCFA
 
öô_π
->
π3_cÁ_ruÀ


	)

124 
	#RL
 
π
->
π3_ruÀs


	)

125 
	#INITRL
 
öô_π
->
π3_ruÀs


	)

127 
	#CHECK_TABLE_SIZE
(
x
) \

129 i‡((
x
Ë>
π
->
π3_ªg_èbÀ_size
) { \

130 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, \

131 
DW_DLE_DF_REG_NUM_TOO_HIGH
); \

132 
ªt
 = 
DW_DLE_DF_REG_NUM_TOO_HIGH
; \

133 
¥ogøm_d⁄e
; \

135 } 0)

	)

137 
ªt
 = 
DW_DLE_NONE
;

138 
öô_π
 = 
ßved_π
 = 
NULL
;

139 *
row_pc
 = 
pc
;

142 
	`_dw¨f_‰ame_ªgèbÀ_c›y
(
dbg
, &
öô_π
, 
π
, 
îr‹
);

143 
p
 = 
ö°s
;

144 
≥
 = 
p
 + 
Àn
;

146 
p
 < 
≥
) {

147 i‡(*
p
 =
DW_CFA_n›
) {

148 
p
++;

152 
high2
 = *
p
 & 0xc0;

153 
low6
 = *
p
 & 0x3f;

154 
p
++;

156 i‡(
high2
 > 0) {

157 
high2
) {

158 
DW_CFA_adv™˚_loc
:

159 
pc
 +
low6
 * 
ˇf
;

160 i‡(
pc_ªq
 < 
pc
)

161 
¥ogøm_d⁄e
;

163 
DW_CFA_off£t
:

164 *
row_pc
 = 
pc
;

165 
	`CHECK_TABLE_SIZE
(
low6
);

166 
RL
[
low6
].
dw_off£t_ªÀv™t
 = 1;

167 
RL
[
low6
].
dw_vÆue_ty≥
 = 
DW_EXPR_OFFSET
;

168 
RL
[
low6
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_cÁ_vÆue
;

169 
RL
[
low6
].
dw_off£t_‹_block_Àn
 =

170 
	`_dw¨f_decode_uÀb128
(&
p
Ë* 
daf
;

172 
DW_CFA_ª°‹e
:

173 *
row_pc
 = 
pc
;

174 
	`CHECK_TABLE_SIZE
(
low6
);

175 
	`mem˝y
(&
RL
[
low6
], &
INITRL
[low6],

176 (
Dw¨f_RegèbÀ_E¡ry3
));

179 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
,

180 
DW_DLE_FRAME_INSTR_EXEC_ERROR
);

181 
ªt
 = 
DW_DLE_FRAME_INSTR_EXEC_ERROR
;

182 
¥ogøm_d⁄e
;

188 
low6
) {

189 
DW_CFA_£t_loc
:

190 
pc
 = 
dbg
->
	`decode
(&
p
, dbg->
dbg_poöãr_size
);

191 i‡(
pc_ªq
 < 
pc
)

192 
¥ogøm_d⁄e
;

194 
DW_CFA_adv™˚_loc1
:

195 
pc
 +
dbg
->
	`decode
(&
p
, 1Ë* 
ˇf
;

196 i‡(
pc_ªq
 < 
pc
)

197 
¥ogøm_d⁄e
;

199 
DW_CFA_adv™˚_loc2
:

200 
pc
 +
dbg
->
	`decode
(&
p
, 2Ë* 
ˇf
;

201 i‡(
pc_ªq
 < 
pc
)

202 
¥ogøm_d⁄e
;

204 
DW_CFA_adv™˚_loc4
:

205 
pc
 +
dbg
->
	`decode
(&
p
, 4Ë* 
ˇf
;

206 i‡(
pc_ªq
 < 
pc
)

207 
¥ogøm_d⁄e
;

209 
DW_CFA_off£t_exãnded
:

210 *
row_pc
 = 
pc
;

211 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

212 
uoff
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

213 
	`CHECK_TABLE_SIZE
(
ªg
);

214 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 1;

215 
RL
[
ªg
].
dw_vÆue_ty≥
 = 
DW_EXPR_OFFSET
;

216 
RL
[
ªg
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_cÁ_vÆue
;

217 
RL
[
ªg
].
dw_off£t_‹_block_Àn
 = 
uoff
 * 
daf
;

219 
DW_CFA_ª°‹e_exãnded
:

220 *
row_pc
 = 
pc
;

221 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

222 
	`CHECK_TABLE_SIZE
(
ªg
);

223 
	`mem˝y
(&
RL
[
ªg
], &
INITRL
[reg],

224 (
Dw¨f_RegèbÀ_E¡ry3
));

226 
DW_CFA_undeföed
:

227 *
row_pc
 = 
pc
;

228 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

229 
	`CHECK_TABLE_SIZE
(
ªg
);

230 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 0;

231 
RL
[
ªg
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_undeföed_vÆue
;

233 
DW_CFA_ßme_vÆue
:

234 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

235 
	`CHECK_TABLE_SIZE
(
ªg
);

236 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 0;

237 
RL
[
ªg
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_ßme_vÆue
;

239 
DW_CFA_ªgi°î
:

240 *
row_pc
 = 
pc
;

241 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

242 
ªg2
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

243 
	`CHECK_TABLE_SIZE
(
ªg
);

244 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 0;

245 
RL
[
ªg
].
dw_ªgnum
 = 
ªg2
;

247 
DW_CFA_ªmembî_°©e
:

248 
	`_dw¨f_‰ame_ªgèbÀ_c›y
(
dbg
, &
ßved_π
, 
π
, 
îr‹
);

250 
DW_CFA_ª°‹e_°©e
:

251 *
row_pc
 = 
pc
;

252 
	`_dw¨f_‰ame_ªgèbÀ_c›y
(
dbg
, &
π
, 
ßved_π
, 
îr‹
);

254 
DW_CFA_def_cÁ
:

255 *
row_pc
 = 
pc
;

256 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

257 
uoff
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

258 
CFA
.
dw_off£t_ªÀv™t
 = 1;

259 
CFA
.
dw_vÆue_ty≥
 = 
DW_EXPR_OFFSET
;

260 
CFA
.
dw_ªgnum
 = 
ªg
;

261 
CFA
.
dw_off£t_‹_block_Àn
 = 
uoff
;

263 
DW_CFA_def_cÁ_ªgi°î
:

264 *
row_pc
 = 
pc
;

265 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

266 
CFA
.
dw_ªgnum
 = 
ªg
;

274 
DW_CFA_def_cÁ_off£t
:

275 *
row_pc
 = 
pc
;

276 
uoff
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

277 
CFA
.
dw_off£t_ªÀv™t
 = 1;

278 
CFA
.
dw_vÆue_ty≥
 = 
DW_EXPR_OFFSET
;

279 
CFA
.
dw_off£t_‹_block_Àn
 = 
uoff
;

281 
DW_CFA_def_cÁ_ex¥essi⁄
:

282 *
row_pc
 = 
pc
;

283 
CFA
.
dw_off£t_ªÀv™t
 = 0;

284 
CFA
.
dw_vÆue_ty≥
 = 
DW_EXPR_EXPRESSION
;

285 
CFA
.
dw_off£t_‹_block_Àn
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

286 
CFA
.
dw_block_±r
 = 
p
;

287 
p
 +
CFA
.
dw_off£t_‹_block_Àn
;

289 
DW_CFA_ex¥essi⁄
:

290 *
row_pc
 = 
pc
;

291 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

292 
	`CHECK_TABLE_SIZE
(
ªg
);

293 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 0;

294 
RL
[
ªg
].
dw_vÆue_ty≥
 = 
DW_EXPR_EXPRESSION
;

295 
RL
[
ªg
].
dw_off£t_‹_block_Àn
 =

296 
	`_dw¨f_decode_uÀb128
(&
p
);

297 
RL
[
ªg
].
dw_block_±r
 = 
p
;

298 
p
 +
RL
[
ªg
].
dw_off£t_‹_block_Àn
;

300 
DW_CFA_off£t_exãnded_sf
:

301 *
row_pc
 = 
pc
;

302 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

303 
soff
 = 
	`_dw¨f_decode_¶eb128
(&
p
);

304 
	`CHECK_TABLE_SIZE
(
ªg
);

305 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 1;

306 
RL
[
ªg
].
dw_vÆue_ty≥
 = 
DW_EXPR_OFFSET
;

307 
RL
[
ªg
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_cÁ_vÆue
;

308 
RL
[
ªg
].
dw_off£t_‹_block_Àn
 = 
soff
 * 
daf
;

310 
DW_CFA_def_cÁ_sf
:

311 *
row_pc
 = 
pc
;

312 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

313 
soff
 = 
	`_dw¨f_decode_¶eb128
(&
p
);

314 
CFA
.
dw_off£t_ªÀv™t
 = 1;

315 
CFA
.
dw_vÆue_ty≥
 = 
DW_EXPR_OFFSET
;

316 
CFA
.
dw_ªgnum
 = 
ªg
;

317 
CFA
.
dw_off£t_‹_block_Àn
 = 
soff
 * 
daf
;

319 
DW_CFA_def_cÁ_off£t_sf
:

320 *
row_pc
 = 
pc
;

321 
soff
 = 
	`_dw¨f_decode_¶eb128
(&
p
);

322 
CFA
.
dw_off£t_ªÀv™t
 = 1;

323 
CFA
.
dw_vÆue_ty≥
 = 
DW_EXPR_OFFSET
;

324 
CFA
.
dw_off£t_‹_block_Àn
 = 
soff
 * 
daf
;

326 
DW_CFA_vÆ_off£t
:

327 *
row_pc
 = 
pc
;

328 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

329 
uoff
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

330 
	`CHECK_TABLE_SIZE
(
ªg
);

331 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 1;

332 
RL
[
ªg
].
dw_vÆue_ty≥
 = 
DW_EXPR_VAL_OFFSET
;

333 
RL
[
ªg
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_cÁ_vÆue
;

334 
RL
[
ªg
].
dw_off£t_‹_block_Àn
 = 
uoff
 * 
daf
;

336 
DW_CFA_vÆ_off£t_sf
:

337 *
row_pc
 = 
pc
;

338 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

339 
soff
 = 
	`_dw¨f_decode_¶eb128
(&
p
);

340 
	`CHECK_TABLE_SIZE
(
ªg
);

341 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 1;

342 
RL
[
ªg
].
dw_vÆue_ty≥
 = 
DW_EXPR_VAL_OFFSET
;

343 
RL
[
ªg
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_cÁ_vÆue
;

344 
RL
[
ªg
].
dw_off£t_‹_block_Àn
 = 
soff
 * 
daf
;

346 
DW_CFA_vÆ_ex¥essi⁄
:

347 *
row_pc
 = 
pc
;

348 
ªg
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

349 
	`CHECK_TABLE_SIZE
(
ªg
);

350 
RL
[
ªg
].
dw_off£t_ªÀv™t
 = 0;

351 
RL
[
ªg
].
dw_vÆue_ty≥
 = 
DW_EXPR_VAL_EXPRESSION
;

352 
RL
[
ªg
].
dw_off£t_‹_block_Àn
 =

353 
	`_dw¨f_decode_uÀb128
(&
p
);

354 
RL
[
ªg
].
dw_block_±r
 = 
p
;

355 
p
 +
RL
[
ªg
].
dw_off£t_‹_block_Àn
;

358 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
,

359 
DW_DLE_FRAME_INSTR_EXEC_ERROR
);

360 
ªt
 = 
DW_DLE_FRAME_INSTR_EXEC_ERROR
;

361 
¥ogøm_d⁄e
;

365 
¥ogøm_d⁄e
:

366  (
ªt
);

368 #unde‡
CFA


369 #unde‡
INITCFA


370 #unde‡
RL


371 #unde‡
INITRL


372 #unde‡
CHECK_TABLE_SIZE


373 
	}
}

376 
	$_dw¨f_‰ame_gë_öã∫Æ_èbÀ
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Fde
 
fde
,

377 
Dw¨f_Addr
 
pc_ªq
, 
Dw¨f_RegèbÀ3
 **
ªt_π
,

378 
Dw¨f_Addr
 *
ªt_row_pc
,

379 
Dw¨f_Eº‹
 *
îr‹
)

382 
Dw¨f_Cõ
 
cõ
;

383 
Dw¨f_RegèbÀ3
 *
π
;

384 
Dw¨f_Addr
 
row_pc
;

385 
i
, 
ªt
;

387 
	`as£π
(
ªt_π
 !
NULL
);

390 
	`as£π
(
dbg
 !
NULL
);

392 
π
 = 
dbg
->
dbg_öã∫Æ_ªg_èbÀ
;

395 
	`mem£t
(&
π
->
π3_cÁ_ruÀ
, 0, (
Dw¨f_RegèbÀ_E¡ry3
));

396 
	`mem£t
(
π
->
π3_ruÀs
, 0,Ñt->
π3_ªg_èbÀ_size
 *

397 (
Dw¨f_RegèbÀ_E¡ry3
));

400 
i
 = 0; i < 
π
->
π3_ªg_èbÀ_size
; i++)

401 
π
->
π3_ruÀs
[
i
].
dw_ªgnum
 = 
dbg
->
dbg_‰ame_ruÀ_öôül_vÆue
;

404 
cõ
 = 
fde
->
fde_cõ
;

405 
	`as£π
(
cõ
 !
NULL
);

406 
ªt
 = 
	`_dw¨f_‰ame_run_ö°
(
dbg
, 
π
, 
cõ
->
cõ_öôö°
,

407 
cõ
->
cõ_ö°Àn
, cõ->
cõ_ˇf
,

408 
cõ
->
cõ_daf
, 0, ~0ULL,

409 &
row_pc
, 
îr‹
);

410 i‡(
ªt
 !
DW_DLE_NONE
)

411  (
ªt
);

413 i‡(
pc_ªq
 >
fde
->
fde_öôloc
) {

414 
ªt
 = 
	`_dw¨f_‰ame_run_ö°
(
dbg
, 
π
, 
fde
->
fde_ö°
,

415 
fde
->
fde_ö°Àn
, 
cõ
->
cõ_ˇf
,

416 
cõ
->
cõ_daf
,

417 
fde
->
fde_öôloc
, 
pc_ªq
,

418 &
row_pc
, 
îr‹
);

419 i‡(
ªt
 !
DW_DLE_NONE
)

420  (
ªt
);

423 *
ªt_π
 = 
π
;

424 *
ªt_row_pc
 = 
row_pc
;

426  (
DW_DLE_NONE
);

427 
	}
}

431 
	$dw¨f_gë_fde_öfo_f‹_Æl_ªgs
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Fde
 
fde
,

432 
Dw¨f_Addr
 
pc_ªque°ed
,

433 
Dw¨f_RegèbÀ
 *
ªg_èbÀ
, 
Dw¨f_Addr
 *
row_pc
,

434 
Dw¨f_Eº‹
 *
îr‹
)

437 
Dw¨f_RegèbÀ3
 *
π
;

438 
Dw¨f_Addr
 
pc
;

439 
Dw¨f_HÆf
 
cÁ
;

440 
i
, 
ªt
;

442 i‡(
fde
 =
NULL
 || 
ªg_èbÀ
 == NULL) {

443 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_ARGUMENT
);

444  (
DW_DLV_ERROR
);

447 
	`as£π
(
dbg
 !
NULL
);

449 i‡(
pc_ªque°ed
 < 
fde
->
fde_öôloc
 ||

450 
pc_ªque°ed
 >
fde
->
fde_öôloc
 + fde->
fde_adønge
) {

451 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_PC_NOT_IN_FDE_RANGE
);

452  (
DW_DLV_ERROR
);

455 
ªt
 = 
	`_dw¨f_‰ame_gë_öã∫Æ_èbÀ
(
dbg
, 
fde
, 
pc_ªque°ed
, &
π
, &
pc
,

456 
îr‹
);

457 i‡(
ªt
 !
DW_DLE_NONE
)

458  (
DW_DLV_ERROR
);

464 
	#CFA
 
π
->
π3_cÁ_ruÀ


	)

465 
cÁ
 = 
dbg
->
dbg_‰ame_cÁ_vÆue
;

466 i‡(
cÁ
 < 
DW_REG_TABLE_SIZE
) {

467 
ªg_èbÀ
->
ruÀs
[
cÁ
].
dw_off£t_ªÀv™t
 =

468 
CFA
.
dw_off£t_ªÀv™t
;

469 
ªg_èbÀ
->
ruÀs
[
cÁ
].
dw_vÆue_ty≥
 = 
CFA
.dw_value_type;

470 
ªg_èbÀ
->
ruÀs
[
cÁ
].
dw_ªgnum
 = 
CFA
.dw_regnum;

471 
ªg_èbÀ
->
ruÀs
[
cÁ
].
dw_off£t
 = 
CFA
.
dw_off£t_‹_block_Àn
;

472 
ªg_èbÀ
->
cÁ_ruÀ
 =Ñeg_èbÀ->
ruÀs
[
cÁ
];

474 
ªg_èbÀ
->
cÁ_ruÀ
.
dw_off£t_ªÀv™t
 =

475 
CFA
.
dw_off£t_ªÀv™t
;

476 
ªg_èbÀ
->
cÁ_ruÀ
.
dw_vÆue_ty≥
 = 
CFA
.dw_value_type;

477 
ªg_èbÀ
->
cÁ_ruÀ
.
dw_ªgnum
 = 
CFA
.dw_regnum;

478 
ªg_èbÀ
->
cÁ_ruÀ
.
dw_off£t
 = 
CFA
.
dw_off£t_‹_block_Àn
;

484 
i
 = 0; i < 
DW_REG_TABLE_SIZE
 && i < 
dbg
->
dbg_‰ame_ruÀ_èbÀ_size
;

485 
i
++) {

488 i‡(
i
 =
cÁ
)

491 
ªg_èbÀ
->
ruÀs
[
i
].
dw_off£t_ªÀv™t
 =

492 
π
->
π3_ruÀs
[
i
].
dw_off£t_ªÀv™t
;

493 
ªg_èbÀ
->
ruÀs
[
i
].
dw_vÆue_ty≥
 =

494 
π
->
π3_ruÀs
[
i
].
dw_vÆue_ty≥
;

495 
ªg_èbÀ
->
ruÀs
[
i
].
dw_ªgnum
 = 
π
->
π3_ruÀs
[i].dw_regnum;

496 
ªg_èbÀ
->
ruÀs
[
i
].
dw_off£t
 =

497 
π
->
π3_ruÀs
[
i
].
dw_off£t_‹_block_Àn
;

500 i‡(
row_pc
Ë*row_p¯
pc
;

501  (
DW_DLV_OK
);

502 
	}
}

505 
	$_dw¨f_‰ame_ªad_lsb_ícoded
(
Dw¨f_Debug
 
dbg
, 
uöt64_t
 *
vÆ
, 
uöt8_t
 *
d©a
,

506 
uöt64_t
 *
off£ç
, 
uöt8_t
 
ícode
, 
Dw¨f_Addr
 
pc
, 
Dw¨f_Eº‹
 *
îr‹
)

508 
uöt8_t
 
≠∂iˇti⁄
;

510 i‡(
ícode
 =
DW_EH_PE_omô
)

511  (
DW_DLE_NONE
);

513 
≠∂iˇti⁄
 = 
ícode
 & 0xf0;

514 
ícode
 &= 0x0f;

516 
ícode
) {

517 
DW_EH_PE_ab•å
:

518 *
vÆ
 = 
dbg
->
	`ªad
(
d©a
, 
off£ç
, dbg->
dbg_poöãr_size
);

520 
DW_EH_PE_uÀb128
:

521 *
vÆ
 = 
	`_dw¨f_ªad_uÀb128
(
d©a
, 
off£ç
);

523 
DW_EH_PE_ud©a2
:

524 *
vÆ
 = 
dbg
->
	`ªad
(
d©a
, 
off£ç
, 2);

526 
DW_EH_PE_ud©a4
:

527 *
vÆ
 = 
dbg
->
	`ªad
(
d©a
, 
off£ç
, 4);

529 
DW_EH_PE_ud©a8
:

530 *
vÆ
 = 
dbg
->
	`ªad
(
d©a
, 
off£ç
, 8);

532 
DW_EH_PE_¶eb128
:

533 *
vÆ
 = 
	`_dw¨f_ªad_¶eb128
(
d©a
, 
off£ç
);

535 
DW_EH_PE_sd©a2
:

536 *
vÆ
 = (
öt16_t
Ë
dbg
->
	`ªad
(
d©a
, 
off£ç
, 2);

538 
DW_EH_PE_sd©a4
:

539 *
vÆ
 = (
öt32_t
Ë
dbg
->
	`ªad
(
d©a
, 
off£ç
, 4);

541 
DW_EH_PE_sd©a8
:

542 *
vÆ
 = 
dbg
->
	`ªad
(
d©a
, 
off£ç
, 8);

545 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_FRAME_AUGMENTATION_UNKNOWN
);

546  (
DW_DLE_FRAME_AUGMENTATION_UNKNOWN
);

549 i‡(
≠∂iˇti⁄
 =
DW_EH_PE_p¸ñ
) {

553 
ícode
) {

554 
DW_EH_PE_uÀb128
:

555 
DW_EH_PE_ud©a2
:

556 
DW_EH_PE_ud©a4
:

557 
DW_EH_PE_ud©a8
:

558 *
vÆ
 +
pc
;

560 
DW_EH_PE_¶eb128
:

561 
DW_EH_PE_sd©a2
:

562 
DW_EH_PE_sd©a4
:

563 
DW_EH_PE_sd©a8
:

564 *
vÆ
 = 
pc
 + (
öt64_t
) *val;

574  (
DW_DLE_NONE
);

575 
	}
}

578 
	$_dw¨f_‰ame_∑r£_lsb_cõ_augmít
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Cõ
 
cõ
,

579 
Dw¨f_Eº‹
 *
îr‹
)

581 
uöt8_t
 *
aug_p
, *
augd©a_p
;

582 
uöt64_t
 
vÆ
, 
off£t
;

583 
uöt8_t
 
ícode
;

584 
ªt
;

586 
	`as£π
(
cõ
->
cõ_augmít
 !
NULL
 && *cie->cie_augment == 'z');

593 
aug_p
 = &
cõ
->
cõ_augmít
[1];

594 
augd©a_p
 = 
cõ
->
cõ_augd©a
;

595 *
aug_p
 != '\0') {

596 *
aug_p
) {

599 
augd©a_p
++;

603 
ícode
 = *
augd©a_p
++;

604 
off£t
 = 0;

605 
ªt
 = 
	`_dw¨f_‰ame_ªad_lsb_ícoded
(
dbg
, &
vÆ
,

606 
augd©a_p
, &
off£t
, 
ícode
, 0, 
îr‹
);

607 i‡(
ªt
 !
DW_DLE_NONE
)

608  (
ªt
);

609 
augd©a_p
 +
off£t
;

612 
cõ
->
cõ_fde_ícode
 = *
augd©a_p
++;

615 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
,

616 
DW_DLE_FRAME_AUGMENTATION_UNKNOWN
);

617  (
DW_DLE_FRAME_AUGMENTATION_UNKNOWN
);

619 
aug_p
++;

622  (
DW_DLE_NONE
);

623 
	}
}

627 
	$_dw¨f_‰ame_£t_cõ
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Se˘i⁄
 *
ds
,

628 
Dw¨f_Unsig√d
 *
off
, 
Dw¨f_Cõ
 
ªt_cõ
, 
Dw¨f_Eº‹
 *
îr‹
)

630 
Dw¨f_Cõ
 
cõ
;

631 
uöt64_t
 
Àngth
;

632 
dw¨f_size
, 
ªt
;

633 *
p
;

635 
	`as£π
(
ªt_cõ
);

636 
cõ
 = 
ªt_cõ
;

638 
cõ
->
cõ_dbg
 = 
dbg
;

639 
cõ
->
cõ_off£t
 = *
off
;

641 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 4);

642 i‡(
Àngth
 == 0xffffffff) {

643 
dw¨f_size
 = 8;

644 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 8);

646 
dw¨f_size
 = 4;

648 i‡(
Àngth
 > 
dbg
->
dbg_eh_size
 - *
off
) {

649 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_DEBUG_FRAME_LENGTH_BAD
);

650  (
DW_DLE_DEBUG_FRAME_LENGTH_BAD
);

653 (Ë
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 
dw¨f_size
);

654 
cõ
->
cõ_Àngth
 = 
Àngth
;

656 
cõ
->
cõ_vîsi⁄
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 1);

657 i‡(
cõ
->
cõ_vîsi⁄
 != 1 && cie->cie_version != 3 &&

658 
cõ
->
cõ_vîsi⁄
 != 4) {

659 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_FRAME_VERSION_BAD
);

660  (
DW_DLE_FRAME_VERSION_BAD
);

663 
cõ
->
cõ_augmít
 = (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
 + *
off
;

664 
p
 = (*)
dbg
->
dbg_eh_off£t
;

665 
p
[(*
off
)++] != '\0')

669 i‡(*
cõ
->
cõ_augmít
 != 0 && *cie->cie_augment != 'z') {

670 *
off
 = 
cõ
->
cõ_off£t
 + ((
dw¨f_size
 == 4) ? 4 : 12) +

671 
cõ
->
cõ_Àngth
;

672  (
DW_DLE_NONE
);

676 i‡(
	`°r°r
((*)
cõ
->
cõ_augmít
, "eh"Ë!
NULL
)

677 
cõ
->
cõ_ehd©a
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
,

678 
dbg
->
dbg_poöãr_size
);

680 
cõ
->
cõ_ˇf
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
dbg
->
dbg_eh_off£t
, 
off
);

681 
cõ
->
cõ_daf
 = 
	`_dw¨f_ªad_¶eb128
((
uöt8_t
 *)
dbg
->
dbg_eh_off£t
, 
off
);

684 i‡(
cõ
->
cõ_vîsi⁄
 == 1)

685 
cõ
->
cõ_ø
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 1);

687 
cõ
->
cõ_ø
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
dbg
->
dbg_eh_off£t
, 
off
);

690 i‡(*
cõ
->
cõ_augmít
 == 'z') {

691 
cõ
->
cõ_augÀn
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
dbg
->
dbg_eh_off£t
, 
off
);

692 
cõ
->
cõ_augd©a
 = (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
 + *
off
;

693 *
off
 +
cõ
->
cõ_augÀn
;

699 
cõ
->
cõ_fde_ícode
 = 
DW_EH_PE_ab•å
;

700 
ªt
 = 
	`_dw¨f_‰ame_∑r£_lsb_cõ_augmít
(
dbg
, 
cõ
, 
îr‹
);

701 i‡(
ªt
 !
DW_DLE_NONE
)

702  (
ªt
);

706 
cõ
->
cõ_öôö°
 = (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
 + *
off
;

707 i‡(
dw¨f_size
 == 4)

708 
cõ
->
cõ_ö°Àn
 = cõ->
cõ_off£t
 + 4 + 
Àngth
 - *
off
;

710 
cõ
->
cõ_ö°Àn
 = cõ->
cõ_off£t
 + 12 + 
Àngth
 - *
off
;

712 *
off
 +
cõ
->
cõ_ö°Àn
;

713  (
DW_DLE_NONE
);

714 
	}
}

717 
	$_dw¨f_‰ame_£t_fde
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Fde
 
ªt_fde
, 
Dw¨f_Se˘i⁄
 *
ds
,

718 
Dw¨f_Unsig√d
 *
off
, 
eh_‰ame
, 
Dw¨f_Cõ
 
cõ
, 
Dw¨f_Eº‹
 *
îr‹
)

720 
Dw¨f_Fde
 
fde
;

721 
Dw¨f_Unsig√d
 
cõoff
;

722 
uöt64_t
 
Àngth
, 
vÆ
;

723 
dw¨f_size
, 
ªt
;

725 
fde
 = 
ªt_fde
;

726 
fde
->
fde_dbg
 = 
dbg
;

727 
fde
->
fde_addr
 = (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
 + *
off
;

728 
fde
->
fde_off£t
 = *
off
;

730 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 4);

731 i‡(
Àngth
 == 0xffffffff) {

732 
dw¨f_size
 = 8;

733 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 8);

735 
dw¨f_size
 = 4;

737 i‡(
Àngth
 > 
dbg
->
dbg_eh_size
 - *
off
) {

738 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_DEBUG_FRAME_LENGTH_BAD
);

739  (
DW_DLE_DEBUG_FRAME_LENGTH_BAD
);

742 
fde
->
fde_Àngth
 = 
Àngth
;

744 i‡(
eh_‰ame
) {

745 
fde
->
fde_cõoff
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 4);

746 
cõoff
 = *
off
 - (4 + 
fde
->
fde_cõoff
);

748 i‡(
cõoff
 =
fde
->
fde_off£t
) {

749 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_NO_CIE_FOR_FDE
);

750  (
DW_DLE_NO_CIE_FOR_FDE
);

753 
fde
->
fde_cõoff
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
, 
dw¨f_size
);

754 
cõoff
 = 
fde
->
fde_cõoff
;

757 i‡(
eh_‰ame
) {

762 
ªt
 = 
	`_dw¨f_‰ame_ªad_lsb_ícoded
(
dbg
, &
vÆ
,

763 (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
,

764 
off
, 
cõ
->
cõ_fde_ícode
, 
ds
->
ds_addr
 + *off, 
îr‹
);

765 i‡(
ªt
 !
DW_DLE_NONE
)

766  (
ªt
);

767 
fde
->
fde_öôloc
 = 
vÆ
;

772 
ªt
 = 
	`_dw¨f_‰ame_ªad_lsb_ícoded
(
dbg
, &
vÆ
,

773 (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
,

774 
off
, 
cõ
->
cõ_fde_ícode
, 0, 
îr‹
);

775 i‡(
ªt
 !
DW_DLE_NONE
)

776  (
ªt
);

777 
fde
->
fde_adønge
 = 
vÆ
;

779 
fde
->
fde_öôloc
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
,

780 
dbg
->
dbg_poöãr_size
);

781 
fde
->
fde_adønge
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, 
off
,

782 
dbg
->
dbg_poöãr_size
);

786 i‡(
eh_‰ame
 && *
cõ
->
cõ_augmít
 == 'z') {

787 
fde
->
fde_augÀn
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
dbg
->
dbg_eh_off£t
, 
off
);

788 
fde
->
fde_augd©a
 = (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
 + *
off
;

789 *
off
 +
fde
->
fde_augÀn
;

792 
fde
->
fde_ö°
 = (
uöt8_t
 *)
dbg
->
dbg_eh_off£t
 + *
off
;

793 i‡(
dw¨f_size
 == 4)

794 
fde
->
fde_ö°Àn
 = fde->
fde_off£t
 + 4 + 
Àngth
 - *
off
;

796 
fde
->
fde_ö°Àn
 = fde->
fde_off£t
 + 12 + 
Àngth
 - *
off
;

798 *
off
 +
fde
->
fde_ö°Àn
;

799  (
DW_DLE_NONE
);

800 
	}
}

804 
	$_dw¨f_‰ame_öãøl_èbÀ_öô
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Eº‹
 *
îr‹
)

806 
Dw¨f_RegèbÀ3
 *
π
 = &
globÆ_π_èbÀ
;

808 i‡(
dbg
->
dbg_öã∫Æ_ªg_èbÀ
 !
NULL
)

809  (
DW_DLE_NONE
);

811 
π
->
π3_ªg_èbÀ_size
 = 
dbg
->
dbg_‰ame_ruÀ_èbÀ_size
;

812 
π
->
π3_ruÀs
 = 
globÆ_ruÀs
;

814 
dbg
->
dbg_öã∫Æ_ªg_èbÀ
 = 
π
;

816  (
DW_DLE_NONE
);

817 
	}
}

820 
	$_dw¨f_gë_√xt_fde
(
Dw¨f_Debug
 
dbg
,

821 
eh_‰ame
, 
Dw¨f_Eº‹
 *
îr‹
, 
Dw¨f_Fde
 
ªt_fde
)

823 
Dw¨f_Se˘i⁄
 *
ds
 = &
debug_‰ame_£c
;

824 
uöt64_t
 
Àngth
, 
off£t
, 
cõ_id
, 
íåy_off
;

825 
dw¨f_size
, 
i
, 
ªt
=-1;

827 
off£t
 = 
dbg
->
cuº_off_eh
;

828 i‡(
off£t
 < 
dbg
->
dbg_eh_size
) {

829 
íåy_off
 = 
off£t
;

830 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, &
off£t
, 4);

831 i‡(
Àngth
 == 0xffffffff) {

832 
dw¨f_size
 = 8;

833 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, &
off£t
, 8);

835 
dw¨f_size
 = 4;

837 i‡(
Àngth
 > 
dbg
->
dbg_eh_size
 - 
off£t
 || (Àngth =0 && !
eh_‰ame
)) {

838 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
,

839 
DW_DLE_DEBUG_FRAME_LENGTH_BAD
);

840  (
DW_DLE_DEBUG_FRAME_LENGTH_BAD
);

844 i‡(
eh_‰ame
 && 
Àngth
 == 0)

847 
cõ_id
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_eh_off£t
, &
off£t
, 
dw¨f_size
);

849 i‡(
eh_‰ame
) {

851 i‡(
cõ_id
 == 0)

852 
ªt
 = 
	`_dw¨f_‰ame_£t_cõ
(
dbg
, 
ds
,

853 &
íåy_off
, 
ªt_fde
->
fde_cõ
, 
îr‹
);

855 
ªt
 = 
	`_dw¨f_‰ame_£t_fde
(
dbg
,
ªt_fde
, 
ds
,

856 &
íåy_off
, 1, 
ªt_fde
->
fde_cõ
, 
îr‹
);

859 i‡((
dw¨f_size
 =4 && 
cõ_id
 == ~0U) ||

860 (
dw¨f_size
 =8 && 
cõ_id
 == ~0ULL))

861 
ªt
 = 
	`_dw¨f_‰ame_£t_cõ
(
dbg
, 
ds
,

862 &
íåy_off
, 
ªt_fde
->
fde_cõ
, 
îr‹
);

864 
ªt
 = 
	`_dw¨f_‰ame_£t_fde
(
dbg
, 
ªt_fde
, 
ds
,

865 &
íåy_off
, 0, 
ªt_fde
->
fde_cõ
, 
îr‹
);

868 i‡(
ªt
 !
DW_DLE_NONE
)

871 
off£t
 = 
íåy_off
;

872 
dbg
->
cuº_off_eh
 = 
off£t
;

876 
	}
}

878 
Dw¨f_HÆf


879 
	$dw¨f_£t_‰ame_cÁ_vÆue
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_HÆf
 
vÆue
)

881 
Dw¨f_HÆf
 
ﬁd_vÆue
;

883 
ﬁd_vÆue
 = 
dbg
->
dbg_‰ame_cÁ_vÆue
;

884 
dbg
->
dbg_‰ame_cÁ_vÆue
 = 
vÆue
;

886  (
ﬁd_vÆue
);

887 
	}
}

889 
	$dw¨f_öô_eh_£˘i⁄
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Eº‹
 *
îr‹
)

891 
Dw¨f_Se˘i⁄
 *
£˘i⁄
;

893 i‡(
dbg
 =
NULL
) {

894 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_ARGUMENT
);

895  (
DW_DLV_ERROR
);

898 i‡(
dbg
->
dbg_öã∫Æ_ªg_èbÀ
 =
NULL
) {

899 i‡(
	`_dw¨f_‰ame_öãøl_èbÀ_öô
(
dbg
, 
îr‹
Ë!
DW_DLE_NONE
)

900  (
DW_DLV_ERROR
);

903 
	`_dw¨f_föd_£˘i⁄_íh™˚d
(&
debug_‰ame_£c
);

905 
dbg
->
cuº_off_eh
 = 0;

906 
dbg
->
dbg_eh_off£t
 = 
debug_‰ame_£c
.
ds_addr
;

907 
dbg
->
dbg_eh_size
 = 
debug_‰ame_£c
.
ds_size
;

909  (
DW_DLV_OK
);

910 
	}
}

	@kern/libdwarf_lineno.c

27 
	~<öc/ty≥s.h
>

28 
	~<öc/°rög.h
>

29 
	~<öc/as£π.h
>

30 
	~"dw¨f_ñf.h
"

31 
	~"dw¨f_deföe.h
"

32 
	~"dw¨f_îr‹.h
"

33 
	~"dw¨f.h
"

35 
	~"dw¨f_löío.h
"

37 
Dw¨f_Debug
 
dbg
;

38 
Dw¨f_SmÆl
 
	gglobÆ_°d_›
[512];

40 
öt64_t


41 
_dw¨f_ªad_¶eb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
);

42 
uöt64_t


43 
_dw¨f_ªad_uÀb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
);

44 
uöt64_t


45 
_dw¨f_decode_uÀb128
(
uöt8_t
 **
dp
);

46 
öt64_t


47 
_dw¨f_decode_¶eb128
(
uöt8_t
 **
dp
);

48 
_dw¨f_föd_£˘i⁄_íh™˚d
(
Dw¨f_Se˘i⁄
 *
ds
);

51 
	$_dw¨f_löío_run_¥ogøm
(
Dw¨f_CU
 *
cu
, 
Dw¨f_LöeInfo
 
li
, 
uöt8_t
 *
p
,

52 
uöt8_t
 *
≥
, 
Dw¨f_Addr
 
pc
, 
Dw¨f_Eº‹
 *
îr‹
)

54 
Dw¨f_Löe
 
 
, 
én
;

55 
uöt64_t
 
addªss
, 
fûe
, 
löe
, 
cﬁumn
, 
iß
, 
›size
;

56 
is_°mt
, 
basic_block
, 
íd_£quí˚
;

57 
¥ﬁogue_íd
, 
ïûogue_begö
;

58 
ªt
;

60 
 
 = &
li
->
li_löe
;

61 
	#RESET_REGISTERS
 \

63 
addªss
 = 0; \

64 
fûe
 = 1; \

65 
löe
 = 1; \

66 
cﬁumn
 = 0; \

67 
is_°mt
 = 
li
->
li_def°mt
; \

68 
basic_block
 = 0; \

69 
íd_£quí˚
 = 0; \

70 
¥ﬁogue_íd
 = 0; \

71 
ïûogue_begö
 = 0; \

72 } 0)

	)

74 
	#APPEND_ROW
 \

76 i‡(
pc
 < 
addªss
) { \

77  
DW_DLE_NONE
; \

79 
 
->
 _addr
 = 
addªss
; \

80 
 
->
 _symndx
 = 0; \

81 
 
->
 _fûío
 = 
fûe
; \

82 
 
->
 _löío
 = 
löe
; \

83 
 
->
 _cﬁumn
 = 
cﬁumn
; \

84 
 
->
 _bblock
 = 
basic_block
; \

85 
 
->
 _°mt
 = 
is_°mt
; \

86 
 
->
 _íd£q
 = 
íd_£quí˚
; \

87 
li
->
li_ Àn
++; \

88 } 0)

	)

90 
	#LINE
(
x
Ë(
li
->
li_lba£
 + (((xË-Üi->
li_›ba£
Ë%Üi->
li_Ã™ge
))

	)

91 
	#ADDRESS
(
x
Ë((((xË- 
li
->
li_›ba£
Ë/Üi->
li_Ã™ge
Ë*Üi->
li_möÀn
)

	)

97 
RESET_REGISTERS
;

102 
p
 < 
≥
) {

103 i‡(*
p
 == 0) {

109 
p
++;

110 
›size
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

111 *
p
) {

112 
DW_LNE_íd_£quí˚
:

113 
p
++;

114 
íd_£quí˚
 = 1;

115 
RESET_REGISTERS
;

117 
DW_LNE_£t_addªss
:

118 
p
++;

119 
addªss
 = 
dbg
->
	`decode
(&
p
, 
cu
->
addr_size
);

121 
DW_LNE_deföe_fûe
:

122 
p
++;

123 
ªt
 = 
	`_dw¨f_löío_add_fûe
(
li
, &
p
, 
NULL
,

124 
îr‹
, 
dbg
);

125 i‡(
ªt
 !
DW_DLE_NONE
)

126 
¥og_Áû
;

130 
p
 +
›size
;

133 } i‡(*
p
 > 0 && *∞< 
li
->
li_›ba£
) {

139 *
p
++) {

140 
DW_LNS_c›y
:

141 
APPEND_ROW
;

142 
basic_block
 = 0;

143 
¥ﬁogue_íd
 = 0;

144 
ïûogue_begö
 = 0;

146 
DW_LNS_adv™˚_pc
:

147 
addªss
 +
	`_dw¨f_decode_uÀb128
(&
p
) *

148 
li
->
li_möÀn
;

150 
DW_LNS_adv™˚_löe
:

151 
löe
 +
	`_dw¨f_decode_¶eb128
(&
p
);

153 
DW_LNS_£t_fûe
:

154 
fûe
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

156 
DW_LNS_£t_cﬁumn
:

157 
cﬁumn
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

159 
DW_LNS_√g©e_°mt
:

160 
is_°mt
 = !is_stmt;

162 
DW_LNS_£t_basic_block
:

163 
basic_block
 = 1;

165 
DW_LNS_c⁄°_add_pc
:

166 
addªss
 +
	`ADDRESS
(255);

168 
DW_LNS_fixed_adv™˚_pc
:

169 
addªss
 +
dbg
->
	`decode
(&
p
, 2);

171 
DW_LNS_£t_¥ﬁogue_íd
:

172 
¥ﬁogue_íd
 = 1;

174 
DW_LNS_£t_ïûogue_begö
:

175 
ïûogue_begö
 = 1;

177 
DW_LNS_£t_iß
:

178 
iß
 = 
	`_dw¨f_decode_uÀb128
(&
p
);

191 
löe
 +
	`LINE
(*
p
);

192 
addªss
 +
	`ADDRESS
(*
p
);

193 
APPEND_ROW
;

194 
basic_block
 = 0;

195 
¥ﬁogue_íd
 = 0;

196 
ïûogue_begö
 = 0;

197 
p
++;

201  (
DW_DLE_NONE
);

203 
¥og_Áû
:

205  (
ªt
);

207 #unde‡
RESET_REGISTERS


208 #unde‡
APPEND_ROW


209 #unde‡
LINE


210 #unde‡
ADDRESS


211 
	}
}

214 
	$_dw¨f_löío_add_fûe
(
Dw¨f_LöeInfo
 
li
, 
uöt8_t
 **
p
, c⁄° *
compdú
,

215 
Dw¨f_Eº‹
 *
îr‹
, 
Dw¨f_Debug
 
dbg
)

217 *
‚ame
;

219 
uöt8_t
 *
§c
;

220 
¶í
;

222 
§c
 = *
p
;

230 
‚ame
 = (*Ë
§c
;

231 
§c
 +
	`°æí
(
‚ame
) + 1;

232 
	`_dw¨f_decode_uÀb128
(&
§c
);

251 
	`_dw¨f_decode_uÀb128
(&
§c
);

252 
	`_dw¨f_decode_uÀb128
(&
§c
);

256 *
p
 = 
§c
;

258  (
DW_DLE_NONE
);

259 
	}
}

262 
	$_dw¨f_löío_öô
(
Dw¨f_Dõ
 *
dõ
, 
uöt64_t
 
off£t
, 
Dw¨f_LöeInfo
 
löfo
, 
Dw¨f_Addr
 
pc
, 
Dw¨f_Eº‹
 *
îr‹
)

264 
Dw¨f_Se˘i⁄
 
myds
 = {.
ds_«me
 = ".debug_line"};

265 
Dw¨f_Se˘i⁄
 *
ds
 = &
myds
;

266 
Dw¨f_CU
 *
cu
;

267 
Dw¨f_Aâribuã
 
©
;

268 
Dw¨f_LöeInfo
 
li
;

270 
uöt64_t
 
Àngth
, 
hdroff
, 
ídoff
;

271 
uöt8_t
 *
p
;

272 
dw¨f_size
, 
i
, 
ªt
;

274 
cu
 = 
dõ
->
cu_hódî
;

275 
	`as£π
(
cu
 !
NULL
);

276 
	`as£π
(
dbg
 !
NULL
);

278 i‡((
	`_dw¨f_föd_£˘i⁄_íh™˚d
(
ds
)) != 0)

279  (
DW_DLE_NONE
);

281 
li
 = 
löfo
;

301 
Àngth
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 4);

302 i‡(
Àngth
 == 0xffffffff) {

303 
dw¨f_size
 = 8;

304 
Àngth
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 8);

306 
dw¨f_size
 = 4;

308 i‡(
Àngth
 > 
ds
->
ds_size
 - 
off£t
) {

309 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_DEBUG_LINE_LENGTH_BAD
);

310  (
DW_DLE_DEBUG_LINE_LENGTH_BAD
);

315 
li
->
li_Àngth
 = 
Àngth
;

316 
ídoff
 = 
off£t
 + 
Àngth
;

317 
li
->
li_vîsi⁄
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 2);

318 
li
->
li_hdæí
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 
dw¨f_size
);

319 
hdroff
 = 
off£t
;

320 
li
->
li_möÀn
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 1);

321 
li
->
li_def°mt
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 1);

322 
li
->
li_lba£
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 1);

323 
li
->
li_Ã™ge
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 1);

324 
li
->
li_›ba£
 = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 1);

328 i‡(()
li
->
li_hdæí
 - 5 <Üi->
li_›ba£
 - 1) {

329 
ªt
 = 
DW_DLE_DEBUG_LINE_LENGTH_BAD
;

330 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
ªt
);

331 
Áû_˛ónup
;

334 
li
->
li_›Àn
 = 
globÆ_°d_›
;

345 
i
 = 1; i < 
li
->
li_›ba£
; i++)

346 
li
->
li_›Àn
[
i
] = 
dbg
->
	`ªad
(
ds
->
ds_d©a
, &
off£t
, 1);

351 
Àngth
 = 0;

352 
p
 = 
ds
->
ds_d©a
 + 
off£t
;

353 *
p
 != '\0') {

354 *
p
++ != '\0')

356 
Àngth
++;

358 
li
->
li_ö˛í
 = 
Àngth
;

361 i‡(
p
 - 
ds
->
ds_d©a
 > (Ëds->
ds_size
) {

362 
ªt
 = 
DW_DLE_DEBUG_LINE_LENGTH_BAD
;

363 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
ªt
);

364 
Áû_˛ónup
;

366 
p
++;

371 *
p
 != '\0') {

372 
ªt
 = 
	`_dw¨f_löío_add_fûe
(
li
, &
p
, 
NULL
, 
îr‹
, 
dbg
);

376 
p
++;

378 i‡(
p
 - 
ds
->
ds_d©a
 - 
hdroff
 !
li
->
li_hdæí
) {

379 
ªt
 = 
DW_DLE_DEBUG_LINE_LENGTH_BAD
;

380 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
ªt
);

381 
Áû_˛ónup
;

387 
ªt
 = 
	`_dw¨f_löío_run_¥ogøm
(
cu
, 
li
, 
p
, 
ds
->
ds_d©a
 + 
ídoff
, 
pc
,

388 
îr‹
);

389 i‡(
ªt
 !
DW_DLE_NONE
)

390 
Áû_˛ónup
;

394  (
DW_DLE_NONE
);

396 
Áû_˛ónup
:

401  (
ªt
);

402 
	}
}

405 
	$dw¨f_§˛öes
(
Dw¨f_Dõ
 *
dõ
, 
Dw¨f_Löe
 
löebuf
, 
Dw¨f_Addr
 
pc
, 
Dw¨f_Eº‹
 *
îr‹
)

407 
_Dw¨f_LöeInfo
 
li
;

408 
Dw¨f_Aâribuã
 *
©
;

410 
	`as£π
(
dõ
);

411 
	`as£π
(
löebuf
);

413 
	`mem£t
(&
li
, 0, (
_Dw¨f_LöeInfo
));

415 i‡((
©
 = 
	`_dw¨f_©å_föd
(
dõ
, 
DW_AT_°mt_li°
)Ë=
NULL
) {

416 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_NO_ENTRY
);

417  (
DW_DLV_NO_ENTRY
);

420 i‡(
	`_dw¨f_löío_öô
(
dõ
, 
©
->
u
[0].
u64
, &
li
, 
pc
, 
îr‹
) !=

421 
DW_DLE_NONE
)

423  (
DW_DLV_ERROR
);

425 *
löebuf
 = 
li
.
li_löe
;

427  (
DW_DLV_OK
);

428 
	}
}

	@kern/libdwarf_rw.c

27 
	~<öc/°dio.h
>

28 
	~<öc/as£π.h
>

29 
	~<öc/ty≥s.h
>

30 
	~<öc/°rög.h
>

31 
	~"dw¨f_ñf.h
"

32 
	~"dw¨f_deföe.h
"

33 
	~"dw¨f_îr‹.h
"

34 
	~"dw¨f.h
"

37 
Dw¨f_Aâribuã
* 
_dw¨f_©å_föd
(
Dw¨f_Dõ
 *
dõ
, 
uöt16_t
 
©å
);

38 * 
ñf_ba£_±r
;

40 
_dw¨f_‰ame_∑øms_öô
(
Dw¨f_Debug
 
dbg
);

42 
Dw¨f_Se˘i⁄
 *

43 
_dw¨f_föd_£˘i⁄
(c⁄° *
«me
);

45 
uöt64_t


46 
	$_dw¨f_ªad_lsb
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
, 
byãs_to_ªad
)

48 
uöt64_t
 
ªt
;

49 
uöt8_t
 *
§c
;

51 
§c
 = 
d©a
 + *
off£ç
;

53 
ªt
 = 0;

54 
byãs_to_ªad
) {

56 
ªt
 |((
uöt64_t
Ë
§c
[4]) << 32 | ((uint64_t) src[5]) << 40;

57 
ªt
 |((
uöt64_t
Ë
§c
[6]) << 48 | ((uint64_t) src[7]) << 56;

59 
ªt
 |((
uöt64_t
Ë
§c
[2]) << 16 | ((uint64_t) src[3]) << 24;

61 
ªt
 |((
uöt64_t
Ë
§c
[1]) << 8;

63 
ªt
 |
§c
[0];

69 *
off£ç
 +
byãs_to_ªad
;

71  (
ªt
);

72 
	}
}

74 
uöt64_t


75 
	$_dw¨f_decode_lsb
(
uöt8_t
 **
d©a
, 
byãs_to_ªad
)

77 
uöt64_t
 
ªt
;

78 
uöt8_t
 *
§c
;

80 
§c
 = *
d©a
;

82 
ªt
 = 0;

83 
byãs_to_ªad
) {

85 
ªt
 |((
uöt64_t
Ë
§c
[4]) << 32 | ((uint64_t) src[5]) << 40;

86 
ªt
 |((
uöt64_t
Ë
§c
[6]) << 48 | ((uint64_t) src[7]) << 56;

88 
ªt
 |((
uöt64_t
Ë
§c
[2]) << 16 | ((uint64_t) src[3]) << 24;

90 
ªt
 |((
uöt64_t
Ë
§c
[1]) << 8;

92 
ªt
 |
§c
[0];

98 *
d©a
 +
byãs_to_ªad
;

100  (
ªt
);

101 
	}
}

103 
uöt64_t


104 
	$_dw¨f_ªad_msb
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
, 
byãs_to_ªad
)

106 
uöt64_t
 
ªt
;

107 
uöt8_t
 *
§c
;

109 
§c
 = 
d©a
 + *
off£ç
;

111 
byãs_to_ªad
) {

113 
ªt
 = 
§c
[0];

116 
ªt
 = 
§c
[1] | ((
uöt64_t
) src[0]) << 8;

119 
ªt
 = 
§c
[3] | ((
uöt64_t
) src[2]) << 8;

120 
ªt
 |((
uöt64_t
Ë
§c
[1]) << 16 | ((uint64_t) src[0]) << 24;

123 
ªt
 = 
§c
[7] | ((
uöt64_t
) src[6]) << 8;

124 
ªt
 |((
uöt64_t
Ë
§c
[5]) << 16 | ((uint64_t) src[4]) << 24;

125 
ªt
 |((
uöt64_t
Ë
§c
[3]) << 32 | ((uint64_t) src[2]) << 40;

126 
ªt
 |((
uöt64_t
Ë
§c
[1]) << 48 | ((uint64_t) src[0]) << 56;

132 *
off£ç
 +
byãs_to_ªad
;

134  (
ªt
);

135 
	}
}

137 
uöt64_t


138 
	$_dw¨f_decode_msb
(
uöt8_t
 **
d©a
, 
byãs_to_ªad
)

140 
uöt64_t
 
ªt
;

141 
uöt8_t
 *
§c
;

143 
§c
 = *
d©a
;

145 
ªt
 = 0;

146 
byãs_to_ªad
) {

148 
ªt
 = 
§c
[0];

151 
ªt
 = 
§c
[1] | ((
uöt64_t
) src[0]) << 8;

154 
ªt
 = 
§c
[3] | ((
uöt64_t
) src[2]) << 8;

155 
ªt
 |((
uöt64_t
Ë
§c
[1]) << 16 | ((uint64_t) src[0]) << 24;

158 
ªt
 = 
§c
[7] | ((
uöt64_t
) src[6]) << 8;

159 
ªt
 |((
uöt64_t
Ë
§c
[5]) << 16 | ((uint64_t) src[4]) << 24;

160 
ªt
 |((
uöt64_t
Ë
§c
[3]) << 32 | ((uint64_t) src[2]) << 40;

161 
ªt
 |((
uöt64_t
Ë
§c
[1]) << 48 | ((uint64_t) src[0]) << 56;

168 *
d©a
 +
byãs_to_ªad
;

170  (
ªt
);

171 
	}
}

173 
öt64_t


174 
	$_dw¨f_ªad_¶eb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
)

176 
öt64_t
 
ªt
 = 0;

177 
uöt8_t
 
b
;

178 
shi·
 = 0;

179 
uöt8_t
 *
§c
;

181 
§c
 = 
d©a
 + *
off£ç
;

184 
b
 = *
§c
++;

185 
ªt
 |((
b
 & 0x7fË<< 
shi·
);

186 (*
off£ç
)++;

187 
shi·
 += 7;

188 } (
b
 & 0x80) != 0);

190 i‡(
shi·
 < 32 && (
b
 & 0x40) != 0)

191 
ªt
 |(-1 << 
shi·
);

193  (
ªt
);

194 
	}
}

196 
uöt64_t


197 
	$_dw¨f_ªad_uÀb128
(
uöt8_t
 *
d©a
, 
uöt64_t
 *
off£ç
)

199 
uöt64_t
 
ªt
 = 0;

200 
uöt8_t
 
b
;

201 
shi·
 = 0;

202 
uöt8_t
 *
§c
;

204 
§c
 = 
d©a
 + *
off£ç
;

207 
b
 = *
§c
++;

208 
ªt
 |((
b
 & 0x7fË<< 
shi·
);

209 (*
off£ç
)++;

210 
shi·
 += 7;

211 } (
b
 & 0x80) != 0);

213  (
ªt
);

214 
	}
}

216 
öt64_t


217 
	$_dw¨f_decode_¶eb128
(
uöt8_t
 **
dp
)

219 
öt64_t
 
ªt
 = 0;

220 
uöt8_t
 
b
;

221 
shi·
 = 0;

223 
uöt8_t
 *
§c
 = *
dp
;

226 
b
 = *
§c
++;

227 
ªt
 |((
b
 & 0x7fË<< 
shi·
);

228 
shi·
 += 7;

229 } (
b
 & 0x80) != 0);

231 i‡(
shi·
 < 32 && (
b
 & 0x40) != 0)

232 
ªt
 |(-1 << 
shi·
);

234 *
dp
 = 
§c
;

236  (
ªt
);

237 
	}
}

239 
uöt64_t


240 
	$_dw¨f_decode_uÀb128
(
uöt8_t
 **
dp
)

242 
uöt64_t
 
ªt
 = 0;

243 
uöt8_t
 
b
;

244 
shi·
 = 0;

246 
uöt8_t
 *
§c
 = *
dp
;

249 
b
 = *
§c
++;

250 
ªt
 |((
b
 & 0x7fË<< 
shi·
);

251 
shi·
 += 7;

252 } (
b
 & 0x80) != 0);

254 *
dp
 = 
§c
;

256  (
ªt
);

257 
	}
}

259 
	#Dw¨f_Unsig√d
 
uöt64_t


	)

262 
	$_dw¨f_ªad_°rög
(*
d©a
, 
Dw¨f_Unsig√d
 
size
, 
uöt64_t
 *
off£ç
)

264 *
ªt
, *
§c
;

266 
ªt
 = 
§c
 = (*Ë
d©a
 + *
off£ç
;

268 *
§c
 !'\0' && *
off£ç
 < 
size
) {

269 
§c
++;

270 (*
off£ç
)++;

273 i‡(*
§c
 ='\0' && *
off£ç
 < 
size
)

274 (*
off£ç
)++;

276  (
ªt
);

277 
	}
}

279 
uöt8_t
 *

280 
	$_dw¨f_ªad_block
(*
d©a
, 
uöt64_t
 *
off£ç
, uöt64_à
Àngth
)

282 
uöt8_t
 *
ªt
, *
§c
;

284 
ªt
 = 
§c
 = (
uöt8_t
 *Ë
d©a
 + *
off£ç
;

286 (*
off£ç
Ë+
Àngth
;

288  (
ªt
);

289 
	}
}

291 
Dw¨f_Endü¬ess


292 
	$_dw¨f_ñf_gë_byã_‹dî
(*
obj
)

294 
Elf
 *
e
;

296 
e
 = (
Elf
 *)
obj
;

297 
	`as£π
(
e
 !
NULL
);

302 
e
->
e_idít
[
EI_DATA
]) {

303 
ELFDATA2MSB
:

304  (
DW_OBJECT_MSB
);

306 
ELFDATA2LSB
:

307 
ELFDATANONE
:

309  (
DW_OBJECT_LSB
);

311 
	}
}

313 
Dw¨f_SmÆl


314 
	$_dw¨f_ñf_gë_poöãr_size
(*
obj
)

316 
Elf
 *
e
;

318 
e
 = (
Elf
 *Ë
obj
;

319 
	`as£π
(
e
 !
NULL
);

321 i‡(
e
->
e_idít
[4] =
ELFCLASS32
)

325 
	}
}

328 
	$_dw¨f_öô
(
Dw¨f_Debug
 
dbg
, *
obj
)

330 
	`mem£t
(
dbg
, 0, (
_Dw¨f_Debug
));

331 
dbg
->
cuº_off_dbgöfo
 = 0;

332 
dbg
->
dbg_öfo_size
 = 0;

333 
dbg
->
dbg_poöãr_size
 = 
	`_dw¨f_ñf_gë_poöãr_size
(
obj
);

335 i‡(
	`_dw¨f_ñf_gë_byã_‹dî
(
obj
Ë=
DW_OBJECT_MSB
) {

336 
dbg
->
ªad
 = 
_dw¨f_ªad_msb
;

337 
dbg
->
decode
 = 
_dw¨f_decode_msb
;

339 
dbg
->
ªad
 = 
_dw¨f_ªad_lsb
;

340 
dbg
->
decode
 = 
_dw¨f_decode_lsb
;

342 
	`_dw¨f_‰ame_∑øms_öô
(
dbg
);

344 
	}
}

347 
	$_gë_√xt_cu
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_CU
 *
cu
)

349 
uöt32_t
 
Àngth
;

350 
uöt64_t
 
off£t
;

351 
uöt8_t
 
dw¨f_size
;

353 if(
dbg
->
cuº_off_dbgöfo
 > dbg->
dbg_öfo_size
)

356 
off£t
 = 
dbg
->
cuº_off_dbgöfo
;

357 
cu
->
cu_off£t
 = 
off£t
;

359 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_öfo_off£t_ñf
, &
off£t
,4);

360 i‡(
Àngth
 == 0xffffffff) {

361 
Àngth
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_öfo_off£t_ñf
, &
off£t
, 8);

362 
dw¨f_size
 = 8;

364 
dw¨f_size
 = 4;

367 
cu
->
cu_dw¨f_size
 = 
dw¨f_size
;

379 
dbg
->
cuº_off_dbgöfo
 = 
off£t
 + 
Àngth
;

380 
cu
->
cu_√xt_off£t
 = 
dbg
->
cuº_off_dbgöfo
;

383 
cu
->
cu_Àngth
 = (
uöt64_t
)
Àngth
;

385 
cu
->
cu_Àngth_size
 = (
dw¨f_size
 == 4 ? 4 : 12);

386 
cu
->
vîsi⁄
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_öfo_off£t_ñf
, &
off£t
, 2);

387 
cu
->
debug_abbªv_off£t
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_öfo_off£t_ñf
, &
off£t
, 
dw¨f_size
);

389 
cu
->
addr_size
 = 
dbg
->
	`ªad
((
uöt8_t
 *)dbg->
dbg_öfo_off£t_ñf
, &
off£t
, 1);

391 i‡(
cu
->
vîsi⁄
 < 2 || cu->version > 4) {

395 
cu
->
cu_dõ_off£t
 = 
off£t
;

398 
	}
}

400 
	$¥öt_cu
(
Dw¨f_CU
 
cu
)

402 
	`˝rötf
("%ld---%du--%d\n",
cu
.
cu_Àngth
,cu.
vîsi⁄
,cu.
addr_size
);

403 
	}
}

407 
	$_dw¨f_abbªv_∑r£
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_CU
 
cu
, 
Dw¨f_Unsig√d
 *
off£t
,

408 
Dw¨f_Abbªv
 *
abp
, 
Dw¨f_Se˘i⁄
 *
ds
)

410 
uöt64_t
 
©å
;

411 
uöt64_t
 
íåy
;

412 
uöt64_t
 
f‹m
;

413 
uöt64_t
 
aboff
;

414 
uöt64_t
 
adoff
;

415 
uöt64_t
 
èg
;

416 
uöt8_t
 
chûdªn
;

417 
uöt64_t
 
abbr_addr
;

418 
ªt
;

420 
	`as£π
(
abp
 !
NULL
);

421 
	`as£π
(
ds
 !
NULL
);

423 i‡(*
off£t
 >
ds
->
ds_size
)

424  (
DW_DLE_NO_ENTRY
);

426 
aboff
 = *
off£t
;

428 
abbr_addr
 = (
uöt64_t
)
ds
->
ds_d©a
;

430 
íåy
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
abbr_addr
, 
off£t
);

432 i‡(
íåy
 == 0) {

435 
abp
->
ab_íåy
 = 0;

436  
DW_DLE_NONE
;

439 
èg
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
abbr_addr
, 
off£t
);

440 
chûdªn
 = 
dbg
->
	`ªad
((
uöt8_t
 *)
abbr_addr
, 
off£t
, 1);

442 
abp
->
ab_íåy
 = 
íåy
;

443 
abp
->
ab_èg
 = 
èg
;

444 
abp
->
ab_chûdªn
 = 
chûdªn
;

445 
abp
->
ab_off£t
 = 
aboff
;

446 
abp
->
ab_Àngth
 = 0;

447 
abp
->
ab_©num
 = 0;

451 
adoff
 = *
off£t
;

452 
©å
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
abbr_addr
, 
off£t
);

453 
f‹m
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
abbr_addr
, 
off£t
);

454 i‡(
©å
 != 0)

457 
abp
->
ab_©ådef
[abp->
ab_©num
].
ad_©åib
 = 
©å
;

458 
abp
->
ab_©ådef
[abp->
ab_©num
].
ad_f‹m
 = 
f‹m
;

459 
abp
->
ab_©ådef
[abp->
ab_©num
].
ad_off£t
 = 
adoff
;

460 
abp
->
ab_©num
++;

462 } 
©å
 != 0);

465 
abp
->
ab_Àngth
 = (
uöt64_t
)(*
off£t
 - 
aboff
);

467  
DW_DLV_OK
;

468 
	}
}

472 
	$_dw¨f_abbªv_föd
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_CU
 
cu
, 
uöt64_t
 
íåy
, 
Dw¨f_Abbªv
 *
abp
)

474 
Dw¨f_Se˘i⁄
 *
ds
;

475 
uöt64_t
 
off£t
;

476 
ªt
;

478 i‡(
íåy
 == 0)

480  (
DW_DLE_NO_ENTRY
);

484 
ds
 = 
	`_dw¨f_föd_£˘i⁄
(".debug_abbrev");

485 
	`as£π
(
ds
 !
NULL
);

491 
off£t
 = 
cu
.
debug_abbªv_off£t
;

492 
off£t
 < 
ds
->
ds_size
) {

493 
ªt
 = 
	`_dw¨f_abbªv_∑r£
(
dbg
, 
cu
, &
off£t
, 
abp
, 
ds
);

494 i‡(
ªt
 !
DW_DLE_NONE
)

495  (
ªt
);

496 i‡(
abp
->
ab_íåy
 =
íåy
) {

498  
DW_DLE_NONE
;

500 i‡(
abp
->
ab_íåy
 == 0) {

507  
DW_DLE_NO_ENTRY
;

508 
	}
}

512 
	$_dw¨f_©å_öô
(
Dw¨f_Debug
 
dbg
, 
uöt64_t
 *
off£ç
, 
Dw¨f_CU
 *
cu
, 
Dw¨f_Dõ
 *
ªt_dõ
, 
Dw¨f_AârDef
 *
ad
,

513 
uöt64_t
 
f‹m
, 
ödúe˘
)

515 
_Dw¨f_Aâribuã
 
©ªf
;

516 
Dw¨f_Se˘i⁄
 *
°r
;

517 
ªt
;

518 
Dw¨f_Se˘i⁄
 *
ds
 = 
	`_dw¨f_föd_£˘i⁄
(".debug_info");

519 
uöt8_t
 *
ds_d©a
 = (uöt8_à*)
ds
->ds_data;

520 
uöt8_t
 
dw¨f_size
 = 
cu
->
cu_dw¨f_size
;

522 
ªt
 = 
DW_DLE_NONE
;

523 
	`mem£t
(&
©ªf
, 0, (atref));

524 
©ªf
.
©_dõ
 = 
ªt_dõ
;

525 
©ªf
.
©_©åib
 = 
ad
->
ad_©åib
;

526 
©ªf
.
©_f‹m
 = 
ad
->
ad_f‹m
;

527 
©ªf
.
©_ödúe˘
 = 
ödúe˘
;

528 
©ªf
.
©_ld
 = 
NULL
;

530 
f‹m
) {

531 
DW_FORM_addr
:

532 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 
cu
->
addr_size
);

534 
DW_FORM_block
:

535 
DW_FORM_ex¥loc
:

536 
©ªf
.
u
[0].
u64
 = 
	`_dw¨f_ªad_uÀb128
(
ds_d©a
, 
off£ç
);

537 
©ªf
.
u
[1].
u8p
 = (
uöt8_t
*)
	`_dw¨f_ªad_block
(
ds_d©a
, 
off£ç
,áåef.u[0].
u64
);

539 
DW_FORM_block1
:

540 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 1);

541 
©ªf
.
u
[1].
u8p
 = (
uöt8_t
*)
	`_dw¨f_ªad_block
(
ds_d©a
, 
off£ç
,áåef.u[0].
u64
);

543 
DW_FORM_block2
:

544 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 2);

545 
©ªf
.
u
[1].
u8p
 = (
uöt8_t
*)
	`_dw¨f_ªad_block
(
ds_d©a
, 
off£ç
,áåef.u[0].
u64
);

547 
DW_FORM_block4
:

548 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 4);

549 
©ªf
.
u
[1].
u8p
 = (
uöt8_t
*)
	`_dw¨f_ªad_block
(
ds_d©a
, 
off£ç
,áåef.u[0].
u64
);

551 
DW_FORM_d©a1
:

552 
DW_FORM_Êag
:

553 
DW_FORM_ªf1
:

554 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 1);

556 
DW_FORM_d©a2
:

557 
DW_FORM_ªf2
:

558 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 2);

560 
DW_FORM_d©a4
:

561 
DW_FORM_ªf4
:

562 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 4);

564 
DW_FORM_d©a8
:

565 
DW_FORM_ªf8
:

566 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 8);

568 
DW_FORM_ödúe˘
:

569 
f‹m
 = 
	`_dw¨f_ªad_uÀb128
(
ds_d©a
, 
off£ç
);

570  (
	`_dw¨f_©å_öô
(
dbg
, 
off£ç
, 
cu
, 
ªt_dõ
, 
ad
, 
f‹m
, 1));

571 
DW_FORM_ªf_addr
:

572 i‡(
cu
->
vîsi⁄
 == 2)

573 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 
cu
->
addr_size
);

574 i‡(
cu
->
vîsi⁄
 == 3)

575 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 
dw¨f_size
);

577 
DW_FORM_ªf_ud©a
:

578 
DW_FORM_ud©a
:

579 
©ªf
.
u
[0].
u64
 = 
	`_dw¨f_ªad_uÀb128
(
ds_d©a
, 
off£ç
);

581 
DW_FORM_sd©a
:

582 
©ªf
.
u
[0].
s64
 = 
	`_dw¨f_ªad_¶eb128
(
ds_d©a
, 
off£ç
);

584 
DW_FORM_£c_off£t
:

585 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 
dw¨f_size
);

587 
DW_FORM_°rög
:

588 
©ªf
.
u
[0].
s
 =(*Ë
	`_dw¨f_ªad_°rög
(
ds_d©a
, (
uöt64_t
)
ds
->
ds_size
, 
off£ç
);

590 
DW_FORM_°Ω
:

591 
©ªf
.
u
[0].
u64
 = 
dbg
->
	`ªad
(
ds_d©a
, 
off£ç
, 
dw¨f_size
);

592 
°r
 = 
	`_dw¨f_föd_£˘i⁄
(".debug_str");

593 
	`as£π
(
°r
 !
NULL
);

595 
©ªf
.
u
[1].
s
 = (*)
°r
->
ds_d©a
 +áåef.u[0].
u64
;

597 
DW_FORM_ªf_sig8
:

598 
©ªf
.
u
[0].
u64
 = 8;

599 
©ªf
.
u
[1].
u8p
 = (
uöt8_t
*)(
	`_dw¨f_ªad_block
(
ds_d©a
, 
off£ç
,áåef.u[0].
u64
));

601 
DW_FORM_Êag_¥e£¡
:

603 
©ªf
.
u
[0].
u64
 = 1;

607 
ªt
 = 
DW_DLE_ATTR_FORM_BAD
;

611 i‡(
ªt
 =
DW_DLE_NONE
) {

612 i‡(
f‹m
 =
DW_FORM_block
 || f‹m =
DW_FORM_block1
 ||

613 
f‹m
 =
DW_FORM_block2
 || f‹m =
DW_FORM_block4
) {

614 
©ªf
.
©_block
.
bl_Àn
 =áåef.
u
[0].
u64
;

615 
©ªf
.
©_block
.
bl_d©a
 =áåef.
u
[1].
u8p
;

618 i‡(
©ªf
.
©_©åib
 =
DW_AT_«me
) {

619 
©ªf
.
©_f‹m
) {

620 
DW_FORM_°Ω
:

621 
ªt_dõ
->
dõ_«me
 = 
©ªf
.
u
[1].
s
;

623 
DW_FORM_°rög
:

624 
ªt_dõ
->
dõ_«me
 = 
©ªf
.
u
[0].
s
;

630 
ªt_dõ
->
dõ_©å
[ªt_dõ->
dõ_©å_cou¡
++] = 
©ªf
;

633  (
ªt
);

634 
	}
}

637 
	$dw¨f_£¨ch_dõ_wôhö_cu
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_CU
 
cu
, 
uöt64_t
 
off£t
, 
Dw¨f_Dõ
 *
ªt_dõ
, 
£¨ch_siblög
)

639 
Dw¨f_Abbªv
 
ab
;

640 
Dw¨f_AârDef
 
ad
;

641 
uöt64_t
 
abnum
;

642 
uöt64_t
 
dõ_off£t
;

643 
ªt
, 
Àvñ
;

644 
i
;

646 
	`as£π
(
dbg
);

648 
	`as£π
(
ªt_dõ
);

650 
Àvñ
 = 1;

652 
off£t
 < 
cu
.
cu_√xt_off£t
 && off£à< 
dbg
->
dbg_öfo_size
) {

654 
dõ_off£t
 = 
off£t
;

656 
abnum
 = 
	`_dw¨f_ªad_uÀb128
((
uöt8_t
 *)
dbg
->
dbg_öfo_off£t_ñf
, &
off£t
);

658 i‡(
abnum
 == 0) {

659 i‡(
Àvñ
 =0 || !
£¨ch_siblög
) {

661  (
DW_DLE_NO_ENTRY
);

666 
Àvñ
--;

670 i‡((
ªt
 = 
	`_dw¨f_abbªv_föd
(
dbg
, 
cu
, 
abnum
, &
ab
)Ë!
DW_DLE_NONE
)

671  (
ªt
);

672 
ªt_dõ
->
dõ_off£t
 = die_offset;

673 
ªt_dõ
->
dõ_abnum
 = 
abnum
;

674 
ªt_dõ
->
dõ_ab
 = 
ab
;

675 
ªt_dõ
->
dõ_©å_cou¡
 = 0;

676 
ªt_dõ
->
dõ_èg
 = 
ab
.
ab_èg
;

680 
i
=0; i < 
ab
.
ab_©num
; i++)

682 i‡((
ªt
 = 
	`_dw¨f_©å_öô
(
dbg
, &
off£t
, &
cu
, 
ªt_dõ
, &
ab
.
ab_©ådef
[
i
],áb.ab_©ådef[i].
ad_f‹m
, 0)Ë!
DW_DLE_NONE
)

683  (
ªt
);

686 
ªt_dõ
->
dõ_√xt_off
 = 
off£t
;

687 i‡(
£¨ch_siblög
 && 
Àvñ
 > 0) {

689 i‡(
ab
.
ab_chûdªn
 =
DW_CHILDREN_yes
) {

691 
Àvñ
++;

695  (
DW_DLE_NONE
);

699  (
DW_DLE_NO_ENTRY
);

700 
	}
}

704 
	$dw¨f_offdõ
(
Dw¨f_Debug
 
dbg
, 
uöt64_t
 
off£t
, 
Dw¨f_Dõ
 *
ªt_dõ
, 
Dw¨f_CU
 
cu
)

706 
ªt
;

708 
	`as£π
(
dbg
);

709 
	`as£π
(
ªt_dõ
);

712 i‡(
off£t
 < 
cu
.
cu_√xt_off£t
) {

713 
ªt
 = 
	`dw¨f_£¨ch_dõ_wôhö_cu
(
dbg
, 
cu
, 
off£t
, 
ªt_dõ
, 0);

714  
ªt
;

718  
DW_DLV_OK
;

719 
	}
}

721 
Dw¨f_Aâribuã
*

722 
	$_dw¨f_©å_föd
(
Dw¨f_Dõ
 *
dõ
, 
uöt16_t
 
©å
)

724 
Dw¨f_Aâribuã
 *
my©
 = 
NULL
;

725 
i
;

727 
i
=0; i < 
dõ
->
dõ_©å_cou¡
; i++)

729 i‡(
dõ
->
dõ_©å
[
i
].
©_©åib
 =
©å
)

731 
my©
 = &(
dõ
->
dõ_©å
[
i
]);

736  
my©
;

737 
	}
}

741 
	$dw¨f_siblögof
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_Dõ
 *
dõ
, Dw¨f_Dõ *
ªt_dõ
,

742 
Dw¨f_CU
 *
cu
)

744 
Dw¨f_Aâribuã
 *
©
;

745 
uöt64_t
 
off£t
;

746 
ªt
, 
£¨ch_siblög
;

748 
	`as£π
(
dbg
);

749 
	`as£π
(
ªt_dõ
);

750 
	`as£π
(
cu
);

753 i‡(
dõ
 =
NULL
)

754  (
	`dw¨f_offdõ
(
dbg
, 
cu
->
cu_dõ_off£t
, 
ªt_dõ
, *cu));

760 
£¨ch_siblög
 = 0;

761 i‡(
dõ
->
dõ_ab
.
ab_chûdªn
 =
DW_CHILDREN_no
)

762 
off£t
 = 
dõ
->
dõ_√xt_off
;

768 i‡((
©
 = 
	`_dw¨f_©å_föd
(
dõ
, 
DW_AT_siblög
)Ë!
NULL
) {

769 i‡(
©
->
©_f‹m
 !
DW_FORM_ªf_addr
)

770 
off£t
 = 
©
->
u
[0].
u64
 + 
cu
->
cu_off£t
;

772 
off£t
 = 
©
->
u
[0].
u64
;

774 
off£t
 = 
dõ
->
dõ_√xt_off
;

775 
£¨ch_siblög
 = 1;

779 
ªt
 = 
	`dw¨f_£¨ch_dõ_wôhö_cu
(
dbg
, *
cu
, 
off£t
, 
ªt_dõ
, 
£¨ch_siblög
);

782 i‡(
ªt
 =
DW_DLE_NO_ENTRY
) {

783  (
DW_DLV_NO_ENTRY
);

784 } i‡(
ªt
 !
DW_DLE_NONE
)

785  (
DW_DLV_ERROR
);

788  (
DW_DLV_OK
);

789 
	}
}

792 
	$dw¨f_chûd
(
Dw¨f_Debug
 
dbg
, 
Dw¨f_CU
 *
cu
, 
Dw¨f_Dõ
 *
dõ
, Dw¨f_Dõ *
ªt_dõ
)

794 
ªt
;

796 
	`as£π
(
dõ
);

797 
	`as£π
(
ªt_dõ
);

798 
	`as£π
(
dbg
);

799 
	`as£π
(
cu
);

801 i‡(
dõ
->
dõ_ab
.
ab_chûdªn
 =
DW_CHILDREN_no
)

802  (
DW_DLE_NO_ENTRY
);

804 
ªt
 = 
	`dw¨f_£¨ch_dõ_wôhö_cu
(
dbg
, *
cu
, 
dõ
->
dõ_√xt_off
, 
ªt_dõ
, 0);

806 i‡(
ªt
 =
DW_DLE_NO_ENTRY
) {

807 
	`DWARF_SET_ERROR
(
dbg
, 
îr‹
, 
DW_DLE_NO_ENTRY
);

808  (
DW_DLV_NO_ENTRY
);

809 } i‡(
ªt
 !
DW_DLE_NONE
)

810  (
DW_DLV_ERROR
);

812  (
DW_DLV_OK
);

813 
	}
}

816 
	$_dw¨f_föd_£˘i⁄_íh™˚d
(
Dw¨f_Se˘i⁄
 *
ds
)

818 
Dw¨f_Se˘i⁄
 *
£˘hdr
 = 
	`_dw¨f_föd_£˘i⁄
(
ds
->
ds_«me
);

819 
ds
->
ds_d©a
 = 
£˘hdr
->ds_data;

820 
ds
->
ds_addr
 = 
£˘hdr
->ds_addr;

821 
ds
->
ds_size
 = 
£˘hdr
->ds_size;

823 
	}
}

	@kern/macro.h

1 
	#PUSHA
 \

2 
subq
 
$120
,%
r•
 ; \

3 
movq
 %
øx
,112(%
r•
); \

4 
movq
 %
rbx
,104(%
r•
); \

5 
movq
 %
rcx
,96(%
r•
); \

6 
movq
 %
rdx
,88(%
r•
); \

7 
movq
 %
rbp
,80(%
r•
); \

8 
movq
 %
rdi
,72(%
r•
); \

9 
movq
 %
rsi
,64(%
r•
); \

10 
movq
 %
r8
,56(%
r•
); \

11 
movq
 %
r9
,48(%
r•
); \

12 
movq
 %
r10
,40(%
r•
); \

13 
movq
 %
r11
,32(%
r•
); \

14 
movq
 %
r12
,24(%
r•
); \

15 
movq
 %
r13
,16(%
r•
); \

16 
movq
 %
r14
,8(%
r•
); \

17 
movq
 %
r15
,0(%
r•
);

	)

19 
	#POPA
 \

35 "\èddq $120,%%r•\n"

	)

37 
	#POPA_
 \

38 
movq
 0(%
r•
),%
r15
; \

39 
movq
 8(%
r•
),%
r14
; \

40 
movq
 16(%
r•
),%
r13
; \

41 
movq
 24(%
r•
),%
r12
; \

42 
movq
 32(%
r•
),%
r11
; \

43 
movq
 40(%
r•
),%
r10
; \

44 
movq
 48(%
r•
),%
r9
; \

45 
movq
 56(%
r•
),%
r8
; \

46 
movq
 64(%
r•
),%
rsi
; \

47 
movq
 72(%
r•
),%
rdi
; \

48 
movq
 80(%
r•
),%
rbp
; \

49 
movq
 88(%
r•
),%
rdx
; \

50 
movq
 96(%
r•
),%
rcx
; \

51 
movq
 104(%
r•
),%
rbx
; \

52 
movq
 112(%
r•
),%
øx
; \

53 
addq
 
$120
,%
r•
;

	)

	@kern/monitor.c

4 
	~<öc/°dio.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/memœyout.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/x86.h
>

10 
	~<kîn/c⁄sﬁe.h
>

11 
	~<kîn/m⁄ô‹.h
>

12 
	~<kîn/dw¨f.h
>

13 
	~<kîn/kdebug.h
>

14 
	~<kîn/dw¨f_≠i.h
>

16 
	~<kîn/å≠.h
>

19 
	#CMDBUF_SIZE
 80

20 

	)

22 
m⁄_exô
(
¨gc
, ** 
¨gv
, 
Tøp‰ame
* 
tf
);

25 
	sComm™d
 {

26 c⁄° *
	m«me
;

27 c⁄° *
	mdesc
;

29 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
, 
Tøp‰ame
* 
	mtf
);

32 
Comm™d
 
	gcomm™ds
[] = {

33 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

34 { "kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l", 
m⁄_kînöfo
 },

36 { "backåa˚", "Di•œyá sèck backåa˚", 
m⁄_backåa˚
 },

38 #ifde‡
VMM_GUEST


39 { "exô", "Exô VMM gue°", 
m⁄_exô
 },

41 { "exô", "ExôÅhêkî√»m⁄ô‹", 
m⁄_exô
 },

45 
	#NCOMMANDS
 ((
comm™ds
)/(comm™ds[0]))

	)

50 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

52 
i
;

54 
i
 = 0; i < 
NCOMMANDS
; i++)

55 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

57 
	}
}

60 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

62 
_°¨t
[], 
íåy
[], 
ëext
[], 
ed©a
[], 
íd
[];

64 
	`˝rötf
("Special kernel symbols:\n");

65 
	`˝rötf
(" _°¨à %08x (phys)\n", 
_°¨t
);

66 
	`˝rötf
("É¡ry %08x (vútË %08x (phys)\n", 
íåy
,É¡ry - 
KERNBASE
);

67 
	`˝rötf
("Éãxà %08x (vútË %08x (phys)\n", 
ëext
,Éãxà- 
KERNBASE
);

68 
	`˝rötf
("Éd©® %08x (vútË %08x (phys)\n", 
ed©a
,Éd©®- 
KERNBASE
);

69 
	`˝rötf
("Énd %08x (vútË %08x (phys)\n", 
íd
,Énd - 
KERNBASE
);

70 
	`˝rötf
("KernelÉxecutable memory footprint: %dKB\n",

71 
	`ROUNDUP
(
íd
 - 
íåy
, 1024) / 1024);

73 
	}
}

76 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

79 
i
;

80 c⁄° 
uöt64_t
 *
rbp
;

81 
uöt64_t
 
rù
;

82 
uöt64_t
 
r•
;

83 
uöt64_t
 
off£t
;

84 
Rùdebugöfo
 
öfo
;

86 
rbp
 = (c⁄° 
uöt64_t
*)
	`ªad_rbp
();

87 
r•
 = 
	`ªad_r•
();

89 i‡(
tf
) {

90 
rbp
 = (c⁄° 
uöt64_t
*)
tf
->
tf_ªgs
.
ªg_rbp
;

91 
r•
 = 
tf
->
tf_r•
;

94 
	`ªad_rù
(
rù
);

96 
	`˝rötf
("Stack backtrace:\n");

97 
rbp
) {

99 
	`˝rötf
("Ñb∞%016ŒxÑù %016Œx\n", 
rbp
, 
rù
);

100 i‡(
	`debugöfo_rù
(
rù
, &
öfo
) >= 0){

101 
Dw¨f_RegèbÀ_E¡ry
 *
cÁ_ruÀ
 = &
öfo
.
ªg_èbÀ
.cfa_rule;

102 
uöt64_t
 
cÁ
;

104 
	`˝rötf
(" %s:%d: %.*s+%016Œx", 
öfo
.
rù_fûe
, info.
rù_löe
,

105 
öfo
.
rù_‚_«mñí
, info.
rù_‚_«me
, 
rù
 - info.
rù_‚_addr
);

107 i‡(
cÁ_ruÀ
->
dw_ªgnum
 == 6) {

108 
cÁ
 = (
uöt64_t
)
rbp
 + 
cÁ_ruÀ
->
dw_off£t
;

109 } i‡(
cÁ_ruÀ
->
dw_ªgnum
 == 7) {

110 
cÁ
 = 
r•
 + 
cÁ_ruÀ
->
dw_off£t
;

112 
unknown_cÁ
;

115 
	`˝rötf
("árgs:%d ", 
öfo
.
rù_‚_«rg
);

116 
i
 = 0; i < 
öfo
.
rù_‚_«rg
 ; i++)

118 
uöt64_t
 
vÆ
;

119 
	`as£π
(
öfo
.
off£t_‚_¨g
[
i
]);

120 
off£t
 = 
cÁ
 + 
öfo
.
off£t_‚_¨g
[
i
];

121 
öfo
.
size_‚_¨g
[
i
]) {

123 
vÆ
 = *(
uöt64_t
 *Ë
off£t
;

126 
vÆ
 = *(
uöt32_t
 *Ë
off£t
;

129 
vÆ
 = *(
uöt16_t
 *Ë
off£t
;

132 
vÆ
 = *(
uöt8_t
 *Ë
off£t
;

135 
	`˝rötf
(" %016x", 
vÆ
);

138 
öfo
.
ªg_èbÀ
.
ruÀs
[6].
dw_ªgnum
) {

139 
DW_FRAME_SAME_VAL
:

141 
DW_FRAME_CFA_COL3
:

142 
rbp
 = (c⁄° 
uöt64_t
 *)*(uöt64_à*)(
cÁ
 + 
öfo
.
ªg_èbÀ
.
ruÀs
[6].
dw_off£t
);

145 
	`∑nic
("unknownÑegÑule");

149 
öfo
.
ªg_èbÀ
.
ruÀs
[16].
dw_ªgnum
) {

150 
DW_FRAME_SAME_VAL
:

152 
DW_FRAME_CFA_COL3
:

153 
rù
 = *(
uöt64_t
 *)(
cÁ
 + 
öfo
.
ªg_èbÀ
.
ruÀs
[16].
dw_off£t
);

156 
	`∑nic
("unknownÑegÑule");

160 
r•
 = 
cÁ
;

162 
unknown_cÁ
:

164 
rù
 = 
rbp
[1];

165 
rbp
 = (c⁄° 
uöt64_t
*)Ñbp[0];

167 
	`˝rötf
("\n");

171 
	}
}

175 
	$m⁄_exô
(
¨gc
, ** 
¨gv
, 
Tøp‰ame
* 
tf
)

177 #ifde‡
VMM_GUEST


178 
	`asm
("hlt");

181 
	}
}

187 
	#WHITESPACE
 "\t\r\¿"

	)

188 
	#MAXARGS
 16

	)

191 
	$runcmd
(*
buf
, 
Tøp‰ame
 *
tf
)

193 
¨gc
;

194 *
¨gv
[
MAXARGS
];

195 
i
;

198 
¨gc
 = 0;

199 
¨gv
[
¨gc
] = 0;

202 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

203 *
buf
++ = 0;

204 i‡(*
buf
 == 0)

208 i‡(
¨gc
 =
MAXARGS
-1) {

209 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

212 
¨gv
[
¨gc
++] = 
buf
;

213 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

214 
buf
++;

216 
¨gv
[
¨gc
] = 0;

219 i‡(
¨gc
 == 0)

221 
i
 = 0; i < 
NCOMMANDS
; i++) {

222 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

223  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
, 
tf
);

225 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

227 
	}
}

230 
	$m⁄ô‹
(
Tøp‰ame
 *
tf
)

232 *
buf
;

234 
	`˝rötf
("WelcomeÅoÅhe JOS kernel monitor!\n");

235 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

238 i‡(
tf
 !
NULL
)

239 
	`¥öt_å≠‰ame
(
tf
);

243 
buf
 = 
	`ªadlöe
("K> ");

244 i‡(
buf
 !
NULL
)

245 i‡(
	`runcmd
(
buf
, 
tf
) < 0)

248 
	}
}

	@kern/monitor.h

1 #i‚de‡
JOS_KERN_MONITOR_H


2 
	#JOS_KERN_MONITOR_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	gTøp‰ame
;

12 
m⁄ô‹
(
Tøp‰ame
 *
tf
);

15 
m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

16 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

17 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

	@kern/mpconfig.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/memœyout.h
>

8 
	~<öc/x86.h
>

9 
	~<öc/mmu.h
>

10 
	~<öc/ív.h
>

11 
	~<kîn/˝u.h
>

12 
	~<kîn/pm≠.h
>

14 
CpuInfo
 
	g˝us
[
NCPU
];

15 
CpuInfo
 *
	gboŸ˝u
;

16 
	gismp
;

17 
	gn˝u
;

20 
	g≥r˝u_k°acks
[
NCPU
][
KSTKSIZE
]

21 
__©åibuã__
 ((
Æig√d
(
PGSIZE
)));

26 
	smp
 {

27 
uöt8_t
 
	msig«tuª
[4];

28 
uöt32_t
 
	mphyßddr
;

29 
uöt8_t
 
	mÀngth
;

30 
uöt8_t
 
	m•e¸ev
;

31 
uöt8_t
 
	mchecksum
;

32 
uöt8_t
 
	mty≥
;

33 
uöt8_t
 
	mim¸p
;

34 
uöt8_t
 
	mª£rved
[3];

35 } 
__©åibuã__
((
__∑cked__
));

37 
	smpc⁄f
 {

38 
uöt8_t
 
	msig«tuª
[4];

39 
uöt16_t
 
	mÀngth
;

40 
uöt8_t
 
	mvîsi⁄
;

41 
uöt8_t
 
	mchecksum
;

42 
uöt8_t
 
	m¥odu˘
[20];

43 
uöt32_t
 
	m€mèbÀ
;

44 
uöt16_t
 
	m€mÀngth
;

45 
uöt16_t
 
	míåy
;

46 
uöt32_t
 
	mœpiˇddr
;

47 
uöt16_t
 
	mxÀngth
;

48 
uöt8_t
 
	mxchecksum
;

49 
uöt8_t
 
	mª£rved
;

50 
uöt8_t
 
	míåõs
[0];

51 } 
__©åibuã__
((
__∑cked__
));

53 
	smµroc
 {

54 
uöt8_t
 
	mty≥
;

55 
uöt8_t
 
	m≠icid
;

56 
uöt8_t
 
	mvîsi⁄
;

57 
uöt8_t
 
	mÊags
;

58 
uöt8_t
 
	msig«tuª
[4];

59 
uöt32_t
 
	m„©uª
;

60 
uöt8_t
 
	mª£rved
[8];

61 } 
__©åibuã__
((
__∑cked__
));

64 
	#MPROC_EN
 0x01

	)

65 
	#MPPROC_BOOT
 0x02

66 #löê93 "../kîn/mpc⁄fig.c"

	)

69 
	#MPPROC
 0x00

70 
	#MPBUS
 0x01

71 
	#MPIOAPIC
 0x02

72 
	#MPIOINTR
 0x03

73 
	#MPLINTR
 0x04

74 

	)

75 
uöt8_t


76 
	$sum
(*
addr
, 
Àn
)

78 
i
, 
sum
;

80 
sum
 = 0;

81 
i
 = 0; i < 
Àn
; i++)

82 
sum
 +((
uöt8_t
 *)
addr
)[
i
];

83  
sum
;

84 
	}
}

87 
mp
 *

88 
	$mp£¨ch1
(
phyßddr_t
 
a
, 
Àn
)

90 
mp
 *m∞
	`KADDR
(
a
), *
íd
 = KADDR◊ + 
Àn
);

92 ; 
mp
 < 
íd
; mp++)

93 i‡(
	`memcmp
(
mp
->
sig«tuª
, "_MP_", 4) == 0 &&

94 
	`sum
(
mp
, (*mp)) == 0)

95  
mp
;

96  
NULL
;

97 
	}
}

104 
mp
 *

105 
	$mp£¨ch
()

107 
uöt8_t
 *
bda
;

108 
uöt32_t
 
p
;

109 
mp
 *mp;

114 
bda
 = (
uöt8_t
 *Ë
	`KADDR
(0x40 << 4);

118 i‡((
p
 = *(
uöt16_t
 *Ë(
bda
 + 0x0E))) {

119 
p
 <<= 4;

120 i‡((
mp
 = 
	`mp£¨ch1
(
p
, 1024)))

121  
mp
;

125 
p
 = *(
uöt16_t
 *Ë(
bda
 + 0x13) * 1024;

126 i‡((
mp
 = 
	`mp£¨ch1
(
p
 - 1024, 1024)))

127  
mp
;

129  
	`mp£¨ch1
(0xF0000, 0x10000);

130 
	}
}

135 
mpc⁄f
 *

136 
	$mpc⁄fig
(
mp
 **
pmp
)

138 
mpc⁄f
 *
c⁄f
;

139 
mp
 *mp;

141 i‡((
mp
 = 
	`mp£¨ch
()) == 0)

142  
NULL
;

143 i‡(
mp
->
phyßddr
 =0 || mp->
ty≥
 != 0) {

144 
	`˝rötf
("SMP: Default configurationsÇot implemented\n");

145  
NULL
;

147 
c⁄f
 = (
mpc⁄f
 *Ë
	`KADDR
(
mp
->
phyßddr
);

148 i‡(
	`memcmp
(
c⁄f
, "PCMP", 4) != 0) {

149 
	`˝rötf
("SMP: Incorrect MP configurationÅable signature\n");

150  
NULL
;

152 i‡(
	`sum
(
c⁄f
, c⁄f->
Àngth
) != 0) {

153 
	`˝rötf
("SMP: Bad MP configuration checksum\n");

154  
NULL
;

156 i‡(
c⁄f
->
vîsi⁄
 != 1 && conf->version != 4) {

157 
	`˝rötf
("SMP: Unsuµ‹ãd MP vîsi⁄ %d\n", 
c⁄f
->
vîsi⁄
);

158  
NULL
;

160 i‡(
	`sum
((
uöt8_t
 *)
c⁄f
 + c⁄f->
Àngth
, c⁄f->
xÀngth
Ë!c⁄f->
xchecksum
) {

161 
	`˝rötf
("SMP: Bad MP configurationÉxtended checksum\n");

162  
NULL
;

164 *
pmp
 = 
mp
;

165  
c⁄f
;

166 
	}
}

169 
	$mp_öô
()

171 
mp
 *mp;

172 
mpc⁄f
 *
c⁄f
;

173 
mµroc
 *
¥oc
;

174 
uöt8_t
 *
p
;

175 
i
;

177 
boŸ˝u
 = &
˝us
[0];

178 i‡((
c⁄f
 = 
	`mpc⁄fig
(&
mp
)) == 0)

180 
ismp
 = 1;

181 
œpiˇddr
 = 
c⁄f
->lapicaddr;

183 
p
 = 
c⁄f
->
íåõs
, 
i
 = 0; i < c⁄f->
íåy
; i++) {

184 *
p
) {

185 
MPPROC
:

186 
¥oc
 = (
mµroc
 *)
p
;

187 i‡(
¥oc
->
Êags
 & 
MPPROC_BOOT
) {

188 
boŸ˝u
 = &
˝us
[
n˝u
];

189 
	`˝rötf
("Found boot cpu..\n");

191 i‡(
n˝u
 < 
NCPU
) {

192 
	`˝rötf
("ty≥: %dápicid:%d vîsi⁄:%d sig«tuª:%x fótuª:%x fœgs:%xÑe£rved:%x\n", 
¥oc
->
ty≥
,Öroc->
≠icid
,Öroc->
vîsi⁄
,Öroc->
sig«tuª
,Öroc->
„©uª
,Öroc->
Êags
,Öroc->
ª£rved
);

193 i‡(
¥oc
->
Êags
 & 
MPROC_EN
) {

194 
˝us
[
n˝u
].
˝u_id
 =Çcpu;

195 
n˝u
++;

197 
	`˝rötf
("Found unusable CPU. Not intiializing it..\n");

200 
	`˝rötf
("SMP:Åoo many CPUs, CPU %d disabled\n",

201 
¥oc
->
≠icid
);

203 
p
 +(
mµroc
);

205 
MPBUS
:

206 
MPIOAPIC
:

207 
MPIOINTR
:

208 
MPLINTR
:

210 
p
 += 8;

213 
	`˝rötf
("mpöô: unknow¿c⁄figÅy≥ %x\n", *
p
);

214 
ismp
 = 0;

215 
i
 = 
c⁄f
->
íåy
;

220 
i
=0; i< 
NCPU
; ++i) {

221 
˝us
[
i
].
is_vmx_roŸ
 = 
Ál£
;

222 
˝us
[
i
].
vmx⁄_ªgi⁄
 = 0;

226 
boŸ˝u
->
˝u_°©us
 = 
CPU_STARTED
;

227 i‡(!
ismp
) {

229 
n˝u
 = 1;

230 
œpiˇddr
 = 0;

231 
	`˝rötf
("SMP: configurationÇot found, SMP disabled\n");

234 
	`˝rötf
("SMP: CPU %d found %d CPU(s)\n", 
boŸ˝u
->
˝u_id
, 
n˝u
);

236 i‡(
mp
->
im¸p
) {

239 
	`˝rötf
("SMP: Setting IMCRÅo switch from PIC modeÅo symmetric I/O mode\n");

240 
	`outb
(0x22, 0x70);

241 
	`outb
(0x23, 
	`öb
(0x23) | 1);

243 
	}
}

	@kern/multiboot.h

3 #i‚de‡
JOS_MB_H


4 
	#JOS_MB_H


	)

23 
	#APPEND_HILO
(
hi
, 
lo
Ë(((
uöt64_t
)hò<< 32Ë+Üo)

	)

25 
__ölöe
 
uöt32_t
 
ª°ri˘ive_ty≥
(uöt32_à
t1
, uöt32_à
t2
);

29 
	#MB_TYPE_USABLE
 1

	)

30 
	#MB_TYPE_RESERVED
 2

	)

31 
	#MB_TYPE_ACPI_RECLM
 3

	)

32 
	#MB_TYPE_ACPI_NVS
 4

	)

33 
	#MB_TYPE_BAD
 5

	)

35 
	#MB_FLAG_MMAP
 0x40

	)

38 
	smu…iboŸ_hódî


40 
uöt32_t
 
	mmagic
;

41 
uöt32_t
 
	mÊags
;

42 
uöt32_t
 
	mchecksum
;

43 
uöt32_t
 
	mhódî_addr
;

44 
uöt32_t
 
	mlﬂd_addr
;

45 
uöt32_t
 
	mlﬂd_íd_addr
;

46 
uöt32_t
 
	mbss_íd_addr
;

47 
uöt32_t
 
	míåy_addr
;

48 } 
	tmu…iboŸ_hódî_t
;

51 
	saout_symbﬁ_èbÀ


53 
uöt32_t
 
	mèbsize
;

54 
uöt32_t
 
	m°rsize
;

55 
uöt32_t
 
	maddr
;

56 
uöt32_t
 
	mª£rved
;

57 } 
	taout_symbﬁ_èbÀ_t
;

60 
	sñf_£˘i⁄_hódî_èbÀ


62 
uöt32_t
 
	mnum
;

63 
uöt32_t
 
	msize
;

64 
uöt32_t
 
	maddr
;

65 
uöt32_t
 
	mshndx
;

66 } 
	tñf_£˘i⁄_hódî_èbÀ_t
;

69 
	smu…iboŸ_öfo


71 
uöt32_t
 
	mÊags
;

72 
uöt32_t
 
	mmem_lowî
;

73 
uöt32_t
 
	mmem_uµî
;

74 
uöt32_t
 
	mboŸ_devi˚
;

75 
uöt32_t
 
	mcmdlöe
;

76 
uöt32_t
 
	mmods_cou¡
;

77 
uöt32_t
 
	mmods_addr
;

80 
aout_symbﬁ_èbÀ_t
 
	maout_sym
;

81 
ñf_£˘i⁄_hódî_èbÀ_t
 
	mñf_£c
;

82 } 
	mu
;

83 
uöt32_t
 
	mmm≠_Àngth
;

84 
uöt32_t
 
	mmm≠_addr
;

85 } 
	tmu…iboŸ_öfo_t
;

88 
	smoduÀ


90 
uöt32_t
 
	mmod_°¨t
;

91 
uöt32_t
 
	mmod_íd
;

92 
uöt32_t
 
	m°rög
;

93 
uöt32_t
 
	mª£rved
;

94 } 
	tmoduÀ_t
;

98 
	smem‹y_m≠


100 
uöt32_t
 
	msize
;

101 
uöt32_t
 
	mba£_addr_low
;

102 
uöt32_t
 
	mba£_addr_high
;

103 
uöt32_t
 
	mÀngth_low
;

104 
uöt32_t
 
	mÀngth_high
;

105 
uöt32_t
 
	mty≥
;

106 } 
	tmem‹y_m≠_t
;

108 
__ölöe
 
uöt32_t
 
	$ª°ri˘ive_ty≥
(
uöt32_t
 
t1
, uöt32_à
t2
) {

109 if(
t1
==
MB_TYPE_BAD
 || 
t2
==MB_TYPE_BAD)

110  
MB_TYPE_BAD
;

111 if(
t1
==
MB_TYPE_ACPI_NVS
 || 
t2
==MB_TYPE_ACPI_NVS)

112  
MB_TYPE_ACPI_NVS
;

113 if(
t1
==
MB_TYPE_RESERVED
 || 
t2
==MB_TYPE_RESERVED)

114  
MB_TYPE_RESERVED
;

115 if(
t1
==
MB_TYPE_ACPI_RECLM
 || 
t2
==MB_TYPE_ACPI_RECLM)

116  
MB_TYPE_ACPI_RECLM
;

118  
MB_TYPE_USABLE
;

119 
	}
}

	@kern/pci.c

2 
	~<öc/x86.h
>

3 
	~<öc/as£π.h
>

4 
	~<öc/°rög.h
>

5 
	~<kîn/pci.h
>

6 
	~<kîn/pcúeg.h
>

8 
	~<kîn/e1000.h
>

12 
	gpci_show_devs
 = 1;

13 
	gpci_show_addrs
 = 0;

16 
uöt32_t
 
	gpci_c⁄f1_addr_i›‹t
 = 0x0cf8;

17 
uöt32_t
 
	gpci_c⁄f1_d©a_i›‹t
 = 0x0cfc;

20 
pci_bridge_©èch
(
pci_func
 *
pcif
);

23 
	spci_drivî
 {

24 
uöt32_t
 
	mkey1
, 
	mkey2
;

25 (*
	m©èch‚
Ë(
pci_func
 *
	mpcif
);

29 
pci_drivî
 
	gpci_©èch_˛ass
[] = {

30 { 
PCI_CLASS_BRIDGE
, 
PCI_SUBCLASS_BRIDGE_PCI
, &
pci_bridge_©èch
 },

35 
pci_drivî
 
	gpci_©èch_víd‹
[] = {

38 { 0x8086, 0x100e, &
e1000_©èch
 },

44 
	$pci_c⁄f1_£t_addr
(
uöt32_t
 
bus
,

45 
uöt32_t
 
dev
,

46 
uöt32_t
 
func
,

47 
uöt32_t
 
off£t
)

49 
	`as£π
(
bus
 < 256);

50 
	`as£π
(
dev
 < 32);

51 
	`as£π
(
func
 < 8);

52 
	`as£π
(
off£t
 < 256);

53 
	`as£π
((
off£t
 & 0x3) == 0);

55 
uöt32_t
 
v
 = (1 << 31) |

56 (
bus
 << 16Ë| (
dev
 << 11Ë| (
func
 << 8Ë| (
off£t
);

57 
	`oué
(
pci_c⁄f1_addr_i›‹t
, 
v
);

58 
	}
}

60 
uöt32_t


61 
	$pci_c⁄f_ªad
(
pci_func
 *
f
, 
uöt32_t
 
off
)

63 
	`pci_c⁄f1_£t_addr
(
f
->
bus
->
bu¢o
, f->
dev
, f->
func
, 
off
);

64  
	`öl
(
pci_c⁄f1_d©a_i›‹t
);

65 
	}
}

68 
	$pci_c⁄f_wrôe
(
pci_func
 *
f
, 
uöt32_t
 
off
, uöt32_à
v
)

70 
	`pci_c⁄f1_£t_addr
(
f
->
bus
->
bu¢o
, f->
dev
, f->
func
, 
off
);

71 
	`oué
(
pci_c⁄f1_d©a_i›‹t
, 
v
);

72 
	}
}

74 
__©åibuã__
((
w¨n_unu£d_ªsu…
))

75 
	$pci_©èch_m©ch
(
uöt32_t
 
key1
, uöt32_à
key2
,

76 
pci_drivî
 *
li°
, 
pci_func
 *
pcif
)

78 
uöt32_t
 
i
;

80 
i
 = 0; 
li°
[i].
©èch‚
; i++) {

81 i‡(
li°
[
i
].
key1
 =key1 &&Üi°[i].
key2
 == key2) {

82 
r
 = 
li°
[
i
].
	`©èch‚
(
pcif
);

83 i‡(
r
 > 0)

84  
r
;

85 i‡(
r
 < 0)

86 
	`˝rötf
("pci_attach_match:áttaching "

88 
key1
, 
key2
, 
li°
[
i
].
©èch‚
, 
r
);

92 
	}
}

95 
	$pci_©èch
(
pci_func
 *
f
)

98 
	`pci_©èch_m©ch
(
	`PCI_CLASS
(
f
->
dev_˛ass
),

99 
	`PCI_SUBCLASS
(
f
->
dev_˛ass
),

100 &
pci_©èch_˛ass
[0], 
f
) ||

101 
	`pci_©èch_m©ch
(
	`PCI_VENDOR
(
f
->
dev_id
),

102 
	`PCI_PRODUCT
(
f
->
dev_id
),

103 &
pci_©èch_víd‹
[0], 
f
);

104 
	}
}

106 c⁄° *
	gpci_˛ass
[] =

118 
	$pci_¥öt_func
(
pci_func
 *
f
)

120 c⁄° *
˛ass
 = 
pci_˛ass
[0];

121 i‡(
	`PCI_CLASS
(
f
->
dev_˛ass
Ë< (
pci_˛ass
) / (pci_class[0]))

122 
˛ass
 = 
pci_˛ass
[
	`PCI_CLASS
(
f
->
dev_˛ass
)];

124 
	`˝rötf
("PCI: %02x:%02x.%d: %04x:%04x: class: %x.%x (%s) irq: %d\n",

125 
f
->
bus
->
bu¢o
, f->
dev
, f->
func
,

126 
	`PCI_VENDOR
(
f
->
dev_id
), 
	`PCI_PRODUCT
(f->dev_id),

127 
	`PCI_CLASS
(
f
->
dev_˛ass
), 
	`PCI_SUBCLASS
(f->dev_˛ass), 
˛ass
,

128 
f
->
úq_löe
);

129 
	}
}

132 
	$pci_sˇn_bus
(
pci_bus
 *
bus
)

134 
tŸÆdev
 = 0;

135 
pci_func
 
df
;

136 
	`mem£t
(&
df
, 0, (df));

137 
df
.
bus
 = bus;

139 
df
.
dev
 = 0; df.dev < 32; df.dev++) {

140 
uöt32_t
 
bhlc
 = 
	`pci_c⁄f_ªad
(&
df
, 
PCI_BHLC_REG
);

141 i‡(
	`PCI_HDRTYPE_TYPE
(
bhlc
) > 1)

144 
tŸÆdev
++;

146 
pci_func
 
f
 = 
df
;

147 
f
.
func
 = 0; f.fun¯< (
	`PCI_HDRTYPE_MULTIFN
(
bhlc
) ? 8 : 1);

148 
f
.
func
++) {

149 
pci_func
 
af
 = 
f
;

151 
af
.
dev_id
 = 
	`pci_c⁄f_ªad
(&
f
, 
PCI_ID_REG
);

152 i‡(
	`PCI_VENDOR
(
af
.
dev_id
) == 0xffff)

155 
uöt32_t
 
öå
 = 
	`pci_c⁄f_ªad
(&
af
, 
PCI_INTERRUPT_REG
);

156 
af
.
úq_löe
 = 
	`PCI_INTERRUPT_LINE
(
öå
);

158 
af
.
dev_˛ass
 = 
	`pci_c⁄f_ªad
(&af, 
PCI_CLASS_REG
);

159 i‡(
pci_show_devs
)

160 
	`pci_¥öt_func
(&
af
);

161 
	`pci_©èch
(&
af
);

165  
tŸÆdev
;

166 
	}
}

169 
	$pci_bridge_©èch
(
pci_func
 *
pcif
)

171 
uöt32_t
 
i‹eg
 = 
	`pci_c⁄f_ªad
(
pcif
, 
PCI_BRIDGE_STATIO_REG
);

172 
uöt32_t
 
bu§eg
 = 
	`pci_c⁄f_ªad
(
pcif
, 
PCI_BRIDGE_BUS_REG
);

174 i‡(
	`PCI_BRIDGE_IO_32BITS
(
i‹eg
)) {

175 
	`˝rötf
("PCI: %02x:%02x.%d: 32-bit bridge IOÇot supported.\n",

176 
pcif
->
bus
->
bu¢o
,Öcif->
dev
,Öcif->
func
);

180 
pci_bus
 
nbus
;

181 
	`mem£t
(&
nbus
, 0, (nbus));

182 
nbus
.
∑ª¡_bridge
 = 
pcif
;

183 
nbus
.
bu¢o
 = (
bu§eg
 >> 
PCI_BRIDGE_BUS_SECONDARY_SHIFT
) & 0xff;

185 i‡(
pci_show_devs
)

186 
	`˝rötf
("PCI: %02x:%02x.%d: bridgeÅo PCI bus %d--%d\n",

187 
pcif
->
bus
->
bu¢o
,Öcif->
dev
,Öcif->
func
,

188 
nbus
.
bu¢o
,

189 (
bu§eg
 >> 
PCI_BRIDGE_BUS_SUBORDINATE_SHIFT
) & 0xff);

191 
	`pci_sˇn_bus
(&
nbus
);

193 
	}
}

198 
	$pci_func_íabÀ
(
pci_func
 *
f
)

200 
	`pci_c⁄f_wrôe
(
f
, 
PCI_COMMAND_STATUS_REG
,

201 
PCI_COMMAND_IO_ENABLE
 |

202 
PCI_COMMAND_MEM_ENABLE
 |

203 
PCI_COMMAND_MASTER_ENABLE
);

205 
uöt32_t
 
b¨_width
;

206 
uöt32_t
 
b¨
;

207 
b¨
 = 
PCI_MAPREG_START
; b¨ < 
PCI_MAPREG_END
;

208 
b¨
 +
b¨_width
)

210 
uöt32_t
 
ﬁdv
 = 
	`pci_c⁄f_ªad
(
f
, 
b¨
);

212 
b¨_width
 = 4;

213 
	`pci_c⁄f_wrôe
(
f
, 
b¨
, 0xffffffff);

214 
uöt32_t
 
rv
 = 
	`pci_c⁄f_ªad
(
f
, 
b¨
);

216 i‡(
rv
 == 0)

219 
ªgnum
 = 
	`PCI_MAPREG_NUM
(
b¨
);

220 
uöt32_t
 
ba£
, 
size
;

221 i‡(
	`PCI_MAPREG_TYPE
(
rv
Ë=
PCI_MAPREG_TYPE_MEM
) {

222 i‡(
	`PCI_MAPREG_MEM_TYPE
(
rv
Ë=
PCI_MAPREG_MEM_TYPE_64BIT
)

223 
b¨_width
 = 8;

225 
size
 = 
	`PCI_MAPREG_MEM_SIZE
(
rv
);

226 
ba£
 = 
	`PCI_MAPREG_MEM_ADDR
(
ﬁdv
);

227 i‡(
pci_show_addrs
)

228 
	`˝rötf
(" memÑegion %d: %d bytesát 0x%x\n",

229 
ªgnum
, 
size
, 
ba£
);

231 
size
 = 
	`PCI_MAPREG_IO_SIZE
(
rv
);

232 
ba£
 = 
	`PCI_MAPREG_IO_ADDR
(
ﬁdv
);

233 i‡(
pci_show_addrs
)

234 
	`˝rötf
(" ioÑegion %d: %d bytesát 0x%x\n",

235 
ªgnum
, 
size
, 
ba£
);

238 
	`pci_c⁄f_wrôe
(
f
, 
b¨
, 
ﬁdv
);

239 
f
->
ªg_ba£
[
ªgnum
] = 
ba£
;

240 
f
->
ªg_size
[
ªgnum
] = 
size
;

242 i‡(
size
 && !
ba£
)

243 
	`˝rötf
("PCI device %02x:%02x.%d (%04x:%04x) "

246 
f
->
bus
->
bu¢o
, f->
dev
, f->
func
,

247 
	`PCI_VENDOR
(
f
->
dev_id
), 
	`PCI_PRODUCT
(f->dev_id),

248 
ªgnum
, 
ba£
, 
size
);

251 
	`˝rötf
("PCI function %02x:%02x.%d (%04x:%04x)Énabled\n",

252 
f
->
bus
->
bu¢o
, f->
dev
, f->
func
,

253 
	`PCI_VENDOR
(
f
->
dev_id
), 
	`PCI_PRODUCT
(f->dev_id));

254 
	}
}

257 
	$pci_öô
()

259 
pci_bus
 
roŸ_bus
;

260 
	`mem£t
(&
roŸ_bus
, 0, (root_bus));

262  
	`pci_sˇn_bus
(&
roŸ_bus
);

263 
	}
}

	@kern/pci.h

2 #i‚de‡
JOS_KERN_PCI_H


3 
	#JOS_KERN_PCI_H


	)

5 
	~<öc/ty≥s.h
>

8 íum { 
	mpci_ªs_bus
, 
	mpci_ªs_mem
, 
	mpci_ªs_io
, 
	mpci_ªs_max
 };

10 
	gpci_bus
;

12 
	spci_func
 {

13 
pci_bus
 *
	mbus
;

15 
uöt32_t
 
	mdev
;

16 
uöt32_t
 
	mfunc
;

18 
uöt32_t
 
	mdev_id
;

19 
uöt32_t
 
	mdev_˛ass
;

21 
uöt32_t
 
	mªg_ba£
[6];

22 
uöt32_t
 
	mªg_size
[6];

23 
uöt8_t
 
	múq_löe
;

26 
	spci_bus
 {

27 
pci_func
 *
	m∑ª¡_bridge
;

28 
uöt32_t
 
	mbu¢o
;

31 
pci_öô
();

32 
pci_func_íabÀ
(
pci_func
 *
f
);

	@kern/pcireg.h

35 #i‚de‡
_DEV_PCI_PCIREG_H_


36 
	#_DEV_PCI_PCIREG_H_


	)

44 
	~<öc/ty≥s.h
>

49 
	#PCI_ID_REG
 0x00

	)

51 
uöt16_t
 
	tpci_víd‹_id_t
;

52 
uöt16_t
 
	tpci_¥odu˘_id_t
;

54 
	#PCI_VENDOR_SHIFT
 0

	)

55 
	#PCI_VENDOR_MASK
 0xffff

	)

56 
	#PCI_VENDOR
(
id
) \

57 (((
id
Ë>> 
PCI_VENDOR_SHIFT
Ë& 
PCI_VENDOR_MASK
)

	)

59 
	#PCI_PRODUCT_SHIFT
 16

	)

60 
	#PCI_PRODUCT_MASK
 0xffff

	)

61 
	#PCI_PRODUCT
(
id
) \

62 (((
id
Ë>> 
PCI_PRODUCT_SHIFT
Ë& 
PCI_PRODUCT_MASK
)

	)

64 
	#PCI_ID_CODE
(
vid
,
pid
) \

65 ((((
vid
Ë& 
PCI_VENDOR_MASK
Ë<< 
PCI_VENDOR_SHIFT
) | \

66 (((
pid
Ë& 
PCI_PRODUCT_MASK
Ë<< 
PCI_PRODUCT_SHIFT
)) \

67 

	)

71 
	#PCI_COMMAND_STATUS_REG
 0x04

	)

72 
	#PCI_COMMAND_SHIFT
 0

	)

73 
	#PCI_COMMAND_MASK
 0xffff

	)

74 
	#PCI_STATUS_SHIFT
 16

	)

75 
	#PCI_STATUS_MASK
 0xffff

	)

77 
	#PCI_COMMAND_STATUS_CODE
(
cmd
,
°©
) \

78 ((((
cmd
Ë& 
PCI_COMMAND_MASK
Ë>> 
PCI_COMMAND_SHIFT
) | \

79 (((
°©
Ë& 
PCI_STATUS_MASK
Ë>> 
PCI_STATUS_SHIFT
)) \

80 

	)

81 
	#PCI_COMMAND_IO_ENABLE
 0x00000001

	)

82 
	#PCI_COMMAND_MEM_ENABLE
 0x00000002

	)

83 
	#PCI_COMMAND_MASTER_ENABLE
 0x00000004

	)

84 
	#PCI_COMMAND_SPECIAL_ENABLE
 0x00000008

	)

85 
	#PCI_COMMAND_INVALIDATE_ENABLE
 0x00000010

	)

86 
	#PCI_COMMAND_PALETTE_ENABLE
 0x00000020

	)

87 
	#PCI_COMMAND_PARITY_ENABLE
 0x00000040

	)

88 
	#PCI_COMMAND_STEPPING_ENABLE
 0x00000080

	)

89 
	#PCI_COMMAND_SERR_ENABLE
 0x00000100

	)

90 
	#PCI_COMMAND_BACKTOBACK_ENABLE
 0x00000200

	)

92 
	#PCI_STATUS_CAPLIST_SUPPORT
 0x00100000

	)

93 
	#PCI_STATUS_66MHZ_SUPPORT
 0x00200000

	)

94 
	#PCI_STATUS_UDF_SUPPORT
 0x00400000

	)

95 
	#PCI_STATUS_BACKTOBACK_SUPPORT
 0x00800000

	)

96 
	#PCI_STATUS_PARITY_ERROR
 0x01000000

	)

97 
	#PCI_STATUS_DEVSEL_FAST
 0x00000000

	)

98 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x02000000

	)

99 
	#PCI_STATUS_DEVSEL_SLOW
 0x04000000

	)

100 
	#PCI_STATUS_DEVSEL_MASK
 0x06000000

	)

101 
	#PCI_STATUS_TARGET_TARGET_ABORT
 0x08000000

	)

102 
	#PCI_STATUS_MASTER_TARGET_ABORT
 0x10000000

	)

103 
	#PCI_STATUS_MASTER_ABORT
 0x20000000

	)

104 
	#PCI_STATUS_SPECIAL_ERROR
 0x40000000

	)

105 
	#PCI_STATUS_PARITY_DETECT
 0x80000000

	)

110 
	#PCI_CLASS_REG
 0x08

	)

112 
uöt8_t
 
	tpci_˛ass_t
;

113 
uöt8_t
 
	tpci_sub˛ass_t
;

114 
uöt8_t
 
	tpci_öãrÁ˚_t
;

115 
uöt8_t
 
	tpci_ªvisi⁄_t
;

117 
	#PCI_CLASS_SHIFT
 24

	)

118 
	#PCI_CLASS_MASK
 0xff

	)

119 
	#PCI_CLASS
(
¸
) \

120 (((
¸
Ë>> 
PCI_CLASS_SHIFT
Ë& 
PCI_CLASS_MASK
)

	)

122 
	#PCI_SUBCLASS_SHIFT
 16

	)

123 
	#PCI_SUBCLASS_MASK
 0xff

	)

124 
	#PCI_SUBCLASS
(
¸
) \

125 (((
¸
Ë>> 
PCI_SUBCLASS_SHIFT
Ë& 
PCI_SUBCLASS_MASK
)

	)

127 
	#PCI_INTERFACE_SHIFT
 8

	)

128 
	#PCI_INTERFACE_MASK
 0xff

	)

129 
	#PCI_INTERFACE
(
¸
) \

130 (((
¸
Ë>> 
PCI_INTERFACE_SHIFT
Ë& 
PCI_INTERFACE_MASK
)

	)

132 
	#PCI_REVISION_SHIFT
 0

	)

133 
	#PCI_REVISION_MASK
 0xff

	)

134 
	#PCI_REVISION
(
¸
) \

135 (((
¸
Ë>> 
PCI_REVISION_SHIFT
Ë& 
PCI_REVISION_MASK
)

	)

137 
	#PCI_CLASS_CODE
(
maö˛ass
, 
sub˛ass
, 
öãrÁ˚
) \

138 ((((
maö˛ass
Ë& 
PCI_CLASS_MASK
Ë<< 
PCI_CLASS_SHIFT
) | \

139 (((
sub˛ass
Ë& 
PCI_SUBCLASS_MASK
Ë<< 
PCI_SUBCLASS_SHIFT
) | \

140 (((
öãrÁ˚
Ë& 
PCI_INTERFACE_MASK
Ë<< 
PCI_INTERFACE_SHIFT
))

	)

143 
	#PCI_CLASS_PREHISTORIC
 0x00

	)

144 
	#PCI_CLASS_MASS_STORAGE
 0x01

	)

145 
	#PCI_CLASS_NETWORK
 0x02

	)

146 
	#PCI_CLASS_DISPLAY
 0x03

	)

147 
	#PCI_CLASS_MULTIMEDIA
 0x04

	)

148 
	#PCI_CLASS_MEMORY
 0x05

	)

149 
	#PCI_CLASS_BRIDGE
 0x06

	)

150 
	#PCI_CLASS_COMMUNICATIONS
 0x07

	)

151 
	#PCI_CLASS_SYSTEM
 0x08

	)

152 
	#PCI_CLASS_INPUT
 0x09

	)

153 
	#PCI_CLASS_DOCK
 0x0a

	)

154 
	#PCI_CLASS_PROCESSOR
 0x0b

	)

155 
	#PCI_CLASS_SERIALBUS
 0x0c

	)

156 
	#PCI_CLASS_WIRELESS
 0x0d

	)

157 
	#PCI_CLASS_I2O
 0x0e

	)

158 
	#PCI_CLASS_SATCOM
 0x0f

	)

159 
	#PCI_CLASS_CRYPTO
 0x10

	)

160 
	#PCI_CLASS_DASP
 0x11

	)

161 
	#PCI_CLASS_UNDEFINED
 0xff

	)

164 
	#PCI_SUBCLASS_PREHISTORIC_MISC
 0x00

	)

165 
	#PCI_SUBCLASS_PREHISTORIC_VGA
 0x01

	)

168 
	#PCI_SUBCLASS_MASS_STORAGE_SCSI
 0x00

	)

169 
	#PCI_SUBCLASS_MASS_STORAGE_IDE
 0x01

	)

170 
	#PCI_SUBCLASS_MASS_STORAGE_FLOPPY
 0x02

	)

171 
	#PCI_SUBCLASS_MASS_STORAGE_IPI
 0x03

	)

172 
	#PCI_SUBCLASS_MASS_STORAGE_RAID
 0x04

	)

173 
	#PCI_SUBCLASS_MASS_STORAGE_ATA
 0x05

	)

174 
	#PCI_SUBCLASS_MASS_STORAGE_SATA
 0x06

	)

175 
	#PCI_SUBCLASS_MASS_STORAGE_MISC
 0x80

	)

178 
	#PCI_SUBCLASS_NETWORK_ETHERNET
 0x00

	)

179 
	#PCI_SUBCLASS_NETWORK_TOKENRING
 0x01

	)

180 
	#PCI_SUBCLASS_NETWORK_FDDI
 0x02

	)

181 
	#PCI_SUBCLASS_NETWORK_ATM
 0x03

	)

182 
	#PCI_SUBCLASS_NETWORK_ISDN
 0x04

	)

183 
	#PCI_SUBCLASS_NETWORK_WORLDFIP
 0x05

	)

184 
	#PCI_SUBCLASS_NETWORK_PCIMGMULTICOMP
 0x06

	)

185 
	#PCI_SUBCLASS_NETWORK_MISC
 0x80

	)

188 
	#PCI_SUBCLASS_DISPLAY_VGA
 0x00

	)

189 
	#PCI_SUBCLASS_DISPLAY_XGA
 0x01

	)

190 
	#PCI_SUBCLASS_DISPLAY_3D
 0x02

	)

191 
	#PCI_SUBCLASS_DISPLAY_MISC
 0x80

	)

194 
	#PCI_SUBCLASS_MULTIMEDIA_VIDEO
 0x00

	)

195 
	#PCI_SUBCLASS_MULTIMEDIA_AUDIO
 0x01

	)

196 
	#PCI_SUBCLASS_MULTIMEDIA_TELEPHONY
 0x02

	)

197 
	#PCI_SUBCLASS_MULTIMEDIA_MISC
 0x80

	)

200 
	#PCI_SUBCLASS_MEMORY_RAM
 0x00

	)

201 
	#PCI_SUBCLASS_MEMORY_FLASH
 0x01

	)

202 
	#PCI_SUBCLASS_MEMORY_MISC
 0x80

	)

205 
	#PCI_SUBCLASS_BRIDGE_HOST
 0x00

	)

206 
	#PCI_SUBCLASS_BRIDGE_ISA
 0x01

	)

207 
	#PCI_SUBCLASS_BRIDGE_EISA
 0x02

	)

208 
	#PCI_SUBCLASS_BRIDGE_MC
 0x03

	)

209 
	#PCI_SUBCLASS_BRIDGE_PCI
 0x04

	)

210 
	#PCI_SUBCLASS_BRIDGE_PCMCIA
 0x05

	)

211 
	#PCI_SUBCLASS_BRIDGE_NUBUS
 0x06

	)

212 
	#PCI_SUBCLASS_BRIDGE_CARDBUS
 0x07

	)

213 
	#PCI_SUBCLASS_BRIDGE_RACEWAY
 0x08

	)

214 
	#PCI_SUBCLASS_BRIDGE_STPCI
 0x09

	)

215 
	#PCI_SUBCLASS_BRIDGE_INFINIBAND
 0x0a

	)

216 
	#PCI_SUBCLASS_BRIDGE_MISC
 0x80

	)

219 
	#PCI_SUBCLASS_COMMUNICATIONS_SERIAL
 0x00

	)

220 
	#PCI_SUBCLASS_COMMUNICATIONS_PARALLEL
 0x01

	)

221 
	#PCI_SUBCLASS_COMMUNICATIONS_MPSERIAL
 0x02

	)

222 
	#PCI_SUBCLASS_COMMUNICATIONS_MODEM
 0x03

	)

223 
	#PCI_SUBCLASS_COMMUNICATIONS_GPIB
 0x04

	)

224 
	#PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD
 0x05

	)

225 
	#PCI_SUBCLASS_COMMUNICATIONS_MISC
 0x80

	)

228 
	#PCI_SUBCLASS_SYSTEM_PIC
 0x00

	)

229 
	#PCI_SUBCLASS_SYSTEM_DMA
 0x01

	)

230 
	#PCI_SUBCLASS_SYSTEM_TIMER
 0x02

	)

231 
	#PCI_SUBCLASS_SYSTEM_RTC
 0x03

	)

232 
	#PCI_SUBCLASS_SYSTEM_PCIHOTPLUG
 0x04

	)

233 
	#PCI_SUBCLASS_SYSTEM_MISC
 0x80

	)

236 
	#PCI_SUBCLASS_INPUT_KEYBOARD
 0x00

	)

237 
	#PCI_SUBCLASS_INPUT_DIGITIZER
 0x01

	)

238 
	#PCI_SUBCLASS_INPUT_MOUSE
 0x02

	)

239 
	#PCI_SUBCLASS_INPUT_SCANNER
 0x03

	)

240 
	#PCI_SUBCLASS_INPUT_GAMEPORT
 0x04

	)

241 
	#PCI_SUBCLASS_INPUT_MISC
 0x80

	)

244 
	#PCI_SUBCLASS_DOCK_GENERIC
 0x00

	)

245 
	#PCI_SUBCLASS_DOCK_MISC
 0x80

	)

248 
	#PCI_SUBCLASS_PROCESSOR_386
 0x00

	)

249 
	#PCI_SUBCLASS_PROCESSOR_486
 0x01

	)

250 
	#PCI_SUBCLASS_PROCESSOR_PENTIUM
 0x02

	)

251 
	#PCI_SUBCLASS_PROCESSOR_ALPHA
 0x10

	)

252 
	#PCI_SUBCLASS_PROCESSOR_POWERPC
 0x20

	)

253 
	#PCI_SUBCLASS_PROCESSOR_MIPS
 0x30

	)

254 
	#PCI_SUBCLASS_PROCESSOR_COPROC
 0x40

	)

257 
	#PCI_SUBCLASS_SERIALBUS_FIREWIRE
 0x00

	)

258 
	#PCI_SUBCLASS_SERIALBUS_ACCESS
 0x01

	)

259 
	#PCI_SUBCLASS_SERIALBUS_SSA
 0x02

	)

260 
	#PCI_SUBCLASS_SERIALBUS_USB
 0x03

	)

261 
	#PCI_SUBCLASS_SERIALBUS_FIBER
 0x04

	)

262 
	#PCI_SUBCLASS_SERIALBUS_SMBUS
 0x05

	)

263 
	#PCI_SUBCLASS_SERIALBUS_INFINIBAND
 0x06

	)

264 
	#PCI_SUBCLASS_SERIALBUS_IPMI
 0x07

	)

265 
	#PCI_SUBCLASS_SERIALBUS_SERCOS
 0x08

	)

266 
	#PCI_SUBCLASS_SERIALBUS_CANBUS
 0x09

	)

269 
	#PCI_SUBCLASS_WIRELESS_IRDA
 0x00

	)

270 
	#PCI_SUBCLASS_WIRELESS_CONSUMERIR
 0x01

	)

271 
	#PCI_SUBCLASS_WIRELESS_RF
 0x10

	)

272 
	#PCI_SUBCLASS_WIRELESS_BLUETOOTH
 0x11

	)

273 
	#PCI_SUBCLASS_WIRELESS_BROADBAND
 0x12

	)

274 
	#PCI_SUBCLASS_WIRELESS_802_11A
 0x20

	)

275 
	#PCI_SUBCLASS_WIRELESS_802_11B
 0x21

	)

276 
	#PCI_SUBCLASS_WIRELESS_MISC
 0x80

	)

279 
	#PCI_SUBCLASS_I2O_STANDARD
 0x00

	)

283 
	#PCI_SUBCLASS_SATCOM_TV
 0x01

	)

284 
	#PCI_SUBCLASS_SATCOM_AUDIO
 0x02

	)

285 
	#PCI_SUBCLASS_SATCOM_VOICE
 0x03

	)

286 
	#PCI_SUBCLASS_SATCOM_DATA
 0x04

	)

289 
	#PCI_SUBCLASS_CRYPTO_NETCOMP
 0x00

	)

290 
	#PCI_SUBCLASS_CRYPTO_ENTERTAINMENT
 0x10

	)

291 
	#PCI_SUBCLASS_CRYPTO_MISC
 0x80

	)

294 
	#PCI_SUBCLASS_DASP_DPIO
 0x00

	)

295 
	#PCI_SUBCLASS_DASP_TIMEFREQ
 0x01

	)

296 
	#PCI_SUBCLASS_DASP_SYNC
 0x10

	)

297 
	#PCI_SUBCLASS_DASP_MGMT
 0x20

	)

298 
	#PCI_SUBCLASS_DASP_MISC
 0x80

	)

303 
	#PCI_BHLC_REG
 0x0c

	)

305 
	#PCI_BIST_SHIFT
 24

	)

306 
	#PCI_BIST_MASK
 0xff

	)

307 
	#PCI_BIST
(
bhl¸
) \

308 (((
bhl¸
Ë>> 
PCI_BIST_SHIFT
Ë& 
PCI_BIST_MASK
)

	)

310 
	#PCI_HDRTYPE_SHIFT
 16

	)

311 
	#PCI_HDRTYPE_MASK
 0xff

	)

312 
	#PCI_HDRTYPE
(
bhl¸
) \

313 (((
bhl¸
Ë>> 
PCI_HDRTYPE_SHIFT
Ë& 
PCI_HDRTYPE_MASK
)

	)

315 
	#PCI_HDRTYPE_TYPE
(
bhl¸
) \

316 (
	`PCI_HDRTYPE
(
bhl¸
Ë& 0x7f)

	)

317 
	#PCI_HDRTYPE_MULTIFN
(
bhl¸
) \

318 ((
	`PCI_HDRTYPE
(
bhl¸
Ë& 0x80Ë!0)

	)

320 
	#PCI_LATTIMER_SHIFT
 8

	)

321 
	#PCI_LATTIMER_MASK
 0xff

	)

322 
	#PCI_LATTIMER
(
bhl¸
) \

323 (((
bhl¸
Ë>> 
PCI_LATTIMER_SHIFT
Ë& 
PCI_LATTIMER_MASK
)

	)

325 
	#PCI_CACHELINE_SHIFT
 0

	)

326 
	#PCI_CACHELINE_MASK
 0xff

	)

327 
	#PCI_CACHELINE
(
bhl¸
) \

328 (((
bhl¸
Ë>> 
PCI_CACHELINE_SHIFT
Ë& 
PCI_CACHELINE_MASK
)

	)

330 
	#PCI_BHLC_CODE
(
bi°
,
ty≥
,
mu…i
,
œãncy
,
ˇchñöe
) \

331 ((((
bi°
Ë& 
PCI_BIST_MASK
Ë<< 
PCI_BIST_SHIFT
) | \

332 (((
ty≥
Ë& 
PCI_HDRTYPE_MASK
Ë<< 
PCI_HDRTYPE_SHIFT
) | \

333 (((
mu…i
)?0x80:0Ë<< 
PCI_HDRTYPE_SHIFT
) | \

334 (((
œãncy
Ë& 
PCI_LATTIMER_MASK
Ë<< 
PCI_LATTIMER_SHIFT
) | \

335 (((
ˇchñöe
Ë& 
PCI_CACHELINE_MASK
Ë<< 
PCI_CACHELINE_SHIFT
))

	)

340 
	#PCI_HDRTYPE_DEVICE
 0

	)

341 
	#PCI_HDRTYPE_PPB
 1

	)

342 
	#PCI_HDRTYPE_PCB
 2

	)

347 
	#PCI_MAPREG_START
 0x10

	)

348 
	#PCI_MAPREG_END
 0x28

	)

349 
	#PCI_MAPREG_ROM
 0x30

	)

350 
	#PCI_MAPREG_PPB_END
 0x18

	)

351 
	#PCI_MAPREG_PCB_END
 0x14

	)

353 
	#PCI_MAPREG_TYPE
(
mr
) \

354 ((
mr
Ë& 
PCI_MAPREG_TYPE_MASK
)

	)

355 
	#PCI_MAPREG_TYPE_MASK
 0x00000001

	)

357 
	#PCI_MAPREG_TYPE_MEM
 0x00000000

	)

358 
	#PCI_MAPREG_TYPE_IO
 0x00000001

	)

359 
	#PCI_MAPREG_ROM_ENABLE
 0x00000001

	)

361 
	#PCI_MAPREG_MEM_TYPE
(
mr
) \

362 ((
mr
Ë& 
PCI_MAPREG_MEM_TYPE_MASK
)

	)

363 
	#PCI_MAPREG_MEM_TYPE_MASK
 0x00000006

	)

365 
	#PCI_MAPREG_MEM_TYPE_32BIT
 0x00000000

	)

366 
	#PCI_MAPREG_MEM_TYPE_32BIT_1M
 0x00000002

	)

367 
	#PCI_MAPREG_MEM_TYPE_64BIT
 0x00000004

	)

369 
	#PCI_MAPREG_MEM_PREFETCHABLE
(
mr
) \

370 (((
mr
Ë& 
PCI_MAPREG_MEM_PREFETCHABLE_MASK
Ë!0)

	)

371 
	#PCI_MAPREG_MEM_PREFETCHABLE_MASK
 0x00000008

	)

373 
	#PCI_MAPREG_MEM_ADDR
(
mr
) \

374 ((
mr
Ë& 
PCI_MAPREG_MEM_ADDR_MASK
)

	)

375 
	#PCI_MAPREG_MEM_SIZE
(
mr
) \

376 (
	`PCI_MAPREG_MEM_ADDR
(
mr
Ë& -PCI_MAPREG_MEM_ADDR(mr))

	)

377 
	#PCI_MAPREG_MEM_ADDR_MASK
 0xfffffff0

	)

379 
	#PCI_MAPREG_MEM64_ADDR
(
mr
) \

380 ((
mr
Ë& 
PCI_MAPREG_MEM64_ADDR_MASK
)

	)

381 
	#PCI_MAPREG_MEM64_SIZE
(
mr
) \

382 (
	`PCI_MAPREG_MEM64_ADDR
(
mr
Ë& -PCI_MAPREG_MEM64_ADDR(mr))

	)

383 
	#PCI_MAPREG_MEM64_ADDR_MASK
 0xfffffffffffffff0ULL

	)

385 
	#PCI_MAPREG_IO_ADDR
(
mr
) \

386 ((
mr
Ë& 
PCI_MAPREG_IO_ADDR_MASK
)

	)

387 
	#PCI_MAPREG_IO_SIZE
(
mr
) \

388 (
	`PCI_MAPREG_IO_ADDR
(
mr
Ë& -PCI_MAPREG_IO_ADDR(mr))

	)

389 
	#PCI_MAPREG_IO_ADDR_MASK
 0xfffffffc

	)

391 
	#PCI_MAPREG_SIZE_TO_MASK
(
size
) \

392 (-(
size
))

	)

394 
	#PCI_MAPREG_NUM
(
off£t
) \

395 ((()(
off£t
)-
PCI_MAPREG_START
)/4)

	)

401 
	#PCI_CARDBUS_CIS_REG
 0x28

	)

408 
	#PCI_SUBSYS_ID_REG
 0x2c

	)

413 
	#PCI_CAPLISTPTR_REG
 0x34

	)

414 
	#PCI_CARDBUS_CAPLISTPTR_REG
 0x14

	)

415 
	#PCI_CAPLIST_PTR
(
˝r
Ë((˝rË& 0xff)

	)

416 
	#PCI_CAPLIST_NEXT
(
¸
Ë(((¸Ë>> 8Ë& 0xff)

	)

417 
	#PCI_CAPLIST_CAP
(
¸
Ë((¸Ë& 0xff)

	)

419 
	#PCI_CAP_RESERVED0
 0x00

	)

420 
	#PCI_CAP_PWRMGMT
 0x01

	)

421 
	#PCI_CAP_AGP
 0x02

	)

422 
	#PCI_CAP_AGP_MAJOR
(
¸
Ë(((¸Ë>> 20Ë& 0xf)

	)

423 
	#PCI_CAP_AGP_MINOR
(
¸
Ë(((¸Ë>> 16Ë& 0xf)

	)

424 
	#PCI_CAP_VPD
 0x03

	)

425 
	#PCI_CAP_SLOTID
 0x04

	)

426 
	#PCI_CAP_MSI
 0x05

	)

427 
	#PCI_CAP_CPCI_HOTSWAP
 0x06

	)

428 
	#PCI_CAP_PCIX
 0x07

	)

429 
	#PCI_CAP_LDT
 0x08

	)

430 
	#PCI_CAP_VENDSPEC
 0x09

	)

431 
	#PCI_CAP_DEBUGPORT
 0x0a

	)

432 
	#PCI_CAP_CPCI_RSRCCTL
 0x0b

	)

433 
	#PCI_CAP_HOTPLUG
 0x0c

	)

434 
	#PCI_CAP_AGP8
 0x0e

	)

435 
	#PCI_CAP_SECURE
 0x0f

	)

436 
	#PCI_CAP_PCIEXPRESS
 0x10

	)

437 
	#PCI_CAP_MSIX
 0x11

	)

442 
	#PCI_VPD_ADDRESS_MASK
 0x7fff

	)

443 
	#PCI_VPD_ADDRESS_SHIFT
 16

	)

444 
	#PCI_VPD_ADDRESS
(
ofs
) \

445 (((
ofs
Ë& 
PCI_VPD_ADDRESS_MASK
Ë<< 
PCI_VPD_ADDRESS_SHIFT
)

	)

446 
	#PCI_VPD_DATAREG
(
ofs
Ë((ofsË+ 4)

	)

447 
	#PCI_VPD_OPFLAG
 0x80000000

	)

454 
	#PCI_PMCR
 0x02

	)

455 
	#PCI_PMCR_D1SUPP
 0x0200

	)

456 
	#PCI_PMCR_D2SUPP
 0x0400

	)

458 
	#PCI_PMCSR
 0x04

	)

459 
	#PCI_PMCSR_STATE_MASK
 0x03

	)

460 
	#PCI_PMCSR_STATE_D0
 0x00

	)

461 
	#PCI_PMCSR_STATE_D1
 0x01

	)

462 
	#PCI_PMCSR_STATE_D2
 0x02

	)

463 
	#PCI_PMCSR_STATE_D3
 0x03

	)

478 
	#PCI_PCIX_CMD
 0x00

	)

479 
	#PCI_PCIX_CMD_PERR_RECOVER
 0x00010000

	)

480 
	#PCI_PCIX_CMD_RELAXED_ORDER
 0x00020000

	)

481 
	#PCI_PCIX_CMD_BYTECNT_MASK
 0x000c0000

	)

482 
	#PCI_PCIX_CMD_BYTECNT_SHIFT
 18

	)

483 
	#PCI_PCIX_CMD_BCNT_512
 0x00000000

	)

484 
	#PCI_PCIX_CMD_BCNT_1024
 0x00040000

	)

485 
	#PCI_PCIX_CMD_BCNT_2048
 0x00080000

	)

486 
	#PCI_PCIX_CMD_BCNT_4096
 0x000c0000

	)

487 
	#PCI_PCIX_CMD_SPLTRANS_MASK
 0x00700000

	)

488 
	#PCI_PCIX_CMD_SPLTRANS_1
 0x00000000

	)

489 
	#PCI_PCIX_CMD_SPLTRANS_2
 0x00100000

	)

490 
	#PCI_PCIX_CMD_SPLTRANS_3
 0x00200000

	)

491 
	#PCI_PCIX_CMD_SPLTRANS_4
 0x00300000

	)

492 
	#PCI_PCIX_CMD_SPLTRANS_8
 0x00400000

	)

493 
	#PCI_PCIX_CMD_SPLTRANS_12
 0x00500000

	)

494 
	#PCI_PCIX_CMD_SPLTRANS_16
 0x00600000

	)

495 
	#PCI_PCIX_CMD_SPLTRANS_32
 0x00700000

	)

500 
	#PCI_PCIX_STATUS
 0x04

	)

501 
	#PCI_PCIX_STATUS_FN_MASK
 0x00000007

	)

502 
	#PCI_PCIX_STATUS_DEV_MASK
 0x000000f8

	)

503 
	#PCI_PCIX_STATUS_BUS_MASK
 0x0000ff00

	)

504 
	#PCI_PCIX_STATUS_64BIT
 0x00010000

	)

505 
	#PCI_PCIX_STATUS_133
 0x00020000

	)

506 
	#PCI_PCIX_STATUS_SPLDISC
 0x00040000

	)

507 
	#PCI_PCIX_STATUS_SPLUNEX
 0x00080000

	)

508 
	#PCI_PCIX_STATUS_DEVCPLX
 0x00100000

	)

509 
	#PCI_PCIX_STATUS_MAXB_MASK
 0x00600000

	)

510 
	#PCI_PCIX_STATUS_MAXB_SHIFT
 21

	)

511 
	#PCI_PCIX_STATUS_MAXB_512
 0x00000000

	)

512 
	#PCI_PCIX_STATUS_MAXB_1024
 0x00200000

	)

513 
	#PCI_PCIX_STATUS_MAXB_2048
 0x00400000

	)

514 
	#PCI_PCIX_STATUS_MAXB_4096
 0x00600000

	)

515 
	#PCI_PCIX_STATUS_MAXST_MASK
 0x03800000

	)

516 
	#PCI_PCIX_STATUS_MAXST_1
 0x00000000

	)

517 
	#PCI_PCIX_STATUS_MAXST_2
 0x00800000

	)

518 
	#PCI_PCIX_STATUS_MAXST_3
 0x01000000

	)

519 
	#PCI_PCIX_STATUS_MAXST_4
 0x01800000

	)

520 
	#PCI_PCIX_STATUS_MAXST_8
 0x02000000

	)

521 
	#PCI_PCIX_STATUS_MAXST_12
 0x02800000

	)

522 
	#PCI_PCIX_STATUS_MAXST_16
 0x03000000

	)

523 
	#PCI_PCIX_STATUS_MAXST_32
 0x03800000

	)

524 
	#PCI_PCIX_STATUS_MAXRS_MASK
 0x1c000000

	)

525 
	#PCI_PCIX_STATUS_MAXRS_1K
 0x00000000

	)

526 
	#PCI_PCIX_STATUS_MAXRS_2K
 0x04000000

	)

527 
	#PCI_PCIX_STATUS_MAXRS_4K
 0x08000000

	)

528 
	#PCI_PCIX_STATUS_MAXRS_8K
 0x0c000000

	)

529 
	#PCI_PCIX_STATUS_MAXRS_16K
 0x10000000

	)

530 
	#PCI_PCIX_STATUS_MAXRS_32K
 0x14000000

	)

531 
	#PCI_PCIX_STATUS_MAXRS_64K
 0x18000000

	)

532 
	#PCI_PCIX_STATUS_MAXRS_128K
 0x1c000000

	)

533 
	#PCI_PCIX_STATUS_SCERR
 0x20000000

	)

539 
	#PCI_INTERRUPT_REG
 0x3c

	)

541 
uöt8_t
 
	tpci_öå_œãncy_t
;

542 
uöt8_t
 
	tpci_öå_gø¡_t
;

543 
uöt8_t
 
	tpci_öå_pö_t
;

544 
uöt8_t
 
	tpci_öå_löe_t
;

546 
	#PCI_MAX_LAT_SHIFT
 24

	)

547 
	#PCI_MAX_LAT_MASK
 0xff

	)

548 
	#PCI_MAX_LAT
(
i¸
) \

549 (((
i¸
Ë>> 
PCI_MAX_LAT_SHIFT
Ë& 
PCI_MAX_LAT_MASK
)

	)

551 
	#PCI_MIN_GNT_SHIFT
 16

	)

552 
	#PCI_MIN_GNT_MASK
 0xff

	)

553 
	#PCI_MIN_GNT
(
i¸
) \

554 (((
i¸
Ë>> 
PCI_MIN_GNT_SHIFT
Ë& 
PCI_MIN_GNT_MASK
)

	)

556 
	#PCI_INTERRUPT_GRANT_SHIFT
 24

	)

557 
	#PCI_INTERRUPT_GRANT_MASK
 0xff

	)

558 
	#PCI_INTERRUPT_GRANT
(
i¸
) \

559 (((
i¸
Ë>> 
PCI_INTERRUPT_GRANT_SHIFT
Ë& 
PCI_INTERRUPT_GRANT_MASK
)

	)

561 
	#PCI_INTERRUPT_LATENCY_SHIFT
 16

	)

562 
	#PCI_INTERRUPT_LATENCY_MASK
 0xff

	)

563 
	#PCI_INTERRUPT_LATENCY
(
i¸
) \

564 (((
i¸
Ë>> 
PCI_INTERRUPT_LATENCY_SHIFT
Ë& 
PCI_INTERRUPT_LATENCY_MASK
)

	)

566 
	#PCI_INTERRUPT_PIN_SHIFT
 8

	)

567 
	#PCI_INTERRUPT_PIN_MASK
 0xff

	)

568 
	#PCI_INTERRUPT_PIN
(
i¸
) \

569 (((
i¸
Ë>> 
PCI_INTERRUPT_PIN_SHIFT
Ë& 
PCI_INTERRUPT_PIN_MASK
)

	)

571 
	#PCI_INTERRUPT_LINE_SHIFT
 0

	)

572 
	#PCI_INTERRUPT_LINE_MASK
 0xff

	)

573 
	#PCI_INTERRUPT_LINE
(
i¸
) \

574 (((
i¸
Ë>> 
PCI_INTERRUPT_LINE_SHIFT
Ë& 
PCI_INTERRUPT_LINE_MASK
)

	)

576 
	#PCI_INTERRUPT_CODE
(
œt
,
g¡
,
pö
,
löe
) \

577 ((((
œt
)&
PCI_INTERRUPT_LATENCY_MASK
)<<
PCI_INTERRUPT_LATENCY_SHIFT
)| \

578 (((
g¡
)&
PCI_INTERRUPT_GRANT_MASK
Ë<<
PCI_INTERRUPT_GRANT_SHIFT
) | \

579 (((
pö
)&
PCI_INTERRUPT_PIN_MASK
Ë<<
PCI_INTERRUPT_PIN_SHIFT
) | \

580 (((
löe
)&
PCI_INTERRUPT_LINE_MASK
Ë<<
PCI_INTERRUPT_LINE_SHIFT
))

	)

582 
	#PCI_INTERRUPT_PIN_NONE
 0x00

	)

583 
	#PCI_INTERRUPT_PIN_A
 0x01

	)

584 
	#PCI_INTERRUPT_PIN_B
 0x02

	)

585 
	#PCI_INTERRUPT_PIN_C
 0x03

	)

586 
	#PCI_INTERRUPT_PIN_D
 0x04

	)

587 
	#PCI_INTERRUPT_PIN_MAX
 0x04

	)

590 
	#PCI_BRIDGE_BUS_REG
 0x18

	)

591 
	#PCI_BRIDGE_BUS_PRIMARY_SHIFT
 0

	)

592 
	#PCI_BRIDGE_BUS_SECONDARY_SHIFT
 8

	)

593 
	#PCI_BRIDGE_BUS_SUBORDINATE_SHIFT
 16

	)

595 
	#PCI_BRIDGE_STATIO_REG
 0x1C

	)

596 
	#PCI_BRIDGE_STATIO_IOBASE_SHIFT
 0

	)

597 
	#PCI_BRIDGE_STATIO_IOLIMIT_SHIFT
 8

	)

598 
	#PCI_BRIDGE_STATIO_STATUS_SHIFT
 16

	)

599 
	#PCI_BRIDGE_STATIO_IOBASE_MASK
 0xf0

	)

600 
	#PCI_BRIDGE_STATIO_IOLIMIT_MASK
 0xf0

	)

601 
	#PCI_BRIDGE_STATIO_STATUS_MASK
 0xffff

	)

602 
	#PCI_BRIDGE_IO_32BITS
(
ªg
Ë((‘egË& 0xfË=1)

	)

604 
	#PCI_BRIDGE_MEMORY_REG
 0x20

	)

605 
	#PCI_BRIDGE_MEMORY_BASE_SHIFT
 4

	)

606 
	#PCI_BRIDGE_MEMORY_LIMIT_SHIFT
 20

	)

607 
	#PCI_BRIDGE_MEMORY_BASE_MASK
 0xffff

	)

608 
	#PCI_BRIDGE_MEMORY_LIMIT_MASK
 0xffff

	)

610 
	#PCI_BRIDGE_PREFETCHMEM_REG
 0x24

	)

611 
	#PCI_BRIDGE_PREFETCHMEM_BASE_SHIFT
 4

	)

612 
	#PCI_BRIDGE_PREFETCHMEM_LIMIT_SHIFT
 20

	)

613 
	#PCI_BRIDGE_PREFETCHMEM_BASE_MASK
 0xffff

	)

614 
	#PCI_BRIDGE_PREFETCHMEM_LIMIT_MASK
 0xffff

	)

615 
	#PCI_BRIDGE_PREFETCHMEM_64BITS
(
ªg
Ë(‘egË& 0xf)

	)

617 
	#PCI_BRIDGE_PREFETCHBASE32_REG
 0x28

	)

618 
	#PCI_BRIDGE_PREFETCHLIMIT32_REG
 0x2C

	)

620 
	#PCI_BRIDGE_IOHIGH_REG
 0x30

	)

621 
	#PCI_BRIDGE_IOHIGH_BASE_SHIFT
 0

	)

622 
	#PCI_BRIDGE_IOHIGH_LIMIT_SHIFT
 16

	)

623 
	#PCI_BRIDGE_IOHIGH_BASE_MASK
 0xffff

	)

624 
	#PCI_BRIDGE_IOHIGH_LIMIT_MASK
 0xffff

	)

626 
	#PCI_BRIDGE_CONTROL_REG
 0x3C

	)

627 
	#PCI_BRIDGE_CONTROL_SHIFT
 16

	)

628 
	#PCI_BRIDGE_CONTROL_MASK
 0xffff

	)

629 
	#PCI_BRIDGE_CONTROL_PERE
 (1 << 0)

	)

630 
	#PCI_BRIDGE_CONTROL_SERR
 (1 << 1)

	)

631 
	#PCI_BRIDGE_CONTROL_ISA
 (1 << 2)

	)

632 
	#PCI_BRIDGE_CONTROL_VGA
 (1 << 3)

	)

634 
	#PCI_BRIDGE_CONTROL_MABRT
 (1 << 5)

	)

635 
	#PCI_BRIDGE_CONTROL_SECBR
 (1 << 6)

	)

636 
	#PCI_BRIDGE_CONTROL_SECFASTB2B
 (1 << 7)

	)

637 
	#PCI_BRIDGE_CONTROL_PRI_DISC_TIMER
 (1 << 8)

	)

638 
	#PCI_BRIDGE_CONTROL_SEC_DISC_TIMER
 (1 << 9)

	)

639 
	#PCI_BRIDGE_CONTROL_DISC_TIMER_STAT
 (1 << 10)

	)

640 
	#PCI_BRIDGE_CONTROL_DISC_TIMER_SERR
 (1 << 11)

	)

646 
	spci_vpd_smÆÃes
 {

647 
uöt8_t
 
	mvpdªs_byã0
;

649 } 
__©åibuã__
((
__∑cked__
));

651 
	spci_vpd_œrgîes
 {

652 
uöt8_t
 
	mvpdªs_byã0
;

653 
uöt8_t
 
	mvpdªs_Àn_lsb
;

654 
uöt8_t
 
	mvpdªs_Àn_msb
;

656 } 
__©åibuã__
((
__∑cked__
));

658 
	#PCI_VPDRES_ISLARGE
(
x
Ë((xË& 0x80)

	)

660 
	#PCI_VPDRES_SMALL_LENGTH
(
x
Ë((xË& 0x7)

	)

661 
	#PCI_VPDRES_SMALL_NAME
(
x
Ë(((xË>> 3Ë& 0xf)

	)

663 
	#PCI_VPDRES_LARGE_NAME
(
x
Ë((xË& 0x7f)

	)

665 
	#PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID
 0x3

	)

666 
	#PCI_VPDRES_TYPE_VENDOR_DEFINED
 0xê

	)

667 
	#PCI_VPDRES_TYPE_END_TAG
 0x‡

	)

669 
	#PCI_VPDRES_TYPE_IDENTIFIER_STRING
 0x02

	)

670 
	#PCI_VPDRES_TYPE_VPD
 0x10

	)

672 
	spci_vpd
 {

673 
uöt8_t
 
	mvpd_key0
;

674 
uöt8_t
 
	mvpd_key1
;

675 
uöt8_t
 
	mvpd_Àn
;

677 } 
__©åibuã__
((
__∑cked__
));

709 
	#PCI32_DMA_BOUNCE_THRESHOLD
 0x100000000ULL

	)

	@kern/picirq.c

4 
	~<öc/as£π.h
>

5 
	~<öc/å≠.h
>

7 
	~<kîn/picúq.h
>

12 
uöt16_t
 
	gúq_mask_8259A
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

13 
boﬁ
 
	gdidöô
;

17 
	$pic_öô
()

19 
didöô
 = 1;

22 
	`outb
(
IO_PIC1
+1, 0xFF);

23 
	`outb
(
IO_PIC2
+1, 0xFF);

31 
	`outb
(
IO_PIC1
, 0x11);

34 
	`outb
(
IO_PIC1
+1, 
IRQ_OFFSET
);

38 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

48 
	`outb
(
IO_PIC1
+1, 0x3);

51 
	`outb
(
IO_PIC2
, 0x11);

52 
	`outb
(
IO_PIC2
+1, 
IRQ_OFFSET
 + 8);

53 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

56 
	`outb
(
IO_PIC2
+1, 0x01);

62 
	`outb
(
IO_PIC1
, 0x68);

63 
	`outb
(
IO_PIC1
, 0x0a);

65 
	`outb
(
IO_PIC2
, 0x68);

66 
	`outb
(
IO_PIC2
, 0x0a);

68 i‡(
úq_mask_8259A
 != 0xFFFF)

69 
	`úq_£tmask_8259A
(
úq_mask_8259A
);

70 
	}
}

73 
	$úq_£tmask_8259A
(
uöt16_t
 
mask
)

75 
i
;

76 
úq_mask_8259A
 = 
mask
;

77 i‡(!
didöô
)

79 
	`outb
(
IO_PIC1
+1, ()
mask
);

80 
	`outb
(
IO_PIC2
+1, ()(
mask
 >> 8));

81 
	`˝rötf
("enabled interrupts:");

82 
i
 = 0; i < 16; i++)

83 i‡(~
mask
 & (1<<
i
))

84 
	`˝rötf
(" %d", 
i
);

85 
	`˝rötf
("\n");

86 
	}
}

90 
	$úq_eoi
()

97 
	`outb
(
IO_PIC1
, 0x20);

98 
	`outb
(
IO_PIC2
, 0x20);

99 
	}
}

	@kern/picirq.h

4 #i‚de‡
JOS_KERN_PICIRQ_H


5 
	#JOS_KERN_PICIRQ_H


	)

6 #i‚de‡
JOS_KERNEL


10 
	#MAX_IRQS
 16

11 

	)

13 
	#IO_PIC1
 0x20

14 
	#IO_PIC2
 0xA0

15 

	)

16 
	#IRQ_SLAVE
 2

17 

	)

19 #i‚de‡
__ASSEMBLER__


21 
	~<öc/ty≥s.h
>

22 
	~<öc/x86.h
>

24 
uöt16_t
 
úq_mask_8259A
;

25 
pic_öô
();

26 
úq_£tmask_8259A
(
uöt16_t
 
mask
);

28 
úq_eoi
();

	@kern/pmap.c

4 
	~<öc/x86.h
>

5 
	~<öc/mmu.h
>

6 
	~<öc/îr‹.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/as£π.h
>

10 
	~<kîn/pm≠.h
>

11 
	~<kîn/k˛ock.h
>

12 
	~<kîn/mu…iboŸ.h
>

14 
	~<kîn/ív.h
>

16 
	~<kîn/˝u.h
>

19 
uöt64_t
 
pml4phys
;

20 
	#BOOT_PAGE_TABLE_START
 ((
uöt64_t
Ë
	`KADDR
((uöt64_tË&
pml4phys
))

	)

21 
	#BOOT_PAGE_TABLE_END
 ((
uöt64_t
Ë
	`KADDR
((uöt64_tË(&
pml4phys
Ë+ 5*
PGSIZE
))

	)

24 
size_t
 
	g≈ages
;

25 
size_t
 
	g≈ages_ba£mem
;

28 
pml4e_t
 *
	gboŸ_pml4e
;

29 
phyßddr_t
 
	gboŸ_¸3
;

30 
PageInfo
 *
	g∑ges
;

31 
PageInfo
 *
	g∑ge_‰ì_li°
;

38 
	$nvøm_ªad
(
r
)

40  
	`mc146818_ªad
(
r
) | (mc146818_read(r + 1) << 8);

41 
	}
}

44 
	$mu…iboŸ_ªad
(
mu…iboŸ_öfo_t
* 
mböfo
, 
size_t
* 
ba£mem
, size_t* 
extmem
) {

45 
i
;

47 
mem‹y_m≠_t
* 
mm≠_ba£
 = (mem‹y_m≠_t*)(
uöçå_t
)
mböfo
->
mm≠_addr
;

48 
mem‹y_m≠_t
* 
mm≠_li°
[
mböfo
->
mm≠_Àngth
/ ((memory_map_t))];

50 
	`˝rötf
("\ne820 MEMORY MAP\n");

51 
i
 = 0; i < (
mböfo
->
mm≠_Àngth
 / ((
mem‹y_m≠_t
))); i++) {

52 
mem‹y_m≠_t
* 
mm≠
 = &
mm≠_ba£
[
i
];

54 
uöt64_t
 
addr
 = 
	`APPEND_HILO
(
mm≠
->
ba£_addr_high
, mm≠->
ba£_addr_low
);

55 
uöt64_t
 
Àn
 = 
	`APPEND_HILO
(
mm≠
->
Àngth_high
, mm≠->
Àngth_low
);

57 
	`˝rötf
("size: %d,áddªss: 0x%016x,Üígth: 0x%016x,Åy≥: %x\n", 
mm≠
->
size
,

58 
addr
, 
Àn
, 
mm≠
->
ty≥
);

60 if(
mm≠
->
ty≥
 > 5 || mmap->type < 1)

61 
mm≠
->
ty≥
 = 
MB_TYPE_RESERVED
;

64 
j
 = 0;

65 ;
j
<
i
;j++) {

66 
mem‹y_m≠_t
* 
this
 = 
mm≠_li°
[
j
];

67 
uöt64_t
 
this_addr
 = 
	`APPEND_HILO
(
this
->
ba£_addr_high
,Åhis->
ba£_addr_low
);

68 if(
this_addr
 > 
addr
) {

69 
œ°
 = 
i
+1;

70 
œ°
 !
j
) {

71 *(
mm≠_li°
 + 
œ°
) = *(mmap_list +Üast - 1);

72 
œ°
--;

77 
mm≠_li°
[
j
] = 
mm≠
;

79 
	`˝rötf
("\n");

82 
i
=1;ò< (
mböfo
->
mm≠_Àngth
 / ((
mem‹y_m≠_t
))); i++) {

83 
mem‹y_m≠_t
* 
¥ev
 = 
mm≠_li°
[
i
-1];

84 
mem‹y_m≠_t
* 
this
 = 
mm≠_li°
[
i
];

86 
uöt64_t
 
this_addr
 = 
	`APPEND_HILO
(
this
->
ba£_addr_high
,Åhis->
ba£_addr_low
);

87 
uöt64_t
 
¥ev_addr
 = 
	`APPEND_HILO
(
¥ev
->
ba£_addr_high
,Öªv->
ba£_addr_low
);

88 
uöt64_t
 
¥ev_Àngth
 = 
	`APPEND_HILO
(
¥ev
->
Àngth_high
,Öªv->
Àngth_low
);

89 
uöt64_t
 
this_Àngth
 = 
	`APPEND_HILO
(
this
->
Àngth_high
,Åhis->
Àngth_low
);

92 if(
¥ev_addr
 + 
¥ev_Àngth
 =
this_addr
 && 
¥ev
->
ty≥
 =
this
->type) {

93 
this
->
Àngth_low
 = (
uöt32_t
)
¥ev_Àngth
 + 
this_Àngth
;

94 
this
->
Àngth_high
 = (
uöt32_t
)((
¥ev_Àngth
 + 
this_Àngth
)>>32);

95 
this
->
ba£_addr_low
 = 
¥ev
->base_addr_low;

96 
this
->
ba£_addr_high
 = 
¥ev
->base_addr_high;

97 
mm≠_li°
[
i
-1] = 
NULL
;

98 } if(
¥ev_addr
 + 
¥ev_Àngth
 > 
this_addr
) {

100 
uöt32_t
 
ty≥
 = 
	`ª°ri˘ive_ty≥
(
¥ev
->ty≥, 
this
->type);

101 
¥ev
->
ty≥
 =Åype;

102 
this
->
ty≥
 =Åype;

106 
i
=0;ò< (
mböfo
->
mm≠_Àngth
 / ((
mem‹y_m≠_t
))); i++) {

107 
mem‹y_m≠_t
* 
mm≠
 = 
mm≠_li°
[
i
];

108 if(
mm≠
) {

109 if(
mm≠
->
ty≥
 =
MB_TYPE_USABLE
 || mm≠->ty≥ =
MB_TYPE_ACPI_RECLM
) {

110 if(
mm≠
->
ba£_addr_low
 < 0x100000 && mm≠->
ba£_addr_high
 == 0)

111 *
ba£mem
 +
	`APPEND_HILO
(
mm≠
->
Àngth_high
, mm≠->
Àngth_low
);

113 *
extmem
 +
	`APPEND_HILO
(
mm≠
->
Àngth_high
, mm≠->
Àngth_low
);

117 
	}
}

120 
	$i386_dëe˘_mem‹y
()

122 
size_t
 
≈ages_extmem
;

123 
size_t
 
ba£mem
 = 0;

124 
size_t
 
extmem
 = 0;

127 
mu…iboŸ_öfo
[];

128 
uöçå_t
* 
mbp
 = (uöçå_t*)
mu…iboŸ_öfo
;

129 
mu…iboŸ_öfo_t
 * 
mböfo
 = (mu…iboŸ_öfo_t*)*
mbp
;

131 if(
mböfo
 && (mböfo->
Êags
 & 
MB_FLAG_MMAP
)) {

132 
	`mu…iboŸ_ªad
(
mböfo
, &
ba£mem
, &
extmem
);

134 
ba£mem
 = (
	`nvøm_ªad
(
NVRAM_BASELO
) * 1024);

135 
extmem
 = (
	`nvøm_ªad
(
NVRAM_EXTLO
) * 1024);

138 
	`as£π
(
ba£mem
);

140 
≈ages_ba£mem
 = 
ba£mem
 / 
PGSIZE
;

141 
≈ages_extmem
 = 
extmem
 / 
PGSIZE
;

143 if(
	`nvøm_ªad
(
NVRAM_EXTLO
) == 0xffff) {

145 
size_t
 
≥xtmem
 = 
	`nvøm_ªad
(
NVRAM_EXTGT16LO
) * (64 * 1024);

146 
≈ages_extmem
 = ((16 * 1024 * 1024Ë+ 
≥xtmem
 - (1 * 1024 * 1024)Ë/ 
PGSIZE
;

151 i‡(
≈ages_extmem
)

152 
≈ages
 = (
EXTPHYSMEM
 / 
PGSIZE
Ë+ 
≈ages_extmem
;

154 
≈ages
 = 
≈ages_ba£mem
;

156 
	`˝rötf
("Physical memory: %uMávailable, base = %uK,Éxtended = %uK,Çpages = %d\n",

157 
≈ages
 * 
PGSIZE
 / (1024 * 1024),

158 
≈ages_ba£mem
 * 
PGSIZE
 / 1024,

159 
≈ages_extmem
 * 
PGSIZE
 / 1024,

160 
≈ages
);

167 
uöt64_t
 
u∑ges_max
 = (
ULIM
 - 
UPAGES
Ë/ (
PageInfo
);

168 
uöt64_t
 
kîn_mem_max
 = (
UVPT
 - 
KERNBASE
Ë/ 
PGSIZE
;

169 
	`˝rötf
("PagesÜimitedÅo %llu by upageáddressÑange (%uMB), PagesÜimitedÅo %llu byÑemappedÖhys mem (%uMB)\n",

170 
u∑ges_max
, ((u∑ges_max * 
PGSIZE
) / (1024 * 1024)),

171 
kîn_mem_max
, kîn_mem_max * 
PGSIZE
 / (1024 * 1024));

172 
uöt64_t
 
max_≈ages
 = 
u∑ges_max
 < 
kîn_mem_max
 ? upages_max : kern_mem_max;

174 if(
≈ages
 > 
max_≈ages
) {

175 
≈ages
 = 
max_≈ages
 - 1024;

176 
	`˝rötf
("Usög o∆y %uK o‡thêavaûabÀ mem‹y.\n", 
max_≈ages
);

178 
	}
}

186 
mem_öô_mp
();

188 
boŸ_m≠_ªgi⁄
(
pml4e_t
 *
pml4e
, 
uöçå_t
 
va
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
);

189 
check_∑ge_‰ì_li°
(
boﬁ
 
⁄ly_low_mem‹y
);

190 
check_∑ge_Æloc
();

191 
check_boŸ_pml4e
(
pml4e_t
 *
pml4e
);

192 
phyßddr_t
 
check_va2∑
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
);

193 
∑ge_check
();

194 
∑ge_öôµ
(
PageInfo
 *
µ
);

208 
	$boŸ_Æloc
(
uöt32_t
 
n
)

210 *
√xt‰ì
;

211 *
ªsu…
;

218 i‡(!
√xt‰ì
) {

220 #ifde‡
VMM_GUEST


221 
íd
[];

222 
√xt‰ì
 = 
	`ROUNDUP
((*Ë
íd
, 
PGSIZE
);

224 
uöçå_t
 
íd_debug
;

225 
√xt‰ì
 = 
	`ROUNDUP
((*Ë
íd_debug
, 
PGSIZE
);

237 i‡((
uöçå_t
)
√xt‰ì
 + 
n
 < (uintptr_t)nextfree

238 || 
√xt‰ì
 + 
n
 > (*Ë(
≈ages
 * 
PGSIZE
 + 
KERNBASE
))

239 
	`∑nic
("out of memory during x64_vm_init");

240 
ªsu…
 = 
√xt‰ì
;

241 
√xt‰ì
 = 
	`ROUNDUP
“ext‰ì + 
n
, 
PGSIZE
);

242  
ªsu…
;

244 
	}
}

256 
	$x64_vm_öô
()

258 
pml4e_t
* 
pml4e
;

259 
uöt32_t
 
¸0
;

260 
uöt64_t
 
n
;

261 
r
;

262 
Env
 *
ív
;

263 
	`i386_dëe˘_mem‹y
();

268 
pml4e
 = 
	`boŸ_Æloc
(
PGSIZE
);

269 
	`mem£t
(
pml4e
, 0, 
PGSIZE
);

270 
boŸ_pml4e
 = 
pml4e
;

271 
boŸ_¸3
 = 
	`PADDR
(
pml4e
);

280 
n
 = 
≈ages
 * (
PageInfo
);

281 
∑ges
 = (
PageInfo
 *Ë
	`boŸ_Æloc
(
n
);

282 
	`mem£t
(
∑ges
, 0, 
n
);

290 
ívs
 = 
	`boŸ_Æloc
((
Env
)*
NENV
);

291 
	`mem£t
(
ívs
, 0, (
Env
)*
NENV
);

299 
	`∑ge_öô
();

312 
n
 = 
≈ages
*(
PageInfo
);

313 
	`boŸ_m≠_ªgi⁄
(
boŸ_pml4e
, 
UPAGES
, 
n
, 
	`PADDR
(
∑ges
), 
PTE_U
);

325 
n
 = 
	`ROUNDUP
(
NENV
*(
Env
), 
PGSIZE
);

326 
	`boŸ_m≠_ªgi⁄
(
boŸ_pml4e
, 
UENVS
, 
n
, 
	`PADDR
(
ívs
), 
PTE_U
|
PTE_P
);

342 
	`boŸ_m≠_ªgi⁄
(
boŸ_pml4e
, 
KSTACKTOP
-
KSTKSIZE
, KSTKSIZE, 
	`PADDR
(
boŸ°ack
), 
PTE_W
|
PTE_P
);

354 
	`boŸ_m≠_ªgi⁄
(
boŸ_pml4e
, 
KERNBASE
, 
≈ages
*
PGSIZE
, 0, 
PTE_W
|
PTE_P
);

359 
	`mem_öô_mp
();

365 
pd≥_t
 *
pd≥
 = 
	`KADDR
(
	`PTE_ADDR
(
pml4e
[1]));

366 
pde_t
 *
pgdú
 = 
	`KADDR
(
	`PTE_ADDR
(
pd≥
[0]));

367 
	`l¸3
(
boŸ_¸3
);

368 
	}
}

376 
	$mem_öô_mp
()

396 
i
;

397 
uöçå_t
 
k°ackt›
;

398 
i
 = 0; i < 
NCPU
; i++) {

399 
k°ackt›
 = 
KSTACKTOP
 - (
KSTKSIZE
 + 
KSTKGAP
Ë* 
i
;

400 
	`boŸ_m≠_ªgi⁄
(
boŸ_pml4e
, 
k°ackt›
 - 
KSTKSIZE
, KSTKSIZE,

401 
	`PADDR
(
≥r˝u_k°acks
[
i
]), 
PTE_P
|
PTE_W
);

404 
	}
}

420 
	$∑ge_öô
()

428 *
√xt‰ì
 = 
	`boŸ_Æloc
(0);

429 
size_t
 
i
;

430 
öu£
;

431 
PageInfo
* 
œ°
 = 
NULL
;

432 
i
 = 0; i < 
≈ages
; i++) {

434 
öu£
 = 1;

437 i‡(
i
 !0 && i < 
≈ages_ba£mem
)

438 
öu£
 = 0;

441 i‡(
i
 =
MPENTRY_PADDR
 / 
PGSIZE
)

442 
öu£
 = 1;

447 i‡(
i
 >
	`PADDR
(
√xt‰ì
Ë/ 
PGSIZE
)

448 
öu£
 = 0;

450 
uöt64_t
 
va
 = 
KERNBASE
 + 
i
*
PGSIZE
;

451 i‡(
va
>=
BOOT_PAGE_TABLE_START
 && va<
BOOT_PAGE_TABLE_END
)

452 
öu£
 = 1;

454 
∑ges
[
i
].
µ_ªf
 = 
öu£
;

455 
∑ges
[
i
].
µ_lök
 = 
NULL
;

456 i‡(!
öu£
) {

457 i‡(
œ°
)

458 
œ°
->
µ_lök
 = &
∑ges
[
i
];

460 
∑ge_‰ì_li°
 = &
∑ges
[
i
];

461 
œ°
 = &
∑ges
[
i
];

467 
	}
}

481 
PageInfo
 *

482 
	$∑ge_Æloc
(
Æloc_Êags
)

486 
PageInfo
 *
µ
 = 
∑ge_‰ì_li°
;

487 i‡(
µ
) {

489 
∑ge_‰ì_li°
 =Öage_‰ì_li°->
µ_lök
;

490 
µ
->
µ_lök
 = 
NULL
;

491 i‡(
Æloc_Êags
 & 
ALLOC_ZERO
)

492 
	`mem£t
(
	`∑ge2kva
(
µ
), 0, 
PGSIZE
);

494  
µ
;

496 
	}
}

504 
	$∑ge_öôµ
(
PageInfo
 *
µ
)

506 
	`mem£t
(
µ
, 0, (*pp));

507 
	}
}

513 
	$∑ge_‰ì
(
PageInfo
 *
µ
)

516 i‡(
µ
->
µ_ªf
 ||Öp->
µ_lök
) {

517 
	`w¨n
("page_free:áttemptÅo free mappedÖage");

520 
µ
->
µ_lök
 = 
∑ge_‰ì_li°
;

521 
∑ge_‰ì_li°
 = 
µ
;

522 
µ
->
µ_ªf
 = 0;

524 
	}
}

531 
	$∑ge_de¸ef
(
PageInfo
* 
µ
)

533 i‡(--
µ
->
µ_ªf
 == 0)

534 
	`∑ge_‰ì
(
µ
);

535 
	}
}

562 
±e_t
 *

563 
	$pml4e_wÆk
(
pml4e_t
 *
pml4e
, c⁄° *
va
, 
¸óã
)

566 i‡(
pml4e
) {

567 
pd≥_t
 *
pd≥
 = (pd≥_à*)
pml4e
 [
	`PML4
(
va
)];

568 i‡(!((
phyßddr_t
)
pd≥
 & 
PTE_P
Ë&& 
¸óã
) {

569 
PageInfo
 *
∑ge
 = 
NULL
;

570 i‡((
∑ge
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
))) {

571 
∑ge
->
µ_ªf
 += 1;

572 
pml4e
 [
	`PML4
(
va
)] = 
	`∑ge2∑
(
∑ge
)|
PTE_U
|
PTE_W
|
PTE_P
;

573 
±e_t
 *
±e

	`pd≥_wÆk
(
	`KADDR
((
uöçå_t
)((
pd≥_t
 *)(
	`PTE_ADDR
(
pml4e
 [
	`PML4
(
va
)])))),va,
¸óã
);

574 i‡(
±e
!=
NULL
) Öte;

576 
pml4e
[
	`PML4
(
va
)] = 0;

577 
	`∑ge_de¸ef
(
∑ge
);

578  
NULL
;

581  
NULL
;

582 } i‡((
uöt64_t
)
pd≥
 & 
PTE_P
) {

583  
	`pd≥_wÆk
(
	`KADDR
((
uöçå_t
)((
pd≥_t
 *)
	`PTE_ADDR
(
pd≥
))),
va
,
¸óã
);

586  
NULL
;

588 
	}
}

595 
±e_t
 *

596 
	$pd≥_wÆk
(
pd≥_t
 *
pd≥
,c⁄° *
va
,
¸óã
){

599 i‡(
pd≥
){

600 
pde_t
 * 
pdp
 = (pde_à*)
pd≥
[
	`PDPE
(
va
)];

601 if(!((
phyßddr_t
)
pdp
 & 
PTE_P
Ë&& 
¸óã
){

602 
PageInfo
 *
∑ge
 = 
NULL
;

603 i‡((
∑ge
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
))) {

604 
∑ge
->
µ_ªf
 += 1;

605 
pd≥
 [
	`PDPE
(
va
)] = 
	`∑ge2∑
(
∑ge
)|
PTE_U
|
PTE_W
|
PTE_P
;

606 
±e_t
 *
±e
 = 
	`pgdú_wÆk
(
	`KADDR
((
uöçå_t
)((
pde_t
 *)
	`PTE_ADDR
(
pd≥
[
	`PDPE
(
va
)]))),va,
¸óã
);

607 i‡(
±e
!=
NULL
) Öte;

609 
pd≥
[
	`PDPE
(
va
)] = 0;

610 
	`∑ge_de¸ef
(
∑ge
);

611  
NULL
;

614  
NULL
;

615 }if((
uöt64_t
)
pdp
 & 
PTE_P
){

616  
	`pgdú_wÆk
(
	`KADDR
((
uöçå_t
)((
pde_t
 *)
	`PTE_ADDR
(
pdp
))),
va
,
¸óã
);

619  
NULL
;

621 
	}
}

630 
±e_t
 *

631 
	$pgdú_wÆk
(
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
)

634 i‡(
pgdú
) {

635 
±e_t
 *
±e
 = (±e_à*)
pgdú
 [
	`PDX
(
va
)];

636 i‡(!((
phyßddr_t
)
±e
 & 
PTE_P
Ë&& 
¸óã
) {

637 
PageInfo
 *
∑ge
 = 
NULL
;

638 i‡((
∑ge
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
))) {

639 
∑ge
->
µ_ªf
 += 1;

640 
pgdú
 [
	`PDX
(
va
)] = 
	`∑ge2∑
(
∑ge
)|
PTE_U
|
PTE_W
|
PTE_P
;

641  
	`KADDR
((
uöçå_t
)((
±e_t
 *)(
	`PTE_ADDR
(
pgdú
 [
	`PDX
(
va
)])Ë+ 
	`PTX
(va)));

643  
NULL
;

645 } i‡((
uöt64_t
)
±e
 & 
PTE_P
) {

646  
	`KADDR
((
uöçå_t
)((
±e_t
 *)
	`PTE_ADDR
(
±e
Ë+ 
	`PTX
(
va
)));

649  
NULL
;

651 
	}
}

664 
	$boŸ_m≠_ªgi⁄
(
pml4e_t
 *
pml4e
, 
uöçå_t
 
œ
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
)

667 
uöt64_t
 
i
,
j
;

668 
pd≥_t
 *
pd≥
;

669 
pde_t
 *
pde
;

671 
i
 = 0; i < 
size
; i+=
PGSIZE
) {

672 
±e_t
 *
±e
 = 
	`pml4e_wÆk
(
pml4e
, (*)(
œ
 + 
i
), 1);

673 
phyßddr_t
 
addr
 = 
∑
 + 
i
;

674 i‡(
±e
 !
NULL
) {

675 *
±e
 = 
	`PTE_ADDR
(
addr
)|
≥rm
|
PTE_P
;

677 
pml4e
 [
	`PML4
(
œ
+
i
)] =Öml4ê[PML4÷a+i)]|
≥rm
|
PTE_P
;

678 
pd≥
 = (
pd≥_t
 *)
	`KADDR
(
	`PTE_ADDR
(
pml4e
[
	`PML4
(
œ
 + 
i
)]));

679 
pd≥
[
	`PDPE
(
œ
+
i
)] =Öd≥[PDPE÷a+i)]|
≥rm
|
PTE_P
;

680 
pde
 = (
pde_t
 *Ë
	`KADDR
(
	`PTE_ADDR
(
pd≥
[
	`PDPE
(
œ
+
i
)]));

681 
pde
[
	`PDX
(
œ
+
i
)] =Öde[PDX÷a+i)]|
≥rm
|
PTE_P
;

684 
	}
}

712 
	$∑ge_ö£π
(
pml4e_t
 *
pml4e
, 
PageInfo
 *
µ
, *
va
, 
≥rm
)

715 
pd≥_t
 *
pd≥
;

716 
pde_t
 *
pde
;

717 i‡(
pml4e
 && 
µ
) {

718 
±e_t
 *
±e
 = 
	`pml4e_wÆk
(
pml4e
, 
va
, 1);

719 i‡(
±e
 !
NULL
) {

720 
pml4e
 [
	`PML4
(
va
)] =Öml4ê[PML4(va)]|(
≥rm
&(~
PTE_AVAIL
));

721 
pd≥
 = (
pd≥_t
 *)
	`KADDR
(
	`PTE_ADDR
(
pml4e
[
	`PML4
(
va
)]));

722 
pd≥
[
	`PDPE
(
va
)] =Öd≥[PDPE(va)]|(
≥rm
&(~
PTE_AVAIL
));

723 
pde
 = (
pde_t
 *)
	`KADDR
(
	`PTE_ADDR
(
pd≥
[
	`PDPE
(
va
)]));

724 
pde
[
	`PDX
(
va
)] =Öde[PDX(va)]|(
≥rm
&(~
PTE_AVAIL
));

725 i‡((*
±e
 & 
PTE_P
Ë&& (
	`∑ge2∑
(
µ
Ë=
	`PTE_ADDR
(*pte))) {

726 *
±e
 = 
	`PTE_ADDR
(*±e)|
≥rm
|
PTE_P
;

727 
	`éb_övÆid©e
(
pml4e
, 
va
);

729 } i‡(*
±e
 & 
PTE_P
) {

730 
	`∑ge_ªmove
(
pml4e
, 
va
);

732 
µ
->
µ_ªf
 += 1;

733 *
±e
 = 
	`∑ge2∑
(
µ
)|
≥rm
|
PTE_P
;

734 
	`éb_övÆid©e
(
pml4e
, 
va
);

737  -
E_NO_MEM
;

739  -
E_NO_MEM
;

741 
	}
}

754 
PageInfo
 *

755 
	$∑ge_lookup
(
pml4e_t
 *
pml4e
, *
va
, 
±e_t
 **
±e_°‹e
)

758 i‡(
pml4e
 !
NULL
) {

759 
±e_t
 *
±e
 = 
	`pml4e_wÆk
(
pml4e
, 
va
, 0);

760 i‡(
±e
 !
NULL
 && (*±ê& 
PTE_P
)) {

761 i‡(
±e_°‹e
)

762 *
±e_°‹e
 = 
±e
;

763  
	`∑2∑ge
(
	`PTE_ADDR
(*
±e
));

766  
NULL
;

768 
	}
}

786 
	$∑ge_ªmove
(
pml4e_t
 *
pml4e
, *
va
)

789 
±e_t
 *
±e
;

790 
PageInfo
 *
∑ge
 = 
	`∑ge_lookup
(
pml4e
, 
va
, &
±e
);

791 i‡(
∑ge
 !
NULL
) {

792 
	`éb_övÆid©e
(
pml4e
, 
va
);

793 
	`∑ge_de¸ef
(
∑ge
);

794 *
±e
 = 0;

797 
	}
}

804 
	$éb_övÆid©e
(
pml4e_t
 *
pml4e
, *
va
)

808 
	`as£π
(
pml4e
!=
NULL
);

809 i‡(!
cuªnv
 || cuªnv->
ív_pml4e
 =
pml4e
)

810 
	`övÕg
(
va
);

812 
	}
}

821 
	$mmio_m≠_ªgi⁄
(
phyßddr_t
 
∑
, 
size_t
 
size
)

827 
uöçå_t
 
ba£
 = 
MMIOBASE
;

848 
uöçå_t
 
va
 = 
ba£
;

849 
size
 = 
	`ROUNDUP
(size, 
PGSIZE
);

851 
ba£
 +
size
;

852 i‡(
ba£
 >
MMIOLIM
)

853 
	`∑nic
("MMIO mappingsÉxceeded MMIOLIM");

854 
	`boŸ_m≠_ªgi⁄
(
boŸ_pml4e
, 
va
, 
size
, 
∑
, 
PTE_P
|
PTE_W
|
PTE_PWT
|
PTE_PCD
);

855  (*Ë
va
;

857 
	}
}

860 
uöçå_t
 
	gu£r_mem_check_addr
;

881 
	$u£r_mem_check
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
)

884 c⁄° *
ídva
 = (c⁄° *Ë((
uöçå_t
Ë
va
 + 
Àn
);

885 
±e_t
 *
±ï
;

886 i‡((
uöçå_t
Ë
ídva
 >
ULIM
 || 
va
 >Éndva) {

887 
u£r_mem_check_addr
 = (
uöçå_t
Ë
va
;

888  -
E_FAULT
;

890 
va
<
ídva
){

891 
±ï
 = 
	`pml4e_wÆk
(
ív
->
ív_pml4e
,
va
,0);

892 i‡(!
±ï
 || (*±ï & (
≥rm
 | 
PTE_P
)) != (perm | PTE_P)) {

893 
u£r_mem_check_addr
 = (
uöçå_t
Ë
va
;

894  -
E_FAULT
;

896 
va
 = 
	`ROUNDUP
(va+1,
PGSIZE
);

901 
	}
}

911 
	$u£r_mem_as£π
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
)

913 i‡(
	`u£r_mem_check
(
ív
, 
va
, 
Àn
, 
≥rm
 | 
PTE_U
) < 0) {

914 
	`˝rötf
("[%08x] user_mem_checkássertion failure for "

915 "v®%08x\n", 
ív
->
ív_id
, 
u£r_mem_check_addr
);

916 
	`ív_de°roy
(
ív
);

918 
	}
}

931 
	$check_∑ge_‰ì_li°
(
boﬁ
 
⁄ly_low_mem‹y
)

933 
PageInfo
 *
µ
;

934 
pdx_limô
 = 
⁄ly_low_mem‹y
 ? 1 : 
NPDENTRIES
;

935 
uöt64_t
 
n‰ì_ba£mem
 = 0, 
n‰ì_extmem
 = 0;

936 *
fú°_‰ì_∑ge
;

938 i‡(!
∑ge_‰ì_li°
)

939 
	`∑nic
("'page_free_list' isáÇullÖointer!");

941 i‡(
⁄ly_low_mem‹y
) {

944 
PageInfo
 *
µ1
, *
µ2
;

945 
PageInfo
 **
ç
[2] = { &
µ1
, &
µ2
 };

946 
µ
 = 
∑ge_‰ì_li°
;Öp;Ö∞µ->
µ_lök
) {

947 
∑gëy≥
 = 
	`PDX
(
	`∑ge2∑
(
µ
)Ë>
pdx_limô
;

948 *
ç
[
∑gëy≥
] = 
µ
;

949 
ç
[
∑gëy≥
] = &
µ
->
µ_lök
;

951 *
ç
[1] = 0;

952 *
ç
[0] = 
µ2
;

953 
∑ge_‰ì_li°
 = 
µ1
;

958 
µ
 = 
∑ge_‰ì_li°
;Öp;Ö∞µ->
µ_lök
)

959 i‡(
	`PDX
(
	`∑ge2∑
(
µ
)Ë< 
pdx_limô
)

960 
	`mem£t
(
	`∑ge2kva
(
µ
), 0x97, 128);

962 
fú°_‰ì_∑ge
 = 
	`boŸ_Æloc
(0);

963 
µ
 = 
∑ge_‰ì_li°
;Öp;Ö∞µ->
µ_lök
) {

965 
	`as£π
(
µ
 >
∑ges
);

966 
	`as£π
(
µ
 < 
∑ges
 + 
≈ages
);

967 
	`as£π
(((*Ë
µ
 - (*Ë
∑ges
) % (*pp) == 0);

970 
	`as£π
(
	`∑ge2∑
(
µ
) != 0);

971 
	`as£π
(
	`∑ge2∑
(
µ
Ë!
IOPHYSMEM
);

972 
	`as£π
(
	`∑ge2∑
(
µ
Ë!
EXTPHYSMEM
 - 
PGSIZE
);

973 
	`as£π
(
	`∑ge2∑
(
µ
Ë!
EXTPHYSMEM
);

974 
	`as£π
(
	`∑ge2∑
(
µ
Ë< 
EXTPHYSMEM
 || 
	`∑ge2kva
’pË>
fú°_‰ì_∑ge
);

977 
	`as£π
(
	`∑ge2∑
(
µ
Ë!
MPENTRY_PADDR
);

980 i‡(
	`∑ge2∑
(
µ
Ë< 
EXTPHYSMEM
)

981 ++
n‰ì_ba£mem
;

983 ++
n‰ì_extmem
;

986 
	`as£π
(
n‰ì_extmem
 > 0);

987 
	}
}

995 
	$check_∑ge_Æloc
()

997 
PageInfo
 *
µ
, *
µ0
, *
µ1
, *
µ2
;

998 
n‰ì
;

999 
PageInfo
 *
Ê
;

1000 *
c
;

1001 
i
;

1006 
µ0
 = 
∑ge_‰ì_li°
, 
n‰ì
 = 0;Öp0;Öp0 =Öp0->
µ_lök
) {

1007 
	`mem£t
(
	`∑ge2kva
(
µ0
), 0x97, 
PGSIZE
);

1010 
µ0
 = 
∑ge_‰ì_li°
, 
n‰ì
 = 0;Öp0;Öp0 =Öp0->
µ_lök
) {

1012 
	`as£π
(
µ0
 >
∑ges
);

1013 
	`as£π
(
µ0
 < 
∑ges
 + 
≈ages
);

1016 
	`as£π
(
	`∑ge2∑
(
µ0
) != 0);

1017 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
IOPHYSMEM
);

1018 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
EXTPHYSMEM
 - 
PGSIZE
);

1019 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
EXTPHYSMEM
);

1022 
µ0
 = 
µ1
 = 
µ2
 = 0;

1023 
	`as£π
((
µ0
 = 
	`∑ge_Æloc
(0)));

1024 
	`as£π
((
µ1
 = 
	`∑ge_Æloc
(0)));

1025 
	`as£π
((
µ2
 = 
	`∑ge_Æloc
(0)));

1026 
	`as£π
(
µ0
);

1027 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

1028 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

1029 
	`as£π
(
	`∑ge2∑
(
µ0
Ë< 
≈ages
*
PGSIZE
);

1030 
	`as£π
(
	`∑ge2∑
(
µ1
Ë< 
≈ages
*
PGSIZE
);

1031 
	`as£π
(
	`∑ge2∑
(
µ2
Ë< 
≈ages
*
PGSIZE
);

1034 
Ê
 = 
∑ge_‰ì_li°
;

1035 
∑ge_‰ì_li°
 = 0;

1038 
	`as£π
(!
	`∑ge_Æloc
(0));

1041 
	`∑ge_‰ì
(
µ0
);

1042 
	`∑ge_‰ì
(
µ1
);

1043 
	`∑ge_‰ì
(
µ2
);

1044 
µ0
 = 
µ1
 = 
µ2
 = 0;

1045 
	`as£π
((
µ0
 = 
	`∑ge_Æloc
(0)));

1046 
	`as£π
((
µ1
 = 
	`∑ge_Æloc
(0)));

1047 
	`as£π
((
µ2
 = 
	`∑ge_Æloc
(0)));

1048 
	`as£π
(
µ0
);

1049 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

1050 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

1051 
	`as£π
(!
	`∑ge_Æloc
(0));

1054 
	`mem£t
(
	`∑ge2kva
(
µ0
), 1, 
PGSIZE
);

1055 
	`∑ge_‰ì
(
µ0
);

1056 
	`as£π
((
µ
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
)));

1057 
	`as£π
(
µ
 && 
µ0
 ==Öp);

1058 
c
 = 
	`∑ge2kva
(
µ
);

1059 
i
 = 0; i < 
PGSIZE
; i++)

1060 
	`as£π
(
c
[
i
] == 0);

1063 
∑ge_‰ì_li°
 = 
Ê
;

1066 
	`∑ge_‰ì
(
µ0
);

1067 
	`∑ge_‰ì
(
µ1
);

1068 
	`∑ge_‰ì
(
µ2
);

1070 
	`˝rötf
("check_page_alloc() succeeded!\n");

1071 
	}
}

1082 
	$check_boŸ_pml4e
(
pml4e_t
 *
pml4e
)

1084 
uöt64_t
 
i
, 
n
;

1086 
pml4e
 = 
boŸ_pml4e
;

1089 
n
 = 
	`ROUNDUP
(
≈ages
*(
PageInfo
), 
PGSIZE
);

1090 
i
 = 0; i < 
n
; i +
PGSIZE
) {

1092 
	`as£π
(
	`check_va2∑
(
pml4e
, 
UPAGES
 + 
i
Ë=
	`PADDR
(
∑ges
) + i);

1097 
n
 = 
	`ROUNDUP
(
NENV
*(
Env
), 
PGSIZE
);

1098 
i
 = 0; i < 
n
; i +
PGSIZE
)

1099 
	`as£π
(
	`check_va2∑
(
pml4e
, 
UENVS
 + 
i
Ë=
	`PADDR
(
ívs
) + i);

1103 
i
 = 0; i < 
≈ages
 * 
PGSIZE
; i += PGSIZE)

1104 
	`as£π
(
	`check_va2∑
(
pml4e
, 
KERNBASE
 + 
i
) == i);

1109 
n
 = 0;Ç < 
NCPU
;Ç++) {

1110 
uöt64_t
 
ba£
 = 
KSTACKTOP
 - (
KSTKSIZE
 + 
KSTKGAP
Ë* (
n
 + 1);

1111 
i
 = 0; i < 
KSTKSIZE
; i +
PGSIZE
)

1112 
	`as£π
(
	`check_va2∑
(
pml4e
, 
ba£
 + 
KSTKGAP
 + 
i
)

1113 =
	`PADDR
(
≥r˝u_k°acks
[
n
]Ë+ 
i
);

1114 
i
 = 0; i < 
KSTKGAP
; i +
PGSIZE
)

1115 
	`as£π
(
	`check_va2∑
(
pml4e
, 
ba£
 + 
i
) == ~0);

1119 
pd≥_t
 *
pd≥
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pml4e
[1]));

1120 
pde_t
 *
pgdú
 = 
	`KADDR
(
	`PTE_ADDR
(
pd≥
[0]));

1122 
i
 = 0; i < 
NPDENTRIES
; i++) {

1123 
i
) {

1125 
	`PDX
(
KSTACKTOP
 - 1):

1126 
	`PDX
(
UPAGES
):

1128 
	`PDX
(
UENVS
):

1130 
	`as£π
(
pgdú
[
i
] & 
PTE_P
);

1133 i‡(
i
 >
	`PDX
(
KERNBASE
)) {

1134 i‡(
pgdú
[
i
] & 
PTE_P
)

1135 
	`as£π
(
pgdú
[
i
] & 
PTE_W
);

1137 
	`as£π
(
pgdú
[
i
] == 0);

1142 
	`˝rötf
("check_boot_pml4e() succeeded!\n");

1143 
	}
}

1150 
phyßddr_t


1151 
	$check_va2∑
(
pml4e_t
 *
pml4e
, 
uöçå_t
 
va
)

1153 
±e_t
 *
±e
;

1154 
pd≥_t
 *
pd≥
;

1155 
pde_t
 *
pde
;

1157 
pml4e
 = &pml4e[
	`PML4
(
va
)];

1159 if(!(*
pml4e
 & 
PTE_P
))

1161 
pd≥
 = (
pd≥_t
 *Ë
	`KADDR
(
	`PTE_ADDR
(*
pml4e
));

1163 i‡(!(
pd≥
[
	`PDPE
(
va
)] & 
PTE_P
))

1165 
pde
 = (
pde_t
 *Ë
	`KADDR
(
	`PTE_ADDR
(
pd≥
[
	`PDPE
(
va
)]));

1167 
pde
 = &pde[
	`PDX
(
va
)];

1168 i‡(!(*
pde
 & 
PTE_P
))

1170 
±e
 = (
±e_t
*Ë
	`KADDR
(
	`PTE_ADDR
(*
pde
));

1172 i‡(!(
±e
[
	`PTX
(
va
)] & 
PTE_P
))

1175  
	`PTE_ADDR
(
±e
[
	`PTX
(
va
)]);

1176 
	}
}

1181 
	$∑ge_check
()

1183 
PageInfo
 *
µ0
, *
µ1
, *
µ2
,*
µ3
,*
µ4
,*
µ5
;

1184 
PageInfo
 * 
Ê
;

1185 
±e_t
 *
±ï
, *
±ï1
;

1186 
pd≥_t
 *
pd≥
;

1187 
pde_t
 *
pde
;

1188 *
va
;

1189 
i
;

1191 
uöçå_t
 
mm1
, 
mm2
;

1193 
µ0
 = 
µ1
 = 
µ2
 = 
µ3
 = 
µ4
 = 
µ5
 =0;

1194 
	`as£π
(
µ0
 = 
	`∑ge_Æloc
(0));

1195 
	`as£π
(
µ1
 = 
	`∑ge_Æloc
(0));

1196 
	`as£π
(
µ2
 = 
	`∑ge_Æloc
(0));

1197 
	`as£π
(
µ3
 = 
	`∑ge_Æloc
(0));

1198 
	`as£π
(
µ4
 = 
	`∑ge_Æloc
(0));

1199 
	`as£π
(
µ5
 = 
	`∑ge_Æloc
(0));

1201 
	`as£π
(
µ0
);

1202 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

1203 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

1204 
	`as£π
(
µ3
 &&Öp3 !
µ2
 &&Öp3 !
µ1
 &&Öp3 !
µ0
);

1205 
	`as£π
(
µ4
 &&Öp4 !
µ3
 &&Öp4 !
µ2
 &&Öp4 !
µ1
 &&Öp4 !
µ0
);

1206 
	`as£π
(
µ5
 &&Öp5 !
µ4
 &&Öp5 !
µ3
 &&Öp5 !
µ2
 &&Öp5 !
µ1
 &&Öp5 !
µ0
);

1209 
Ê
 = 
∑ge_‰ì_li°
;

1210 
∑ge_‰ì_li°
 = 
NULL
;

1213 
	`as£π
(!
	`∑ge_Æloc
(0));

1216 
	`as£π
(
	`∑ge_lookup
(
boŸ_pml4e
, (*Ë0x0, &
±ï
Ë=
NULL
);

1219 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ1
, 0x0, 0) < 0);

1222 
	`∑ge_‰ì
(
µ0
);

1223 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ1
, 0x0, 0) < 0);

1224 
	`∑ge_‰ì
(
µ2
);

1225 
	`∑ge_‰ì
(
µ3
);

1229 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ1
, 0x0, 0) == 0);

1230 
	`as£π
((
	`PTE_ADDR
(
boŸ_pml4e
[0]Ë=
	`∑ge2∑
(
µ0
Ë|| PTE_ADDR(boŸ_pml4e[0]Ë=∑ge2∑(
µ2
Ë|| PTE_ADDR(boŸ_pml4e[0]Ë=∑ge2∑(
µ3
) ));

1231 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 0x0Ë=
	`∑ge2∑
(
µ1
));

1232 
	`as£π
(
µ1
->
µ_ªf
 == 1);

1233 
	`as£π
(
µ0
->
µ_ªf
 == 1);

1234 
	`as£π
(
µ2
->
µ_ªf
 == 1);

1236 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ3
, (*Ë
PGSIZE
, 0) == 0);

1237 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ3
));

1238 
	`as£π
(
µ3
->
µ_ªf
 == 2);

1241 
	`as£π
(!
	`∑ge_Æloc
(0));

1244 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ3
, (*Ë
PGSIZE
, 0) == 0);

1245 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ3
));

1246 
	`as£π
(
µ3
->
µ_ªf
 == 2);

1250 
	`as£π
(!
	`∑ge_Æloc
(0));

1252 
pd≥
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pml4e
[
	`PML4
(
PGSIZE
)]));

1253 
pde
 = 
	`KADDR
(
	`PTE_ADDR
(
pd≥
[
	`PDPE
(
PGSIZE
)]));

1254 
±ï
 = 
	`KADDR
(
	`PTE_ADDR
(
pde
[
	`PDX
(
PGSIZE
)]));

1255 
	`as£π
(
	`pml4e_wÆk
(
boŸ_pml4e
, (*)
PGSIZE
, 0Ë=
±ï
+
	`PTX
(PGSIZE));

1258 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ3
, (*Ë
PGSIZE
, 
PTE_U
) == 0);

1259 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ3
));

1260 
	`as£π
(
µ3
->
µ_ªf
 == 2);

1261 
	`as£π
(*
	`pml4e_wÆk
(
boŸ_pml4e
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
);

1262 
	`as£π
(
boŸ_pml4e
[0] & 
PTE_U
);

1266 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ0
, (*Ë
PTSIZE
, 0) < 0);

1269 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ1
, (*Ë
PGSIZE
, 0) == 0);

1270 
	`as£π
(!(*
	`pml4e_wÆk
(
boŸ_pml4e
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
));

1273 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 0Ë=
	`∑ge2∑
(
µ1
));

1274 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

1276 
	`as£π
(
µ1
->
µ_ªf
 == 2);

1277 
	`as£π
(
µ3
->
µ_ªf
 == 1);

1281 
	`∑ge_ªmove
(
boŸ_pml4e
, 0x0);

1282 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 0x0) == ~0);

1283 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

1284 
	`as£π
(
µ1
->
µ_ªf
 == 1);

1285 
	`as£π
(
µ3
->
µ_ªf
 == 1);

1289 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pml4e
, 
µ1
, (*Ë
PGSIZE
, 0) == 0);

1290 
	`as£π
(
µ1
->
µ_ªf
);

1291 
	`as£π
(
µ1
->
µ_lök
 =
NULL
);

1294 
	`∑ge_ªmove
(
boŸ_pml4e
, (*Ë
PGSIZE
);

1295 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 0x0) == ~0);

1296 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
PGSIZE
) == ~0);

1297 
	`as£π
(
µ1
->
µ_ªf
 == 0);

1298 
	`as£π
(
µ3
->
µ_ªf
 == 1);

1304 
	`mem£t
(
	`∑ge2kva
(
µ1
), 1, 
PGSIZE
);

1305 
	`mem£t
(
	`∑ge2kva
(
µ2
), 2, 
PGSIZE
);

1306 
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, 0x0, 0);

1307 
	`as£π
(
µ1
->
µ_ªf
 == 1);

1308 
	`as£π
(*(*)0 == 0x01010101);

1309 
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, 0x0, 0);

1310 
	`as£π
(*(*)0 == 0x02020202);

1311 
	`as£π
(
µ2
->
µ_ªf
 == 1);

1312 
	`as£π
(
µ1
->
µ_ªf
 == 0);

1313 
	`∑ge_ªmove
(
boŸ_pgdú
, 0x0);

1314 
	`as£π
(
µ2
->
µ_ªf
 == 0);

1318 
PageInfo
 *
µ_l1
 = 
	`∑2∑ge
(
	`PTE_ADDR
(
boŸ_pml4e
[0]));

1319 
boŸ_pml4e
[0] = 0;

1320 
	`as£π
(
µ3
->
µ_ªf
 == 1);

1321 
	`∑ge_de¸ef
(
µ_l1
);

1323 i‡(
µ_l1
 !
µ3
Ë
	`∑ge_de¸ef
(pp3);

1324 i‡(
µ_l1
 !
µ2
Ë
	`∑ge_de¸ef
(pp2);

1325 i‡(
µ_l1
 !
µ0
Ë
	`∑ge_de¸ef
(pp0);

1326 
va
 = (*)(
PGSIZE
 * 100);

1327 
±ï
 = 
	`pml4e_wÆk
(
boŸ_pml4e
, 
va
, 1);

1328 
pd≥
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pml4e
[
	`PML4
(
va
)]));

1329 
pde
 = 
	`KADDR
(
	`PTE_ADDR
(
pd≥
[
	`PDPE
(
va
)]));

1330 
±ï1
 = 
	`KADDR
(
	`PTE_ADDR
(
pde
[
	`PDX
(
va
)]));

1331 
	`as£π
(
±ï
 =
±ï1
 + 
	`PTX
(
va
));

1334 
	`mem£t
(
	`∑ge2kva
(
µ4
), 0xFF, 
PGSIZE
);

1335 
	`pml4e_wÆk
(
boŸ_pml4e
, 0x0, 1);

1336 
pd≥
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pml4e
[0]));

1337 
pde
 = 
	`KADDR
(
	`PTE_ADDR
(
pd≥
[0]));

1338 
±ï
 = 
	`KADDR
(
	`PTE_ADDR
(
pde
[0]));

1339 
i
=0; i<
NPTENTRIES
; i++)

1340 
	`as£π
((
±ï
[
i
] & 
PTE_P
) == 0);

1341 
boŸ_pml4e
[0] = 0;

1344 
∑ge_‰ì_li°
 = 
Ê
;

1347 
	`∑ge_de¸ef
(
µ0
);

1348 
	`∑ge_de¸ef
(
µ2
);

1349 
	`∑ge_de¸ef
(
µ3
);

1352 
	`as£π
(
µ0
->
µ_ªf
 == 0);

1353 
	`as£π
(
µ1
->
µ_ªf
 == 0);

1354 
	`as£π
(
µ2
->
µ_ªf
 == 0);

1355 
	`as£π
(
µ3
->
µ_ªf
 == 0);

1356 
	`as£π
(
µ4
->
µ_ªf
 == 0);

1357 
	`as£π
(
µ5
->
µ_ªf
 == 0);

1361 
mm1
 = (
uöçå_t
Ë
	`mmio_m≠_ªgi⁄
(0, 4097);

1362 
mm2
 = (
uöçå_t
Ë
	`mmio_m≠_ªgi⁄
(0, 4096);

1364 
	`as£π
(
mm1
 >
MMIOBASE
 && mm1 + 8096 < 
MMIOLIM
);

1365 
	`as£π
(
mm2
 >
MMIOBASE
 && mm2 + 8096 < 
MMIOLIM
);

1367 
	`as£π
(
mm1
 % 
PGSIZE
 =0 && 
mm2
 % PGSIZE == 0);

1369 
	`as£π
(
mm1
 + 8096 <
mm2
);

1372 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
mm1
) == 0);

1373 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
mm1
+
PGSIZE
) == PGSIZE);

1374 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
mm2
) == 0);

1375 
	`as£π
(
	`check_va2∑
(
boŸ_pml4e
, 
mm2
+
PGSIZE
) == ~0);

1377 
	`as£π
(*
	`pml4e_wÆk
(
boŸ_pml4e
, (*Ë
mm1
, 0Ë& (
PTE_W
|
PTE_PWT
|
PTE_PCD
));

1378 
	`as£π
(!(*
	`pml4e_wÆk
(
boŸ_pml4e
, (*Ë
mm1
, 0Ë& 
PTE_U
));

1380 *
	`pml4e_wÆk
(
boŸ_pml4e
, (*Ë
mm1
, 0) = 0;

1381 *
	`pml4e_wÆk
(
boŸ_pml4e
, (*Ë
mm1
 + 
PGSIZE
, 0) = 0;

1382 *
	`pml4e_wÆk
(
boŸ_pml4e
, (*Ë
mm2
, 0) = 0;

1385 
	`˝rötf
("check_page() succeeded!\n");

1386 
	}
}

	@kern/pmap.h

4 #i‚de‡
JOS_KERN_PMAP_H


5 
	#JOS_KERN_PMAP_H


	)

6 #i‚de‡
JOS_KERNEL


10 
	~<öc/memœyout.h
>

11 
	~<öc/as£π.h
>

13 
	gEnv
;

16 
boŸ°ackt›
[], 
boŸ°ack
[];

18 
PageInfo
 *
∑ges
;

19 
size_t
 
≈ages
;

21 
pml4e_t
 *
boŸ_pml4e
;

29 
	#PADDR
(
kva
) \

31 
phyßddr_t
 
__m_kva
 = (phyßddr_tË(
kva
); \

32 i‡(
__m_kva
 < 
KERNBASE
) \

33 
	`∑nic
("PADDR cÆÀd wôh invÆid kv®%08lx", 
__m_kva
);\

34 
__m_kva
 - 
KERNBASE
; \

35 })

	)

39 
	#KADDR
(
∑
) \

41 
phyßddr_t
 
__m_∑
 = (
∑
); \

42 
uöt32_t
 
__m_µn
 = 
	`PPN
(
__m_∑
);\

43 i‡(
__m_µn
 >
≈ages
) \

44 
	`∑nic
("KADDR cÆÀd wôh invÆidÖ®%08lx", 
__m_∑
);\

45 (*Ë((
uöt64_t
)(
__m_∑
 + 
KERNBASE
)); \

46 })

	)

51 
	mALLOC_ZERO
 = 1<<0,

54 
x64_vm_öô
();

56 
∑ge_öô
();

57 
PageInfo
 * 
∑ge_Æloc
(
Æloc_Êags
);

58 
∑ge_‰ì
(
PageInfo
 *
µ
);

59 
∑ge_ö£π
(
pml4e_t
 *
pml4e
, 
PageInfo
 *
µ
, *
va
, 
≥rm
);

60 
∑ge_ªmove
(
pml4e_t
 *
pml4e
, *
va
);

61 
PageInfo
 *
∑ge_lookup
(
pml4e_t
 *
pml4e
, *
va
, 
±e_t
 **
±e_°‹e
);

62 
∑ge_de¸ef
(
PageInfo
 *
µ
);

64 
éb_övÆid©e
(
pml4e_t
 *
pml4e
, *
va
);

67 * 
mmio_m≠_ªgi⁄
(
phyßddr_t
 
∑
, 
size_t
 
size
);

70 
u£r_mem_check
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
);

71 
u£r_mem_as£π
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
);

74 
ölöe
 
µn_t


75 
	$∑ge2µn
(
PageInfo
 *
µ
)

77  
µ
 - 
∑ges
;

78 
	}
}

80 
ölöe
 
phyßddr_t


81 
	$∑ge2∑
(
PageInfo
 *
µ
)

83  
	`∑ge2µn
(
µ
Ë<< 
PGSHIFT
;

84 
	}
}

86 
ölöe
 
PageInfo
*

87 
	$∑2∑ge
(
phyßddr_t
 
∑
)

89 i‡(
	`PPN
(
∑
Ë>
≈ages
)

90 
	`∑nic
("pa2page called with invalidÖa");

91  &
∑ges
[
	`PPN
(
∑
)];

92 
	}
}

94 
ölöe
 *

95 
	$∑ge2kva
(
PageInfo
 *
µ
)

97  
	`KADDR
(
	`∑ge2∑
(
µ
));

98 
	}
}

100 
±e_t
 *
pgdú_wÆk
(
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
);

102 
±e_t
 *
pml4e_wÆk
(
pml4e_t
 *
pml4e
, c⁄° *
va
, 
¸óã
);

104 
±e_t
 *
pd≥_wÆk
(
pd≥_t
 *
pd≥
,c⁄° *
va
,
¸óã
);

	@kern/printf.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°dio.h
>

7 
	~<öc/°d¨g.h
>

11 
	$putch
(
ch
, *
˙t
)

13 
	`˝utch¨
(
ch
);

14 *
˙t
++;

15 
	}
}

18 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

20 
˙t
 = 0;

21 
va_li°
 
aq
;

22 
	`va_c›y
(
aq
,
≠
);

23 
	`v¥ötfmt
((*)
putch
, &
˙t
, 
fmt
, 
aq
);

24 
	`va_íd
(
aq
);

25  
˙t
;

27 
	}
}

30 
	$˝rötf
(c⁄° *
fmt
, ...)

32 
va_li°
 
≠
;

33 
˙t
;

34 
	`va_°¨t
(
≠
, 
fmt
);

35 
va_li°
 
aq
;

36 
	`va_c›y
(
aq
,
≠
);

37 
˙t
 = 
	`v˝rötf
(
fmt
, 
aq
);

38 
	`va_íd
(
aq
);

40  
˙t
;

41 
	}
}

	@kern/sched.c

2 
	~<öc/as£π.h
>

3 
	~<öc/x86.h
>

4 
	~<kîn/•ölock.h
>

5 
	~<kîn/ív.h
>

6 
	~<kîn/pm≠.h
>

7 
	~<kîn/m⁄ô‹.h
>

9 
sched_hÆt
();

13 #i‚de‡
VMM_GUEST


14 
	~<vmm/vmx.h
>

16 
	$vmx⁄
() {

17 
r
;

18 if(!
this˝u
->
is_vmx_roŸ
) {

19 
r
 = 
	`vmx_öô_vmx⁄
();

20 if(
r
 < 0) {

21 
	`˝rötf
("Eº‹Éxecutög VMXON: %e\n", 
r
);

22  
r
;

24 
	`˝rötf
("VMXON\n");

27 
	}
}

33 
	$sched_yõld
()

35 
Env
 *
idÀ
;

37 
i
, 
j
, 
k
;

40 i‡(
cuªnv
)

41 
i
 = 
cuªnv
-
ívs
;

43 
i
 = 
NENV
-1;

47 
j
 = 1; j <
NENV
; j++) {

48 
k
 = (
j
 + 
i
Ë% 
NENV
;

50 i‡(
ívs
[
k
].
ív_°©us
 =
ENV_RUNNABLE
) {

52 #i‚de‡
VMM_GUEST


53 i‡(
ívs
[
k
].
ív_ty≥
 =
ENV_TYPE_GUEST
) {

54 
r
;

55 i‡(
ívs
[
k
].
ív_vmxöfo
.
v˝unum
 !
	`˝unum
()) {

58 
r
 = 
	`vmx⁄
();

59 i‡(
r
 < 0) {

60 
	`ív_de°roy
(&
ívs
[
k
]);

66 
	`ív_run
(&
ívs
[
k
]);

70 i‡(
cuªnv
 && cuªnv->
ív_°©us
 =
ENV_RUNNING
) {

72 #i‚de‡
VMM_GUEST


73 i‡(
cuªnv
->
ív_ty≥
 =
ENV_TYPE_GUEST
) {

74 i‡(
cuªnv
->
ív_vmxöfo
.
v˝unum
 !
	`˝unum
()) {

77 
r
 = 
	`vmx⁄
();

78 if(
r
<0) {

79 
	`ív_de°roy
(
cuªnv
);

82 
	`ív_run
(
cuªnv
);

85 
	`ív_run
(
cuªnv
);

90 
	`sched_hÆt
();

91 
	}
}

99 
	$sched_hÆt
()

101 
i
;

105 
i
 = 0; i < 
NENV
; i++) {

106 i‡((
ívs
[
i
].
ív_°©us
 =
ENV_RUNNABLE
 ||

107 
ívs
[
i
].
ív_°©us
 =
ENV_RUNNING
 ||

108 
ívs
[
i
].
ív_°©us
 =
ENV_DYING
))

111 i‡(
i
 =
NENV
) {

112 
	`˝rötf
("NoÑunnableÉnvironments inÅhe system!\n");

114 
	`m⁄ô‹
(
NULL
);

118 
cuªnv
 = 
NULL
;

119 
	`l¸3
(
	`PADDR
(
boŸ_pml4e
));

124 
	`xchg
(&
this˝u
->
˝u_°©us
, 
CPU_HALTED
);

127 
	`u∆ock_kî√l
();

130 
asm
 volatile (

137 : : "a" (
this˝u
->
˝u_ts
.
ts_e•0
));

138 
	}
}

	@kern/sched.h

4 #i‚de‡
JOS_KERN_SCHED_H


5 
	#JOS_KERN_SCHED_H


	)

6 #i‚de‡
JOS_KERNEL


11 
	$sched_yõld
(Ë
	`__©åibuã__
((
n‹ëu∫
));

	@kern/spinlock.c

4 
	~<öc/ty≥s.h
>

5 
	~<öc/as£π.h
>

6 
	~<öc/x86.h
>

7 
	~<öc/memœyout.h
>

8 
	~<öc/°rög.h
>

9 
	~<kîn/˝u.h
>

10 
	~<kîn/•ölock.h
>

11 
	~<kîn/kdebug.h
>

14 
•ölock
 
	gkî√l_lock
 = {

15 #ifde‡
DEBUG_SPINLOCK


16 .
«me
 = "kernel_lock"

20 #ifde‡
DEBUG_SPINLOCK


23 
	$gë_ˇŒî_pcs
(
uöt64_t
 
pcs
[])

25 
uöt64_t
 *
rbp
;

26 
i
;

28 
rbp
 = (
uöt64_t
 *)
	`ªad_rbp
();

29 
i
 = 0; i < 10; i++){

30 i‡(
rbp
 =0 ||Ñb∞< (
uöt64_t
 *)
ULIM
)

32 
pcs
[
i
] = 
rbp
[1];

33 
rbp
 = (
uöt64_t
 *)rbp[0];

35 ; 
i
 < 10; i++)

36 
pcs
[
i
] = 0;

37 
	}
}

41 
	$hﬁdög
(
•ölock
 *
lock
)

43  
lock
->
locked
 &&Üock->
˝u
 =
this˝u
;

44 
	}
}

48 
	$__•ö_öôlock
(
•ölock
 *
lk
, *
«me
)

50 
lk
->
locked
 = 0;

51 #ifde‡
DEBUG_SPINLOCK


52 
lk
->
«me
 =Çame;

53 
lk
->
˝u
 = 0;

55 
	}
}

62 
	$•ö_lock
(
•ölock
 *
lk
)

64 #ifde‡
DEBUG_SPINLOCK


65 i‡(
	`hﬁdög
(
lk
))

66 
	`∑nic
("CPU %d c™nŸácquúê%s:áÃódy hﬁdög", 
	`˝unum
(), 
lk
->
«me
);

72 
	`xchg
(&
lk
->
locked
, 1) != 0)

73 
asm
 volatile ("pause");

76 #ifde‡
DEBUG_SPINLOCK


77 
lk
->
˝u
 = 
this˝u
;

78 
	`gë_ˇŒî_pcs
(
lk
->
pcs
);

80 
	}
}

84 
	$•ö_u∆ock
(
•ölock
 *
lk
)

86 #ifde‡
DEBUG_SPINLOCK


87 i‡(!
	`hﬁdög
(
lk
)) {

88 
i
;

89 
uöt32_t
 
pcs
[10];

91 
	`memmove
(
pcs
, 
lk
->pcs, Öcs);

92 i‡(!
lk
->
˝u
)

93 
	`˝rötf
("CPU %d cannotÑelease %s:Çot held byány CPU\nAcquiredát:",

94 
	`˝unum
(), 
lk
->
«me
);

96 
	`˝rötf
("CPU %d cannotÑelease %s: held by CPU %d\nAcquiredát:",

97 
	`˝unum
(), 
lk
->
«me
,Ük->
˝u
->
˝u_id
);

98 
i
 = 0; i < 10 && 
pcs
[i]; i++) {

99 
Rùdebugöfo
 
öfo
;

100 i‡(
	`debugöfo_rù
(
pcs
[
i
], &
öfo
) >= 0)

101 
	`˝rötf
(" %08x %s:%d: %.*s+%x\n", 
pcs
[
i
],

102 
öfo
.
rù_fûe
, info.
rù_löe
,

103 
öfo
.
rù_‚_«mñí
, info.
rù_‚_«me
,

104 
pcs
[
i
] - 
öfo
.
rù_‚_addr
);

106 
	`˝rötf
(" %08x\n", 
pcs
[
i
]);

108 
	`∑nic
("spin_unlock");

111 
lk
->
pcs
[0] = 0;

112 
lk
->
˝u
 = 0;

124 
	`xchg
(&
lk
->
locked
, 0);

125 
	}
}

	@kern/spinlock.h

2 #i‚de‡
JOS_INC_SPINLOCK_H


3 
	#JOS_INC_SPINLOCK_H


	)

5 
	~<öc/ty≥s.h
>

8 
	#DEBUG_SPINLOCK


	)

11 
	s•ölock
 {

12 
	mlocked
;

14 #ifde‡
DEBUG_SPINLOCK


16 *
	m«me
;

17 
CpuInfo
 *
	m˝u
;

18 
uöçå_t
 
	mpcs
[10];

23 
__•ö_öôlock
(
•ölock
 *
lk
, *
«me
);

24 
•ö_lock
(
•ölock
 *
lk
);

25 
•ö_u∆ock
(
•ölock
 *
lk
);

27 
	#•ö_öôlock
(
lock
Ë
	`__•ö_öôlock
÷ock, #lock)

	)

29 
•ölock
 
kî√l_lock
;

31 
ölöe
 

32 
	$lock_kî√l
()

34 
	`•ö_lock
(&
kî√l_lock
);

35 
	}
}

37 
ölöe
 

38 
	$u∆ock_kî√l
()

40 
	`•ö_u∆ock
(&
kî√l_lock
);

46 
asm
 volatile("pause");

47 
	}
}

	@kern/syscall.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/as£π.h
>

3 
	~<öc/îr‹.h
>

8 
	~<öc/x86.h
>

9 
	~<öc/îr‹.h
>

10 
	~<öc/°rög.h
>

11 
	~<öc/as£π.h
>

13 
	~<kîn/ív.h
>

14 
	~<kîn/pm≠.h
>

15 
	~<kîn/å≠.h
>

16 
	~<kîn/sysˇŒ.h
>

17 
	~<kîn/c⁄sﬁe.h
>

19 
	~<kîn/sched.h
>

21 
	~<kîn/time.h
>

23 
	~<kîn/e1000.h
>

25 #i‚de‡
VMM_GUEST


26 
	~<vmm/ït.h
>

27 
	~<vmm/vmx.h
>

35 
	$sys_˝uts
(c⁄° *
s
, 
size_t
 
Àn
)

42 
	`u£r_mem_as£π
(
cuªnv
, 
s
, 
Àn
, 
PTE_U
);

46 
	`˝rötf
("%.*s", 
Àn
, 
s
);

47 
	}
}

52 
	$sys_cgëc
()

54  
	`c⁄s_gëc
();

55 
	}
}

58 
ívid_t


59 
	$sys_gëívid
()

61  
cuªnv
->
ív_id
;

62 
	}
}

70 
	$sys_ív_de°roy
(
ívid_t
 
ívid
)

72 
r
;

73 
Env
 *
e
;

75 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

76  
r
;

78 
	`ív_de°roy
(
e
);

80 
	}
}

85 
	$sys_yõld
()

87 
	`sched_yõld
();

88 
	}
}

94 
ívid_t


95 
	$sys_exof‹k
()

98 
r
;

99 
Env
 *
e
;

101 i‡((
r
 = 
	`ív_Æloc
(&
e
, 
cuªnv
->
ív_id
)) < 0)

102  
r
;

103 
e
->
ív_°©us
 = 
ENV_NOT_RUNNABLE
;

104 
e
->
ív_tf
 = 
cuªnv
->env_tf;

105 
e
->
ív_tf
.
tf_ªgs
.
ªg_øx
 = 0;

106  
e
->
ív_id
;

108 
	}
}

118 
	$sys_ív_£t_°©us
(
ívid_t
 
ívid
, 
°©us
)

121 
Env
 *
e
;

122 
r
;

124 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

125  
r
;

126 i‡(
°©us
 !
ENV_RUNNABLE
 && sètu†!
ENV_NOT_RUNNABLE
)

127  -
E_INVAL
;

128 
e
->
ív_°©us
 = 
°©us
;

131 
	}
}

142 
	$sys_ív_£t_å≠‰ame
(
ívid_t
 
ívid
, 
Tøp‰ame
 *
tf
)

145 
r
;

146 
Env
 *
e
;

147 
Tøp‰ame
 
…f
;

149 
	`u£r_mem_as£π
(
cuªnv
, 
tf
, (
Tøp‰ame
), 
PTE_U
);

150 
…f
 = *
tf
;

151 
…f
.
tf_eÊags
 |
FL_IF
;

152 
…f
.
tf_cs
 |= 3;

154 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

155  
r
;

156 
e
->
ív_tf
 = 
…f
;

159 
	}
}

171 
	$sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ívid
, *
func
)

174 
r
;

175 
Env
 *
e
;

177 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

178  
r
;

179 
e
->
ív_pgÁu…_upˇŒ
 = 
func
;

182 
	}
}

201 
	$sys_∑ge_Æloc
(
ívid_t
 
ívid
, *
va
, 
≥rm
)

204 
r
;

205 
Env
 *
e
;

206 
PageInfo
 *
µ
;

208 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

209  
r
;

210 i‡((~
≥rm
 & (
PTE_U
|
PTE_P
)Ë|| (≥rm & ~
PTE_SYSCALL
))

211  -
E_INVAL
;

212 i‡(
va
 >(*Ë
UTOP
)

213  -
E_INVAL
;

214 i‡(!(
µ
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
)))

215  -
E_NO_MEM
;

216 i‡((
r
 = 
	`∑ge_ö£π
(
e
->
ív_pml4e
, 
µ
, 
va
, 
≥rm
)) < 0) {

217 
	`∑ge_‰ì
(
µ
);

218  
r
;

222 
	}
}

241 
	$sys_∑ge_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,

242 
ívid_t
 
d°ívid
, *
d°va
, 
≥rm
)

245 
r
;

246 
Env
 *
es
, *
ed
;

247 
PageInfo
 *
µ
;

248 
±e_t
 *
µã
;

250 i‡(
§cva
 >(*Ë
UTOP
 || 
d°va
 >= (*) UTOP)

251  -
E_INVAL
;

252 i‡(
§cva
 !
	`ROUNDDOWN
(§cva, 
PGSIZE
Ë|| 
d°va
 != ROUNDDOWN(dstva, PGSIZE))

253  -
E_INVAL
;

255 i‡((
r
 = 
	`ívid2ív
(
§˚nvid
, &
es
, 1)) < 0

256 || (
r
 = 
	`ívid2ív
(
d°ívid
, &
ed
, 1)) < 0)

257  
r
;

258 i‡((~
≥rm
 & (
PTE_U
|
PTE_P
)Ë|| (≥rm & ~
PTE_SYSCALL
))

259  -
E_INVAL
;

260 i‡((
µ
 = 
	`∑ge_lookup
(
es
->
ív_pml4e
, 
§cva
, &
µã
)) == 0)

261  -
E_INVAL
;

262 i‡((
≥rm
 & 
PTE_W
Ë&& !(*
µã
 & PTE_W))

263  -
E_INVAL
;

264 i‡((
r
 = 
	`∑ge_ö£π
(
ed
->
ív_pml4e
, 
µ
, 
d°va
, 
≥rm
)) < 0)

265  
r
;

268 
	}
}

278 
	$sys_∑ge_unm≠
(
ívid_t
 
ívid
, *
va
)

281 
r
;

282 
Env
 *
e
;

284 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

285  
r
;

286 i‡(
va
 >(*Ë
UTOP
 || 
	`PGOFF
(va))

287  -
E_INVAL
;

288 
	`∑ge_ªmove
(
e
->
ív_pml4e
, 
va
);

291 
	}
}

337 
	$sys_ùc_åy_£nd
(
ívid_t
 
ívid
, 
uöt32_t
 
vÆue
, *
§cva
, 
≥rm
)

340 
r
;

341 
Env
 *
e
;

342 
PageInfo
 *
µ
;

343 
±e_t
 *
µã
;

344 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 0)) < 0)

345  
r
;

346 i‡(!
e
->
ív_ùc_ªcvög
) {

348  -
E_IPC_NOT_RECV
;

352 if(
cuªnv
->
ív_ty≥
 =
ENV_TYPE_GUEST
 && 
e
->
ív_ùc_d°va
 < (*Ë
UTOP
) {

355 
	`as£π
(
§cva
 >(*)
KERNBASE
);

356 
µ
 = 
	`∑2∑ge
(
	`PADDR
(
§cva
));

358 
r
 = 
	`∑ge_ö£π
(
e
->
ív_pml4e
, 
µ
,É->
ív_ùc_d°va
, 
≥rm
);

359 i‡(
r
 < 0) {

360 
	`˝rötf
("[%08x]Öage_ö£π %08x faûed i¿sys_ùc_åy_£nd (%e)\n", 
cuªnv
->
ív_id
, 
§cva
, 
r
);

361  
r
;

364 
e
->
ív_ùc_≥rm
 = 
≥rm
;

365 } if(
e
->
ív_ty≥
 =
ENV_TYPE_GUEST
 && 
§cva
 < (*Ë
UTOP
) {

368 
µ
 = 
	`∑ge_lookup
(
cuªnv
->
ív_pml4e
, 
§cva
, &
µã
);

369 if(
µ
 == 0) {

370 
	`˝rötf
("[%08x]Öage_looku∞%08x faûed i¿sys_ùc_åy_£nd\n", 
cuªnv
->
ív_id
, 
§cva
);

371  -
E_INVAL
;

374 i‡((
≥rm
 & 
PTE_W
Ë&& !(*
µã
 &PTE_W)) {

375 
	`˝rötf
("[%08x]áâem±Åÿ£ndÑód-⁄lyÖagêªad-wrôêö sys_ùc_åy_£nd\n", 
cuªnv
->
ív_id
);

376  -
E_INVAL
;

381 #i‚de‡
VMM_GUEST


382 
r
 = 
	`ït_∑ge_ö£π
(
e
->
ív_pml4e
, 
µ
,É->
ív_ùc_d°va
, 
__EPTE_FULL
);

385 } i‡(
§cva
 < (*Ë
UTOP
 && 
e
->
ív_ùc_d°va
 < (*) UTOP) {

387 i‡((~
≥rm
 & (
PTE_U
|
PTE_P
)Ë|| (≥rm & ~
PTE_SYSCALL
)) {

388 
	`˝rötf
("[%08x] badÖîm %x i¿sys_ùc_åy_£nd\n", 
cuªnv
->
ív_id
, 
≥rm
);

389  -
E_INVAL
;

392 
µ
 = 
	`∑ge_lookup
(
cuªnv
->
ív_pml4e
, 
§cva
, &
µã
);

393 i‡(
µ
 == 0) {

394 
	`˝rötf
("[%08x]Öage_looku∞%08x faûed i¿sys_ùc_åy_£nd\n", 
cuªnv
->
ív_id
, 
§cva
);

395  -
E_INVAL
;

398 i‡((
≥rm
 & 
PTE_W
Ë&& !(*
µã
 & PTE_W)) {

399 
	`˝rötf
("[%08x]áâem±Åÿ£ndÑód-⁄lyÖagêªad-wrôêö sys_ùc_åy_£nd\n", 
cuªnv
->
ív_id
);

400  -
E_INVAL
;

403 
r
 = 
	`∑ge_ö£π
(
e
->
ív_pml4e
, 
µ
,É->
ív_ùc_d°va
, 
≥rm
);

404 i‡(
r
 < 0) {

405 
	`˝rötf
("[%08x]Öage_ö£π %08x faûed i¿sys_ùc_åy_£nd (%e)\n", 
cuªnv
->
ív_id
, 
§cva
, 
r
);

406  
r
;

409 
e
->
ív_ùc_≥rm
 = 
≥rm
;

411 
e
->
ív_ùc_≥rm
 = 0;

414 
e
->
ív_ùc_ªcvög
 = 0;

415 
e
->
ív_ùc_‰om
 = 
cuªnv
->
ív_id
;

416 
e
->
ív_ùc_vÆue
 = 
vÆue
;

417 
e
->
ív_tf
.
tf_ªgs
.
ªg_øx
 = 0;

418 
e
->
ív_°©us
 = 
ENV_RUNNABLE
;

420 if(
e
->
ív_ty≥
 =
ENV_TYPE_GUEST
) {

421 
e
->
ív_tf
.
tf_ªgs
.
ªg_rsi
 = 
vÆue
;

426 
	}
}

440 
	$sys_ùc_ªcv
(*
d°va
)

443 i‡(
cuªnv
->
ív_ùc_ªcvög
)

444 
	`∑nic
("alreadyÑecving!");

446 
cuªnv
->
ív_ùc_ªcvög
 = 1;

447 
cuªnv
->
ív_ùc_d°va
 = 
d°va
;

448 
cuªnv
->
ív_°©us
 = 
ENV_NOT_RUNNABLE
;

449 
	`sched_yõld
();

452 
	}
}

458 
	$sys_time_m£c
()

461  (Ë
	`time_m£c
();

463 
	}
}

469 
	$sys_√t_å™smô
(c⁄° *
d©a
, 
size_t
 
Àn
)

471 
	`u£r_mem_as£π
(
cuªnv
, 
d©a
, 
Àn
, 0);

472  
	`e1000_å™smô
(
d©a
, 
Àn
);

473 
	}
}

476 
	$sys_√t_ª˚ive
(*
buf
, 
size_t
 
Àn
)

478 
	`u£r_mem_as£π
(
cuªnv
, 
buf
, 
Àn
, 
PTE_W
);

479  
	`e1000_ª˚ive
(
buf
, 
Àn
);

480 
	}
}

484 #i‚de‡
VMM_GUEST


486 
	$sys_vmx_li°_vms
() {

487 
	`vmx_li°_vms
();

488 
	}
}

490 
boﬁ


491 
	$sys_vmx_£l_ªsume
(
i
) {

492  
	`vmx_£l_ªsume
(
i
);

493 
	}
}

496 
	$sys_vmx_gë_vmdisk_numbî
() {

497  
	`vmx_gë_vmdisk_numbî
();

498 
	}
}

501 
	$sys_vmx_ö¸_vmdisk_numbî
() {

502 
	`vmx_ö¸_vmdisk_numbî
();

503 
	}
}

525 
	$sys_ït_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,

526 
ívid_t
 
gue°
, * 
gue°_∑
, 
≥rm
)

528 
Env
 *
ív
, *
§c_ív
;

529 
PageInfo
* 
µ
;

530 
±e_t
 * 
§cva_±e
;

531 
ªt
 = 0;

533 i‡((
uöt64_t
)
§cva
 >
UTOP
 || (§cv®!
	`ROUNDUP
(§cva, 
PGSIZE
Ë&& srcv®!
	`ROUNDDOWN
(srcva, PGSIZE)) ||

534 (
uöt64_t
)
gue°_∑
 >
UTOP
 || (gue°_∑ !
	`ROUNDUP
(gue°_∑, 
PGSIZE
Ë&& gue°_∑ !
	`ROUNDDOWN
(guest_pa, PGSIZE)))

535  -
E_INVAL
;

537 if((
≥rm
 <= 0) || (perm > 7))

538  -
E_INVAL
;

540 if–
	`ívid2ív
(
gue°
, &
ív
, 1Ë||Énvid2ív(
§˚nvid
, &
§c_ív
, 1) )

541  -
E_BAD_ENV
;

543 i‡((
uöt64_t
)
gue°_∑
 + 
PGSIZE
 > 
ív
->
ív_vmxöfo
.
phys_sz
)

544  -
E_INVAL
;

546 
µ
 = 
	`∑ge_lookup
(
§c_ív
->
ív_pml4e
, (*Ë
§cva
, &
§cva_±e
);

548 if((
≥rm
 & 
__EPTE_WRITE
Ë&& (!(*
§cva_±e
 & 
PTE_W
)))

549  -
E_INVAL
;

551 
§cva
 = 
	`∑ge2kva
(
µ
);

553 
ªt
 = 
	`ït_m≠_hva2g∑
(
ív
->
ív_pml4e
, 
§cva
, 
gue°_∑
, 
≥rm
, 1);

554 if(!
ªt
)

555 
µ
->
µ_ªf
++;

556  
ªt
;

557 
	}
}

559 
ívid_t


560 
	$sys_ív_mkgue°
(
uöt64_t
 
gphysz
, uöt64_à
gRIP
) {

561 
r
;

562 
Env
 *
e
;

565 i‡–!
	`vmx_check_suµ‹t
() ) {

566  -
E_NO_VMX
;

567 } i‡–!
	`vmx_check_ït
() ) {

568  -
E_NO_EPT
;

570 i‡((
r
 = 
	`ív_gue°_Æloc
(&
e
, 
cuªnv
->
ív_id
)) < 0)

571  
r
;

572 
e
->
ív_°©us
 = 
ENV_NOT_RUNNABLE
;

573 
e
->
ív_vmxöfo
.
phys_sz
 = 
gphysz
;

574 
e
->
ív_tf
.
tf_rù
 = 
gRIP
;

575  
e
->
ív_id
;

576 
	}
}

583 
öt64_t


584 
	$sysˇŒ
(
uöt64_t
 
sysˇŒno
, uöt64_à
a1
, uöt64_à
a2
, uöt64_à
a3
, uöt64_à
a4
, uöt64_à
a5
)

588 
sysˇŒno
) {

590 
SYS_˝uts
:

591 
	`sys_˝uts
((c⁄° *Ë
a1
, 
a2
);

593 
SYS_cgëc
:

594  
	`sys_cgëc
();

595 
SYS_gëívid
:

596  
	`sys_gëívid
();

597 
SYS_ív_de°roy
:

598  
	`sys_ív_de°roy
(
a1
);

600 
SYS_∑ge_Æloc
:

601  
	`sys_∑ge_Æloc
(
a1
, (*Ë
a2
, 
a3
);

602 
SYS_∑ge_m≠
:

603  
	`sys_∑ge_m≠
(
a1
, (*Ë
a2
, 
a3
, (*Ë
a4
, 
a5
);

604 
SYS_∑ge_unm≠
:

605  
	`sys_∑ge_unm≠
(
a1
, (*Ë
a2
);

606 
SYS_exof‹k
:

607  
	`sys_exof‹k
();

608 
SYS_ív_£t_°©us
:

609  
	`sys_ív_£t_°©us
(
a1
, 
a2
);

611 
SYS_ív_£t_å≠‰ame
:

612  
	`sys_ív_£t_å≠‰ame
(
a1
, (
Tøp‰ame
*Ë
a2
);

614 
SYS_ív_£t_pgÁu…_upˇŒ
:

615  
	`sys_ív_£t_pgÁu…_upˇŒ
(
a1
, (*Ë
a2
);

616 
SYS_yõld
:

617 
	`sys_yõld
();

619 
SYS_ùc_åy_£nd
:

620  
	`sys_ùc_åy_£nd
(
a1
, 
a2
, (*Ë
a3
, 
a4
);

621 
SYS_ùc_ªcv
:

622 
	`sys_ùc_ªcv
((*Ë
a1
);

625 
SYS_time_m£c
:

626  
	`sys_time_m£c
();

627 
SYS_√t_å™smô
:

628  
	`sys_√t_å™smô
((c⁄° *)
a1
, 
a2
);

629 
SYS_√t_ª˚ive
:

630  
	`sys_√t_ª˚ive
((*)
a1
, 
a2
);

632 #i‚de‡
VMM_GUEST


633 
SYS_ït_m≠
:

634  
	`sys_ït_m≠
(
a1
, (*Ë
a2
, 
a3
, (*Ë
a4
, 
a5
);

635 
SYS_ív_mkgue°
:

636  
	`sys_ív_mkgue°
(
a1
, 
a2
);

637 
SYS_vmx_li°_vms
:

638 
	`sys_vmx_li°_vms
();

640 
SYS_vmx_£l_ªsume
:

641  
	`sys_vmx_£l_ªsume
(
a1
);

642 
SYS_vmx_gë_vmdisk_numbî
:

643  
	`sys_vmx_gë_vmdisk_numbî
();

644 
SYS_vmx_ö¸_vmdisk_numbî
:

645 
	`sys_vmx_ö¸_vmdisk_numbî
();

651  -
E_NO_SYS
;

653 
	}
}

656 #ifde‡
TEST_EPT_MAP


658 
	$_exp‹t_sys_ït_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,

659 
ívid_t
 
gue°
, * 
gue°_∑
, 
≥rm
)

661  
	`sys_ït_m≠
(
§˚nvid
, 
§cva
, 
gue°
, 
gue°_∑
, 
≥rm
);

662 
	}
}

	@kern/syscall.h

2 #i‚de‡
JOS_KERN_SYSCALL_H


3 
	#JOS_KERN_SYSCALL_H


	)

4 #i‚de‡
JOS_KERNEL


8 
	~<öc/sysˇŒ.h
>

10 
öt64_t
 
sysˇŒ
(
uöt64_t
 
num
, uöt64_à
a1
, uöt64_à
a2
, uöt64_à
a3
, uöt64_à
a4
, uöt64_à
a5
);

	@kern/time.c

2 
	~<kîn/time.h
>

3 
	~<öc/as£π.h
>

5 
	gticks
;

8 
	$time_öô
()

10 
ticks
 = 0;

11 
	}
}

16 
	$time_tick
()

18 
ticks
++;

19 i‡(
ticks
 * 10 <Åicks)

20 
	`∑nic
("time_tick:Åime overflowed");

21 
	}
}

24 
	$time_m£c
()

26  
ticks
 * 10;

27 
	}
}

	@kern/time.h

2 #i‚de‡
JOS_KERN_TIME_H


3 
	#JOS_KERN_TIME_H


	)

4 #i‚de‡
JOS_KERNEL


8 
time_öô
();

9 
time_tick
();

10 
time_m£c
();

	@kern/trap.c

2 
	~<öc/mmu.h
>

3 
	~<öc/x86.h
>

4 
	~<öc/as£π.h
>

6 
	~<kîn/pm≠.h
>

7 
	~<kîn/å≠.h
>

8 
	~<kîn/c⁄sﬁe.h
>

9 
	~<kîn/m⁄ô‹.h
>

11 
	~<kîn/ív.h
>

12 
	~<kîn/sysˇŒ.h
>

14 
	~<kîn/sched.h
>

15 
	~<kîn/k˛ock.h
>

16 
	~<kîn/picúq.h
>

17 
	~<kîn/˝u.h
>

18 
	~<kîn/•ölock.h
>

20 
	~<kîn/time.h
>

22 
	~<öc/vmx.h
>

25 
uöçå_t
 
gdtdesc_64
;

26 
Task°©e
 
	gts
;

27 
Segdesc
 
gdt
[];

28 
gdt_pd
;

34 
Tøp‰ame
 *
	gœ°_tf
;

39 
G©edesc
 
	gidt
[256] = { { 0 } };

40 
P£udodesc
 
	gidt_pd
 = {0,0};

43 c⁄° *
	$å≠«me
(
å≠no
)

45 c⁄° * c⁄° 
ex˙ames
[] = {

68 i‡(
å≠no
 < (
ex˙ames
)/(excnames[0]))

69  
ex˙ames
[
å≠no
];

70 i‡(
å≠no
 =
T_SYSCALL
)

73 i‡(
å≠no
 >
IRQ_OFFSET
 &&Årapno < IRQ_OFFSET + 16)

77 
	}
}

81 
	$å≠_öô
()

83 
Segdesc
 
gdt
[];

86 
Xdivide
,
Xdebug
,
Xnmi
,
Xbrk±
,
XoÊow
,
Xbound
,

87 
Xûl›
,
Xdevi˚
,
XdblÊt
,
Xtss
,
X£g≈
,
X°ack
,

88 
XgpÊt
,
XpgÊt
,
XÂîr
,
XÆign
,
Xmchk
,
XdeÁu…
,
XsysˇŒ
;

91 
Xúq0
,
Xúq1
,
Xúq2
,
Xúq3
,
Xúq4
,
Xúq5
,

92 
Xúq6
,
Xúq7
,
Xúq8
,
Xúq9
,
Xúq10
,
Xúq11
,

93 
Xúq12
,
Xúq13
,
Xúq14
,
Xúq15
;

95 
i
;

99 
	`°©ic_as£π
((
IRQ_OFFSET
 & 7) == 0);

103 
i
 = 0; i < (
idt
)/(idt[0]); i++)

104 
	`SETGATE
(
idt
[
i
], 0, 
GD_KT
, &
XdeÁu…
, 0);

106 
	`SETGATE
(
idt
[
T_DIVIDE
], 0, 
GD_KT
, &
Xdivide
, 0);

107 
	`SETGATE
(
idt
[
T_DEBUG
], 0, 
GD_KT
, &
Xdebug
, 0);

108 
	`SETGATE
(
idt
[
T_NMI
], 0, 
GD_KT
, &
Xnmi
, 0);

109 
	`SETGATE
(
idt
[
T_BRKPT
], 0, 
GD_KT
, &
Xbrk±
, 3);

110 
	`SETGATE
(
idt
[
T_OFLOW
], 0, 
GD_KT
, &
XoÊow
, 0);

111 
	`SETGATE
(
idt
[
T_BOUND
], 0, 
GD_KT
, &
Xbound
, 0);

112 
	`SETGATE
(
idt
[
T_ILLOP
], 0, 
GD_KT
, &
Xûl›
, 0);

113 
	`SETGATE
(
idt
[
T_DEVICE
], 0, 
GD_KT
, &
Xdevi˚
, 0);

114 
	`SETGATE
(
idt
[
T_DBLFLT
], 0, 
GD_KT
, &
XdblÊt
, 0);

115 
	`SETGATE
(
idt
[
T_TSS
], 0, 
GD_KT
, &
Xtss
, 0);

116 
	`SETGATE
(
idt
[
T_SEGNP
], 0, 
GD_KT
, &
X£g≈
, 0);

117 
	`SETGATE
(
idt
[
T_STACK
], 0, 
GD_KT
, &
X°ack
, 0);

118 
	`SETGATE
(
idt
[
T_GPFLT
], 0, 
GD_KT
, &
XgpÊt
, 0);

119 
	`SETGATE
(
idt
[
T_PGFLT
], 0, 
GD_KT
, &
XpgÊt
, 0);

120 
	`SETGATE
(
idt
[
T_FPERR
], 0, 
GD_KT
, &
XÂîr
, 0);

121 
	`SETGATE
(
idt
[
T_ALIGN
], 0, 
GD_KT
, &
XÆign
, 0);

122 
	`SETGATE
(
idt
[
T_MCHK
], 0, 
GD_KT
, &
Xmchk
, 0);

125 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 0], 0, 
GD_KT
, &
Xúq0
, 0);

126 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 1], 0, 
GD_KT
, &
Xúq1
, 0);

127 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 2], 0, 
GD_KT
, &
Xúq2
, 0);

128 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 3], 0, 
GD_KT
, &
Xúq3
, 0);

129 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 4], 0, 
GD_KT
, &
Xúq4
, 0);

130 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 5], 0, 
GD_KT
, &
Xúq5
, 0);

131 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 6], 0, 
GD_KT
, &
Xúq6
, 0);

132 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 7], 0, 
GD_KT
, &
Xúq7
, 0);

133 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 8], 0, 
GD_KT
, &
Xúq8
, 0);

134 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 9], 0, 
GD_KT
, &
Xúq9
, 0);

135 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 10], 0, 
GD_KT
, &
Xúq10
, 0);

136 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 11], 0, 
GD_KT
, &
Xúq11
, 0);

137 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 12], 0, 
GD_KT
, &
Xúq12
, 0);

138 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 13], 0, 
GD_KT
, &
Xúq13
, 0);

139 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 14], 0, 
GD_KT
, &
Xúq14
, 0);

140 
	`SETGATE
(
idt
[
IRQ_OFFSET
 + 15], 0, 
GD_KT
, &
Xúq15
, 0);

145 
	`SETGATE
(
idt
[
T_SYSCALL
], 0, 
GD_KT
, &
XsysˇŒ
, 3);

147 
idt_pd
.
pd_lim
 = (
idt
)-1;

148 
idt_pd
.
pd_ba£
 = (
uöt64_t
)
idt
;

150 
	`å≠_öô_≥r˝u
();

151 
	}
}

155 
	$å≠_öô_≥r˝u
()

184 
gd_tss
 = (
GD_TSS0
 >> 3Ë+ 
	`˝unum
()*2;

186 
this˝u
->
˝u_ts
.
ts_e•0
 = 
KSTACKTOP


187 - (
KSTKSIZE
 + 
KSTKGAP
Ë* 
	`˝unum
();

189 
	`SETTSS
((
Sy°emSegdesc64
 *)((
gdt_pd
>>16)+40+
	`˝unum
()*16),
STS_T64A
, (
uöt64_t
Ë(&
this˝u
->
˝u_ts
),(
Task°©e
), 0);

192 
	`…r
(
gd_tss
 << 3);

196 
	`lidt
(&
idt_pd
);

197 
	}
}

200 
	$¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
)

203 
	`˝rötf
("TRAP fømê© %∞‰om CPU %d\n", 
tf
, 
	`˝unum
());

205 
	`¥öt_ªgs
(&
tf
->
tf_ªgs
);

206 
	`˝rötf
("É† 0x----%04x\n", 
tf
->
tf_es
);

207 
	`˝rötf
(" d† 0x----%04x\n", 
tf
->
tf_ds
);

208 
	`˝rötf
("Åø∞0x%08x %s\n", 
tf
->
tf_å≠no
, 
	`å≠«me
(tf->tf_trapno));

211 i‡(
tf
 =
œ°_tf
 &&Åf->
tf_å≠no
 =
T_PGFLT
)

212 
	`˝rötf
(" cr2 0x%08x\n", 
	`r¸2
());

213 
	`˝rötf
("Éº 0x%08x", 
tf
->
tf_îr
);

218 i‡(
tf
->
tf_å≠no
 =
T_PGFLT
)

219 
	`˝rötf
(" [%s, %s, %s]\n",

220 
tf
->
tf_îr
 & 4 ? "user" : "kernel",

221 
tf
->
tf_îr
 & 2 ? "write" : "read",

222 
tf
->
tf_îr
 & 1 ? "protection" : "not-present");

224 
	`˝rötf
("\n");

225 
	`˝rötf
("Ñù 0x%08x\n", 
tf
->
tf_rù
);

226 
	`˝rötf
(" c† 0x----%04x\n", 
tf
->
tf_cs
);

227 
	`˝rötf
(" fœg 0x%08x\n", 
tf
->
tf_eÊags
);

228 i‡((
tf
->
tf_cs
 & 3) != 0) {

229 
	`˝rötf
("Ñ• 0x%08x\n", 
tf
->
tf_r•
);

230 
	`˝rötf
(" s† 0x----%04x\n", 
tf
->
tf_ss
);

232 
	}
}

235 
	$¥öt_ªgs
(
PushRegs
 *
ªgs
)

237 
	`˝rötf
("Ñ15 0x%08x\n", 
ªgs
->
ªg_r15
);

238 
	`˝rötf
("Ñ14 0x%08x\n", 
ªgs
->
ªg_r14
);

239 
	`˝rötf
("Ñ13 0x%08x\n", 
ªgs
->
ªg_r13
);

240 
	`˝rötf
("Ñ12 0x%08x\n", 
ªgs
->
ªg_r12
);

241 
	`˝rötf
("Ñ11 0x%08x\n", 
ªgs
->
ªg_r11
);

242 
	`˝rötf
("Ñ10 0x%08x\n", 
ªgs
->
ªg_r10
);

243 
	`˝rötf
("Ñ9 0x%08x\n", 
ªgs
->
ªg_r9
);

244 
	`˝rötf
("Ñ8 0x%08x\n", 
ªgs
->
ªg_r8
);

245 
	`˝rötf
("Ñdò 0x%08x\n", 
ªgs
->
ªg_rdi
);

246 
	`˝rötf
("Ñsò 0x%08x\n", 
ªgs
->
ªg_rsi
);

247 
	`˝rötf
("Ñb∞ 0x%08x\n", 
ªgs
->
ªg_rbp
);

248 
	`˝rötf
("Ñbx 0x%08x\n", 
ªgs
->
ªg_rbx
);

249 
	`˝rötf
("Ñdx 0x%08x\n", 
ªgs
->
ªg_rdx
);

250 
	`˝rötf
("Ñcx 0x%08x\n", 
ªgs
->
ªg_rcx
);

251 
	`˝rötf
("Ñax 0x%08x\n", 
ªgs
->
ªg_øx
);

252 
	}
}

255 
	$å≠_di•©ch
(
Tøp‰ame
 *
tf
)

261 i‡(
tf
->
tf_å≠no
 =
T_PGFLT
) {

262 
	`∑ge_Áu…_h™dÀr
(
tf
);

265 i‡(
tf
->
tf_å≠no
 =
T_SYSCALL
) {

267 
tf
->
tf_ªgs
.
ªg_øx
 =

268 
	`sysˇŒ
(
tf
->
tf_ªgs
.
ªg_øx
,

269 
tf
->
tf_ªgs
.
ªg_rdx
,

270 
tf
->
tf_ªgs
.
ªg_rcx
,

271 
tf
->
tf_ªgs
.
ªg_rbx
,

272 
tf
->
tf_ªgs
.
ªg_rdi
,

273 
tf
->
tf_ªgs
.
ªg_rsi
);

276 i‡(
tf
->
tf_å≠no
 =
T_BRKPT
) {

278 
	`m⁄ô‹
(
tf
);

287 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_SPURIOUS
) {

288 
	`˝rötf
("Spurious interrupt on irq 7\n");

289 
	`¥öt_å≠‰ame
(
tf
);

304 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_TIMER
) {

307 i‡(
	`˝unum
() == 0)

308 
	`time_tick
();

310 
	`œpic_eoi
();

312 
	`sched_yõld
();

320 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_KBD
) {

321 
	`kbd_öå
();

324 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_SERIAL
) {

325 
	`£rül_öå
();

332 
	`¥öt_å≠‰ame
(
tf
);

333 i‡(
tf
->
tf_cs
 =
GD_KT
)

334 
	`∑nic
("unhandledÅrap in kernel");

336 
	`ív_de°roy
(
cuªnv
);

339 
	}
}

342 
	$å≠
(
Tøp‰ame
 *
tf
)

347 
asm
 volatile("cld" ::: "cc");

351 *
∑nic°r
;

352 i‡(
∑nic°r
)

353 
asm
 volatile("hlt");

357 i‡(
	`xchg
(&
this˝u
->
˝u_°©us
, 
CPU_STARTED
Ë=
CPU_HALTED
)

358 
	`lock_kî√l
();

363 
	`as£π
(!(
	`ªad_eÊags
(Ë& 
FL_IF
));

366 i‡((
tf
->
tf_cs
 & 3) == 3) {

373 
	`lock_kî√l
();

375 
	`as£π
(
cuªnv
);

379 i‡(
cuªnv
->
ív_°©us
 =
ENV_DYING
) {

380 
	`ív_‰ì
(
cuªnv
);

381 
cuªnv
 = 
NULL
;

382 
	`sched_yõld
();

389 
cuªnv
->
ív_tf
 = *
tf
;

391 
tf
 = &
cuªnv
->
ív_tf
;

397 
œ°_tf
 = 
tf
;

400 
	`å≠_di•©ch
(
tf
);

406 i‡(
cuªnv
 && cuªnv->
ív_°©us
 =
ENV_RUNNING
)

407 
	`ív_run
(
cuªnv
);

409 
	`sched_yõld
();

411 
	}
}

415 
	$∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *
tf
)

417 
uöt64_t
 
Áu…_va
;

419 
UTøp‰ame
 *
utf
;

423 
Áu…_va
 = 
	`r¸2
();

426 i‡((
tf
->
tf_cs
 & 3) == 0) {

427 
	`¥öt_å≠‰ame
(
tf
);

428 
	`∑nic
("page fault");

434 i‡(
cuªnv
->
ív_pgÁu…_upˇŒ
 == 0) {

435 
	`˝rötf
("[%08x] user fault va %08x ip %08x\n",

436 
cuªnv
->
ív_id
, 
Áu…_va
, 
tf
->
tf_rù
);

437 
	`¥öt_å≠‰ame
(
tf
);

438 
	`ív_de°roy
(
cuªnv
);

442 i‡(
tf
->
tf_r•
 >
UXSTACKTOP
 - 
PGSIZE
 &&Åf->tf_rsp < UXSTACKTOP) {

446 
utf
 = (
UTøp‰ame
*)(
tf
->
tf_r•


447 - (
UTøp‰ame
)

456 
utf
 = (
UTøp‰ame
*)(
UXSTACKTOP


457 - (
UTøp‰ame
));

463 
	`u£r_mem_as£π
(
cuªnv
, 
utf
, (
UTøp‰ame
), 
PTE_U
 | 
PTE_W
);

466 
utf
->
utf_Áu…_va
 = 
Áu…_va
;

467 
utf
->
utf_îr
 = 
tf
->
tf_îr
;

468 
utf
->
utf_ªgs
 = 
tf
->
tf_ªgs
;

469 
utf
->
utf_rù
 = 
tf
->
tf_rù
;

470 
utf
->
utf_eÊags
 = 
tf
->
tf_eÊags
;

471 
utf
->
utf_r•
 = 
tf
->
tf_r•
;

474 
tf
->
tf_r•
 = (
uöçå_t
Ë
utf
;

475 
tf
->
tf_rù
 = (
uöçå_t
Ë
cuªnv
->
ív_pgÁu…_upˇŒ
;

477 
	`ív_run
(
cuªnv
);

479 
	}
}

	@kern/trap.h

4 #i‚de‡
JOS_KERN_TRAP_H


5 
	#JOS_KERN_TRAP_H


	)

6 #i‚de‡
JOS_KERNEL


10 
	~<öc/å≠.h
>

11 
	~<öc/mmu.h
>

14 
G©edesc
 
idt
[];

15 
P£udodesc
 
idt_pd
;

17 
å≠_öô
();

18 
å≠_öô_≥r˝u
();

19 
¥öt_ªgs
(
PushRegs
 *
ªgs
);

20 
¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
);

21 
∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *);

22 
backåa˚
(
Tøp‰ame
 *);

	@lib/args.c

2 
	~<öc/¨gs.h
>

3 
	~<öc/°rög.h
>

6 
	$¨g°¨t
(*
¨gc
, **
¨gv
, 
Arg°©e
 *
¨gs
)

8 
¨gs
->
¨gc
 =árgc;

9 
¨gs
->
¨gv
 = (const **)árgv;

10 
¨gs
->
cuørg
 = (*
¨gc
 > 1 && 
¨gv
 ? "" : 0);

11 
¨gs
->
¨gvÆue
 = 0;

12 
	}
}

15 
	$¨g√xt
(
Arg°©e
 *
¨gs
)

17 
¨g
;

19 
¨gs
->
¨gvÆue
 = 0;

22 i‡(
¨gs
->
cuørg
 == 0)

25 i‡(!*
¨gs
->
cuørg
) {

28 i‡(*
¨gs
->
¨gc
 == 1

29 || 
¨gs
->
¨gv
[1][0] != '-'

30 || 
¨gs
->
¨gv
[1][1] == '\0')

31 
ídoÁrgs
;

33 
¨gs
->
cuørg
 =árgs->
¨gv
[1] + 1;

34 
	`memmove
(
¨gs
->
¨gv
 + 1,árgs->¨gv + 2, (c⁄° *Ë* (*¨gs->
¨gc
 - 1));

35 (*
¨gs
->
¨gc
)--;

37 i‡(
¨gs
->
cuørg
[0] == '-' &&árgs->curarg[1] == '\0')

38 
ídoÁrgs
;

41 
¨g
 = (Ë*
¨gs
->
cuørg
;

42 
¨gs
->
cuørg
++;

43  
¨g
;

45 
ídoÁrgs
:

46 
¨gs
->
cuørg
 = 0;

48 
	}
}

51 
	$¨gvÆue
(
Arg°©e
 *
¨gs
)

53  (*Ë(
¨gs
->
¨gvÆue
 ?árgs->¨gvÆuê: 
	`¨g√xtvÆue
(args));

54 
	}
}

57 
	$¨g√xtvÆue
(
Arg°©e
 *
¨gs
)

59 i‡(!
¨gs
->
cuørg
)

61 i‡(*
¨gs
->
cuørg
) {

62 
¨gs
->
¨gvÆue
 =árgs->
cuørg
;

63 
¨gs
->
cuørg
 = "";

64 } i‡(*
¨gs
->
¨gc
 > 1) {

65 
¨gs
->
¨gvÆue
 =árgs->
¨gv
[1];

66 
	`memmove
(
¨gs
->
¨gv
 + 1,árgs->¨gv + 2, (c⁄° *Ë* (*¨gs->
¨gc
 - 1));

67 (*
¨gs
->
¨gc
)--;

69 
¨gs
->
¨gvÆue
 = 0;

70 
¨gs
->
cuørg
 = 0;

72  (*Ë
¨gs
->
¨gvÆue
;

73 
	}
}

	@lib/console.c

3 
	~<öc/°rög.h
>

4 
	~<öc/lib.h
>

7 
	$˝utch¨
(
ch
)

9 
c
 = 
ch
;

13 
	`sys_˝uts
(&
c
, 1);

14 
	}
}

17 
	$gëch¨
()

20 
c
;

21 
r
;

26 
r
 = 
	`ªad
(0, &
c
, 1);

27 i‡(
r
 < 0)

28  
r
;

29 i‡(
r
 < 1)

30  -
E_EOF
;

31  
c
;

33 
	}
}

41 
ssize_t
 
devc⁄s_ªad
(
Fd
*, *, 
size_t
);

42 
ssize_t
 
devc⁄s_wrôe
(
Fd
*, c⁄° *, 
size_t
);

43 
devc⁄s_˛o£
(
Fd
*);

44 
devc⁄s_°©
(
Fd
*, 
Sèt
*);

46 
Dev
 
	gdevc⁄s
 =

48 .
dev_id
 = 'c',

49 .
	gdev_«me
 = "cons",

50 .
	gdev_ªad
 = 
devc⁄s_ªad
,

51 .
	gdev_wrôe
 = 
devc⁄s_wrôe
,

52 .
	gdev_˛o£
 = 
devc⁄s_˛o£
,

53 .
	gdev_°©
 = 
devc⁄s_°©


57 
	$isc⁄s
(
fdnum
)

59 
r
;

60 
Fd
 *
fd
;

62 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

63  
r
;

64  
fd
->
fd_dev_id
 =
devc⁄s
.
dev_id
;

65 
	}
}

68 
	$›íc⁄s
()

70 
r
;

71 
Fd
* 
fd
;

73 i‡((
r
 = 
	`fd_Æloc
(&
fd
)) < 0)

74  
r
;

75 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
fd
, 
PTE_P
|
PTE_U
|
PTE_W
|
PTE_SHARE
)) < 0)

76  
r
;

77 
fd
->
fd_dev_id
 = 
devc⁄s
.
dev_id
;

78 
fd
->
fd_omode
 = 
O_RDWR
;

79  
	`fd2num
(
fd
);

80 
	}
}

82 
ssize_t


83 
	$devc⁄s_ªad
(
Fd
 *
fd
, *
vbuf
, 
size_t
 
n
)

85 
c
;

87 i‡(
n
 == 0)

90 (
c
 = 
	`sys_cgëc
()) == 0)

91 
	`sys_yõld
();

92 i‡(
c
 < 0)

93  
c
;

94 i‡(
c
 == 0x04)

96 *(*)
vbuf
 = 
c
;

98 
	}
}

100 
ssize_t


101 
	$devc⁄s_wrôe
(
Fd
 *
fd
, c⁄° *
vbuf
, 
size_t
 
n
)

103 
tŸ
, 
m
;

104 
buf
[128];

108 
tŸ
 = 0;ÅŸ < 
n
;ÅŸ +
m
) {

109 
m
 = 
n
 - 
tŸ
;

110 i‡(
m
 > (
buf
) - 1)

111 
m
 = (
buf
) - 1;

112 
	`memmove
(
buf
, (*)
vbuf
 + 
tŸ
, 
m
);

113 
	`sys_˝uts
(
buf
, 
m
);

115  
tŸ
;

116 
	}
}

119 
	$devc⁄s_˛o£
(
Fd
 *
fd
)

121 
	`USED
(
fd
);

124 
	}
}

127 
	$devc⁄s_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
)

129 
	`°r˝y
(
°©
->
°_«me
, "<cons>");

131 
	}
}

	@lib/exit.c

3 
	~<öc/lib.h
>

6 
	$exô
()

9 
	`˛o£_Æl
();

11 
	`sys_ív_de°roy
(0);

12 
	}
}

	@lib/fd.c

6 
	~<öc/lib.h
>

8 
	#debug
 0

	)

11 
	#MAXFD
 32

	)

13 
	#FDTABLE
 0xD0000000

	)

16 
	#FILEDATA
 (
FDTABLE
 + 
MAXFD
*
PGSIZE
)

	)

19 
	#INDEX2FD
(
i
Ë((
Fd
*Ë(
FDTABLE
 + ((
uöt64_t
)i)*
PGSIZE
))

	)

21 
	#INDEX2DATA
(
i
Ë((*Ë(
FILEDATA
 + (i)*
PGSIZE
))

	)

28 
uöt64_t


29 
	$fd2num
(
Fd
 *
fd
)

31  ((
uöçå_t
Ë
fd
 - 
FDTABLE
Ë/ 
PGSIZE
;

32 
	}
}

35 
	$fd2d©a
(
Fd
 *
fd
)

37  
	`INDEX2DATA
(
	`fd2num
(
fd
));

38 
	}
}

56 
	$fd_Æloc
(
Fd
 **
fd_°‹e
)

58 
i
;

59 
Fd
 *
fd
;

61 
i
 = 0; i < 
MAXFD
; i++) {

62 
fd
 = 
	`INDEX2FD
(
i
);

63 i‡((
uvpd
[
	`VPD
(
fd
)] & 
PTE_P
Ë=0 || (
uv±
[
	`PGNUM
(fd)] & PTE_P) == 0) {

64 *
fd_°‹e
 = 
fd
;

68 *
fd_°‹e
 = 0;

69  -
E_MAX_OPEN
;

70 
	}
}

79 
	$fd_lookup
(
fdnum
, 
Fd
 **
fd_°‹e
)

81 
Fd
 *
fd
;

83 i‡(
fdnum
 < 0 || fdnum >
MAXFD
) {

84 i‡(
debug
)

85 
	`˝rötf
("[%08x] bad fd %d\n", 
thi£nv
->
ív_id
, 
fdnum
);

86  -
E_INVAL
;

88 
fd
 = 
	`INDEX2FD
(
fdnum
);

89 i‡(!(
uvpd
[
	`VPD
(
fd
)] & 
PTE_P
Ë|| !(
uv±
[
	`PGNUM
(fd)] & PTE_P)) {

90 i‡(
debug
)

91 
	`˝rötf
("[%08x] clo£d fd %d\n", 
thi£nv
->
ív_id
, 
fdnum
);

92  -
E_INVAL
;

94 *
fd_°‹e
 = 
fd
;

96 
	}
}

106 
	$fd_˛o£
(
Fd
 *
fd
, 
boﬁ
 
mu°_exi°
)

108 
Fd
 *
fd2
;

109 
Dev
 *
dev
;

110 
r
;

111 i‡((
r
 = 
	`fd_lookup
(
	`fd2num
(
fd
), &
fd2
)) < 0

112 || 
fd
 !
fd2
)

113  (
mu°_exi°
 ? 
r
 : 0);

114 i‡((
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) >= 0) {

115 i‡(
dev
->
dev_˛o£
)

116 
r
 = (*
dev
->
dev_˛o£
)(
fd
);

118 
r
 = 0;

122 (Ë
	`sys_∑ge_unm≠
(0, 
fd
);

123  
r
;

124 
	}
}

131 
Dev
 *
	gdevèb
[] =

133 &
devfûe
,

135 &
devsock
,

137 &
devpùe
,

138 &
devc⁄s
,

144 
	$dev_lookup
(
dev_id
, 
Dev
 **
dev
)

146 
i
;

147 
i
 = 0; 
devèb
[i]; i++)

148 i‡(
devèb
[
i
]->
dev_id
 == dev_id) {

149 *
dev
 = 
devèb
[
i
];

152 
	`˝rötf
("[%08x] unknow¿devi˚Åy≥ %d\n", 
thi£nv
->
ív_id
, 
dev_id
);

153 *
dev
 = 0;

154  -
E_INVAL
;

155 
	}
}

158 
	$˛o£
(
fdnum
)

160 
Fd
 *
fd
;

161 
r
;

163 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

164  
r
;

166  
	`fd_˛o£
(
fd
, 1);

167 
	}
}

170 
	$˛o£_Æl
()

172 
i
;

173 
i
 = 0; i < 
MAXFD
; i++)

174 
	`˛o£
(
i
);

175 
	}
}

183 
	$dup
(
ﬁdfdnum
, 
√wfdnum
)

185 
r
;

186 *
ova
, *
nva
;

187 
±e_t
 
±e
;

188 
Fd
 *
ﬁdfd
, *
√wfd
;

190 i‡((
r
 = 
	`fd_lookup
(
ﬁdfdnum
, &
ﬁdfd
)) < 0)

191  
r
;

192 
	`˛o£
(
√wfdnum
);

194 
√wfd
 = 
	`INDEX2FD
(
√wfdnum
);

195 
ova
 = 
	`fd2d©a
(
ﬁdfd
);

196 
nva
 = 
	`fd2d©a
(
√wfd
);

198 i‡((
uvpd
[
	`VPD
(
ova
)] & 
PTE_P
Ë&& (
uv±
[
	`PGNUM
(ova)] & PTE_P))

199 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
ova
, 0, 
nva
, 
uv±
[
	`PGNUM
(ova)] & 
PTE_SYSCALL
)) < 0)

200 
îr
;

201 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
ﬁdfd
, 0, 
√wfd
, 
uv±
[
	`PGNUM
(ﬁdfd)] & 
PTE_SYSCALL
)) < 0)

202 
îr
;

204  
√wfdnum
;

206 
îr
:

207 
	`sys_∑ge_unm≠
(0, 
√wfd
);

208 
	`sys_∑ge_unm≠
(0, 
nva
);

209  
r
;

210 
	}
}

212 
ssize_t


213 
	$ªad
(
fdnum
, *
buf
, 
size_t
 
n
)

215 
r
;

216 
Dev
 *
dev
;

217 
Fd
 *
fd
;

219 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

220 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

221  
r
;

222 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

223 
	`˝rötf
("[%08x]Ñód %d -- bad mode\n", 
thi£nv
->
ív_id
, 
fdnum
);

224  -
E_INVAL
;

226 i‡(!
dev
->
dev_ªad
)

227  -
E_NOT_SUPP
;

228  (*
dev
->
dev_ªad
)(
fd
, 
buf
, 
n
);

229 
	}
}

231 
ssize_t


232 
	$ªadn
(
fdnum
, *
buf
, 
size_t
 
n
)

234 
m
, 
tŸ
;

236 
tŸ
 = 0;ÅŸ < 
n
;ÅŸ +
m
) {

237 
m
 = 
	`ªad
(
fdnum
, (*)
buf
 + 
tŸ
, 
n
 -Åot);

238 i‡(
m
 < 0)

239  
m
;

240 i‡(
m
 == 0)

243  
tŸ
;

244 
	}
}

246 
ssize_t


247 
	$wrôe
(
fdnum
, c⁄° *
buf
, 
size_t
 
n
)

249 
r
;

250 
Dev
 *
dev
;

251 
Fd
 *
fd
;

253 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

254 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

255  
r
;

256 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

257 
	`˝rötf
("[%08x] wrôê%d -- bad mode\n", 
thi£nv
->
ív_id
, 
fdnum
);

258  -
E_INVAL
;

260 i‡(
debug
)

261 
	`˝rötf
("write %d %p %d via dev %s\n",

262 
fdnum
, 
buf
, 
n
, 
dev
->
dev_«me
);

263 i‡(!
dev
->
dev_wrôe
)

264  -
E_NOT_SUPP
;

265  (*
dev
->
dev_wrôe
)(
fd
, 
buf
, 
n
);

266 
	}
}

269 
	$£ek
(
fdnum
, 
off_t
 
off£t
)

271 
r
;

272 
Fd
 *
fd
;

274 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

275  
r
;

276 
fd
->
fd_off£t
 = 
off£t
;

278 
	}
}

281 
	$·runˇã
(
fdnum
, 
off_t
 
√wsize
)

283 
r
;

284 
Dev
 *
dev
;

285 
Fd
 *
fd
;

286 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

287 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

288  
r
;

289 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

290 
	`˝rötf
("[%08x] ftruncate %d -- bad mode\n",

291 
thi£nv
->
ív_id
, 
fdnum
);

292  -
E_INVAL
;

294 i‡(!
dev
->
dev_åunc
)

295  -
E_NOT_SUPP
;

296  (*
dev
->
dev_åunc
)(
fd
, 
√wsize
);

297 
	}
}

300 
	$f°©
(
fdnum
, 
Sèt
 *
°©
)

302 
r
;

303 
Dev
 *
dev
;

304 
Fd
 *
fd
;

306 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

307 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

308  
r
;

309 i‡(!
dev
->
dev_°©
)

310  -
E_NOT_SUPP
;

311 
°©
->
°_«me
[0] = 0;

312 
°©
->
°_size
 = 0;

313 
°©
->
°_isdú
 = 0;

314 
°©
->
°_dev
 = 
dev
;

315  (*
dev
->
dev_°©
)(
fd
, 
°©
);

316 
	}
}

319 
	$°©
(c⁄° *
∑th
, 
Sèt
 *
°©
)

321 
fd
, 
r
;

323 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) < 0)

324  
fd
;

325 
r
 = 
	`f°©
(
fd
, 
°©
);

326 
	`˛o£
(
fd
);

327  
r
;

328 
	}
}

	@lib/file.c

2 
	~<öc/fs.h
>

3 
	~<öc/°rög.h
>

4 
	~<öc/lib.h
>

7 #ifde‡
VMM_GUEST


8 
	~<öc/vmx.h
>

12 
	#debug
 0

	)

14 
Fsùc
 
fsùcbuf
 
__©åibuã__
((
Æig√d
(
PGSIZE
)));

23 
	$fsùc
(
ty≥
, *
d°va
)

25 
ívid_t
 
f£nv
;

26 i‡(
f£nv
 == 0)

27 
f£nv
 = 
	`ùc_föd_ív
(
ENV_TYPE_FS
);

31 i‡(
debug
)

32 
	`˝rötf
("[%08x] fsù¯%d %08x\n", 
thi£nv
->
ív_id
, 
ty≥
, *(
uöt32_t
 *)&
fsùcbuf
);

34 
	`ùc_£nd
(
f£nv
, 
ty≥
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

35  
	`ùc_ªcv
(
NULL
, 
d°va
, NULL);

36 
	}
}

38 
devfûe_Êush
(
Fd
 *
fd
);

39 
ssize_t
 
devfûe_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
);

40 
ssize_t
 
devfûe_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
);

41 
devfûe_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
);

42 
devfûe_åunc
(
Fd
 *
fd
, 
off_t
 
√wsize
);

44 
Dev
 
	gdevfûe
 =

46 .
dev_id
 = 'f',

47 .
	gdev_«me
 = "file",

48 .
	gdev_ªad
 = 
devfûe_ªad
,

49 .
	gdev_˛o£
 = 
devfûe_Êush
,

50 .
	gdev_°©
 = 
devfûe_°©
,

51 .
	gdev_wrôe
 = 
devfûe_wrôe
,

52 .
	gdev_åunc
 = 
devfûe_åunc


62 
	$›í
(c⁄° *
∑th
, 
mode
)

79 
r
;

80 
Fd
 *
fd
;

82 i‡(
	`°æí
(
∑th
Ë>
MAXPATHLEN
)

83  -
E_BAD_PATH
;

85 i‡((
r
 = 
	`fd_Æloc
(&
fd
)) < 0)

86  
r
;

88 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
, 
∑th
);

89 
fsùcbuf
.
›í
.
ªq_omode
 = 
mode
;

91 i‡((
r
 = 
	`fsùc
(
FSREQ_OPEN
, 
fd
)) < 0) {

92 
	`fd_˛o£
(
fd
, 0);

93  
r
;

96  
	`fd2num
(
fd
);

98 
	}
}

109 
	$devfûe_Êush
(
Fd
 *
fd
)

111 
fsùcbuf
.
Êush
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

112  
	`fsùc
(
FSREQ_FLUSH
, 
NULL
);

113 
	}
}

120 
ssize_t


121 
	$devfûe_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
)

128 
r
;

130 
fsùcbuf
.
ªad
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

131 
fsùcbuf
.
ªad
.
ªq_n
 = 
n
;

132 i‡((
r
 = 
	`fsùc
(
FSREQ_READ
, 
NULL
)) < 0)

133  
r
;

134 
	`as£π
(
r
 <
n
);

135 
	`as£π
(
r
 <
PGSIZE
);

136 
	`memmove
(
buf
, &
fsùcbuf
, 
r
);

137  
r
;

139 
	}
}

146 
ssize_t


147 
	$devfûe_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
)

154 
r
;

156 
n
 = 
	`MIN
“, (
fsùcbuf
.
wrôe
.
ªq_buf
));

157 
fsùcbuf
.
wrôe
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

158 
fsùcbuf
.
wrôe
.
ªq_n
 = 
n
;

159 
	`memmove
(
fsùcbuf
.
wrôe
.
ªq_buf
, 
buf
, 
n
);

160 i‡((
r
 = 
	`fsùc
(
FSREQ_WRITE
, 
NULL
)) < 0)

161  
r
;

162 
	`as£π
(
r
 <
n
);

163  
r
;

165 
	}
}

168 
	$devfûe_°©
(
Fd
 *
fd
, 
Sèt
 *
°
)

170 
r
;

172 
fsùcbuf
.
°©
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

173 i‡((
r
 = 
	`fsùc
(
FSREQ_STAT
, 
NULL
)) < 0)

174  
r
;

175 
	`°r˝y
(
°
->
°_«me
, 
fsùcbuf
.
°©Rë
.
ªt_«me
);

176 
°
->
°_size
 = 
fsùcbuf
.
°©Rë
.
ªt_size
;

177 
°
->
°_isdú
 = 
fsùcbuf
.
°©Rë
.
ªt_isdú
;

179 
	}
}

183 
	$devfûe_åunc
(
Fd
 *
fd
, 
off_t
 
√wsize
)

185 
fsùcbuf
.
£t_size
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

186 
fsùcbuf
.
£t_size
.
ªq_size
 = 
√wsize
;

187  
	`fsùc
(
FSREQ_SET_SIZE
, 
NULL
);

188 
	}
}

192 
	$ªmove
(c⁄° *
∑th
)

194 i‡(
	`°æí
(
∑th
Ë>
MAXPATHLEN
)

195  -
E_BAD_PATH
;

196 
	`°r˝y
(
fsùcbuf
.
ªmove
.
ªq_∑th
, 
∑th
);

197  
	`fsùc
(
FSREQ_REMOVE
, 
NULL
);

198 
	}
}

202 
	$sync
()

207  
	`fsùc
(
FSREQ_SYNC
, 
NULL
);

208 
	}
}

212 
	$c›y
(*
§c
, *
de°
)

214 
r
;

215 
fd_§c
, 
fd_de°
;

216 
buf„r
[512];

217 
ssize_t
 
ªad_size
;

218 
ssize_t
 
wrôe_size
;

219 
fd_§c
 = 
	`›í
(
§c
, 
O_RDONLY
);

220 i‡(
fd_§c
 < 0) {

221 
	`˝rötf
("˝ o≥¿§¯îr‹:%e\n", 
fd_§c
);

222  
fd_§c
;

225 
fd_de°
 = 
	`›í
(
de°
, 
O_CREAT
 | 
O_WRONLY
);

226 i‡(
fd_de°
 < 0) {

227 
	`˝rötf
("˝ cª©êde°Éº‹:%e\n", 
fd_de°
);

228 
	`˛o£
(
fd_§c
);

229  
fd_de°
;

232 (
ªad_size
 = 
	`ªad
(
fd_§c
, 
buf„r
, 512)) > 0) {

233 
wrôe_size
 = 
	`wrôe
(
fd_de°
, 
buf„r
, 
ªad_size
);

234 i‡(
wrôe_size
 < 0) {

235 
	`˝rötf
("˝ wrôêîr‹:%e\n", 
wrôe_size
);

236 
	`˛o£
(
fd_§c
);

237 
	`˛o£
(
fd_de°
);

238  
wrôe_size
;

241 i‡(
ªad_size
 < 0) {

242 
	`˝rötf
("˝Ñód sr¯îr‹:%e\n", 
ªad_size
);

243 
	`˛o£
(
fd_§c
);

244 
	`˛o£
(
fd_de°
);

245  
ªad_size
;

247 
	`˛o£
(
fd_§c
);

248 
	`˛o£
(
fd_de°
);

251 
	}
}

	@lib/fork.c

4 
	~<öc/°rög.h
>

5 
	~<öc/lib.h
>

8 
	#debug
 0

	)

13 
	#PTE_COW
 0x800

	)

20 
	$pgÁu…
(
UTøp‰ame
 *
utf
)

22 *
addr
 = (*Ë
utf
->
utf_Áu…_va
;

23 
uöt32_t
 
îr
 = 
utf
->
utf_îr
;

24 
r
;

27 i‡(
debug
)

28 
	`˝rötf
("Áu… %08x %08x %d from %08x\n", 
addr
, &
uv±
[
	`PGNUM
◊ddr)], 
îr
 & 7, (&addr)[4]);

30 i‡(!(
îr
 & 
FEC_WR
))

31 
	`∑nic
("ªad fau…áà%x,Ñù %x", 
addr
, 
utf
->
utf_rù
);

32 i‡((
uv±
[
	`PGNUM
(
addr
)] & (
PTE_P
|
PTE_U
|
PTE_W
|
PTE_COW
)) != (PTE_P|PTE_U|PTE_COW))

33 
	`∑nic
("faultát %x withÖte %x,Çot copy-on-write",

34 
addr
, 
uv±
[
	`PGNUM
(addr)]);

39 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë
PFTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

40 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

41 
	`memmove
((*Ë
PFTEMP
, 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), PGSIZE);

44 i‡((
r
 = 
	`sys_∑ge_m≠
(0, (*Ë
PFTEMP
, 0, 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

45 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

48 i‡((
r
 = 
	`sys_∑ge_unm≠
(0, (*Ë
PFTEMP
)) < 0)

49 
	`∑nic
("sys_∑ge_unm≠: %e", 
r
);

51 
	}
}

65 
	$duµage
(
ívid_t
 
ívid
, 
≤
)

67 
r
;

70 *
addr
;

71 
±e_t
 
±e
;

73 
addr
 = (*Ë(
uöt64_t
)(
≤
 << 
PGSHIFT
);

74 
±e
 = 
uv±
[
≤
];

78 i‡(!(
±e
 & (
PTE_W
|
PTE_COW
)Ë|| (±ê& 
PTE_SHARE
)) {

79 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
addr
, 
ívid
,áddr, 
±e
 & 
PTE_SYSCALL
)) < 0)

80 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

99 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
addr
, 
ívid
,áddr, 
PTE_P
|
PTE_U
|
PTE_COW
)) < 0)

100 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

101 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
addr
, 0,áddr, 
PTE_P
|
PTE_U
|
PTE_COW
)) < 0)

102 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

103  
r
;

105 
	}
}

123 
ívid_t


124 
	$f‹k
()

127 
ívid_t
 
ívid
;

128 
≤
, 
íd_≤
, 
r
;

130 
	`£t_pgÁu…_h™dÀr
(
pgÁu…
);

133 
ívid
 = 
	`sys_exof‹k
();

134 i‡(
ívid
 < 0)

135  
ívid
;

136 i‡(
ívid
 == 0) {

137 
thi£nv
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

142 
≤
 = 0;Ö¿< 
	`PGNUM
(
UTOP
); ) {

143 i‡(!(
uvpde
[
≤
 >> 18] & 
PTE_P
 && 
uvpd
[pn >> 9] & PTE_P)) {

144 
≤
 +
NPTENTRIES
;

147 
íd_≤
 = 
≤
 + 
NPTENTRIES
;Ön <Énd_pn;Ön++) {

148 i‡((
uv±
[
≤
] & (
PTE_P
|
PTE_U
)) != (PTE_P|PTE_U))

150 i‡(
≤
 =
	`PPN
(
UXSTACKTOP
 - 1))

152 
	`duµage
(
ívid
, 
≤
);

157 i‡((
r
 = 
	`sys_∑ge_Æloc
(
ívid
, (*Ë(
UXSTACKTOP
 - 
PGSIZE
), 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

158 
	`∑nic
("ÆloˇtögÉx˚±i⁄ sèck: %e", 
r
);

161 i‡((
r
 = 
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid
, 
thi£nv
->
ív_pgÁu…_upˇŒ
)) < 0)

162 
	`∑nic
("sys_ív_£t_pgÁu…_upˇŒ: %e", 
r
);

166 i‡((
r
 = 
	`sys_ív_£t_°©us
(
ívid
, 
ENV_RUNNABLE
)) < 0)

167 
	`∑nic
("sys_ív_£t_°©us: %e", 
r
);

169  
ívid
;

171 
	}
}

175 
	$sf‹k
()

177 
	`∑nic
("sforkÇot implemented");

178  -
E_INVAL
;

179 
	}
}

	@lib/fprintf.c

2 
	~<öc/lib.h
>

9 
	s¥ötbuf
 {

10 
	mfd
;

11 
	midx
;

12 
ssize_t
 
	mªsu…
;

13 
	mîr‹
;

14 
	mbuf
[256];

19 
	$wrôebuf
(
¥ötbuf
 *
b
)

21 i‡(
b
->
îr‹
 > 0) {

22 
ssize_t
 
ªsu…
 = 
	`wrôe
(
b
->
fd
, b->
buf
, b->
idx
);

23 i‡(
ªsu…
 > 0)

24 
b
->
ªsu…
 +=Ñesult;

25 i‡(
ªsu…
 !
b
->
idx
)

26 
b
->
îr‹
 = (
ªsu…
 < 0 ?Ñesult : 0);

28 
	}
}

31 
	$putch
(
ch
, *
thunk
)

33 
¥ötbuf
 *
b
 = (¥ötbu‡*Ë
thunk
;

34 
b
->
buf
[b->
idx
++] = 
ch
;

35 i‡(
b
->
idx
 == 256) {

36 
	`wrôebuf
(
b
);

37 
b
->
idx
 = 0;

39 
	}
}

42 
	$vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
 
≠
)

44 
¥ötbuf
 
b
;

46 
b
.
fd
 = fd;

47 
b
.
idx
 = 0;

48 
b
.
ªsu…
 = 0;

49 
b
.
îr‹
 = 1;

50 
	`v¥ötfmt
(
putch
, &
b
, 
fmt
, 
≠
);

51 i‡(
b
.
idx
 > 0)

52 
	`wrôebuf
(&
b
);

54  (
b
.
ªsu…
 ? b.ªsu… : b.
îr‹
);

55 
	}
}

58 
	$Ârötf
(
fd
, c⁄° *
fmt
, ...)

60 
va_li°
 
≠
;

61 
˙t
;

63 
	`va_°¨t
(
≠
, 
fmt
);

64 
˙t
 = 
	`vÂrötf
(
fd
, 
fmt
, 
≠
);

65 
	`va_íd
(
≠
);

67  
˙t
;

68 
	}
}

71 
	$¥ötf
(c⁄° *
fmt
, ...)

73 
va_li°
 
≠
;

74 
˙t
;

76 
	`va_°¨t
(
≠
, 
fmt
);

78 
˙t
 = 
	`vÂrötf
(1, 
fmt
, 
≠
);

80 
	`va_íd
(
≠
);

82  
˙t
;

83 
	}
}

	@lib/ipc.c

4 
	~<öc/lib.h
>

6 #ifde‡
VMM_GUEST


7 
	~<öc/vmx.h
>

28 
öt32_t


29 
	$ùc_ªcv
(
ívid_t
 *
‰om_ív_°‹e
, *
pg
, *
≥rm_°‹e
)

32 
r
;

34 i‡(!
pg
)

35 
pg
 = (*Ë
UTOP
;

36 i‡((
r
 = 
	`sys_ùc_ªcv
(
pg
)) < 0) {

37 i‡(
‰om_ív_°‹e
)

38 *
‰om_ív_°‹e
 = 0;

39 i‡(
≥rm_°‹e
)

40 *
≥rm_°‹e
 = 0;

41  
r
;

43 i‡(
‰om_ív_°‹e
)

44 *
‰om_ív_°‹e
 = 
thi£nv
->
ív_ùc_‰om
;

45 i‡(
≥rm_°‹e
)

46 *
≥rm_°‹e
 = 
thi£nv
->
ív_ùc_≥rm
;

47  
thi£nv
->
ív_ùc_vÆue
;

49 
	}
}

60 
	$ùc_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆ
, *
pg
, 
≥rm
)

63 
r
;

65 i‡(!
pg
)

66 
pg
 = (*Ë
UTOP
;

67 (
r
 = 
	`sys_ùc_åy_£nd
(
to_ív
, 
vÆ
, 
pg
, 
≥rm
)Ë=-
E_IPC_NOT_RECV
) {

68 
	`sys_yõld
();

70 i‡(
r
 < 0)

71 
	`∑nic
("îr‹ i¿ùc_£nd: %e", 
r
);

73 
	}
}

76 #ifde‡
VMM_GUEST


80 
öt32_t


81 
	$ùc_ho°_ªcv
(*
pg
) {

84 
r
 = 0, 
vÆ
 = 0;

86 i‡(!
pg
)

87 
pg
 = (*Ë
UTOP
;

88 
	`sys_∑ge_Æloc
(0, 
pg
, 
PTE_U
|
PTE_P
|
PTE_W
);

89 
phyßddr_t
 
∑
 = 
	`PTE_ADDR
(
uv±
[
	`PGNUM
(
pg
)]);

90 
	`asm
("vmˇŒ": "˜"(
r
), "=S"(
vÆ
Ë: "0"(
VMX_VMCALL_IPCRECV
), "b"(
∑
));

92 i‡(
r
 < 0) {

93  
r
;

95  
vÆ
;

97 
	}
}

103 
	$ùc_ho°_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆ
, *
pg
, 
≥rm
)

107 
r
 = 0;

109 i‡(!
pg
)

110 
pg
 = (*Ë
UTOP
;

112 
phyßddr_t
 
∑
 = 
	`PTE_ADDR
(
uv±
[
	`PGNUM
(
pg
)]);

113 
	`asm
("vmˇŒ": "˜"(
r
): "0"(
VMX_VMCALL_IPCSEND
), "b"(
to_ív
), "c"(
vÆ
),

114 "d"(
∑
), "S"(
≥rm
));

115 
r
 =-
E_IPC_NOT_RECV
) {

116 
	`sys_yõld
();

117 
	`asm
("vmˇŒ": "˜"(
r
): "0"(
VMX_VMCALL_IPCSEND
), "b"(
to_ív
), "c"(
vÆ
),

118 "d"(
∑
), "S"(
≥rm
));

120 i‡(
r
 < 0)

121 
	`∑nic
("îr‹ i¿ùc_£nd: %e", 
r
);

123 
	}
}

131 
ívid_t


132 
	$ùc_föd_ív
(
EnvTy≥
 
ty≥
)

134 
i
;

135 
i
 = 0; i < 
NENV
; i++) {

136 i‡(
ívs
[
i
].
ív_ty≥
 =
ty≥
)

137  
ívs
[
i
].
ív_id
;

140 
	}
}

	@lib/libmain.c

5 
	~<öc/lib.h
>

7 
umaö
(
¨gc
, **
¨gv
);

9 c⁄° vﬁ©ûê
Env
 *
	gthi£nv
;

10 c⁄° *
	gbö¨y«me
 = "<unknown>";

13 
	$libmaö
(
¨gc
, **
¨gv
)

17 
thi£nv
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

21 i‡(
¨gc
 > 0)

22 
bö¨y«me
 = 
¨gv
[0];

25 
	`umaö
(
¨gc
, 
¨gv
);

28 
	`exô
();

29 
	}
}

	@lib/malloc.c

3 
	~<öc/lib.h
>

21 
	mMAXMALLOC
 = 1024*1024

24 
	#PTE_CONTINUED
 0x400

	)

26 
uöt8_t
 *
	gmbegö
 = (uint8_t*) 0x08000000;

27 
uöt8_t
 *
	gmíd
 = (uint8_t*) 0x10000000;

28 
uöt8_t
 *
	gm±r
;

31 
	$is‰ì
(*
v
, 
size_t
 
n
)

33 
uöçå_t
 
va
, 
íd_va
 = (uöçå_tË
v
 + 
n
;

35 
va
 = (
uöçå_t
Ë
v
; v®< 
íd_va
; v®+
PGSIZE
)

36 i‡(
va
 >(
uöçå_t
Ë
míd


37 || ((
uvpd
[
	`VPD
(
va
)] & 
PTE_P
Ë&& (
uv±
[
	`PGNUM
(va)] & PTE_P)))

40 
	}
}

43 
	$mÆloc
(
size_t
 
n
)

45 
i
, 
c⁄t
;

46 
nwøp
;

47 
uöt32_t
 *
ªf
;

48 *
v
;

50 i‡(
m±r
 == 0)

51 
m±r
 = 
mbegö
;

53 
n
 = 
	`ROUNDUP
(n, 4);

55 i‡(
n
 >
MAXMALLOC
)

58 i‡((
uöçå_t
Ë
m±r
 % 
PGSIZE
){

64 
ªf
 = (
uöt32_t
*Ë(
	`ROUNDUP
(
m±r
, 
PGSIZE
) - 4);

65 i‡((
uöçå_t
Ë
m±r
 / 
PGSIZE
 =(uöçå_tË(m±∏+ 
n
 - 1 + 4) / PGSIZE) {

66 (*
ªf
)++;

67 
v
 = 
m±r
;

68 
m±r
 +
n
;

69  
v
;

74 
	`‰ì
(
m±r
);

75 
m±r
 = 
	`ROUNDDOWN
(m±∏+ 
PGSIZE
, PGSIZE);

84 
nwøp
 = 0;

86 i‡(
	`is‰ì
(
m±r
, 
n
 + 4))

88 
m±r
 +
PGSIZE
;

89 i‡(
m±r
 =
míd
) {

90 
m±r
 = 
mbegö
;

91 i‡(++
nwøp
 == 2)

99 
i
 = 0; i < 
n
 + 4; i +
PGSIZE
){

100 
c⁄t
 = (
i
 + 
PGSIZE
 < 
n
 + 4Ë? 
PTE_CONTINUED
 : 0;

101 i‡(
	`sys_∑ge_Æloc
(0, 
m±r
 + 
i
, 
PTE_P
|
PTE_U
|
PTE_W
|
c⁄t
) < 0){

102 ; 
i
 >0; i -
PGSIZE
)

103 
	`sys_∑ge_unm≠
(0, 
m±r
 + 
i
);

108 
ªf
 = (
uöt32_t
*Ë(
m±r
 + 
i
 - 4);

109 *
ªf
 = 2;

110 
v
 = 
m±r
;

111 
m±r
 +
n
;

112  
v
;

113 
	}
}

116 
	$‰ì
(*
v
)

118 
uöt8_t
 *
c
;

119 
uöt32_t
 *
ªf
;

121 i‡(
v
 == 0)

123 
	`as£π
(
mbegö
 <(
uöt8_t
*Ë
v
 && (uöt8_t*Ëv < 
míd
);

125 
c
 = 
	`ROUNDDOWN
(
v
, 
PGSIZE
);

127 
uv±
[
	`PGNUM
(
c
)] & 
PTE_CONTINUED
) {

128 
	`sys_∑ge_unm≠
(0, 
c
);

129 
c
 +
PGSIZE
;

130 
	`as£π
(
mbegö
 <
c
 && c < 
míd
);

137 
ªf
 = (
uöt32_t
*Ë(
c
 + 
PGSIZE
 - 4);

138 i‡(--(*
ªf
) == 0)

139 
	`sys_∑ge_unm≠
(0, 
c
);

140 
	}
}

	@lib/nsipc.c

2 
	~<öc/ns.h
>

3 
	~<öc/lib.h
>

4 
	~<lwù/sockës.h
>

6 
	#debug
 0

	)

9 
	#REQVA
 0x0ffff000

	)

10 
Nsùc
 
nsùcbuf
 
__©åibuã__
((
Æig√d
(
PGSIZE
)));

18 
	$nsùc
(
ty≥
)

20 
ívid_t
 
n£nv
;

21 i‡(
n£nv
 == 0)

22 
n£nv
 = 
	`ùc_föd_ív
(
ENV_TYPE_NS
);

24 
	`°©ic_as£π
((
nsùcbuf
Ë=
PGSIZE
);

26 i‡(
debug
)

27 
	`˝rötf
("[%08x]Çsù¯%d\n", 
thi£nv
->
ív_id
, 
ty≥
);

29 
	`ùc_£nd
(
n£nv
, 
ty≥
, &
nsùcbuf
, 
PTE_P
|
PTE_W
|
PTE_U
);

30  
	`ùc_ªcv
(
NULL
, NULL, NULL);

31 
	}
}

34 
	$nsùc_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

36 
r
;

38 
nsùcbuf
.
ac˚±
.
ªq_s
 = 
s
;

39 i‡((
r
 = 
	`nsùc
(
NSREQ_ACCEPT
)) >= 0) {

40 
N§ë_ac˚±
 *
ªt
 = &
nsùcbuf
.
ac˚±Rë
;

41 
	`memmove
(
addr
, &
ªt
->
ªt_addr
,Ñë->
ªt_addæí
);

42 *
addæí
 = 
ªt
->
ªt_addæí
;

44  
r
;

45 
	}
}

48 
	$nsùc_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

50 
nsùcbuf
.
böd
.
ªq_s
 = 
s
;

51 
	`memmove
(&
nsùcbuf
.
böd
.
ªq_«me
, 
«me
, 
«mñí
);

52 
nsùcbuf
.
böd
.
ªq_«mñí
 = 
«mñí
;

53  
	`nsùc
(
NSREQ_BIND
);

54 
	}
}

57 
	$nsùc_shutdown
(
s
, 
how
)

59 
nsùcbuf
.
shutdown
.
ªq_s
 = 
s
;

60 
nsùcbuf
.
shutdown
.
ªq_how
 = 
how
;

61  
	`nsùc
(
NSREQ_SHUTDOWN
);

62 
	}
}

65 
	$nsùc_˛o£
(
s
)

67 
nsùcbuf
.
˛o£
.
ªq_s
 = 
s
;

68  
	`nsùc
(
NSREQ_CLOSE
);

69 
	}
}

72 
	$nsùc_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

74 
nsùcbuf
.
c⁄√˘
.
ªq_s
 = 
s
;

75 
	`memmove
(&
nsùcbuf
.
c⁄√˘
.
ªq_«me
, 
«me
, 
«mñí
);

76 
nsùcbuf
.
c⁄√˘
.
ªq_«mñí
 = 
«mñí
;

77  
	`nsùc
(
NSREQ_CONNECT
);

78 
	}
}

81 
	$nsùc_li°í
(
s
, 
backlog
)

83 
nsùcbuf
.
li°í
.
ªq_s
 = 
s
;

84 
nsùcbuf
.
li°í
.
ªq_backlog
 = 
backlog
;

85  
	`nsùc
(
NSREQ_LISTEN
);

86 
	}
}

89 
	$nsùc_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
)

91 
r
;

93 
nsùcbuf
.
ªcv
.
ªq_s
 = 
s
;

94 
nsùcbuf
.
ªcv
.
ªq_Àn
 = 
Àn
;

95 
nsùcbuf
.
ªcv
.
ªq_Êags
 = 
Êags
;

97 i‡((
r
 = 
	`nsùc
(
NSREQ_RECV
)) >= 0) {

98 
	`as£π
(
r
 < 1600 &&Ñ <
Àn
);

99 
	`memmove
(
mem
, 
nsùcbuf
.
ªcvRë
.
ªt_buf
, 
r
);

102  
r
;

103 
	}
}

106 
	$nsùc_£nd
(
s
, c⁄° *
buf
, 
size
, 
Êags
)

108 
nsùcbuf
.
£nd
.
ªq_s
 = 
s
;

109 
	`as£π
(
size
 < 1600);

110 
	`memmove
(&
nsùcbuf
.
£nd
.
ªq_buf
, 
buf
, 
size
);

111 
nsùcbuf
.
£nd
.
ªq_size
 = 
size
;

112 
nsùcbuf
.
£nd
.
ªq_Êags
 = 
Êags
;

113  
	`nsùc
(
NSREQ_SEND
);

114 
	}
}

117 
	$nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

119 
nsùcbuf
.
sockë
.
ªq_domaö
 = 
domaö
;

120 
nsùcbuf
.
sockë
.
ªq_ty≥
 = 
ty≥
;

121 
nsùcbuf
.
sockë
.
ªq_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

122  
	`nsùc
(
NSREQ_SOCKET
);

123 
	}
}

	@lib/pageref.c

2 
	~<öc/lib.h
>

5 
	$∑gîef
(*
v
)

7 
±e_t
 
±e
;

9 i‡(!(
uvpd
[
	`VPD
(
v
)] & 
PTE_P
))

11 
±e
 = 
uv±
[
	`PGNUM
(
v
)];

12 i‡(!(
±e
 & 
PTE_P
))

14  
∑ges
[
	`PPN
(
±e
)].
µ_ªf
;

15 
	}
}

	@lib/panic.c

3 
	~<öc/lib.h
>

11 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...)

13 
va_li°
 
≠
;

15 
	`va_°¨t
(
≠
, 
fmt
);

18 
	`˝rötf
("[%08x] userÖanic in %sát %s:%d: ",

19 
	`sys_gëívid
(), 
bö¨y«me
, 
fûe
, 
löe
);

20 
	`v˝rötf
(
fmt
, 
≠
);

21 
	`˝rötf
("\n");

25 
asm
 volatile("int3");

26 
	}
}

	@lib/pgfault.c

8 
	~<öc/lib.h
>

12 
_pgÁu…_upˇŒ
();

15 (*
_pgÁu…_h™dÀr
)(
UTøp‰ame
 *
utf
);

26 
	`£t_pgÁu…_h™dÀr
((*
h™dÀr
)(
UTøp‰ame
 *
utf
))

28 
r
;

30 i‡(
_pgÁu…_h™dÀr
 == 0) {

33 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë(
UXSTACKTOP
 - 
PGSIZE
), 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

34 
	`∑nic
("ÆloˇtögÉx˚±i⁄ sèck: %e", 
r
);

37 
	`sys_ív_£t_pgÁu…_upˇŒ
(0, (*Ë
_pgÁu…_upˇŒ
);

42 
_pgÁu…_h™dÀr
 = 
h™dÀr
;

43 
	}
}

	@lib/pipe.c

6 
	~<öc/lib.h
>

8 
	#debug
 0

	)

10 
ssize_t
 
devpùe_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
);

11 
ssize_t
 
devpùe_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
);

12 
devpùe_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
);

13 
devpùe_˛o£
(
Fd
 *
fd
);

15 
Dev
 
	gdevpùe
 =

17 .
dev_id
 = 'p',

18 .
	gdev_«me
 = "pipe",

19 .
	gdev_ªad
 = 
devpùe_ªad
,

20 .
	gdev_wrôe
 = 
devpùe_wrôe
,

21 .
	gdev_˛o£
 = 
devpùe_˛o£
,

22 .
	gdev_°©
 = 
devpùe_°©
,

25 
	#PIPEBUFSIZ
 32

26 

	)

27 
	sPùe
 {

28 
off_t
 
	mp_Ωos
;

29 
off_t
 
	mp_wpos
;

30 
uöt8_t
 
	mp_buf
[
PIPEBUFSIZ
];

34 
	$pùe
(
pfd
[2])

36 
r
;

37 
Fd
 *
fd0
, *
fd1
;

38 *
va
;

41 i‡((
r
 = 
	`fd_Æloc
(&
fd0
)) < 0

42 || (
r
 = 
	`sys_∑ge_Æloc
(0, 
fd0
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

43 
îr
;

45 i‡((
r
 = 
	`fd_Æloc
(&
fd1
)) < 0

46 || (
r
 = 
	`sys_∑ge_Æloc
(0, 
fd1
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

47 
îr1
;

50 
va
 = 
	`fd2d©a
(
fd0
);

51 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
va
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

52 
îr2
;

53 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
va
, 0, 
	`fd2d©a
(
fd1
), 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

54 
îr3
;

57 
fd0
->
fd_dev_id
 = 
devpùe
.
dev_id
;

58 
fd0
->
fd_omode
 = 
O_RDONLY
;

60 
fd1
->
fd_dev_id
 = 
devpùe
.
dev_id
;

61 
fd1
->
fd_omode
 = 
O_WRONLY
;

63 i‡(
debug
)

64 
	`˝rötf
("[%08x]Öùe¸óã %08x\n", 
thi£nv
->
ív_id
, 
uv±
[
	`PGNUM
(
va
)]);

66 
pfd
[0] = 
	`fd2num
(
fd0
);

67 
pfd
[1] = 
	`fd2num
(
fd1
);

70 
îr3
:

71 
	`sys_∑ge_unm≠
(0, 
va
);

72 
îr2
:

73 
	`sys_∑ge_unm≠
(0, 
fd1
);

74 
îr1
:

75 
	`sys_∑ge_unm≠
(0, 
fd0
);

76 
îr
:

77  
r
;

78 
	}
}

81 
	$_pùeis˛o£d
(
Fd
 *
fd
, 
Pùe
 *
p
)

84 
n
, 
¬
, 
ªt
;

87 
n
 = 
thi£nv
->
ív_runs
;

88 
ªt
 = 
	`∑gîef
(
fd
Ë=∑gîef(
p
);

89 
¬
 = 
thi£nv
->
ív_runs
;

90 i‡(
n
 =
¬
)

91  
ªt
;

92 i‡(
n
 !
¬
 && 
ªt
 == 1)

93 
	`˝rötf
("pùêø˚ávoided\n", 
n
, 
thi£nv
->
ív_runs
, 
ªt
);

96 
	}
}

99 
	$pùeis˛o£d
(
fdnum
)

101 
Fd
 *
fd
;

102 
Pùe
 *
p
;

103 
r
;

105 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

106  
r
;

107 
p
 = (
Pùe
*Ë
	`fd2d©a
(
fd
);

108  
	`_pùeis˛o£d
(
fd
, 
p
);

109 
	}
}

111 
ssize_t


112 
	$devpùe_ªad
(
Fd
 *
fd
, *
vbuf
, 
size_t
 
n
)

115 
uöt8_t
 *
buf
;

116 
size_t
 
i
;

117 
Pùe
 *
p
;

119 
p
 = (
Pùe
*)
	`fd2d©a
(
fd
);

120 i‡(
debug
)

121 
	`˝rötf
("[%08x] devpipe_read %08x %dÑpos %d wpos %d\n",

122 
thi£nv
->
ív_id
, 
uv±
[
	`PGNUM
(
p
)], 
n
,Ö->
p_Ωos
,Ö->
p_wpos
);

124 
buf
 = 
vbuf
;

125 
i
 = 0; i < 
n
; i++) {

126 
p
->
p_Ωos
 =p->
p_wpos
) {

129 i‡(
i
 > 0)

130  
i
;

132 i‡(
	`_pùeis˛o£d
(
fd
, 
p
))

135 i‡(
debug
)

136 
	`˝rötf
("devpipe_read yield\n");

137 
	`sys_yõld
();

141 
buf
[
i
] = 
p
->
p_buf
[p->
p_Ωos
 % 
PIPEBUFSIZ
];

142 
p
->
p_Ωos
++;

144  
i
;

146 
	}
}

148 
ssize_t


149 
	$devpùe_wrôe
(
Fd
 *
fd
, c⁄° *
vbuf
, 
size_t
 
n
)

152 c⁄° 
uöt8_t
 *
buf
;

153 
size_t
 
i
;

154 
Pùe
 *
p
;

156 
p
 = (
Pùe
*Ë
	`fd2d©a
(
fd
);

157 i‡(
debug
)

158 
	`˝rötf
("[%08x] devpipe_write %08x %dÑpos %d wpos %d\n",

159 
thi£nv
->
ív_id
, 
uv±
[
	`PGNUM
(
p
)], 
n
,Ö->
p_Ωos
,Ö->
p_wpos
);

161 
buf
 = 
vbuf
;

162 
i
 = 0; i < 
n
; i++) {

163 
p
->
p_wpos
 >p->
p_Ωos
 + ’->
p_buf
)) {

168 i‡(
	`_pùeis˛o£d
(
fd
, 
p
))

171 i‡(
debug
)

172 
	`˝rötf
("devpipe_write yield\n");

173 
	`sys_yõld
();

177 
p
->
p_buf
[p->
p_wpos
 % 
PIPEBUFSIZ
] = 
buf
[
i
];

178 
p
->
p_wpos
++;

181  
i
;

183 
	}
}

186 
	$devpùe_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
)

188 
Pùe
 *
p
 = (Pùe*Ë
	`fd2d©a
(
fd
);

189 
	`°r˝y
(
°©
->
°_«me
, "<pipe>");

190 
°©
->
°_size
 = 
p
->
p_wpos
 -Ö->
p_Ωos
;

191 
°©
->
°_isdú
 = 0;

192 
°©
->
°_dev
 = &
devpùe
;

194 
	}
}

197 
	$devpùe_˛o£
(
Fd
 *
fd
)

200 (Ë
	`sys_∑ge_unm≠
(0, 
fd
);

202  
	`sys_∑ge_unm≠
(0, 
	`fd2d©a
(
fd
));

203 
	}
}

	@lib/printf.c

9 
	~<öc/ty≥s.h
>

10 
	~<öc/°dio.h
>

11 
	~<öc/°d¨g.h
>

12 
	~<öc/lib.h
>

20 
	s¥ötbuf
 {

21 
	midx
;

22 
	m˙t
;

23 
	mbuf
[256];

28 
	$putch
(
ch
, 
¥ötbuf
 *
b
)

30 
b
->
buf
[b->
idx
++] = 
ch
;

31 i‡(
b
->
idx
 == 256-1) {

32 
	`sys_˝uts
(
b
->
buf
, b->
idx
);

33 
b
->
idx
 = 0;

35 
b
->
˙t
++;

36 
	}
}

39 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

41 
¥ötbuf
 
b
;

42 
va_li°
 
aq
;

43 
	`va_c›y
(
aq
,
≠
);

44 
b
.
idx
 = 0;

45 
b
.
˙t
 = 0;

46 
	`v¥ötfmt
((*)
putch
, &
b
, 
fmt
, 
aq
);

47 
	`sys_˝uts
(
b
.
buf
, b.
idx
);

48 
	`va_íd
(
aq
);

50  
b
.
˙t
;

51 
	}
}

54 
	$˝rötf
(c⁄° *
fmt
, ...)

56 
va_li°
 
≠
;

57 
˙t
;

58 
va_li°
 
aq
;

59 
	`va_°¨t
(
≠
, 
fmt
);

60 
	`va_c›y
(
aq
,
≠
);

61 
˙t
 = 
	`v˝rötf
(
fmt
, 
aq
);

62 
	`va_íd
(
aq
);

64  
˙t
;

65 
	}
}

	@lib/printfmt.c

6 
	~<öc/ty≥s.h
>

7 
	~<öc/°dio.h
>

8 
	~<öc/°rög.h
>

9 
	~<öc/°d¨g.h
>

10 
	~<öc/îr‹.h
>

22 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
] =

24 [
E_UNSPECIFIED
] = "unspecifiedÉrror",

25 [
E_BAD_ENV
] = "badÉnvironment",

26 [
E_INVAL
] = "invalidÖarameter",

27 [
E_NO_MEM
] = "out of memory",

28 [
E_NO_FREE_ENV
] = "out ofÉnvironments",

29 [
E_FAULT
] = "segmentation fault",

31 [
E_IPC_NOT_RECV
]= "env isÇotÑecving",

32 [
E_EOF
] = "unexpectedÉnd of file",

34 [
E_NO_DISK
] = "no free space on disk",

35 [
E_MAX_OPEN
] = "too many filesáre open",

36 [
E_NOT_FOUND
] = "file or blockÇot found",

37 [
E_BAD_PATH
] = "invalidÖath",

38 [
E_FILE_EXISTS
] = "fileálreadyÉxists",

39 [
E_NOT_EXEC
] = "file isÇotá validÉxecutable",

40 [
E_NOT_SUPP
] = "operationÇot supported",

49 
¥öäum
((*
putch
)(, *), *
putd©
,

50 
num
, 
ba£
, 
width
, 
∑dc
)

53 i‡(
num
 >
ba£
) {

54 
	`¥öäum
(
putch
, 
putd©
, 
num
 / 
ba£
, ba£, 
width
 - 1, 
∑dc
);

57 --
width
 > 0)

58 
	`putch
(
∑dc
, 
putd©
);

62 
	`putch
("0123456789abcdef"[
num
 % 
ba£
], 
putd©
);

63 
	}
}

68 
	$gëuöt
(
va_li°
 *
≠
, 
lÊag
)

70 
x
;

71 i‡(
lÊag
 >= 2)

72 
x

	`va_¨g
(*
≠
, );

73 i‡(
lÊag
)

74 
x

	`va_¨g
(*
≠
, );

76 
x

	`va_¨g
(*
≠
, );

77  
x
;

78 
	}
}

83 
	$gëöt
(
va_li°
 *
≠
, 
lÊag
)

85 
x
;

86 i‡(
lÊag
 >= 2)

87 
x
=
	`va_¨g
(*
≠
, );

88 i‡(
lÊag
)

89 
x
=
	`va_¨g
(*
≠
, );

91 
x
=
	`va_¨g
(*
≠
, );

92  
x
;

93 
	}
}

97 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

100 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
)

102 c⁄° *
p
;

103 
ch
, 
îr
;

104 
num
;

105 
ba£
, 
lÊag
, 
width
, 
¥ecisi⁄
, 
ÆtÊag
;

106 
∑dc
;

107 
va_li°
 
aq
;

108 
	`va_c›y
(
aq
,
≠
);

110 (
ch
 = *(*Ë
fmt
++) != '%') {

111 i‡(
ch
 == '\0')

113 
	`putch
(
ch
, 
putd©
);

117 
∑dc
 = ' ';

118 
width
 = -1;

119 
¥ecisi⁄
 = -1;

120 
lÊag
 = 0;

121 
ÆtÊag
 = 0;

122 
ªswôch
:

123 
ch
 = *(*Ë
fmt
++) {

127 
∑dc
 = '-';

128 
ªswôch
;

132 
∑dc
 = '0';

133 
ªswôch
;

145 
¥ecisi⁄
 = 0; ; ++
fmt
) {

146 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

147 
ch
 = *
fmt
;

148 i‡(
ch
 < '0' || ch > '9')

151 
¥o˚ss_¥ecisi⁄
;

154 
¥ecisi⁄
 = 
	`va_¨g
(
aq
, );

155 
¥o˚ss_¥ecisi⁄
;

158 i‡(
width
 < 0)

159 
width
 = 0;

160 
ªswôch
;

163 
ÆtÊag
 = 1;

164 
ªswôch
;

166 
¥o˚ss_¥ecisi⁄
:

167 i‡(
width
 < 0)

168 
width
 = 
¥ecisi⁄
,Örecision = -1;

169 
ªswôch
;

173 
lÊag
++;

174 
ªswôch
;

178 
	`putch
(
	`va_¨g
(
aq
, ), 
putd©
);

183 
îr
 = 
	`va_¨g
(
aq
, );

184 i‡(
îr
 < 0)

185 
îr
 = -err;

186 i‡(
îr
 >
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
)

187 
	`¥ötfmt
(
putch
, 
putd©
, "îr‹ %d", 
îr
);

189 
	`¥ötfmt
(
putch
, 
putd©
, "%s", 
p
);

194 i‡((
p
 = 
	`va_¨g
(
aq
, *)Ë=
NULL
)

195 
p
 = "(null)";

196 i‡(
width
 > 0 && 
∑dc
 != '-')

197 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width--)

198 
	`putch
(
∑dc
, 
putd©
);

199 ; (
ch
 = *
p
++Ë!'\0' && (
¥ecisi⁄
 < 0 || --¥ecisi⁄ >0); 
width
--)

200 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~'))

201 
	`putch
('?', 
putd©
);

203 
	`putch
(
ch
, 
putd©
);

204 ; 
width
 > 0; width--)

205 
	`putch
(' ', 
putd©
);

210 
num
 = 
	`gëöt
(&
aq
, 3);

211 i‡((Ë
num
 < 0) {

212 
	`putch
('-', 
putd©
);

213 
num
 = -()Çum;

215 
ba£
 = 10;

216 
numbî
;

220 
num
 = 
	`gëuöt
(&
aq
, 3);

221 
ba£
 = 10;

222 
numbî
;

227 
num
 = 
	`gëuöt
(&
aq
, 3);

228 
ba£
 = 8;

229 
numbî
;

234 
	`putch
('0', 
putd©
);

235 
	`putch
('x', 
putd©
);

236 
num
 = ()

237 (
uöçå_t
Ë
	`va_¨g
(
aq
, *);

238 
ba£
 = 16;

239 
numbî
;

243 
num
 = 
	`gëuöt
(&
aq
, 3);

244 
ba£
 = 16;

245 
numbî
:

246 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

251 
	`putch
(
ch
, 
putd©
);

256 
	`putch
('%', 
putd©
);

257 
fmt
--; fmt[-1] != '%'; fmt--)

262 
	`va_íd
(
aq
);

263 
	}
}

266 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...)

268 
va_li°
 
≠
;

270 
	`va_°¨t
(
≠
, 
fmt
);

271 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

272 
	`va_íd
(
≠
);

273 
	}
}

275 
	s•rötbuf
 {

276 *
	mbuf
;

277 *
	mebuf
;

278 
	m˙t
;

282 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
)

284 
b
->
˙t
++;

285 i‡(
b
->
buf
 < b->
ebuf
)

286 *
b
->
buf
++ = 
ch
;

287 
	}
}

290 
	$v¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, 
va_li°
 
≠
)

292 
va_li°
 
aq
;

293 
	`va_c›y
(
aq
,
≠
);

294 
•rötbuf
 
b
 = {
buf
, buf+
n
-1, 0};

296 i‡(
buf
 =
NULL
 || 
n
 < 1)

297  -
E_INVAL
;

300 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
aq
);

301 
	`va_íd
(
aq
);

303 *
b
.
buf
 = '\0';

305  
b
.
˙t
;

306 
	}
}

309 
	$¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, ...)

311 
va_li°
 
≠
;

312 
rc
;

313 
va_li°
 
aq
;

314 
	`va_°¨t
(
≠
, 
fmt
);

315 
	`va_c›y
(
aq
,
≠
);

316 
rc
 = 
	`v¢¥ötf
(
buf
, 
n
, 
fmt
, 
aq
);

317 
	`va_íd
(
aq
);

319  
rc
;

320 
	}
}

	@lib/readline.c

2 
	~<öc/°dio.h
>

3 
	~<öc/îr‹.h
>

5 
	#BUFLEN
 1024

	)

6 
	gbuf
[
BUFLEN
];

9 
	$ªadlöe
(c⁄° *
¥om±
)

11 
i
, 
c
, 
echoög
;

14 #i‡
JOS_KERNEL


15 i‡(
¥om±
 !
NULL
)

16 
	`˝rötf
("%s", 
¥om±
);

18 i‡(
¥om±
 !
NULL
)

19 
	`Ârötf
(1, "%s", 
¥om±
);

23 
i
 = 0;

24 
echoög
 = 
	`isc⁄s
(0);

26 
c
 = 
	`gëch¨
();

27 i‡(
c
 < 0) {

29 i‡(
c
 !-
E_EOF
)

30 
	`˝rötf
("ªadÉº‹: %e\n", 
c
);

32  
NULL
;

33 } i‡((
c
 ='\b' || c ='\x7f'Ë&& 
i
 > 0) {

34 i‡(
echoög
)

35 
	`˝utch¨
('\b');

36 
i
--;

37 } i‡(
c
 >' ' && 
i
 < 
BUFLEN
-1) {

38 i‡(
echoög
)

39 
	`˝utch¨
(
c
);

40 
buf
[
i
++] = 
c
;

41 } i‡(
c
 == '\n' || c == '\r') {

42 i‡(
echoög
)

43 
	`˝utch¨
('\n');

44 
buf
[
i
] = 0;

45  
buf
;

48 
	}
}

	@lib/sockets.c

2 
	~<öc/lib.h
>

3 
	~<lwù/sockës.h
>

5 
ssize_t
 
devsock_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
);

6 
ssize_t
 
devsock_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
);

7 
devsock_˛o£
(
Fd
 *
fd
);

8 
devsock_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
);

10 
Dev
 
	gdevsock
 =

12 .
dev_id
 = 's',

13 .
	gdev_«me
 = "sock",

14 .
	gdev_ªad
 = 
devsock_ªad
,

15 .
	gdev_wrôe
 = 
devsock_wrôe
,

16 .
	gdev_˛o£
 = 
devsock_˛o£
,

17 .
	gdev_°©
 = 
devsock_°©
,

21 
	$fd2sockid
(
fd
)

23 
Fd
 *
sfd
;

24 
r
;

26 i‡((
r
 = 
	`fd_lookup
(
fd
, &
sfd
)) < 0)

27  
r
;

28 i‡(
sfd
->
fd_dev_id
 !
devsock
.
dev_id
)

29  -
E_NOT_SUPP
;

30  
sfd
->
fd_sock
.
sockid
;

31 
	}
}

34 
	$Æloc_sockfd
(
sockid
)

36 
Fd
 *
sfd
;

37 
r
;

39 i‡((
r
 = 
	`fd_Æloc
(&
sfd
)) < 0

40 || (
r
 = 
	`sys_∑ge_Æloc
(0, 
sfd
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0) {

41 
	`nsùc_˛o£
(
sockid
);

42  
r
;

45 
sfd
->
fd_dev_id
 = 
devsock
.
dev_id
;

46 
sfd
->
fd_omode
 = 
O_RDWR
;

47 
sfd
->
fd_sock
.
sockid
 = sockid;

48  
	`fd2num
(
sfd
);

49 
	}
}

52 
	$ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

54 
r
;

55 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

56  
r
;

57 i‡((
r
 = 
	`nsùc_ac˚±
‘, 
addr
, 
addæí
)) < 0)

58  
r
;

59  
	`Æloc_sockfd
(
r
);

60 
	}
}

63 
	$böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

65 
r
;

66 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

67  
r
;

68  
	`nsùc_böd
(
r
, 
«me
, 
«mñí
);

69 
	}
}

72 
	$shutdown
(
s
, 
how
)

74 
r
;

75 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

76  
r
;

77  
	`nsùc_shutdown
(
r
, 
how
);

78 
	}
}

81 
	$devsock_˛o£
(
Fd
 *
fd
)

83 i‡(
	`∑gîef
(
fd
) == 1)

84  
	`nsùc_˛o£
(
fd
->
fd_sock
.
sockid
);

87 
	}
}

90 
	$c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

92 
r
;

93 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

94  
r
;

95  
	`nsùc_c⁄√˘
(
r
, 
«me
, 
«mñí
);

96 
	}
}

99 
	$li°í
(
s
, 
backlog
)

101 
r
;

102 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

103  
r
;

104  
	`nsùc_li°í
(
r
, 
backlog
);

105 
	}
}

107 
ssize_t


108 
	$devsock_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
)

110  
	`nsùc_ªcv
(
fd
->
fd_sock
.
sockid
, 
buf
, 
n
, 0);

111 
	}
}

113 
ssize_t


114 
	$devsock_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
)

116  
	`nsùc_£nd
(
fd
->
fd_sock
.
sockid
, 
buf
, 
n
, 0);

117 
	}
}

120 
	$devsock_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
)

122 
	`°r˝y
(
°©
->
°_«me
, "<sock>");

124 
	}
}

127 
	$sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

129 
r
;

130 i‡((
r
 = 
	`nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)) < 0)

131  
r
;

132  
	`Æloc_sockfd
(
r
);

133 
	}
}

	@lib/spawn.c

2 
	~<öc/lib.h
>

3 
	~<öc/ñf.h
>

5 
	#UTEMP2USTACK
(
addr
Ë((*Ë◊ddrË+ (
USTACKTOP
 - 
PGSIZE
Ë- 
UTEMP
)

	)

6 
	#UTEMP2
 (
UTEMP
 + 
PGSIZE
)

	)

7 
	#UTEMP3
 (
UTEMP2
 + 
PGSIZE
)

	)

10 
öô_°ack
(
ívid_t
 
chûd
, c⁄° **
¨gv
, 
uöçå_t
 *
öô_e•
);

11 
m≠_£gmít
(
ívid_t
 
chûd
, 
uöçå_t
 
va
, 
size_t
 
memsz
,

12 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
, 
≥rm
);

14 
c›y_sh¨ed_∑ges
(
ívid_t
 
chûd
);

23 
	$•awn
(c⁄° *
¥og
, c⁄° **
¨gv
)

25 
ñf_buf
[512];

26 
Tøp‰ame
 
chûd_tf
;

27 
ívid_t
 
chûd
;

29 
fd
, 
i
, 
r
;

30 
Elf
 *
ñf
;

31 
Proghdr
 *
ph
;

32 
≥rm
;

91 i‡((
r
 = 
	`›í
(
¥og
, 
O_RDONLY
)) < 0)

92  
r
;

93 
fd
 = 
r
;

96 
ñf
 = (
Elf
*Ë
ñf_buf
;

97 i‡(
	`ªadn
(
fd
, 
ñf_buf
, (elf_buf)) != (elf_buf)

98 || 
ñf
->
e_magic
 !
ELF_MAGIC
) {

99 
	`˛o£
(
fd
);

100 
	`˝rötf
("ñ‡magi¯%08x w™à%08x\n", 
ñf
->
e_magic
, 
ELF_MAGIC
);

101  -
E_NOT_EXEC
;

105 i‡((
r
 = 
	`sys_exof‹k
()) < 0)

106  
r
;

107 
chûd
 = 
r
;

110 
chûd_tf
 = 
ívs
[
	`ENVX
(
chûd
)].
ív_tf
;

111 
chûd_tf
.
tf_rù
 = 
ñf
->
e_íåy
;

113 i‡((
r
 = 
	`öô_°ack
(
chûd
, 
¨gv
, &
chûd_tf
.
tf_r•
)) < 0)

114  
r
;

117 
ph
 = (
Proghdr
*Ë(
ñf_buf
 + 
ñf
->
e_phoff
);

118 
i
 = 0; i < 
ñf
->
e_phnum
; i++, 
ph
++) {

119 i‡(
ph
->
p_ty≥
 !
ELF_PROG_LOAD
)

121 
≥rm
 = 
PTE_P
 | 
PTE_U
;

122 i‡(
ph
->
p_Êags
 & 
ELF_PROG_FLAG_WRITE
)

123 
≥rm
 |
PTE_W
;

124 i‡((
r
 = 
	`m≠_£gmít
(
chûd
, 
ph
->
p_va
,Öh->
p_memsz
,

125 
fd
, 
ph
->
p_fûesz
,Öh->
p_off£t
, 
≥rm
)) < 0)

126 
îr‹
;

128 
	`˛o£
(
fd
);

129 
fd
 = -1;

133 i‡((
r
 = 
	`c›y_sh¨ed_∑ges
(
chûd
)) < 0)

134 
	`∑nic
("c›y_sh¨ed_∑ges: %e", 
r
);

137 i‡((
r
 = 
	`sys_ív_£t_å≠‰ame
(
chûd
, &
chûd_tf
)) < 0)

138 
	`∑nic
("sys_ív_£t_å≠‰ame: %e", 
r
);

140 i‡((
r
 = 
	`sys_ív_£t_°©us
(
chûd
, 
ENV_RUNNABLE
)) < 0)

141 
	`∑nic
("sys_ív_£t_°©us: %e", 
r
);

143  
chûd
;

145 
îr‹
:

146 
	`sys_ív_de°roy
(
chûd
);

147 
	`˛o£
(
fd
);

148  
r
;

149 
	}
}

155 
	$•aw∆
(c⁄° *
¥og
, c⁄° *
¨g0
, ...)

161 
¨gc
=0;

162 
va_li°
 
vl
;

163 
	`va_°¨t
(
vl
, 
¨g0
);

164 
	`va_¨g
(
vl
, *Ë!
NULL
)

165 
¨gc
++;

166 
	`va_íd
(
vl
);

170 c⁄° *
¨gv
[
¨gc
+2];

171 
¨gv
[0] = 
¨g0
;

172 
¨gv
[
¨gc
+1] = 
NULL
;

174 
	`va_°¨t
(
vl
, 
¨g0
);

175 
i
;

176 
i
=0;i<
¨gc
;i++)

177 
¨gv
[
i
+1] = 
	`va_¨g
(
vl
, const *);

178 
	`va_íd
(
vl
);

179  
	`•awn
(
¥og
, 
¨gv
);

180 
	}
}

191 
	$öô_°ack
(
ívid_t
 
chûd
, c⁄° **
¨gv
, 
uöçå_t
 *
öô_e•
)

193 
size_t
 
°rög_size
;

194 
¨gc
, 
i
, 
r
;

195 *
°rög_°‹e
;

196 
uöçå_t
 *
¨gv_°‹e
;

200 
°rög_size
 = 0;

201 
¨gc
 = 0; 
¨gv
[argc] != 0;árgc++)

202 
°rög_size
 +
	`°æí
(
¨gv
[
¨gc
]) + 1;

209 
°rög_°‹e
 = (*Ë
UTEMP
 + 
PGSIZE
 - 
°rög_size
;

212 
¨gv_°‹e
 = (
uöçå_t
*Ë(
	`ROUNDDOWN
(
°rög_°‹e
, 8Ë- 8 * (
¨gc
 + 1));

216 i‡((*Ë(
¨gv_°‹e
 - 2Ë< (*Ë
UTEMP
)

217  -
E_NO_MEM
;

220 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

221  
r
;

240 
i
 = 0; i < 
¨gc
; i++) {

241 
¨gv_°‹e
[
i
] = 
	`UTEMP2USTACK
(
°rög_°‹e
);

242 
	`°r˝y
(
°rög_°‹e
, 
¨gv
[
i
]);

243 
°rög_°‹e
 +
	`°æí
(
¨gv
[
i
]) + 1;

245 
¨gv_°‹e
[
¨gc
] = 0;

246 
	`as£π
(
°rög_°‹e
 =(*)
UTEMP
 + 
PGSIZE
);

248 
¨gv_°‹e
[-1] = 
	`UTEMP2USTACK
(argv_store);

249 
¨gv_°‹e
[-2] = 
¨gc
;

251 *
öô_e•
 = 
	`UTEMP2USTACK
(&
¨gv_°‹e
[-2]);

255 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
UTEMP
, 
chûd
, (*Ë(
USTACKTOP
 - 
PGSIZE
), 
PTE_P
 | 
PTE_U
 | 
PTE_W
)) < 0)

256 
îr‹
;

257 i‡((
r
 = 
	`sys_∑ge_unm≠
(0, 
UTEMP
)) < 0)

258 
îr‹
;

262 
îr‹
:

263 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

264  
r
;

265 
	}
}

268 
	$m≠_£gmít
(
ívid_t
 
chûd
, 
uöçå_t
 
va
, 
size_t
 
memsz
,

269 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
, 
≥rm
)

271 
i
, 
r
;

272 *
blk
;

276 i‡((
i
 = 
	`PGOFF
(
va
))) {

277 
va
 -
i
;

278 
memsz
 +
i
;

279 
fûesz
 +
i
;

280 
fûeoff£t
 -
i
;

283 
i
 = 0; i < 
memsz
; i +
PGSIZE
) {

284 i‡(
i
 >
fûesz
) {

286 i‡((
r
 = 
	`sys_∑ge_Æloc
(
chûd
, (*Ë(
va
 + 
i
), 
≥rm
)) < 0)

287  
r
;

290 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

291  
r
;

292 i‡((
r
 = 
	`£ek
(
fd
, 
fûeoff£t
 + 
i
)) < 0)

293  
r
;

294 i‡((
r
 = 
	`ªadn
(
fd
, 
UTEMP
, 
	`MIN
(
PGSIZE
, 
fûesz
-
i
))) < 0)

295  
r
;

296 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
UTEMP
, 
chûd
, (*Ë(
va
 + 
i
), 
≥rm
)) < 0)

297 
	`∑nic
("•awn: sys_∑ge_m≠ d©a: %e", 
r
);

298 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

302 
	}
}

307 
	$c›y_sh¨ed_∑ges
(
ívid_t
 
chûd
)

310 
öt64_t
 
≤
, 
œ°_≤
, 
r
;

311 * 
va
;

313 
≤
 = 0;Ö¿< 
	`PGNUM
(
UTOP
); ) {

314 i‡(!(
uvpde
[
≤
>>18] & 
PTE_P
 && 
uvpd
[pn >> 9] & PTE_P))

315 
≤
 +
NPTENTRIES
;

317 
œ°_≤
 = 
≤
 + 
NPTENTRIES
;

318 ; 
≤
 < 
œ°_≤
;Ön++)

319 i‡((
uv±
[
≤
] & (
PTE_P
 | 
PTE_SHARE
)) == (PTE_P | PTE_SHARE)) {

320 
va
 = (*Ë(
≤
 << 
PGSHIFT
);

321 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
va
, 
chûd
, va, 
uv±
[
≤
] & 
PTE_SYSCALL
)) < 0)

322  
r
;

328 
	}
}

	@lib/string.c

4 
	~<öc/°rög.h
>

10 
	#ASM
 1

	)

13 
	$°æí
(c⁄° *
s
)

15 
n
;

17 
n
 = 0; *
s
 != '\0'; s++)

18 
n
++;

19  
n
;

20 
	}
}

23 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
size
)

25 
n
;

27 
n
 = 0; 
size
 > 0 && *
s
 != '\0'; s++, size--)

28 
n
++;

29  
n
;

30 
	}
}

33 
	$°r˝y
(*
d°
, c⁄° *
§c
)

35 *
ªt
;

37 
ªt
 = 
d°
;

38 (*
d°
++ = *
§c
++) != '\0')

40  
ªt
;

41 
	}
}

44 
	$°rˇt
(*
d°
, c⁄° *
§c
)

46 
Àn
 = 
	`°æí
(
d°
);

47 
	`°r˝y
(
d°
 + 
Àn
, 
§c
);

48  
d°
;

49 
	}
}

52 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
) {

53 
size_t
 
i
;

54 *
ªt
;

56 
ªt
 = 
d°
;

57 
i
 = 0; i < 
size
; i++) {

58 *
d°
++ = *
§c
;

60 i‡(*
§c
 != '\0')

61 
§c
++;

63  
ªt
;

64 
	}
}

66 
size_t


67 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

69 *
d°_ö
;

71 
d°_ö
 = 
d°
;

72 i‡(
size
 > 0) {

73 --
size
 > 0 && *
§c
 != '\0')

74 *
d°
++ = *
§c
++;

75 *
d°
 = '\0';

77  
d°
 - 
d°_ö
;

78 
	}
}

81 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

83 *
p
 && *∞=*
q
)

84 
p
++, 
q
++;

85  (Ë((Ë*
p
 - (Ë*
q
);

86 
	}
}

89 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
size_t
 
n
)

91 
n
 > 0 && *
p
 && *∞=*
q
)

92 
n
--, 
p
++, 
q
++;

93 i‡(
n
 == 0)

96  (Ë((Ë*
p
 - (Ë*
q
);

97 
	}
}

102 
	$°rchr
(c⁄° *
s
, 
c
)

104 ; *
s
; s++)

105 i‡(*
s
 =
c
)

106  (*Ë
s
;

108 
	}
}

113 
	$°rföd
(c⁄° *
s
, 
c
)

115 ; *
s
; s++)

116 i‡(*
s
 =
c
)

118  (*Ë
s
;

119 
	}
}

121 #i‡
ASM


123 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

125 *
p
;

127 i‡(
n
 == 0)

128  
v
;

129 i‡((
öt64_t
)
v
%4 =0 && 
n
%4 == 0) {

130 
c
 &= 0xFF;

131 
c
 = (c<<24)|(c<<16)|(c<<8)|c;

132 
asm
 volatile("cld;Ñep stosl\n"

133 :: "D" (
v
), "a" (
c
), "c" (
n
/4)

136 
asm
 volatile("cld;Ñep stosb\n"

137 :: "D" (
v
), "a" (
c
), "c" (
n
)

139  
v
;

140 
	}
}

143 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

145 c⁄° *
s
;

146 *
d
;

148 
s
 = 
§c
;

149 
d
 = 
d°
;

150 i‡(
s
 < 
d
 && s + 
n
 > d) {

151 
s
 +
n
;

152 
d
 +
n
;

153 i‡((
öt64_t
)
s
%4 =0 && (öt64_t)
d
%4 =0 && 
n
%4 == 0)

154 
asm
 volatile("std;Ñep movsl\n"

155 :: "D" (
d
-4), "S" (
s
-4), "c" (
n
/4) : "cc", "memory");

157 
asm
 volatile("std;Ñep movsb\n"

158 :: "D" (
d
-1), "S" (
s
-1), "c" (
n
) : "cc", "memory");

160 
asm
 volatile("cld" ::: "cc");

162 i‡((
öt64_t
)
s
%4 =0 && (öt64_t)
d
%4 =0 && 
n
%4 == 0)

163 
asm
 volatile("cld;Ñep movsl\n"

164 :: "D" (
d
), "S" (
s
), "c" (
n
/4) : "cc", "memory");

166 
asm
 volatile("cld;Ñep movsb\n"

167 :: "D" (
d
), "S" (
s
), "c" (
n
) : "cc", "memory");

169  
d°
;

170 
	}
}

175 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

177 *
p
;

178 
m
;

180 
p
 = 
v
;

181 
m
 = 
n
;

182 --
m
 >= 0)

183 *
p
++ = 
c
;

185  
v
;

186 
	}
}

189 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

191 c⁄° *
s
;

192 *
d
;

194 
s
 = 
§c
;

195 
d
 = 
d°
;

196 i‡(
s
 < 
d
 && s + 
n
 > d) {

197 
s
 +
n
;

198 
d
 +
n
;

199 
n
-- > 0)

200 *--
d
 = *--
s
;

202 
n
-- > 0)

203 *
d
++ = *
s
++;

205  
d°
;

206 
	}
}

210 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

212  
	`memmove
(
d°
, 
§c
, 
n
);

213 
	}
}

216 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

218 c⁄° 
uöt8_t
 *
s1
 = (c⁄° uöt8_à*Ë
v1
;

219 c⁄° 
uöt8_t
 *
s2
 = (c⁄° uöt8_à*Ë
v2
;

221 
n
-- > 0) {

222 i‡(*
s1
 !*
s2
)

223  (Ë*
s1
 - (Ë*
s2
;

224 
s1
++, 
s2
++;

228 
	}
}

231 
	$memföd
(c⁄° *
s
, 
c
, 
size_t
 
n
)

233 c⁄° *
íds
 = (c⁄° *Ë
s
 + 
n
;

234 ; 
s
 < 
íds
; s++)

235 i‡(*(c⁄° *Ë
s
 =(Ë
c
)

237  (*Ë
s
;

238 
	}
}

241 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
)

243 
√g
 = 0;

244 
vÆ
 = 0;

247 *
s
 == ' ' || *s == '\t')

248 
s
++;

251 i‡(*
s
 == '+')

252 
s
++;

253 i‡(*
s
 == '-')

254 
s
++, 
√g
 = 1;

257 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x'))

258 
s
 +2, 
ba£
 = 16;

259 i‡(
ba£
 =0 && 
s
[0] == '0')

260 
s
++, 
ba£
 = 8;

261 i‡(
ba£
 == 0)

262 
ba£
 = 10;

266 
dig
;

268 i‡(*
s
 >= '0' && *s <= '9')

269 
dig
 = *
s
 - '0';

270 i‡(*
s
 >= 'a' && *s <= 'z')

271 
dig
 = *
s
 - 'a' + 10;

272 i‡(*
s
 >= 'A' && *s <= 'Z')

273 
dig
 = *
s
 - 'A' + 10;

276 i‡(
dig
 >
ba£
)

278 
s
++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

282 i‡(
íd±r
)

283 *
íd±r
 = (*Ë
s
;

284  (
√g
 ? -
vÆ
 : val);

285 
	}
}

287 * 
	$°r°r
(c⁄° *
ö
, c⁄° *
°r
)

289 
c
;

290 
size_t
 
Àn
;

292 
c
 = *
°r
++;

293 i‡(!
c
)

294  (*Ë
ö
;

296 
Àn
 = 
	`°æí
(
°r
);

298 
sc
;

301 
sc
 = *
ö
++;

302 i‡(!
sc
)

304 } 
sc
 !
c
);

305 } 
	`°∫cmp
(
ö
, 
°r
, 
Àn
) != 0);

307  (*Ë(
ö
 - 1);

308 
	}
}

	@lib/syscall.c

4 
	~<öc/sysˇŒ.h
>

5 
	~<öc/lib.h
>

7 
ölöe
 
öt64_t


8 
	$sysˇŒ
(
num
, 
check
, 
uöt64_t
 
a1
, uöt64_à
a2
, uöt64_à
a3
, uöt64_à
a4
, uöt64_à
a5
)

10 
öt64_t
 
ªt
;

24 
asm
 volatile("int %1\n"

25 : "˜" (
ªt
)

26 : "i" (
T_SYSCALL
),

27 "a" (
num
),

28 "d" (
a1
),

29 "c" (
a2
),

30 "b" (
a3
),

31 "D" (
a4
),

32 "S" (
a5
)

35 if(
check
 && 
ªt
 > 0)

36 
	`∑nic
("sysˇŒ %dÑëu∫ed %d (> 0)", 
num
, 
ªt
);

38  
ªt
;

39 
	}
}

42 
	$sys_˝uts
(c⁄° *
s
, 
size_t
 
Àn
)

44 
	`sysˇŒ
(
SYS_˝uts
, 0, (
uöt64_t
)
s
, 
Àn
, 0, 0, 0);

45 
	}
}

48 
	$sys_cgëc
()

50  
	`sysˇŒ
(
SYS_cgëc
, 0, 0, 0, 0, 0, 0);

51 
	}
}

54 
	$sys_ív_de°roy
(
ívid_t
 
ívid
)

56  
	`sysˇŒ
(
SYS_ív_de°roy
, 1, 
ívid
, 0, 0, 0, 0);

57 
	}
}

59 
ívid_t


60 
	$sys_gëívid
()

62  
	`sysˇŒ
(
SYS_gëívid
, 0, 0, 0, 0, 0, 0);

63 
	}
}

67 
	$sys_yõld
()

69 
	`sysˇŒ
(
SYS_yõld
, 0, 0, 0, 0, 0, 0);

70 
	}
}

73 
	$sys_∑ge_Æloc
(
ívid_t
 
ívid
, *
va
, 
≥rm
)

75  
	`sysˇŒ
(
SYS_∑ge_Æloc
, 1, 
ívid
, (
uöt64_t
Ë
va
, 
≥rm
, 0, 0);

76 
	}
}

79 
	$sys_∑ge_m≠
(
ívid_t
 
§˚nv
, *
§cva
,Énvid_à
d°ív
, *
d°va
, 
≥rm
)

81  
	`sysˇŒ
(
SYS_∑ge_m≠
, 1, 
§˚nv
, (
uöt64_t
Ë
§cva
, 
d°ív
, (uöt64_tË
d°va
, 
≥rm
);

82 
	}
}

85 
	$sys_∑ge_unm≠
(
ívid_t
 
ívid
, *
va
)

87  
	`sysˇŒ
(
SYS_∑ge_unm≠
, 1, 
ívid
, (
uöt64_t
Ë
va
, 0, 0, 0);

88 
	}
}

93 
	$sys_ív_£t_°©us
(
ívid_t
 
ívid
, 
°©us
)

95  
	`sysˇŒ
(
SYS_ív_£t_°©us
, 1, 
ívid
, 
°©us
, 0, 0, 0);

96 
	}
}

100 
	$sys_ív_£t_å≠‰ame
(
ívid_t
 
ívid
, 
Tøp‰ame
 *
tf
)

102  
	`sysˇŒ
(
SYS_ív_£t_å≠‰ame
, 1, 
ívid
, (
uöt64_t
Ë
tf
, 0, 0, 0);

103 
	}
}

107 
	$sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ívid
, *
upˇŒ
)

109  
	`sysˇŒ
(
SYS_ív_£t_pgÁu…_upˇŒ
, 1, 
ívid
, (
uöt64_t
Ë
upˇŒ
, 0, 0, 0);

110 
	}
}

113 
	$sys_ùc_åy_£nd
(
ívid_t
 
ívid
, 
uöt64_t
 
vÆue
, *
§cva
, 
≥rm
)

115  
	`sysˇŒ
(
SYS_ùc_åy_£nd
, 0, 
ívid
, 
vÆue
, (
uöt64_t
Ë
§cva
, 
≥rm
, 0);

116 
	}
}

119 
	$sys_ùc_ªcv
(*
d°va
)

121  
	`sysˇŒ
(
SYS_ùc_ªcv
, 1, (
uöt64_t
)
d°va
, 0, 0, 0, 0);

122 
	}
}

126 
	$sys_time_m£c
()

128  (Ë
	`sysˇŒ
(
SYS_time_m£c
, 0, 0, 0, 0, 0, 0);

129 
	}
}

133 
	$sys_√t_å™smô
(c⁄° *
d©a
, 
Àn
)

135  
	`sysˇŒ
(
SYS_√t_å™smô
, 0, (
uöt64_t
)
d©a
, 
Àn
, 0, 0, 0);

136 
	}
}

139 
	$sys_√t_ª˚ive
(*
buf
, 
Àn
)

141  
	`sysˇŒ
(
SYS_√t_ª˚ive
, 0, (
uöt64_t
)
buf
, 
Àn
, 0, 0, 0);

142 
	}
}

148 
	$sys_ït_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,Énvid_à
gue°
, * 
gue°_∑
, 
≥rm
)

150  
	`sysˇŒ
(
SYS_ït_m≠
, 0, 
§˚nvid
,

151 (
uöt64_t
)
§cva
, 
gue°
, (uöt64_t)
gue°_∑
, 
≥rm
);

152 
	}
}

154 
ívid_t


155 
	$sys_ív_mkgue°
(
uöt64_t
 
gphysz
, uöt64_à
gRIP
) {

156  (
ívid_t
Ë
	`sysˇŒ
(
SYS_ív_mkgue°
, 0, 
gphysz
, 
gRIP
, 0, 0, 0);

157 
	}
}

158 #i‚de‡
VMM_GUEST


160 
	$sys_vmx_li°_vms
() {

161 
	`sysˇŒ
(
SYS_vmx_li°_vms
, 0, 0,

163 
	}
}

166 
	$sys_vmx_£l_ªsume
(
i
) {

167  
	`sysˇŒ
(
SYS_vmx_£l_ªsume
, 0, 
i
, 0, 0, 0, 0);

168 
	}
}

170 
	$sys_vmx_gë_vmdisk_numbî
() {

171  
	`sysˇŒ
(
SYS_vmx_gë_vmdisk_numbî
, 0, 0, 0, 0, 0, 0);

172 
	}
}

175 
	$sys_vmx_ö¸_vmdisk_numbî
() {

176 
	`sysˇŒ
(
SYS_vmx_ö¸_vmdisk_numbî
, 0, 0, 0, 0, 0, 0);

177 
	}
}

	@lib/wait.c

2 
	~<öc/lib.h
>

6 
	$waô
(
ívid_t
 
ívid
)

8 c⁄° vﬁ©ûê
Env
 *
e
;

10 
	`as£π
(
ívid
 != 0);

11 
e
 = &
ívs
[
	`ENVX
(
ívid
)];

12 
e
->
ív_id
 =
ívid
 &&É->
ív_°©us
 !
ENV_FREE
)

13 
	`sys_yõld
();

14 
	}
}

	@net/input.c

2 
	~"ns.h
"

4 
Nsùc
 
nsùcbuf
;

7 
	$öput
(
ívid_t
 
ns_ívid
)

9 
bö¨y«me
 = "ns_input";

12 
r
;

13 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, &
nsùcbuf
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

14 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

15 
r
 = 
	`sys_√t_ª˚ive
(
nsùcbuf
.
pkt
.
jp_d©a
, 1518);

16 i‡(
r
 == 0) {

17 
	`sys_yõld
();

18 } i‡(
r
 < 0) {

19 
	`˝rötf
("FaûedÅÿª˚ivê∑ckë: %e\n", 
r
);

20 } i‡(
r
 > 0) {

21 
nsùcbuf
.
pkt
.
jp_Àn
 = 
r
;

22 
	`ùc_£nd
(
ns_ívid
, 
NSREQ_INPUT
, &
nsùcbuf
, 
PTE_U
|
PTE_P
);

33 
	}
}

	@net/lwip/api/api_lib.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_NETCONN


47 
	~"lwù/≠i.h
"

48 
	~"lwù/t˝ù.h
"

49 
	~"lwù/memp.h
"

51 
	~"lwù/ù.h
"

52 
	~"lwù/øw.h
"

53 
	~"lwù/udp.h
"

54 
	~"lwù/t˝.h
"

56 
	~<°rög.h
>

68 
√tc⁄n
*

69 
	$√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

71 
√tc⁄n
 *
c⁄n
;

72 
≠i_msg
 
msg
;

74 
c⁄n
 = 
	`√tc⁄n_Æloc
(
t
, 
ˇŒback
);

76 i‡(
c⁄n
 !
NULL
 ) {

77 
msg
.
fun˘i⁄
 = 
do_√wc⁄n
;

78 
msg
.msg.msg.
n
.
¥Ÿo
 =Öroto;

79 
msg
.msg.
c⁄n
 = conn;

80 
	`TCPIP_APIMSG
(&
msg
);

82 i‡(
c⁄n
->
îr
 !
ERR_OK
) {

83 
	`LWIP_ASSERT
("‰ìög c⁄¿wôhouà‰ìögÖcb", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

84 
	`LWIP_ASSERT
("c⁄¿ha†nÿ›_com∂ëed", 
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
);

85 
	`LWIP_ASSERT
("c⁄¿ha†nÿªcvmbox", 
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
);

86 
	`LWIP_ASSERT
("c⁄n->ac˚±mbox shouldn'àexi°", 
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
);

87 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

88 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

89 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

90  
NULL
;

93  
c⁄n
;

94 
	}
}

104 
îr_t


105 
	$√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
)

107 
≠i_msg
 
msg
;

110 i‡(
c⁄n
 =
NULL
) {

111  
ERR_OK
;

114 
msg
.
fun˘i⁄
 = 
do_dñc⁄n
;

115 
msg
.msg.
c⁄n
 = conn;

116 
	`t˝ù_≠imsg
(&
msg
);

118 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

119 
	`√tc⁄n_‰ì
(
c⁄n
);

121  
ERR_OK
;

122 
	}
}

130 
√tc⁄n_ty≥


131 
	$√tc⁄n_ty≥
(
√tc⁄n
 *
c⁄n
)

133 
	`LWIP_ERROR
("√tc⁄n_ty≥: invÆid c⁄n", (
c⁄n
 !
NULL
),  
NETCONN_INVALID
;);

134  
c⁄n
->
ty≥
;

135 
	}
}

148 
îr_t


149 
	$√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
)

151 
≠i_msg
 
msg
;

153 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

154 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

155 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidÖ‹t", (
p‹t
 !
NULL
),  
ERR_ARG
;);

157 
msg
.
fun˘i⁄
 = 
do_gëaddr
;

158 
msg
.msg.
c⁄n
 = conn;

159 
msg
.msg.msg.
ad
.
ùaddr
 = 
addr
;

160 
msg
.msg.msg.
ad
.
p‹t
 =Öort;

161 
msg
.msg.msg.
ad
.
loˇl
 =Üocal;

162 
	`TCPIP_APIMSG
(&
msg
);

164  
c⁄n
->
îr
;

165 
	}
}

177 
îr_t


178 
	$√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

180 
≠i_msg
 
msg
;

182 
	`LWIP_ERROR
("√tc⁄n_böd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

184 
msg
.
fun˘i⁄
 = 
do_böd
;

185 
msg
.msg.
c⁄n
 = conn;

186 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

187 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

188 
	`TCPIP_APIMSG
(&
msg
);

189  
c⁄n
->
îr
;

190 
	}
}

200 
îr_t


201 
	$√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

203 
≠i_msg
 
msg
;

205 
	`LWIP_ERROR
("√tc⁄n_c⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

207 
msg
.
fun˘i⁄
 = 
do_c⁄√˘
;

208 
msg
.msg.
c⁄n
 = conn;

209 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

210 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

212 
	`t˝ù_≠imsg
(&
msg
);

213  
c⁄n
->
îr
;

214 
	}
}

222 
îr_t


223 
	$√tc⁄n_disc⁄√˘
(
√tc⁄n
 *
c⁄n
)

225 
≠i_msg
 
msg
;

227 
	`LWIP_ERROR
("√tc⁄n_disc⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

229 
msg
.
fun˘i⁄
 = 
do_disc⁄√˘
;

230 
msg
.msg.
c⁄n
 = conn;

231 
	`TCPIP_APIMSG
(&
msg
);

232  
c⁄n
->
îr
;

233 
	}
}

243 
îr_t


244 
	$√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
)

246 
≠i_msg
 
msg
;

249 
	`LWIP_UNUSED_ARG
(
backlog
);

251 
	`LWIP_ERROR
("√tc⁄n_li°í: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

253 
msg
.
fun˘i⁄
 = 
do_li°í
;

254 
msg
.msg.
c⁄n
 = conn;

255 #i‡
TCP_LISTEN_BACKLOG


256 
msg
.msg.msg.
lb
.
backlog
 = backlog;

258 
	`TCPIP_APIMSG
(&
msg
);

259  
c⁄n
->
îr
;

260 
	}
}

268 
√tc⁄n
 *

269 
	$√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
)

271 
√tc⁄n
 *
√wc⁄n
;

273 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

274 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidác˚±mbox", (
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
),  
NULL
;);

276 #i‡
LWIP_SO_RCVTIMEO


277 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, c⁄n->
ªcv_timeout
Ë=
SYS_ARCH_TIMEOUT
) {

278 
√wc⁄n
 = 
NULL
;

281 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, 0);

285 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 0);

287 #i‡
TCP_LISTEN_BACKLOG


288 i‡(
√wc⁄n
 !
NULL
) {

290 
≠i_msg
 
msg
;

291 
msg
.
fun˘i⁄
 = 
do_ªcv
;

292 
msg
.msg.
c⁄n
 = conn;

293 
	`TCPIP_APIMSG
(&
msg
);

298  
√wc⁄n
;

299 
	}
}

307 
√tbuf
 *

308 
	$√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
)

310 
≠i_msg
 
msg
;

311 
√tbuf
 *
buf
 = 
NULL
;

312 
pbuf
 *
p
;

313 
u16_t
 
Àn
;

315 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

317 i‡(
c⁄n
->
ªcvmbox
 =
SYS_MBOX_NULL
) {

320 
c⁄n
->
îr
 = 
ERR_CONN
;

321  
NULL
;

324 i‡(
	`ERR_IS_FATAL
(
c⁄n
->
îr
)) {

325  
NULL
;

328 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

329 #i‡
LWIP_TCP


330 i‡(
c⁄n
->
°©e
 =
NETCONN_LISTEN
) {

332 
c⁄n
->
îr
 = 
ERR_CONN
;

333  
NULL
;

336 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

338 i‡(
buf
 =
NULL
) {

339 
c⁄n
->
îr
 = 
ERR_MEM
;

340  
NULL
;

343 #i‡
LWIP_SO_RCVTIMEO


344 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

345 
c⁄n
->
îr
 = 
ERR_TIMEOUT
;

346 
p
 = 
NULL
;

349 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, 0);

352 i‡(
p
 !
NULL
) {

353 
Àn
 = 
p
->
tŸ_Àn
;

354 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

356 
Àn
 = 0;

360 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
Àn
);

363 i‡(
p
 =
NULL
) {

364 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

366 i‡(
c⁄n
->
îr
 =
ERR_OK
) {

367 
c⁄n
->
îr
 = 
ERR_CLSD
;

369  
NULL
;

372 
buf
->
p
 =Ö;

373 
buf
->
±r
 = 
p
;

374 
buf
->
p‹t
 = 0;

375 
buf
->
addr
 = 
NULL
;

378 
msg
.
fun˘i⁄
 = 
do_ªcv
;

379 
msg
.msg.
c⁄n
 = conn;

380 i‡(
buf
 !
NULL
) {

381 
msg
.msg.msg.
r
.
Àn
 = 
buf
->
p
->
tŸ_Àn
;

383 
msg
.msg.msg.
r
.
Àn
 = 1;

385 
	`TCPIP_APIMSG
(&
msg
);

388 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

389 #i‡
LWIP_SO_RCVTIMEO


390 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

391 
buf
 = 
NULL
;

394 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, 0);

396 i‡(
buf
!=
NULL
) {

397 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
buf
->
p
->
tŸ_Àn
);

399 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
buf
->
p
->
tŸ_Àn
);

404 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_ªcv:Ñe˚ived %∞”º %d)\n", (*)
buf
, 
c⁄n
->
îr
));

406  
buf
;

407 
	}
}

419 
îr_t


420 
	$√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

422 i‡(
buf
 !
NULL
) {

423 
buf
->
addr
 =áddr;

424 
buf
->
p‹t
 =Öort;

425  
	`√tc⁄n_£nd
(
c⁄n
, 
buf
);

427  
ERR_VAL
;

428 
	}
}

437 
îr_t


438 
	$√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
)

440 
≠i_msg
 
msg
;

442 
	`LWIP_ERROR
("√tc⁄n_£nd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

444 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_£nd: sídög %d byãs\n", 
buf
->
p
->
tŸ_Àn
));

445 
msg
.
fun˘i⁄
 = 
do_£nd
;

446 
msg
.msg.
c⁄n
 = conn;

447 
msg
.msg.msg.
b
 = 
buf
;

448 
	`TCPIP_APIMSG
(&
msg
);

449  
c⁄n
->
îr
;

450 
	}
}

463 
îr_t


464 
	$√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size
, 
u8_t
 
≠iÊags
)

466 
≠i_msg
 
msg
;

468 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

469 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n->ty≥", (
c⁄n
->
ty≥
 =
NETCONN_TCP
),  
ERR_VAL
;);

471 
msg
.
fun˘i⁄
 = 
do_wrôe
;

472 
msg
.msg.
c⁄n
 = conn;

473 
msg
.msg.msg.
w
.
d©≠å
 = dataptr;

474 
msg
.msg.msg.
w
.
≠iÊags
 =ápiflags;

475 
msg
.msg.msg.
w
.
Àn
 = 
size
;

479 
	`TCPIP_APIMSG
(&
msg
);

480  
c⁄n
->
îr
;

481 
	}
}

489 
îr_t


490 
	$√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
)

492 
≠i_msg
 
msg
;

494 
	`LWIP_ERROR
("√tc⁄n_˛o£: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

496 
msg
.
fun˘i⁄
 = 
do_˛o£
;

497 
msg
.msg.
c⁄n
 = conn;

498 
	`t˝ù_≠imsg
(&
msg
);

499  
c⁄n
->
îr
;

500 
	}
}

502 #i‡
LWIP_IGMP


513 
îr_t


514 
	$√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
,

515 
ù_addr
 *
mu…üddr
,

516 
ù_addr
 *
öãrÁ˚
,

517 
√tc⁄n_igmp
 
joö_‹_Àave
)

519 
≠i_msg
 
msg
;

521 
	`LWIP_ERROR
("√tc⁄n_joö_Àave_group: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

523 
msg
.
fun˘i⁄
 = 
do_joö_Àave_group
;

524 
msg
.msg.
c⁄n
 = conn;

525 
msg
.msg.msg.
jl
.
mu…üddr
 = multiaddr;

526 
msg
.msg.msg.
jl
.
öãrÁ˚
 = interface;

527 
msg
.msg.msg.
jl
.
joö_‹_Àave
 = join_or_leave;

528 
	`TCPIP_APIMSG
(&
msg
);

529  
c⁄n
->
îr
;

530 
	}
}

533 #i‡
LWIP_DNS


544 
îr_t


545 
	$√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
)

547 
dns_≠i_msg
 
msg
;

548 
îr_t
 
îr
;

549 
sys_£m_t
 
£m
;

551 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidÇame", (
«me
 !
NULL
),  
ERR_ARG
;);

552 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

554 
£m
 = 
	`sys_£m_√w
(0);

555 i‡(
£m
 =
SYS_SEM_NULL
) {

556  
ERR_MEM
;

559 
msg
.
«me
 =Çame;

560 
msg
.
addr
 =áddr;

561 
msg
.
îr
 = &err;

562 
msg
.
£m
 = sem;

564 
	`t˝ù_ˇŒback
(
do_gëho°by«me
, &
msg
);

565 
	`sys_£m_waô
(
£m
);

566 
	`sys_£m_‰ì
(
£m
);

568  
îr
;

569 
	}
}

	@net/lwip/api/api_msg.c

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_NETCONN


44 
	~"lwù/≠i_msg.h
"

46 
	~"lwù/ù.h
"

47 
	~"lwù/udp.h
"

48 
	~"lwù/t˝.h
"

49 
	~"lwù/øw.h
"

51 
	~"lwù/memp.h
"

52 
	~"lwù/t˝ù.h
"

53 
	~"lwù/igmp.h
"

54 
	~"lwù/dns.h
"

57 #i‡
LWIP_TCP


58 
îr_t
 
do_wrôem‹e
(
√tc⁄n
 *
c⁄n
);

59 
do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
);

62 #i‡
LWIP_RAW


70 
u8_t


71 
	$ªcv_øw
(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

72 
ù_addr
 *
addr
)

74 
pbuf
 *
q
;

75 
√tbuf
 *
buf
;

76 
√tc⁄n
 *
c⁄n
;

77 #i‡
LWIP_SO_RCVBUF


78 
ªcv_avaû
;

81 
	`LWIP_UNUSED_ARG
(
addr
);

82 
c⁄n
 = 
¨g
;

84 #i‡
LWIP_SO_RCVBUF


85 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

86 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
) &&

87 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë<
c⁄n
->
ªcv_bufsize
)) {

89 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
)) {

92 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

93 if(
q
 !
NULL
) {

94 i‡(
	`pbuf_c›y
(
q
, 
p
Ë!
ERR_OK
) {

95 
	`pbuf_‰ì
(
q
);

96 
q
 = 
NULL
;

100 if(
q
 !
NULL
) {

101 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

102 i‡(
buf
 =
NULL
) {

103 
	`pbuf_‰ì
(
q
);

107 
buf
->
p
 = 
q
;

108 
buf
->
±r
 = 
q
;

109 
buf
->
addr
 = &(((
ù_hdr
*)(
q
->
∑ylﬂd
))->
§c
);

110 
buf
->
p‹t
 = 
pcb
->
¥Ÿocﬁ
;

112 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
q
->
tŸ_Àn
);

114 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
q
->
tŸ_Àn
);

115 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

116 
	`√tbuf_dñëe
(
buf
);

122 
	}
}

125 #i‡
LWIP_UDP


133 
	$ªcv_udp
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

134 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

136 
√tbuf
 *
buf
;

137 
√tc⁄n
 *
c⁄n
;

138 #i‡
LWIP_SO_RCVBUF


139 
ªcv_avaû
;

142 
	`LWIP_UNUSED_ARG
(
pcb
);

143 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê®pcbárgumít", 
pcb
 !
NULL
);

144 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê™árgumít", 
¨g
 !
NULL
);

145 
c⁄n
 = 
¨g
;

146 
	`LWIP_ASSERT
("ªcv_udp:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
udp
 ==Öcb);

148 #i‡
LWIP_SO_RCVBUF


149 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

150 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
) ||

151 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë> 
c⁄n
->
ªcv_bufsize
)) {

153 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

155 
	`pbuf_‰ì
(
p
);

159 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

160 i‡(
buf
 =
NULL
) {

161 
	`pbuf_‰ì
(
p
);

164 
buf
->
p
 =Ö;

165 
buf
->
±r
 = 
p
;

166 
buf
->
addr
 =áddr;

167 
buf
->
p‹t
 =Öort;

170 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
p
->
tŸ_Àn
);

172 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
p
->
tŸ_Àn
);

173 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

174 
	`√tbuf_dñëe
(
buf
);

177 
	}
}

180 #i‡
LWIP_TCP


187 
îr_t


188 
	$ªcv_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

190 
√tc⁄n
 *
c⁄n
;

191 
u16_t
 
Àn
;

193 
	`LWIP_UNUSED_ARG
(
pcb
);

194 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê®pcbárgumít", 
pcb
 !
NULL
);

195 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê™árgumít", 
¨g
 !
NULL
);

196 
c⁄n
 = 
¨g
;

197 
	`LWIP_ASSERT
("ªcv_t˝:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
t˝
 ==Öcb);

199 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

200  
ERR_VAL
;

203 
c⁄n
->
îr
 =Érr;

204 i‡(
p
 !
NULL
) {

205 
Àn
 = 
p
->
tŸ_Àn
;

206 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

208 
Àn
 = 0;

211 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

212 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
p
Ë!
ERR_OK
) {

213  
ERR_MEM
;

216  
ERR_OK
;

217 
	}
}

230 
îr_t


231 
	$pﬁl_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
)

233 
√tc⁄n
 *
c⁄n
 = 
¨g
;

235 
	`LWIP_UNUSED_ARG
(
pcb
);

236 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

238 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

239 
	`do_wrôem‹e
(
c⁄n
);

240 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

241 
	`do_˛o£_öã∫Æ
(
c⁄n
);

244  
ERR_OK
;

245 
	}
}

254 
îr_t


255 
	$£¡_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

257 
√tc⁄n
 *
c⁄n
 = 
¨g
;

259 
	`LWIP_UNUSED_ARG
(
pcb
);

260 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

262 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

263 
	`LWIP_ASSERT
("c⁄n->pcb.t˝ !NULL", 
c⁄n
->
pcb
.
t˝
 !
NULL
);

264 
	`do_wrôem‹e
(
c⁄n
);

265 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

266 
	`do_˛o£_öã∫Æ
(
c⁄n
);

269 i‡(
c⁄n
) {

270 i‡((
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (
	`t˝_¢dbuf
(c⁄n->pcb.t˝Ë> 
TCP_SNDLOWAT
)) {

271 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 
Àn
);

275  
ERR_OK
;

276 
	}
}

286 
	$îr_t˝
(*
¨g
, 
îr_t
 
îr
)

288 
√tc⁄n
 *
c⁄n
;

290 
c⁄n
 = 
¨g
;

291 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

293 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

295 
c⁄n
->
îr
 =Érr;

296 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

298 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

299 
	`sys_mbox_po°
(
c⁄n
->
ªcvmbox
, 
NULL
);

301 i‡(
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
 && c⁄n->
°©e
 =
NETCONN_CONNECT
) {

302 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

303 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

305 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

307 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

308 
	`sys_mbox_po°
(
c⁄n
->
ac˚±mbox
, 
NULL
);

310 i‡((
c⁄n
->
°©e
 =
NETCONN_WRITE
Ë|| (c⁄n->°©ê=
NETCONN_CLOSE
)) {

313 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

315 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

317 
	}
}

326 
	$£tup_t˝
(
√tc⁄n
 *
c⁄n
)

328 
t˝_pcb
 *
pcb
;

330 
pcb
 = 
c⁄n
->pcb.
t˝
;

331 
	`t˝_¨g
(
pcb
, 
c⁄n
);

332 
	`t˝_ªcv
(
pcb
, 
ªcv_t˝
);

333 
	`t˝_£¡
(
pcb
, 
£¡_t˝
);

334 
	`t˝_pﬁl
(
pcb
, 
pﬁl_t˝
, 4);

335 
	`t˝_îr
(
pcb
, 
îr_t˝
);

336 
	}
}

344 
îr_t


345 
	$ac˚±_fun˘i⁄
(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

347 
√tc⁄n
 *
√wc⁄n
;

348 
√tc⁄n
 *
c⁄n
;

350 #i‡
API_MSG_DEBUG


351 #i‡
TCP_DEBUG


352 
	`t˝_debug_¥öt_°©e
(
√wpcb
->
°©e
);

355 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

357 
	`LWIP_ERROR
("accept_function: invalid conn->acceptmbox",

358 
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
,  
ERR_VAL
;);

362 
√wc⁄n
 = 
	`√tc⁄n_Æloc
(
c⁄n
->
ty≥
, c⁄n->
ˇŒback
);

363 i‡(
√wc⁄n
 =
NULL
) {

364  
ERR_MEM
;

366 
√wc⁄n
->
pcb
.
t˝
 = 
√wpcb
;

367 
	`£tup_t˝
(
√wc⁄n
);

368 
√wc⁄n
->
îr
 =Érr;

370 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

372 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ac˚±mbox
, 
√wc⁄n
Ë!
ERR_OK
) {

375 
√wc⁄n
->
pcb
.
t˝
 = 
NULL
;

376 
	`√tc⁄n_‰ì
(
√wc⁄n
);

377  
ERR_MEM
;

379  
ERR_OK
;

380 
	}
}

390 
îr_t


391 
	$pcb_√w
(
≠i_msg_msg
 *
msg
)

393 
msg
->
c⁄n
->
îr
 = 
ERR_OK
;

395 
	`LWIP_ASSERT
("pcb_√w:ÖcbáÃódyáŒoˇãd", 
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
);

398 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

399 #i‡
LWIP_RAW


400 
NETCONN_RAW
:

401 
msg
->
c⁄n
->
pcb
.
øw
 = 
	`øw_√w
(msg->msg.
n
.
¥Ÿo
);

402 if(
msg
->
c⁄n
->
pcb
.
øw
 =
NULL
) {

403 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

406 
	`øw_ªcv
(
msg
->
c⁄n
->
pcb
.
øw
, 
ªcv_øw
, msg->conn);

409 #i‡
LWIP_UDP


410 
NETCONN_UDP
:

411 
msg
->
c⁄n
->
pcb
.
udp
 = 
	`udp_√w
();

412 if(
msg
->
c⁄n
->
pcb
.
udp
 =
NULL
) {

413 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

416 #i‡
LWIP_UDPLITE


417 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPLITE
) {

418 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_UDPLITE
);

421 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPNOCHKSUM
) {

422 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_NOCHKSUM
);

424 
	`udp_ªcv
(
msg
->
c⁄n
->
pcb
.
udp
, 
ªcv_udp
, msg->conn);

427 #i‡
LWIP_TCP


428 
NETCONN_TCP
:

429 
msg
->
c⁄n
->
pcb
.
t˝
 = 
	`t˝_√w
();

430 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

431 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

434 
	`£tup_t˝
(
msg
->
c⁄n
);

439 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

443  
msg
->
c⁄n
->
îr
;

444 
	}
}

453 
	$do_√wc⁄n
(
≠i_msg_msg
 *
msg
)

455 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

456 
	`pcb_√w
(
msg
);

462 
	`TCPIP_APIMSG_ACK
(
msg
);

463 
	}
}

475 
√tc⁄n
*

476 
	$√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

478 
√tc⁄n
 *
c⁄n
;

479 
size
;

481 
c⁄n
 = 
	`memp_mÆloc
(
MEMP_NETCONN
);

482 i‡(
c⁄n
 =
NULL
) {

483  
NULL
;

486 
c⁄n
->
îr
 = 
ERR_OK
;

487 
c⁄n
->
ty≥
 = 
t
;

488 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

490 #i‡(
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_UDP_RECVMBOX_SIZE
) && \

491 (
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_TCP_RECVMBOX_SIZE
)

492 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

494 
	`NETCONNTYPE_GROUP
(
t
)) {

495 #i‡
LWIP_RAW


496 
NETCONN_RAW
:

497 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

500 #i‡
LWIP_UDP


501 
NETCONN_UDP
:

502 
size
 = 
DEFAULT_UDP_RECVMBOX_SIZE
;

505 #i‡
LWIP_TCP


506 
NETCONN_TCP
:

507 
size
 = 
DEFAULT_TCP_RECVMBOX_SIZE
;

511 
	`LWIP_ASSERT
("netconn_alloc: undefinedÇetconn_type", 0);

516 i‡((
c⁄n
->
›_com∂ëed
 = 
	`sys_£m_√w
(0)Ë=
SYS_SEM_NULL
) {

517 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

518  
NULL
;

520 i‡((
c⁄n
->
ªcvmbox
 = 
	`sys_mbox_√w
(
size
)Ë=
SYS_MBOX_NULL
) {

521 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

522 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

523  
NULL
;

526 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

527 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

529 
c⁄n
->
sockë
 = -1;

530 
c⁄n
->
ˇŒback
 = callback;

531 
c⁄n
->
ªcv_avaû
 = 0;

532 #i‡
LWIP_SO_RCVTIMEO


533 
c⁄n
->
ªcv_timeout
 = 0;

535 #i‡
LWIP_SO_RCVBUF


536 
c⁄n
->
ªcv_bufsize
 = 
INT_MAX
;

538  
c⁄n
;

539 
	}
}

548 
	$√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
)

550 *
mem
;

551 
	`LWIP_ASSERT
("PCB mu° bêdóŒoˇãd outsidêthi†fun˘i⁄", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

554 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

555 
	`sys_mbox_åy„tch
(
c⁄n
->
ªcvmbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

556 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

557 if(
mem
 !
NULL
) {

558 
	`pbuf_‰ì
((
pbuf
 *)
mem
);

561 
	`√tbuf_dñëe
((
√tbuf
 *)
mem
);

564 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

565 
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

569 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

570 
	`sys_mbox_åy„tch
(
c⁄n
->
ac˚±mbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

571 
	`√tc⁄n_dñëe
((
√tc⁄n
 *)
mem
);

573 
	`sys_mbox_‰ì
(
c⁄n
->
ac˚±mbox
);

574 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

577 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

578 
c⁄n
->
›_com∂ëed
 = 
SYS_SEM_NULL
;

580 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

581 
	}
}

583 #i‡
LWIP_TCP


592 
	$do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
)

594 
îr_t
 
îr
;

596 
	`LWIP_ASSERT
("övÆid c⁄n", (
c⁄n
 !
NULL
));

597 
	`LWIP_ASSERT
("thi†i†f‹Å˝Çëc⁄n†⁄ly", (
c⁄n
->
ty≥
 =
NETCONN_TCP
));

598 
	`LWIP_ASSERT
("c⁄¿mu° bêö sèã NETCONN_CLOSE", (
c⁄n
->
°©e
 =
NETCONN_CLOSE
));

599 
	`LWIP_ASSERT
("pcbáÃódy clo£d", (
c⁄n
->
pcb
.
t˝
 !
NULL
));

602 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

603 i‡(
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

604 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

606 
	`t˝_ªcv
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

607 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

609 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

610 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
NULL
, 4);

611 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

614 
îr
 = 
	`t˝_˛o£
(
c⁄n
->
pcb
.
t˝
);

615 i‡(
îr
 =
ERR_OK
) {

617 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

619 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

620 
c⁄n
->
îr
 = 
ERR_OK
;

623 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

624 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

626 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

630 
	`LWIP_ASSERT
("ClosögáÜi°íÖcb mayÇŸ faû!", (
c⁄n
->
pcb
.
t˝
->
°©e
 !
LISTEN
));

631 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
£¡_t˝
);

632 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
pﬁl_t˝
, 4);

633 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
îr_t˝
);

634 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, conn);

638 
	}
}

648 
	$do_dñc⁄n
(
≠i_msg_msg
 *
msg
)

650 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

651 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

652 #i‡
LWIP_RAW


653 
NETCONN_RAW
:

654 
	`øw_ªmove
(
msg
->
c⁄n
->
pcb
.
øw
);

657 #i‡
LWIP_UDP


658 
NETCONN_UDP
:

659 
msg
->
c⁄n
->
pcb
.
udp
->
ªcv_¨g
 = 
NULL
;

660 
	`udp_ªmove
(
msg
->
c⁄n
->
pcb
.
udp
);

663 #i‡
LWIP_TCP


664 
NETCONN_TCP
:

665 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

666 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

679 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

680 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

682 i‡(
msg
->
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
) {

683 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

685 
	}
}

695 
	$do_böd
(
≠i_msg_msg
 *
msg
)

697 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

698 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

699 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

700 #i‡
LWIP_RAW


701 
NETCONN_RAW
:

702 
msg
->
c⁄n
->
îr
 = 
	`øw_böd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

705 #i‡
LWIP_UDP


706 
NETCONN_UDP
:

707 
msg
->
c⁄n
->
îr
 = 
	`udp_böd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

710 #i‡
LWIP_TCP


711 
NETCONN_TCP
:

712 
msg
->
c⁄n
->
îr
 = 
	`t˝_böd
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

720 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

723 
	`TCPIP_APIMSG_ACK
(
msg
);

724 
	}
}

726 #i‡
LWIP_TCP


733 
îr_t


734 
	$do_c⁄√˘ed
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

736 
√tc⁄n
 *
c⁄n
;

738 
	`LWIP_UNUSED_ARG
(
pcb
);

740 
c⁄n
 = 
¨g
;

742 i‡(
c⁄n
 =
NULL
) {

743  
ERR_VAL
;

746 
c⁄n
->
îr
 =Érr;

747 i‡((
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
îr
 =
ERR_OK
)) {

748 
	`£tup_t˝
(
c⁄n
);

750 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

751 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

752  
ERR_OK
;

753 
	}
}

764 
	$do_c⁄√˘
(
≠i_msg_msg
 *
msg
)

766 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

767 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

771 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

772 #i‡
LWIP_RAW


773 
NETCONN_RAW
:

774 
msg
->
c⁄n
->
îr
 = 
	`øw_c⁄√˘
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

775 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

778 #i‡
LWIP_UDP


779 
NETCONN_UDP
:

780 
msg
->
c⁄n
->
îr
 = 
	`udp_c⁄√˘
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

781 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

784 #i‡
LWIP_TCP


785 
NETCONN_TCP
:

786 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CONNECT
;

787 
	`£tup_t˝
(
msg
->
c⁄n
);

788 
msg
->
c⁄n
->
îr
 = 
	`t˝_c⁄√˘
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
,

789 
do_c⁄√˘ed
);

797 
	}
}

807 
	$do_disc⁄√˘
(
≠i_msg_msg
 *
msg
)

809 #i‡
LWIP_UDP


810 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

811 
	`udp_disc⁄√˘
(
msg
->
c⁄n
->
pcb
.
udp
);

814 
	`TCPIP_APIMSG_ACK
(
msg
);

815 
	}
}

824 
	$do_li°í
(
≠i_msg_msg
 *
msg
)

826 #i‡
LWIP_TCP


827 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

828 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

829 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

830 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
CLOSED
) {

831 #i‡
TCP_LISTEN_BACKLOG


832 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í_wôh_backlog
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
lb
.
backlog
);

834 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í
(
msg
->
c⁄n
->
pcb
.
t˝
);

836 i‡(
Õcb
 =
NULL
) {

837 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

840 i‡(
msg
->
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

842 
	`sys_mbox_‰ì
(
msg
->
c⁄n
->
ªcvmbox
);

843 
msg
->
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

845 i‡(
msg
->
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
) {

846 i‡((
msg
->
c⁄n
->
ac˚±mbox
 = 
	`sys_mbox_√w
(
DEFAULT_ACCEPTMBOX_SIZE
)Ë=
SYS_MBOX_NULL
) {

847 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

850 i‡(
msg
->
c⁄n
->
îr
 =
ERR_OK
) {

851 
msg
->
c⁄n
->
°©e
 = 
NETCONN_LISTEN
;

852 
msg
->
c⁄n
->
pcb
.
t˝
 = 
Õcb
;

853 
	`t˝_¨g
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->conn);

854 
	`t˝_ac˚±
(
msg
->
c⁄n
->
pcb
.
t˝
, 
ac˚±_fun˘i⁄
);

858 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

864 
	`TCPIP_APIMSG_ACK
(
msg
);

865 
	}
}

874 
	$do_£nd
(
≠i_msg_msg
 *
msg
)

876 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

877 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

878 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

879 #i‡
LWIP_RAW


880 
NETCONN_RAW
:

881 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

882 
msg
->
c⁄n
->
îr
 = 
	`øw_£nd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
);

884 
msg
->
c⁄n
->
îr
 = 
	`øw_£ndto
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
, msg->msg.b->
addr
);

888 #i‡
LWIP_UDP


889 
NETCONN_UDP
:

890 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

891 
msg
->
c⁄n
->
îr
 = 
	`udp_£nd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
);

893 
msg
->
c⁄n
->
îr
 = 
	`udp_£ndto
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
, msg->msg.b->
addr
, msg->msg.b->
p‹t
);

902 
	`TCPIP_APIMSG_ACK
(
msg
);

903 
	}
}

912 
	$do_ªcv
(
≠i_msg_msg
 *
msg
)

914 #i‡
LWIP_TCP


915 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

916 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

917 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

918 #i‡
TCP_LISTEN_BACKLOG


919 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

920 
	`t˝_ac˚±ed
(
msg
->
c⁄n
->
pcb
.
t˝
);

924 
	`t˝_ªcved
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
r
.
Àn
);

930 
	`TCPIP_APIMSG_ACK
(
msg
);

931 
	}
}

933 #i‡
LWIP_TCP


945 
îr_t


946 
	$do_wrôem‹e
(
√tc⁄n
 *
c⁄n
)

948 
îr_t
 
îr
;

949 *
d©≠å
;

950 
u16_t
 
Àn
, 
avaûabÀ
;

951 
u8_t
 
wrôe_föished
 = 0;

953 
	`LWIP_ASSERT
("c⁄n->°©ê=NETCONN_WRITE", (
c⁄n
->
°©e
 =
NETCONN_WRITE
));

955 
d©≠å
 = (
u8_t
*)
c⁄n
->
wrôe_msg
->
msg
.
w
.d©≠å + c⁄n->
wrôe_off£t
;

956 i‡((
c⁄n
->
wrôe_msg
->
msg
.
w
.
Àn
 - c⁄n->
wrôe_off£t
 > 0xffff)) {

957 
Àn
 = 0xffff;

958 #i‡
LWIP_TCPIP_CORE_LOCKING


959 
c⁄n
->
wrôe_dñayed
 = 1;

962 
Àn
 = 
c⁄n
->
wrôe_msg
->
msg
.
w
.À¿- c⁄n->
wrôe_off£t
;

964 
avaûabÀ
 = 
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
);

965 i‡(
avaûabÀ
 < 
Àn
) {

967 
Àn
 = 
avaûabÀ
;

968 #i‡
LWIP_TCPIP_CORE_LOCKING


969 
c⁄n
->
wrôe_dñayed
 = 1;

973 
îr
 = 
	`t˝_wrôe
(
c⁄n
->
pcb
.
t˝
, 
d©≠å
, 
Àn
, c⁄n->
wrôe_msg
->
msg
.
w
.
≠iÊags
);

974 
	`LWIP_ASSERT
("do_wrôem‹e: invÆidÜígth!", ((
c⁄n
->
wrôe_off£t
 + 
Àn
Ë<c⁄n->
wrôe_msg
->
msg
.
w
.len));

975 i‡(
îr
 =
ERR_OK
) {

976 
c⁄n
->
wrôe_off£t
 +
Àn
;

977 i‡(
c⁄n
->
wrôe_off£t
 =c⁄n->
wrôe_msg
->
msg
.
w
.
Àn
) {

979 
wrôe_föished
 = 1;

980 
c⁄n
->
wrôe_msg
 = 
NULL
;

981 
c⁄n
->
wrôe_off£t
 = 0;

983 
îr
 = 
	`t˝_ouçut_«gÀ
(
c⁄n
->
pcb
.
t˝
);

984 
c⁄n
->
îr
 =Érr;

985 i‡((
îr
 =
ERR_OK
Ë&& (
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
Ë<
TCP_SNDLOWAT
)) {

986 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDMINUS
, 
Àn
);

988 } i‡(
îr
 =
ERR_MEM
) {

994 
îr
 = 
	`t˝_ouçut
(
c⁄n
->
pcb
.
t˝
);

996 #i‡
LWIP_TCPIP_CORE_LOCKING


997 
c⁄n
->
wrôe_dñayed
 = 1;

1002 
c⁄n
->
îr
 =Érr;

1003 
wrôe_föished
 = 1;

1006 i‡(
wrôe_föished
) {

1009 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1010 #i‡
LWIP_TCPIP_CORE_LOCKING


1011 i‡(
c⁄n
->
wrôe_dñayed
 != 0)

1014 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

1017 #i‡
LWIP_TCPIP_CORE_LOCKING


1019  
ERR_MEM
;

1021  
ERR_OK
;

1022 
	}
}

1032 
	$do_wrôe
(
≠i_msg_msg
 *
msg
)

1034 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1035 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1036 #i‡
LWIP_TCP


1037 
msg
->
c⁄n
->
°©e
 = 
NETCONN_WRITE
;

1039 
msg
->
c⁄n
->
wrôe_msg
 = msg;

1040 
msg
->
c⁄n
->
wrôe_off£t
 = 0;

1041 #i‡
LWIP_TCPIP_CORE_LOCKING


1042 
msg
->
c⁄n
->
wrôe_dñayed
 = 0;

1043 i‡(
	`do_wrôem‹e
(
msg
->
c⁄n
Ë!
ERR_OK
) {

1044 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_WRITE
);

1045 
	`UNLOCK_TCPIP_CORE
();

1046 
	`sys_¨ch_£m_waô
(
msg
->
c⁄n
->
›_com∂ëed
, 0);

1047 
	`LOCK_TCPIP_CORE
();

1048 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_NONE
);

1051 
	`do_wrôem‹e
(
msg
->
c⁄n
);

1056 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

1058 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1062 
	`TCPIP_APIMSG_ACK
(
msg
);

1063 
	}
}

1072 
	$do_gëaddr
(
≠i_msg_msg
 *
msg
)

1074 i‡(
msg
->
c⁄n
->
pcb
.
ù
 !
NULL
) {

1075 *(
msg
->msg.
ad
.
ùaddr
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
ù
->
loˇl_ù
:msg->c⁄n->pcb.ù->
ªmŸe_ù
);

1077 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1078 #i‡
LWIP_RAW


1079 
NETCONN_RAW
:

1080 i‡(
msg
->msg.
ad
.
loˇl
) {

1081 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
øw
->
¥Ÿocﬁ
;

1084 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1088 #i‡
LWIP_UDP


1089 
NETCONN_UDP
:

1090 i‡(
msg
->msg.
ad
.
loˇl
) {

1091 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
loˇl_p‹t
;

1093 i‡((
msg
->
c⁄n
->
pcb
.
udp
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0) {

1094 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1096 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
ªmŸe_p‹t
;

1101 #i‡
LWIP_TCP


1102 
NETCONN_TCP
:

1103 *(
msg
->msg.
ad
.
p‹t
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
t˝
->
loˇl_p‹t
:msg->c⁄n->pcb.t˝->
ªmŸe_p‹t
);

1108 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1110 
	`TCPIP_APIMSG_ACK
(
msg
);

1111 
	}
}

1120 
	$do_˛o£
(
≠i_msg_msg
 *
msg
)

1122 #i‡
LWIP_TCP


1123 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1124 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

1125 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

1130 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1131 
	`TCPIP_APIMSG_ACK
(
msg
);

1133 
	}
}

1135 #i‡
LWIP_IGMP


1143 
	$do_joö_Àave_group
(
≠i_msg_msg
 *
msg
)

1145 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1146 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1147 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

1148 #i‡
LWIP_UDP


1149 i‡(
msg
->msg.
jl
.
joö_‹_Àave
 =
NETCONN_JOIN
) {

1150 
msg
->
c⁄n
->
îr
 = 
	`igmp_joögroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1152 
msg
->
c⁄n
->
îr
 = 
	`igmp_Àavegroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1155 #i‡(
LWIP_TCP
 || 
LWIP_RAW
)

1157 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1162 
	`TCPIP_APIMSG_ACK
(
msg
);

1163 
	}
}

1166 #i‡
LWIP_DNS


1173 
	$do_dns_found
(c⁄° *
«me
, 
ù_addr
 *
ùaddr
, *
¨g
)

1175 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1177 
	`LWIP_ASSERT
("DNSÑe•⁄£ f‹ wr⁄g ho°Çame", 
	`°rcmp
(
msg
->
«me
,Çame) == 0);

1179 i‡(
ùaddr
 =
NULL
) {

1181 *
msg
->
îr
 = 
ERR_VAL
;

1184 *
msg
->
îr
 = 
ERR_OK
;

1185 *
msg
->
addr
 = *
ùaddr
;

1188 
	`sys_£m_sig«l
(
msg
->
£m
);

1189 
	}
}

1198 
	$do_gëho°by«me
(*
¨g
)

1200 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1202 *
msg
->
îr
 = 
	`dns_gëho°by«me
(msg->
«me
, msg->
addr
, 
do_dns_found
, msg);

1203 i‡(*
msg
->
îr
 !
ERR_INPROGRESS
) {

1206 
	`sys_£m_sig«l
(
msg
->
£m
);

1208 
	}
}

	@net/lwip/api/err.c

40 
	~"lwù/îr.h
"

42 #ifde‡
LWIP_DEBUG


44 c⁄° *
	gîr_°ªº
[] = {

69 
	$lwù_°ªº
(
îr_t
 
îr
)

71  
îr_°ªº
[-
îr
];

73 
	}
}

	@net/lwip/api/netbuf.c

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_NETCONN


44 
	~"lwù/√tbuf.h
"

45 
	~"lwù/memp.h
"

47 
	~<°rög.h
>

57 
√tbuf
 *
	$√tbuf_√w
()

59 
√tbuf
 *
buf
;

61 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

62 i‡(
buf
 !
NULL
) {

63 
buf
->
p
 = 
NULL
;

64 
buf
->
±r
 = 
NULL
;

65 
buf
->
addr
 = 
NULL
;

66  
buf
;

68  
NULL
;

70 
	}
}

78 
	$√tbuf_dñëe
(
√tbuf
 *
buf
)

80 i‡(
buf
 !
NULL
) {

81 i‡(
buf
->
p
 !
NULL
) {

82 
	`pbuf_‰ì
(
buf
->
p
);

83 
buf
->
p
 = buf->
±r
 = 
NULL
;

85 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

87 
	}
}

98 
	$√tbuf_Æloc
(
√tbuf
 *
buf
, 
u16_t
 
size
)

100 
	`LWIP_ERROR
("√tbuf_Æloc: invÆid buf", (
buf
 !
NULL
),  NULL;);

103 i‡(
buf
->
p
 !
NULL
) {

104 
	`pbuf_‰ì
(
buf
->
p
);

106 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
size
, 
PBUF_RAM
);

107 i‡(
buf
->
p
 =
NULL
) {

108  
NULL
;

110 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold size",

111 (
buf
->
p
->
Àn
 >
size
));

112 
buf
->
±r
 = buf->
p
;

113  
buf
->
p
->
∑ylﬂd
;

114 
	}
}

122 
	$√tbuf_‰ì
(
√tbuf
 *
buf
)

124 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

125 i‡(
buf
->
p
 !
NULL
) {

126 
	`pbuf_‰ì
(
buf
->
p
);

128 
buf
->
p
 = buf->
±r
 = 
NULL
;

129 
	}
}

140 
îr_t


141 
	$√tbuf_ªf
(
√tbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
size
)

143 
	`LWIP_ERROR
("√tbuf_ªf: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

144 i‡(
buf
->
p
 !
NULL
) {

145 
	`pbuf_‰ì
(
buf
->
p
);

147 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

148 i‡(
buf
->
p
 =
NULL
) {

149 
buf
->
±r
 = 
NULL
;

150  
ERR_MEM
;

152 
buf
->
p
->
∑ylﬂd
 = (*)
d©≠å
;

153 
buf
->
p
->
Àn
 = buf->p->
tŸ_Àn
 = 
size
;

154 
buf
->
±r
 = buf->
p
;

155  
ERR_OK
;

156 
	}
}

165 
	$√tbuf_chaö
(
√tbuf
 *
hód
, √tbu‡*
èû
)

167 
	`LWIP_ERROR
("√tbuf_ªf: invÆid hód", (
hód
 !
NULL
), ;);

168 
	`LWIP_ERROR
("√tbuf_chaö: invÆidÅaû", (
èû
 !
NULL
), ;);

169 
	`pbuf_chaö
(
hód
->
p
, 
èû
->p);

170 
hód
->
±r
 = hód->
p
;

171 
	`memp_‰ì
(
MEMP_NETBUF
, 
èû
);

172 
	}
}

183 
îr_t


184 
	$√tbuf_d©a
(
√tbuf
 *
buf
, **
d©≠å
, 
u16_t
 *
Àn
)

186 
	`LWIP_ERROR
("√tbuf_d©a: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

187 
	`LWIP_ERROR
("√tbuf_d©a: invÆid d©≠å", (
d©≠å
 !
NULL
),  
ERR_ARG
;);

188 
	`LWIP_ERROR
("√tbuf_d©a: invÆidÜí", (
Àn
 !
NULL
),  
ERR_ARG
;);

190 i‡(
buf
->
±r
 =
NULL
) {

191  
ERR_BUF
;

193 *
d©≠å
 = 
buf
->
±r
->
∑ylﬂd
;

194 *
Àn
 = 
buf
->
±r
->len;

195  
ERR_OK
;

196 
	}
}

208 
s8_t


209 
	$√tbuf_√xt
(
√tbuf
 *
buf
)

211 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
),  -1;);

212 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

215 
buf
->
±r
 = buf->±r->
√xt
;

216 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

220 
	}
}

230 
	$√tbuf_fú°
(
√tbuf
 *
buf
)

232 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

233 
buf
->
±r
 = buf->
p
;

234 
	}
}

	@net/lwip/api/netdb.c

37 
	~"lwù/√tdb.h
"

39 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


41 
	~"lwù/îr.h
"

42 
	~"lwù/mem.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/≠i.h
"

47 
	sgëho°by«me_r_hñ≥r
 {

48 
ù_addr
 *
	maddrs
;

49 
ù_addr
 
	maddr
;

50 *
	mÆü£s
;

54 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


55 
	gh_î∫o
;

60 #i‚de‡
LWIP_DNS_API_HOSTENT_STORAGE


61 
	#LWIP_DNS_API_HOSTENT_STORAGE
 0

	)

65 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


66 
	#HOSTENT_STORAGE


	)

68 
	#HOSTENT_STORAGE
 

	)

80 
ho°ít
*

81 
	$lwù_gëho°by«me
(c⁄° *
«me
)

83 
îr_t
 
îr
;

84 
ù_addr
 
addr
;

87 
HOSTENT_STORAGE
 
ho°ít
 
s_ho°ít
;

88 
HOSTENT_STORAGE
 *
s_Æü£s
;

89 
HOSTENT_STORAGE
 
ù_addr
 
s_ho°ít_addr
;

90 
HOSTENT_STORAGE
 
ù_addr
 *
s_pho°ít_addr
;

93 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &
addr
);

94 i‡(
îr
 !
ERR_OK
) {

95 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

96 
h_î∫o
 = 
HOST_NOT_FOUND
;

97  
NULL
;

101 
s_ho°ít_addr
 = 
addr
;

102 
s_pho°ít_addr
 = &
s_ho°ít_addr
;

103 
s_ho°ít
.
h_«me
 = (*)
«me
;

104 
s_ho°ít
.
h_Æü£s
 = &
s_Æü£s
;

105 
s_ho°ít
.
h_addπy≥
 = 
AF_INET
;

106 
s_ho°ít
.
h_Àngth
 = (
ù_addr
);

107 
s_ho°ít
.
h_addr_li°
 = (**)&
s_pho°ít_addr
;

109 #i‡
DNS_DEBUG


111 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_«mê =%s\n", 
s_ho°ít
.
h_«me
));

112 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£† =0x%08lX\n",(
u32_t
)(
s_ho°ít
.
h_Æü£s
)));

113 i‡(
s_ho°ít
.
h_Æü£s
 !
NULL
) {

114 
u8_t
 
idx
;

115  
idx
=0; 
s_ho°ít
.
h_Æü£s
[idx]; idx++) {

116 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =0x%08lX\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

117 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%s\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

120 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addπy≥ =%lu\n", (
u32_t
)(
s_ho°ít
.
h_addπy≥
)));

121 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Àngth =%lu\n", (
u32_t
)(
s_ho°ít
.
h_Àngth
)));

122 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li° =0x%08lX\n", 
s_ho°ít
.
h_addr_li°
));

123 i‡(
s_ho°ít
.
h_addr_li°
 !
NULL
) {

124 
u8_t
 
idx
;

125  
idx
=0; 
s_ho°ít
.
h_addr_li°
[idx]; idx++) {

126 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i] =0x%08lX\n", 
idx
, 
s_ho°ít
.
h_addr_li°
[idx]));

127 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i]-> =%s\n", 
idx
, 
	`öë_¡ﬂ
(*((
ö_addr
*)(
s_ho°ít
.
h_addr_li°
[idx])))));

132 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


134  
	`sys_thªad_ho°ít
(&
s_ho°ít
);

136  &
s_ho°ít
;

138 
	}
}

157 
	$lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

158 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
)

160 
îr_t
 
îr
;

161 
gëho°by«me_r_hñ≥r
 *
h
;

162 *
ho°«me
;

163 
size_t
 
«mñí
;

164 
lh_î∫o
;

166 i‡(
h_î∫›
 =
NULL
) {

168 
h_î∫›
 = &
lh_î∫o
;

171 i‡(
ªsu…
 =
NULL
) {

173 *
h_î∫›
 = 
EINVAL
;

177 *
ªsu…
 = 
NULL
;

178 i‡((
«me
 =
NULL
Ë|| (
ªt
 =NULLË|| (
buf
 == 0)) {

180 *
h_î∫›
 = 
EINVAL
;

184 
«mñí
 = 
	`°æí
(
«me
);

185 i‡(
buÊí
 < ((
gëho°by«me_r_hñ≥r
Ë+ 
«mñí
 + 1 + (
MEM_ALIGNMENT
 - 1))) {

187 *
h_î∫›
 = 
ERANGE
;

191 
h
 = (
gëho°by«me_r_hñ≥r
*)
	`LWIP_MEM_ALIGN
(
buf
);

192 
ho°«me
 = ((*)
h
Ë+ (
gëho°by«me_r_hñ≥r
);

195 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &(
h
->
addr
));

196 i‡(
îr
 !
ERR_OK
) {

197 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

198 *
h_î∫›
 = 
ENSRNOTFOUND
;

203 
	`MEMCPY
(
ho°«me
, 
«me
, 
«mñí
);

204 
ho°«me
[
«mñí
] = 0;

207 
h
->
addrs
 = &(h->
addr
);

208 
h
->
Æü£s
 = 
NULL
;

209 
ªt
->
h_«me
 = (*)
ho°«me
;

210 
ªt
->
h_Æü£s
 = &(
h
->
Æü£s
);

211 
ªt
->
h_addπy≥
 = 
AF_INET
;

212 
ªt
->
h_Àngth
 = (
ù_addr
);

213 
ªt
->
h_addr_li°
 = (**)&(
h
->
addrs
);

216 *
ªsu…
 = 
ªt
;

220 
	}
}

230 
	$lwù_‰ìaddröfo
(
addröfo
 *
ai
)

232 
addröfo
 *
√xt
;

234 
ai
 !
NULL
) {

235 i‡(
ai
->
ai_addr
 !
NULL
) {

236 
	`mem_‰ì
(
ai
->
ai_addr
);

238 i‡(
ai
->
ai_ˇn⁄«me
 !
NULL
) {

239 
	`mem_‰ì
(
ai
->
ai_ˇn⁄«me
);

241 
√xt
 = 
ai
->
ai_√xt
;

242 
	`mem_‰ì
(
ai
);

243 
ai
 = 
√xt
;

245 
	}
}

267 
	$lwù_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

268 c⁄° 
addröfo
 *
höts
, addröfÿ**
ªs
)

270 
îr_t
 
îr
;

271 
ù_addr
 
addr
;

272 
addröfo
 *
ai
;

273 
sockaddr_ö
 *
ß
 = 
NULL
;

274 
p‹t_ƒ
 = 0;

276 i‡(
ªs
 =
NULL
) {

277  
EAI_FAIL
;

279 *
ªs
 = 
NULL
;

280 i‡((
nodíame
 =
NULL
Ë&& (
£rv«me
 == NULL)) {

281  
EAI_NONAME
;

284 i‡(
£rv«me
 !
NULL
) {

287 
p‹t_ƒ
 = 
	`©oi
(
£rv«me
);

288 i‡((
p‹t_ƒ
 <= 0) || (port_nr > 0xffff)) {

289  
EAI_SERVICE
;

293 i‡(
nodíame
 !
NULL
) {

295 
îr
 = 
	`√tc⁄n_gëho°by«me
(
nodíame
, &
addr
);

296 i‡(
îr
 !
ERR_OK
) {

297  
EAI_FAIL
;

301 
addr
.add∏
INADDR_LOOPBACK
;

304 
ai
 = 
	`mem_mÆloc
((
addröfo
));

305 i‡(
ai
 =
NULL
) {

306 
memîr
;

308 
	`mem£t
(
ai
, 0, (
addröfo
));

309 
ß
 = 
	`mem_mÆloc
((
sockaddr_ö
));

310 i‡(
ß
 =
NULL
) {

311 
memîr
;

313 
	`mem£t
(
ß
, 0, (
sockaddr_ö
));

315 
ß
->
sö_addr
.
s_addr
 = 
addr
.addr;

316 
ß
->
sö_Ámûy
 = 
AF_INET
;

317 
ß
->
sö_Àn
 = (
sockaddr_ö
);

318 
ß
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t_ƒ
);

321 
ai
->
ai_Ámûy
 = 
AF_INET
;

322 i‡(
höts
 !
NULL
) {

324 
ai
->
ai_sockty≥
 = 
höts
->ai_socktype;

325 
ai
->
ai_¥Ÿocﬁ
 = 
höts
->ai_protocol;

327 i‡(
nodíame
 !
NULL
) {

329 
size_t
 
«mñí
 = 
	`°æí
(
nodíame
);

330 
	`LWIP_ASSERT
("«mñí i†toÿl⁄g", (
«mñí
 + 1Ë<(
mem_size_t
)-1);

331 
ai
->
ai_ˇn⁄«me
 = 
	`mem_mÆloc
((
mem_size_t
)(
«mñí
 + 1));

332 i‡(
ai
->
ai_ˇn⁄«me
 =
NULL
) {

333 
memîr
;

335 
	`MEMCPY
(
ai
->
ai_ˇn⁄«me
, 
nodíame
, 
«mñí
);

336 
ai
->
ai_ˇn⁄«me
[
«mñí
] = 0;

338 
ai
->
ai_addæí
 = (
sockaddr_ö
);

339 
ai
->
ai_addr
 = (
sockaddr
*)
ß
;

341 *
ªs
 = 
ai
;

344 
memîr
:

345 i‡(
ai
 !
NULL
) {

346 
	`mem_‰ì
(
ai
);

348 i‡(
ß
 !
NULL
) {

349 
	`mem_‰ì
(
ß
);

351  
EAI_MEMORY
;

352 
	}
}

	@net/lwip/api/netifapi.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETIF_API


39 
	~"lwù/√tiÁpi.h
"

40 
	~"lwù/t˝ù.h
"

46 
	$do_√tiÁpi_√tif_add
–
√tiÁpi_msg_msg
 *
msg
)

48 i‡(!
	`√tif_add
–
msg
->
√tif
,

49 
msg
->msg.
add
.
ùaddr
,

50 
msg
->msg.
add
.
√tmask
,

51 
msg
->msg.
add
.
gw
,

52 
msg
->msg.
add
.
°©e
,

53 
msg
->msg.
add
.
öô
,

54 
msg
->msg.
add
.
öput
)) {

55 
msg
->
îr
 = 
ERR_IF
;

57 
msg
->
îr
 = 
ERR_OK
;

59 
	`TCPIP_NETIFAPI_ACK
(
msg
);

60 
	}
}

67 
	$do_√tiÁpi_√tif_comm⁄
–
√tiÁpi_msg_msg
 *
msg
)

69 i‡(
msg
->msg.
comm⁄
.
îπfunc
!=
NULL
) {

70 
msg
->
îr
 =

71 
msg
->msg.
comm⁄
.
	`îπfunc
(msg->
√tif
);

73 
msg
->
îr
 = 
ERR_OK
;

74 
msg
->msg.
comm⁄
.
	`voidfunc
(msg->
√tif
);

76 
	`TCPIP_NETIFAPI_ACK
(
msg
);

77 
	}
}

85 
îr_t


86 
√tiÁpi_√tif_add
(
√tif
 *netif,

87 
ù_addr
 *
ùaddr
,

88 
ù_addr
 *
√tmask
,

89 
ù_addr
 *
gw
,

90 *
°©e
,

91 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

92 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

94 
√tiÁpi_msg
 
msg
;

95 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_add
;

96 
msg
.msg.
√tif
 =Çetif;

97 
msg
.msg.msg.
add
.
ùaddr
 = ipaddr;

98 
msg
.msg.msg.
add
.
√tmask
 =Çetmask;

99 
msg
.msg.msg.
add
.
gw
 = gw;

100 
msg
.msg.msg.
add
.
°©e
 = state;

101 
msg
.msg.msg.
add
.
öô
 = init;

102 
msg
.msg.msg.
add
.
öput
 = input;

103 
	`TCPIP_NETIFAPI
(&
msg
);

104  
msg
.msg.
îr
;

105 
	}
}

113 
îr_t


114 
√tiÁpi_√tif_comm⁄
–
√tif
 *netif,

115 (* 
voidfunc
)(
√tif
 *netif),

116 
	$îr_t
 (* 
îπfunc
)(
√tif
 *netif) )

118 
√tiÁpi_msg
 
msg
;

119 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_comm⁄
;

120 
msg
.msg.
√tif
 =Çetif;

121 
msg
.msg.msg.
comm⁄
.
voidfunc
 = voidfunc;

122 
msg
.msg.msg.
comm⁄
.
îπfunc
 =Érrtfunc;

123 
	`TCPIP_NETIFAPI
(&
msg
);

124  
msg
.msg.
îr
;

125 
	}
}

	@net/lwip/api/sockets.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_SOCKET


46 
	~"lwù/sockës.h
"

47 
	~"lwù/≠i.h
"

48 
	~"lwù/sys.h
"

49 
	~"lwù/igmp.h
"

50 
	~"lwù/öë.h
"

51 
	~"lwù/t˝.h
"

52 
	~"lwù/øw.h
"

53 
	~"lwù/udp.h
"

54 
	~"lwù/t˝ù.h
"

56 
	~<°rög.h
>

58 
	#NUM_SOCKETS
 
MEMP_NUM_NETCONN


	)

61 
	slwù_sockë
 {

63 
√tc⁄n
 *
	mc⁄n
;

65 
√tbuf
 *
	mœ°d©a
;

67 
u16_t
 
	mœ°off£t
;

70 
u16_t
 
	mrcvevít
;

73 
u16_t
 
	m£ndevít
;

75 
u16_t
 
	mÊags
;

77 
	mîr
;

81 
	slwù_£À˘_cb
 {

83 
lwù_£À˘_cb
 *
	m√xt
;

85 
fd_£t
 *
	mªad£t
;

87 
fd_£t
 *
	mwrôe£t
;

89 
fd_£t
 *
	mex˚±£t
;

91 
	m£m_sig«Œed
;

93 
sys_£m_t
 
	m£m
;

98 
	slwù_£tgësock›t_d©a
 {

100 
lwù_sockë
 *
	msock
;

102 
	ms
;

104 
	mÀvñ
;

106 
	m›äame
;

109 *
	m›tvÆ
;

111 
sockÀn_t
 *
	m›éí
;

113 
îr_t
 
	mîr
;

117 
lwù_sockë
 
	gsockës
[
NUM_SOCKETS
];

119 
lwù_£À˘_cb
 *
	g£À˘_cb_li°
;

122 
sys_£m_t
 
	gsock£m
;

124 
sys_£m_t
 
	g£À˘£m
;

128 c⁄° 
	gîr_to_î∫o_èbÀ
[] = {

130 
ENOMEM
,

131 
ENOBUFS
,

132 
ETIMEDOUT
,

133 
EHOSTUNREACH
,

134 
ECONNABORTED
,

135 
ECONNRESET
,

136 
ESHUTDOWN
,

137 
ENOTCONN
,

138 
EINVAL
,

139 
EIO
,

140 
EADDRINUSE
,

143 
EINPROGRESS


146 
	#ERR_TO_ERRNO_TABLE_SIZE
 \

147 ((
îr_to_î∫o_èbÀ
)/”º_to_î∫o_èbÀ[0]))

	)

149 
	#îr_to_î∫o
(
îr
) \

150 (()(-(
îr
)Ë< 
ERR_TO_ERRNO_TABLE_SIZE
 ? \

151 
îr_to_î∫o_èbÀ
[-(
îr
)] : 
EIO
)

	)

153 #ifde‡
ERRNO


154 
	#£t_î∫o
(
îr
Ë
î∫o
 = (îr)

	)

156 
	#£t_î∫o
(
îr
)

	)

159 
	#sock_£t_î∫o
(
sk
, 
e
) do { \

160 
sk
->
îr
 = (
e
); \

161 
	`£t_î∫o
(
sk
->
îr
); \

162 } 0)

	)

165 
evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
);

166 
lwù_gësock›t_öã∫Æ
(*
¨g
);

167 
lwù_£tsock›t_öã∫Æ
(*
¨g
);

174 
	$lwù_sockë_öô
()

176 
sock£m
 = 
	`sys_£m_√w
(1);

177 
£À˘£m
 = 
	`sys_£m_√w
(1);

178 
	}
}

186 
lwù_sockë
 *

187 
	$gë_sockë
(
s
)

189 
lwù_sockë
 *
sock
;

191 i‡((
s
 < 0Ë|| (†>
NUM_SOCKETS
)) {

192 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d): invÆid\n", 
s
));

193 
	`£t_î∫o
(
EBADF
);

194  
NULL
;

197 
sock
 = &
sockës
[
s
];

199 i‡(!
sock
->
c⁄n
) {

200 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d):ÇŸá˘ive\n", 
s
));

201 
	`£t_î∫o
(
EBADF
);

202  
NULL
;

205  
sock
;

206 
	}
}

215 
	$Æloc_sockë
(
√tc⁄n
 *
√wc⁄n
)

217 
i
;

220 
	`sys_£m_waô
(
sock£m
);

223 
i
 = 0; i < 
NUM_SOCKETS
; ++i) {

224 i‡(!
sockës
[
i
].
c⁄n
) {

225 
sockës
[
i
].
c⁄n
 = 
√wc⁄n
;

226 
sockës
[
i
].
œ°d©a
 = 
NULL
;

227 
sockës
[
i
].
œ°off£t
 = 0;

228 
sockës
[
i
].
rcvevít
 = 0;

229 
sockës
[
i
].
£ndevít
 = 1;

230 
sockës
[
i
].
Êags
 = 0;

231 
sockës
[
i
].
îr
 = 0;

232 
	`sys_£m_sig«l
(
sock£m
);

233  
i
;

236 
	`sys_£m_sig«l
(
sock£m
);

238 
	}
}

247 
	$lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

249 
lwù_sockë
 *
sock
, *
nsock
;

250 
√tc⁄n
 *
√wc⁄n
;

251 
ù_addr
 
«ddr
;

252 
u16_t
 
p‹t
;

253 
√wsock
;

254 
sockaddr_ö
 
sö
;

255 
îr_t
 
îr
;

257 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d)...\n", 
s
));

258 
sock
 = 
	`gë_sockë
(
s
);

259 i‡(!
sock
)

262 
√wc⁄n
 = 
	`√tc⁄n_ac˚±
(
sock
->
c⁄n
);

263 i‡(!
√wc⁄n
) {

264 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËÁûed,Éº=%d\n", 
s
, 
sock
->
c⁄n
->
îr
));

265 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

270 
îr
 = 
	`√tc⁄n_≥î
(
√wc⁄n
, &
«ddr
, &
p‹t
);

271 i‡(
îr
 !
ERR_OK
) {

272 
	`√tc⁄n_dñëe
(
√wc⁄n
);

273 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

277 
	`mem£t
(&
sö
, 0, (sin));

278 
sö
.
sö_Àn
 = (sin);

279 
sö
.
sö_Ámûy
 = 
AF_INET
;

280 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

281 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

283 i‡(*
addæí
 > (
sö
))

284 *
addæí
 = (
sö
);

286 
	`SMEMCPY
(
addr
, &
sö
, *
addæí
);

288 
√wsock
 = 
	`Æloc_sockë
(
√wc⁄n
);

289 i‡(
√wsock
 == -1) {

290 
	`√tc⁄n_dñëe
(
√wc⁄n
);

291 
	`sock_£t_î∫o
(
sock
, 
ENFILE
);

294 
	`LWIP_ASSERT
("övÆid sockë index", (
√wsock
 >0Ë&& (√wsock < 
NUM_SOCKETS
));

295 
√wc⁄n
->
ˇŒback
 = 
evít_ˇŒback
;

296 
nsock
 = &
sockës
[
√wsock
];

297 
	`LWIP_ASSERT
("övÆid sockëÖoöãr", 
nsock
 !
NULL
);

299 
	`sys_£m_waô
(
sock£m
);

305 
nsock
->
rcvevít
 +-1 - 
√wc⁄n
->
sockë
;

306 
√wc⁄n
->
sockë
 = 
√wsock
;

307 
	`sys_£m_sig«l
(
sock£m
);

309 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËªtu∫ögÇew sock=%dáddr=", 
s
, 
√wsock
));

311 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u\n", 
p‹t
));

313 
	`sock_£t_î∫o
(
sock
, 0);

314  
√wsock
;

315 
	}
}

318 
	$lwù_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

320 
lwù_sockë
 *
sock
;

321 
ù_addr
 
loˇl_addr
;

322 
u16_t
 
loˇl_p‹t
;

323 
îr_t
 
îr
;

325 
sock
 = 
	`gë_sockë
(
s
);

326 i‡(!
sock
)

329 
	`LWIP_ERROR
("lwù_böd: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

330 ((((
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

331 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

333 
loˇl_addr
.
addr
 = ((
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

334 
loˇl_p‹t
 = ((
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

336 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%d,áddr=", 
s
));

338 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u)\n", 
	`¡ohs
(
loˇl_p‹t
)));

340 
îr
 = 
	`√tc⁄n_böd
(
sock
->
c⁄n
, &
loˇl_addr
, 
	`¡ohs
(
loˇl_p‹t
));

342 i‡(
îr
 !
ERR_OK
) {

343 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

344 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

348 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËsuc˚eded\n", 
s
));

349 
	`sock_£t_î∫o
(
sock
, 0);

351 
	}
}

354 
	$lwù_˛o£
(
s
)

356 
lwù_sockë
 *
sock
;

358 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_˛o£(%d)\n", 
s
));

360 
sock
 = 
	`gë_sockë
(
s
);

361 i‡(!
sock
) {

365 
	`√tc⁄n_dñëe
(
sock
->
c⁄n
);

367 
	`sys_£m_waô
(
sock£m
);

368 i‡(
sock
->
œ°d©a
) {

369 
	`√tbuf_dñëe
(
sock
->
œ°d©a
);

371 
sock
->
œ°d©a
 = 
NULL
;

372 
sock
->
œ°off£t
 = 0;

373 
sock
->
c⁄n
 = 
NULL
;

374 
	`sock_£t_î∫o
(
sock
, 0);

375 
	`sys_£m_sig«l
(
sock£m
);

377 
	}
}

380 
	$lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

382 
lwù_sockë
 *
sock
;

383 
îr_t
 
îr
;

385 
sock
 = 
	`gë_sockë
(
s
);

386 i‡(!
sock
)

389 
	`LWIP_ERROR
("lwù_c⁄√˘: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

390 ((((
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

391 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

393 i‡(((
sockaddr_ö
 *)
«me
)->
sö_Ámûy
 =
AF_UNSPEC
) {

394 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d, AF_UNSPEC)\n", 
s
));

395 
îr
 = 
	`√tc⁄n_disc⁄√˘
(
sock
->
c⁄n
);

397 
ù_addr
 
ªmŸe_addr
;

398 
u16_t
 
ªmŸe_p‹t
;

400 
ªmŸe_addr
.
addr
 = ((
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

401 
ªmŸe_p‹t
 = ((
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

403 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d,áddr=", 
s
));

405 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u)\n", 
	`¡ohs
(
ªmŸe_p‹t
)));

407 
îr
 = 
	`√tc⁄n_c⁄√˘
(
sock
->
c⁄n
, &
ªmŸe_addr
, 
	`¡ohs
(
ªmŸe_p‹t
));

410 i‡(
îr
 !
ERR_OK
) {

411 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

412 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

416 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËsuc˚eded\n", 
s
));

417 
	`sock_£t_î∫o
(
sock
, 0);

419 
	}
}

430 
	$lwù_li°í
(
s
, 
backlog
)

432 
lwù_sockë
 *
sock
;

433 
îr_t
 
îr
;

435 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%d, backlog=%d)\n", 
s
, 
backlog
));

437 
sock
 = 
	`gë_sockë
(
s
);

438 i‡(!
sock
)

442 i‡(
backlog
 < 0) {

443 
backlog
 = 0;

445 i‡(
backlog
 > 0xff) {

446 
backlog
 = 0xff;

449 
îr
 = 
	`√tc⁄n_li°í_wôh_backlog
(
sock
->
c⁄n
, 
backlog
);

451 i‡(
îr
 !
ERR_OK
) {

452 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

453 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

457 
	`sock_£t_î∫o
(
sock
, 0);

459 
	}
}

462 
	$lwù_ªcv‰om
(
s
, *
mem
, 
Àn
, 
Êags
,

463 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

465 
lwù_sockë
 *
sock
;

466 
√tbuf
 *
buf
;

467 
u16_t
 
buÊí
, 
c›yÀn
, 
off
 = 0;

468 
ù_addr
 *
addr
;

469 
u16_t
 
p‹t
;

470 
u8_t
 
d⁄e
 = 0;

472 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d, %p, %d, 0x%x, ..)\n", 
s
, 
mem
, 
Àn
, 
Êags
));

473 
sock
 = 
	`gë_sockë
(
s
);

474 i‡(!
sock
)

478 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Å› whûêsock->œ°d©a=%p\n", (*)
sock
->
œ°d©a
));

480 i‡(
sock
->
œ°d©a
) {

481 
buf
 = 
sock
->
œ°d©a
;

484 i‡(((
Êags
 & 
MSG_DONTWAIT
Ë|| (
sock
->Êag†& 
O_NONBLOCK
)Ë&& !sock->
rcvevít
) {

485 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

486 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

492 
sock
->
œ°d©a
 = 
buf
 = 
	`√tc⁄n_ªcv
(sock->
c⁄n
);

493 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Çëc⁄n_ªcvÇëbuf=%p\n", (*)
buf
));

495 i‡(!
buf
) {

497 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d): bu‡=NULL!\n", 
s
));

498 
	`sock_£t_î∫o
(
sock
, (((sock->
c⁄n
->
pcb
.
ù
!=
NULL
Ë&& (sock->c⁄n->
îr
==
ERR_OK
))?
ETIMEDOUT
:
	`îr_to_î∫o
(sock->conn->err)));

503 
buÊí
 = 
	`√tbuf_Àn
(
buf
);

504 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: buÊí=%dÜí=%d off=%d sock->œ°off£t=%d\n", 
buÊí
, 
Àn
, 
off
, 
sock
->
œ°off£t
));

506 
buÊí
 -
sock
->
œ°off£t
;

508 i‡(
Àn
 > 
buÊí
) {

509 
c›yÀn
 = 
buÊí
;

511 
c›yÀn
 = 
Àn
;

516 
	`√tbuf_c›y_∑πül
(
buf
, (
u8_t
*)
mem
 + 
off
, 
c›yÀn
, 
sock
->
œ°off£t
);

518 
off
 +
c›yÀn
;

520 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

521 
Àn
 -
c›yÀn
;

522 i‡–(
Àn
 <0Ë|| (
buf
->
p
->
Êags
 & 
PBUF_FLAG_PUSH
Ë|| !
sock
->
rcvevít
) {

523 
d⁄e
 = 1;

526 
d⁄e
 = 1;

530 i‡((
Êags
 & 
MSG_PEEK
)==0) {

534 i‡((
sock
->
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
buÊí
 - 
c›yÀn
 > 0)) {

535 
sock
->
œ°d©a
 = 
buf
;

536 
sock
->
œ°off£t
 +
c›yÀn
;

537 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Üa°d©®nowÇëbuf=%p\n", (*)
buf
));

539 
sock
->
œ°d©a
 = 
NULL
;

540 
sock
->
œ°off£t
 = 0;

541 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: dñëögÇëbuf=%p\n", (*)
buf
));

542 
	`√tbuf_dñëe
(
buf
);

545 
d⁄e
 = 1;

547 } !
d⁄e
);

550 i‡(
‰om
 && 
‰omÀn
) {

551 
sockaddr_ö
 
sö
;

553 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

554 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

555 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

557 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

558 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

561 
	`mem£t
(&
sö
, 0, (sin));

562 
sö
.
sö_Àn
 = (sin);

563 
sö
.
sö_Ámûy
 = 
AF_INET
;

564 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

565 
sö
.
sö_addr
.
s_addr
 = 
addr
->addr;

567 i‡(*
‰omÀn
 > (
sö
))

568 *
‰omÀn
 = (
sö
);

570 
	`SMEMCPY
(
‰om
, &
sö
, *
‰omÀn
);

572 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

574 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%uÜí=%u\n", 
p‹t
, 
off
));

576 #i‡
SOCKETS_DEBUG


577 
sockaddr_ö
 
sö
;

579 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

580 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

581 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

583 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

584 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

587 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

589 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%uÜí=%u\n", 
p‹t
, 
off
));

593 
	`sock_£t_î∫o
(
sock
, 0);

594  
off
;

595 
	}
}

598 
	$lwù_ªad
(
s
, *
mem
, 
Àn
)

600  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 0, 
NULL
, NULL);

601 
	}
}

604 
	$lwù_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
)

606  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 
Êags
, 
NULL
, NULL);

607 
	}
}

610 
	$lwù_£nd
(
s
, c⁄° *
d©a
, 
size
, 
Êags
)

612 
lwù_sockë
 *
sock
;

613 
îr_t
 
îr
;

615 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_send(%d, data=%p, size=%d, flags=0x%x)\n",

616 
s
, 
d©a
, 
size
, 
Êags
));

618 
sock
 = 
	`gë_sockë
(
s
);

619 i‡(!
sock
)

622 i‡(
sock
->
c⁄n
->
ty≥
!=
NETCONN_TCP
) {

623 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

624  
	`lwù_£ndto
(
s
, 
d©a
, 
size
, 
Êags
, 
NULL
, 0);

626 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

631 
îr
 = 
	`√tc⁄n_wrôe
(
sock
->
c⁄n
, 
d©a
, 
size
, 
NETCONN_COPY
 | ((
Êags
 & 
MSG_MORE
)?
NETCONN_MORE
:0));

633 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%dËîr=%d size=%d\n", 
s
, 
îr
, 
size
));

634 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

635  (
îr
==
ERR_OK
?
size
:-1);

636 
	}
}

639 
	$lwù_£ndto
(
s
, c⁄° *
d©a
, 
size
, 
Êags
,

640 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

642 
lwù_sockë
 *
sock
;

643 
ù_addr
 
ªmŸe_addr
;

644 
îr
;

645 #i‡!
LWIP_TCPIP_CORE_LOCKING


646 
√tbuf
 
buf
;

647 
u16_t
 
ªmŸe_p‹t
;

650 
sock
 = 
	`gë_sockë
(
s
);

651 i‡(!
sock
)

654 i‡(
sock
->
c⁄n
->
ty≥
==
NETCONN_TCP
) {

655 #i‡
LWIP_TCP


656  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 
Êags
);

658 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

663 
	`LWIP_ASSERT
("lwip_sendto: size must fit in u16_t",

664 ((
size
 >= 0) && (size <= 0xffff)));

665 
	`LWIP_ERROR
("lwù_£ndto: invÆidáddªss", (((
to
 =
NULL
Ë&& (
tﬁí
 == 0)) ||

666 ((
tﬁí
 =(
sockaddr_ö
)) &&

667 ((((
sockaddr_ö
 *)
to
)->
sö_Ámûy
Ë=
AF_INET
))),

668 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

670 #i‡
LWIP_TCPIP_CORE_LOCKING


672 { 
pbuf
* 
p
;

674 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

675 i‡(
p
 =
NULL
) {

676 
îr
 = 
ERR_MEM
;

678 
p
->
∑ylﬂd
 = (*)
d©a
;

679 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
size
;

681 
ªmŸe_addr
.
addr
 = ((
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

683 
	`LOCK_TCPIP_CORE
();

684 i‡(
sock
->
c⁄n
->
ty≥
==
NETCONN_RAW
) {

685 
îr
 = 
sock
->
c⁄n
->î∏
	`øw_£ndto
(sock->c⁄n->
pcb
.
øw
, 
p
, &
ªmŸe_addr
);

687 
îr
 = 
sock
->
c⁄n
->î∏
	`udp_£ndto
(sock->c⁄n->
pcb
.
udp
, 
p
, &
ªmŸe_addr
, 
	`¡ohs
(((
sockaddr_ö
 *)
to
)->
sö_p‹t
));

689 
	`UNLOCK_TCPIP_CORE
();

691 
	`pbuf_‰ì
(
p
);

696 
buf
.
p
 = buf.
±r
 = 
NULL
;

697 i‡(
to
) {

698 
ªmŸe_addr
.
addr
 = ((
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

699 
ªmŸe_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *)
to
)->
sö_p‹t
);

700 
buf
.
addr
 = &
ªmŸe_addr
;

701 
buf
.
p‹t
 = 
ªmŸe_p‹t
;

703 
ªmŸe_addr
.
addr
 = 0;

704 
ªmŸe_p‹t
 = 0;

705 
buf
.
addr
 = 
NULL
;

706 
buf
.
p‹t
 = 0;

709 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_sendto(%d, data=%p, size=%d, flags=0x%xÅo=",

710 
s
, 
d©a
, 
size
, 
Êags
));

712 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u\n", 
ªmŸe_p‹t
));

715 i‡((
îr
 = 
	`√tbuf_ªf
(&
buf
, 
d©a
, 
size
)Ë=
ERR_OK
) {

717 
îr
 = 
	`√tc⁄n_£nd
(
sock
->
c⁄n
, &
buf
);

721 i‡(
buf
.
p
 !
NULL
) {

722 
	`pbuf_‰ì
(
buf
.
p
);

725 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

726  (
îr
==
ERR_OK
?
size
:-1);

727 
	}
}

730 
	$lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

732 
√tc⁄n
 *
c⁄n
;

733 
i
;

735 
	`LWIP_UNUSED_ARG
(
domaö
);

738 
ty≥
) {

739 
SOCK_RAW
:

740 
c⁄n
 = 
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
NETCONN_RAW
, (
u8_t
)
¥Ÿocﬁ
, 
evít_ˇŒback
);

741 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_RAW, %d) = ",

742 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

744 
SOCK_DGRAM
:

745 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
–(
¥Ÿocﬁ
 =
IPPROTO_UDPLITE
) ?

746 
NETCONN_UDPLITE
 : 
NETCONN_UDP
, 
evít_ˇŒback
);

747 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",

748 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

750 
SOCK_STREAM
:

751 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
(
NETCONN_TCP
, 
evít_ˇŒback
);

752 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_STREAM, %d) = ",

753 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

756 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",

757 
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

758 
	`£t_î∫o
(
EINVAL
);

762 i‡(!
c⁄n
) {

763 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("-1 / ENOBUFS (couldÇot createÇetconn)\n"));

764 
	`£t_î∫o
(
ENOBUFS
);

768 
i
 = 
	`Æloc_sockë
(
c⁄n
);

770 i‡(
i
 == -1) {

771 
	`√tc⁄n_dñëe
(
c⁄n
);

772 
	`£t_î∫o
(
ENFILE
);

775 
c⁄n
->
sockë
 = 
i
;

776 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("%d\n", 
i
));

777 
	`£t_î∫o
(0);

778  
i
;

779 
	}
}

782 
	$lwù_wrôe
(
s
, c⁄° *
d©a
, 
size
)

784  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 0);

785 
	}
}

803 
	$lwù_£lsˇn
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
)

805 
i
, 
ƒódy
 = 0;

806 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

807 
lwù_sockë
 *
p_sock
;

809 
	`FD_ZERO
(&
Ãód£t
);

810 
	`FD_ZERO
(&
lwrôe£t
);

811 
	`FD_ZERO
(&
Àx˚±£t
);

815 
i
 = 0; i < 
maxfdp1
; i++) {

816 i‡(
	`FD_ISSET
(
i
, 
ªad£t
)) {

818 
p_sock
 = 
	`gë_sockë
(
i
);

819 i‡(
p_sock
 && (p_sock->
œ°d©a
 ||Ö_sock->
rcvevít
)) {

820 
	`FD_SET
(
i
, &
Ãód£t
);

821 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹Ñódög\n", 
i
));

822 
ƒódy
++;

825 i‡(
	`FD_ISSET
(
i
, 
wrôe£t
)) {

827 
p_sock
 = 
	`gë_sockë
(
i
);

828 i‡(
p_sock
 &&Ö_sock->
£ndevít
) {

829 
	`FD_SET
(
i
, &
lwrôe£t
);

830 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹ wrôög\n", 
i
));

831 
ƒódy
++;

835 *
ªad£t
 = 
Ãód£t
;

836 *
wrôe£t
 = 
lwrôe£t
;

837 
	`FD_ZERO
(
ex˚±£t
);

839  
ƒódy
;

840 
	}
}

847 
	$lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

848 
timevÆ
 *
timeout
)

850 
i
;

851 
ƒódy
;

852 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

853 
u32_t
 
m£˘imeout
;

854 
lwù_£À˘_cb
 
£À˘_cb
;

855 
lwù_£À˘_cb
 *
p_£lcb
;

857 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select(%d, %p, %p, %p,Åvsec=%ldÅvusec=%ld)\n",

858 
maxfdp1
, (*)
ªad£t
, (*Ë
wrôe£t
, (*Ë
ex˚±£t
,

859 
timeout
 ?Åimeout->
tv_£c
 : -1L,Åimeouà?Åimeout->
tv_u£c
 : -1L));

861 
£À˘_cb
.
√xt
 = 0;

862 
£À˘_cb
.
ªad£t
 =Ñeadset;

863 
£À˘_cb
.
wrôe£t
 = writeset;

864 
£À˘_cb
.
ex˚±£t
 =Éxceptset;

865 
£À˘_cb
.
£m_sig«Œed
 = 0;

868 
	`sys_£m_waô
(
£À˘£m
);

870 i‡(
ªad£t
)

871 
Ãód£t
 = *
ªad£t
;

873 
	`FD_ZERO
(&
Ãód£t
);

874 i‡(
wrôe£t
)

875 
lwrôe£t
 = *
wrôe£t
;

877 
	`FD_ZERO
(&
lwrôe£t
);

878 i‡(
ex˚±£t
)

879 
Àx˚±£t
 = *
ex˚±£t
;

881 
	`FD_ZERO
(&
Àx˚±£t
);

885 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

888 i‡(!
ƒódy
) {

889 i‡(
timeout
 &&Åimeout->
tv_£c
 =0 &&Åimeout->
tv_u£c
 == 0) {

890 
	`sys_£m_sig«l
(
£À˘£m
);

891 i‡(
ªad£t
)

892 
	`FD_ZERO
(
ªad£t
);

893 i‡(
wrôe£t
)

894 
	`FD_ZERO
(
wrôe£t
);

895 i‡(
ex˚±£t
)

896 
	`FD_ZERO
(
ex˚±£t
);

898 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÇoÅimeout,Ñeturning 0\n"));

899 
	`£t_î∫o
(0);

909 
£À˘_cb
.
£m
 = 
	`sys_£m_√w
(0);

912 
£À˘_cb
.
√xt
 = 
£À˘_cb_li°
;

913 
£À˘_cb_li°
 = &
£À˘_cb
;

916 
	`sys_£m_sig«l
(
£À˘£m
);

919 i‡(
timeout
 == 0)

921 
m£˘imeout
 = 0;

923 
m£˘imeout
 = ((
timeout
->
tv_£c
 * 1000Ë+ (—imeout->
tv_u£c
 + 500)/1000));

924 if(
m£˘imeout
 == 0)

925 
m£˘imeout
 = 1;

928 
i
 = 
	`sys_£m_waô_timeout
(
£À˘_cb
.
£m
, 
m£˘imeout
);

931 
	`sys_£m_waô
(
£À˘£m
);

932 i‡(
£À˘_cb_li°
 =&
£À˘_cb
)

933 
£À˘_cb_li°
 = 
£À˘_cb
.
√xt
;

935 
p_£lcb
 = 
£À˘_cb_li°
;Ö_£lcb;Ö_£lcb =Ö_£lcb->
√xt
) {

936 i‡(
p_£lcb
->
√xt
 =&
£À˘_cb
) {

937 
p_£lcb
->
√xt
 = 
£À˘_cb
.next;

942 
	`sys_£m_sig«l
(
£À˘£m
);

944 
	`sys_£m_‰ì
(
£À˘_cb
.
£m
);

945 i‡(
i
 == 0) {

947 i‡(
ªad£t
)

948 
	`FD_ZERO
(
ªad£t
);

949 i‡(
wrôe£t
)

950 
	`FD_ZERO
(
wrôe£t
);

951 i‡(
ex˚±£t
)

952 
	`FD_ZERO
(
ex˚±£t
);

954 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÅimeoutÉxpired\n"));

955 
	`£t_î∫o
(0);

960 i‡(
ªad£t
)

961 
Ãód£t
 = *
ªad£t
;

963 
	`FD_ZERO
(&
Ãód£t
);

964 i‡(
wrôe£t
)

965 
lwrôe£t
 = *
wrôe£t
;

967 
	`FD_ZERO
(&
lwrôe£t
);

968 i‡(
ex˚±£t
)

969 
Àx˚±£t
 = *
ex˚±£t
;

971 
	`FD_ZERO
(&
Àx˚±£t
);

974 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

976 
	`sys_£m_sig«l
(
£À˘£m
);

978 i‡(
ªad£t
)

979 *
ªad£t
 = 
Ãód£t
;

980 i‡(
wrôe£t
)

981 *
wrôe£t
 = 
lwrôe£t
;

982 i‡(
ex˚±£t
)

983 *
ex˚±£t
 = 
Àx˚±£t
;

985 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£À˘:Çªady=%d\n", 
ƒódy
));

986 
	`£t_î∫o
(0);

988  
ƒódy
;

989 
	}
}

996 
	$evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
)

998 
s
;

999 
lwù_sockë
 *
sock
;

1000 
lwù_£À˘_cb
 *
scb
;

1002 
	`LWIP_UNUSED_ARG
(
Àn
);

1005 i‡(
c⁄n
) {

1006 
s
 = 
c⁄n
->
sockë
;

1007 i‡(
s
 < 0) {

1013 
	`sys_£m_waô
(
sock£m
);

1014 i‡(
c⁄n
->
sockë
 < 0) {

1015 i‡(
evt
 =
NETCONN_EVT_RCVPLUS
) {

1016 
c⁄n
->
sockë
--;

1018 
	`sys_£m_sig«l
(
sock£m
);

1021 
	`sys_£m_sig«l
(
sock£m
);

1024 
sock
 = 
	`gë_sockë
(
s
);

1025 i‡(!
sock
) {

1032 
	`sys_£m_waô
(
£À˘£m
);

1034 
evt
) {

1035 
NETCONN_EVT_RCVPLUS
:

1036 
sock
->
rcvevít
++;

1038 
NETCONN_EVT_RCVMINUS
:

1039 
sock
->
rcvevít
--;

1041 
NETCONN_EVT_SENDPLUS
:

1042 
sock
->
£ndevít
 = 1;

1044 
NETCONN_EVT_SENDMINUS
:

1045 
sock
->
£ndevít
 = 0;

1048 
	`LWIP_ASSERT
("unknownÉvent", 0);

1051 
	`sys_£m_sig«l
(
£À˘£m
);

1061 
	`sys_£m_waô
(
£À˘£m
);

1062 
scb
 = 
£À˘_cb_li°
; scb; scb = scb->
√xt
) {

1063 i‡(
scb
->
£m_sig«Œed
 == 0) {

1065 i‡(
scb
->
ªad£t
 && 
	`FD_ISSET
(
s
, scb->readset))

1066 i‡(
sock
->
rcvevít
)

1068 i‡(
scb
->
wrôe£t
 && 
	`FD_ISSET
(
s
, scb->writeset))

1069 i‡(
sock
->
£ndevít
)

1073 i‡(
scb
) {

1074 
scb
->
£m_sig«Œed
 = 1;

1075 
	`sys_£m_sig«l
(
£À˘£m
);

1076 
	`sys_£m_sig«l
(
scb
->
£m
);

1078 
	`sys_£m_sig«l
(
£À˘£m
);

1082 
	}
}

1089 
	$lwù_shutdown
(
s
, 
how
)

1091 
	`LWIP_UNUSED_ARG
(
how
);

1092 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_shutdown(%d, how=%d)\n", 
s
, 
how
));

1093  
	`lwù_˛o£
(
s
);

1094 
	}
}

1097 
	$lwù_gëadd∫ame
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
, 
u8_t
 
loˇl
)

1099 
lwù_sockë
 *
sock
;

1100 
sockaddr_ö
 
sö
;

1101 
ù_addr
 
«ddr
;

1103 
sock
 = 
	`gë_sockë
(
s
);

1104 i‡(!
sock
)

1107 
	`mem£t
(&
sö
, 0, (sin));

1108 
sö
.
sö_Àn
 = (sin);

1109 
sö
.
sö_Ámûy
 = 
AF_INET
;

1112 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, &
«ddr
, &
sö
.
sö_p‹t
, 
loˇl
);

1114 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gëadd∫ame(%d,áddr=", 
s
));

1116 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%d)\n", 
sö
.
sö_p‹t
));

1118 
sö
.
sö_p‹t
 = 
	`ht⁄s
(sin.sin_port);

1119 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

1121 i‡(*
«mñí
 > (
sö
))

1122 *
«mñí
 = (
sö
);

1124 
	`SMEMCPY
(
«me
, &
sö
, *
«mñí
);

1125 
	`sock_£t_î∫o
(
sock
, 0);

1127 
	}
}

1130 
	$lwù_gë≥î«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1132  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 0);

1133 
	}
}

1136 
	$lwù_gësock«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1138  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 1);

1139 
	}
}

1142 
	$lwù_gësock›t
(
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
)

1144 
îr_t
 
îr
 = 
ERR_OK
;

1145 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1146 
lwù_£tgësock›t_d©a
 
d©a
;

1148 i‡(!
sock
)

1151 i‡((
NULL
 =
›tvÆ
Ë|| (NULL =
›éí
)) {

1152 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1157 
Àvñ
) {

1160 
SOL_SOCKET
:

1161 
›äame
) {

1163 
SO_ACCEPTCONN
:

1164 
SO_BROADCAST
:

1167 
SO_ERROR
:

1168 
SO_KEEPALIVE
:

1171 #i‡
LWIP_SO_RCVTIMEO


1172 
SO_RCVTIMEO
:

1174 #i‡
LWIP_SO_RCVBUF


1175 
SO_RCVBUF
:

1181 #i‡
SO_REUSE


1182 
SO_REUSEADDR
:

1183 
SO_REUSEPORT
:

1185 
SO_TYPE
:

1187 i‡(*
›éí
 < ()) {

1188 
îr
 = 
EINVAL
;

1192 
SO_NO_CHECK
:

1193 i‡(*
›éí
 < ()) {

1194 
îr
 = 
EINVAL
;

1196 #i‡
LWIP_UDP


1197 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1198 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1200 
îr
 = 
EAFNOSUPPORT
;

1206 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1207 
s
, 
›äame
));

1208 
îr
 = 
ENOPROTOOPT
;

1213 
IPPROTO_IP
:

1214 
›äame
) {

1218 
IP_TTL
:

1219 
IP_TOS
:

1220 i‡(*
›éí
 < ()) {

1221 
îr
 = 
EINVAL
;

1224 #i‡
LWIP_IGMP


1225 
IP_MULTICAST_TTL
:

1226 i‡(*
›éí
 < (
u8_t
)) {

1227 
îr
 = 
EINVAL
;

1230 
IP_MULTICAST_IF
:

1231 i‡(*
›éí
 < (
ö_addr
)) {

1232 
îr
 = 
EINVAL
;

1238 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1239 
s
, 
›äame
));

1240 
îr
 = 
ENOPROTOOPT
;

1244 #i‡
LWIP_TCP


1246 
IPPROTO_TCP
:

1247 i‡(*
›éí
 < ()) {

1248 
îr
 = 
EINVAL
;

1253 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1256 
›äame
) {

1257 
TCP_NODELAY
:

1258 
TCP_KEEPALIVE
:

1259 #i‡
LWIP_TCP_KEEPALIVE


1260 
TCP_KEEPIDLE
:

1261 
TCP_KEEPINTVL
:

1262 
TCP_KEEPCNT
:

1267 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1268 
s
, 
›äame
));

1269 
îr
 = 
ENOPROTOOPT
;

1273 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1275 
IPPROTO_UDPLITE
:

1276 i‡(*
›éí
 < ()) {

1277 
îr
 = 
EINVAL
;

1282 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1285 
›äame
) {

1286 
UDPLITE_SEND_CSCOV
:

1287 
UDPLITE_RECV_CSCOV
:

1291 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1292 
s
, 
›äame
));

1293 
îr
 = 
ENOPROTOOPT
;

1299 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1300 
s
, 
Àvñ
, 
›äame
));

1301 
îr
 = 
ENOPROTOOPT
;

1305 i‡(
îr
 !
ERR_OK
) {

1306 
	`sock_£t_î∫o
(
sock
, 
îr
);

1311 
d©a
.
sock
 = sock;

1312 
d©a
.
Àvñ
 =Üevel;

1313 
d©a
.
›äame
 = optname;

1314 
d©a
.
›tvÆ
 = optval;

1315 
d©a
.
›éí
 = optlen;

1316 
d©a
.
îr
 =Érr;

1317 
	`t˝ù_ˇŒback
(
lwù_gësock›t_öã∫Æ
, &
d©a
);

1318 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1320 
îr
 = 
d©a
.err;

1322 
	`sock_£t_î∫o
(
sock
, 
îr
);

1323  
îr
 ? -1 : 0;

1324 
	}
}

1327 
	$lwù_gësock›t_öã∫Æ
(*
¨g
)

1329 
lwù_sockë
 *
sock
;

1330 #ifde‡
LWIP_DEBUG


1331 
s
;

1333 
Àvñ
, 
›äame
;

1334 *
›tvÆ
;

1335 
lwù_£tgësock›t_d©a
 *
d©a
;

1337 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1339 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1340 
sock
 = 
d©a
->sock;

1341 #ifde‡
LWIP_DEBUG


1342 
s
 = 
d©a
->s;

1344 
Àvñ
 = 
d©a
->level;

1345 
›äame
 = 
d©a
->optname;

1346 
›tvÆ
 = 
d©a
->optval;

1348 
Àvñ
) {

1351 
SOL_SOCKET
:

1352 
›äame
) {

1355 
SO_ACCEPTCONN
:

1356 
SO_BROADCAST
:

1359 
SO_KEEPALIVE
:

1361 #i‡
SO_REUSE


1362 
SO_REUSEADDR
:

1363 
SO_REUSEPORT
:

1366 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 & 
›äame
;

1367 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",

1368 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1371 
SO_TYPE
:

1372 
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
)) {

1373 
NETCONN_RAW
:

1374 *(*)
›tvÆ
 = 
SOCK_RAW
;

1376 
NETCONN_TCP
:

1377 *(*)
›tvÆ
 = 
SOCK_STREAM
;

1379 
NETCONN_UDP
:

1380 *(*)
›tvÆ
 = 
SOCK_DGRAM
;

1383 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ty≥
;

1384 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
,

1386 
s
, *(*)
›tvÆ
));

1388 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",

1389 
s
, *(*)
›tvÆ
));

1392 
SO_ERROR
:

1393 i‡(
sock
->
îr
 == 0) {

1394 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

1396 *(*)
›tvÆ
 = 
sock
->
îr
;

1397 
sock
->
îr
 = 0;

1398 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",

1399 
s
, *(*)
›tvÆ
));

1402 #i‡
LWIP_SO_RCVTIMEO


1403 
SO_RCVTIMEO
:

1404 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_timeout
;

1407 #i‡
LWIP_SO_RCVBUF


1408 
SO_RCVBUF
:

1409 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_bufsize
;

1412 #i‡
LWIP_UDP


1413 
SO_NO_CHECK
:

1414 *(*)
›tvÆ
 = (
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_NOCHKSUM
) ? 1 : 0;

1421 
IPPROTO_IP
:

1422 
›äame
) {

1423 
IP_TTL
:

1424 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1425 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",

1426 
s
, *(*)
›tvÆ
));

1428 
IP_TOS
:

1429 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
tos
;

1430 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",

1431 
s
, *(*)
›tvÆ
));

1433 #i‡
LWIP_IGMP


1434 
IP_MULTICAST_TTL
:

1435 *(
u8_t
*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1436 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",

1437 
s
, *(*)
›tvÆ
));

1439 
IP_MULTICAST_IF
:

1440 ((
ö_addr
*Ë
›tvÆ
)->
s_addr
 = 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
;

1441 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%x\n",

1442 
s
, *(
u32_t
 *)
›tvÆ
));

1448 #i‡
LWIP_TCP


1450 
IPPROTO_TCP
:

1451 
›äame
) {

1452 
TCP_NODELAY
:

1453 *(*)
›tvÆ
 = (
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 & 
TF_NODELAY
);

1454 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",

1455 
s
, (*(*)
›tvÆ
)?"on":"off") );

1457 
TCP_KEEPALIVE
:

1458 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
;

1459 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",

1460 
s
, *(*)
›tvÆ
));

1463 #i‡
LWIP_TCP_KEEPALIVE


1464 
TCP_KEEPIDLE
:

1465 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
/1000);

1466 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",

1467 
s
, *(*)
›tvÆ
));

1469 
TCP_KEEPINTVL
:

1470 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
/1000);

1471 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",

1472 
s
, *(*)
›tvÆ
));

1474 
TCP_KEEPCNT
:

1475 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
;

1476 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",

1477 
s
, *(*)
›tvÆ
));

1484 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1486 
IPPROTO_UDPLITE
:

1487 
›äame
) {

1488 
UDPLITE_SEND_CSCOV
:

1489 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
;

1490 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",

1491 
s
, (*(*)
›tvÆ
)) );

1493 
UDPLITE_RECV_CSCOV
:

1494 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
;

1495 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",

1496 
s
, (*(*)
›tvÆ
)) );

1502 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1503 
	}
}

1506 
	$lwù_£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

1508 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1509 
îr
 = 
ERR_OK
;

1510 
lwù_£tgësock›t_d©a
 
d©a
;

1512 i‡(!
sock
)

1515 i‡(
NULL
 =
›tvÆ
) {

1516 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1521 
Àvñ
) {

1524 
SOL_SOCKET
:

1525 
›äame
) {

1527 
SO_BROADCAST
:

1530 
SO_KEEPALIVE
:

1533 #i‡
LWIP_SO_RCVTIMEO


1534 
SO_RCVTIMEO
:

1536 #i‡
LWIP_SO_RCVBUF


1537 
SO_RCVBUF
:

1543 #i‡
SO_REUSE


1544 
SO_REUSEADDR
:

1545 
SO_REUSEPORT
:

1548 i‡(
›éí
 < ()) {

1549 
îr
 = 
EINVAL
;

1552 
SO_NO_CHECK
:

1553 i‡(
›éí
 < ()) {

1554 
îr
 = 
EINVAL
;

1556 #i‡
LWIP_UDP


1557 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1558 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1560 
îr
 = 
EAFNOSUPPORT
;

1565 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1566 
s
, 
›äame
));

1567 
îr
 = 
ENOPROTOOPT
;

1572 
IPPROTO_IP
:

1573 
›äame
) {

1577 
IP_TTL
:

1578 
IP_TOS
:

1579 i‡(
›éí
 < ()) {

1580 
îr
 = 
EINVAL
;

1583 #i‡
LWIP_IGMP


1584 
IP_MULTICAST_TTL
:

1585 i‡(
›éí
 < (
u8_t
)) {

1586 
îr
 = 
EINVAL
;

1588 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1589 
îr
 = 
EAFNOSUPPORT
;

1592 
IP_MULTICAST_IF
:

1593 i‡(
›éí
 < (
ö_addr
)) {

1594 
îr
 = 
EINVAL
;

1596 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1597 
îr
 = 
EAFNOSUPPORT
;

1600 
IP_ADD_MEMBERSHIP
:

1601 
IP_DROP_MEMBERSHIP
:

1602 i‡(
›éí
 < (
ù_mªq
)) {

1603 
îr
 = 
EINVAL
;

1605 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1606 
îr
 = 
EAFNOSUPPORT
;

1611 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1612 
s
, 
›äame
));

1613 
îr
 = 
ENOPROTOOPT
;

1617 #i‡
LWIP_TCP


1619 
IPPROTO_TCP
:

1620 i‡(
›éí
 < ()) {

1621 
îr
 = 
EINVAL
;

1626 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1629 
›äame
) {

1630 
TCP_NODELAY
:

1631 
TCP_KEEPALIVE
:

1632 #i‡
LWIP_TCP_KEEPALIVE


1633 
TCP_KEEPIDLE
:

1634 
TCP_KEEPINTVL
:

1635 
TCP_KEEPCNT
:

1640 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1641 
s
, 
›äame
));

1642 
îr
 = 
ENOPROTOOPT
;

1646 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1648 
IPPROTO_UDPLITE
:

1649 i‡(
›éí
 < ()) {

1650 
îr
 = 
EINVAL
;

1655 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1658 
›äame
) {

1659 
UDPLITE_SEND_CSCOV
:

1660 
UDPLITE_RECV_CSCOV
:

1664 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1665 
s
, 
›äame
));

1666 
îr
 = 
ENOPROTOOPT
;

1672 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1673 
s
, 
Àvñ
, 
›äame
));

1674 
îr
 = 
ENOPROTOOPT
;

1678 i‡(
îr
 !
ERR_OK
) {

1679 
	`sock_£t_î∫o
(
sock
, 
îr
);

1685 
d©a
.
sock
 = sock;

1686 
d©a
.
Àvñ
 =Üevel;

1687 
d©a
.
›äame
 = optname;

1688 
d©a
.
›tvÆ
 = (*)optval;

1689 
d©a
.
›éí
 = &optlen;

1690 
d©a
.
îr
 =Érr;

1691 
	`t˝ù_ˇŒback
(
lwù_£tsock›t_öã∫Æ
, &
d©a
);

1692 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1694 
îr
 = 
d©a
.err;

1696 
	`sock_£t_î∫o
(
sock
, 
îr
);

1697  
îr
 ? -1 : 0;

1698 
	}
}

1701 
	$lwù_£tsock›t_öã∫Æ
(*
¨g
)

1703 
lwù_sockë
 *
sock
;

1704 #ifde‡
LWIP_DEBUG


1705 
s
;

1707 
Àvñ
, 
›äame
;

1708 c⁄° *
›tvÆ
;

1709 
lwù_£tgësock›t_d©a
 *
d©a
;

1711 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1713 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1714 
sock
 = 
d©a
->sock;

1715 #ifde‡
LWIP_DEBUG


1716 
s
 = 
d©a
->s;

1718 
Àvñ
 = 
d©a
->level;

1719 
›äame
 = 
d©a
->optname;

1720 
›tvÆ
 = 
d©a
->optval;

1722 
Àvñ
) {

1725 
SOL_SOCKET
:

1726 
›äame
) {

1729 
SO_BROADCAST
:

1732 
SO_KEEPALIVE
:

1734 #i‡
SO_REUSE


1735 
SO_REUSEADDR
:

1736 
SO_REUSEPORT
:

1739 i‡(*(*)
›tvÆ
) {

1740 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 |
›äame
;

1742 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 &~
›äame
;

1744 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",

1745 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1747 #i‡
LWIP_SO_RCVTIMEO


1748 
SO_RCVTIMEO
:

1749 
sock
->
c⁄n
->
ªcv_timeout
 = ( *(*)
›tvÆ
 );

1752 #i‡
LWIP_SO_RCVBUF


1753 
SO_RCVBUF
:

1754 
sock
->
c⁄n
->
ªcv_bufsize
 = ( *(*)
›tvÆ
 );

1757 #i‡
LWIP_UDP


1758 
SO_NO_CHECK
:

1759 i‡(*(*)
›tvÆ
) {

1760 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË| 
UDP_FLAGS_NOCHKSUM
);

1762 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË& ~
UDP_FLAGS_NOCHKSUM
);

1770 
IPPROTO_IP
:

1771 
›äame
) {

1772 
IP_TTL
:

1773 
sock
->
c⁄n
->
pcb
.
ù
->
âl
 = (
u8_t
)(*(*)
›tvÆ
);

1774 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %u\n",

1775 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
âl
));

1777 
IP_TOS
:

1778 
sock
->
c⁄n
->
pcb
.
ù
->
tos
 = (
u8_t
)(*(*)
›tvÆ
);

1779 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %u\n",

1780 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
tos
));

1782 #i‡
LWIP_IGMP


1783 
IP_MULTICAST_TTL
:

1784 
sock
->
c⁄n
->
pcb
.
udp
->
âl
 = (
u8_t
)(*(u8_t*)
›tvÆ
);

1786 
IP_MULTICAST_IF
:

1787 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
 = ((
ö_addr
*Ë
›tvÆ
)->
s_addr
;

1789 
IP_ADD_MEMBERSHIP
:

1790 
IP_DROP_MEMBERSHIP
:

1793 
ù_mªq
 *
imr
 = (ù_mªq *)
›tvÆ
;

1794 if(
›äame
 =
IP_ADD_MEMBERSHIP
){

1795 
d©a
->
îr
 = 
	`igmp_joögroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1797 
d©a
->
îr
 = 
	`igmp_Àavegroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1799 if(
d©a
->
îr
 !
ERR_OK
) {

1800 
d©a
->
îr
 = 
EADDRNOTAVAIL
;

1808 #i‡
LWIP_TCP


1810 
IPPROTO_TCP
:

1811 
›äame
) {

1812 
TCP_NODELAY
:

1813 i‡(*(*)
›tvÆ
) {

1814 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 |
TF_NODELAY
;

1816 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 &~
TF_NODELAY
;

1818 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",

1819 
s
, (*(*)
›tvÆ
)?"on":"off") );

1821 
TCP_KEEPALIVE
:

1822 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = (
u32_t
)(*(*)
›tvÆ
);

1823 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %lu\n",

1824 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1827 #i‡
LWIP_TCP_KEEPALIVE


1828 
TCP_KEEPIDLE
:

1829 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1830 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %lu\n",

1831 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1833 
TCP_KEEPINTVL
:

1834 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1835 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %lu\n",

1836 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
));

1838 
TCP_KEEPCNT
:

1839 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
 = (
u32_t
)(*(*)
›tvÆ
);

1840 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %lu\n",

1841 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
));

1848 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1850 
IPPROTO_UDPLITE
:

1851 
›äame
) {

1852 
UDPLITE_SEND_CSCOV
:

1853 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1855 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = 8;

1857 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = *(*)
›tvÆ
;

1859 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",

1860 
s
, (*(*)
›tvÆ
)) );

1862 
UDPLITE_RECV_CSCOV
:

1863 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1865 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = 8;

1867 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = *(*)
›tvÆ
;

1869 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",

1870 
s
, (*(*)
›tvÆ
)) );

1876 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1877 
	}
}

1880 
	$lwù_io˘l
(
s
, 
cmd
, *
¨gp
)

1882 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1883 
u16_t
 
buÊí
 = 0;

1885 i‡(!
sock
)

1888 
cmd
) {

1889 
FIONREAD
:

1890 i‡(!
¨gp
) {

1891 
	`sock_£t_î∫o
(
sock
, 
EINVAL
);

1895 
	`SYS_ARCH_GET
(
sock
->
c⁄n
->
ªcv_avaû
, *((
u16_t
*)
¨gp
));

1898 i‡(
sock
->
œ°d©a
) {

1899 
buÊí
 = 
	`√tbuf_Àn
(
sock
->
œ°d©a
);

1900 
buÊí
 -
sock
->
œ°off£t
;

1902 *((
u16_t
*)
¨gp
Ë+
buÊí
;

1905 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONREAD, %pË%u\n", 
s
, 
¨gp
, *((
u16_t
*)argp)));

1906 
	`sock_£t_î∫o
(
sock
, 0);

1909 
FIONBIO
:

1910 i‡(
¨gp
 && *(
u32_t
*)argp)

1911 
sock
->
Êags
 |
O_NONBLOCK
;

1913 
sock
->
Êags
 &~
O_NONBLOCK
;

1914 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONBIO, %d)\n", 
s
, !!(
sock
->
Êags
 & 
O_NONBLOCK
)));

1915 
	`sock_£t_î∫o
(
sock
, 0);

1919 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, UNIMPL: 0x%lx, %p)\n", 
s
, 
cmd
, 
¨gp
));

1920 
	`sock_£t_î∫o
(
sock
, 
ENOSYS
);

1923 
	}
}

	@net/lwip/api/tcpip.c

40 
	~"lwù/›t.h
"

42 #i‡!
NO_SYS


44 
	~"lwù/sys.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/ù_‰ag.h
"

48 
	~"lwù/t˝.h
"

49 
	~"lwù/autoù.h
"

50 
	~"lwù/dh˝.h
"

51 
	~"lwù/igmp.h
"

52 
	~"lwù/dns.h
"

53 
	~"lwù/t˝ù.h
"

54 
	~"lwù/öô.h
"

55 
	~"√tif/ëh¨p.h
"

56 
	~"√tif/µp_€.h
"

59 (* 
t˝ù_öô_d⁄e
)(*
¨g
);

60 *
t˝ù_öô_d⁄e_¨g
;

61 
sys_mbox_t
 
mbox
 = 
SYS_MBOX_NULL
;

63 #i‡
LWIP_TCPIP_CORE_LOCKING


65 
sys_£m_t
 
lock_t˝ù_c‹e
;

68 #i‡
LWIP_TCP


70 
t˝ù_t˝_timî_a˘ive
;

78 
	$t˝ù_t˝_timî
(*
¨g
)

80 
	`LWIP_UNUSED_ARG
(
¨g
);

83 
	`t˝_tmr
();

85 i‡(
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
) {

87 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

90 
t˝ù_t˝_timî_a˘ive
 = 0;

92 
	}
}

94 #i‡!
NO_SYS


101 
	$t˝_timî_√eded
()

104 i‡(!
t˝ù_t˝_timî_a˘ive
 && (
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
)) {

106 
t˝ù_t˝_timî_a˘ive
 = 1;

107 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

109 
	}
}

113 #i‡
IP_REASSEMBLY


120 
	$ù_ªass_timî
(*
¨g
)

122 
	`LWIP_UNUSED_ARG
(
¨g
);

123 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: ip_reass_tmr()\n"));

124 
	`ù_ªass_tmr
();

125 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

126 
	}
}

129 #i‡
LWIP_ARP


136 
	$¨p_timî
(*
¨g
)

138 
	`LWIP_UNUSED_ARG
(
¨g
);

139 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:Étharp_tmr()\n"));

140 
	`ëh¨p_tmr
();

141 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

142 
	}
}

145 #i‡
LWIP_DHCP


152 
	$dh˝_timî_cﬂr£
(*
¨g
)

154 
	`LWIP_UNUSED_ARG
(
¨g
);

155 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_coarse_tmr()\n"));

156 
	`dh˝_cﬂr£_tmr
();

157 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

158 
	}
}

166 
	$dh˝_timî_föe
(*
¨g
)

168 
	`LWIP_UNUSED_ARG
(
¨g
);

169 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_fine_tmr()\n"));

170 
	`dh˝_föe_tmr
();

171 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

172 
	}
}

175 #i‡
LWIP_AUTOIP


182 
	$autoù_timî
(*
¨g
)

184 
	`LWIP_UNUSED_ARG
(
¨g
);

185 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:áutoip_tmr()\n"));

186 
	`autoù_tmr
();

187 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

188 
	}
}

191 #i‡
LWIP_IGMP


198 
	$igmp_timî
(*
¨g
)

200 
	`LWIP_UNUSED_ARG
(
¨g
);

201 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: igmp_tmr()\n"));

202 
	`igmp_tmr
();

203 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

204 
	}
}

207 #i‡
LWIP_DNS


214 
	$dns_timî
(*
¨g
)

216 
	`LWIP_UNUSED_ARG
(
¨g
);

217 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dns_tmr()\n"));

218 
	`dns_tmr
();

219 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

220 
	}
}

234 
	$t˝ù_thªad
(*
¨g
)

236 
t˝ù_msg
 *
msg
;

237 
	`LWIP_UNUSED_ARG
(
¨g
);

239 #i‡
IP_REASSEMBLY


240 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

242 #i‡
LWIP_ARP


243 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

245 #i‡
LWIP_DHCP


246 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

247 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

249 #i‡
LWIP_AUTOIP


250 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

252 #i‡
LWIP_IGMP


253 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

255 #i‡
LWIP_DNS


256 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

259 i‡(
t˝ù_öô_d⁄e
 !
NULL
) {

260 
	`t˝ù_öô_d⁄e
(
t˝ù_öô_d⁄e_¨g
);

263 
	`LOCK_TCPIP_CORE
();

265 
	`sys_mbox_„tch
(
mbox
, (*)&
msg
);

266 
msg
->
ty≥
) {

267 #i‡
LWIP_NETCONN


268 
TCPIP_MSG_API
:

269 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: API mesßgê%p\n", (*)
msg
));

270 
msg
->msg.
≠imsg
->
	`fun˘i⁄
(&(msg->msg.apimsg->msg));

274 
TCPIP_MSG_INPKT
:

275 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: PACKET %p\n", (*)
msg
));

276 #i‡
LWIP_ARP


277 i‡(
msg
->msg.
öp
.
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

278 
	`ëhî√t_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

281 { 
	`ù_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

283 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

286 #i‡
LWIP_NETIF_API


287 
TCPIP_MSG_NETIFAPI
:

288 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: Nëi‡API mesßgê%p\n", (*)
msg
));

289 
msg
->msg.
√tiÁpimsg
->
	`fun˘i⁄
(&(msg->msg.netifapimsg->msg));

293 
TCPIP_MSG_CALLBACK
:

294 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: CALLBACK %p\n", (*)
msg
));

295 
msg
->msg.
cb
.
	`f
(msg->msg.cb.
˘x
);

296 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

299 
TCPIP_MSG_TIMEOUT
:

300 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: TIMEOUT %p\n", (*)
msg
));

302 if(
msg
->msg.
tmo
.
m£cs
 != 0xffffffff)

303 
	`sys_timeout
 (
msg
->msg.
tmo
.
m£cs
, msg->msg.tmo.
h
, msg->msg.tmo.
¨g
);

305 
	`sys_u¡imeout
 (
msg
->msg.
tmo
.
h
, msg->msg.tmo.
¨g
);

306 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

313 
	}
}

322 
îr_t


323 
	$t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

325 
t˝ù_msg
 *
msg
;

327 i‡(
mbox
 !
SYS_MBOX_NULL
) {

328 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_INPKT
);

329 i‡(
msg
 =
NULL
) {

330  
ERR_MEM
;

333 
msg
->
ty≥
 = 
TCPIP_MSG_INPKT
;

334 
msg
->msg.
öp
.
p
 =Ö;

335 
msg
->msg.
öp
.
√tif
 = inp;

336 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

337 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

338  
ERR_MEM
;

340  
ERR_OK
;

342  
ERR_VAL
;

343 
	}
}

356 
îr_t


357 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
)

359 
t˝ù_msg
 *
msg
;

361 i‡(
mbox
 !
SYS_MBOX_NULL
) {

362 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

363 i‡(
msg
 =
NULL
) {

364  
ERR_MEM
;

367 
msg
->
ty≥
 = 
TCPIP_MSG_CALLBACK
;

368 
msg
->msg.
cb
.
f
 = f;

369 
msg
->msg.
cb
.
˘x
 = ctx;

370 i‡(
block
) {

371 
	`sys_mbox_po°
(
mbox
, 
msg
);

373 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

374 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

375  
ERR_MEM
;

378  
ERR_OK
;

380  
ERR_VAL
;

381 
	}
}

383 
îr_t


384 
	$t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

386 
t˝ù_msg
 *
msg
;

388 i‡(
mbox
 !
SYS_MBOX_NULL
) {

389 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

390 i‡(
msg
 =
NULL
) {

391  
ERR_MEM
;

394 
msg
->
ty≥
 = 
TCPIP_MSG_TIMEOUT
;

395 
msg
->msg.
tmo
.
m£cs
 = msecs;

396 
msg
->msg.
tmo
.
h
 = h;

397 
msg
->msg.
tmo
.
¨g
 =árg;

398 
	`sys_mbox_po°
(
mbox
, 
msg
);

399  
ERR_OK
;

401  
ERR_VAL
;

402 
	}
}

404 #i‡
LWIP_NETCONN


413 
îr_t


414 
	$t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
)

416 
t˝ù_msg
 
msg
;

418 i‡(
mbox
 !
SYS_MBOX_NULL
) {

419 
msg
.
ty≥
 = 
TCPIP_MSG_API
;

420 
msg
.msg.
≠imsg
 =ápimsg;

421 
	`sys_mbox_po°
(
mbox
, &
msg
);

422 
	`sys_¨ch_£m_waô
(
≠imsg
->
msg
.
c⁄n
->
›_com∂ëed
, 0);

423  
ERR_OK
;

425  
ERR_VAL
;

426 
	}
}

428 #i‡
LWIP_TCPIP_CORE_LOCKING


437 
îr_t


438 
	$t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
)

440 
	`LOCK_TCPIP_CORE
();

441 
≠imsg
->
	`fun˘i⁄
(&◊pimsg->
msg
));

442 
	`UNLOCK_TCPIP_CORE
();

443  
ERR_OK
;

445 
	}
}

449 #i‡
LWIP_NETIF_API


450 #i‡!
LWIP_TCPIP_CORE_LOCKING


458 
îr_t


459 
	$t˝ù_√tiÁpi
(
√tiÁpi_msg
* 
√tiÁpimsg
)

461 
t˝ù_msg
 
msg
;

463 i‡(
mbox
 !
SYS_MBOX_NULL
) {

464 
√tiÁpimsg
->
msg
.
£m
 = 
	`sys_£m_√w
(0);

465 i‡(
√tiÁpimsg
->
msg
.
£m
 =
SYS_SEM_NULL
) {

466 
√tiÁpimsg
->
msg
.
îr
 = 
ERR_MEM
;

467  
√tiÁpimsg
->
msg
.
îr
;

470 
msg
.
ty≥
 = 
TCPIP_MSG_NETIFAPI
;

471 
msg
.msg.
√tiÁpimsg
 =Çetifapimsg;

472 
	`sys_mbox_po°
(
mbox
, &
msg
);

473 
	`sys_£m_waô
(
√tiÁpimsg
->
msg
.
£m
);

474 
	`sys_£m_‰ì
(
√tiÁpimsg
->
msg
.
£m
);

475  
√tiÁpimsg
->
msg
.
îr
;

477  
ERR_VAL
;

478 
	}
}

488 
îr_t


489 
	$t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
* 
√tiÁpimsg
)

491 
	`LOCK_TCPIP_CORE
();

492 
√tiÁpimsg
->
	`fun˘i⁄
(&“ëiÁpimsg->
msg
));

493 
	`UNLOCK_TCPIP_CORE
();

494  
√tiÁpimsg
->
msg
.
îr
;

495 
	}
}

508 
t˝ù_öô
((* 
öôfunc
)(*), *
¨g
)

510 
	`lwù_öô
();

512 
t˝ù_öô_d⁄e
 = 
öôfunc
;

513 
t˝ù_öô_d⁄e_¨g
 = 
¨g
;

514 
mbox
 = 
	`sys_mbox_√w
(
TCPIP_MBOX_SIZE
);

515 #i‡
LWIP_TCPIP_CORE_LOCKING


516 
lock_t˝ù_c‹e
 = 
	`sys_£m_√w
(1);

519 
	`sys_thªad_√w
(
TCPIP_THREAD_NAME
, 
t˝ù_thªad
, 
NULL
, 
TCPIP_THREAD_STACKSIZE
, 
TCPIP_THREAD_PRIO
);

520 
	}
}

529 
	$pbuf_‰ì_öt
(*
p
)

531 
pbuf
 *
q
 = 
p
;

532 
	`pbuf_‰ì
(
q
);

533 
	}
}

541 
îr_t


542 
	$pbuf_‰ì_ˇŒback
(
pbuf
 *
p
)

544  
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_öt
, 
p
, 0);

545 
	}
}

554 
îr_t


555 
	$mem_‰ì_ˇŒback
(*
m
)

557  
	`t˝ù_ˇŒback_wôh_block
(
mem_‰ì
, 
m
, 0);

558 
	}
}

	@net/lwip/core/dhcp.c

72 
	~"lwù/›t.h
"

74 #i‡
LWIP_DHCP


76 
	~"lwù/°©s.h
"

77 
	~"lwù/mem.h
"

78 
	~"lwù/udp.h
"

79 
	~"lwù/ù_addr.h
"

80 
	~"lwù/√tif.h
"

81 
	~"lwù/öë.h
"

82 
	~"lwù/sys.h
"

83 
	~"lwù/dh˝.h
"

84 
	~"lwù/autoù.h
"

85 
	~"lwù/dns.h
"

86 
	~"√tif/ëh¨p.h
"

88 
	~<°rög.h
>

93 
u32_t
 
	gxid
 = 0xABCD0000;

96 
dh˝_h™dÀ_ack
(
√tif
 *netif);

97 
dh˝_h™dÀ_«k
(
√tif
 *netif);

98 
dh˝_h™dÀ_of„r
(
√tif
 *netif);

100 
îr_t
 
dh˝_discovî
(
√tif
 *netif);

101 
îr_t
 
dh˝_£À˘
(
√tif
 *netif);

102 
dh˝_check
(
√tif
 *netif);

103 
dh˝_böd
(
√tif
 *netif);

104 #i‡
DHCP_DOES_ARP_CHECK


105 
îr_t
 
dh˝_de˛öe
(
√tif
 *netif);

107 
îr_t
 
dh˝_ªböd
(
√tif
 *netif);

108 
dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
);

111 
dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

112 
îr_t
 
dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp);

113 
u8_t
 *
dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, u8_à
›ti⁄_ty≥
);

114 
u8_t
 
dh˝_gë_›ti⁄_byã
(u8_à*
±r
);

116 
u16_t
 
dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
);

118 
u32_t
 
dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
);

119 
dh˝_‰ì_ª∂y
(
dh˝
 *dhcp);

122 
dh˝_timeout
(
√tif
 *netif);

123 
dh˝_t1_timeout
(
√tif
 *netif);

124 
dh˝_t2_timeout
(
√tif
 *netif);

128 
îr_t
 
dh˝_¸óã_ªque°
(
√tif
 *netif);

130 
dh˝_dñëe_ªque°
(
√tif
 *netif);

132 
dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
);

134 
dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
);

135 
dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
);

136 
dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
);

138 
dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp);

153 
	$dh˝_h™dÀ_«k
(
√tif
 *netif)

155 
dh˝
 *dh˝ = 
√tif
->dhcp;

156 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_«k“ëif=%pË%c%c%"
U16_F
"\n",

157 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

159 
	`√tif_£t_down
(
√tif
);

161 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

162 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

163 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

165 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

167 
	`dh˝_discovî
(
√tif
);

168 
	}
}

180 
	$dh˝_check
(
√tif
 *netif)

182 
dh˝
 *dh˝ = 
√tif
->dhcp;

183 
îr_t
 
ªsu…
;

184 
u16_t
 
m£cs
;

185 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_check“ëif=%pË%c%c\n", (*)
√tif
, (
s16_t
Íëif->
«me
[0],

186 (
s16_t
)
√tif
->
«me
[1]));

189 
ªsu…
 = 
	`ëh¨p_quîy
(
√tif
, &
dh˝
->
of„ªd_ù_addr
, 
NULL
);

190 i‡(
ªsu…
 !
ERR_OK
) {

191 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_check: couldÇotÖerform ARP query\n"));

193 
dh˝
->
åõs
++;

194 
m£cs
 = 500;

195 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

196 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_check(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

197 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_CHECKING
);

198 
	}
}

206 
	$dh˝_h™dÀ_of„r
(
√tif
 *netif)

208 
dh˝
 *dh˝ = 
√tif
->dhcp;

210 
u8_t
 *
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SERVER_ID
);

211 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_of„r“ëif=%pË%c%c%"
U16_F
"\n",

212 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

213 i‡(
›ti⁄_±r
 !
NULL
) {

214 
dh˝
->
£rvî_ù_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

215 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): sîvî 0x%08"
X32_F
"\n", 
dh˝
->
£rvî_ù_addr
.
addr
));

217 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, (
ù_addr
 *)&dh˝->
msg_ö
->
yüddr
);

218 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): of„∏f‹ 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

220 
	`dh˝_£À˘
(
√tif
);

222 
	}
}

232 
îr_t


233 
	$dh˝_£À˘
(
√tif
 *netif)

235 
dh˝
 *dh˝ = 
√tif
->dhcp;

236 
îr_t
 
ªsu…
;

237 
u16_t
 
m£cs
;

238 #i‡
LWIP_NETIF_HOSTNAME


239 c⁄° *
p
;

242 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_£À˘“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

245 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

246 i‡(
ªsu…
 =
ERR_OK
) {

247 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

248 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

250 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

251 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

254 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

255 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

257 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

258 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

260 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

261 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

262 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

263 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

264 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

266 #i‡
LWIP_NETIF_HOSTNAME


267 
p
 = (c⁄° *)
√tif
->
ho°«me
;

268 i‡(
p
!=
NULL
) {

269 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

270 *
p
) {

271 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

276 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

278 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

283 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

285 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

286 
	`dh˝_dñëe_ªque°
(
√tif
);

287 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_select: REQUESTING\n"));

288 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REQUESTING
);

290 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_select: couldÇotállocate DHCPÑequest\n"));

292 
dh˝
->
åõs
++;

293 
m£cs
 = 
dh˝
->
åõs
 < 4 ? dhcp->tries * 1000 : 4 * 1000;

294 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

295 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_£À˘(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

296  
ªsu…
;

297 
	}
}

304 
	$dh˝_cﬂr£_tmr
()

306 
√tif
 *√ti‡
√tif_li°
;

307 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_coarse_tmr()\n"));

309 
√tif
 !
NULL
) {

311 i‡(
√tif
->
dh˝
 !
NULL
) {

313 i‡(
√tif
->
dh˝
->
t2_timeout
-- == 1) {

314 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å2Åimeout\n"));

316 
	`dh˝_t2_timeout
(
√tif
);

318 } i‡(
√tif
->
dh˝
->
t1_timeout
-- == 1) {

319 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å1Åimeout\n"));

321 
	`dh˝_t1_timeout
(
√tif
);

325 
√tif
 =Çëif->
√xt
;

327 
	}
}

337 
	$dh˝_föe_tmr
()

339 
√tif
 *√ti‡
√tif_li°
;

341 
√tif
 !
NULL
) {

343 i‡(
√tif
->
dh˝
 !
NULL
) {

345 i‡(
√tif
->
dh˝
->
ªque°_timeout
 > 1) {

346 
√tif
->
dh˝
->
ªque°_timeout
--;

348 i‡(
√tif
->
dh˝
->
ªque°_timeout
 == 1) {

349 
√tif
->
dh˝
->
ªque°_timeout
--;

351 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_fine_tmr():ÑequestÅimeout\n"));

353 
	`dh˝_timeout
(
√tif
);

357 
√tif
 =Çëif->
√xt
;

359 
	}
}

370 
	$dh˝_timeout
(
√tif
 *netif)

372 
dh˝
 *dh˝ = 
√tif
->dhcp;

373 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_timeout()\n"));

375 i‡((
dh˝
->
°©e
 =
DHCP_BACKING_OFF
Ë|| (dh˝->°©ê=
DHCP_SELECTING
)) {

376 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_timeout():Ñestarting discovery\n"));

377 
	`dh˝_discovî
(
√tif
);

379 } i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

380 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING, DHCPÑequestÅimed out\n"));

381 i‡(
dh˝
->
åõs
 <= 5) {

382 
	`dh˝_£À˘
(
√tif
);

384 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING,Ñeleasing,Ñestarting\n"));

385 
	`dh˝_ªÀa£
(
√tif
);

386 
	`dh˝_discovî
(
√tif
);

389 } i‡(
dh˝
->
°©e
 =
DHCP_CHECKING
) {

390 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): CHECKING, ARPÑequestÅimed out\n"));

391 i‡(
dh˝
->
åõs
 <= 1) {

392 
	`dh˝_check
(
√tif
);

397 
	`dh˝_böd
(
√tif
);

401 i‡(
dh˝
->
°©e
 =
DHCP_RENEWING
) {

402 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RENEWING, DHCPÑequestÅimed out\n"));

405 
	`dh˝_ª√w
(
√tif
);

407 } i‡(
dh˝
->
°©e
 =
DHCP_REBINDING
) {

408 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REBINDING, DHCPÑequestÅimed out\n"));

409 i‡(
dh˝
->
åõs
 <= 8) {

410 
	`dh˝_ªböd
(
√tif
);

412 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));

413 
	`dh˝_ªÀa£
(
√tif
);

414 
	`dh˝_discovî
(
√tif
);

417 
	}
}

425 
	$dh˝_t1_timeout
(
√tif
 *netif)

427 
dh˝
 *dh˝ = 
√tif
->dhcp;

428 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout()\n"));

429 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

432 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout(): mustÑenew\n"));

433 
	`dh˝_ª√w
(
√tif
);

435 
	}
}

443 
	$dh˝_t2_timeout
(
√tif
 *netif)

445 
dh˝
 *dh˝ = 
√tif
->dhcp;

446 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout()\n"));

447 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

449 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout(): mustÑebind\n"));

450 
	`dh˝_ªböd
(
√tif
);

452 
	}
}

460 
	$dh˝_h™dÀ_ack
(
√tif
 *netif)

462 
dh˝
 *dh˝ = 
√tif
->dhcp;

463 
u8_t
 *
›ti⁄_±r
;

465 
dh˝
->
of„ªd_¢_mask
.
addr
 = 0;

466 
dh˝
->
of„ªd_gw_addr
.
addr
 = 0;

467 
dh˝
->
of„ªd_bc_addr
.
addr
 = 0;

470 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_LEASE_TIME
);

471 i‡(
›ti⁄_±r
 !
NULL
) {

473 
dh˝
->
of„ªd_t0_Àa£
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

476 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T1
);

477 i‡(
›ti⁄_±r
 !
NULL
) {

479 
dh˝
->
of„ªd_t1_ª√w
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

482 
dh˝
->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t0_Àa£
 / 2;

486 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T2
);

487 i‡(
›ti⁄_±r
 !
NULL
) {

489 
dh˝
->
of„ªd_t2_ªböd
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

492 
dh˝
->
of„ªd_t2_ªböd
 = dh˝->
of„ªd_t0_Àa£
;

496 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, &dh˝->
msg_ö
->
yüddr
);

504 
	`ù_addr_£t
(&
dh˝
->
of„ªd_si_addr
, &dh˝->
msg_ö
->
süddr
);

506 i‡(
dh˝
->
msg_ö
->
fûe
[0]) {

507 
dh˝
->
boŸ_fûe_«me
 = 
	`mem_mÆloc
(
	`°æí
(dh˝->
msg_ö
->
fûe
) + 1);

508 
	`°r˝y
(
dh˝
->
boŸ_fûe_«me
, dh˝->
msg_ö
->
fûe
);

513 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

515 i‡(
›ti⁄_±r
 !
NULL
) {

516 
dh˝
->
of„ªd_¢_mask
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

520 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_ROUTER
);

521 i‡(
›ti⁄_±r
 !
NULL
) {

522 
dh˝
->
of„ªd_gw_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

526 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

527 i‡(
›ti⁄_±r
 !
NULL
) {

528 
dh˝
->
of„ªd_bc_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

532 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

533 i‡(
›ti⁄_±r
 !
NULL
) {

534 
u8_t
 
n
;

535 
dh˝
->
dns_cou¡
 = 
	`dh˝_gë_›ti⁄_byã
(&
›ti⁄_±r
[1]Ë/ (
u32_t
)(
ù_addr
);

537 i‡(
dh˝
->
dns_cou¡
 > 
DHCP_MAX_DNS
)

538 
dh˝
->
dns_cou¡
 = 
DHCP_MAX_DNS
;

539 
n
 = 0;Ç < 
dh˝
->
dns_cou¡
;Ç++) {

540 
dh˝
->
of„ªd_dns_addr
[
n
].
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2 +Ç * 4]));

541 #i‡
LWIP_DNS


542 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&(
dh˝
->
of„ªd_dns_addr
[n].
addr
)));

545 #i‡
LWIP_DNS


546 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&
ù_addr_™y
));

549 
	}
}

563 
îr_t


564 
	$dh˝_°¨t
(
√tif
 *netif)

566 
dh˝
 *dhcp;

567 
îr_t
 
ªsu…
 = 
ERR_OK
;

569 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

570 
dh˝
 = 
√tif
->dhcp;

571 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

574 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

577 i‡(
dh˝
 =
NULL
) {

578 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): startingÇew DHCP client\n"));

579 
dh˝
 = 
	`mem_mÆloc
((dhcp));

580 i‡(
dh˝
 =
NULL
) {

581 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇotállocate dhcp\n"));

582  
ERR_MEM
;

585 
√tif
->
dh˝
 = dhcp;

586 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start():állocated dhcp"));

589 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("dhcp_start():Ñestarting DHCP configuration\n"));

593 
	`mem£t
(
dh˝
, 0, (dhcp));

595 
dh˝
->
pcb
 = 
	`udp_√w
();

596 i‡(
dh˝
->
pcb
 =
NULL
) {

597 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇot obtainÖcb\n"));

598 
	`mem_‰ì
((*)
dh˝
);

599 
√tif
->
dh˝
 = dh˝ = 
NULL
;

600  
ERR_MEM
;

603 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

604 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

606 
	`udp_ªcv
(
dh˝
->
pcb
, 
dh˝_ªcv
, 
√tif
);

607 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): starting DHCP configuration\n"));

609 
ªsu…
 = 
	`dh˝_discovî
(
√tif
);

610 i‡(
ªsu…
 !
ERR_OK
) {

612 
	`dh˝_°›
(
√tif
);

613  
ERR_MEM
;

616 
√tif
->
Êags
 |
NETIF_FLAG_DHCP
;

617  
ªsu…
;

618 
	}
}

630 
	$dh˝_öf‹m
(
√tif
 *netif)

632 
dh˝
 *dh˝, *
ﬁd_dh˝
 = 
√tif
->dhcp;

633 
îr_t
 
ªsu…
 = 
ERR_OK
;

634 
dh˝
 = 
	`mem_mÆloc
((dhcp));

635 i‡(
dh˝
 =
NULL
) {

636 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇotállocate dhcp\n"));

639 
√tif
->
dh˝
 = dhcp;

640 
	`mem£t
(
dh˝
, 0, (dhcp));

642 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform():állocated dhcp\n"));

643 
dh˝
->
pcb
 = 
	`udp_√w
();

644 i‡(
dh˝
->
pcb
 =
NULL
) {

645 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇot obtainÖcb"));

646 
	`mem_‰ì
((*)
dh˝
);

649 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform(): createdÇew udpÖcb\n"));

651 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

652 i‡(
ªsu…
 =
ERR_OK
) {

654 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

655 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_INFORM
);

657 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

659 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

661 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

663 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

665 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

666 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
);

667 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_inform: INFORMING\n"));

668 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

669 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

670 
	`dh˝_dñëe_ªque°
(
√tif
);

672 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform: couldÇotállocate DHCPÑequest\n"));

675 i‡(
dh˝
 !
NULL
) {

676 i‡(
dh˝
->
pcb
 !
NULL
) {

677 
	`udp_ªmove
(
dh˝
->
pcb
);

679 
dh˝
->
pcb
 = 
NULL
;

680 
	`mem_‰ì
((*)
dh˝
);

681 
√tif
->
dh˝
 = 
ﬁd_dh˝
;

683 
	}
}

685 #i‡
DHCP_DOES_ARP_CHECK


692 
	$dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
)

694 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

695 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_arp_reply()\n"));

697 i‡((
√tif
->
dh˝
 !
NULL
Ë&& (√tif->dh˝->
°©e
 =
DHCP_CHECKING
)) {

698 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_¨p_ª∂y(): CHECKING,áΩÑïly f‹ 0x%08"
X32_F
"\n", 
addr
->addr));

701 i‡(
	`ù_addr_cmp
(
addr
, &
√tif
->
dh˝
->
of„ªd_ù_addr
)) {

703 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1, ("dhcp_arp_reply():árpÑeply matched with offeredáddress, declining\n"));

704 
	`dh˝_de˛öe
(
√tif
);

707 
	}
}

718 
îr_t


719 
	$dh˝_de˛öe
(
√tif
 *netif)

721 
dh˝
 *dh˝ = 
√tif
->dhcp;

722 
îr_t
 
ªsu…
 = 
ERR_OK
;

723 
u16_t
 
m£cs
;

724 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_decline()\n"));

725 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

727 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

728 i‡(
ªsu…
 =
ERR_OK
) {

729 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

730 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DECLINE
);

732 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

733 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

735 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

736 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

738 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

740 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

743 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

745 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

746 
	`dh˝_dñëe_ªque°
(
√tif
);

747 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_decline: BACKING OFF\n"));

749 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_decline: couldÇotállocate DHCPÑequest\n"));

751 
dh˝
->
åõs
++;

752 
m£cs
 = 10*1000;

753 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

754 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_de˛öe(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

755  
ªsu…
;

756 
	}
}

765 
îr_t


766 
	$dh˝_discovî
(
√tif
 *netif)

768 
dh˝
 *dh˝ = 
√tif
->dhcp;

769 
îr_t
 
ªsu…
 = 
ERR_OK
;

770 
u16_t
 
m£cs
;

771 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_discover()\n"));

772 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, 
IP_ADDR_ANY
);

774 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

775 i‡(
ªsu…
 =
ERR_OK
) {

776 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: makingÑequest\n"));

777 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

778 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DISCOVER
);

780 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

781 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

783 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

784 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

785 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

786 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

787 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

789 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

791 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover:Ñealloc()ing\n"));

792 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

794 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

795 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));

796 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

797 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: deleting()ing\n"));

798 
	`dh˝_dñëe_ªque°
(
√tif
);

799 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_discover: SELECTING\n"));

800 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_SELECTING
);

802 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_discover: couldÇotállocate DHCPÑequest\n"));

804 
dh˝
->
åõs
++;

805 #i‡
LWIP_DHCP_AUTOIP_COOP


807 if(
dh˝
->
åõs
 >9 && dh˝->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_OFF
) {

808 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_ON
;

809 
	`autoù_°¨t
(
√tif
);

812 
m£cs
 = 
dh˝
->
åõs
 < 4 ? (dhcp->tries + 1) * 1000 : 10 * 1000;

813 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

814 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_discovî(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

815  
ªsu…
;

816 
	}
}

825 
	$dh˝_böd
(
√tif
 *netif)

827 
u32_t
 
timeout
;

828 
dh˝
 *dhcp;

829 
ù_addr
 
¢_mask
, 
gw_addr
;

830 
	`LWIP_ERROR
("dh˝_böd:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

831 
dh˝
 = 
√tif
->dhcp;

832 
	`LWIP_ERROR
("dh˝_böd: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

833 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_böd“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

836 i‡(
dh˝
->
of„ªd_t1_ª√w
 != 0xffffffffUL) {

838 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å1ÑíewÆÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t1_ª√w
));

839 
timeout
 = (
dh˝
->
of„ªd_t1_ª√w
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

840 if(
timeout
 > 0xffff) {

841 
timeout
 = 0xffff;

843 
dh˝
->
t1_timeout
 = (
u16_t
)
timeout
;

844 i‡(
dh˝
->
t1_timeout
 == 0) {

845 
dh˝
->
t1_timeout
 = 1;

847 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t1_ª√w
*1000));

850 i‡(
dh˝
->
of„ªd_t2_ªböd
 != 0xffffffffUL) {

851 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å2ÑebödÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t2_ªböd
));

852 
timeout
 = (
dh˝
->
of„ªd_t2_ªböd
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

853 if(
timeout
 > 0xffff) {

854 
timeout
 = 0xffff;

856 
dh˝
->
t2_timeout
 = (
u16_t
)
timeout
;

857 i‡(
dh˝
->
t2_timeout
 == 0) {

858 
dh˝
->
t2_timeout
 = 1;

860 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t2_ªböd
*1000));

863 
	`ù_addr_£t
(&
¢_mask
, &
dh˝
->
of„ªd_¢_mask
);

867 i‡(
¢_mask
.
addr
 == 0) {

869 
u8_t
 
fú°_o˘ë
 = 
	`ù4_addr1
(&
¢_mask
);

870 i‡(
fú°_o˘ë
 <= 127) {

871 
¢_mask
.
addr
 = 
	`ht⁄l
(0xff000000);

872 } i‡(
fú°_o˘ë
 >= 192) {

873 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffffff00);

875 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffff0000);

879 
	`ù_addr_£t
(&
gw_addr
, &
dh˝
->
of„ªd_gw_addr
);

881 i‡(
gw_addr
.
addr
 == 0) {

883 
gw_addr
.
addr
 = (
dh˝
->
of„ªd_ù_addr
.add∏& 
¢_mask
.addr);

885 
gw_addr
.
addr
 |
	`ht⁄l
(0x00000001);

888 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): IP: 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

889 
	`√tif_£t_ùaddr
(
√tif
, &
dh˝
->
of„ªd_ù_addr
);

890 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): SN: 0x%08"
X32_F
"\n", 
¢_mask
.
addr
));

891 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

892 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): GW: 0x%08"
X32_F
"\n", 
gw_addr
.
addr
));

893 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

895 
	`√tif_£t_up
(
√tif
);

897 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BOUND
);

898 
	}
}

905 
îr_t


906 
	$dh˝_ª√w
(
√tif
 *netif)

908 
dh˝
 *dh˝ = 
√tif
->dhcp;

909 
îr_t
 
ªsu…
;

910 
u16_t
 
m£cs
;

911 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_renew()\n"));

912 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_RENEWING
);

915 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

916 i‡(
ªsu…
 =
ERR_OK
) {

918 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

919 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

921 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

923 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

926 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

927 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

931 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

932 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

935 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

937 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

939 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

940 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

941 
	`dh˝_dñëe_ªque°
(
√tif
);

943 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_renew: RENEWING\n"));

945 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_renew: couldÇotállocate DHCPÑequest\n"));

947 
dh˝
->
åõs
++;

949 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 2000 : 20 * 1000;

950 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

951 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ª√w(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

952  
ªsu…
;

953 
	}
}

960 
îr_t


961 
	$dh˝_ªböd
(
√tif
 *netif)

963 
dh˝
 *dh˝ = 
√tif
->dhcp;

964 
îr_t
 
ªsu…
;

965 
u16_t
 
m£cs
;

966 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind()\n"));

967 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REBINDING
);

970 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

971 i‡(
ªsu…
 =
ERR_OK
) {

973 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

974 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

976 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

977 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

980 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

981 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

983 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

984 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

987 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

989 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

992 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

993 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

994 
	`dh˝_dñëe_ªque°
(
√tif
);

995 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind: REBINDING\n"));

997 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_rebind: couldÇotállocate DHCPÑequest\n"));

999 
dh˝
->
åõs
++;

1000 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1001 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1002 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªböd(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1003  
ªsu…
;

1004 
	}
}

1011 
îr_t


1012 
	$dh˝_ªÀa£
(
√tif
 *netif)

1014 
dh˝
 *dh˝ = 
√tif
->dhcp;

1015 
îr_t
 
ªsu…
;

1016 
u16_t
 
m£cs
;

1017 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_release()\n"));

1020 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_OFF
);

1022 
dh˝
->
£rvî_ù_addr
.
addr
 = 0;

1023 
dh˝
->
of„ªd_ù_addr
.
addr
 = dh˝->
of„ªd_¢_mask
.addr = 0;

1024 
dh˝
->
of„ªd_gw_addr
.
addr
 = dh˝->
of„ªd_bc_addr
.addr = 0;

1025 
dh˝
->
of„ªd_t0_Àa£
 = dh˝->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t2_ªböd
 = 0;

1026 
dh˝
->
dns_cou¡
 = 0;

1029 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1030 i‡(
ªsu…
 =
ERR_OK
) {

1031 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1032 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_RELEASE
);

1034 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1036 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1038 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

1039 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

1040 
	`dh˝_dñëe_ªque°
(
√tif
);

1041 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_release: RELEASED, DHCP_OFF\n"));

1043 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_release: couldÇotállocate DHCPÑequest\n"));

1045 
dh˝
->
åõs
++;

1046 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1047 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1048 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªÀa£(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1050 
	`√tif_£t_down
(
√tif
);

1052 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

1053 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

1054 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

1057  
ªsu…
;

1058 
	}
}

1066 
	$dh˝_°›
(
√tif
 *netif)

1068 
dh˝
 *dh˝ = 
√tif
->dhcp;

1069 
	`LWIP_ERROR
("dh˝_°›:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1071 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

1073 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_stop()\n"));

1075 i‡(
dh˝
 !
NULL
) {

1076 i‡(
dh˝
->
pcb
 !
NULL
) {

1077 
	`udp_ªmove
(
dh˝
->
pcb
);

1078 
dh˝
->
pcb
 = 
NULL
;

1080 i‡(
dh˝
->
p
 !
NULL
) {

1081 
	`pbuf_‰ì
(
dh˝
->
p
);

1082 
dh˝
->
p
 = 
NULL
;

1085 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1086 
	`mem_‰ì
((*)
dh˝
);

1087 
√tif
->
dh˝
 = 
NULL
;

1089 
	}
}

1099 
	$dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
)

1101 i‡(
√w_°©e
 !
dh˝
->
°©e
) {

1102 
dh˝
->
°©e
 = 
√w_°©e
;

1103 
dh˝
->
åõs
 = 0;

1105 
	}
}

1113 
	$dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
)

1115 
	`LWIP_ASSERT
("dh˝_›ti⁄: dh˝->›ti⁄s_out_À¿+ 2 + o±i⁄_À¿<DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U + 
›ti⁄_Àn
 <
DHCP_OPTIONS_LEN
);

1116 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_ty≥
;

1117 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_Àn
;

1118 
	}
}

1124 
	$dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
)

1126 
	`LWIP_ASSERT
("dh˝_›ti⁄_byã: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1127 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
vÆue
;

1128 
	}
}

1131 
	$dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
)

1133 
	`LWIP_ASSERT
("dh˝_›ti⁄_sh‹t: dh˝->›ti⁄s_out_À¿+ 2 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U <
DHCP_OPTIONS_LEN
);

1134 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff00U) >> 8);

1135 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
Ë(
vÆue
 & 0x00ffU);

1136 
	}
}

1139 
	$dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
)

1141 
	`LWIP_ASSERT
("dh˝_›ti⁄_l⁄g: dh˝->›ti⁄s_out_À¿+ 4 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 4U <
DHCP_OPTIONS_LEN
);

1142 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff000000UL) >> 24);

1143 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x00ff0000UL) >> 16);

1144 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x0000ff00UL) >> 8);

1145 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x000000ffUL));

1146 
	}
}

1158 
îr_t


1159 
	$dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp)

1161 
u16_t
 
ªt
;

1162 
	`LWIP_ERROR
("dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_ARG
;);

1163 
	`LWIP_ERROR
("dh˝->∞!NULL", (
dh˝
->
p
 !
NULL
),  
ERR_VAL
;);

1165 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1167 i‡(
dh˝
->
p
->
tŸ_Àn
 > ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
)) {

1168 
dh˝
->
›ti⁄s_ö_Àn
 = dh˝->
p
->
tŸ_Àn
 - ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1169 
dh˝
->
›ti⁄s_ö
 = 
	`mem_mÆloc
(dh˝->
›ti⁄s_ö_Àn
);

1170 i‡(
dh˝
->
›ti⁄s_ö
 =
NULL
) {

1171 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->options\n"));

1172  
ERR_MEM
;

1175 
dh˝
->
msg_ö
 = 
	`mem_mÆloc
((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1176 i‡(
dh˝
->
msg_ö
 =
NULL
) {

1177 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->msg_in\n"));

1178 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1179 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1180  
ERR_MEM
;

1184 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
msg_ö
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
, 0);

1185 
	`LWIP_ASSERT
("ªà=sizeof(°ru˘ dh˝_msgË- DHCP_OPTIONS_LEN", 
ªt
 =(
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1186 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytes into dhcp->msg_in[]\n",

1187 (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
));

1189 i‡(
dh˝
->
›ti⁄s_ö
 !
NULL
) {

1191 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
›ti⁄s_ö
, dh˝->
›ti⁄s_ö_Àn
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1192 
	`LWIP_ASSERT
("ªà=dh˝->›ti⁄s_ö_Àn", 
ªt
 =
dh˝
->
›ti⁄s_ö_Àn
);

1193 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytesÅo dhcp->options_in[]\n",

1194 
dh˝
->
›ti⁄s_ö_Àn
));

1196 
	`LWIP_UNUSED_ARG
(
ªt
);

1197  
ERR_OK
;

1198 
	}
}

1205 
	$dh˝_‰ì_ª∂y
(
dh˝
 *dhcp)

1207 i‡(
dh˝
->
msg_ö
 !
NULL
) {

1208 
	`mem_‰ì
((*)
dh˝
->
msg_ö
);

1209 
dh˝
->
msg_ö
 = 
NULL
;

1211 i‡(
dh˝
->
›ti⁄s_ö
) {

1212 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1213 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1214 
dh˝
->
›ti⁄s_ö_Àn
 = 0;

1216 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("dhcp_free_reply(): free'd\n"));

1217 
	}
}

1223 
	$dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

1225 
√tif
 *√ti‡(√ti‡*)
¨g
;

1226 
dh˝
 *dh˝ = 
√tif
->dhcp;

1227 
dh˝_msg
 *
ª∂y_msg
 = (dh˝_msg *)
p
->
∑ylﬂd
;

1228 
u8_t
 *
›ti⁄s_±r
;

1229 
u8_t
 
msg_ty≥
;

1230 
u8_t
 
i
;

1231 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_ªcv’bu‡%pË‰om DHCP sîvî %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"Ö‹à%"U16_F"\n", (*)
p
,

1232 (
u16_t
)(
	`¡ohl
(
addr
->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),

1233 (
u16_t
)(
	`¡ohl
(
addr
->addrË>> 8 & 0xff), (u16_t)“tohl◊ddr->addrË& 0xff), 
p‹t
));

1234 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->À¿%"
U16_F
"\n", 
p
->
Àn
));

1235 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->tŸ_À¿%"
U16_F
"\n", 
p
->
tŸ_Àn
));

1237 
	`LWIP_UNUSED_ARG
(
pcb
);

1238 
	`LWIP_UNUSED_ARG
(
addr
);

1239 
	`LWIP_UNUSED_ARG
(
p‹t
);

1240 
dh˝
->
p
 =Ö;

1242 i‡(
ª∂y_msg
->
›
 !
DHCP_BOOTREPLY
) {

1243 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("nŸá DHCPÑïly mesßge, buàty≥ %"
U16_F
"\n", (
u16_t
)
ª∂y_msg
->
›
));

1244 
‰ì_pbuf_™d_ªtu∫
;

1247 
i
 = 0; i < 
√tif
->
hwaddr_Àn
; i++) {

1248 i‡(
√tif
->
hwaddr
[
i
] !
ª∂y_msg
->
chaddr
[i]) {

1249 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("√tif->hwaddr[%"
U16_F
"]==%02"
X16_F
" !=Ñeply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",

1250 (
u16_t
)
i
, (u16_t)
√tif
->
hwaddr
[i], (u16_t)i, (u16_t)
ª∂y_msg
->
chaddr
[i]));

1251 
‰ì_pbuf_™d_ªtu∫
;

1255 i‡(
	`¡ohl
(
ª∂y_msg
->
xid
Ë!
dh˝
->xid) {

1256 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("å™ß˘i⁄ id mism©chÑïly_msg->xid(%"
X32_F
")!=dh˝->xid(%"X32_F")\n",
	`¡ohl
(
ª∂y_msg
->
xid
),
dh˝
->xid));

1257 
‰ì_pbuf_™d_ªtu∫
;

1260 i‡(
	`dh˝_unfﬁd_ª∂y
(
dh˝
Ë!
ERR_OK
) {

1261 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("problem unfolding DHCP message -Åoo short on memory?\n"));

1262 
‰ì_pbuf_™d_ªtu∫
;

1265 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));

1267 
›ti⁄s_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
);

1268 i‡(
›ti⁄s_±r
 =
NULL
) {

1269 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OPTION_MESSAGE_TYPE optionÇot found\n"));

1270 
‰ì_pbuf_™d_ªtu∫
;

1274 
msg_ty≥
 = 
	`dh˝_gë_›ti⁄_byã
(
›ti⁄s_±r
 + 2);

1276 i‡(
msg_ty≥
 =
DHCP_ACK
) {

1277 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_ACKÑeceived\n"));

1279 i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

1280 
	`dh˝_h™dÀ_ack
(
√tif
);

1281 
dh˝
->
ªque°_timeout
 = 0;

1282 #i‡
DHCP_DOES_ARP_CHECK


1284 
	`dh˝_check
(
√tif
);

1287 
	`dh˝_böd
(
√tif
);

1291 i‡((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

1292 
dh˝
->
ªque°_timeout
 = 0;

1293 
	`dh˝_böd
(
√tif
);

1297 i‡((
msg_ty≥
 =
DHCP_NAK
) &&

1298 ((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REQUESTING
) ||

1299 (
dh˝
->
°©e
 =
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
 ))) {

1300 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_NAKÑeceived\n"));

1301 
dh˝
->
ªque°_timeout
 = 0;

1302 
	`dh˝_h™dÀ_«k
(
√tif
);

1305 i‡((
msg_ty≥
 =
DHCP_OFFER
Ë&& (
dh˝
->
°©e
 =
DHCP_SELECTING
)) {

1306 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OFFERÑeceived in DHCP_SELECTING state\n"));

1307 
dh˝
->
ªque°_timeout
 = 0;

1309 
	`dh˝_h™dÀ_of„r
(
√tif
);

1311 
‰ì_pbuf_™d_ªtu∫
:

1312 
	`pbuf_‰ì
(
p
);

1313 
dh˝
->
p
 = 
NULL
;

1314 
	}
}

1321 
îr_t


1322 
	$dh˝_¸óã_ªque°
(
√tif
 *netif)

1324 
dh˝
 *dhcp;

1325 
u16_t
 
i
;

1326 
	`LWIP_ERROR
("dh˝_¸óã_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

1327 
dh˝
 = 
√tif
->dhcp;

1328 
	`LWIP_ERROR
("dh˝_¸óã_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_VAL
;);

1329 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->p_ouà=NULL", 
dh˝
->
p_out
 =
NULL
);

1330 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->msg_ouà=NULL", 
dh˝
->
msg_out
 =
NULL
);

1331 
dh˝
->
p_out
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dh˝_msg
), 
PBUF_RAM
);

1332 i‡(
dh˝
->
p_out
 =
NULL
) {

1333 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_create_request(): couldÇotállocateÖbuf\n"));

1334  
ERR_MEM
;

1336 
	`LWIP_ASSERT
("dhcp_create_request: checkÅhat firstÖbuf can hold struct dhcp_msg",

1337 (
dh˝
->
p_out
->
Àn
 >(
dh˝_msg
)));

1340 
dh˝
->
xid
 = xid++;

1341 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("å™ß˘i⁄ id xid++(%"
X32_F
"Ëdh˝->xid(%"
U32_F
")\n",
xid
,
dh˝
->xid));

1343 
dh˝
->
msg_out
 = (
dh˝_msg
 *)dh˝->
p_out
->
∑ylﬂd
;

1345 
dh˝
->
msg_out
->
›
 = 
DHCP_BOOTREQUEST
;

1347 
dh˝
->
msg_out
->
hty≥
 = 
DHCP_HTYPE_ETH
;

1349 
dh˝
->
msg_out
->
hÀn
 = 
DHCP_HLEN_ETH
;

1350 
dh˝
->
msg_out
->
h›s
 = 0;

1351 
dh˝
->
msg_out
->
xid
 = 
	`ht⁄l
(dhcp->xid);

1352 
dh˝
->
msg_out
->
£cs
 = 0;

1353 
dh˝
->
msg_out
->
Êags
 = 0;

1354 
dh˝
->
msg_out
->
cüddr
.
addr
 = 
√tif
->
ù_addr
.addr;

1355 
dh˝
->
msg_out
->
yüddr
.
addr
 = 0;

1356 
dh˝
->
msg_out
->
süddr
.
addr
 = 0;

1357 
dh˝
->
msg_out
->
güddr
.
addr
 = 0;

1358 
i
 = 0; i < 
DHCP_CHADDR_LEN
; i++) {

1360 
dh˝
->
msg_out
->
chaddr
[
i
] = (ò< 
√tif
->
hwaddr_Àn
Ë?Çëif->
hwaddr
[i] : 0 ;

1362 
i
 = 0; i < 
DHCP_SNAME_LEN
; i++) {

1363 
dh˝
->
msg_out
->
¢ame
[
i
] = 0;

1365 
i
 = 0; i < 
DHCP_FILE_LEN
; i++) {

1366 
dh˝
->
msg_out
->
fûe
[
i
] = 0;

1368 
dh˝
->
msg_out
->
cookõ
 = 
	`ht⁄l
(0x63825363UL);

1369 
dh˝
->
›ti⁄s_out_Àn
 = 0;

1371 
i
 = 0; i < 
DHCP_OPTIONS_LEN
; i++) {

1372 
dh˝
->
msg_out
->
›ti⁄s
[
i
] = (
u8_t
)i;

1374  
ERR_OK
;

1375 
	}
}

1383 
	$dh˝_dñëe_ªque°
(
√tif
 *netif)

1385 
dh˝
 *dhcp;

1386 
	`LWIP_ERROR
("dh˝_dñëe_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1387 
dh˝
 = 
√tif
->dhcp;

1388 
	`LWIP_ERROR
("dh˝_dñëe_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1389 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->p_ouà!NULL", 
dh˝
->
p_out
 !
NULL
);

1390 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->msg_ouà!NULL", 
dh˝
->
msg_out
 !
NULL
);

1391 i‡(
dh˝
->
p_out
 !
NULL
) {

1392 
	`pbuf_‰ì
(
dh˝
->
p_out
);

1394 
dh˝
->
p_out
 = 
NULL
;

1395 
dh˝
->
msg_out
 = 
NULL
;

1396 
	}
}

1407 
	$dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp)

1409 
	`LWIP_ERROR
("dh˝_›ti⁄_åaûî: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1410 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->msg_ouà!NULL\n", 
dh˝
->
msg_out
 !
NULL
);

1411 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1412 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
DHCP_OPTION_END
;

1414 (
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_MIN_OPTIONS_LEN
) || (dhcp->options_out_len & 3)) {

1416 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1418 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 0;

1420 
	}
}

1431 
u8_t
 *
	$dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
)

1433 
u8_t
 
ovîlﬂd
 = 
DHCP_OVERLOAD_NONE
;

1436 i‡((
dh˝
->
›ti⁄s_ö
 !
NULL
Ë&& (dh˝->
›ti⁄s_ö_Àn
 > 0)) {

1438 
u8_t
 *
›ti⁄s
 = (u8_à*)
dh˝
->
›ti⁄s_ö
;

1439 
u16_t
 
off£t
 = 0;

1441 (
off£t
 < 
dh˝
->
›ti⁄s_ö_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1444 i‡(
›ti⁄s
[
off£t
] =
DHCP_OPTION_OVERLOAD
) {

1445 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("overloaded message detected\n"));

1447 
off£t
 += 2;

1448 
ovîlﬂd
 = 
›ti⁄s
[
off£t
++];

1451 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1452 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£à%"
U16_F
" i¿›ti⁄s\n", 
off£t
));

1453  &
›ti⁄s
[
off£t
];

1456 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("skùpög o±i⁄ %"
U16_F
" i¿›ti⁄s\n", 
›ti⁄s
[
off£t
]));

1458 
off£t
++;

1460 
off£t
 +1 + 
›ti⁄s
[offset];

1464 i‡(
ovîlﬂd
 !
DHCP_OVERLOAD_NONE
) {

1465 
u16_t
 
fõld_Àn
;

1466 i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_FILE
) {

1467 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded file field\n"));

1468 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
fûe
;

1469 
fõld_Àn
 = 
DHCP_FILE_LEN
;

1470 } i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_SNAME
) {

1471 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded sname field\n"));

1472 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1473 
fõld_Àn
 = 
DHCP_SNAME_LEN
;

1476 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded snameánd file field\n"));

1477 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1478 
fõld_Àn
 = 
DHCP_FILE_LEN
 + 
DHCP_SNAME_LEN
;

1480 
off£t
 = 0;

1483 (
off£t
 < 
fõld_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1484 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1485 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£t=%"
U16_F
"\n", 
off£t
));

1486  &
›ti⁄s
[
off£t
];

1489 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("skùpög o±i⁄ %"
U16_F
"\n", 
›ti⁄s
[
off£t
]));

1491 
off£t
++;

1492 
off£t
 +1 + 
›ti⁄s
[offset];

1497  
NULL
;

1498 
	}
}

1508 
u8_t


1509 
	$dh˝_gë_›ti⁄_byã
(
u8_t
 *
±r
)

1511 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ byã vÆue=%"
U16_F
"\n", (
u16_t
)(*
±r
)));

1512  *
±r
;

1513 
	}
}

1524 
u16_t


1525 
	$dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
)

1527 
u16_t
 
vÆue
;

1528 
vÆue
 = *
±r
++ << 8;

1529 
vÆue
 |*
±r
;

1530 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ sh‹àvÆue=%"
U16_F
"\n", 
vÆue
));

1531  
vÆue
;

1532 
	}
}

1543 
u32_t
 
	$dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
)

1545 
u32_t
 
vÆue
;

1546 
vÆue
 = (
u32_t
)(*
±r
++) << 24;

1547 
vÆue
 |(
u32_t
)(*
±r
++) << 16;

1548 
vÆue
 |(
u32_t
)(*
±r
++) << 8;

1549 
vÆue
 |(
u32_t
)(*
±r
++);

1550 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄Ü⁄g vÆue=%"
U32_F
"\n", 
vÆue
));

1551  
vÆue
;

1552 
	}
}

	@net/lwip/core/dns.c

76 
	~"lwù/›t.h
"

78 #i‡
LWIP_DNS


80 
	~"lwù/udp.h
"

81 
	~"lwù/mem.h
"

82 
	~"lwù/dns.h
"

84 
	~<°rög.h
>

87 #i‚de‡
DNS_SERVER_ADDRESS


88 
	#DNS_SERVER_ADDRESS
 
	`öë_addr
("208.67.222.222"Ë

	)

92 #i‚de‡
DNS_SERVER_PORT


93 
	#DNS_SERVER_PORT
 53

	)

97 #i‚de‡
DNS_MAX_RETRIES


98 
	#DNS_MAX_RETRIES
 4

	)

102 #i‚de‡
DNS_MAX_TTL


103 
	#DNS_MAX_TTL
 604800

	)

107 
	#DNS_FLAG1_RESPONSE
 0x80

	)

108 
	#DNS_FLAG1_OPCODE_STATUS
 0x10

	)

109 
	#DNS_FLAG1_OPCODE_INVERSE
 0x08

	)

110 
	#DNS_FLAG1_OPCODE_STANDARD
 0x00

	)

111 
	#DNS_FLAG1_AUTHORATIVE
 0x04

	)

112 
	#DNS_FLAG1_TRUNC
 0x02

	)

113 
	#DNS_FLAG1_RD
 0x01

	)

114 
	#DNS_FLAG2_RA
 0x80

	)

115 
	#DNS_FLAG2_ERR_MASK
 0x0f

	)

116 
	#DNS_FLAG2_ERR_NONE
 0x00

	)

117 
	#DNS_FLAG2_ERR_NAME
 0x03

	)

120 
	#DNS_STATE_UNUSED
 0

	)

121 
	#DNS_STATE_NEW
 1

	)

122 
	#DNS_STATE_ASKING
 2

	)

123 
	#DNS_STATE_DONE
 3

	)

125 #ifde‡
PACK_STRUCT_USE_INCLUDES


126 
	~"¨ch/bp°ru˘.h
"

128 
PACK_STRUCT_BEGIN


130 
	sdns_hdr
 {

131 
u16_t
 
	mid
;

132 
u8_t
 
	mÊags1
;

133 
u8_t
 
	mÊags2
;

134 
u16_t
 
	mnumque°i⁄s
;

135 
u16_t
 
	mnum™swîs
;

136 
u16_t
 
	mnumauthº
;

137 
u16_t
 
	mnumexå¨r
;

138 } 
	gPACK_STRUCT_STRUCT
;

139 
	gPACK_STRUCT_END


140 #ifde‡
PACK_STRUCT_USE_INCLUDES


141 
	~"¨ch/ï°ru˘.h
"

144 #ifde‡
PACK_STRUCT_USE_INCLUDES


145 
	~"¨ch/bp°ru˘.h
"

147 
PACK_STRUCT_BEGIN


149 
	sdns_quîy
 {

152 
u16_t
 
	mty≥
;

153 
u16_t
 
	m˛ass
;

154 } 
	gPACK_STRUCT_STRUCT
;

155 
	gPACK_STRUCT_END


156 #ifde‡
PACK_STRUCT_USE_INCLUDES


157 
	~"¨ch/ï°ru˘.h
"

160 #ifde‡
PACK_STRUCT_USE_INCLUDES


161 
	~"¨ch/bp°ru˘.h
"

163 
PACK_STRUCT_BEGIN


165 
	sdns_™swî
 {

168 
u16_t
 
	mty≥
;

169 
u16_t
 
	m˛ass
;

170 
u32_t
 
	mâl
;

171 
u16_t
 
	mÀn
;

172 } 
	gPACK_STRUCT_STRUCT
;

173 
	gPACK_STRUCT_END


174 #ifde‡
PACK_STRUCT_USE_INCLUDES


175 
	~"¨ch/ï°ru˘.h
"

179 
	sdns_èbÀ_íåy
 {

180 
u8_t
 
	m°©e
;

181 
u8_t
 
	mnumdns
;

182 
u8_t
 
	mtmr
;

183 
u8_t
 
	mªåõs
;

184 
u8_t
 
	m£qno
;

185 
u8_t
 
	mîr
;

186 
u32_t
 
	mâl
;

187 
	m«me
[
DNS_MAX_NAME_LENGTH
];

188 
ù_addr
 
	mùaddr
;

190 
dns_found_ˇŒback
 
	mfound
;

191 *
	m¨g
;

196 
dns_ªcv
(*
s
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

197 
dns_check_íåõs
();

204 
udp_pcb
 *
	gdns_pcb
;

205 
u8_t
 
	gdns_£qno
;

206 
dns_èbÀ_íåy
 
	gdns_èbÀ
[
DNS_TABLE_SIZE
];

207 
ù_addr
 
	gdns_£rvîs
[
DNS_MAX_SERVERS
];

209 #i‡(
DNS_USES_STATIC_BUF
 == 1)

210 
u8_t
 
	gdns_∑ylﬂd
[
DNS_MSG_SIZE
];

218 
	$dns_öô
()

220 
ù_addr
 
dns£rvî
;

223 
dns£rvî
.
addr
 = 
DNS_SERVER_ADDRESS
;

225 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_init: initializing\n"));

228 i‡(
dns_pcb
 =
NULL
) {

229 
dns_pcb
 = 
	`udp_√w
();

231 i‡(
dns_pcb
 !
NULL
) {

234 
	`LWIP_ASSERT
("For implicit initializationÅo work, DNS_STATE_UNUSEDÇeedsÅo be 0",

235 
DNS_STATE_UNUSED
 == 0);

238 
	`udp_böd
(
dns_pcb
, 
IP_ADDR_ANY
, 0);

239 
	`udp_ªcv
(
dns_pcb
, 
dns_ªcv
, 
NULL
);

242 
	`dns_£t£rvî
(0, &
dns£rvî
);

245 
	}
}

254 
	$dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
)

256 i‡((
numdns
 < 
DNS_MAX_SERVERS
Ë&& (
dns_pcb
 !
NULL
) &&

257 (
dns£rvî
 !
NULL
Ë&& (dns£rvî->
addr
 !=0 )) {

258 
dns_£rvîs
[
numdns
] = (*
dns£rvî
);

260 
	}
}

269 
ù_addr


270 
	$dns_gë£rvî
(
u8_t
 
numdns
)

272 i‡(
numdns
 < 
DNS_MAX_SERVERS
) {

273  
dns_£rvîs
[
numdns
];

275  *
IP_ADDR_ANY
;

277 
	}
}

284 
	$dns_tmr
()

286 i‡(
dns_pcb
 !
NULL
) {

287 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_tmr: dns_check_entries\n"));

288 
	`dns_check_íåõs
();

290 
	}
}

305 
u32_t


306 
	$dns_lookup
(c⁄° *
«me
)

308 
u8_t
 
i
;

311 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

312 i‡((
dns_èbÀ
[
i
].
°©e
 =
DNS_STATE_DONE
) &&

313 (
	`°rcmp
(
«me
, 
dns_èbÀ
[
i
].name) == 0)) {

314 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_lookup: \"%s\": found = ", 
«me
));

315 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, &(
dns_èbÀ
[
i
].
ùaddr
));

316 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

317  
dns_èbÀ
[
i
].
ùaddr
.
addr
;

322 
	}
}

324 #i‡
DNS_DOES_NAME_CHECK


335 
u8_t


336 
	$dns_com∑ª_«me
(*
quîy
, *
ª•⁄£
)

338 
n
;

341 
n
 = *
ª•⁄£
++;

343 i‡((
n
 & 0xc0) == 0xc0) {

348 
n
 > 0) {

349 i‡((*
quîy
Ë!(*
ª•⁄£
)) {

352 ++
ª•⁄£
;

353 ++
quîy
;

354 --
n
;

356 ++
quîy
;

358 } *
ª•⁄£
 != 0);

361 
	}
}

371 
	$dns_∑r£_«me
(*
quîy
)

373 
n
;

376 
n
 = *
quîy
++;

378 i‡((
n
 & 0xc0) == 0xc0) {

383 
n
 > 0) {

384 ++
quîy
;

385 --
n
;

388 } *
quîy
 != 0);

390  
quîy
 + 1;

391 
	}
}

402 
îr_t


403 
	$dns_£nd
(
u8_t
 
numdns
, c⁄° * 
«me
, u8_à
id
)

405 
îr_t
 
îr
;

406 
dns_hdr
 *
hdr
;

407 
dns_quîy
 
qry
;

408 
pbuf
 *
p
;

409 *
quîy
, *
≈å
;

410 c⁄° *
pHo°«me
;

411 
u8_t
 
n
;

413 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_£nd: dns_£rvîs[%"
U16_F
"] \"%s\":Ñequest\n",

414 (
u16_t
)(
numdns
), 
«me
));

415 
	`LWIP_ASSERT
("dn†£rvî ouào‡¨øy", 
numdns
 < 
DNS_MAX_SERVERS
);

416 
	`LWIP_ASSERT
("dn†£rvî ha†nÿIPáddªs†£t", 
dns_£rvîs
[
numdns
].
addr
 != 0);

419 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dns_hdr
Ë+ 
DNS_MAX_NAME_LENGTH
 +

420 (
dns_quîy
), 
PBUF_RAM
);

421 i‡(
p
 !
NULL
) {

422 
	`LWIP_ASSERT
("pbu‡mu° bêö o√Öõ˚", 
p
->
√xt
 =
NULL
);

424 
hdr
 = (
dns_hdr
*)
p
->
∑ylﬂd
;

425 
	`mem£t
(
hdr
, 0, (
dns_hdr
));

426 
hdr
->
id
 = 
	`ht⁄s
(id);

427 
hdr
->
Êags1
 = 
DNS_FLAG1_RD
;

428 
hdr
->
numque°i⁄s
 = 
	`ht⁄s
(1);

429 
quîy
 = (*)
hdr
 + (
dns_hdr
);

430 
pHo°«me
 = 
«me
;

431 --
pHo°«me
;

435 ++
pHo°«me
;

436 
≈å
 = 
quîy
;

437 ++
quîy
;

438 
n
 = 0; *
pHo°«me
 != '.' && *pHostname != 0; ++pHostname) {

439 *
quîy
 = *
pHo°«me
;

440 ++
quîy
;

441 ++
n
;

443 *
≈å
 = 
n
;

444 } *
pHo°«me
 != 0);

445 *
quîy
++='\0';

448 
qry
.
ty≥
 = 
	`ht⁄s
(
DNS_RRTYPE_A
);

449 
qry
.
˛ass
 = 
	`ht⁄s
(
DNS_RRCLASS_IN
);

450 
	`MEMCPY
–
quîy
, &
qry
, (
dns_quîy
));

453 
	`pbuf_ªÆloc
(
p
, (
quîy
 + (
dns_quîy
)Ë- ((*)’->
∑ylﬂd
)));

456 
	`udp_c⁄√˘
(
dns_pcb
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

458 
îr
 = 
	`udp_£ndto
(
dns_pcb
, 
p
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

461 
	`pbuf_‰ì
(
p
);

463 
îr
 = 
ERR_MEM
;

466  
îr
;

467 
	}
}

479 
	$dns_check_íåy
(
u8_t
 
i
)

481 
dns_èbÀ_íåy
 *
pE¡ry
 = &
dns_èbÀ
[
i
];

483 
	`LWIP_ASSERT
("¨øy index ouào‡bounds", 
i
 < 
DNS_TABLE_SIZE
);

485 
pE¡ry
->
°©e
) {

487 
DNS_STATE_NEW
: {

489 
pE¡ry
->
°©e
 = 
DNS_STATE_ASKING
;

490 
pE¡ry
->
numdns
 = 0;

491 
pE¡ry
->
tmr
 = 1;

492 
pE¡ry
->
ªåõs
 = 0;

495 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

499 
DNS_STATE_ASKING
: {

500 i‡(--
pE¡ry
->
tmr
 == 0) {

501 i‡(++
pE¡ry
->
ªåõs
 =
DNS_MAX_RETRIES
) {

502 i‡((
pE¡ry
->
numdns
+1<
DNS_MAX_SERVERS
Ë&& (
dns_£rvîs
[pE¡ry->numdns+1].
addr
!=0)) {

504 
pE¡ry
->
numdns
++;

505 
pE¡ry
->
tmr
 = 1;

506 
pE¡ry
->
ªåõs
 = 0;

509 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\":Åimeout\n", 
pE¡ry
->
«me
));

511 i‡(
pE¡ry
->
found
)

512 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

514 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

515 
pE¡ry
->
found
 = 
NULL
;

521 
pE¡ry
->
tmr
 =ÖE¡ry->
ªåõs
;

524 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

529 
DNS_STATE_DONE
: {

531 i‡(--
pE¡ry
->
âl
 == 0) {

532 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\": flush\n", 
pE¡ry
->
«me
));

534 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

535 
pE¡ry
->
found
 = 
NULL
;

539 
DNS_STATE_UNUSED
:

543 
	`LWIP_ASSERT
("unknown dns_tableÉntry state:", 0);

546 
	}
}

552 
	$dns_check_íåõs
()

554 
u8_t
 
i
;

556 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

557 
	`dns_check_íåy
(
i
);

559 
	}
}

567 
	$dns_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

569 
u8_t
 
i
;

570 *
pHo°«me
;

571 
dns_hdr
 *
hdr
;

572 
dns_™swî
 
™s
;

573 
dns_èbÀ_íåy
 *
pE¡ry
;

574 
u8_t
 
nque°i⁄s
, 
«nswîs
;

575 #i‡(
DNS_USES_STATIC_BUF
 == 0)

576 
u8_t
 
dns_∑ylﬂd
[
DNS_MSG_SIZE
];

578 #i‡(
DNS_USES_STATIC_BUF
 == 2)

579 
u8_t
* 
dns_∑ylﬂd
;

582 
	`LWIP_UNUSED_ARG
(
¨g
);

583 
	`LWIP_UNUSED_ARG
(
pcb
);

584 
	`LWIP_UNUSED_ARG
(
addr
);

585 
	`LWIP_UNUSED_ARG
(
p‹t
);

588 i‡(
p
->
tŸ_Àn
 > 
DNS_MSG_SIZE
) {

589 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo big\n"));

591 
memîr1
;

595 i‡(
p
->
tŸ_Àn
 < ((
dns_hdr
Ë+ (
dns_quîy
Ë+ (
dns_™swî
))) {

596 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo small\n"));

598 
memîr1
;

601 #i‡(
DNS_USES_STATIC_BUF
 == 2)

602 
dns_∑ylﬂd
 = 
	`mem_mÆloc
(
p
->
tŸ_Àn
);

603 i‡(
dns_∑ylﬂd
 =
NULL
) {

604 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv: mem_mallocÉrror\n"));

606 
memîr1
;

611 i‡(
	`pbuf_c›y_∑πül
(
p
, 
dns_∑ylﬂd
,Ö->
tŸ_Àn
, 0) ==Ö->tot_len) {

613 
hdr
 = (
dns_hdr
*)
dns_∑ylﬂd
;

614 
i
 = 
	`ht⁄s
(
hdr
->
id
);

615 i‡(
i
 < 
DNS_TABLE_SIZE
) {

616 
pE¡ry
 = &
dns_èbÀ
[
i
];

617 if(
pE¡ry
->
°©e
 =
DNS_STATE_ASKING
) {

619 
pE¡ry
->
°©e
 = 
DNS_STATE_DONE
;

620 
pE¡ry
->
îr
 = 
hdr
->
Êags2
 & 
DNS_FLAG2_ERR_MASK
;

624 
nque°i⁄s
 = 
	`ht⁄s
(
hdr
->
numque°i⁄s
);

625 
«nswîs
 = 
	`ht⁄s
(
hdr
->
num™swîs
);

628 i‡(((
hdr
->
Êags1
 & 
DNS_FLAG1_RESPONSE
Ë=0Ë|| (
pE¡ry
->
îr
 !0Ë|| (
nque°i⁄s
 != 1)) {

629 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿Êags\n", 
pE¡ry
->
«me
));

631 
ª•⁄£îr
;

634 #i‡
DNS_DOES_NAME_CHECK


636 i‡(
	`dns_com∑ª_«me
((*)(
pE¡ry
->
«me
), (*)
dns_∑ylﬂd
 + (
dns_hdr
)) != 0) {

637 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ÇŸ m©chÅÿquîy\n", 
pE¡ry
->
«me
));

639 
ª•⁄£îr
;

644 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)
dns_∑ylﬂd
 + (
dns_hdr
)Ë+ (
dns_quîy
);

646 
«nswîs
 > 0) {

648 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)pHostname);

651 
	`MEMCPY
(&
™s
, 
pHo°«me
, (
dns_™swî
));

652 if((
	`¡ohs
(
™s
.
ty≥
Ë=
DNS_RRTYPE_A
Ë&& (¡ohs◊ns.
˛ass
Ë=
DNS_RRCLASS_IN
Ë&& (¡ohs◊ns.
Àn
Ë=(
ù_addr
)) ) {

654 
pE¡ry
->
âl
 = 
	`¡ohl
(
™s
.ttl);

655 i‡(
pE¡ry
->
âl
 > 
DNS_MAX_TTL
) {

656 
pE¡ry
->
âl
 = 
DNS_MAX_TTL
;

659 
	`MEMCPY
–&(
pE¡ry
->
ùaddr
), (
pHo°«me
+(
dns_™swî
)), (
ù_addr
));

660 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ = ", 
pE¡ry
->
«me
));

661 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, (&(
pE¡ry
->
ùaddr
)));

662 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

664 i‡(
pE¡ry
->
found
) {

665 (*
pE¡ry
->
found
)’E¡ry->
«me
, &pE¡ry->
ùaddr
,ÖE¡ry->
¨g
);

668 
memîr2
;

670 
pHo°«me
 =ÖHo°«mê+ (
dns_™swî
Ë+ 
	`ht⁄s
(
™s
.
Àn
);

672 --
«nswîs
;

674 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿ª•⁄£\n", 
pE¡ry
->
«me
));

676 
ª•⁄£îr
;

682 
memîr2
;

684 
ª•⁄£îr
:

686 i‡(
pE¡ry
->
found
) {

687 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

690 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

691 
pE¡ry
->
found
 = 
NULL
;

693 
memîr2
:

694 #i‡(
DNS_USES_STATIC_BUF
 == 2)

696 
	`mem_‰ì
(
dns_∑ylﬂd
);

699 
memîr1
:

701 
	`pbuf_‰ì
(
p
);

703 
	}
}

713 
îr_t


714 
	$dns_íqueue
(c⁄° *
«me
, 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
)

716 
u8_t
 
i
;

717 
u8_t
 
l£q
, 
l£qi
;

718 
dns_èbÀ_íåy
 *
pE¡ry
 = 
NULL
;

721 
l£q
 = 
l£qi
 = 0;

722 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

723 
pE¡ry
 = &
dns_èbÀ
[
i
];

725 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_UNUSED
)

729 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_DONE
) {

730 i‡((
dns_£qno
 - 
pE¡ry
->
£qno
Ë> 
l£q
) {

731 
l£q
 = 
dns_£qno
 - 
pE¡ry
->
£qno
;

732 
l£qi
 = 
i
;

738 i‡(
i
 =
DNS_TABLE_SIZE
) {

739 i‡((
l£qi
 >
DNS_TABLE_SIZE
Ë|| (
dns_èbÀ
[l£qi].
°©e
 !
DNS_STATE_DONE
)) {

741 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": DNSÉ¡rõ†èbÀ i†fuŒ\n", 
«me
));

742  
ERR_MEM
;

745 
i
 = 
l£qi
;

746 
pE¡ry
 = &
dns_èbÀ
[
i
];

751 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": u£ DNSÉ¡ry %"
U16_F
"\n", 
«me
, (
u16_t
)(
i
)));

754 
pE¡ry
->
°©e
 = 
DNS_STATE_NEW
;

755 
pE¡ry
->
£qno
 = 
dns_£qno
++;

756 
pE¡ry
->
found
 = found;

757 
pE¡ry
->
¨g
 = 
ˇŒback_¨g
;

758 
	`°r˝y
(
pE¡ry
->
«me
,Çame);

761 
	`dns_check_íåy
(
i
);

764  
ERR_INPROGRESS
;

765 
	}
}

785 
îr_t


786 
	$dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
, 
dns_found_ˇŒback
 
found
,

787 *
ˇŒback_¨g
)

791 i‡((
dns_pcb
 =
NULL
Ë|| (
addr
 == NULL) ||

792 (!
ho°«me
) || (!hostname[0]) ||

793 (
	`°æí
(
ho°«me
Ë>
DNS_MAX_NAME_LENGTH
)) {

794  
ERR_VAL
;

797 #i‡
LWIP_HAVE_LOOPIF


798 i‡(
	`°rcmp
(
ho°«me
,"localhost")==0) {

799 
addr
->add∏
INADDR_LOOPBACK
;

800  
ERR_OK
;

806 i‡(((
addr
->add∏
	`öë_addr
(
ho°«me
)Ë!
INADDR_NONE
) ||

807 ((
addr
->add∏
	`dns_lookup
(
ho°«me
)) != 0)) {

808  
ERR_OK
;

812  
	`dns_íqueue
(
ho°«me
, 
found
, 
ˇŒback_¨g
);

813 
	}
}

	@net/lwip/core/init.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/öô.h
"

43 
	~"lwù/°©s.h
"

44 
	~"lwù/sys.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/memp.h
"

47 
	~"lwù/pbuf.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/sockës.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

54 
	~"lwù/autoù.h
"

55 
	~"lwù/igmp.h
"

56 
	~"lwù/dns.h
"

57 
	~"√tif/ëh¨p.h
"

62 #i‚de‡
BYTE_ORDER


65 #i‡(!
LWIP_ARP
 && 
ARP_QUEUEING
)

68 #i‡(!
LWIP_UDP
 && 
LWIP_UDPLITE
)

71 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

74 #i‡(!
LWIP_UDP
 && 
LWIP_DHCP
)

77 #i‡(!
LWIP_UDP
 && 
LWIP_IGMP
)

80 #i‡(!
LWIP_UDP
 && 
LWIP_DNS
)

83 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

86 #i‡(
LWIP_ARP
 && 
ARP_QUEUEING
 && (
MEMP_NUM_ARP_QUEUE
<=0))

89 #i‡(
LWIP_RAW
 && (
MEMP_NUM_RAW_PCB
<=0))

92 #i‡(
LWIP_UDP
 && (
MEMP_NUM_UDP_PCB
<=0))

95 #i‡(
LWIP_TCP
 && (
MEMP_NUM_TCP_PCB
<=0))

98 #i‡(
LWIP_TCP
 && (
TCP_WND
 > 0xffff))

101 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 > 0xffff))

104 #i‡(
LWIP_TCP
 && ((
TCP_MAXRTX
 > 12Ë|| (
TCP_SYNMAXRTX
 > 12)))

107 #i‡(
LWIP_TCP
 && 
TCP_LISTEN_BACKLOG
 && (
TCP_DEFAULT_LISTEN_BACKLOG
 < 0) || (TCP_DEFAULT_LISTEN_BACKLOG > 0xff))

110 #i‡(
LWIP_IGMP
 && (
MEMP_NUM_IGMP_GROUP
<=1))

113 #i‡(
PPP_SUPPORT
 && (
NO_SYS
==1))

116 #i‡(
LWIP_NETIF_API
 && (
NO_SYS
==1))

119 #i‡((
LWIP_SOCKET
 || 
LWIP_NETCONN
Ë&& (
NO_SYS
==1))

122 #i‡((
LWIP_NETCONN
 || 
LWIP_SOCKET
Ë&& (
MEMP_NUM_TCPIP_MSG_API
<=0))

125 #i‡(!
LWIP_NETCONN
 && 
LWIP_SOCKET
)

128 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_AUTOIP
)Ë&& 
LWIP_DHCP_AUTOIP_COOP
)

131 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_ARP
)Ë&& 
DHCP_DOES_ARP_CHECK
)

134 #i‡(!
LWIP_ARP
 && 
LWIP_AUTOIP
)

137 #i‡(
LWIP_SNMP
 && (
SNMP_CONCURRENT_REQUESTS
<=0))

140 #i‡(
LWIP_SNMP
 && (
SNMP_TRAP_DESTINATIONS
<=0))

143 #i‡(
LWIP_TCP
 && ((
LWIP_EVENT_API
 && 
LWIP_CALLBACK_API
) || (!LWIP_EVENT_API && !LWIP_CALLBACK_API)))

147 #i‡((
NO_SYS
==0Ë&& (
MEMP_NUM_SYS_TIMEOUT
 < (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
)))

150 #i‡(
IP_REASSEMBLY
 && (
MEMP_NUM_REASSDATA
 > 
IP_REASS_MAX_PBUFS
))

153 #i‡(
MEM_LIBC_MALLOC
 && 
MEM_USE_POOLS
)

156 #i‡(
MEM_USE_POOLS
 && !
MEMP_USE_CUSTOM_POOLS
)

163 #ifde‡
MEMP_NUM_TCPIP_MSG


166 #ifde‡
MEMP_NUM_API_MSG


169 #ifde‡
TCP_REXMIT_DEBUG


172 #ifde‡
RAW_STATS


175 #ifde‡
ETHARP_QUEUE_FIRST


178 #ifde‡
ETHARP_ALWAYS_INSERT


181 #i‡
SO_REUSE


187 #ifde‡
LWIP_DEBUG


189 
	$lwù_ßnôy_check
()

192 #i‡
LWIP_NETCONN


193 i‡(
MEMP_NUM_NETCONN
 > (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
))

194 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should beÜessÅhanÅhe sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));

196 #i‡
LWIP_TCP


197 i‡(
MEMP_NUM_TCP_SEG
 < 
TCP_SND_QUEUELEN
)

198 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should beátÜeastás bigás TCP_SND_QUEUELEN\n"));

199 i‡(
TCP_SND_QUEUELEN
 < (2 * (
TCP_SND_BUF
/
TCP_MSS
)))

200 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must beátÜeastás muchás (2 * TCP_SND_BUF/TCP_MSS) forÅhingsÅo work\n"));

201 i‡(
TCP_SNDLOWAT
 > 
TCP_SND_BUF
)

202 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must beÜessÅhan orÉqualÅo TCP_SND_BUF.\n"));

203 i‡(
TCP_WND
 > (
PBUF_POOL_SIZE
*
PBUF_POOL_BUFSIZE
))

204 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND isÜargerÅhan spaceÖrovided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));

205 i‡(
TCP_WND
 < 
TCP_MSS
)

206 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND is smallerÅhan MSS\n"));

208 
	}
}

210 
	#lwù_ßnôy_check
()

	)

217 
	$lwù_öô
()

220 
	`lwù_ßnôy_check
();

223 
	`°©s_öô
();

224 
	`sys_öô
();

225 
	`mem_öô
();

226 
	`memp_öô
();

227 
	`pbuf_öô
();

228 
	`√tif_öô
();

229 #i‡
LWIP_SOCKET


230 
	`lwù_sockë_öô
();

232 
	`ù_öô
();

233 #i‡
LWIP_ARP


234 
	`ëh¨p_öô
();

236 #i‡
LWIP_RAW


237 
	`øw_öô
();

239 #i‡
LWIP_UDP


240 
	`udp_öô
();

242 #i‡
LWIP_TCP


243 
	`t˝_öô
();

245 #i‡
LWIP_AUTOIP


246 
	`autoù_öô
();

248 #i‡
LWIP_IGMP


249 
	`igmp_öô
();

251 #i‡
LWIP_DNS


252 
	`dns_öô
();

254 
	}
}

	@net/lwip/core/ipv4/autoip.c

66 
	~"lwù/›t.h
"

68 #i‡
LWIP_AUTOIP


70 
	~"lwù/mem.h
"

71 
	~"lwù/udp.h
"

72 
	~"lwù/ù_addr.h
"

73 
	~"lwù/√tif.h
"

74 
	~"lwù/autoù.h
"

75 
	~"√tif/ëh¨p.h
"

77 
	~<°dlib.h
>

78 
	~<°rög.h
>

82 #i‚de‡
LWIP_AUTOIP_RAND


83 
	#LWIP_AUTOIP_RAND
(
√tif
Ë–(((
u32_t
)(“ëif->
hwaddr
[5]) & 0xff) << 24) | \

84 ((
u32_t
)((
√tif
->
hwaddr
[3]) & 0xff) << 16) | \

85 ((
u32_t
)((
√tif
->
hwaddr
[2]) & 0xff) << 8) | \

86 ((
u32_t
)((
√tif
->
hwaddr
[4]) & 0xff))) + \

87 (
√tif
->
autoù
?√tif->autoù->
åõd_Œùaddr
:0))

	)

91 
autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif);

94 
autoù_¸óã_ønd_addr
(
√tif
 *√tif, 
ù_addr
 *
R™domIPAddr
);

97 
îr_t
 
autoù_¨p_™noun˚
(
√tif
 *netif);

100 
îr_t
 
autoù_böd
(
√tif
 *netif);

106 
	$autoù_öô
()

108 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_init()\n"));

109 
	}
}

115 
	$autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif)

118 
de„nd
 = 1;

120 if(
de„nd
) {

121 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

125 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

129 
	`autoù_°¨t
(
√tif
);

131 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

133 
	`autoù_¨p_™noun˚
(
√tif
);

134 
√tif
->
autoù
->
œ°c⁄Êi˘
 = 
DEFEND_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

137 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

140 
	`autoù_°¨t
(
√tif
);

142 
	}
}

151 
	$autoù_¸óã_ønd_addr
(
√tif
 *√tif, 
ù_addr
 *
R™domIPAddr
)

158 
R™domIPAddr
->
addr
 = (0xA9FE0100 + ((
u32_t
)(((
u8_t
)(
√tif
->
hwaddr
[4])) |

159 ((
u32_t
)((
u8_t
)(
√tif
->
hwaddr
[5]))Ë<< 8)Ë+Çëif->
autoù
->
åõd_Œùaddr
);

161 i‡(
R™domIPAddr
->
addr
>0xA9FEFEFF) {

162 
R™domIPAddr
->
addr
 = (0xA9FE0100 + (RandomIPAddr->addr-0xA9FEFEFF));

164 i‡(
R™domIPAddr
->
addr
<0xA9FE0100) {

165 
R™domIPAddr
->
addr
 = (0xA9FEFEFF - (0xA9FE0100-RandomIPAddr->addr));

167 
R™domIPAddr
->
addr
 = 
	`ht⁄l
(RandomIPAddr->addr);

169 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

170 ("autoù_¸óã_ønd_addr():Årõd_Œùaddr=%"
U16_F
", 0x%08"
X32_F
"\n",

171 (
u16_t
)(
√tif
->
autoù
->
åõd_Œùaddr
), (
u32_t
)(
R™domIPAddr
->
addr
)));

172 
	}
}

179 
îr_t


180 
	$autoù_¨p_™noun˚
(
√tif
 *netif)

182  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

183 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
autoù
->
Œùaddr
, &
ëhzîo
,

184 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

185 
	}
}

192 
îr_t


193 
	$autoù_böd
(
√tif
 *netif)

195 
autoù
 *autoù = 
√tif
->autoip;

196 
ù_addr
 
¢_mask
, 
gw_addr
;

198 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

199 ("autoù_böd“ëif=%pË%c%c%"
U16_F
" 0x%08"
X32_F
"\n",

200 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
, 
autoù
->
Œùaddr
.
addr
));

202 
	`IP4_ADDR
(&
¢_mask
, 255, 255, 0, 0);

203 
	`IP4_ADDR
(&
gw_addr
, 0, 0, 0, 0);

205 
	`√tif_£t_ùaddr
(
√tif
, &
autoù
->
Œùaddr
);

206 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

207 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

210 
	`√tif_£t_up
(
√tif
);

212  
ERR_OK
;

213 
	}
}

220 
îr_t


221 
	$autoù_°¨t
(
√tif
 *netif)

223 
autoù
 *autoù = 
√tif
->autoip;

224 
îr_t
 
ªsu…
 = 
ERR_OK
;

226 if(
	`√tif_is_up
(
√tif
)) {

227 
	`√tif_£t_down
(
√tif
);

233 
√tif
->
ù_addr
.
addr
 = 0;

234 
√tif
->
√tmask
.
addr
 = 0;

235 
√tif
->
gw
.
addr
 = 0;

237 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

238 ("autoù_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],

239 
√tif
->
«me
[1], (
u16_t
Íëif->
num
));

240 if(
autoù
 =
NULL
) {

242 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

244 
autoù
 = 
	`mem_mÆloc
((autoip));

245 if(
autoù
 =
NULL
) {

246 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

248  
ERR_MEM
;

250 
	`mem£t
–
autoù
, 0, (autoip));

252 
√tif
->
autoù
 =áutoip;

253 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_start():állocatedáutoip"));

255 
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

256 
autoù
->
âw
 = 0;

257 
autoù
->
£¡_num
 = 0;

258 
	`mem£t
(&
autoù
->
Œùaddr
, 0, (
ù_addr
));

259 
autoù
->
œ°c⁄Êi˘
 = 0;

262 
	`autoù_¸óã_ønd_addr
(
√tif
, &(
autoù
->
Œùaddr
));

263 
autoù
->
åõd_Œùaddr
++;

264 
autoù
->
°©e
 = 
AUTOIP_STATE_PROBING
;

265 
autoù
->
£¡_num
 = 0;

271 
autoù
->
âw
 = (
u16_t
)(
	`LWIP_AUTOIP_RAND
(
√tif
Ë% (
PROBE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
));

279 if(
autoù
->
åõd_Œùaddr
 > 
MAX_CONFLICTS
) {

280 
autoù
->
âw
 = 
RATE_LIMIT_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

283  
ªsu…
;

284 
	}
}

291 
îr_t


292 
	$autoù_°›
(
√tif
 *netif)

294 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

295 
	`√tif_£t_down
(
√tif
);

296  
ERR_OK
;

297 
	}
}

303 
	$autoù_tmr
()

305 
√tif
 *√ti‡
√tif_li°
;

307 
√tif
 !
NULL
) {

309 i‡(
√tif
->
autoù
 !
NULL
) {

310 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

311 
√tif
->
autoù
->
œ°c⁄Êi˘
--;

314 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

315 ("autoù_tmr(ËAutoIP-Sèã: %"
U16_F
",Åtw=%"U16_F"\n",

316 (
u16_t
)(
√tif
->
autoù
->
°©e
),Çëif->autoù->
âw
));

318 
√tif
->
autoù
->
°©e
) {

319 
AUTOIP_STATE_PROBING
:

320 if(
√tif
->
autoù
->
âw
 > 0) {

321 
√tif
->
autoù
->
âw
--;

323 if(
√tif
->
autoù
->
£¡_num
 =
PROBE_NUM
) {

324 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_ANNOUNCING
;

325 
√tif
->
autoù
->
£¡_num
 = 0;

326 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
;

328 
	`ëh¨p_ªque°
(
√tif
, &“ëif->
autoù
->
Œùaddr
));

329 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

331 
√tif
->
autoù
->
£¡_num
++;

333 
√tif
->
autoù
->
âw
 = (
u16_t
)((
	`LWIP_AUTOIP_RAND
(netif) %

334 ((
PROBE_MAX
 - 
PROBE_MIN
Ë* 
AUTOIP_TICKS_PER_SECOND
) ) +

335 
PROBE_MIN
 * 
AUTOIP_TICKS_PER_SECOND
);

340 
AUTOIP_STATE_ANNOUNCING
:

341 if(
√tif
->
autoù
->
âw
 > 0) {

342 
√tif
->
autoù
->
âw
--;

344 if(
√tif
->
autoù
->
£¡_num
 == 0) {

348 
	`autoù_böd
(
√tif
);

351 if(
√tif
->
autoù
->
£¡_num
 =
ANNOUNCE_NUM
) {

352 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_BOUND
;

353 
√tif
->
autoù
->
£¡_num
 = 0;

354 
√tif
->
autoù
->
âw
 = 0;

356 
	`autoù_¨p_™noun˚
(
√tif
);

357 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

359 
√tif
->
autoù
->
£¡_num
++;

360 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

367 
√tif
 =Çëif->
√xt
;

369 
	}
}

378 
	$autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
)

380 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_arp_reply()\n"));

381 i‡((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)) {

387 
ù_addr
 
sùaddr
, 
dùaddr
;

388 
ëh_addr
 
√tiÁddr
;

389 
√tiÁddr
.
addr
[0] = 
√tif
->
hwaddr
[0];

390 
√tiÁddr
.
addr
[1] = 
√tif
->
hwaddr
[1];

391 
√tiÁddr
.
addr
[2] = 
√tif
->
hwaddr
[2];

392 
√tiÁddr
.
addr
[3] = 
√tif
->
hwaddr
[3];

393 
√tiÁddr
.
addr
[4] = 
√tif
->
hwaddr
[4];

394 
√tiÁddr
.
addr
[5] = 
√tif
->
hwaddr
[5];

399 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

400 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

402 i‡((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_PROBING
) ||

403 ((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_ANNOUNCING
) &&

404 (
√tif
->
autoù
->
£¡_num
 == 0))) {

411 i‡((
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
)) ||

412 (
	`ù_addr_cmp
(&
dùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

413 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
))) {

414 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

416 
	`autoù_°¨t
(
√tif
);

423 i‡(
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

424 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
)) {

425 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

427 
	`autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
);

431 
	}
}

	@net/lwip/core/ipv4/icmp.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_ICMP


47 
	~"lwù/icmp.h
"

48 
	~"lwù/öë.h
"

49 
	~"lwù/öë_chksum.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/def.h
"

52 
	~"lwù/°©s.h
"

53 
	~"lwù/¢mp.h
"

55 
	~<°rög.h
>

58 
	#ICMP_DEST_UNREACH_DATASIZE
 8

	)

70 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

72 
u8_t
 
ty≥
;

73 #ifde‡
LWIP_DEBUG


74 
u8_t
 
code
;

76 
icmp_echo_hdr
 *
õcho
;

77 
ù_hdr
 *
ùhdr
;

78 
ù_addr
 
tm∑ddr
;

79 
s16_t
 
hÀn
;

81 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

82 
	`¢mp_öc_icmpömsgs
();

85 
ùhdr
 = 
p
->
∑ylﬂd
;

86 
hÀn
 = 
	`IPH_HL
(
ùhdr
) * 4;

87 i‡(
	`pbuf_hódî
(
p
, -
hÀn
Ë|| (p->
tŸ_Àn
 < (
u16_t
)*2)) {

88 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: sh‹àICMP (%"
U16_F
" byãsËª˚ived\n", 
p
->
tŸ_Àn
));

89 
À√º
;

92 
ty≥
 = *((
u8_t
 *)
p
->
∑ylﬂd
);

93 #ifde‡
LWIP_DEBUG


94 
code
 = *(((
u8_t
 *)
p
->
∑ylﬂd
)+1);

96 
ty≥
) {

97 
ICMP_ECHO
:

99 i‡(
	`ù_addr_isbrﬂdˇ°
(&
ùhdr
->
de°
, 
öp
Ë|| 
	`ù_addr_ismu…iˇ°
(&iphdr->dest)) {

100 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: NotÉchoingÅo multicast or broadcastÖings\n"));

101 
	`ICMP_STATS_INC
(
icmp
.
îr
);

102 
	`pbuf_‰ì
(
p
);

105 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

106 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

107 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

108 
À√º
;

110 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

111 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: checksum failed forÑeceived ICMPÉcho\n"));

112 
	`pbuf_‰ì
(
p
);

113 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

114 
	`¢mp_öc_icmpöîr‹s
();

117 i‡(
	`pbuf_hódî
(
p
, (
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

121 
pbuf
 *
r
;

123 i‡(
	`pbuf_hódî
(
p
, 
hÀn
)) {

124 
	`LWIP_ASSERT
("icmp_input: movingÖ->payloadÅo ip header failed\n", 0);

125 
memîr
;

128 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

129 i‡(
r
 =
NULL
) {

130 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:állocatingÇewÖbuf failed\n"));

131 
memîr
;

133 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅhe ICMP header",

134 (
r
->
Àn
 >
hÀn
 + (
icmp_echo_hdr
)));

136 i‡(
	`pbuf_c›y
(
r
, 
p
Ë!
ERR_OK
) {

137 
	`LWIP_ASSERT
("icmp_input: copyingÅoÇewÖbuf failed\n", 0);

138 
memîr
;

140 
ùhdr
 = 
r
->
∑ylﬂd
;

142 i‡(
	`pbuf_hódî
(
r
, -
hÀn
)) {

143 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

144 
memîr
;

147 
	`pbuf_‰ì
(
p
);

149 
p
 = 
r
;

152 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

153 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

154 
memîr
;

160 
õcho
 = 
p
->
∑ylﬂd
;

161 
tm∑ddr
.
addr
 = 
ùhdr
->
§c
.addr;

162 
ùhdr
->
§c
.
addr
 = iphdr->
de°
.addr;

163 
ùhdr
->
de°
.
addr
 = 
tm∑ddr
.addr;

164 
	`ICMPH_TYPE_SET
(
õcho
, 
ICMP_ER
);

166 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP_ECHO
 << 8))) {

167 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8) + 1;

169 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8);

173 
	`IPH_TTL_SET
(
ùhdr
, 
ICMP_TTL
);

174 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

175 #i‡
CHECKSUM_GEN_IP


176 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

179 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

181 
	`¢mp_öc_icmpoutmsgs
();

183 
	`¢mp_öc_icmpouãch‹ïs
();

185 if(
	`pbuf_hódî
(
p
, 
hÀn
)) {

186 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

188 
îr_t
 
ªt
;

189 
ªt
 = 
	`ù_ouçut_if
(
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

190 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
, 
öp
);

191 i‡(
ªt
 !
ERR_OK
) {

192 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ip_ouçut_i‡ªtu∫edá¿îr‹: %c.\n", 
ªt
));

197 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
" code %"S16_F"Çot supported.\n",

198 (
s16_t
)
ty≥
, (s16_t)
code
));

199 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

200 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

202 
	`pbuf_‰ì
(
p
);

204 
À√º
:

205 
	`pbuf_‰ì
(
p
);

206 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

207 
	`¢mp_öc_icmpöîr‹s
();

209 
memîr
:

210 
	`pbuf_‰ì
(
p
);

211 
	`ICMP_STATS_INC
(
icmp
.
îr
);

212 
	`¢mp_öc_icmpöîr‹s
();

214 
	}
}

226 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

228 
pbuf
 *
q
;

229 
ù_hdr
 *
ùhdr
;

230 
icmp_dur_hdr
 *
idur
;

233 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

234 
PBUF_RAM
);

235 i‡(
q
 =
NULL
) {

236 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

239 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

240 (
q
->
Àn
 >((
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

242 
ùhdr
 = 
p
->
∑ylﬂd
;

244 
idur
 = 
q
->
∑ylﬂd
;

245 
	`ICMPH_TYPE_SET
(
idur
, 
ICMP_DUR
);

246 
	`ICMPH_CODE_SET
(
idur
, 
t
);

248 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_dur_hdr
), 
p
->payload,

249 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

252 
idur
->
chksum
 = 0;

253 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

254 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

256 
	`¢mp_öc_icmpoutmsgs
();

258 
	`¢mp_öc_icmpoutde°uƒóchs
();

260 
	`ù_ouçut
(
q
, 
NULL
, &(
ùhdr
->
§c
), 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

261 
	`pbuf_‰ì
(
q
);

262 
	}
}

264 #i‡
IP_FORWARD
 || 
IP_REASSEMBLY


273 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

275 
pbuf
 *
q
;

276 
ù_hdr
 *
ùhdr
;

277 
icmp_ã_hdr
 *
ãhdr
;

280 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

281 
PBUF_RAM
);

282 i‡(
q
 =
NULL
) {

283 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded: failedÅoállocateÖbuf for ICMPÖacket.\n"));

286 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

287 (
q
->
Àn
 >((
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

289 
ùhdr
 = 
p
->
∑ylﬂd
;

290 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded from "));

291 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
§c
));

292 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("Åo "));

293 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
de°
));

294 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("\n"));

296 
ãhdr
 = 
q
->
∑ylﬂd
;

297 
	`ICMPH_TYPE_SET
(
ãhdr
, 
ICMP_TE
);

298 
	`ICMPH_CODE_SET
(
ãhdr
, 
t
);

301 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_dur_hdr
), (u8_à*)
p
->payload,

302 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

305 
ãhdr
->
chksum
 = 0;

306 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

307 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

309 
	`¢mp_öc_icmpoutmsgs
();

311 
	`¢mp_öc_icmpouâimìxcds
();

312 
	`ù_ouçut
(
q
, 
NULL
, &(
ùhdr
->
§c
), 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

313 
	`pbuf_‰ì
(
q
);

314 
	}
}

	@net/lwip/core/ipv4/igmp.c

81 
	~"lwù/›t.h
"

83 #i‡
LWIP_IGMP


85 
	~"lwù/igmp.h
"

86 
	~"lwù/debug.h
"

87 
	~"lwù/def.h
"

88 
	~"lwù/mem.h
"

89 
	~"lwù/ù.h
"

90 
	~"lwù/öë.h
"

91 
	~"lwù/öë_chksum.h
"

92 
	~"lwù/√tif.h
"

93 
	~"lwù/icmp.h
"

94 
	~"lwù/udp.h
"

95 
	~"lwù/t˝.h
"

96 
	~"lwù/°©s.h
"

98 
	~"°rög.h
"

104 
igmp_group
* 
	gigmp_group_li°
;

105 
ù_addr
 
	gÆlsy°ems
;

106 
ù_addr
 
	gÆÃouãrs
;

112 
	$igmp_öô
()

114 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_init: initializing\n"));

116 
	`IP4_ADDR
(&
Ælsy°ems
, 224, 0, 0, 1);

117 
	`IP4_ADDR
(&
ÆÃouãrs
, 224, 0, 0, 2);

118 
	}
}

120 #ifde‡
LWIP_DEBUG


125 
	$igmp_dump_group_li°
()

127 
igmp_group
 *
group
 = 
igmp_group_li°
;

129 
group
 !
NULL
) {

130 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_dump_group_li°: [%"
U32_F
"] ", (
u32_t
)(
group
->
group_°©e
)));

131 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

132 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
group
->
öãrÁ˚
));

133 
group
 = group->
√xt
;

135 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

136 
	}
}

138 
	#igmp_dump_group_li°
()

	)

146 
îr_t


147 
	$igmp_°¨t
(
√tif
 *netif)

149 
igmp_group
* 
group
;

151 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_°¨t: sèπög IGMPÖro˚ssög o¿i‡%x\n", (Ë
√tif
));

153 
group
 = 
	`igmp_lookup_group
(
√tif
, &
Ælsy°ems
);

155 i‡(
group
 !
NULL
) {

156 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

157 
group
->
u£
++;

160 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

161 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_start: igmp_mac_filter(ADD "));

162 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
Ælsy°ems
);

163 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

164 
√tif
->
	`igmp_mac_fûãr
–√tif, &
Ælsy°ems
, 
IGMP_ADD_MAC_FILTER
);

167  
ERR_OK
;

170  
ERR_MEM
;

171 
	}
}

178 
îr_t


179 
	$igmp_°›
(
√tif
 *netif)

181 
igmp_group
 *
group
 = 
igmp_group_li°
;

182 
igmp_group
 *
¥ev
 = 
NULL
;

183 
igmp_group
 *
√xt
;

186 
group
 !
NULL
) {

187 
√xt
 = 
group
->next;

189 i‡(
group
->
öãrÁ˚
 =
√tif
) {

191 i‡(
group
 =
igmp_group_li°
) {

192 
igmp_group_li°
 = 
√xt
;

195 i‡(
¥ev
 !
NULL
) {

196 
¥ev
->
√xt
 =Çext;

199 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

200 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_stop: igmp_mac_filter(DEL "));

201 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

202 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

203 
√tif
->
	`igmp_mac_fûãr
“ëif, &(
group
->
group_addªss
), 
IGMP_DEL_MAC_FILTER
);

206 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

209 
¥ev
 = 
group
;

212 
group
 = 
√xt
;

214  
ERR_OK
;

215 
	}
}

223 
	$igmp_ªp‹t_groups
–
√tif
 *netif)

225 
igmp_group
 *
group
 = 
igmp_group_li°
;

227 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ªp‹t_groups: sídög IGMPÑï‹t†⁄ i‡%x\n", (Ë
√tif
));

229 
group
 !
NULL
) {

230 i‡(
group
->
öãrÁ˚
 =
√tif
) {

231 
	`igmp_dñayög_membî
–
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

233 
group
 = group->
√xt
;

235 
	}
}

245 
igmp_group
 *

246 
	$igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

248 
igmp_group
 *
group
 = 
igmp_group_li°
;

250 
group
 !
NULL
) {

251 i‡((
group
->
öãrÁ˚
 =
iÂ
Ë&& (
	`ù_addr_cmp
(&(group->
group_addªss
), 
addr
))) {

252  
group
;

254 
group
 = group->
√xt
;

260  
NULL
;

261 
	}
}

271 
igmp_group
 *

272 
	$igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

274 
igmp_group
 *
group
 = 
igmp_group_li°
;

277 
group
 = 
	`igmp_lookf‹_group
(
iÂ
, 
addr
);

278 i‡(
group
 !
NULL
) {

280  
group
;

284 
group
 = 
	`memp_mÆloc
(
MEMP_IGMP_GROUP
);

285 i‡(
group
 !
NULL
) {

286 
group
->
öãrÁ˚
 = 
iÂ
;

287 
	`ù_addr_£t
(&(
group
->
group_addªss
), 
addr
);

288 
group
->
timî
 = 0;

289 
group
->
group_°©e
 = 
IGMP_GROUP_NON_MEMBER
;

290 
group
->
œ°_ªp‹ãr_Êag
 = 0;

291 
group
->
u£
 = 0;

292 
group
->
√xt
 = 
igmp_group_li°
;

294 
igmp_group_li°
 = 
group
;

297 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_lookup_group: %ßŒoˇãdáÇew grou∞wôháddªs†", (
group
?"":"impossibleÅo ")));

298 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
addr
);

299 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
iÂ
));

301  
group
;

302 
	}
}

310 
îr_t


311 
	$igmp_ªmove_group
(
igmp_group
 *
group
)

313 
îr_t
 
îr
 = 
ERR_OK
;

316 i‡(
igmp_group_li°
 =
group
) {

317 
igmp_group_li°
 = 
group
->
√xt
;

320 
igmp_group
 *
tmpGroup
;

321 
tmpGroup
 = 
igmp_group_li°
;ÅmpGrou∞!
NULL
;ÅmpGrou∞tmpGroup->
√xt
) {

322 i‡(
tmpGroup
->
√xt
 =
group
) {

323 
tmpGroup
->
√xt
 = 
group
->next;

328 i‡(
tmpGroup
 =
NULL
)

329 
îr
 = 
ERR_ARG
;

332 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

334  
îr
;

335 
	}
}

345 
	$igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
)

347 
ù_hdr
 * 
ùhdr
;

348 
igmp_msg
* 
igmp
;

349 
igmp_group
* 
group
;

350 
igmp_group
* 
grou¥ef
;

353 
ùhdr
 = 
p
->
∑ylﬂd
;

354 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4)Ë|| (p->
Àn
 < 
IGMP_MINLEN
)) {

355 
	`pbuf_‰ì
(
p
);

356 
	`IGMP_STATS_INC
(
igmp
.
À√º
);

357 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input:ÜengthÉrror\n"));

361 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: message from "));

362 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
§c
));

363 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Åoáddress "));

364 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
de°
));

365 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
öp
));

368 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

369 i‡(
	`öë_chksum
(
igmp
, 
p
->
Àn
)) {

370 
	`pbuf_‰ì
(
p
);

371 
	`IGMP_STATS_INC
(
igmp
.
chkîr
);

372 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: checksumÉrror\n"));

377 
group
 = 
	`igmp_lookf‹_group
(
öp
, 
de°
);

380 i‡(!
group
) {

381 
	`pbuf_‰ì
(
p
);

382 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP frameÇot for us\n"));

387 
igmp
->
igmp_msgty≥
) {

388 
IGMP_MEMB_QUERY
: {

390 i‡((
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)Ë&& (
igmp
->
igmp_group_addªss
.
addr
 == 0)) {

392 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: GíîÆ IGMP_MEMB_QUERY o¿\"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

394 i‡(
igmp
->
igmp_maxª•
 == 0) {

395 
	`IGMP_STATS_INC
(
igmp
.
v1_rxed
);

396 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: gotánáll hosts query withÅime== 0 -Åhis is V1ándÇot implemented -Åreatás v2\n"));

397 
igmp
->
igmp_maxª•
 = 
IGMP_V1_DELAYING_MEMBER_TMR
;

400 
	`IGMP_STATS_INC
(
igmp
.
group_quîy_rxed
);

401 
grou¥ef
 = 
igmp_group_li°
;

402 
grou¥ef
) {

404 i‡((
grou¥ef
->
öãrÁ˚
 =
öp
Ë&& (!(
	`ù_addr_cmp
(&(grou¥ef->
group_addªss
), &
Ælsy°ems
)))) {

405 
	`igmp_dñayög_membî
–
grou¥ef
, 
igmp
->
igmp_maxª•
);

407 
grou¥ef
 = grou¥ef->
√xt
;

411 i‡(
group
->
group_addªss
.
addr
 != 0) {

412 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_MEMB_QUERYÅoá specific group "));

413 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

414 i‡(
	`ù_addr_cmp
 (
de°
, &
Ælsy°ems
)) {

415 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" usög \"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

417 
group
 = 
	`igmp_lookf‹_group
(
öp
, &
igmp
->
igmp_group_addªss
);

419 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" wôhÅhêgrou∞addªs†a†de°ö©i⁄ [igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

422 i‡(
group
 !
NULL
) {

423 
	`IGMP_STATS_INC
(
igmp
.
uniˇ°_quîy
);

424 
	`igmp_dñayög_membî
–
group
, 
igmp
->
igmp_maxª•
);

430 
IGMP_V2_MEMB_REPORT
: {

431 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));

433 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_rxed
);

434 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

436 
group
->
timî
 = 0;

437 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

438 
group
->
œ°_ªp‹ãr_Êag
 = 0;

443 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: u√x≥˘ed msg %x i¿°©ê%x o¿grou∞%x o¿i‡%x\n", (Ë
igmp
->
igmp_msgty≥
, (Ë
group
->
group_°©e
, (Ë&group, (Ëgroup->
öãrÁ˚
));

448 
	`pbuf_‰ì
(
p
);

450 
	}
}

459 
îr_t


460 
	$igmp_joögroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

462 
îr_t
 
îr
 = 
ERR_VAL
;

463 
igmp_group
 *
group
;

464 
√tif
 *netif;

467 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöÇ⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

468 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöáŒsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

471 
√tif
 = 
√tif_li°
;

472 
√tif
 !
NULL
) {

474 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

476 
group
 = 
	`igmp_lookup_group
(
√tif
, 
grou∑ddr
);

478 i‡(
group
 !
NULL
) {

480 i‡(
group
->
group_°©e
 !
IGMP_GROUP_NON_MEMBER
) {

481 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅo groupÇot in state IGMP_GROUP_NON_MEMBER\n"));

484 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅoÇew group: "));

485 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

486 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

489 i‡((
group
->
u£
==0Ë&& (
√tif
->
igmp_mac_fûãr
 !
NULL
)) {

490 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: igmp_mac_filter(ADD "));

491 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

492 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

493 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_ADD_MAC_FILTER
);

496 
	`IGMP_STATS_INC
(
igmp
.
joö_£¡
);

497 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

499 
	`igmp_°¨t_timî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

502 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

505 
group
->
u£
++;

507 
îr
 = 
ERR_OK
;

511 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: NotÉnought memoryÅo joinÅo group\n"));

512  
ERR_MEM
;

516 
√tif
 =Çëif->
√xt
;

519  
îr
;

520 
	}
}

529 
îr_t


530 
	$igmp_Àavegroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

532 
îr_t
 
îr
 = 
ERR_VAL
;

533 
igmp_group
 *
group
;

534 
√tif
 *netif;

537 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavên⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

538 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavêÆlsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

541 
√tif
 = 
√tif_li°
;

542 
√tif
 !
NULL
) {

544 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

546 
group
 = 
	`igmp_lookf‹_group
(
√tif
, 
grou∑ddr
);

548 i‡(
group
 !
NULL
) {

550 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: Leaving group: "));

551 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

552 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

555 i‡(
group
->
u£
 <= 1) {

557 i‡(
group
->
œ°_ªp‹ãr_Êag
) {

558 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: sendingÜeaving group\n"));

559 
	`IGMP_STATS_INC
(
igmp
.
Àave_£¡
);

560 
	`igmp_£nd
(
group
, 
IGMP_LEAVE_GROUP
);

564 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

565 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: igmp_mac_filter(DEL "));

566 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

567 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

568 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_DEL_MAC_FILTER
);

571 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Ñemove group: "));

572 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

573 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

576 
	`igmp_ªmove_group
(
group
);

579 
group
->
u£
--;

582 
îr
 = 
ERR_OK
;

585 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Çot member of group\n"));

589 
√tif
 =Çëif->
√xt
;

592  
îr
;

593 
	}
}

600 
	$igmp_tmr
()

602 
igmp_group
 *
group
 = 
igmp_group_li°
;

604 
group
 !
NULL
) {

605 i‡(
group
->
timî
 != 0) {

606 
group
->
timî
 -= 1;

607 i‡(
group
->
timî
 == 0) {

608 
	`igmp_timeout
(
group
);

611 
group
 = group->
√xt
;

613 
	}
}

622 
	$igmp_timeout
(
igmp_group
 *
group
)

625 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

626 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_timeout:Ñeport membership for group witháddress "));

627 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
group
->
group_addªss
));

628 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
group
->
öãrÁ˚
));

630 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

632 
	}
}

642 
	$igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
)

647 
group
->
timî
 = 
max_time
;

648 
	}
}

656 
	$igmp_°›_timî
(
igmp_group
 *
group
)

658 
group
->
timî
 = 0;

659 
	}
}

668 
	$igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
)

670 i‡((
group
->
group_°©e
 =
IGMP_GROUP_IDLE_MEMBER
Ë|| ((group->group_°©ê=
IGMP_GROUP_DELAYING_MEMBER
Ë&& (
maxª•
 > group->
timî
))) {

671 
	`igmp_°¨t_timî
(
group
, (
maxª•
)/2);

672 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

674 
	}
}

695 
îr_t


696 
	$igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

697 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif)

699 
u16_t
 
ù_id
 = 0;

700 
ù_hdr
 * 
ùhdr
 = 
NULL
;

701 
u16_t
 * 
ø
 = 
NULL
;

704 i‡(
	`pbuf_hódî
(
p
, 
ROUTER_ALERTLEN
)) {

705 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ip_output_if:ÇotÉnoughÑoom for IP header inÖbuf\n"));

706  
ERR_BUF
;

710 
ø
 = 
p
->
∑ylﬂd
;

711 
ø
[0] = 
	`ht⁄s
 (
ROUTER_ALERT
);

712 
ø
[1] = 0x0000;

715 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

716 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ip_output_if:ÇotÉnoughÑoom for IP header inÖbuf\n"));

717  
ERR_BUF
;

720 
ùhdr
 = 
p
->
∑ylﬂd
;

723 i‡(
de°
 !
IP_HDRINCL
) {

725 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

726 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

728 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

730 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, ((
IP_HLEN
 + 
ROUTER_ALERTLEN
) / 4), 0 );

731 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

732 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

733 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

734 ++
ù_id
;

736 i‡(
	`ù_addr_ißny
(
§c
)) {

737 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

739 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

742 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

743 #i‡
CHECKSUM_GEN_IP


744 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, (
IP_HLEN
 + 
ROUTER_ALERTLEN
)));

747 
de°
 = &(
ùhdr
->dest);

750 #i‡
IP_DEBUG


751 
	`ù_debug_¥öt
(
p
);

754 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ù_ouçut_if: sídögÅÿi‡%x\n", (Ë
√tif
));

756  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

757 
	}
}

766 
	$igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
)

768 
pbuf
* 
p
 = 
NULL
;

769 
igmp_msg
* 
igmp
 = 
NULL
;

770 
ù_addr
 
§c
 = {0};

771 
ù_addr
* 
de°
 = 
NULL
;

774 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
IGMP_MINLEN
, 
PBUF_RAM
);

776 i‡(
p
) {

777 
igmp
 = 
p
->
∑ylﬂd
;

778 
	`LWIP_ASSERT
("igmp_send: checkÅhat firstÖbuf can hold struct igmp_msg",

779 (
p
->
Àn
 >(
igmp_msg
)));

780 
	`ù_addr_£t
(&
§c
, &((
group
->
öãrÁ˚
)->
ù_addr
));

782 i‡(
ty≥
 =
IGMP_V2_MEMB_REPORT
) {

783 
de°
 = &(
group
->
group_addªss
);

784 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_£¡
);

785 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

786 
group
->
œ°_ªp‹ãr_Êag
 = 1;

788 i‡(
ty≥
 =
IGMP_LEAVE_GROUP
) {

789 
de°
 = &
ÆÃouãrs
;

790 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

794 i‡((
ty≥
 =
IGMP_V2_MEMB_REPORT
Ë|| (ty≥ =
IGMP_LEAVE_GROUP
)) {

795 
igmp
->
igmp_msgty≥
 = 
ty≥
;

796 
igmp
->
igmp_maxª•
 = 0;

797 
igmp
->
igmp_checksum
 = 0;

798 
igmp
->
igmp_checksum
 = 
	`öë_chksum
–igmp, 
IGMP_MINLEN
);

800 
	`igmp_ù_ouçut_if
–
p
, &
§c
, 
de°
, 
IGMP_TTL
, 
IP_PROTO_IGMP
, 
group
->
öãrÁ˚
);

803 
	`pbuf_‰ì
 (
p
);

805 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_send:ÇotÉnough memory for igmp_send\n"));

807 
	}
}

	@net/lwip/core/ipv4/inet.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/öë.h
"

45 #i‚de‡
i•röt


46 
	#ö_ønge
(
c
, 
lo
, 
up
Ë((
u8_t
)¯>lÿ&& (u8_t)¯<up)

	)

47 
	#i•röt
(
c
Ë
	`ö_ønge
(c, 0x20, 0x7f)

	)

48 
	#isdigô
(
c
Ë
	`ö_ønge
(c, '0', '9')

	)

49 
	#isxdigô
(
c
Ë(
	`isdigô
(cË|| 
	`ö_ønge
(c, 'a', 'f'Ë|| in_ønge(c, 'A', 'F'))

	)

50 
	#i¶owî
(
c
Ë
	`ö_ønge
(c, 'a', 'z')

	)

51 
	#is•a˚
(
c
Ë(¯=' ' || c ='\f' || c ='\n' || c ='\r' || c ='\t' || c ='\v')

	)

61 
u32_t


62 
	$öë_addr
(c⁄° *
˝
)

64 
ö_addr
 
vÆ
;

66 i‡(
	`öë_©⁄
(
˝
, &
vÆ
)) {

67  (
vÆ
.
s_addr
);

69  (
INADDR_NONE
);

70 
	}
}

84 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
)

86 
u32_t
 
vÆ
;

87 
ba£
, 
n
, 
c
;

88 
u32_t
 
∑πs
[4];

89 
u32_t
 *
µ
 = 
∑πs
;

91 
c
 = *
˝
;

98 i‡(!
	`isdigô
(
c
))

100 
vÆ
 = 0;

101 
ba£
 = 10;

102 i‡(
c
 == '0') {

103 
c
 = *++
˝
;

104 i‡(
c
 == 'x' || c == 'X') {

105 
ba£
 = 16;

106 
c
 = *++
˝
;

108 
ba£
 = 8;

111 i‡(
	`isdigô
(
c
)) {

112 
vÆ
 = (vÆ * 
ba£
Ë+ ()(
c
 - '0');

113 
c
 = *++
˝
;

114 } i‡(
ba£
 =16 && 
	`isxdigô
(
c
)) {

115 
vÆ
 = (vÆ << 4Ë| ()(
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

116 
c
 = *++
˝
;

120 i‡(
c
 == '.') {

127 i‡(
µ
 >
∑πs
 + 3)

129 *
µ
++ = 
vÆ
;

130 
c
 = *++
˝
;

137 i‡(
c
 !'\0' && (!
	`i•röt
(cË|| !
	`is•a˚
(c)))

143 
n
 = 
µ
 - 
∑πs
 + 1;

144 
n
) {

153 i‡(
vÆ
 > 0xffffffUL)

155 
vÆ
 |
∑πs
[0] << 24;

159 i‡(
vÆ
 > 0xffff)

161 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

165 i‡(
vÆ
 > 0xff)

167 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

170 i‡(
addr
)

171 
addr
->
s_addr
 = 
	`ht⁄l
(
vÆ
);

173 
	}
}

184 
	$öë_¡ﬂ
(
ö_addr
 
addr
)

186 
°r
[16];

187 
u32_t
 
s_addr
 = 
addr
.s_addr;

188 
öv
[3];

189 *
Ω
;

190 
u8_t
 *
≠
;

191 
u8_t
 
ªm
;

192 
u8_t
 
n
;

193 
u8_t
 
i
;

195 
Ω
 = 
°r
;

196 
≠
 = (
u8_t
 *)&
s_addr
;

197 
n
 = 0;Ç < 4;Ç++) {

198 
i
 = 0;

200 
ªm
 = *
≠
 % (
u8_t
)10;

201 *
≠
 /(
u8_t
)10;

202 
öv
[
i
++] = '0' + 
ªm
;

203 } *
≠
);

204 
i
--)

205 *
Ω
++ = 
öv
[
i
];

206 *
Ω
++ = '.';

207 
≠
++;

209 *--
Ω
 = 0;

210  
°r
;

211 
	}
}

226 #i‡(
LWIP_PLATFORM_BYTESWAP
 =0Ë&& (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

234 
u16_t


235 
	$ht⁄s
(
u16_t
 
n
)

237  ((
n
 & 0xff) << 8) | ((n & 0xff00) >> 8);

238 
	}
}

246 
u16_t


247 
	$¡ohs
(
u16_t
 
n
)

249  
	`ht⁄s
(
n
);

250 
	}
}

258 
u32_t


259 
	$ht⁄l
(
u32_t
 
n
)

261  ((
n
 & 0xff) << 24) |

262 ((
n
 & 0xff00) << 8) |

263 ((
n
 & 0xff0000UL) >> 8) |

264 ((
n
 & 0xff000000UL) >> 24);

265 
	}
}

273 
u32_t


274 
	$¡ohl
(
u32_t
 
n
)

276  
	`ht⁄l
(
n
);

277 
	}
}

	@net/lwip/core/ipv4/inet_chksum.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/öë_chksum.h
"

43 
	~"lwù/öë.h
"

56 #i‚de‡
LWIP_CHKSUM


57 
	#LWIP_CHKSUM
 
lwù_°™d¨d_chksum


	)

58 #i‚de‡
LWIP_CHKSUM_ALGORITHM


59 
	#LWIP_CHKSUM_ALGORITHM
 1

	)

63 #i‚de‡
LWIP_CHKSUM_ALGORITHM


64 
	#LWIP_CHKSUM_ALGORITHM
 0

	)

68 
	#SWAP_BYTES_IN_WORD
(
w
Ë((w & 0xffË<< 8Ë| ((w & 0xff00Ë>> 8)

	)

70 
	#FOLD_U32T
(
u
Ë((u >> 16Ë+ (u & 0x0000ffffUL))

	)

72 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 1)

83 
u16_t


84 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

86 
u32_t
 
acc
;

87 
u16_t
 
§c
;

88 
u8_t
 *
o˘ë±r
;

90 
acc
 = 0;

92 
o˘ë±r
 = (
u8_t
*)
d©≠å
;

93 
Àn
 > 1) {

96 
§c
 = (*
o˘ë±r
) << 8;

97 
o˘ë±r
++;

99 
§c
 |(*
o˘ë±r
);

100 
o˘ë±r
++;

101 
acc
 +
§c
;

102 
Àn
 -= 2;

104 i‡(
Àn
 > 0) {

106 
§c
 = (*
o˘ë±r
) << 8;

107 
acc
 +
§c
;

110 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

111 i‡((
acc
 & 0xffff0000) != 0) {

112 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

117  
	`ht⁄s
((
u16_t
)
acc
);

118 
	}
}

121 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 2)

137 
u16_t


138 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

140 
u8_t
 *
pb
 = 
d©≠å
;

141 
u16_t
 *
ps
, 
t
 = 0;

142 
u32_t
 
sum
 = 0;

143 
odd
 = ((
u32_t
)
pb
 & 1);

146 i‡(
odd
 && 
Àn
 > 0) {

147 ((
u8_t
 *)&
t
)[1] = *
pb
++;

148 
Àn
--;

152 
ps
 = (
u16_t
 *)
pb
;

153 
Àn
 > 1) {

154 
sum
 +*
ps
++;

155 
Àn
 -= 2;

159 i‡(
Àn
 > 0) {

160 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;;

164 
sum
 +
t
;

168 
sum
 = 
	`FOLD_U32T
(sum);

169 
sum
 = 
	`FOLD_U32T
(sum);

172 i‡(
odd
) {

173 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

176  
sum
;

177 
	}
}

180 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 3)

193 
u16_t


194 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

196 
u8_t
 *
pb
 = 
d©≠å
;

197 
u16_t
 *
ps
, 
t
 = 0;

198 
u32_t
 *
∂
;

199 
u32_t
 
sum
 = 0, 
tmp
;

201 
odd
 = ((
u32_t
)
pb
 & 1);

203 i‡(
odd
 && 
Àn
 > 0) {

204 ((
u8_t
 *)&
t
)[1] = *
pb
++;

205 
Àn
--;

208 
ps
 = (
u16_t
 *)
pb
;

210 i‡(((
u32_t
)
ps
 & 3Ë&& 
Àn
 > 1) {

211 
sum
 +*
ps
++;

212 
Àn
 -= 2;

215 
∂
 = (
u32_t
 *)
ps
;

217 
Àn
 > 7) {

218 
tmp
 = 
sum
 + *
∂
++;

219 i‡(
tmp
 < 
sum
) {

220 
tmp
++;

223 
sum
 = 
tmp
 + *
∂
++;

224 i‡(
sum
 < 
tmp
) {

225 
sum
++;

228 
Àn
 -= 8;

232 
sum
 = 
	`FOLD_U32T
(sum);

234 
ps
 = (
u16_t
 *)
∂
;

237 
Àn
 > 1) {

238 
sum
 +*
ps
++;

239 
Àn
 -= 2;

243 i‡(
Àn
 > 0) {

244 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

247 
sum
 +
t
;

251 
sum
 = 
	`FOLD_U32T
(sum);

252 
sum
 = 
	`FOLD_U32T
(sum);

254 i‡(
odd
) {

255 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

258  
sum
;

259 
	}
}

274 
u16_t


275 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

276 
ù_addr
 *
§c
, ù_add∏*
de°
,

277 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
)

279 
u32_t
 
acc
;

280 
pbuf
 *
q
;

281 
u8_t
 
sw≠≥d
;

283 
acc
 = 0;

284 
sw≠≥d
 = 0;

286 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

287 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

288 (*)
q
, (*)q->
√xt
));

289 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

293 
acc
 = 
	`FOLD_U32T
(acc);

294 i‡(
q
->
Àn
 % 2 != 0) {

295 
sw≠≥d
 = 1 - swapped;

296 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

301 i‡(
sw≠≥d
) {

302 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

304 
acc
 +(
§c
->
addr
 & 0xffffUL);

305 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

306 
acc
 +(
de°
->
addr
 & 0xffffUL);

307 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

308 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

309 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

313 
acc
 = 
	`FOLD_U32T
(acc);

314 
acc
 = 
	`FOLD_U32T
(acc);

315 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

316  (
u16_t
)~(
acc
 & 0xffffUL);

317 
	}
}

331 
u16_t


332 
	$öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

333 
ù_addr
 *
§c
, ù_add∏*
de°
,

334 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
)

336 
u32_t
 
acc
;

337 
pbuf
 *
q
;

338 
u8_t
 
sw≠≥d
;

339 
u16_t
 
chkÀn
;

341 
acc
 = 0;

342 
sw≠≥d
 = 0;

344 
q
 = 
p
; (q !
NULL
Ë&& (
chksum_Àn
 > 0); q = q->
√xt
) {

345 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

346 (*)
q
, (*)q->
√xt
));

347 
chkÀn
 = 
q
->
Àn
;

348 i‡(
chkÀn
 > 
chksum_Àn
) {

349 
chkÀn
 = 
chksum_Àn
;

351 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, 
chkÀn
);

352 
chksum_Àn
 -
chkÀn
;

353 
	`LWIP_ASSERT
("dñëême", 
chksum_Àn
 < 0x7fff);

356 
acc
 = 
	`FOLD_U32T
(acc);

357 i‡(
q
->
Àn
 % 2 != 0) {

358 
sw≠≥d
 = 1 - swapped;

359 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

364 i‡(
sw≠≥d
) {

365 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

367 
acc
 +(
§c
->
addr
 & 0xffffUL);

368 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

369 
acc
 +(
de°
->
addr
 & 0xffffUL);

370 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

371 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

372 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

376 
acc
 = 
	`FOLD_U32T
(acc);

377 
acc
 = 
	`FOLD_U32T
(acc);

378 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

379  (
u16_t
)~(
acc
 & 0xffffUL);

380 
	}
}

392 
u16_t


393 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

395  ~
	`LWIP_CHKSUM
(
d©≠å
, 
Àn
);

396 
	}
}

405 
u16_t


406 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

408 
u32_t
 
acc
;

409 
pbuf
 *
q
;

410 
u8_t
 
sw≠≥d
;

412 
acc
 = 0;

413 
sw≠≥d
 = 0;

414 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

415 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

416 
acc
 = 
	`FOLD_U32T
(acc);

417 i‡(
q
->
Àn
 % 2 != 0) {

418 
sw≠≥d
 = 1 - swapped;

419 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

423 i‡(
sw≠≥d
) {

424 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

426  (
u16_t
)~(
acc
 & 0xffffUL);

427 
	}
}

	@net/lwip/core/ipv4/ip.c

42 
	~"lwù/›t.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/ù_‰ag.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/öë_chksum.h
"

49 
	~"lwù/√tif.h
"

50 
	~"lwù/icmp.h
"

51 
	~"lwù/igmp.h
"

52 
	~"lwù/øw.h
"

53 
	~"lwù/udp.h
"

54 
	~"lwù/t˝.h
"

55 
	~"lwù/¢mp.h
"

56 
	~"lwù/dh˝.h
"

57 
	~"lwù/°©s.h
"

58 
	~"¨ch/≥rf.h
"

69 
√tif
 *

70 
	$ù_rouã
(
ù_addr
 *
de°
)

72 
√tif
 *netif;

75 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

77 i‡(
	`√tif_is_up
(
√tif
)) {

78 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

80  
√tif
;

84 i‡((
√tif_deÁu…
 =
NULL
Ë|| (!
	`√tif_is_up
(netif_default))) {

85 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ù_rouã: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

86 
	`IP_STATS_INC
(
ù
.
πîr
);

87 
	`¢mp_öc_ùouä‹ouãs
();

88  
NULL
;

91  
√tif_deÁu…
;

92 
	}
}

94 #i‡
IP_FORWARD


105 
√tif
 *

106 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
, 
√tif
 *
öp
)

108 
√tif
 *netif;

110 
PERF_START
;

112 
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
));

113 i‡(
√tif
 =
NULL
) {

114 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:Çÿf‹w¨dögÑouã f‹ 0x%"
X32_F
" found\n",

115 
ùhdr
->
de°
.
addr
));

116 
	`¢mp_öc_ùouä‹ouãs
();

117  (
√tif
 *)
NULL
;

121 i‡(
√tif
 =
öp
) {

122 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward:Çot bouncingÖackets back on incoming interface.\n"));

123 
	`¢mp_öc_ùouä‹ouãs
();

124  (
√tif
 *)
NULL
;

128 
	`IPH_TTL_SET
(
ùhdr
, 
	`IPH_TTL
(iphdr) - 1);

130 i‡(
	`IPH_TTL
(
ùhdr
) == 0) {

131 
	`¢mp_öc_ùöhdªº‹s
();

132 #i‡
LWIP_ICMP


134 i‡(
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_ICMP
) {

135 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

138  (
√tif
 *)
NULL
;

142 i‡(
	`IPH_CHKSUM
(
ùhdr
Ë>
	`ht⁄s
(0xffff - 0x100)) {

143 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100) + 1);

145 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100));

148 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d: f‹w¨dögÖackëÅÿ0x%"
X32_F
"\n",

149 
ùhdr
->
de°
.
addr
));

151 
	`IP_STATS_INC
(
ù
.
fw
);

152 
	`IP_STATS_INC
(
ù
.
xmô
);

153 
	`¢mp_öc_ùf‹wd©agøms
();

155 
	`PERF_STOP
("ip_forward");

157 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

158  
√tif
;

159 
	}
}

176 
îr_t


177 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

179 
ù_hdr
 *
ùhdr
;

180 
√tif
 *netif;

181 
u16_t
 
ùhdr_hÀn
;

182 
u16_t
 
ùhdr_Àn
;

183 #i‡
LWIP_DHCP


184 
check_ù_§c
=1;

187 
	`IP_STATS_INC
(
ù
.
ªcv
);

188 
	`¢mp_öc_ùöª˚ives
();

191 
ùhdr
 = 
p
->
∑ylﬂd
;

192 i‡(
	`IPH_V
(
ùhdr
) != 4) {

193 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 1, ("IPÖackë dr›≥d duêtÿbad vîsi⁄Çumbî %"
U16_F
"\n", 
	`IPH_V
(
ùhdr
)));

194 
	`ù_debug_¥öt
(
p
);

195 
	`pbuf_‰ì
(
p
);

196 
	`IP_STATS_INC
(
ù
.
îr
);

197 
	`IP_STATS_INC
(
ù
.
dr›
);

198 
	`¢mp_öc_ùöhdªº‹s
();

199  
ERR_OK
;

203 
ùhdr_hÀn
 = 
	`IPH_HL
(
ùhdr
);

205 
ùhdr_hÀn
 *= 4;

207 
ùhdr_Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
));

210 i‡((
ùhdr_hÀn
 > 
p
->
Àn
Ë|| (
ùhdr_Àn
 >Ö->
tŸ_Àn
)) {

211 i‡(
ùhdr_hÀn
 > 
p
->
Àn
)

212 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP hódî (À¿%"
U16_F
") doesÇot fit in firstÖbuf (len %"U16_F"), IPÖacket dropped.\n",

213 
ùhdr_hÀn
, 
p
->
Àn
));

214 i‡(
ùhdr_Àn
 > 
p
->
tŸ_Àn
)

215 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP (À¿%"
U16_F
") isÜongerÅhanÖbuf (len %"U16_F"), "

217 
ùhdr_Àn
, 
p
->
tŸ_Àn
));

219 
	`pbuf_‰ì
(
p
);

220 
	`IP_STATS_INC
(
ù
.
À√º
);

221 
	`IP_STATS_INC
(
ù
.
dr›
);

222 
	`¢mp_öc_ùödisˇrds
();

223  
ERR_OK
;

227 #i‡
CHECKSUM_CHECK_IP


228 i‡(
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
) != 0) {

230 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Checksum (0x%"
X16_F
"ËÁûed, IPÖackë dr›≥d.\n", 
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
)));

231 
	`ù_debug_¥öt
(
p
);

232 
	`pbuf_‰ì
(
p
);

233 
	`IP_STATS_INC
(
ù
.
chkîr
);

234 
	`IP_STATS_INC
(
ù
.
dr›
);

235 
	`¢mp_öc_ùöhdªº‹s
();

236  
ERR_OK
;

242 
	`pbuf_ªÆloc
(
p
, 
ùhdr_Àn
);

245 #i‡
LWIP_IGMP


246 i‡(
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

247 i‡((
öp
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& (
	`igmp_lookf‹_group
(öp, &(
ùhdr
->
de°
)))) {

248 
√tif
 = 
öp
;

250 
√tif
 = 
NULL
;

258 
fú°
 = 1;

259 
√tif
 = 
öp
;

261 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput: iphdr->de° 0x%"
X32_F
"Çetif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",

262 
ùhdr
->
de°
.
addr
, 
√tif
->
ù_addr
.addr,

263 
ùhdr
->
de°
.
addr
 & 
√tif
->
√tmask
.addr,

264 
√tif
->
ù_addr
.
addr
 &Çëif->
√tmask
.addr,

265 
ùhdr
->
de°
.
addr
 & ~(
√tif
->
√tmask
.addr)));

268 i‡((
	`√tif_is_up
(
√tif
)Ë&& (!
	`ù_addr_ißny
(&“ëif->
ù_addr
)))) {

270 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
)) ||

272 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
√tif
)) {

273 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Öacketáccepted on interface %c%c\n",

274 
√tif
->
«me
[0],Çetif->name[1]));

279 i‡(
fú°
) {

280 
fú°
 = 0;

281 
√tif
 = 
√tif_li°
;

283 
√tif
 =Çëif->
√xt
;

285 i‡(
√tif
 =
öp
) {

286 
√tif
 =Çëif->
√xt
;

288 } 
√tif
 !
NULL
);

291 #i‡
LWIP_DHCP


296 i‡(
√tif
 =
NULL
) {

298 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDP
) {

299 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ù_öput: UDPÖackëÅÿDHCP clõ¡Ö‹à%"
U16_F
"\n",

300 
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
)));

301 i‡(
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
Ë=
DHCP_CLIENT_PORT
) {

302 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input: DHCPÖacketáccepted.\n"));

303 
√tif
 = 
öp
;

304 
check_ù_§c
 = 0;

311 #i‡
LWIP_DHCP


312 i‡(
check_ù_§c
)

314 { i‡((
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
§c
), 
öp
)) ||

315 (
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
§c
)))) {

317 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:Öacket source isÇot valid.\n"));

319 
	`pbuf_‰ì
(
p
);

320 
	`IP_STATS_INC
(
ù
.
dr›
);

321 
	`¢mp_öc_ùöaddªº‹s
();

322 
	`¢mp_öc_ùödisˇrds
();

323  
ERR_OK
;

328 i‡(
√tif
 =
NULL
) {

330 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:ÖacketÇot for us.\n"));

331 #i‡
IP_FORWARD


333 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
)) {

335 
	`ù_f‹w¨d
(
p
, 
ùhdr
, 
öp
);

339 
	`¢mp_öc_ùöaddªº‹s
();

340 
	`¢mp_öc_ùödisˇrds
();

342 
	`pbuf_‰ì
(
p
);

343  
ERR_OK
;

346 i‡((
	`IPH_OFFSET
(
ùhdr
Ë& 
	`ht⁄s
(
IP_OFFMASK
 | 
IP_MF
)) != 0) {

347 #i‡
IP_REASSEMBLY


348 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖackë i†®‰agmíà(id=0x%04"
X16_F
"ÅŸ_Àn=%"
U16_F
"Üen=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",

349 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)), 
p
->
tŸ_Àn
,Çtohs(
	`IPH_LEN
(ùhdr)), !!(
	`IPH_OFFSET
(ùhdrË& 
	`ht⁄s
(
IP_MF
)), (¡ohs(IPH_OFFSET(ùhdr)Ë& 
IP_OFFMASK
)*8));

351 
p
 = 
	`ù_ªass
(p);

353 i‡(
p
 =
NULL
) {

354  
ERR_OK
;

356 
ùhdr
 = 
p
->
∑ylﬂd
;

358 
	`pbuf_‰ì
(
p
);

359 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖackë dr›≥d sö˚ iàwa†‰agmíãd (0x%"
X16_F
") (while IP_REASSEMBLY == 0).\n",

360 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
))));

361 
	`IP_STATS_INC
(
ù
.
›ãº
);

362 
	`IP_STATS_INC
(
ù
.
dr›
);

364 
	`¢mp_öc_ùöunknow≈rŸos
();

365  
ERR_OK
;

369 #i‡
IP_OPTIONS_ALLOWED
 == 0

371 #i‡
LWIP_IGMP


373 if((
ùhdr_hÀn
 > 
IP_HLEN
 && (
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_IGMP
)) {

375 i‡(
ùhdr_hÀn
 > 
IP_HLEN
) {

377 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖacket dropped sinceÅhere were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));

378 
	`pbuf_‰ì
(
p
);

379 
	`IP_STATS_INC
(
ù
.
›ãº
);

380 
	`IP_STATS_INC
(
ù
.
dr›
);

382 
	`¢mp_öc_ùöunknow≈rŸos
();

383  
ERR_OK
;

388 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: \n"));

389 
	`ù_debug_¥öt
(
p
);

390 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput:Ö->À¿%"
U16_F
"Ö->tŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

392 #i‡
LWIP_RAW


394 i‡(
	`øw_öput
(
p
, 
öp
) == 0)

398 
	`IPH_PROTO
(
ùhdr
)) {

399 #i‡
LWIP_UDP


400 
IP_PROTO_UDP
:

401 #i‡
LWIP_UDPLITE


402 
IP_PROTO_UDPLITE
:

404 
	`¢mp_öc_ùödñivîs
();

405 
	`udp_öput
(
p
, 
öp
);

408 #i‡
LWIP_TCP


409 
IP_PROTO_TCP
:

410 
	`¢mp_öc_ùödñivîs
();

411 
	`t˝_öput
(
p
, 
öp
);

414 #i‡
LWIP_ICMP


415 
IP_PROTO_ICMP
:

416 
	`¢mp_öc_ùödñivîs
();

417 
	`icmp_öput
(
p
, 
öp
);

420 #i‡
LWIP_IGMP


421 
IP_PROTO_IGMP
:

422 
	`igmp_öput
(
p
,
öp
,&(
ùhdr
->
de°
));

426 #i‡
LWIP_ICMP


428 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) &&

429 !
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

430 
p
->
∑ylﬂd
 = 
ùhdr
;

431 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

434 
	`pbuf_‰ì
(
p
);

436 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n", 
	`IPH_PROTO
(
ùhdr
)));

438 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

439 
	`IP_STATS_INC
(
ù
.
dr›
);

440 
	`¢mp_öc_ùöunknow≈rŸos
();

444  
ERR_OK
;

445 
	}
}

472 
îr_t


473 
	$ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

474 
u8_t
 
âl
, u8_à
tos
,

475 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

477 
ù_hdr
 *
ùhdr
;

478 
u16_t
 
ù_id
 = 0;

480 
	`¢mp_öc_ùouåeque°s
();

483 i‡(
de°
 !
IP_HDRINCL
) {

485 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

486 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

488 
	`IP_STATS_INC
(
ù
.
îr
);

489 
	`¢mp_öc_ùoutdisˇrds
();

490  
ERR_BUF
;

493 
ùhdr
 = 
p
->
∑ylﬂd
;

494 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct ip_hdr",

495 (
p
->
Àn
 >(
ù_hdr
)));

497 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

498 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

500 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

502 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
IP_HLEN
 / 4, 
tos
);

503 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

504 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

505 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

506 ++
ù_id
;

508 i‡(
	`ù_addr_ißny
(
§c
)) {

509 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

511 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

514 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

515 #i‡
CHECKSUM_GEN_IP


516 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

520 
ùhdr
 = 
p
->
∑ylﬂd
;

521 
de°
 = &(
ùhdr
->dest);

524 #i‡
IP_FRAG


526 i‡(
√tif
->
mtu
 && (
p
->
tŸ_Àn
 >Çetif->mtu))

527  
	`ù_‰ag
(
p
,
√tif
,
de°
);

530 
	`IP_STATS_INC
(
ù
.
xmô
);

532 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%c%"
U16_F
"\n", 
√tif
->
«me
[0],Çëif->«me[1],Çëif->
num
));

533 
	`ù_debug_¥öt
(
p
);

535 #i‡(
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

536 i‡(
	`ù_addr_cmp
(
de°
, &
√tif
->
ù_addr
)) {

538 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif_loop_output()"));

540  
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

544 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->output()"));

546  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

548 
	}
}

567 
îr_t


568 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

569 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
)

571 
√tif
 *netif;

573 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

574  
ERR_RTE
;

577  
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

578 
	}
}

580 #i‡
IP_DEBUG


585 
	$ù_debug_¥öt
(
pbuf
 *
p
)

587 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

588 
u8_t
 *
∑ylﬂd
;

590 
∑ylﬂd
 = (
u8_t
 *)
ùhdr
 + 
IP_HLEN
;

592 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

593 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

594 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" |%2"S16_F" | 0x%02"
X16_F
" | %5"
U16_F
" | (v, hl,Åos,Üen)\n",

595 
	`IPH_V
(
ùhdr
),

596 
	`IPH_HL
(
ùhdr
),

597 
	`IPH_TOS
(
ùhdr
),

598 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
))));

599 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

600 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" |%"U16_F"%"U16_F"%"U16_F"| %4"U16_F" | (id, flags, offset)\n",

601 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)),

602 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 15 & 1,

603 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 14 & 1,

604 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 13 & 1,

605 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)Ë& 
IP_OFFMASK
));

606 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

607 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | 0x%04"
X16_F
" | (ttl,Öroto, chksum)\n",

608 
	`IPH_TTL
(
ùhdr
),

609 
	`IPH_PROTO
(
ùhdr
),

610 
	`¡ohs
(
	`IPH_CHKSUM
(
ùhdr
))));

611 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

612 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (src)\n",

613 
	`ù4_addr1
(&
ùhdr
->
§c
),

614 
	`ù4_addr2
(&
ùhdr
->
§c
),

615 
	`ù4_addr3
(&
ùhdr
->
§c
),

616 
	`ù4_addr4
(&
ùhdr
->
§c
)));

617 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

618 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (dest)\n",

619 
	`ù4_addr1
(&
ùhdr
->
de°
),

620 
	`ù4_addr2
(&
ùhdr
->
de°
),

621 
	`ù4_addr3
(&
ùhdr
->
de°
),

622 
	`ù4_addr4
(&
ùhdr
->
de°
)));

623 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

624 
	}
}

	@net/lwip/core/ipv4/ip_addr.c

40 
	~"lwù/›t.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/öë.h
"

43 
	~"lwù/√tif.h
"

45 
	#IP_ADDR_ANY_VALUE
 0x00000000UL

	)

46 
	#IP_ADDR_BROADCAST_VALUE
 0xffffffffUL

	)

49 c⁄° 
ù_addr
 
	gù_addr_™y
 = { 
IP_ADDR_ANY_VALUE
 };

50 c⁄° 
ù_addr
 
	gù_addr_brﬂdˇ°
 = { 
IP_ADDR_BROADCAST_VALUE
 };

59 
u8_t
 
	$ù_addr_isbrﬂdˇ°
(
ù_addr
 *
addr
, 
√tif
 *netif)

61 
u32_t
 
addr2ã°
;

63 
addr2ã°
 = 
addr
->addr;

65 i‡((~
addr2ã°
 =
IP_ADDR_ANY_VALUE
) ||

66 (
addr2ã°
 =
IP_ADDR_ANY_VALUE
))

69 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_BROADCAST
) == 0)

74 i‡(
addr2ã°
 =
√tif
->
ù_addr
.
addr
)

77 i‡(
	`ù_addr_√tcmp
(
addr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))

79 && ((
addr2ã°
 & ~
√tif
->
√tmask
.
addr
) ==

80 (
IP_ADDR_BROADCAST_VALUE
 & ~
√tif
->
√tmask
.
addr
)))

85 
	}
}

	@net/lwip/core/ipv4/ip_frag.c

42 
	~"lwù/›t.h
"

43 
	~"lwù/ù_‰ag.h
"

44 
	~"lwù/ù.h
"

45 
	~"lwù/öë.h
"

46 
	~"lwù/öë_chksum.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/¢mp.h
"

49 
	~"lwù/°©s.h
"

50 
	~"lwù/icmp.h
"

52 
	~<°rög.h
>

54 #i‡
IP_REASSEMBLY


68 #i‚de‡
IP_REASS_CHECK_OVERLAP


69 
	#IP_REASS_CHECK_OVERLAP
 1

	)

76 #i‚de‡
IP_REASS_FREE_OLDEST


77 
	#IP_REASS_FREE_OLDEST
 1

	)

80 
	#IP_REASS_FLAG_LASTFRAG
 0x01

	)

86 
	sù_ªass_hñ≥r
 {

87 
pbuf
 *
	m√xt_pbuf
;

88 
u16_t
 
	m°¨t
;

89 
u16_t
 
	míd
;

92 
	#IP_ADDRESSES_AND_ID_MATCH
(
ùhdrA
, 
ùhdrB
) \

93 (
	`ù_addr_cmp
(&(
ùhdrA
)->
§c
, &(
ùhdrB
)->src) && \

94 
	`ù_addr_cmp
(&(
ùhdrA
)->
de°
, &(
ùhdrB
)->dest) && \

95 
	`IPH_ID
(
ùhdrA
Ë=IPH_ID(
ùhdrB
)Ë? 1 : 0

	)

98 
ù_ªassd©a
 *
	gªassd©agøms
;

99 
u16_t
 
	gù_ªass_pbufcou¡
;

102 
ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

103 
ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

112 
	$ù_ªass_tmr
()

114 
ù_ªassd©a
 *
r
, *
¥ev
 = 
NULL
;

116 
r
 = 
ªassd©agøms
;

117 
r
 !
NULL
) {

120 i‡(
r
->
timî
 > 0) {

121 
r
->
timî
--;

122 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass_tmr:Åimî de¯%"
U16_F
"\n",(
u16_t
)
r
->
timî
));

123 
¥ev
 = 
r
;

124 
r
 =Ñ->
√xt
;

127 
ù_ªassd©a
 *
tmp
;

128 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_reass_tmr:ÅimerÅimed out\n"));

129 
tmp
 = 
r
;

131 
r
 =Ñ->
√xt
;

133 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
tmp
, 
¥ev
);

136 
	}
}

148 
	$ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

150 
pbufs_‰ìd
 = 0;

151 
pbuf
 *
p
;

152 
ù_ªass_hñ≥r
 *
ùrh
;

154 
	`LWIP_ASSERT
("¥ev !ùr", 
¥ev
 !
ùr
);

155 i‡(
¥ev
 !
NULL
) {

156 
	`LWIP_ASSERT
("¥ev->√xà=ùr", 
¥ev
->
√xt
 =
ùr
);

159 
	`¢mp_öc_ùªasmÁûs
();

160 #i‡
LWIP_ICMP


161 
ùrh
 = (
ù_ªass_hñ≥r
 *)
ùr
->
p
->
∑ylﬂd
;

162 i‡(
ùrh
->
°¨t
 == 0) {

165 
p
 = 
ùr
->p;

166 
ùr
->
p
 = 
ùrh
->
√xt_pbuf
;

168 
	`SMEMCPY
(
p
->
∑ylﬂd
, &
ùr
->
ùhdr
, 
IP_HLEN
);

169 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_FRAG
);

170 
pbufs_‰ìd
 +
	`pbuf_˛í
(
p
);

171 
	`pbuf_‰ì
(
p
);

177 
p
 = 
ùr
->p;

178 
p
 !
NULL
) {

179 
pbuf
 *
pcur
;

180 
ùrh
 = (
ù_ªass_hñ≥r
 *)
p
->
∑ylﬂd
;

181 
pcur
 = 
p
;

183 
p
 = 
ùrh
->
√xt_pbuf
;

184 
pbufs_‰ìd
 +
	`pbuf_˛í
(
pcur
);

185 
	`pbuf_‰ì
(
pcur
);

188 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
¥ev
);

189 
	`LWIP_ASSERT
("ù_ªass_pbufcou¡ >˛í", 
ù_ªass_pbufcou¡
 >
pbufs_‰ìd
);

190 
ù_ªass_pbufcou¡
 -
pbufs_‰ìd
;

192  
pbufs_‰ìd
;

193 
	}
}

195 #i‡
IP_REASS_FREE_OLDEST


206 
	$ù_ªass_ªmove_ﬁde°_d©agøm
(
ù_hdr
 *
‰aghdr
, 
pbufs_√eded
)

211 
ù_ªassd©a
 *
r
, *
ﬁde°
, *
¥ev
;

212 
pbufs_‰ìd
 = 0, 
pbufs_‰ìd_cuºít
;

213 
Ÿhî_d©agøms
;

218 
ﬁde°
 = 
NULL
;

219 
¥ev
 = 
NULL
;

220 
Ÿhî_d©agøms
 = 0;

221 
r
 = 
ªassd©agøms
;

222 
r
 !
NULL
) {

223 i‡(!
	`IP_ADDRESSES_AND_ID_MATCH
(&
r
->
ùhdr
, 
‰aghdr
)) {

225 
Ÿhî_d©agøms
++;

226 i‡(
ﬁde°
 =
NULL
) {

227 
ﬁde°
 = 
r
;

228 } i‡(
r
->
timî
 <
ﬁde°
->timer) {

230 
ﬁde°
 = 
r
;

233 i‡(
r
->
√xt
 !
NULL
) {

234 
¥ev
 = 
r
;

236 
r
 =Ñ->
√xt
;

238 i‡(
ﬁde°
 !
NULL
) {

239 
pbufs_‰ìd_cuºít
 = 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
ﬁde°
, 
¥ev
);

240 
pbufs_‰ìd
 +
pbufs_‰ìd_cuºít
;

242 } (
pbufs_‰ìd
 < 
pbufs_√eded
Ë&& (
Ÿhî_d©agøms
 > 1));

243  
pbufs_‰ìd
;

244 
	}
}

253 
ù_ªassd©a
*

254 
	$ù_ªass_íqueue_√w_d©agøm
(
ù_hdr
 *
‰aghdr
, 
˛í
)

256 
ù_ªassd©a
* 
ùr
;

258 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

259 i‡(
ùr
 =
NULL
) {

260 #i‡
IP_REASS_FREE_OLDEST


261 i‡(
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) >= clen) {

262 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

264 i‡(
ùr
 =
NULL
)

267 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

268 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("FailedÅoállocÑeassdata struct\n"));

269  
NULL
;

272 
	`mem£t
(
ùr
, 0, (
ù_ªassd©a
));

273 
ùr
->
timî
 = 
IP_REASS_MAXAGE
;

276 
ùr
->
√xt
 = 
ªassd©agøms
;

277 
ªassd©agøms
 = 
ùr
;

280 
	`SMEMCPY
(&(
ùr
->
ùhdr
), 
‰aghdr
, 
IP_HLEN
);

281  
ùr
;

282 
	}
}

289 
	$ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

293 i‡(
ªassd©agøms
 =
ùr
) {

295 
ªassd©agøms
 = 
ùr
->
√xt
;

298 
	`LWIP_ASSERT
("ßnôy checkÜökedÜi°", 
¥ev
 !
NULL
);

299 
¥ev
->
√xt
 = 
ùr
->next;

303 
	`memp_‰ì
(
MEMP_REASSDATA
, 
ùr
);

304 
	}
}

316 
	$ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ù_ªassd©a
 *
ùr
, 
pbuf
 *
√w_p
)

318 
ù_ªass_hñ≥r
 *
ùrh
, *
ùrh_tmp
, *
ùrh_¥ev
=
NULL
;

319 
pbuf
 *
q
;

320 
u16_t
 
off£t
,
Àn
;

321 
ù_hdr
 *
‰aghdr
;

322 
vÆid
 = 1;

325 
‰aghdr
 = (
ù_hdr
*)
√w_p
->
∑ylﬂd
;

326 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

327 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

332 
	`LWIP_ASSERT
("sizeof(struct ip_reass_helper) <= IP_HLEN",

333 (
ù_ªass_hñ≥r
Ë<
IP_HLEN
);

334 
ùrh
 = (
ù_ªass_hñ≥r
*)
√w_p
->
∑ylﬂd
;

335 
ùrh
->
√xt_pbuf
 = 
NULL
;

336 
ùrh
->
°¨t
 = 
off£t
;

337 
ùrh
->
íd
 = 
off£t
 + 
Àn
;

341 
q
 = 
ùr
->
p
; q !
NULL
;) {

342 
ùrh_tmp
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

343 i‡(
ùrh
->
°¨t
 < 
ùrh_tmp
->start) {

345 
ùrh
->
√xt_pbuf
 = 
q
;

346 i‡(
ùrh_¥ev
 !
NULL
) {

348 #i‡
IP_REASS_CHECK_OVERLAP


349 i‡((
ùrh
->
°¨t
 < 
ùrh_¥ev
->
íd
Ë|| (ùrh->íd > 
ùrh_tmp
->start)) {

351 
‰ìpbuf
;

354 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

357 
ùr
->
p
 = 
√w_p
;

360 } if(
ùrh
->
°¨t
 =
ùrh_tmp
->start) {

362 
‰ìpbuf
;

363 #i‡
IP_REASS_CHECK_OVERLAP


364 } if(
ùrh
->
°¨t
 < 
ùrh_tmp
->
íd
) {

366 
‰ìpbuf
;

370 i‡(
ùrh_¥ev
 !
NULL
) {

371 i‡(
ùrh_¥ev
->
íd
 !
ùrh_tmp
->
°¨t
) {

374 
vÆid
 = 0;

378 
q
 = 
ùrh_tmp
->
√xt_pbuf
;

379 
ùrh_¥ev
 = 
ùrh_tmp
;

383 i‡(
q
 =
NULL
) {

384 i‡(
ùrh_¥ev
 !
NULL
) {

387 #i‡
IP_REASS_CHECK_OVERLAP


388 
	`LWIP_ASSERT
("check føgmít†d⁄'àovîœp", 
ùrh_¥ev
->
íd
 <
ùrh
->
°¨t
);

390 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

391 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

392 
vÆid
 = 0;

395 #i‡
IP_REASS_CHECK_OVERLAP


396 
	`LWIP_ASSERT
("noÖrevious fragment,Åhis must beÅhe first fragment!",

397 
ùr
->
p
 =
NULL
);

400 
ùr
->
p
 = 
√w_p
;

406 i‡((
ùr
->
Êags
 & 
IP_REASS_FLAG_LASTFRAG
) != 0) {

408 i‡(
vÆid
) {

411 i‡(((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
°¨t
 != 0) {

412 
vÆid
 = 0;

415 
ùrh_¥ev
 = 
ùrh
;

416 
q
 = 
ùrh
->
√xt_pbuf
;

417 
q
 !
NULL
) {

418 
ùrh
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

419 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

420 
vÆid
 = 0;

423 
ùrh_¥ev
 = 
ùrh
;

424 
q
 = 
ùrh
->
√xt_pbuf
;

428 i‡(
vÆid
) {

429 
	`LWIP_ASSERT
("ßnôy check", 
ùr
->
p
 !
NULL
);

430 
	`LWIP_ASSERT
("sanity check",

431 ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
Ë!
ùrh
);

432 
	`LWIP_ASSERT
("validate_datagram:next_pbuf!=NULL",

433 
ùrh
->
√xt_pbuf
 =
NULL
);

434 
	`LWIP_ASSERT
("validate_datagram:datagramÉnd!=datagramÜen",

435 
ùrh
->
íd
 =
ùr
->
d©agøm_Àn
);

442  
vÆid
;

446 #i‡
IP_REASS_CHECK_OVERLAP


447 
‰ìpbuf
:

448 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
√w_p
);

449 
	`pbuf_‰ì
(
√w_p
);

452 
	}
}

460 
pbuf
 *

461 
	$ù_ªass
(
pbuf
 *
p
)

463 
pbuf
 *
r
;

464 
ù_hdr
 *
‰aghdr
;

465 
ù_ªassd©a
 *
ùr
;

466 
ù_ªass_hñ≥r
 *
ùrh
;

467 
u16_t
 
off£t
, 
Àn
;

468 
u8_t
 
˛í
;

469 
ù_ªassd©a
 *
ùr_¥ev
 = 
NULL
;

471 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ªcv
);

472 
	`¢mp_öc_ùªasmªqds
();

474 
‰aghdr
 = (
ù_hdr
*)
p
->
∑ylﬂd
;

476 i‡((
	`IPH_HL
(
‰aghdr
Ë* 4Ë!
IP_HLEN
) {

477 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: IP options currentlyÇot supported!\n"));

478 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
îr
);

479 
nuŒªtu∫
;

482 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

483 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

486 
˛í
 = 
	`pbuf_˛í
(
p
);

487 i‡((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
) {

488 #i‡
IP_REASS_FREE_OLDEST


489 i‡(!
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) ||

490 ((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
))

494 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: Overflow condition:Öbufct=%d, clen=%d, MAX=%d\n",

495 
ù_ªass_pbufcou¡
, 
˛í
, 
IP_REASS_MAX_PBUFS
));

496 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

499 
nuŒªtu∫
;

505 
ùr
 = 
ªassd©agøms
; i¥ !
NULL
; i¥ = i¥->
√xt
) {

509 i‡(
	`IP_ADDRESSES_AND_ID_MATCH
(&
ùr
->
ùhdr
, 
‰aghdr
)) {

510 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass: m©chögÖªviou†‰agmíàID=%"
X16_F
"\n",

511 
	`¡ohs
(
	`IPH_ID
(
‰aghdr
))));

512 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ˇchehô
);

515 
ùr_¥ev
 = 
ùr
;

518 i‡(
ùr
 =
NULL
) {

520 
ùr
 = 
	`ù_ªass_íqueue_√w_d©agøm
(
‰aghdr
, 
˛í
);

522 if(
ùr
 =
NULL
) {

523 
nuŒªtu∫
;

526 i‡(((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) == 0) &&

527 ((
	`¡ohs
(
	`IPH_OFFSET
(&
ùr
->
ùhdr
)Ë& 
IP_OFFMASK
) != 0)) {

532 
	`SMEMCPY
(&
ùr
->
ùhdr
, 
‰aghdr
, 
IP_HLEN
);

537 
ù_ªass_pbufcou¡
 +
˛í
;

543 i‡((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_MF
) == 0) {

544 
ùr
->
Êags
 |
IP_REASS_FLAG_LASTFRAG
;

545 
ùr
->
d©agøm_Àn
 = 
off£t
 + 
Àn
;

546 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,

547 ("ù_ªass:Üa° føgmíà£í,ÅŸÆÜí %"
S16_F
"\n",

548 
ùr
->
d©agøm_Àn
));

552 i‡(
	`ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ùr
, 
p
)) {

555 
ùr
->
d©agøm_Àn
 +
IP_HLEN
;

558 
r
 = ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
√xt_pbuf
;

561 
‰aghdr
 = (
ù_hdr
*)(
ùr
->
p
->
∑ylﬂd
);

562 
	`SMEMCPY
(
‰aghdr
, &
ùr
->
ùhdr
, 
IP_HLEN
);

563 
	`IPH_LEN_SET
(
‰aghdr
, 
	`ht⁄s
(
ùr
->
d©agøm_Àn
));

564 
	`IPH_OFFSET_SET
(
‰aghdr
, 0);

565 
	`IPH_CHKSUM_SET
(
‰aghdr
, 0);

567 
	`IPH_CHKSUM_SET
(
‰aghdr
, 
	`öë_chksum
(‰aghdr, 
IP_HLEN
));

569 
p
 = 
ùr
->p;

572 
r
 !
NULL
) {

573 
ùrh
 = (
ù_ªass_hñ≥r
*)
r
->
∑ylﬂd
;

576 
	`pbuf_hódî
(
r
, -
IP_HLEN
);

577 
	`pbuf_ˇt
(
p
, 
r
);

578 
r
 = 
ùrh
->
√xt_pbuf
;

581 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
ùr_¥ev
);

584 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
p
);

587  
p
;

590 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ù_ªass_pbufcou¡: %d out\n", 
ù_ªass_pbufcou¡
));

591  
NULL
;

593 
nuŒªtu∫
:

594 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass:Çullreturn\n"));

595 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
dr›
);

596 
	`pbuf_‰ì
(
p
);

597  
NULL
;

598 
	}
}

601 #i‡
IP_FRAG


602 #i‡
IP_FRAG_USES_STATIC_BUF


603 
u8_t
 
	gbuf
[
LWIP_MEM_ALIGN_SIZE
(
IP_FRAG_MAX_MTU
)];

619 
îr_t


620 
	$ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
)

622 
pbuf
 *
ømbuf
;

623 #i‡
IP_FRAG_USES_STATIC_BUF


624 
pbuf
 *
hódî
;

626 
pbuf
 *
√wpbuf
;

627 
ù_hdr
 *
‹igöÆ_ùhdr
;

629 
ù_hdr
 *
ùhdr
;

630 
u16_t
 
nfb
;

631 
u16_t
 
À·
, 
c›
;

632 
u16_t
 
mtu
 = 
√tif
->mtu;

633 
u16_t
 
ofo
, 
omf
;

634 
u16_t
 
œ°
;

635 
u16_t
 
poff
 = 
IP_HLEN
;

636 
u16_t
 
tmp
;

637 #i‡!
IP_FRAG_USES_STATIC_BUF


638 
u16_t
 
√wpbuÊí
 = 0;

639 
u16_t
 
À·_to_c›y
;

643 #i‡
IP_FRAG_USES_STATIC_BUF


648 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_REF
);

649 i‡(
ømbuf
 =
NULL
) {

650 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));

651  
ERR_MEM
;

653 
ømbuf
->
tŸ_Àn
 =Ñambuf->
Àn
 = 
mtu
;

654 
ømbuf
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)
buf
);

657 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

658 
	`SMEMCPY
(
ùhdr
, 
p
->
∑ylﬂd
, 
IP_HLEN
);

660 
‹igöÆ_ùhdr
 = 
p
->
∑ylﬂd
;

661 
ùhdr
 = 
‹igöÆ_ùhdr
;

665 
tmp
 = 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
));

666 
ofo
 = 
tmp
 & 
IP_OFFMASK
;

667 
omf
 = 
tmp
 & 
IP_MF
;

669 
À·
 = 
p
->
tŸ_Àn
 - 
IP_HLEN
;

671 
nfb
 = (
mtu
 - 
IP_HLEN
) / 8;

673 
À·
) {

674 
œ°
 = (
À·
 <
mtu
 - 
IP_HLEN
);

677 
tmp
 = 
omf
 | (
IP_OFFMASK
 & (
ofo
));

678 i‡(!
œ°
)

679 
tmp
 =Åm∞| 
IP_MF
;

682 
c›
 = 
œ°
 ? 
À·
 : 
nfb
 * 8;

684 #i‡
IP_FRAG_USES_STATIC_BUF


685 
poff
 +
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
ùhdr
 + 
IP_HLEN
, 
c›
,Öoff);

692 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
IP_HLEN
, 
PBUF_RAM
);

693 i‡(
ømbuf
 =
NULL
) {

694  
ERR_MEM
;

696 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

697 (
p
->
Àn
 >(
IP_HLEN
)));

698 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

699 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

702 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd + 
poff
;

703 
p
->
Àn
 -
poff
;

705 
À·_to_c›y
 = 
c›
;

706 
À·_to_c›y
) {

707 
√wpbuÊí
 = (
À·_to_c›y
 < 
p
->
Àn
) ?Üeft_to_copy :Ö->len;

709 i‡(!
√wpbuÊí
) {

710 
p
 =Ö->
√xt
;

713 
√wpbuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_REF
);

714 i‡(
√wpbuf
 =
NULL
) {

715 
	`pbuf_‰ì
(
ømbuf
);

716  
ERR_MEM
;

719 
√wpbuf
->
∑ylﬂd
 = 
p
->payload;

720 
√wpbuf
->
Àn
 =Çewpbuf->
tŸ_Àn
 = 
√wpbuÊí
;

724 
	`pbuf_ˇt
(
ømbuf
, 
√wpbuf
);

725 
À·_to_c›y
 -
√wpbuÊí
;

726 i‡(
À·_to_c›y
)

727 
p
 =Ö->
√xt
;

729 
poff
 = 
√wpbuÊí
;

733 
	`IPH_OFFSET_SET
(
ùhdr
, 
	`ht⁄s
(
tmp
));

734 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
c›
 + 
IP_HLEN
));

735 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

736 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

738 #i‡
IP_FRAG_USES_STATIC_BUF


739 i‡(
œ°
)

740 
	`pbuf_ªÆloc
(
ømbuf
, 
À·
 + 
IP_HLEN
);

747 
hódî
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_RAM
);

748 i‡(
hódî
 !
NULL
) {

749 
	`pbuf_chaö
(
hódî
, 
ømbuf
);

750 
√tif
->
	`ouçut
“ëif, 
hódî
, 
de°
);

751 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

752 
	`¢mp_öc_ù‰ag¸óãs
();

753 
	`pbuf_‰ì
(
hódî
);

755 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc() for header failed\n"));

756 
	`pbuf_‰ì
(
ømbuf
);

757  
ERR_MEM
;

763 
√tif
->
	`ouçut
“ëif, 
ømbuf
, 
de°
);

764 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

773 
	`pbuf_‰ì
(
ømbuf
);

775 
À·
 -
c›
;

776 
ofo
 +
nfb
;

778 #i‡
IP_FRAG_USES_STATIC_BUF


779 
	`pbuf_‰ì
(
ømbuf
);

781 
	`¢mp_öc_ù‰agoks
();

782  
ERR_OK
;

783 
	}
}

	@net/lwip/core/ipv6/icmp6.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_ICMP


41 
	~"lwù/icmp.h
"

42 
	~"lwù/öë.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/°©s.h
"

48 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

50 
u8_t
 
ty≥
;

51 
icmp_echo_hdr
 *
õcho
;

52 
ù_hdr
 *
ùhdr
;

53 
ù_addr
 
tm∑ddr
;

55 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

59 
ty≥
 = ((
u8_t
 *)
p
->
∑ylﬂd
)[0];

61 
ty≥
) {

62 
ICMP6_ECHO
:

63 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

65 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

66 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

68 
	`pbuf_‰ì
(
p
);

69 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

72 
õcho
 = 
p
->
∑ylﬂd
;

73 
ùhdr
 = (
ù_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 - 
IP_HLEN
);

74 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

75 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

76 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

79 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp:Ö->À¿%"
S16_F
"Ö->tŸ_À¿%"S16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

80 
	`ù_addr_£t
(&
tm∑ddr
, &(
ùhdr
->
§c
));

81 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(ùhdr->
de°
));

82 
	`ù_addr_£t
(&(
ùhdr
->
de°
), &
tm∑ddr
);

83 
õcho
->
ty≥
 = 
ICMP6_ER
;

85 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP6_ECHO
 << 8))) {

86 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8) + 1;

88 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8);

90 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

91 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

94 
	`ù_ouçut_if
 (
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

95 
ùhdr
->
h›lim
, 
IP_PROTO_ICMP
, 
öp
);

98 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
"ÇŸ suµ‹ãd.\n", (
s16_t
)
ty≥
));

99 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

100 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

103 
	`pbuf_‰ì
(
p
);

104 
	}
}

107 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

109 
pbuf
 *
q
;

110 
ù_hdr
 *
ùhdr
;

111 
icmp_dur_hdr
 *
idur
;

114 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

116 i‡(
q
 =
NULL
) {

117 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

118 
	`pbuf_‰ì
(
p
);

121 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

122 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

124 
ùhdr
 = 
p
->
∑ylﬂd
;

126 
idur
 = 
q
->
∑ylﬂd
;

127 
idur
->
ty≥
 = (
u8_t
)
ICMP6_DUR
;

128 
idur
->
icode
 = (
u8_t
)
t
;

130 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, 
p
->∑ylﬂd, 
IP_HLEN
 + 8);

133 
idur
->
chksum
 = 0;

134 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

135 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

137 
	`ù_ouçut
(
q
, 
NULL
,

138 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

139 
	`pbuf_‰ì
(
q
);

140 
	}
}

143 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

145 
pbuf
 *
q
;

146 
ù_hdr
 *
ùhdr
;

147 
icmp_ã_hdr
 *
ãhdr
;

149 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded\n"));

152 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

154 i‡(
q
 =
NULL
) {

155 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

156 
	`pbuf_‰ì
(
p
);

159 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

160 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

162 
ùhdr
 = 
p
->
∑ylﬂd
;

164 
ãhdr
 = 
q
->
∑ylﬂd
;

165 
ãhdr
->
ty≥
 = (
u8_t
)
ICMP6_TE
;

166 
ãhdr
->
icode
 = (
u8_t
)
t
;

169 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, (u8_à*)
p
->∑ylﬂd, 
IP_HLEN
 + 8);

172 
ãhdr
->
chksum
 = 0;

173 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

174 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

175 
	`ù_ouçut
(
q
, 
NULL
,

176 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

177 
	`pbuf_‰ì
(
q
);

178 
	}
}

	@net/lwip/core/ipv6/inet6.c

41 
	~"lwù/›t.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/öë.h
"

55 
u32_t


56 
	$chksum
(*
d©≠å
, 
u16_t
 
Àn
)

58 
u16_t
 *
sd©≠å
 = 
d©≠å
;

59 
u32_t
 
acc
;

62 
acc
 = 0; 
Àn
 > 1;Üen -= 2) {

63 
acc
 +*
sd©≠å
++;

67 i‡(
Àn
 == 1) {

68 
acc
 +
	`ht⁄s
((
u16_t
)(*(
u8_t
 *)
d©≠å
) << 8);

71  
acc
;

73 
	}
}

80 
u16_t


81 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

82 
ù_addr
 *
§c
, ù_add∏*
de°
,

83 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
)

85 
u32_t
 
acc
;

86 
pbuf
 *
q
;

87 
u8_t
 
sw≠≥d
, 
i
;

89 
acc
 = 0;

90 
sw≠≥d
 = 0;

91 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

92 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

93 
acc
 >> 16) {

94 
acc
 = (acc & 0xffff) + (acc >> 16);

96 i‡(
q
->
Àn
 % 2 != 0) {

97 
sw≠≥d
 = 1 - swapped;

98 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

102 i‡(
sw≠≥d
) {

103 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

106 
i
 = 0; i < 8; i++) {

107 
acc
 +((
u16_t
 *)
§c
->
addr
)[
i
] & 0xffff;

108 
acc
 +((
u16_t
 *)
de°
->
addr
)[
i
] & 0xffff;

109 
acc
 >> 16) {

110 
acc
 = (acc & 0xffff) + (acc >> 16);

113 
acc
 +(
u16_t
)
	`ht⁄s
((u16_t)
¥Ÿo
);

114 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[0] & 0xffff;

115 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[1] & 0xffff;

117 
acc
 >> 16) {

118 
acc
 = (acc & 0xffff) + (acc >> 16);

120  ~(
acc
 & 0xffff);

121 
	}
}

129 
u16_t


130 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

132 
u32_t
 
acc
, 
sum
;

134 
acc
 = 
	`chksum
(
d©≠å
, 
Àn
);

135 
sum
 = (
acc
 & 0xffff) + (acc >> 16);

136 
sum
 += (sum >> 16);

137  ~(
sum
 & 0xffff);

138 
	}
}

140 
u16_t


141 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

143 
u32_t
 
acc
;

144 
pbuf
 *
q
;

145 
u8_t
 
sw≠≥d
;

147 
acc
 = 0;

148 
sw≠≥d
 = 0;

149 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

150 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

151 
acc
 >> 16) {

152 
acc
 = (acc & 0xffff) + (acc >> 16);

154 i‡(
q
->
Àn
 % 2 != 0) {

155 
sw≠≥d
 = 1 - swapped;

156 
acc
 = (acc & 0xff << 8) | (acc & 0xff00 >> 8);

160 i‡(
sw≠≥d
) {

161 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

163  ~(
acc
 & 0xffff);

164 
	}
}

	@net/lwip/core/ipv6/ip6.c

43 
	~"lwù/›t.h
"

45 
	~"lwù/def.h
"

46 
	~"lwù/mem.h
"

47 
	~"lwù/ù.h
"

48 
	~"lwù/öë.h
"

49 
	~"lwù/√tif.h
"

50 
	~"lwù/icmp.h
"

51 
	~"lwù/udp.h
"

52 
	~"lwù/t˝.h
"

54 
	~"lwù/°©s.h
"

56 
	~"¨ch/≥rf.h
"

64 
	$ù_öô
()

66 
	}
}

75 
√tif
 *

76 
	$ù_rouã
(
ù_addr
 *
de°
)

78 
√tif
 *netif;

80 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

81 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

82  
√tif
;

86  
√tif_deÁu…
;

87 
	}
}

97 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
)

99 
√tif
 *netif;

101 
PERF_START
;

103 i‡((
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
))Ë=
NULL
) {

105 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Ço forwardingÑoute found for "));

106 #i‡
IP_DEBUG


107 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

109 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

110 
	`pbuf_‰ì
(
p
);

114 i‡(--
ùhdr
->
h›lim
 == 0) {

115 #i‡
LWIP_ICMP


117 i‡(
ùhdr
->
√xthdr
 !
IP_PROTO_ICMP
) {

118 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

121 
	`pbuf_‰ì
(
p
);

133 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward: forwardingÖacketÅo "));

134 #i‡
IP_DEBUG


135 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

137 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

139 
	`IP_STATS_INC
(
ù
.
fw
);

140 
	`IP_STATS_INC
(
ù
.
xmô
);

142 
	`PERF_STOP
("ip_forward");

144 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

145 
	}
}

158 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
) {

159 
ù_hdr
 *
ùhdr
;

160 
√tif
 *netif;

163 
PERF_START
;

165 #i‡
IP_DEBUG


166 
	`ù_debug_¥öt
(
p
);

170 
	`IP_STATS_INC
(
ù
.
ªcv
);

173 
ùhdr
 = 
p
->
∑ylﬂd
;

176 i‡(
ùhdr
->
v
 != 6) {

177 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖacket dropped dueÅo bad versionÇumber\n"));

178 #i‡
IP_DEBUG


179 
	`ù_debug_¥öt
(
p
);

181 
	`pbuf_‰ì
(
p
);

182 
	`IP_STATS_INC
(
ù
.
îr
);

183 
	`IP_STATS_INC
(
ù
.
dr›
);

188 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

189 #i‡
IP_DEBUG


190 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: iphdr->dest "));

191 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

192 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->ip_addr "));

193 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

194 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

196 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
))) {

202 i‡(
√tif
 =
NULL
) {

204 #i‡
IP_FORWARD


205 
	`ù_f‹w¨d
(
p
, 
ùhdr
);

207 
	`pbuf_‰ì
(
p
);

211 
	`pbuf_ªÆloc
(
p
, 
IP_HLEN
 + 
	`¡ohs
(
ùhdr
->
Àn
));

214 #i‡
IP_DEBUG


220 if(
	`pbuf_hódî
(
p
, -
IP_HLEN
)) {

221 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

225 
ùhdr
->
√xthdr
) {

226 
IP_PROTO_UDP
:

227 
	`udp_öput
(
p
, 
öp
);

229 
IP_PROTO_TCP
:

230 
	`t˝_öput
(
p
, 
öp
);

232 #i‡
LWIP_ICMP


233 
IP_PROTO_ICMP
:

234 
	`icmp_öput
(
p
, 
öp
);

238 #i‡
LWIP_ICMP


240 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

242 
	`pbuf_‰ì
(
p
);

243 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n",

244 
ùhdr
->
√xthdr
));

246 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

247 
	`IP_STATS_INC
(
ù
.
dr›
);

249 
	`PERF_STOP
("ip_input");

250 
	}
}

260 
îr_t


261 
	$ù_ouçut_if
 (
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

262 
u8_t
 
âl
,

263 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

265 
ù_hdr
 *
ùhdr
;

267 
PERF_START
;

269 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

270 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

271 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

272 
	`IP_STATS_INC
(
ù
.
îr
);

274  
ERR_BUF
;

276 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

278 
ùhdr
 = 
p
->
∑ylﬂd
;

281 i‡(
de°
 !
IP_HDRINCL
) {

282 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("!IP_HDRLINCL\n"));

283 
ùhdr
->
h›lim
 = 
âl
;

284 
ùhdr
->
√xthdr
 = 
¥Ÿo
;

285 
ùhdr
->
Àn
 = 
	`ht⁄s
(
p
->
tŸ_Àn
 - 
IP_HLEN
);

286 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

288 
ùhdr
->
v
 = 6;

290 i‡(
	`ù_addr_ißny
(
§c
)) {

291 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

293 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

297 
de°
 = &(
ùhdr
->dest);

300 
	`IP_STATS_INC
(
ù
.
xmô
);

302 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%¯÷í %"
U16_F
")\n", 
√tif
->
«me
[0],Çëif->«me[1], 
p
->
tŸ_Àn
));

303 #i‡
IP_DEBUG


304 
	`ù_debug_¥öt
(
p
);

307 
	`PERF_STOP
("ip_output_if");

308  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

309 
	}
}

317 
îr_t


318 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

319 
u8_t
 
âl
, u8_à
¥Ÿo
)

321 
√tif
 *netif;

322 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

323 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

324 
	`IP_STATS_INC
(
ù
.
πîr
);

325  
ERR_RTE
;

328  
	`ù_ouçut_if
 (
p
, 
§c
, 
de°
, 
âl
, 
¥Ÿo
, 
√tif
);

329 
	}
}

331 #i‡
IP_DEBUG


333 
	$ù_debug_¥öt
(
pbuf
 *
p
)

335 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

337 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

338 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

339 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" | %"
X16_F
"%"X16_F" | %"X16_F"%"X16_F" | (v,Åraffic class, flowÜabel)\n",

340 
ùhdr
->
v
,

341 
ùhdr
->
t˛ass1
, iphdr->
t˛ass2
,

342 
ùhdr
->
Êow1
, iphdr->
Êow2
));

343 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

344 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" | %2"U16_F" | %2"U16_F" | (len,Çexthdr, hoplim)\n",

345 
	`¡ohs
(
ùhdr
->
Àn
),

346 
ùhdr
->
√xthdr
,

347 
ùhdr
->
h›lim
));

348 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

349 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

350 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) >> 16) & 0xffff,

351 
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) & 0xffff));

352 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

353 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) >> 16) & 0xffff,

354 
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) & 0xffff));

355 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

356 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) >> 16) & 0xffff,

357 
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) & 0xffff));

358 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

359 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) >> 16) & 0xffff,

360 
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) & 0xffff));

361 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

362 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

363 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) >> 16) & 0xffff,

364 
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) & 0xffff));

365 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

366 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) >> 16) & 0xffff,

367 
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) & 0xffff));

368 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

369 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) >> 16) & 0xffff,

370 
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) & 0xffff));

371 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

372 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) >> 16) & 0xffff,

373 
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) & 0xffff));

374 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

375 
	}
}

	@net/lwip/core/ipv6/ip6_addr.c

34 
	~"lwù/›t.h
"

35 
	~"lwù/ù_addr.h
"

36 
	~"lwù/öë.h
"

38 
u8_t


39 
	$ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

40 
ù_addr
 *
mask
)

42 ((
addr1
->
addr
[0] & 
mask
->addr[0]Ë=(
addr2
->addr[0] & mask->addr[0]) &&

43 (
addr1
->
addr
[1] & 
mask
->addr[1]Ë=(
addr2
->addr[1] & mask->addr[1]) &&

44 (
addr1
->
addr
[2] & 
mask
->addr[2]Ë=(
addr2
->addr[2] & mask->addr[2]) &&

45 (
addr1
->
addr
[3] & 
mask
->addr[3]Ë=(
addr2
->addr[3] & mask->addr[3]));

47 
	}
}

49 
u8_t


50 
	$ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
)

52 (
addr1
->
addr
[0] =
addr2
->addr[0] &&

53 
addr1
->
addr
[1] =
addr2
->addr[1] &&

54 
addr1
->
addr
[2] =
addr2
->addr[2] &&

55 
addr1
->
addr
[3] =
addr2
->addr[3]);

56 
	}
}

59 
	$ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
)

61 
	`SMEMCPY
(
de°
, 
§c
, (
ù_addr
));

66 
	}
}

68 
u8_t


69 
	$ù_addr_ißny
(
ù_addr
 *
addr
)

71 i‡(
addr
 =
NULL
)  1;

72 ((
addr
->addr[0] |áddr->addr[1] |áddr->addr[2] |áddr->addr[3]) == 0);

73 
	}
}

	@net/lwip/core/mem.c

57 
	~"lwù/›t.h
"

59 #i‡!
MEM_LIBC_MALLOC


61 
	~"lwù/def.h
"

62 
	~"lwù/mem.h
"

63 
	~"lwù/sys.h
"

64 
	~"lwù/°©s.h
"

66 
	~<°rög.h
>

68 #i‡
MEM_USE_POOLS


74 
	smem_hñ≥r


76 
memp_t
 
	mpoﬁƒ
;

87 
	$mem_mÆloc
(
mem_size_t
 
size
)

89 
mem_hñ≥r
 *
ñemít
;

90 
memp_t
 
poﬁƒ
;

92 
poﬁƒ
 = 
MEMP_POOL_FIRST
;Öoﬁƒ <
MEMP_POOL_LAST
;Öoolnr++) {

95 i‡((
size
 + (
mem_hñ≥r
)Ë<
memp_sizes
[
poﬁƒ
]) {

99 i‡(
poﬁƒ
 > 
MEMP_POOL_LAST
) {

100 
	`LWIP_ASSERT
("mem_malloc():ÇoÖool isÅhat big!", 0);

101  
NULL
;

103 
ñemít
 = (
mem_hñ≥r
*)
	`memp_mÆloc
(
poﬁƒ
);

104 i‡(
ñemít
 =
NULL
) {

108  
NULL
;

112 
ñemít
->
poﬁƒ
 =Öoolnr;

114 
ñemít
++;

116  
ñemít
;

117 
	}
}

127 
	$mem_‰ì
(*
rmem
)

129 
mem_hñ≥r
 *
hmem
 = (mem_hñ≥r*)
rmem
;

131 
	`LWIP_ASSERT
("rmem !NULL", (
rmem
 !
NULL
));

132 
	`LWIP_ASSERT
("rmem =MEM_ALIGN‘mem)", (
rmem
 =
	`LWIP_MEM_ALIGN
(rmem)));

135 
hmem
--;

137 
	`LWIP_ASSERT
("hmem !NULL", (
hmem
 !
NULL
));

138 
	`LWIP_ASSERT
("hmem =MEM_ALIGN(hmem)", (
hmem
 =
	`LWIP_MEM_ALIGN
(hmem)));

139 
	`LWIP_ASSERT
("hmem->poﬁƒ < MEMP_MAX", (
hmem
->
poﬁƒ
 < 
MEMP_MAX
));

142 
	`memp_‰ì
(
hmem
->
poﬁƒ
, hmem);

143 
	}
}

153 
	smem
 {

155 
mem_size_t
 
	m√xt
;

157 
mem_size_t
 
	m¥ev
;

159 
u8_t
 
	mu£d
;

165 #i‚de‡
MIN_SIZE


166 
	#MIN_SIZE
 12

	)

169 
	#MIN_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MIN_SIZE
)

	)

170 
	#SIZEOF_STRUCT_MEM
 
	`LWIP_MEM_ALIGN_SIZE
((
mem
))

	)

171 
	#MEM_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEM_SIZE
)

	)

174 
u8_t
 
	gøm_hóp
[
MEM_SIZE_ALIGNED
 + (2*
SIZEOF_STRUCT_MEM
Ë+ 
MEM_ALIGNMENT
];

176 
u8_t
 *
	gøm
;

178 
mem
 *
	gøm_íd
;

180 
mem
 *
	gl‰ì
;

183 
sys_£m_t
 
	gmem_£m
;

185 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


187 vﬁ©ûê
u8_t
 
	gmem_‰ì_cou¡
;

190 
	#LWIP_MEM_FREE_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_‰ì
)

	)

191 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_‰ì
)

	)

192 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_‰ì
)

	)

193 
	#LWIP_MEM_ALLOC_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_Æloc
)

	)

194 
	#LWIP_MEM_ALLOC_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_Æloc
)

	)

195 
	#LWIP_MEM_ALLOC_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_Æloc
)

	)

200 
	#LWIP_MEM_FREE_DECL_PROTECT
()

	)

201 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`sys_¨ch_£m_waô
(
mem_£m
, 0)

	)

202 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`sys_£m_sig«l
(
mem_£m
)

	)

204 
	#LWIP_MEM_ALLOC_DECL_PROTECT
()

	)

205 
	#LWIP_MEM_ALLOC_PROTECT
()

	)

206 
	#LWIP_MEM_ALLOC_UNPROTECT
()

	)

223 
	$∂ug_hﬁes
(
mem
 *mem)

225 
mem
 *
nmem
;

226 
mem
 *
pmem
;

228 
	`LWIP_ASSERT
("∂ug_hﬁes: mem >øm", (
u8_t
 *)
mem
 >
øm
);

229 
	`LWIP_ASSERT
("∂ug_hﬁes: mem <Ñam_íd", (
u8_t
 *)
mem
 < (u8_à*)
øm_íd
);

230 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->u£d =0", 
mem
->
u£d
 == 0);

233 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->√xà<MEM_SIZE_ALIGNED", 
mem
->
√xt
 <
MEM_SIZE_ALIGNED
);

235 
nmem
 = (
mem
 *)&
øm
[mem->
√xt
];

236 i‡(
mem
 !
nmem
 &&Çmem->
u£d
 =0 && (
u8_t
 *Ímem !(u8_à*)
øm_íd
) {

238 i‡(
l‰ì
 =
nmem
) {

239 
l‰ì
 = 
mem
;

241 
mem
->
√xt
 = 
nmem
->next;

242 ((
mem
 *)&
øm
[
nmem
->
√xt
])->
¥ev
 = (
u8_t
 *)mem -Ñam;

246 
pmem
 = (
mem
 *)&
øm
[mem->
¥ev
];

247 i‡(
pmem
 !
mem
 &&Ömem->
u£d
 == 0) {

249 i‡(
l‰ì
 =
mem
) {

250 
l‰ì
 = 
pmem
;

252 
pmem
->
√xt
 = 
mem
->next;

253 ((
mem
 *)&
øm
[mem->
√xt
])->
¥ev
 = (
u8_t
 *)
pmem
 -Ñam;

255 
	}
}

261 
	$mem_öô
()

263 
mem
 *mem;

265 
	`LWIP_ASSERT
("Sanity checkálignment",

266 (
SIZEOF_STRUCT_MEM
 & (
MEM_ALIGNMENT
-1)) == 0);

269 
øm
 = 
	`LWIP_MEM_ALIGN
(
øm_hóp
);

271 
mem
 = (mem *)
øm
;

272 
mem
->
√xt
 = 
MEM_SIZE_ALIGNED
;

273 
mem
->
¥ev
 = 0;

274 
mem
->
u£d
 = 0;

276 
øm_íd
 = (
mem
 *)&
øm
[
MEM_SIZE_ALIGNED
];

277 
øm_íd
->
u£d
 = 1;

278 
øm_íd
->
√xt
 = 
MEM_SIZE_ALIGNED
;

279 
øm_íd
->
¥ev
 = 
MEM_SIZE_ALIGNED
;

281 
mem_£m
 = 
	`sys_£m_√w
(1);

284 
l‰ì
 = (
mem
 *)
øm
;

286 
	`MEM_STATS_AVAIL
(
avaû
, 
MEM_SIZE_ALIGNED
);

287 
	}
}

296 
	$mem_‰ì
(*
rmem
)

298 
mem
 *mem;

299 
	`LWIP_MEM_FREE_DECL_PROTECT
();

301 i‡(
rmem
 =
NULL
) {

302 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("mem_free(p == NULL) was called.\n"));

305 
	`LWIP_ASSERT
("mem_‰ì: s™ôy checkálignmít", (((
mem_±r_t
)
rmem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

307 
	`LWIP_ASSERT
("mem_‰ì:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

308 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

310 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

311 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

312 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_free: illegal memory\n"));

314 
	`SYS_ARCH_PROTECT
(
Àv
);

315 
	`MEM_STATS_INC
(
ûÀgÆ
);

316 
	`SYS_ARCH_UNPROTECT
(
Àv
);

320 
	`LWIP_MEM_FREE_PROTECT
();

322 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

324 
	`LWIP_ASSERT
("mem_‰ì: mem->u£d", 
mem
->
u£d
);

326 
mem
->
u£d
 = 0;

328 i‡(
mem
 < 
l‰ì
) {

330 
l‰ì
 = 
mem
;

333 
	`MEM_STATS_DEC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

336 
	`∂ug_hﬁes
(
mem
);

337 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


338 
mem_‰ì_cou¡
 = 1;

340 
	`LWIP_MEM_FREE_UNPROTECT
();

341 
	}
}

356 
	$mem_ªÆloc
(*
rmem
, 
mem_size_t
 
√wsize
)

358 
mem_size_t
 
size
;

359 
mem_size_t
 
±r
, 
±r2
;

360 
mem
 *mem, *
mem2
;

362 
	`LWIP_MEM_FREE_DECL_PROTECT
();

366 
√wsize
 = 
	`LWIP_MEM_ALIGN_SIZE
(newsize);

368 if(
√wsize
 < 
MIN_SIZE_ALIGNED
) {

370 
√wsize
 = 
MIN_SIZE_ALIGNED
;

373 i‡(
√wsize
 > 
MEM_SIZE_ALIGNED
) {

374  
NULL
;

377 
	`LWIP_ASSERT
("mem_ªÆloc:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

378 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

380 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

381 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

382 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_realloc: illegal memory\n"));

384 
	`SYS_ARCH_PROTECT
(
Àv
);

385 
	`MEM_STATS_INC
(
ûÀgÆ
);

386 
	`SYS_ARCH_UNPROTECT
(
Àv
);

387  
rmem
;

390 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

392 
±r
 = (
u8_t
 *)
mem
 - 
øm
;

394 
size
 = 
mem
->
√xt
 - 
±r
 - 
SIZEOF_STRUCT_MEM
;

395 
	`LWIP_ASSERT
("mem_ªÆlo¯ˇ¿⁄ly shrök mem‹y", 
√wsize
 <
size
);

396 i‡(
√wsize
 > 
size
) {

398  
NULL
;

400 i‡(
√wsize
 =
size
) {

402  
rmem
;

406 
	`LWIP_MEM_FREE_PROTECT
();

408 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

410 
mem2
 = (
mem
 *)&
øm
[mem->
√xt
];

411 if(
mem2
->
u£d
 == 0) {

413 
mem_size_t
 
√xt
;

415 
√xt
 = 
mem2
->next;

417 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

418 i‡(
l‰ì
 =
mem2
) {

419 
l‰ì
 = (
mem
 *)&
øm
[
±r2
];

421 
mem2
 = (
mem
 *)&
øm
[
±r2
];

422 
mem2
->
u£d
 = 0;

424 
mem2
->
√xt
 =Çext;

426 
mem2
->
¥ev
 = 
±r
;

428 
mem
->
√xt
 = 
±r2
;

432 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

433 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

436 } i‡(
√wsize
 + 
SIZEOF_STRUCT_MEM
 + 
MIN_SIZE_ALIGNED
 <
size
) {

444 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

445 
mem2
 = (
mem
 *)&
øm
[
±r2
];

446 i‡(
mem2
 < 
l‰ì
) {

447 
l‰ì
 = 
mem2
;

449 
mem2
->
u£d
 = 0;

450 
mem2
->
√xt
 = 
mem
->next;

451 
mem2
->
¥ev
 = 
±r
;

452 
mem
->
√xt
 = 
±r2
;

453 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

454 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

464 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


465 
mem_‰ì_cou¡
 = 1;

467 
	`LWIP_MEM_FREE_UNPROTECT
();

468  
rmem
;

469 
	}
}

481 
	$mem_mÆloc
(
mem_size_t
 
size
)

483 
mem_size_t
 
±r
, 
±r2
;

484 
mem
 *mem, *
mem2
;

485 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


486 
u8_t
 
loˇl_mem_‰ì_cou¡
 = 0;

488 
	`LWIP_MEM_ALLOC_DECL_PROTECT
();

490 i‡(
size
 == 0) {

491  
NULL
;

496 
size
 = 
	`LWIP_MEM_ALIGN_SIZE
(size);

498 if(
size
 < 
MIN_SIZE_ALIGNED
) {

500 
size
 = 
MIN_SIZE_ALIGNED
;

503 i‡(
size
 > 
MEM_SIZE_ALIGNED
) {

504  
NULL
;

508 
	`sys_¨ch_£m_waô
(
mem_£m
, 0);

509 
	`LWIP_MEM_ALLOC_PROTECT
();

510 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


513 
loˇl_mem_‰ì_cou¡
 = 0;

519 
±r
 = (
u8_t
 *)
l‰ì
 - 
øm
;Öå < 
MEM_SIZE_ALIGNED
 - 
size
;

520 
±r
 = ((
mem
 *)&
øm
[±r])->
√xt
) {

521 
mem
 = (mem *)&
øm
[
±r
];

522 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


523 
mem_‰ì_cou¡
 = 0;

524 
	`LWIP_MEM_ALLOC_UNPROTECT
();

526 
	`LWIP_MEM_ALLOC_PROTECT
();

527 i‡(
mem_‰ì_cou¡
 != 0) {

528 
loˇl_mem_‰ì_cou¡
 = 
mem_‰ì_cou¡
;

530 
mem_‰ì_cou¡
 = 0;

533 i‡((!
mem
->
u£d
) &&

534 (
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
)Ë>
size
) {

538 i‡(
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
Ë>(
size
 + SIZEOF_STRUCT_MEM + 
MIN_SIZE_ALIGNED
)) {

549 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
size
;

551 
mem2
 = (
mem
 *)&
øm
[
±r2
];

552 
mem2
->
u£d
 = 0;

553 
mem2
->
√xt
 = 
mem
->next;

554 
mem2
->
¥ev
 = 
±r
;

556 
mem
->
√xt
 = 
±r2
;

557 
mem
->
u£d
 = 1;

559 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

560 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

562 
	`MEM_STATS_INC_USED
(
u£d
, (
size
 + 
SIZEOF_STRUCT_MEM
));

571 
mem
->
u£d
 = 1;

572 
	`MEM_STATS_INC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

575 i‡(
mem
 =
l‰ì
) {

577 
l‰ì
->
u£d
 &&Ü‰ì !
øm_íd
) {

578 
	`LWIP_MEM_ALLOC_UNPROTECT
();

580 
	`LWIP_MEM_ALLOC_PROTECT
();

581 
l‰ì
 = (
mem
 *)&
øm
[l‰ì->
√xt
];

583 
	`LWIP_ASSERT
("mem_mÆloc: !l‰ì->u£d", ((
l‰ì
 =
øm_íd
Ë|| (!l‰ì->
u£d
)));

585 
	`LWIP_MEM_ALLOC_UNPROTECT
();

586 
	`sys_£m_sig«l
(
mem_£m
);

587 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÇotáboveÑam_end.",

588 (
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
 + 
size
 <(mem_±r_t)
øm_íd
);

589 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÖroperlyáligned.",

590 ()((
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
Ë% 
MEM_ALIGNMENT
 == 0);

591 
	`LWIP_ASSERT
("mem_malloc: sanity checkálignment",

592 (((
mem_±r_t
)
mem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

594  (
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
;

597 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


599 } 
loˇl_mem_‰ì_cou¡
 != 0);

601 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 2, ("mem_mÆloc: couldÇŸáŒoˇã %"
S16_F
" byãs\n", (
s16_t
)
size
));

602 
	`MEM_STATS_INC
(
îr
);

603 
	`LWIP_MEM_ALLOC_UNPROTECT
();

604 
	`sys_£m_sig«l
(
mem_£m
);

605  
NULL
;

606 
	}
}

619 *
	$mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
)

621 *
p
;

624 
p
 = 
	`mem_mÆloc
(
cou¡
 * 
size
);

625 i‡(
p
) {

627 
	`mem£t
(
p
, 0, 
cou¡
 * 
size
);

629  
p
;

630 
	}
}

	@net/lwip/core/memp.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/memp.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/udp.h
"

47 
	~"lwù/øw.h
"

48 
	~"lwù/t˝.h
"

49 
	~"lwù/igmp.h
"

50 
	~"lwù/≠i.h
"

51 
	~"lwù/≠i_msg.h
"

52 
	~"lwù/t˝ù.h
"

53 
	~"lwù/sys.h
"

54 
	~"lwù/°©s.h
"

55 
	~"√tif/ëh¨p.h
"

56 
	~"lwù/ù_‰ag.h
"

58 
	~<°rög.h
>

60 
	smemp
 {

61 
memp
 *
	m√xt
;

62 #i‡
MEMP_OVERFLOW_CHECK


63 c⁄° *
	mfûe
;

64 
	mlöe
;

68 #i‡
MEMP_OVERFLOW_CHECK


77 #i‚de‡
MEMP_SANITY_REGION_BEFORE


78 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

80 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

81 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

83 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

85 #i‚de‡
MEMP_SANITY_REGION_AFTER


86 
	#MEMP_SANITY_REGION_AFTER
 16

	)

88 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

89 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

91 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

95 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

96 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

104 
	#MEMP_SIZE
 0

	)

105 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

111 
memp
 *
	gmemp_èb
[
MEMP_MAX
];

114 #i‡!
MEM_USE_POOLS


117 c⁄° 
u16_t
 
	gmemp_sizes
[
MEMP_MAX
] = {

118 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
	`MEMP_ALIGN_SIZE
(size),

	)

119 
	~"lwù/memp_°d.h
"

123 c⁄° 
u16_t
 
	gmemp_num
[
MEMP_MAX
] = {

124 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë“um),

	)

125 
	~"lwù/memp_°d.h
"

129 #ifde‡
LWIP_DEBUG


130 c⁄° *
	gmemp_desc
[
MEMP_MAX
] = {

131 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë(desc),

	)

132 
	~"lwù/memp_°d.h
"

137 
u8_t
 
	gmemp_mem‹y
[
MEM_ALIGNMENT
 - 1

138 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë+ ( (numË* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(sizeËË)

	)

139 
	~"lwù/memp_°d.h
"

142 #i‡
MEMP_SANITY_CHECK


147 
	$memp_ßnôy
()

149 
s16_t
 
i
, 
c
;

150 
memp
 *
m
, *
n
;

152 
i
 = 0; i < 
MEMP_MAX
; i++) {

153 
m
 = 
memp_èb
[
i
]; m !
NULL
; m = m->
√xt
) {

154 
c
 = 1;

155 
n
 = 
memp_èb
[
i
];Ç !
NULL
;Ç =Ç->
√xt
) {

156 i‡(
n
 =
m
 && --
c
 < 0) {

163 
	}
}

165 #i‡
MEMP_OVERFLOW_CHECK


174 
	$memp_ovîÊow_check_ñemít
(
memp
 *
p
, 
u16_t
 
memp_size
)

176 
u16_t
 
k
;

177 
u8_t
 *
m
;

178 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

179 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

180 
k
 = 0; k < 
MEMP_SANITY_REGION_BEFORE_ALIGNED
; k++) {

181 i‡(
m
[
k
] != 0xcd) {

182 
	`LWIP_ASSERT
("detected memp underflow!", 0);

186 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

187 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_size
 - 
MEMP_SANITY_REGION_AFTER_ALIGNED
;

188 
k
 = 0; k < 
MEMP_SANITY_REGION_AFTER_ALIGNED
; k++) {

189 i‡(
m
[
k
] != 0xcd) {

190 
	`LWIP_ASSERT
("detected memp overflow!", 0);

194 
	}
}

202 
	$memp_ovîÊow_check_Æl
()

204 
u16_t
 
i
, 
j
;

205 
memp
 *
p
;

207 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

208 
i
 = 0; i < 
MEMP_MAX
; ++i) {

209 
p
 =Ö;

210 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

211 
	`memp_ovîÊow_check_ñemít
(
p
, 
memp_sizes
[
i
]);

212 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
]);

215 
	}
}

221 
	$memp_ovîÊow_öô
()

223 
u16_t
 
i
, 
j
;

224 
memp
 *
p
;

225 
u8_t
 *
m
;

227 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

228 
i
 = 0; i < 
MEMP_MAX
; ++i) {

229 
p
 =Ö;

230 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

231 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

232 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

233 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_BEFORE_ALIGNED
);

235 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

236 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
i
] - 
MEMP_SANITY_REGION_AFTER_ALIGNED
;

237 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

239 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
]);

242 
	}
}

251 
	$memp_öô
()

253 
memp
 *memp;

254 
u16_t
 
i
, 
j
;

256 
i
 = 0; i < 
MEMP_MAX
; ++i) {

257 
	`MEMP_STATS_AVAIL
(
u£d
, 
i
, 0);

258 
	`MEMP_STATS_AVAIL
(
max
, 
i
, 0);

259 
	`MEMP_STATS_AVAIL
(
îr
, 
i
, 0);

260 
	`MEMP_STATS_AVAIL
(
avaû
, 
i
, 
memp_num
[i]);

263 
memp
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

265 
i
 = 0; i < 
MEMP_MAX
; ++i) {

266 
memp_èb
[
i
] = 
NULL
;

268 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

269 
memp
->
√xt
 = 
memp_èb
[
i
];

270 
memp_èb
[
i
] = 
memp
;

271 
memp
 = (mem∞*)((
u8_t
 *)mem∞+ 
MEMP_SIZE
 + 
memp_sizes
[
i
]);

274 #i‡
MEMP_OVERFLOW_CHECK


275 
	`memp_ovîÊow_öô
();

277 
	`memp_ovîÊow_check_Æl
();

279 
	}
}

293 #i‡!
MEMP_OVERFLOW_CHECK


294 
	$memp_mÆloc
(
memp_t
 
ty≥
)

296 
	$memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
)

299 
memp
 *memp;

300 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

302 
	`LWIP_ERROR
("memp_mÆloc:Åy≥ < MEMP_MAX", (
ty≥
 < 
MEMP_MAX
),  
NULL
;);

304 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

305 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

306 
	`memp_ovîÊow_check_Æl
();

309 
memp
 = 
memp_èb
[
ty≥
];

311 i‡(
memp
 !
NULL
) {

312 
memp_èb
[
ty≥
] = 
memp
->
√xt
;

313 #i‡
MEMP_OVERFLOW_CHECK


314 
memp
->
√xt
 = 
NULL
;

315 
memp
->
fûe
 = file;

316 
memp
->
löe
 =Üine;

318 
	`MEMP_STATS_INC_USED
(
u£d
, 
ty≥
);

319 
	`LWIP_ASSERT
("memp_malloc: mempÖroperlyáligned",

320 ((
mem_±r_t
)
memp
 % 
MEM_ALIGNMENT
) == 0);

321 
memp
 = (memp*)((
u8_t
*)mem∞+ 
MEMP_SIZE
);

323 
	`LWIP_DEBUGF
(
MEMP_DEBUG
 | 2, ("memp_mÆloc: ouào‡mem‹y i¿poﬁ %s\n", 
memp_desc
[
ty≥
]));

324 
	`MEMP_STATS_INC
(
îr
, 
ty≥
);

327 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

329  
memp
;

330 
	}
}

339 
	$memp_‰ì
(
memp_t
 
ty≥
, *
mem
)

341 
memp
 *memp;

342 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

344 i‡(
mem
 =
NULL
) {

347 
	`LWIP_ASSERT
("memp_free: memÖroperlyáligned",

348 ((
mem_±r_t
)
mem
 % 
MEM_ALIGNMENT
) == 0);

350 
memp
 = (mem∞*)((
u8_t
*)
mem
 - 
MEMP_SIZE
);

352 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

353 #i‡
MEMP_OVERFLOW_CHECK


354 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

355 
	`memp_ovîÊow_check_Æl
();

357 
	`memp_ovîÊow_check_ñemít
(
memp
, 
memp_sizes
[
ty≥
]);

361 
	`MEMP_STATS_DEC
(
u£d
, 
ty≥
);

363 
memp
->
√xt
 = 
memp_èb
[
ty≥
];

364 
memp_èb
[
ty≥
] = 
memp
;

366 #i‡
MEMP_SANITY_CHECK


367 
	`LWIP_ASSERT
("mem∞ßnôy", 
	`memp_ßnôy
());

370 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

371 
	}
}

	@net/lwip/core/netif.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/t˝.h
"

46 
	~"lwù/¢mp.h
"

47 
	~"lwù/igmp.h
"

48 
	~"√tif/ëh¨p.h
"

49 #i‡
ENABLE_LOOPBACK


50 
	~"lwù/sys.h
"

51 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


52 
	~"lwù/t˝ù.h
"

56 #i‡
LWIP_NETIF_STATUS_CALLBACK


57 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ i‡“->
°©us_ˇŒback
Ë“->°©us_ˇŒback)“); }

	)

59 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ }

	)

62 #i‡
LWIP_NETIF_LINK_CALLBACK


63 
	#NETIF_LINK_CALLBACK
(
n
Ë{ i‡“->
lök_ˇŒback
Ë“->lök_ˇŒback)“); }

	)

65 
	#NETIF_LINK_CALLBACK
(
n
Ë{ }

	)

68 
√tif
 *
	g√tif_li°
;

69 
√tif
 *
	g√tif_deÁu…
;

85 
√tif
 *

86 
√tif_add
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

87 
ù_addr
 *
gw
,

88 *
°©e
,

89 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

90 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

92 
u8_t
 
√ti‚um
 = 0;

95 
√tif
->
ù_addr
.
addr
 = 0;

96 
√tif
->
√tmask
.
addr
 = 0;

97 
√tif
->
gw
.
addr
 = 0;

98 
√tif
->
Êags
 = 0;

99 #i‡
LWIP_DHCP


101 
√tif
->
dh˝
 = 
NULL
;

103 #i‡
LWIP_AUTOIP


105 
√tif
->
autoù
 = 
NULL
;

107 #i‡
LWIP_NETIF_STATUS_CALLBACK


108 
√tif
->
°©us_ˇŒback
 = 
NULL
;

110 #i‡
LWIP_NETIF_LINK_CALLBACK


111 
√tif
->
lök_ˇŒback
 = 
NULL
;

113 #i‡
LWIP_IGMP


114 
√tif
->
igmp_mac_fûãr
 = 
NULL
;

116 #i‡
ENABLE_LOOPBACK


117 
√tif
->
lo›_fú°
 = 
NULL
;

118 
√tif
->
lo›_œ°
 = 
NULL
;

122 
√tif
->
°©e
 = state;

123 
√tif
->
num
 = 
√ti‚um
++;

124 
√tif
->
öput
 = input;

125 #i‡
LWIP_NETIF_HWADDRHINT


126 
√tif
->
addr_höt
 = 
NULL
;

128 #i‡
ENABLE_LOOPBACK
 && 
LWIP_LOOPBACK_MAX_PBUFS


129 
√tif
->
lo›_˙t_cuºít
 = 0;

132 
	`√tif_£t_addr
(
√tif
, 
ùaddr
, 
√tmask
, 
gw
);

135 i‡(
	`öô
(
√tif
Ë!
ERR_OK
) {

136  
NULL
;

140 
√tif
->
√xt
 = 
√tif_li°
;

141 
√tif_li°
 = 
√tif
;

142 
	`¢mp_öc_iÊi°
();

144 #i‡
LWIP_IGMP


146 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

147 
	`igmp_°¨t
–
√tif
);

151 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif:ádded interface %c%c IPáddr ",

152 
√tif
->
«me
[0],Çetif->name[1]));

153 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
ùaddr
);

154 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("Çetmask "));

155 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
√tmask
);

156 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, (" gw "));

157 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
gw
);

158 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("\n"));

159  
√tif
;

160 
	}
}

172 
	$√tif_£t_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

173 
ù_addr
 *
gw
)

175 
	`√tif_£t_ùaddr
(
√tif
, 
ùaddr
);

176 
	`√tif_£t_√tmask
(
√tif
, 
√tmask
);

177 
	`√tif_£t_gw
(
√tif
, 
gw
);

178 
	}
}

185 
	$√tif_ªmove
(
√tif
 *Çetif)

187 i‡–
√tif
 =
NULL
 ) ;

189 #i‡
LWIP_IGMP


191 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

192 
	`igmp_°›
–
√tif
);

196 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

199 i‡(
√tif_li°
 =
√tif
) {

200 
√tif_li°
 = 
√tif
->
√xt
;

201 
	`¢mp_dec_iÊi°
();

205 
√tif
 * 
tmpNëif
;

206 
tmpNëif
 = 
√tif_li°
;ÅmpNëi‡!
NULL
;ÅmpNëi‡tmpNëif->
√xt
) {

207 i‡(
tmpNëif
->
√xt
 =
√tif
) {

208 
tmpNëif
->
√xt
 = 
√tif
->next;

209 
	`¢mp_dec_iÊi°
();

213 i‡(
tmpNëif
 =
NULL
)

217 i‡(
√tif_deÁu…
 =
√tif
)

219 
	`√tif_£t_deÁu…
(
NULL
);

220 
	`LWIP_DEBUGF
–
NETIF_DEBUG
, ("netif_remove:ÑemovedÇetif\n") );

221 
	}
}

229 
√tif
 *

230 
	$√tif_föd
(*
«me
)

232 
√tif
 *netif;

233 
u8_t
 
num
;

235 i‡(
«me
 =
NULL
) {

236  
NULL
;

239 
num
 = 
«me
[2] - '0';

241 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

242 i‡(
num
 =
√tif
->num &&

243 
«me
[0] =
√tif
->name[0] &&

244 
«me
[1] =
√tif
->name[1]) {

245 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: found %c%c\n", 
«me
[0],Çame[1]));

246  
√tif
;

249 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: didn'àföd %c%c\n", 
«me
[0],Çame[1]));

250  
NULL
;

251 
	}
}

263 
	$√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

267 #i‡
LWIP_TCP


268 
t˝_pcb
 *
pcb
;

269 
t˝_pcb_li°í
 *
Õcb
;

272 i‡((
	`ù_addr_cmp
(
ùaddr
, &(
√tif
->
ù_addr
))) == 0)

275 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("netif_set_ipaddr:Çetifáddress being changed\n"));

276 
pcb
 = 
t˝_a˘ive_pcbs
;

277 
pcb
 !
NULL
) {

279 i‡(
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

281 
t˝_pcb
 *
√xt
 = 
pcb
->next;

282 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("√tif_£t_ùaddr:áb‹tög TCPÖcb %p\n", (*)
pcb
));

283 
	`t˝_ab‹t
(
pcb
);

284 
pcb
 = 
√xt
;

286 
pcb
 =Öcb->
√xt
;

289 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

291 i‡((!(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)))) &&

292 (
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
√tif
->
ù_addr
)))) {

295 
	`ù_addr_£t
(&(
Õcb
->
loˇl_ù
), 
ùaddr
);

300 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

301 
	`¢mp_dñëe_ùπeidx_åì
(0,
√tif
);

303 
	`ù_addr_£t
(&(
√tif
->
ù_addr
), 
ùaddr
);

304 
	`¢mp_ö£π_ùaddridx_åì
(
√tif
);

305 
	`¢mp_ö£π_ùπeidx_åì
(0,
√tif
);

307 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: IPáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

308 
√tif
->
«me
[0],Çetif->name[1],

309 
	`ù4_addr1
(&
√tif
->
ù_addr
),

310 
	`ù4_addr2
(&
√tif
->
ù_addr
),

311 
	`ù4_addr3
(&
√tif
->
ù_addr
),

312 
	`ù4_addr4
(&
√tif
->
ù_addr
)));

313 
	}
}

324 
	$√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
)

326 
	`ù_addr_£t
(&(
√tif
->
gw
), gw);

327 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: GWáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

328 
√tif
->
«me
[0],Çetif->name[1],

329 
	`ù4_addr1
(&
√tif
->
gw
),

330 
	`ù4_addr2
(&
√tif
->
gw
),

331 
	`ù4_addr3
(&
√tif
->
gw
),

332 
	`ù4_addr4
(&
√tif
->
gw
)));

333 
	}
}

345 
	$√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
)

347 
	`¢mp_dñëe_ùπeidx_åì
(0, 
√tif
);

349 
	`ù_addr_£t
(&(
√tif
->
√tmask
),Çetmask);

350 
	`¢mp_ö£π_ùπeidx_åì
(0, 
√tif
);

351 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif:Çëmask o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

352 
√tif
->
«me
[0],Çetif->name[1],

353 
	`ù4_addr1
(&
√tif
->
√tmask
),

354 
	`ù4_addr2
(&
√tif
->
√tmask
),

355 
	`ù4_addr3
(&
√tif
->
√tmask
),

356 
	`ù4_addr4
(&
√tif
->
√tmask
)));

357 
	}
}

366 
	$√tif_£t_deÁu…
(
√tif
 *netif)

368 i‡(
√tif
 =
NULL
)

371 
	`¢mp_dñëe_ùπeidx_åì
(1, 
√tif
);

376 
	`¢mp_ö£π_ùπeidx_åì
(1, 
√tif
);

378 
√tif_deÁu…
 = 
√tif
;

379 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif: setting default interface %c%c\n",

380 
√tif
 ?Çëif->
«me
[0] : '\'',Çetif ?Çetif->name[1] : '\''));

381 
	}
}

392 
	$√tif_£t_up
(
√tif
 *netif)

394 i‡–!(
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )) {

395 
√tif
->
Êags
 |
NETIF_FLAG_UP
;

397 #i‡
LWIP_SNMP


398 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

401 
	`NETIF_LINK_CALLBACK
(
√tif
);

402 
	`NETIF_STATUS_CALLBACK
(
√tif
);

404 #i‡
LWIP_ARP


410 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

411 
	`ëh¨p_quîy
(
√tif
, &“ëif->
ù_addr
), 
NULL
);

416 
	}
}

426 
	$√tif_£t_down
(
√tif
 *netif)

428 i‡–
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )

430 
√tif
->
Êags
 &~
NETIF_FLAG_UP
;

431 #i‡
LWIP_SNMP


432 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

435 
	`NETIF_LINK_CALLBACK
(
√tif
);

436 
	`NETIF_STATUS_CALLBACK
(
√tif
);

438 
	}
}

443 
u8_t
 
	$√tif_is_up
(
√tif
 *netif)

445  (
√tif
->
Êags
 & 
NETIF_FLAG_UP
)?1:0;

446 
	}
}

448 #i‡
LWIP_NETIF_STATUS_CALLBACK


452 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif ))

454 i‡–
√tif
 )

455 
√tif
->
°©us_ˇŒback
 = status_callback;

456 
	}
}

459 #i‡
LWIP_NETIF_LINK_CALLBACK


463 
	$√tif_£t_lök_up
(
√tif
 *netif )

465 
√tif
->
Êags
 |
NETIF_FLAG_LINK_UP
;

467 #i‡
LWIP_ARP


473 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

474 
	`ëh¨p_quîy
(
√tif
, &“ëif->
ù_addr
), 
NULL
);

478 #i‡
LWIP_IGMP


480 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

481 
	`igmp_ªp‹t_groups
–
√tif
);

485 
	`NETIF_LINK_CALLBACK
(
√tif
);

486 
	}
}

491 
	$√tif_£t_lök_down
(
√tif
 *netif )

493 
√tif
->
Êags
 &~
NETIF_FLAG_LINK_UP
;

494 
	`NETIF_LINK_CALLBACK
(
√tif
);

495 
	}
}

500 
u8_t
 
	$√tif_is_lök_up
(
√tif
 *netif)

502  (
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) ? 1 : 0;

503 
	}
}

508 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif ))

510 i‡(
√tif
) {

511 
√tif
->
lök_ˇŒback
 =Üink_callback;

513 
	}
}

516 #i‡
ENABLE_LOOPBACK


531 
îr_t


532 
	$√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

533 
ù_addr
 *
ùaddr
)

535 
pbuf
 *
r
;

536 
îr_t
 
îr
;

537 
pbuf
 *
œ°
;

538 #i‡
LWIP_LOOPBACK_MAX_PBUFS


539 
u8_t
 
˛í
 = 0;

541 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

542 
	`LWIP_UNUSED_ARG
(
ùaddr
);

545 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

546 i‡(
r
 =
NULL
) {

547  
ERR_MEM
;

549 #i‡
LWIP_LOOPBACK_MAX_PBUFS


550 
˛í
 = 
	`pbuf_˛í
(
r
);

552 if(((
√tif
->
lo›_˙t_cuºít
 + 
˛í
) <Çetif->loop_cnt_current) ||

553 ((
√tif
->
lo›_˙t_cuºít
 + 
˛í
Ë> 
LWIP_LOOPBACK_MAX_PBUFS
)) {

554 
	`pbuf_‰ì
(
r
);

555 
r
 = 
NULL
;

556  
ERR_MEM
;

558 
√tif
->
lo›_˙t_cuºít
 +
˛í
;

562 i‡((
îr
 = 
	`pbuf_c›y
(
r
, 
p
)Ë!
ERR_OK
) {

563 
	`pbuf_‰ì
(
r
);

564 
r
 = 
NULL
;

565  
îr
;

572 
œ°
 = 
r
;Üa°->
√xt
 !
NULL
;Üast =Üast->next);

574 
	`SYS_ARCH_PROTECT
(
Àv
);

575 if(
√tif
->
lo›_fú°
 !
NULL
) {

576 
	`LWIP_ASSERT
("i‡fú° !NULL,Üa° mu°álsÿbê!NULL", 
√tif
->
lo›_œ°
 !
NULL
);

577 
√tif
->
lo›_œ°
->
√xt
 = 
r
;

578 
√tif
->
lo›_œ°
 = 
œ°
;

580 
√tif
->
lo›_fú°
 = 
r
;

581 
√tif
->
lo›_œ°
 = 
œ°
;

583 
	`SYS_ARCH_UNPROTECT
(
Àv
);

585 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


587 
	`t˝ù_ˇŒback
(
√tif_pﬁl
, 
√tif
);

590  
ERR_OK
;

591 
	}
}

600 
	$√tif_pﬁl
(
√tif
 *netif)

602 
pbuf
 *
ö
;

603 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

607 
	`SYS_ARCH_PROTECT
(
Àv
);

608 
ö
 = 
√tif
->
lo›_fú°
;

609 if(
ö
 !
NULL
) {

610 
pbuf
 *
ö_íd
 = 
ö
;

611 #i‡
LWIP_LOOPBACK_MAX_PBUFS


612 
u8_t
 
˛í
 = 
	`pbuf_˛í
(
ö
);

614 
	`LWIP_ASSERT
("netif->loop_cnt_current underflow",

615 ((
√tif
->
lo›_˙t_cuºít
 - 
˛í
) <Çetif->loop_cnt_current));

616 
√tif
->
lo›_˙t_cuºít
 -
˛í
;

618 
ö_íd
->
Àn
 !ö_íd->
tŸ_Àn
) {

619 
	`LWIP_ASSERT
("bogu†pbuf:Üí !tŸ_À¿buà√xà=NULL!", 
ö_íd
->
√xt
 !
NULL
);

620 
ö_íd
 = in_íd->
√xt
;

623 if(
ö_íd
 =
√tif
->
lo›_œ°
) {

625 
√tif
->
lo›_fú°
 =Çëif->
lo›_œ°
 = 
NULL
;

628 
√tif
->
lo›_fú°
 = 
ö_íd
->
√xt
;

629 
	`LWIP_ASSERT
("shouldÇŸ bênuŒ sö˚ fú° !œ°!", 
√tif
->
lo›_fú°
 !
NULL
);

632 
ö_íd
->
√xt
 = 
NULL
;

634 
	`SYS_ARCH_UNPROTECT
(
Àv
);

636 if(
ö
 !
NULL
) {

638 if(
	`ù_öput
(
ö
, 
√tif
Ë!
ERR_OK
) {

639 
	`pbuf_‰ì
(
ö
);

642 
ö
 = 
NULL
;

645 } 
√tif
->
lo›_fú°
 !
NULL
);

646 
	}
}

648 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


653 
	$√tif_pﬁl_Æl
()

655 
√tif
 *√ti‡
√tif_li°
;

657 
√tif
 !
NULL
) {

658 
	`√tif_pﬁl
(
√tif
);

660 
√tif
 =Çëif->
√xt
;

662 
	}
}

	@net/lwip/core/pbuf.c

65 
	~"lwù/›t.h
"

67 
	~"lwù/°©s.h
"

68 
	~"lwù/def.h
"

69 
	~"lwù/mem.h
"

70 
	~"lwù/memp.h
"

71 
	~"lwù/pbuf.h
"

72 
	~"lwù/sys.h
"

73 
	~"¨ch/≥rf.h
"

75 
	~<°rög.h
>

77 
	#SIZEOF_STRUCT_PBUF
 
	`LWIP_MEM_ALIGN_SIZE
((
pbuf
))

	)

80 
	#PBUF_POOL_BUFSIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
PBUF_POOL_BUFSIZE
)

	)

113 
pbuf
 *

114 
	$pbuf_Æloc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
)

116 
pbuf
 *
p
, *
q
, *
r
;

117 
u16_t
 
off£t
;

118 
s32_t
 
ªm_Àn
;

119 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
")\n", 
Àngth
));

122 
off£t
 = 0;

123 
œyî
) {

124 
PBUF_TRANSPORT
:

126 
off£t
 +
PBUF_TRANSPORT_HLEN
;

128 
PBUF_IP
:

130 
off£t
 +
PBUF_IP_HLEN
;

132 
PBUF_LINK
:

134 
off£t
 +
PBUF_LINK_HLEN
;

136 
PBUF_RAW
:

139 
	`LWIP_ASSERT
("pbuf_alloc: badÖbufÜayer", 0);

140  
NULL
;

143 
ty≥
) {

144 
PBUF_POOL
:

146 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

147 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc:áŒoˇãdÖbu‡%p\n", (*)
p
));

148 i‡(
p
 =
NULL
) {

149  
NULL
;

151 
p
->
ty≥
 =Åype;

152 
p
->
√xt
 = 
NULL
;

155 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + (
SIZEOF_STRUCT_PBUF
 + 
off£t
)));

156 
	`LWIP_ASSERT
("pbuf_alloc:ÖbufÖ->payloadÖroperlyáligned",

157 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

159 
p
->
tŸ_Àn
 = 
Àngth
;

161 
p
->
Àn
 = 
	`LWIP_MIN
(
Àngth
, 
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
));

162 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

163 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

164 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

166 
p
->
ªf
 = 1;

171 
r
 = 
p
;

173 
ªm_Àn
 = 
Àngth
 - 
p
->
Àn
;

175 
ªm_Àn
 > 0) {

176 
q
 = 
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

177 i‡(
q
 =
NULL
) {

179 
	`pbuf_‰ì
(
p
);

181  
NULL
;

183 
q
->
ty≥
 =Åype;

184 
q
->
Êags
 = 0;

185 
q
->
√xt
 = 
NULL
;

187 
r
->
√xt
 = 
q
;

189 
	`LWIP_ASSERT
("ªm_À¿< max_u16_t", 
ªm_Àn
 < 0xffff);

190 
q
->
tŸ_Àn
 = (
u16_t
)
ªm_Àn
;

192 
q
->
Àn
 = 
	`LWIP_MIN
((
u16_t
)
ªm_Àn
, 
PBUF_POOL_BUFSIZE_ALIGNED
);

193 
q
->
∑ylﬂd
 = (*)((
u8_t
 *)q + 
SIZEOF_STRUCT_PBUF
);

194 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf q->payloadÖroperlyáligned",

195 ((
mem_±r_t
)
q
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

196 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

197 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

198 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

199 
q
->
ªf
 = 1;

201 
ªm_Àn
 -
q
->
Àn
;

203 
r
 = 
q
;

209 
PBUF_RAM
:

211 
p
 = (
pbuf
*)
	`mem_mÆloc
(
	`LWIP_MEM_ALIGN_SIZE
(
SIZEOF_STRUCT_PBUF
 + 
off£t
Ë+ LWIP_MEM_ALIGN_SIZE(
Àngth
));

212 i‡(
p
 =
NULL
) {

213  
NULL
;

216 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + 
SIZEOF_STRUCT_PBUF
 + 
off£t
));

217 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

218 
p
->
√xt
 = 
NULL
;

219 
p
->
ty≥
 =Åype;

221 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf->payloadÖroperlyáligned",

222 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

225 
PBUF_ROM
:

227 
PBUF_REF
:

229 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF
);

230 i‡(
p
 =
NULL
) {

231 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_alloc: CouldÇotállocate MEMP_PBUF for PBUF_%s.\n",

232 (
ty≥
 =
PBUF_ROM
) ? "ROM" : "REF"));

233  
NULL
;

236 
p
->
∑ylﬂd
 = 
NULL
;

237 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

238 
p
->
√xt
 = 
NULL
;

239 
p
->
ty≥
 =Åype;

242 
	`LWIP_ASSERT
("pbuf_alloc:ÉrroneousÅype", 0);

243  
NULL
;

246 
p
->
ªf
 = 1;

248 
p
->
Êags
 = 0;

249 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
"Ë=%p\n", 
Àngth
, (*)
p
));

250  
p
;

251 
	}
}

270 
	$pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
√w_Àn
)

272 
pbuf
 *
q
;

273 
u16_t
 
ªm_Àn
;

274 
s32_t
 
grow
;

276 
	`LWIP_ASSERT
("pbuf_ªÆloc:Ö !NULL", 
p
 !
NULL
);

277 
	`LWIP_ASSERT
("pbuf_ªÆloc: s™êp->ty≥", 
p
->
ty≥
 =
PBUF_POOL
 ||

278 
p
->
ty≥
 =
PBUF_ROM
 ||

279 
p
->
ty≥
 =
PBUF_RAM
 ||

280 
p
->
ty≥
 =
PBUF_REF
);

283 i‡(
√w_Àn
 >
p
->
tŸ_Àn
) {

290 
grow
 = 
√w_Àn
 - 
p
->
tŸ_Àn
;

293 
ªm_Àn
 = 
√w_Àn
;

294 
q
 = 
p
;

296 
ªm_Àn
 > 
q
->
Àn
) {

298 
ªm_Àn
 -
q
->
Àn
;

300 
	`LWIP_ASSERT
("grow < max_u16_t", 
grow
 < 0xffff);

301 
q
->
tŸ_Àn
 +(
u16_t
)
grow
;

303 
q
 = q->
√xt
;

304 
	`LWIP_ASSERT
("pbuf_ªÆloc: q !NULL", 
q
 !
NULL
);

311 i‡((
q
->
ty≥
 =
PBUF_RAM
Ë&& (
ªm_Àn
 !q->
Àn
)) {

313 
q
 = 
	`mem_ªÆloc
(q, (
u8_t
 *)q->
∑ylﬂd
 - (u8_à*)q + 
ªm_Àn
);

314 
	`LWIP_ASSERT
("mem_ªÆlo¯givêq =NULL", 
q
 !
NULL
);

317 
q
->
Àn
 = 
ªm_Àn
;

318 
q
->
tŸ_Àn
 = q->
Àn
;

321 i‡(
q
->
√xt
 !
NULL
) {

323 
	`pbuf_‰ì
(
q
->
√xt
);

326 
q
->
√xt
 = 
NULL
;

328 
	}
}

350 
u8_t


351 
	$pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size_ö¸emít
)

353 
u16_t
 
ty≥
;

354 *
∑ylﬂd
;

355 
u16_t
 
ö¸emít_magnôude
;

357 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

358 i‡((
hódî_size_ö¸emít
 =0Ë|| (
p
 =
NULL
))

361 i‡(
hódî_size_ö¸emít
 < 0){

362 
ö¸emít_magnôude
 = -
hódî_size_ö¸emít
;

364 
	`LWIP_ERROR
("ö¸emít_magnôudê<p->Àn", (
ö¸emít_magnôude
 <
p
->
Àn
),  1;);

366 
ö¸emít_magnôude
 = 
hódî_size_ö¸emít
;

371 
	`LWIP_ASSERT
("p->type == PBUF_RAM ||Ö->type == PBUF_POOL",

372 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_POOL
);

374 
	`LWIP_ASSERT
("p->payload - increment_magnitude >=Ö + SIZEOF_STRUCT_PBUF",

375 (
u8_t
 *)
p
->
∑ylﬂd
 - 
ö¸emít_magnôude
 >(u8_à*Ì + 
SIZEOF_STRUCT_PBUF
);

379 
ty≥
 = 
p
->type;

381 
∑ylﬂd
 = 
p
->payload;

384 i‡(
ty≥
 =
PBUF_RAM
 ||Åy≥ =
PBUF_POOL
) {

386 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

388 i‡((
u8_t
 *)
p
->
∑ylﬂd
 < (u8_à*Ì + 
SIZEOF_STRUCT_PBUF
) {

389 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_header: failedás %p < %p (notÉnough space forÇew header size)\n",

390 (*)
p
->
∑ylﬂd
,

391 (*)(
p
 + 1)));\

393 
p
->
∑ylﬂd
 =Öayload;

398 } i‡(
ty≥
 =
PBUF_REF
 ||Åy≥ =
PBUF_ROM
) {

400 i‡((
hódî_size_ö¸emít
 < 0Ë&& (
ö¸emít_magnôude
 <
p
->
Àn
)) {

402 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

411 
	`LWIP_ASSERT
("badÖbufÅype", 0);

415 
p
->
Àn
 +
hódî_size_ö¸emít
;

416 
p
->
tŸ_Àn
 +
hódî_size_ö¸emít
;

418 
	`LWIP_DEBUGF
(
PBUF_DEBUG
, ("pbuf_hódî: old %∞√w %∞(%"
S16_F
")\n",

419 (*)
∑ylﬂd
, (*)
p
->∑ylﬂd, 
hódî_size_ö¸emít
));

422 
	}
}

457 
u8_t


458 
	$pbuf_‰ì
(
pbuf
 *
p
)

460 
u16_t
 
ty≥
;

461 
pbuf
 *
q
;

462 
u8_t
 
cou¡
;

464 i‡(
p
 =
NULL
) {

465 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

467 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_free(p == NULL) was called.\n"));

470 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_‰ì(%p)\n", (*)
p
));

472 
PERF_START
;

474 
	`LWIP_ASSERT
("pbuf_free: saneÅype",

475 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_ROM
 ||

476 
p
->
ty≥
 =
PBUF_REF
 ||Ö->ty≥ =
PBUF_POOL
);

478 
cou¡
 = 0;

481 
p
 !
NULL
) {

482 
u16_t
 
ªf
;

483 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

487 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

489 
	`LWIP_ASSERT
("pbuf_‰ì:Ö->ª‡> 0", 
p
->
ªf
 > 0);

491 
ªf
 = --(
p
->ref);

492 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

494 i‡(
ªf
 == 0) {

496 
q
 = 
p
->
√xt
;

497 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: dóŒoˇtög %p\n", (*)
p
));

498 
ty≥
 = 
p
->type;

500 i‡(
ty≥
 =
PBUF_POOL
) {

501 
	`memp_‰ì
(
MEMP_PBUF_POOL
, 
p
);

503 } i‡(
ty≥
 =
PBUF_ROM
 ||Åy≥ =
PBUF_REF
) {

504 
	`memp_‰ì
(
MEMP_PBUF
, 
p
);

507 
	`mem_‰ì
(
p
);

509 
cou¡
++;

511 
p
 = 
q
;

515 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: %∞ha†ª‡%"
U16_F
",Éndög hîe.\n", (*)
p
, 
ªf
));

517 
p
 = 
NULL
;

520 
	`PERF_STOP
("pbuf_free");

522  
cou¡
;

523 
	}
}

532 
u8_t


533 
	$pbuf_˛í
(
pbuf
 *
p
)

535 
u8_t
 
Àn
;

537 
Àn
 = 0;

538 
p
 !
NULL
) {

539 ++
Àn
;

540 
p
 =Ö->
√xt
;

542  
Àn
;

543 
	}
}

552 
	$pbuf_ªf
(
pbuf
 *
p
)

554 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

556 i‡(
p
 !
NULL
) {

557 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

558 ++(
p
->
ªf
);

559 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

561 
	}
}

574 
	$pbuf_ˇt
(
pbuf
 *
h
, pbu‡*
t
)

576 
pbuf
 *
p
;

578 
	`LWIP_ERROR
("(h != NULL) && (t != NULL) (programmer violates API)",

579 ((
h
 !
NULL
Ë&& (
t
 != NULL)), ;);

582 
p
 = 
h
;Ö->
√xt
 !
NULL
;Ö =Ö->next) {

584 
p
->
tŸ_Àn
 +
t
->tot_len;

587 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿(o‡œ°Öbu‡ö chaö)", 
p
->
tŸ_Àn
 =p->
Àn
);

588 
	`LWIP_ASSERT
("p->√xà=NULL", 
p
->
√xt
 =
NULL
);

590 
p
->
tŸ_Àn
 +
t
->tot_len;

592 
p
->
√xt
 = 
t
;

596 
	}
}

615 
	$pbuf_chaö
(
pbuf
 *
h
, pbu‡*
t
)

617 
	`pbuf_ˇt
(
h
, 
t
);

619 
	`pbuf_ªf
(
t
);

620 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_FRESH
 | 2, ("pbuf_chaö: %∞ª„ªn˚†%p\n", (*)
h
, (*)
t
));

621 
	}
}

631 
pbuf
 *

632 
	$pbuf_dechaö
(
pbuf
 *
p
)

634 
pbuf
 *
q
;

635 
u8_t
 
èû_g⁄e
 = 1;

637 
q
 = 
p
->
√xt
;

639 i‡(
q
 !
NULL
) {

641 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿+ q->tŸ_Àn", 
q
->
tŸ_Àn
 =
p
->tŸ_À¿-Ö->
Àn
);

643 
q
->
tŸ_Àn
 = 
p
->tŸ_À¿-Ö->
Àn
;

645 
p
->
√xt
 = 
NULL
;

647 
p
->
tŸ_Àn
 =Ö->
Àn
;

649 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
, ("pbuf_dechaö: uƒe„ªncög %p\n", (*)
q
));

650 
èû_g⁄e
 = 
	`pbuf_‰ì
(
q
);

651 i‡(
èû_g⁄e
 > 0) {

652 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
,

653 ("pbuf_dechaö: dóŒoˇãd %∞◊†ô i†nÿl⁄gîÑe„ªn˚d)\n", (*)
q
));

658 
	`LWIP_ASSERT
("p->tŸ_À¿=p->Àn", 
p
->
tŸ_Àn
 =p->
Àn
);

659  ((
èû_g⁄e
 > 0Ë? 
NULL
 : 
q
);

660 
	}
}

680 
îr_t


681 
	$pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
)

683 
u16_t
 
off£t_to
=0, 
off£t_‰om
=0, 
Àn
;

685 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_copy(%p, %p)\n",

686 (*)
p_to
, (*)
p_‰om
));

689 
	`LWIP_ERROR
("pbuf_c›y:Å¨gëÇŸ bigÉnoughÅÿhﬁd sour˚", ((
p_to
 !
NULL
) &&

690 (
p_‰om
 !
NULL
Ë&& (
p_to
->
tŸ_Àn
 >p_‰om->tŸ_Àn)),  
ERR_ARG
;);

695 
	`LWIP_ASSERT
("p_tÿ!NULL", 
p_to
 !
NULL
);

697 i‡((
p_to
->
Àn
 - 
off£t_to
Ë>(
p_‰om
->À¿- 
off£t_‰om
)) {

699 
Àn
 = 
p_‰om
->À¿- 
off£t_‰om
;

702 
Àn
 = 
p_to
->À¿- 
off£t_to
;

704 
	`MEMCPY
((
u8_t
*)
p_to
->
∑ylﬂd
 + 
off£t_to
, (u8_t*)
p_‰om
->∑ylﬂd + 
off£t_‰om
, 
Àn
);

705 
off£t_to
 +
Àn
;

706 
off£t_‰om
 +
Àn
;

707 
	`LWIP_ASSERT
("off£t_tÿ<p_to->Àn", 
off£t_to
 <
p_to
->
Àn
);

708 i‡(
off£t_to
 =
p_to
->
Àn
) {

710 
off£t_to
 = 0;

711 
p_to
 =Ö_to->
√xt
;

713 
	`LWIP_ASSERT
("off£t_‰om <p_‰om->Àn", 
off£t_‰om
 <
p_‰om
->
Àn
);

714 i‡(
off£t_‰om
 >
p_‰om
->
Àn
) {

716 
off£t_‰om
 = 0;

717 
p_‰om
 =Ö_‰om->
√xt
;

720 if((
p_‰om
 !
NULL
Ë&& (p_‰om->
Àn
 =p_‰om->
tŸ_Àn
)) {

722 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

723 (
p_‰om
->
√xt
 =
NULL
),  
ERR_VAL
;);

725 if((
p_to
 !
NULL
Ë&& (p_to->
Àn
 =p_to->
tŸ_Àn
)) {

727 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

728 (
p_to
->
√xt
 =
NULL
),  
ERR_VAL
;);

730 } 
p_‰om
);

731 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("pbuf_copy:Énd of chainÑeached.\n"));

732  
ERR_OK
;

733 
	}
}

744 
u16_t


745 
	$pbuf_c›y_∑πül
(
pbuf
 *
buf
, *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
)

747 
pbuf
 *
p
;

748 
u16_t
 
À·
;

749 
u16_t
 
buf_c›y_Àn
;

750 
u16_t
 
c›õd_tŸÆ
 = 0;

752 
	`LWIP_ERROR
("√tbuf_c›y_∑πül: invÆid buf", (
buf
 !
NULL
),  0;);

753 
	`LWIP_ERROR
("√tbuf_c›y_∑πül: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

755 
À·
 = 0;

757 if((
buf
 =
NULL
Ë|| (
d©≠å
 == NULL)) {

762 
p
 = 
buf
; 
Àn
 !0 &&Ö !
NULL
;Ö =Ö->
√xt
) {

763 i‡((
off£t
 !0Ë&& (off£à>
p
->
Àn
)) {

765 
off£t
 -
p
->
Àn
;

768 
buf_c›y_Àn
 = 
p
->
Àn
 - 
off£t
;

769 i‡(
buf_c›y_Àn
 > 
Àn
)

770 
buf_c›y_Àn
 = 
Àn
;

772 
	`MEMCPY
(&((*)
d©≠å
)[
À·
], &((*)
p
->
∑ylﬂd
)[
off£t
], 
buf_c›y_Àn
);

773 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

774 
À·
 +
buf_c›y_Àn
;

775 
Àn
 -
buf_c›y_Àn
;

776 
off£t
 = 0;

779  
c›õd_tŸÆ
;

780 
	}
}

	@net/lwip/core/raw.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_RAW


46 
	~"lwù/def.h
"

47 
	~"lwù/memp.h
"

48 
	~"lwù/öë.h
"

49 
	~"lwù/ù_addr.h
"

50 
	~"lwù/√tif.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/°©s.h
"

53 
	~"lwù/¢mp.h
"

54 
	~"¨ch/≥rf.h
"

56 
	~<°rög.h
>

59 
øw_pcb
 *
	gøw_pcbs
;

78 
u8_t


79 
	$øw_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

81 
øw_pcb
 *
pcb
, *
¥ev
;

82 
ù_hdr
 *
ùhdr
;

83 
s16_t
 
¥Ÿo
;

84 
u8_t
 
óãn
 = 0;

86 
	`LWIP_UNUSED_ARG
(
öp
);

88 
ùhdr
 = 
p
->
∑ylﬂd
;

89 
¥Ÿo
 = 
	`IPH_PROTO
(
ùhdr
);

91 
¥ev
 = 
NULL
;

92 
pcb
 = 
øw_pcbs
;

95 (
óãn
 =0Ë&& (
pcb
 !
NULL
)) {

96 i‡(
pcb
->
¥Ÿocﬁ
 =
¥Ÿo
) {

98 i‡(
pcb
->
ªcv
 !
NULL
) {

100 i‡(
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
)) != 0)

103 
p
 = 
NULL
;

104 
óãn
 = 1;

105 i‡(
¥ev
 !
NULL
) {

108 
¥ev
->
√xt
 = 
pcb
->next;

109 
pcb
->
√xt
 = 
øw_pcbs
;

110 
øw_pcbs
 = 
pcb
;

117 
¥ev
 = 
pcb
;

118 
pcb
 =Öcb->
√xt
;

120  
óãn
;

121 
	}
}

137 
îr_t


138 
	$øw_böd
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

140 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

141  
ERR_OK
;

142 
	}
}

157 
îr_t


158 
	$øw_c⁄√˘
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

160 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

161  
ERR_OK
;

162 
	}
}

179 
øw_ªcv
(
øw_pcb
 *
pcb
,

180 
	$u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
upcb
, 
pbuf
 *
p
,

181 
ù_addr
 *
addr
),

182 *
ªcv_¨g
)

185 
pcb
->
ªcv
 =Ñecv;

186 
pcb
->
ªcv_¨g
 =Ñecv_arg;

187 
	}
}

201 
îr_t


202 
	$øw_£ndto
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

204 
îr_t
 
îr
;

205 
√tif
 *netif;

206 
ù_addr
 *
§c_ù
;

207 
pbuf
 *
q
;

209 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_sendto\n"));

212 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

214 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 0, 
PBUF_RAM
);

216 i‡(
q
 =
NULL
) {

217 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("raw_sendto: couldÇotállocate header\n"));

218  
ERR_MEM
;

221 
	`pbuf_chaö
(
q
, 
p
);

223 
	`LWIP_DEBUGF
(
RAW_DEBUG
, ("øw_£ndto:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

226 
q
 = 
p
;

227 if(
	`pbuf_hódî
(
q
, -
IP_HLEN
)) {

228 
	`LWIP_ASSERT
("Can'tÑestore header we justÑemoved!", 0);

229  
ERR_MEM
;

233 i‡((
√tif
 = 
	`ù_rouã
(
ùaddr
)Ë=
NULL
) {

234 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: NÿrouãÅÿ0x%"
X32_F
"\n", 
ùaddr
->
addr
));

236 i‡(
q
 !
p
) {

237 
	`pbuf_‰ì
(
q
);

239  
ERR_RTE
;

242 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

244 
§c_ù
 = &(
√tif
->
ù_addr
);

247 
§c_ù
 = &(
pcb
->
loˇl_ù
);

250 #i‡
LWIP_NETIF_HWADDRHINT


251 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

253 
îr
 = 
	`ù_ouçut_if
 (
q
, 
§c_ù
, 
ùaddr
, 
pcb
->
âl
,Öcb->
tos
,Öcb->
¥Ÿocﬁ
, 
√tif
);

254 #i‡
LWIP_NETIF_HWADDRHINT


255 
√tif
->
addr_höt
 = 
NULL
;

259 i‡(
q
 !
p
) {

261 
	`pbuf_‰ì
(
q
);

263  
îr
;

264 
	}
}

273 
îr_t


274 
	$øw_£nd
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
)

276  
	`øw_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
);

277 
	}
}

288 
	$øw_ªmove
(
øw_pcb
 *
pcb
)

290 
øw_pcb
 *
pcb2
;

292 i‡(
øw_pcbs
 =
pcb
) {

294 
øw_pcbs
 =Ñaw_pcbs->
√xt
;

297 
pcb2
 = 
øw_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

299 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

301 
pcb2
->
√xt
 = 
pcb
->next;

305 
	`memp_‰ì
(
MEMP_RAW_PCB
, 
pcb
);

306 
	}
}

318 
øw_pcb
 *

319 
	$øw_√w
(
u8_t
 
¥Ÿo
) {

320 
øw_pcb
 *
pcb
;

322 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_new\n"));

324 
pcb
 = 
	`memp_mÆloc
(
MEMP_RAW_PCB
);

326 i‡(
pcb
 !
NULL
) {

328 
	`mem£t
(
pcb
, 0, (
øw_pcb
));

329 
pcb
->
¥Ÿocﬁ
 = 
¥Ÿo
;

330 
pcb
->
âl
 = 
RAW_TTL
;

331 
pcb
->
√xt
 = 
øw_pcbs
;

332 
øw_pcbs
 = 
pcb
;

334  
pcb
;

335 
	}
}

	@net/lwip/core/snmp/asn1_dec.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SNMP


42 
	~"lwù/¢mp_a¢1.h
"

52 
îr_t


53 
	$¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
)

55 
u16_t
 
∂í
, 
ba£
;

56 
u8_t
 *
msg_±r
;

58 
∂í
 = 0;

59 
p
 !
NULL
)

61 
ba£
 = 
∂í
;

62 
∂í
 +
p
->
Àn
;

63 i‡(
ofs
 < 
∂í
)

65 
msg_±r
 = 
p
->
∑ylﬂd
;

66 
msg_±r
 +
ofs
 - 
ba£
;

67 *
ty≥
 = *
msg_±r
;

68  
ERR_OK
;

70 
p
 =Ö->
√xt
;

73  
ERR_ARG
;

74 
	}
}

85 
îr_t


86 
	$¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
)

88 
u16_t
 
∂í
, 
ba£
;

89 
u8_t
 *
msg_±r
;

91 
∂í
 = 0;

92 
p
 !
NULL
)

94 
ba£
 = 
∂í
;

95 
∂í
 +
p
->
Àn
;

96 i‡(
ofs
 < 
∂í
)

98 
msg_±r
 = 
p
->
∑ylﬂd
;

99 
msg_±r
 +
ofs
 - 
ba£
;

101 i‡(*
msg_±r
 < 0x80)

104 *
o˘ës_u£d
 = 1;

105 *
Àngth
 = *
msg_±r
;

106  
ERR_OK
;

108 i‡(*
msg_±r
 == 0x80)

111 
u8_t
 
zîos
;

112 
u8_t
 
i
;

114 *
Àngth
 = 0;

115 
zîos
 = 0;

116 
zîos
 != 2)

118 
i
 = 2;

119 
i
 > 0)

121 
i
--;

122 (*
Àngth
) += 1;

123 
ofs
 += 1;

124 i‡(
ofs
 >
∂í
)

127 
p
 =Ö->
√xt
;

128 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

129 
msg_±r
 = 
p
->
∑ylﬂd
;

130 
∂í
 +
p
->
Àn
;

135 
msg_±r
++;

137 i‡(*
msg_±r
 == 0)

139 
zîos
++;

140 i‡(
zîos
 == 2)

143 
i
 = 0;

148 
zîos
 = 0;

152 *
o˘ës_u£d
 = 1;

153  
ERR_OK
;

155 i‡(*
msg_±r
 == 0x81)

158 
ofs
 += 1;

159 i‡(
ofs
 >
∂í
)

162 
p
 =Ö->
√xt
;

163 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

164 
msg_±r
 = 
p
->
∑ylﬂd
;

169 
msg_±r
++;

171 *
Àngth
 = *
msg_±r
;

172 *
o˘ës_u£d
 = 2;

173  
ERR_OK
;

175 i‡(*
msg_±r
 == 0x82)

177 
u8_t
 
i
;

180 
i
 = 2;

181 
i
 > 0)

183 
i
--;

184 
ofs
 += 1;

185 i‡(
ofs
 >
∂í
)

188 
p
 =Ö->
√xt
;

189 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

190 
msg_±r
 = 
p
->
∑ylﬂd
;

191 
∂í
 +
p
->
Àn
;

196 
msg_±r
++;

198 i‡(
i
 == 0)

201 *
Àngth
 |*
msg_±r
;

206 *
Àngth
 = (*
msg_±r
) << 8;

209 *
o˘ës_u£d
 = 3;

210  
ERR_OK
;

216 *
o˘ës_u£d
 = 1 + ((*
msg_±r
) & 0x7f);

217  
ERR_ARG
;

220 
p
 =Ö->
√xt
;

224  
ERR_ARG
;

225 
	}
}

240 
îr_t


241 
	$¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
)

243 
u16_t
 
∂í
, 
ba£
;

244 
u8_t
 *
msg_±r
;

246 
∂í
 = 0;

247 
p
 !
NULL
)

249 
ba£
 = 
∂í
;

250 
∂í
 +
p
->
Àn
;

251 i‡(
ofs
 < 
∂í
)

253 
msg_±r
 = 
p
->
∑ylﬂd
;

254 
msg_±r
 +
ofs
 - 
ba£
;

255 i‡((
Àn
 > 0) && (len < 6))

258 *
vÆue
 = 0;

259 i‡(*
msg_±r
 & 0x80)

262  
ERR_ARG
;

267 i‡((
Àn
 > 1Ë&& (*
msg_±r
 == 0))

270 
Àn
--;

271 
ofs
 += 1;

272 i‡(
ofs
 >
∂í
)

275 
p
 =Ö->
√xt
;

276 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

277 
msg_±r
 = 
p
->
∑ylﬂd
;

278 
∂í
 +
p
->
Àn
;

283 
msg_±r
++;

288 
Àn
 > 1)

290 
Àn
--;

291 *
vÆue
 |*
msg_±r
;

292 *
vÆue
 <<= 8;

293 
ofs
 += 1;

294 i‡(
ofs
 >
∂í
)

297 
p
 =Ö->
√xt
;

298 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

299 
msg_±r
 = 
p
->
∑ylﬂd
;

300 
∂í
 +
p
->
Àn
;

305 
msg_±r
++;

308 *
vÆue
 |*
msg_±r
;

309  
ERR_OK
;

313  
ERR_ARG
;

316 
p
 =Ö->
√xt
;

319  
ERR_ARG
;

320 
	}
}

333 
îr_t


334 
	$¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
)

336 
u16_t
 
∂í
, 
ba£
;

337 
u8_t
 *
msg_±r
;

338 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


339 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
;

341 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


342 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
 + (
s32_t
) - 1;

344 
u8_t
 
sign
;

346 
∂í
 = 0;

347 
p
 !
NULL
)

349 
ba£
 = 
∂í
;

350 
∂í
 +
p
->
Àn
;

351 i‡(
ofs
 < 
∂í
)

353 
msg_±r
 = 
p
->
∑ylﬂd
;

354 
msg_±r
 +
ofs
 - 
ba£
;

355 i‡((
Àn
 > 0) && (len < 5))

357 i‡(*
msg_±r
 & 0x80)

360 *
vÆue
 = -1;

361 
sign
 = 1;

366 *
vÆue
 = 0;

367 
sign
 = 0;

370 
Àn
 > 1)

372 
Àn
--;

373 i‡(
sign
)

375 *
lsb_±r
 &*
msg_±r
;

376 *
vÆue
 <<= 8;

377 *
lsb_±r
 |= 255;

381 *
lsb_±r
 |*
msg_±r
;

382 *
vÆue
 <<= 8;

384 
ofs
 += 1;

385 i‡(
ofs
 >
∂í
)

388 
p
 =Ö->
√xt
;

389 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

390 
msg_±r
 = 
p
->
∑ylﬂd
;

391 
∂í
 +
p
->
Àn
;

396 
msg_±r
++;

399 i‡(
sign
)

401 *
lsb_±r
 &*
msg_±r
;

405 *
lsb_±r
 |*
msg_±r
;

407  
ERR_OK
;

411  
ERR_ARG
;

414 
p
 =Ö->
√xt
;

417  
ERR_ARG
;

418 
	}
}

429 
îr_t


430 
	$¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
)

432 
u16_t
 
∂í
, 
ba£
;

433 
u8_t
 *
msg_±r
;

434 
s32_t
 *
oid_±r
;

436 
∂í
 = 0;

437 
p
 !
NULL
)

439 
ba£
 = 
∂í
;

440 
∂í
 +
p
->
Àn
;

441 i‡(
ofs
 < 
∂í
)

443 
msg_±r
 = 
p
->
∑ylﬂd
;

444 
msg_±r
 +
ofs
 - 
ba£
;

446 
oid
->
Àn
 = 0;

447 
oid_±r
 = &
oid
->
id
[0];

448 i‡(
Àn
 > 0)

451 i‡(*
msg_±r
 == 0x2B)

454 *
oid_±r
 = 1;

455 
oid_±r
++;

456 *
oid_±r
 = 3;

457 
oid_±r
++;

459 i‡(*
msg_±r
 < 40)

461 *
oid_±r
 = 0;

462 
oid_±r
++;

463 *
oid_±r
 = *
msg_±r
;

464 
oid_±r
++;

466 i‡(*
msg_±r
 < 80)

468 *
oid_±r
 = 1;

469 
oid_±r
++;

470 *
oid_±r
 = (*
msg_±r
) - 40;

471 
oid_±r
++;

475 *
oid_±r
 = 2;

476 
oid_±r
++;

477 *
oid_±r
 = (*
msg_±r
) - 80;

478 
oid_±r
++;

480 
oid
->
Àn
 = 2;

486  
ERR_OK
;

488 
Àn
--;

489 i‡(
Àn
 > 0)

491 
ofs
 += 1;

492 i‡(
ofs
 >
∂í
)

495 
p
 =Ö->
√xt
;

496 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

497 
msg_±r
 = 
p
->
∑ylﬂd
;

498 
∂í
 +
p
->
Àn
;

503 
msg_±r
++;

506 (
Àn
 > 0Ë&& (
oid
->À¿< 
LWIP_SNMP_OBJ_ID_LEN
))

509 i‡(*
msg_±r
 & 0x80)

511 
s32_t
 
sub_id
 = 0;

513 (*
msg_±r
 & 0x80Ë&& (
Àn
 > 1))

515 
Àn
--;

516 
sub_id
 = (sub_id << 7Ë+ (*
msg_±r
 & ~0x80);

517 
ofs
 += 1;

518 i‡(
ofs
 >
∂í
)

521 
p
 =Ö->
√xt
;

522 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

523 
msg_±r
 = 
p
->
∑ylﬂd
;

524 
∂í
 +
p
->
Àn
;

529 
msg_±r
++;

532 i‡(!(*
msg_±r
 & 0x80Ë&& (
Àn
 > 0))

535 
Àn
--;

536 
sub_id
 = (sub_id << 7Ë+ *
msg_±r
;

537 *
oid_±r
 = 
sub_id
;

543 
Àn
--;

544 *
oid_±r
 = *
msg_±r
;

546 i‡(
Àn
 > 0)

549 
ofs
 += 1;

550 i‡(
ofs
 >
∂í
)

553 
p
 =Ö->
√xt
;

554 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

555 
msg_±r
 = 
p
->
∑ylﬂd
;

556 
∂í
 +
p
->
Àn
;

561 
msg_±r
++;

564 
oid_±r
++;

565 
oid
->
Àn
++;

567 i‡(
Àn
 == 0)

570  
ERR_OK
;

575  
ERR_ARG
;

579 
p
 =Ö->
√xt
;

582  
ERR_ARG
;

583 
	}
}

596 
îr_t


597 
	$¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
)

599 
u16_t
 
∂í
, 
ba£
;

600 
u8_t
 *
msg_±r
;

602 i‡(
Àn
 > 0)

604 
∂í
 = 0;

605 
p
 !
NULL
)

607 
ba£
 = 
∂í
;

608 
∂í
 +
p
->
Àn
;

609 i‡(
ofs
 < 
∂í
)

611 
msg_±r
 = 
p
->
∑ylﬂd
;

612 
msg_±r
 +
ofs
 - 
ba£
;

613 i‡(
øw_Àn
 >
Àn
)

615 
Àn
 > 1)

618 
Àn
--;

619 *
øw
 = *
msg_±r
;

620 
øw
++;

621 
ofs
 += 1;

622 i‡(
ofs
 >
∂í
)

625 
p
 =Ö->
√xt
;

626 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

627 
msg_±r
 = 
p
->
∑ylﬂd
;

628 
∂í
 +
p
->
Àn
;

633 
msg_±r
++;

637 *
øw
 = *
msg_±r
;

638  
ERR_OK
;

643  
ERR_ARG
;

646 
p
 =Ö->
√xt
;

649  
ERR_ARG
;

654  
ERR_OK
;

656 
	}
}

	@net/lwip/core/snmp/asn1_enc.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SNMP


42 
	~"lwù/¢mp_a¢1.h
"

51 
	$¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
)

53 i‡(
Àngth
 < 0x80U)

55 *
o˘ës_√eded
 = 1;

57 i‡(
Àngth
 < 0x100U)

59 *
o˘ës_√eded
 = 2;

63 *
o˘ës_√eded
 = 3;

65 
	}
}

78 
	$¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

80 i‡(
vÆue
 < 0x80UL)

82 *
o˘ës_√eded
 = 1;

84 i‡(
vÆue
 < 0x8000UL)

86 *
o˘ës_√eded
 = 2;

88 i‡(
vÆue
 < 0x800000UL)

90 *
o˘ës_√eded
 = 3;

92 i‡(
vÆue
 < 0x80000000UL)

94 *
o˘ës_√eded
 = 4;

98 *
o˘ës_√eded
 = 5;

100 
	}
}

111 
	$¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

113 i‡(
vÆue
 < 0)

115 
vÆue
 = ~value;

117 i‡(
vÆue
 < 0x80L)

119 *
o˘ës_√eded
 = 1;

121 i‡(
vÆue
 < 0x8000L)

123 *
o˘ës_√eded
 = 2;

125 i‡(
vÆue
 < 0x800000L)

127 *
o˘ës_√eded
 = 3;

131 *
o˘ës_√eded
 = 4;

133 
	}
}

143 
	$¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
)

145 
s32_t
 
sub_id
;

146 
u8_t
 
˙t
;

148 
˙t
 = 0;

149 i‡(
idít_Àn
 > 1)

152 
˙t
++;

153 
idít_Àn
 -= 2;

154 
idít
 += 2;

156 
idít_Àn
 > 0)

158 
idít_Àn
--;

159 
sub_id
 = *
idít
;

161 
sub_id
 >>= 7;

162 
˙t
++;

163 
sub_id
 > 0)

165 
sub_id
 >>= 7;

166 
˙t
++;

168 
idít
++;

170 *
o˘ës_√eded
 = 
˙t
;

171 
	}
}

181 
îr_t


182 
	$¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
)

184 
u16_t
 
∂í
, 
ba£
;

185 
u8_t
 *
msg_±r
;

187 
∂í
 = 0;

188 
p
 !
NULL
)

190 
ba£
 = 
∂í
;

191 
∂í
 +
p
->
Àn
;

192 i‡(
ofs
 < 
∂í
)

194 
msg_±r
 = 
p
->
∑ylﬂd
;

195 
msg_±r
 +
ofs
 - 
ba£
;

196 *
msg_±r
 = 
ty≥
;

197  
ERR_OK
;

199 
p
 =Ö->
√xt
;

202  
ERR_ARG
;

203 
	}
}

213 
îr_t


214 
	$¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
)

216 
u16_t
 
∂í
, 
ba£
;

217 
u8_t
 *
msg_±r
;

219 
∂í
 = 0;

220 
p
 !
NULL
)

222 
ba£
 = 
∂í
;

223 
∂í
 +
p
->
Àn
;

224 i‡(
ofs
 < 
∂í
)

226 
msg_±r
 = 
p
->
∑ylﬂd
;

227 
msg_±r
 +
ofs
 - 
ba£
;

229 i‡(
Àngth
 < 0x80)

231 *
msg_±r
 = 
Àngth
;

232  
ERR_OK
;

234 i‡(
Àngth
 < 0x100)

236 *
msg_±r
 = 0x81;

237 
ofs
 += 1;

238 i‡(
ofs
 >
∂í
)

241 
p
 =Ö->
√xt
;

242 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

243 
msg_±r
 = 
p
->
∑ylﬂd
;

248 
msg_±r
++;

250 *
msg_±r
 = 
Àngth
;

251  
ERR_OK
;

255 
u8_t
 
i
;

258 *
msg_±r
 = 0x82;

259 
i
 = 2;

260 
i
 > 0)

262 
i
--;

263 
ofs
 += 1;

264 i‡(
ofs
 >
∂í
)

267 
p
 =Ö->
√xt
;

268 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

269 
msg_±r
 = 
p
->
∑ylﬂd
;

270 
∂í
 +
p
->
Àn
;

275 
msg_±r
++;

277 i‡(
i
 == 0)

280 *
msg_±r
 = 
Àngth
;

285 *
msg_±r
 = 
Àngth
 >> 8;

288  
ERR_OK
;

291 
p
 =Ö->
√xt
;

294  
ERR_ARG
;

295 
	}
}

308 
îr_t


309 
	$¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
)

311 
u16_t
 
∂í
, 
ba£
;

312 
u8_t
 *
msg_±r
;

314 
∂í
 = 0;

315 
p
 !
NULL
)

317 
ba£
 = 
∂í
;

318 
∂í
 +
p
->
Àn
;

319 i‡(
ofs
 < 
∂í
)

321 
msg_±r
 = 
p
->
∑ylﬂd
;

322 
msg_±r
 +
ofs
 - 
ba£
;

324 i‡(
o˘ës_√eded
 == 5)

327 
o˘ës_√eded
--;

328 *
msg_±r
 = 0x00;

329 
ofs
 += 1;

330 i‡(
ofs
 >
∂í
)

333 
p
 =Ö->
√xt
;

334 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

335 
msg_±r
 = 
p
->
∑ylﬂd
;

336 
∂í
 +
p
->
Àn
;

341 
msg_±r
++;

344 
o˘ës_√eded
 > 1)

346 
o˘ës_√eded
--;

347 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

348 
ofs
 += 1;

349 i‡(
ofs
 >
∂í
)

352 
p
 =Ö->
√xt
;

353 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

354 
msg_±r
 = 
p
->
∑ylﬂd
;

355 
∂í
 +
p
->
Àn
;

360 
msg_±r
++;

364 *
msg_±r
 = 
vÆue
;

365  
ERR_OK
;

367 
p
 =Ö->
√xt
;

370  
ERR_ARG
;

371 
	}
}

384 
îr_t


385 
	$¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
)

387 
u16_t
 
∂í
, 
ba£
;

388 
u8_t
 *
msg_±r
;

390 
∂í
 = 0;

391 
p
 !
NULL
)

393 
ba£
 = 
∂í
;

394 
∂í
 +
p
->
Àn
;

395 i‡(
ofs
 < 
∂í
)

397 
msg_±r
 = 
p
->
∑ylﬂd
;

398 
msg_±r
 +
ofs
 - 
ba£
;

400 
o˘ës_√eded
 > 1)

402 
o˘ës_√eded
--;

403 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

404 
ofs
 += 1;

405 i‡(
ofs
 >
∂í
)

408 
p
 =Ö->
√xt
;

409 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

410 
msg_±r
 = 
p
->
∑ylﬂd
;

411 
∂í
 +
p
->
Àn
;

416 
msg_±r
++;

420 *
msg_±r
 = 
vÆue
;

421  
ERR_OK
;

423 
p
 =Ö->
√xt
;

426  
ERR_ARG
;

427 
	}
}

438 
îr_t


439 
	$¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

441 
u16_t
 
∂í
, 
ba£
;

442 
u8_t
 *
msg_±r
;

444 
∂í
 = 0;

445 
p
 !
NULL
)

447 
ba£
 = 
∂í
;

448 
∂í
 +
p
->
Àn
;

449 i‡(
ofs
 < 
∂í
)

451 
msg_±r
 = 
p
->
∑ylﬂd
;

452 
msg_±r
 +
ofs
 - 
ba£
;

454 i‡(
idít_Àn
 > 1)

456 i‡((
idít
[0] == 1) && (ident[1] == 3))

459 *
msg_±r
 = 0x2b;

464 *
msg_±r
 = (
idít
[0] * 40) + ident[1];

466 
ofs
 += 1;

467 i‡(
ofs
 >
∂í
)

470 
p
 =Ö->
√xt
;

471 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

472 
msg_±r
 = 
p
->
∑ylﬂd
;

473 
∂í
 +
p
->
Àn
;

478 
msg_±r
++;

480 
idít_Àn
 -= 2;

481 
idít
 += 2;

487  
ERR_ARG
;

489 
idít_Àn
 > 0)

491 
s32_t
 
sub_id
;

492 
u8_t
 
shi·
, 
èû
;

494 
idít_Àn
--;

495 
sub_id
 = *
idít
;

496 
èû
 = 0;

497 
shi·
 = 28;

498 
shi·
 > 0)

500 
u8_t
 
code
;

502 
code
 = 
sub_id
 >> 
shi·
;

503 i‡((
code
 !0Ë|| (
èû
 != 0))

505 
èû
 = 1;

506 *
msg_±r
 = 
code
 | 0x80;

507 
ofs
 += 1;

508 i‡(
ofs
 >
∂í
)

511 
p
 =Ö->
√xt
;

512 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

513 
msg_±r
 = 
p
->
∑ylﬂd
;

514 
∂í
 +
p
->
Àn
;

519 
msg_±r
++;

522 
shi·
 -= 7;

524 *
msg_±r
 = (
u8_t
)
sub_id
 & 0x7F;

525 i‡(
idít_Àn
 > 0)

527 
ofs
 += 1;

528 i‡(
ofs
 >
∂í
)

531 
p
 =Ö->
√xt
;

532 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

533 
msg_±r
 = 
p
->
∑ylﬂd
;

534 
∂í
 +
p
->
Àn
;

539 
msg_±r
++;

543 
idít
++;

545  
ERR_OK
;

547 
p
 =Ö->
√xt
;

550  
ERR_ARG
;

551 
	}
}

562 
îr_t


563 
	$¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
)

565 
u16_t
 
∂í
, 
ba£
;

566 
u8_t
 *
msg_±r
;

568 
∂í
 = 0;

569 
p
 !
NULL
)

571 
ba£
 = 
∂í
;

572 
∂í
 +
p
->
Àn
;

573 i‡(
ofs
 < 
∂í
)

575 
msg_±r
 = 
p
->
∑ylﬂd
;

576 
msg_±r
 +
ofs
 - 
ba£
;

578 
øw_Àn
 > 1)

581 
øw_Àn
--;

582 *
msg_±r
 = *
øw
;

583 
øw
++;

584 
ofs
 += 1;

585 i‡(
ofs
 >
∂í
)

588 
p
 =Ö->
√xt
;

589 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

590 
msg_±r
 = 
p
->
∑ylﬂd
;

591 
∂í
 +
p
->
Àn
;

596 
msg_±r
++;

599 i‡(
øw_Àn
 > 0)

602 *
msg_±r
 = *
øw
;

604  
ERR_OK
;

606 
p
 =Ö->
√xt
;

609  
ERR_ARG
;

610 
	}
}

	@net/lwip/core/snmp/mib2.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_SNMP


43 
	~"lwù/¢mp.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

46 
	~"lwù/ù_‰ag.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/udp.h
"

49 
	~"lwù/¢mp_a¢1.h
"

50 
	~"lwù/¢mp_°ru˘s.h
"

51 
	~"√tif/ëh¨p.h
"

66 
	#SNMP_ENTERPRISE_ID
 26381

	)

67 
	#SNMP_SYSOBJID_LEN
 7

	)

68 
	#SNMP_SYSOBJID
 {1, 3, 6, 1, 4, 1, 
SNMP_ENTERPRISE_ID
}

	)

70 #i‚de‡
SNMP_SYSSERVICES


71 
	#SNMP_SYSSERVICES
 ((1 << 6Ë| (1 << 3Ë| ((
IP_FORWARD
Ë<< 2))

	)

74 #i‚de‡
SNMP_GET_SYSUPTIME


75 
	#SNMP_GET_SYSUPTIME
(
sysu±ime
)

	)

78 
sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

79 
sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

80 
u8_t
 
sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

81 
sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

82 
öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

83 
öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

84 
i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

85 
i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

86 #i‡!
SNMP_SAFE_REQUESTS


87 
u8_t
 
i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

88 
i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

90 
©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

91 
©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

92 
ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

93 
ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

94 
u8_t
 
ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

95 
ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

96 
ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

97 
ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

98 
ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

99 
ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

100 
ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

101 
icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

102 
icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

103 #i‡
LWIP_TCP


104 
t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

105 
t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

106 #ifde‡
THIS_SEEMS_UNUSED


107 
t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

108 
t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

111 
udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

112 
udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

113 
ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

114 
ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

115 
¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

116 
¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

117 
u8_t
 
¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

118 
¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

122 c⁄° 
mib_sˇœr_node
 
	g¢mp_sˇœr
 = {

123 &
¢mp_gë_obje˘_def
,

124 &
¢mp_gë_vÆue
,

125 &
¢mp_£t_ã°
,

126 &
¢mp_£t_vÆue
,

127 
MIB_NODE_SC
,

130 c⁄° 
s32_t
 
	g¢mp_ids
[28] = {

134 
mib_node
* c⁄° 
	g¢mp_nodes
[28] = {

135 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

136 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

137 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

138 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

139 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

140 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

141 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

142 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

143 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

144 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

145 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

146 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

147 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

148 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar

150 c⁄° 
mib_¨øy_node
 
	g¢mp
 = {

151 &
nﬁófs_gë_obje˘_def
,

152 &
nﬁófs_gë_vÆue
,

153 &
nﬁófs_£t_ã°
,

154 &
nﬁófs_£t_vÆue
,

155 
MIB_NODE_AR
,

157 
¢mp_ids
,

158 
¢mp_nodes


167 
mib_li°_roŸnode
 
	gudp_roŸ
 = {

168 &
nﬁófs_gë_obje˘_def
,

169 &
nﬁófs_gë_vÆue
,

170 &
nﬁófs_£t_ã°
,

171 &
nﬁófs_£t_vÆue
,

172 
MIB_NODE_LR
,

174 
NULL
,

175 
NULL
,

178 c⁄° 
s32_t
 
	gud≥¡ry_ids
[2] = { 1, 2 };

179 
mib_node
* c⁄° 
	gud≥¡ry_nodes
[2] = {

180 (
mib_node
* c⁄°)&
udp_roŸ
, (mib_node* const)&udp_root,

182 c⁄° 
mib_¨øy_node
 
	gud≥¡ry
 = {

183 &
nﬁófs_gë_obje˘_def
,

184 &
nﬁófs_gë_vÆue
,

185 &
nﬁófs_£t_ã°
,

186 &
nﬁófs_£t_vÆue
,

187 
MIB_NODE_AR
,

189 
ud≥¡ry_ids
,

190 
ud≥¡ry_nodes


193 
s32_t
 
	gud±abÀ_id
 = 1;

194 
mib_node
* 
	gud±abÀ_node
 = (mib_node* c⁄°)&
ud≥¡ry
;

195 
mib_øm_¨øy_node
 
	gud±abÀ
 = {

196 &
nﬁófs_gë_obje˘_def
,

197 &
nﬁófs_gë_vÆue
,

198 &
nﬁófs_£t_ã°
,

199 &
nﬁófs_£t_vÆue
,

200 
MIB_NODE_RA
,

202 &
ud±abÀ_id
,

203 &
ud±abÀ_node


206 c⁄° 
mib_sˇœr_node
 
	gudp_sˇœr
 = {

207 &
udp_gë_obje˘_def
,

208 &
udp_gë_vÆue
,

209 &
nﬁófs_£t_ã°
,

210 &
nﬁófs_£t_vÆue
,

211 
MIB_NODE_SC
,

214 c⁄° 
s32_t
 
	gudp_ids
[5] = { 1, 2, 3, 4, 5 };

215 
mib_node
* c⁄° 
	gudp_nodes
[5] = {

216 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

217 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

218 (
mib_node
* c⁄°)&
ud±abÀ


220 c⁄° 
mib_¨øy_node
 
	gudp
 = {

221 &
nﬁófs_gë_obje˘_def
,

222 &
nﬁófs_gë_vÆue
,

223 &
nﬁófs_£t_ã°
,

224 &
nﬁófs_£t_vÆue
,

225 
MIB_NODE_AR
,

227 
udp_ids
,

228 
udp_nodes


232 #i‡
LWIP_TCP


235 
mib_li°_roŸnode
 
	gt˝c⁄¡ªe_roŸ
 = {

236 &
nﬁófs_gë_obje˘_def
,

237 &
nﬁófs_gë_vÆue
,

238 &
nﬁófs_£t_ã°
,

239 &
nﬁófs_£t_vÆue
,

240 
MIB_NODE_LR
,

242 
NULL
,

243 
NULL
,

246 c⁄° 
s32_t
 
	gt˝c⁄√¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

247 
mib_node
* c⁄° 
	gt˝c⁄√¡ry_nodes
[5] = {

248 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

249 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

250 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ


252 c⁄° 
mib_¨øy_node
 
	gt˝c⁄√¡ry
 = {

253 &
nﬁófs_gë_obje˘_def
,

254 &
nﬁófs_gë_vÆue
,

255 &
nﬁófs_£t_ã°
,

256 &
nﬁófs_£t_vÆue
,

257 
MIB_NODE_AR
,

259 
t˝c⁄√¡ry_ids
,

260 
t˝c⁄√¡ry_nodes


263 
s32_t
 
	gt˝c⁄¡abÀ_id
 = 1;

264 
mib_node
* 
	gt˝c⁄¡abÀ_node
 = (mib_node* c⁄°)&
t˝c⁄√¡ry
;

265 
mib_øm_¨øy_node
 
	gt˝c⁄¡abÀ
 = {

266 &
nﬁófs_gë_obje˘_def
,

267 &
nﬁófs_gë_vÆue
,

268 &
nﬁófs_£t_ã°
,

269 &
nﬁófs_£t_vÆue
,

270 
MIB_NODE_RA
,

274 &
t˝c⁄¡abÀ_id
,

275 &
t˝c⁄¡abÀ_node


278 c⁄° 
mib_sˇœr_node
 
	gt˝_sˇœr
 = {

279 &
t˝_gë_obje˘_def
,

280 &
t˝_gë_vÆue
,

281 &
nﬁófs_£t_ã°
,

282 &
nﬁófs_£t_vÆue
,

283 
MIB_NODE_SC
,

286 c⁄° 
s32_t
 
	gt˝_ids
[15] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

287 
mib_node
* c⁄° 
	gt˝_nodes
[15] = {

288 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

289 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

290 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

291 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

292 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

293 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

294 (
mib_node
* c⁄°)&
t˝c⁄¡abÀ
, (mib_node* c⁄°)&
t˝_sˇœr
,

295 (
mib_node
* c⁄°)&
t˝_sˇœr


297 c⁄° 
mib_¨øy_node
 
	gt˝
 = {

298 &
nﬁófs_gë_obje˘_def
,

299 &
nﬁófs_gë_vÆue
,

300 &
nﬁófs_£t_ã°
,

301 &
nﬁófs_£t_vÆue
,

302 
MIB_NODE_AR
,

304 
t˝_ids
,

305 
t˝_nodes


310 c⁄° 
mib_sˇœr_node
 
	gicmp_sˇœr
 = {

311 &
icmp_gë_obje˘_def
,

312 &
icmp_gë_vÆue
,

313 &
nﬁófs_£t_ã°
,

314 &
nﬁófs_£t_vÆue
,

315 
MIB_NODE_SC
,

318 c⁄° 
s32_t
 
	gicmp_ids
[26] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };

319 
mib_node
* c⁄° 
	gicmp_nodes
[26] = {

320 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

321 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

322 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

323 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

324 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

325 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

326 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

327 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

328 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

329 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

330 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

331 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

332 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar

334 c⁄° 
mib_¨øy_node
 
	gicmp
 = {

335 &
nﬁófs_gë_obje˘_def
,

336 &
nﬁófs_gë_vÆue
,

337 &
nﬁófs_£t_ã°
,

338 &
nﬁófs_£t_vÆue
,

339 
MIB_NODE_AR
,

341 
icmp_ids
,

342 
icmp_nodes


346 
mib_li°_roŸnode
 
	gù¡omåì_roŸ
 = {

347 &
nﬁófs_gë_obje˘_def
,

348 &
nﬁófs_gë_vÆue
,

349 &
nﬁófs_£t_ã°
,

350 &
nﬁófs_£t_vÆue
,

351 
MIB_NODE_LR
,

353 
NULL
,

354 
NULL
,

357 c⁄° 
s32_t
 
	gù¡omíåy_ids
[4] = { 1, 2, 3, 4 };

358 
mib_node
* c⁄° 
	gù¡omíåy_nodes
[4] = {

359 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root,

360 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root

362 c⁄° 
mib_¨øy_node
 
	gù¡omíåy
 = {

363 &
nﬁófs_gë_obje˘_def
,

364 &
nﬁófs_gë_vÆue
,

365 &
nﬁófs_£t_ã°
,

366 &
nﬁófs_£t_vÆue
,

367 
MIB_NODE_AR
,

369 
ù¡omíåy_ids
,

370 
ù¡omíåy_nodes


373 
s32_t
 
	gù¡omèbÀ_id
 = 1;

374 
mib_node
* 
	gù¡omèbÀ_node
 = (mib_node* c⁄°)&
ù¡omíåy
;

375 
mib_øm_¨øy_node
 
	gù¡omèbÀ
 = {

376 &
nﬁófs_gë_obje˘_def
,

377 &
nﬁófs_gë_vÆue
,

378 &
nﬁófs_£t_ã°
,

379 &
nﬁófs_£t_vÆue
,

380 
MIB_NODE_RA
,

382 &
ù¡omèbÀ_id
,

383 &
ù¡omèbÀ_node


387 
mib_li°_roŸnode
 
	gùπëªe_roŸ
 = {

388 &
nﬁófs_gë_obje˘_def
,

389 &
nﬁófs_gë_vÆue
,

390 &
nﬁófs_£t_ã°
,

391 &
nﬁófs_£t_vÆue
,

392 
MIB_NODE_LR
,

394 
NULL
,

395 
NULL
,

398 c⁄° 
s32_t
 
	gùπì¡ry_ids
[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };

399 
mib_node
* c⁄° 
	gùπì¡ry_nodes
[13] = {

400 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

401 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

402 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

403 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

404 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

405 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

406 (
mib_node
* c⁄°)&
ùπëªe_roŸ


408 c⁄° 
mib_¨øy_node
 
	gùπì¡ry
 = {

409 &
nﬁófs_gë_obje˘_def
,

410 &
nﬁófs_gë_vÆue
,

411 &
nﬁófs_£t_ã°
,

412 &
nﬁófs_£t_vÆue
,

413 
MIB_NODE_AR
,

415 
ùπì¡ry_ids
,

416 
ùπì¡ry_nodes


419 
s32_t
 
	gùπëabÀ_id
 = 1;

420 
mib_node
* 
	gùπëabÀ_node
 = (mib_node* c⁄°)&
ùπì¡ry
;

421 
mib_øm_¨øy_node
 
	gùπëabÀ
 = {

422 &
nﬁófs_gë_obje˘_def
,

423 &
nﬁófs_gë_vÆue
,

424 &
nﬁófs_£t_ã°
,

425 &
nﬁófs_£t_vÆue
,

426 
MIB_NODE_RA
,

428 &
ùπëabÀ_id
,

429 &
ùπëabÀ_node


433 
mib_li°_roŸnode
 
	gùaddπªe_roŸ
 = {

434 &
nﬁófs_gë_obje˘_def
,

435 &
nﬁófs_gë_vÆue
,

436 &
nﬁófs_£t_ã°
,

437 &
nﬁófs_£t_vÆue
,

438 
MIB_NODE_LR
,

440 
NULL
,

441 
NULL
,

444 c⁄° 
s32_t
 
	gùaddª¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

445 
mib_node
* c⁄° 
	gùaddª¡ry_nodes
[5] = {

446 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

447 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

448 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

449 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

450 (
mib_node
* c⁄°)&
ùaddπªe_roŸ


452 c⁄° 
mib_¨øy_node
 
	gùaddª¡ry
 = {

453 &
nﬁófs_gë_obje˘_def
,

454 &
nﬁófs_gë_vÆue
,

455 &
nﬁófs_£t_ã°
,

456 &
nﬁófs_£t_vÆue
,

457 
MIB_NODE_AR
,

459 
ùaddª¡ry_ids
,

460 
ùaddª¡ry_nodes


463 
s32_t
 
	gùaddπabÀ_id
 = 1;

464 
mib_node
* 
	gùaddπabÀ_node
 = (mib_node* c⁄°)&
ùaddª¡ry
;

465 
mib_øm_¨øy_node
 
	gùaddπabÀ
 = {

466 &
nﬁófs_gë_obje˘_def
,

467 &
nﬁófs_gë_vÆue
,

468 &
nﬁófs_£t_ã°
,

469 &
nﬁófs_£t_vÆue
,

470 
MIB_NODE_RA
,

472 &
ùaddπabÀ_id
,

473 &
ùaddπabÀ_node


477 c⁄° 
mib_sˇœr_node
 
	gù_sˇœr
 = {

478 &
ù_gë_obje˘_def
,

479 &
ù_gë_vÆue
,

480 &
ù_£t_ã°
,

481 &
nﬁófs_£t_vÆue
,

482 
MIB_NODE_SC
,

485 c⁄° 
s32_t
 
	gù_ids
[23] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };

486 
mib_node
* c⁄° 
	gù_nodes
[23] = {

487 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

488 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

489 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

490 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

491 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

492 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

493 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

494 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

495 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

496 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* c⁄°)&
ùaddπabÀ
,

497 (
mib_node
* c⁄°)&
ùπëabÀ
, (mib_node* c⁄°)&
ù¡omèbÀ
,

498 (
mib_node
* c⁄°)&
ù_sˇœr


500 c⁄° 
mib_¨øy_node
 
	gmib2_ù
 = {

501 &
nﬁófs_gë_obje˘_def
,

502 &
nﬁófs_gë_vÆue
,

503 &
nﬁófs_£t_ã°
,

504 &
nﬁófs_£t_vÆue
,

505 
MIB_NODE_AR
,

507 
ù_ids
,

508 
ù_nodes


512 
mib_li°_roŸnode
 
	g¨±ªe_roŸ
 = {

513 &
nﬁófs_gë_obje˘_def
,

514 &
nﬁófs_gë_vÆue
,

515 &
nﬁófs_£t_ã°
,

516 &
nﬁófs_£t_vÆue
,

517 
MIB_NODE_LR
,

519 
NULL
,

520 
NULL
,

523 c⁄° 
s32_t
 
	g©íåy_ids
[3] = { 1, 2, 3 };

524 
mib_node
* c⁄° 
	g©íåy_nodes
[3] = {

525 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

526 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

527 (
mib_node
* c⁄°)&
¨±ªe_roŸ


529 c⁄° 
mib_¨øy_node
 
	g©íåy
 = {

530 &
nﬁófs_gë_obje˘_def
,

531 &
nﬁófs_gë_vÆue
,

532 &
nﬁófs_£t_ã°
,

533 &
nﬁófs_£t_vÆue
,

534 
MIB_NODE_AR
,

536 
©íåy_ids
,

537 
©íåy_nodes


540 c⁄° 
s32_t
 
	g©èbÀ_id
 = 1;

541 
mib_node
* c⁄° 
	g©èbÀ_node
 = (mib_node* c⁄°)&
©íåy
;

542 c⁄° 
mib_¨øy_node
 
	g©èbÀ
 = {

543 &
nﬁófs_gë_obje˘_def
,

544 &
nﬁófs_gë_vÆue
,

545 &
nﬁófs_£t_ã°
,

546 &
nﬁófs_£t_vÆue
,

547 
MIB_NODE_AR
,

549 &
©èbÀ_id
,

550 &
©èbÀ_node


554 
s32_t
 
	g©_id
 = 1;

555 
mib_node
* 
	gmib2_©_node
 = (mib_node* c⁄°)&
©èbÀ
;

556 
mib_øm_¨øy_node
 
	g©
 = {

557 &
nﬁófs_gë_obje˘_def
,

558 &
nﬁófs_gë_vÆue
,

559 &
nﬁófs_£t_ã°
,

560 &
nﬁófs_£t_vÆue
,

561 
MIB_NODE_RA
,

563 &
©_id
,

564 &
mib2_©_node


568 
mib_li°_roŸnode
 
	giÊi°_roŸ
 = {

569 &
i„¡ry_gë_obje˘_def
,

570 &
i„¡ry_gë_vÆue
,

571 #i‡
SNMP_SAFE_REQUESTS


572 &
nﬁófs_£t_ã°
,

573 &
nﬁófs_£t_vÆue
,

575 &
i„¡ry_£t_ã°
,

576 &
i„¡ry_£t_vÆue
,

578 
MIB_NODE_LR
,

580 
NULL
,

581 
NULL
,

584 c⁄° 
s32_t
 
	gi„¡ry_ids
[22] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };

585 
mib_node
* c⁄° 
	gi„¡ry_nodes
[22] = {

586 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

587 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

588 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

589 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

590 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

591 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

592 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

593 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

594 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

595 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

596 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root

598 c⁄° 
mib_¨øy_node
 
	gi„¡ry
 = {

599 &
nﬁófs_gë_obje˘_def
,

600 &
nﬁófs_gë_vÆue
,

601 &
nﬁófs_£t_ã°
,

602 &
nﬁófs_£t_vÆue
,

603 
MIB_NODE_AR
,

605 
i„¡ry_ids
,

606 
i„¡ry_nodes


609 
s32_t
 
	gi·abÀ_id
 = 1;

610 
mib_node
* 
	gi·abÀ_node
 = (mib_node* c⁄°)&
i„¡ry
;

611 
mib_øm_¨øy_node
 
	gi·abÀ
 = {

612 &
nﬁófs_gë_obje˘_def
,

613 &
nﬁófs_gë_vÆue
,

614 &
nﬁófs_£t_ã°
,

615 &
nﬁófs_£t_vÆue
,

616 
MIB_NODE_RA
,

618 &
i·abÀ_id
,

619 &
i·abÀ_node


623 c⁄° 
mib_sˇœr_node
 
	göãrÁ˚s_sˇœr
 = {

624 &
öãrÁ˚s_gë_obje˘_def
,

625 &
öãrÁ˚s_gë_vÆue
,

626 &
nﬁófs_£t_ã°
,

627 &
nﬁófs_£t_vÆue
,

628 
MIB_NODE_SC
,

631 c⁄° 
s32_t
 
	göãrÁ˚s_ids
[2] = { 1, 2 };

632 
mib_node
* c⁄° 
	göãrÁ˚s_nodes
[2] = {

633 (
mib_node
* c⁄°)&
öãrÁ˚s_sˇœr
, (mib_node* c⁄°)&
i·abÀ


635 c⁄° 
mib_¨øy_node
 
	göãrÁ˚s
 = {

636 &
nﬁófs_gë_obje˘_def
,

637 &
nﬁófs_gë_vÆue
,

638 &
nﬁófs_£t_ã°
,

639 &
nﬁófs_£t_vÆue
,

640 
MIB_NODE_AR
,

642 
öãrÁ˚s_ids
,

643 
öãrÁ˚s_nodes


649 c⁄° 
mib_sˇœr_node
 
	gsys_ãm_sˇœr
 = {

650 &
sy°em_gë_obje˘_def
,

651 &
sy°em_gë_vÆue
,

652 &
sy°em_£t_ã°
,

653 &
sy°em_£t_vÆue
,

654 
MIB_NODE_SC
,

657 c⁄° 
s32_t
 
	gsys_ãm_ids
[7] = { 1, 2, 3, 4, 5, 6, 7 };

658 
mib_node
* c⁄° 
	gsys_ãm_nodes
[7] = {

659 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

660 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

661 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

662 (
mib_node
* c⁄°)&
sys_ãm_sˇœr


665 c⁄° 
mib_¨øy_node
 
	gsys_ãm
 = {

666 &
nﬁófs_gë_obje˘_def
,

667 &
nﬁófs_gë_vÆue
,

668 &
nﬁófs_£t_ã°
,

669 &
nﬁófs_£t_vÆue
,

670 
MIB_NODE_AR
,

672 
sys_ãm_ids
,

673 
sys_ãm_nodes


677 #i‡
LWIP_TCP


678 
	#MIB2_GROUPS
 8

	)

680 
	#MIB2_GROUPS
 7

	)

682 c⁄° 
s32_t
 
	gmib2_ids
[
MIB2_GROUPS
] =

689 #i‡
LWIP_TCP


695 
mib_node
* c⁄° 
	gmib2_nodes
[
MIB2_GROUPS
] = {

696 (
mib_node
* c⁄°)&
sys_ãm
,

697 (
mib_node
* c⁄°)&
öãrÁ˚s
,

698 (
mib_node
* c⁄°)&
©
,

699 (
mib_node
* c⁄°)&
mib2_ù
,

700 (
mib_node
* c⁄°)&
icmp
,

701 #i‡
LWIP_TCP


702 (
mib_node
* c⁄°)&
t˝
,

704 (
mib_node
* c⁄°)&
udp
,

705 (
mib_node
* c⁄°)&
¢mp


708 c⁄° 
mib_¨øy_node
 
	gmib2
 = {

709 &
nﬁófs_gë_obje˘_def
,

710 &
nﬁófs_gë_vÆue
,

711 &
nﬁófs_£t_ã°
,

712 &
nﬁófs_£t_vÆue
,

713 
MIB_NODE_AR
,

714 
MIB2_GROUPS
,

715 
mib2_ids
,

716 
mib2_nodes


720 c⁄° 
s32_t
 
	gmgmt_ids
[1] = { 1 };

721 
mib_node
* c⁄° 
	gmgmt_nodes
[1] = { (mib_node* c⁄°)&
mib2
 };

722 c⁄° 
mib_¨øy_node
 
	gmgmt
 = {

723 &
nﬁófs_gë_obje˘_def
,

724 &
nﬁófs_gë_vÆue
,

725 &
nﬁófs_£t_ã°
,

726 &
nﬁófs_£t_vÆue
,

727 
MIB_NODE_AR
,

729 
mgmt_ids
,

730 
mgmt_nodes


734 #i‡
SNMP_PRIVATE_MIB


735 
s32_t
 
	göã∫ë_ids
[2] = { 2, 4 };

736 
mib_node
* c⁄° 
	göã∫ë_nodes
[2] = { (mib_node* c⁄°)&
mgmt
, (mib_node* c⁄°)&
¥iv©e
 };

737 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

738 &
nﬁófs_gë_obje˘_def
,

739 &
nﬁófs_gë_vÆue
,

740 &
nﬁófs_£t_ã°
,

741 &
nﬁófs_£t_vÆue
,

742 
MIB_NODE_AR
,

744 
öã∫ë_ids
,

745 
öã∫ë_nodes


748 c⁄° 
s32_t
 
	göã∫ë_ids
[1] = { 2 };

749 
mib_node
* c⁄° 
	göã∫ë_nodes
[1] = { (mib_node* c⁄°)&
mgmt
 };

750 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

751 &
nﬁófs_gë_obje˘_def
,

752 &
nﬁófs_gë_vÆue
,

753 &
nﬁófs_£t_ã°
,

754 &
nﬁófs_£t_vÆue
,

755 
MIB_NODE_AR
,

757 
öã∫ë_ids
,

758 
öã∫ë_nodes


763 
¢mp_obj_id
 
	gsysobjid
 = {
SNMP_SYSOBJID_LEN
, 
SNMP_SYSOBJID
};

765 
¢mp_obj_id
 
	g¢mpgΩ_id
 = {7,{1,3,6,1,2,1,11}};

767 c⁄° 
s32_t
 
	gsys£rvi˚s
 = 
SNMP_SYSSERVICES
;

770 c⁄° 
u8_t
 
	gsysdes¸_Àn_deÁu…
 = 4;

771 c⁄° 
u8_t
 
	gsysdes¸_deÁu…
[] = "lwIP";

772 
u8_t
* 
	gsysdes¸_Àn_±r
 = (u8_t*)&
sysdes¸_Àn_deÁu…
;

773 
u8_t
* 
	gsysdes¸_±r
 = (u8_t*)&
sysdes¸_deÁu…
[0];

775 c⁄° 
u8_t
 
	gsysc⁄è˘_Àn_deÁu…
 = 0;

776 c⁄° 
u8_t
 
	gsysc⁄è˘_deÁu…
[] = "";

777 
u8_t
* 
	gsysc⁄è˘_Àn_±r
 = (u8_t*)&
sysc⁄è˘_Àn_deÁu…
;

778 
u8_t
* 
	gsysc⁄è˘_±r
 = (u8_t*)&
sysc⁄è˘_deÁu…
[0];

780 c⁄° 
u8_t
 
	gsy¢ame_Àn_deÁu…
 = 8;

781 c⁄° 
u8_t
 
	gsy¢ame_deÁu…
[] = "FQDN-unk";

782 
u8_t
* 
	gsy¢ame_Àn_±r
 = (u8_t*)&
sy¢ame_Àn_deÁu…
;

783 
u8_t
* 
	gsy¢ame_±r
 = (u8_t*)&
sy¢ame_deÁu…
[0];

785 c⁄° 
u8_t
 
	gsy¶oˇti⁄_Àn_deÁu…
 = 0;

786 c⁄° 
u8_t
 
	gsy¶oˇti⁄_deÁu…
[] = "";

787 
u8_t
* 
	gsy¶oˇti⁄_Àn_±r
 = (u8_t*)&
sy¶oˇti⁄_Àn_deÁu…
;

788 
u8_t
* 
	gsy¶oˇti⁄_±r
 = (u8_t*)&
sy¶oˇti⁄_deÁu…
[0];

790 c⁄° 
u8_t
 
	g¢m≥«bÀauthíå≠s_deÁu…
 = 2;

791 
u8_t
* 
	g¢m≥«bÀauthíå≠s_±r
 = (u8_t*)&
¢m≥«bÀauthíå≠s_deÁu…
;

794 c⁄° 
¢mp_obj_id
 
	gif•ecific
 = {2, {0, 0}};

796 c⁄° 
¢mp_obj_id
 
	gùrouãöfo
 = {2, {0, 0}};

801 
u32_t
 
	gsysu±ime
 = 0;

804 
u32_t
 
	gùöª˚ives
 = 0,

805 
	gùöhdªº‹s
 = 0,

806 
	gùöaddªº‹s
 = 0,

807 
	gùf‹wd©agøms
 = 0,

808 
	gùöunknow≈rŸos
 = 0,

809 
	gùödisˇrds
 = 0,

810 
	gùödñivîs
 = 0,

811 
	gùouåeque°s
 = 0,

812 
	gùoutdisˇrds
 = 0,

813 
	gùouä‹ouãs
 = 0,

814 
	gùªasmªqds
 = 0,

815 
	gùªasmoks
 = 0,

816 
	gùªasmÁûs
 = 0,

817 
	gù‰agoks
 = 0,

818 
	gù‰agÁûs
 = 0,

819 
	gù‰ag¸óãs
 = 0,

820 
	gùroutögdisˇrds
 = 0;

822 
u32_t
 
	gicmpömsgs
 = 0,

823 
	gicmpöîr‹s
 = 0,

824 
	gicmpöde°uƒóchs
 = 0,

825 
	gicmpötimìxcds
 = 0,

826 
	gicmpö∑rm¥obs
 = 0,

827 
	gicmpö§cquíchs
 = 0,

828 
	gicmpöªdúe˘s
 = 0,

829 
	gicmpöechos
 = 0,

830 
	gicmpöech‹ïs
 = 0,

831 
	gicmpötime°amps
 = 0,

832 
	gicmpötime°am¥ïs
 = 0,

833 
	gicmpöaddrmasks
 = 0,

834 
	gicmpöaddrmaskªps
 = 0,

835 
	gicmpoutmsgs
 = 0,

836 
	gicmpouãº‹s
 = 0,

837 
	gicmpoutde°uƒóchs
 = 0,

838 
	gicmpouâimìxcds
 = 0,

839 
	gicmpouç¨m¥obs
 = 0,

840 
	gicmpout§cquíchs
 = 0,

841 
	gicmpouåedúe˘s
 = 0,

842 
	gicmpouãchos
 = 0,

843 
	gicmpouãch‹ïs
 = 0,

844 
	gicmpouâime°amps
 = 0,

845 
	gicmpouâime°am¥ïs
 = 0,

846 
	gicmpouèddrmasks
 = 0,

847 
	gicmpouèddrmaskªps
 = 0;

849 
u32_t
 
	gt˝a˘ive›ís
 = 0,

850 
	gt˝∑ssive›ís
 = 0,

851 
	gt˝©ãm±Áûs
 = 0,

852 
	gt˝e°abª£ts
 = 0,

853 
	gt˝ö£gs
 = 0,

854 
	gt˝out£gs
 = 0,

855 
	gt˝ªå™s£gs
 = 0,

856 
	gt˝öîrs
 = 0,

857 
	gt˝ouå°s
 = 0;

859 
u32_t
 
	gudpöd©agøms
 = 0,

860 
	gud≤›‹ts
 = 0,

861 
	gudpöîr‹s
 = 0,

862 
	gudpoutd©agøms
 = 0;

864 
u32_t
 
	g¢mpöpkts
 = 0,

865 
	g¢mpouçkts
 = 0,

866 
	g¢mpöbadvîsi⁄s
 = 0,

867 
	g¢mpöbadcommunôy«mes
 = 0,

868 
	g¢mpöbadcommunôyu£s
 = 0,

869 
	g¢mpöa¢∑r£îrs
 = 0,

870 
	g¢mpötoobigs
 = 0,

871 
	g¢mpönosuch«mes
 = 0,

872 
	g¢mpöbadvÆues
 = 0,

873 
	g¢mpöªad⁄lys
 = 0,

874 
	g¢mpögíîrs
 = 0,

875 
	g¢mpötŸÆªqv¨s
 = 0,

876 
	g¢mpötŸÆ£tv¨s
 = 0,

877 
	g¢mpögëªque°s
 = 0,

878 
	g¢mpögë√xts
 = 0,

879 
	g¢mpö£åeque°s
 = 0,

880 
	g¢mpögëª•⁄£s
 = 0,

881 
	g¢mpöå≠s
 = 0,

882 
	g¢mpouâoobigs
 = 0,

883 
	g¢mpouäosuch«mes
 = 0,

884 
	g¢mpoutbadvÆues
 = 0,

885 
	g¢mpoutgíîrs
 = 0,

886 
	g¢mpoutgëªque°s
 = 0,

887 
	g¢mpoutgë√xts
 = 0,

888 
	g¢mpout£åeque°s
 = 0,

889 
	g¢mpoutgëª•⁄£s
 = 0,

890 
	g¢mpouâøps
 = 0;

902 
	$oc°∫˝y
(
u8_t
 *
d°
, u8_à*
§c
, u8_à
n
)

904 
n
 > 0)

906 
n
--;

907 *
d°
++ = *
§c
++;

909 
	}
}

918 
	$obje˘idn˝y
(
s32_t
 *
d°
, s32_à*
§c
, 
u8_t
 
n
)

920 
n
 > 0)

922 
n
--;

923 *
d°
++ = *
§c
++;

925 
	}
}

933 
	$¢mp_£t_sysde§
(
u8_t
 *
°r
, u8_à*
Àn
)

935 i‡(
°r
 !
NULL
)

937 
sysdes¸_±r
 = 
°r
;

938 
sysdes¸_Àn_±r
 = 
Àn
;

940 
	}
}

942 
	$¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
)

944 *
oid
 = &
sysobjid
;

945 
	}
}

952 
	$¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
)

954 
sysobjid
 = *
oid
;

955 
	}
}

961 
	$¢mp_öc_sysu±ime
()

963 
sysu±ime
++;

964 
	}
}

966 
	$¢mp_add_sysu±ime
(
u32_t
 
vÆue
)

968 
sysu±ime
+=
vÆue
;

969 
	}
}

971 
	$¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
)

973 
	`SNMP_GET_SYSUPTIME
(
sysu±ime
);

974 *
vÆue
 = 
sysu±ime
;

975 
	}
}

984 
	$¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

986 i‡(
oc°r
 !
NULL
)

988 
sysc⁄è˘_±r
 = 
oc°r
;

989 
sysc⁄è˘_Àn_±r
 = 
oc°æí
;

991 
	}
}

1000 
	$¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1002 i‡(
oc°r
 !
NULL
)

1004 
sy¢ame_±r
 = 
oc°r
;

1005 
sy¢ame_Àn_±r
 = 
oc°æí
;

1007 
	}
}

1016 
	$¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1018 i‡(
oc°r
 !
NULL
)

1020 
sy¶oˇti⁄_±r
 = 
oc°r
;

1021 
sy¶oˇti⁄_Àn_±r
 = 
oc°æí
;

1023 
	}
}

1026 
	$¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1028 
ni
->
iföo˘ës
 +
vÆue
;

1029 
	}
}

1031 
	$¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
)

1033 (
ni
->
iföuˇ°pkts
)++;

1034 
	}
}

1036 
	$¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
)

1038 (
ni
->
ifönuˇ°pkts
)++;

1039 
	}
}

1041 
	$¢mp_öc_ifödisˇrds
(
√tif
 *
ni
)

1043 (
ni
->
ifödisˇrds
)++;

1044 
	}
}

1046 
	$¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1048 
ni
->
ifouto˘ës
 +
vÆue
;

1049 
	}
}

1051 
	$¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
)

1053 (
ni
->
ifoutuˇ°pkts
)++;

1054 
	}
}

1056 
	$¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
)

1058 (
ni
->
ifouäuˇ°pkts
)++;

1059 
	}
}

1061 
	$¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
)

1063 (
ni
->
ifoutdisˇrds
)++;

1064 
	}
}

1066 
	$¢mp_öc_iÊi°
()

1068 
mib_li°_node
 *
if_node
 = 
NULL
;

1070 
	`¢mp_mib_node_ö£π
(&
iÊi°_roŸ
, iÊi°_roŸ.
cou¡
 + 1, &
if_node
);

1072 
i·abÀ
.
maxÀngth
 = 1;

1073 
	}
}

1075 
	$¢mp_dec_iÊi°
()

1077 
	`¢mp_mib_node_dñëe
(&
iÊi°_roŸ
, iÊi°_roŸ.
èû
);

1079 if(
iÊi°_roŸ
.
cou¡
 =0Ë
i·abÀ
.
maxÀngth
 = 0;

1080 
	}
}

1086 
	$¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1088 
mib_li°_roŸnode
 *
©_∫
;

1089 
mib_li°_node
 *
©_node
;

1090 
ù_addr
 
hù
;

1091 
s32_t
 
¨pidx
[5];

1092 
u8_t
 
Àvñ
, 
åì
;

1094 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1095 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1096 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1097 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1099 
åì
 = 0;Åree < 2;Åree++)

1101 i‡(
åì
 == 0)

1103 
©_∫
 = &
¨±ªe_roŸ
;

1107 
©_∫
 = &
ù¡omåì_roŸ
;

1109 
Àvñ
 = 0;Üevel < 5;Üevel++)

1111 
©_node
 = 
NULL
;

1112 
	`¢mp_mib_node_ö£π
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_node
);

1113 i‡((
Àvñ
 !4Ë&& (
©_node
 !
NULL
))

1115 i‡(
©_node
->
≈å
 =
NULL
)

1117 
©_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1118 
©_node
->
≈å
 = (
mib_node
*)
©_∫
;

1119 i‡(
©_∫
 !
NULL
)

1121 i‡(
Àvñ
 == 3)

1123 i‡(
åì
 == 0)

1125 
©_∫
->
gë_obje˘_def
 = 
©íåy_gë_obje˘_def
;

1126 
©_∫
->
gë_vÆue
 = 
©íåy_gë_vÆue
;

1130 
©_∫
->
gë_obje˘_def
 = 
ù_¡omíåy_gë_obje˘_def
;

1131 
©_∫
->
gë_vÆue
 = 
ù_¡omíåy_gë_vÆue
;

1133 
©_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1134 
©_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1140 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_arpidx_tree() insert failed, mem full"));

1146 
©_∫
 = (
mib_li°_roŸnode
*)
©_node
->
≈å
;

1152 
©
.
maxÀngth
 = 1;

1153 
ù¡omèbÀ
.
maxÀngth
 = 1;

1154 
	}
}

1160 
	$¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1162 
mib_li°_roŸnode
 *
©_∫
, *
√xt
, *
dñ_∫
[5];

1163 
mib_li°_node
 *
©_n
, *
dñ_n
[5];

1164 
ù_addr
 
hù
;

1165 
s32_t
 
¨pidx
[5];

1166 
u8_t
 
fc
, 
åì
, 
Àvñ
, 
dñ_˙t
;

1168 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1169 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1170 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1172 
åì
 = 0;Åree < 2;Åree++)

1175 i‡(
åì
 == 0)

1177 
©_∫
 = &
¨±ªe_roŸ
;

1181 
©_∫
 = &
ù¡omåì_roŸ
;

1183 
Àvñ
 = 0;

1184 
dñ_˙t
 = 0;

1185 (
Àvñ
 < 5Ë&& (
©_∫
 !
NULL
))

1187 
fc
 = 
	`¢mp_mib_node_föd
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_n
);

1188 i‡(
fc
 == 0)

1191 
dñ_˙t
 = 0;

1192 
©_∫
 = 
NULL
;

1194 i‡(
fc
 == 1)

1196 
dñ_∫
[
dñ_˙t
] = 
©_∫
;

1197 
dñ_n
[
dñ_˙t
] = 
©_n
;

1198 
dñ_˙t
++;

1199 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1201 i‡(
fc
 == 2)

1204 
dñ_˙t
 = 0;

1205 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1207 
Àvñ
++;

1210 
dñ_˙t
 > 0)

1212 
dñ_˙t
--;

1214 
©_∫
 = 
dñ_∫
[
dñ_˙t
];

1215 
©_n
 = 
dñ_n
[
dñ_˙t
];

1217 
√xt
 = 
	`¢mp_mib_node_dñëe
(
©_∫
, 
©_n
);

1218 i‡(
√xt
 !
NULL
)

1220 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1221 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1226 if(
¨±ªe_roŸ
.
cou¡
 =0Ë
©
.
maxÀngth
 = 0;

1227 if(
ù¡omåì_roŸ
.
cou¡
 =0Ë
ù¡omèbÀ
.
maxÀngth
 = 0;

1228 
	}
}

1230 
	$¢mp_öc_ùöª˚ives
()

1232 
ùöª˚ives
++;

1233 
	}
}

1235 
	$¢mp_öc_ùöhdªº‹s
()

1237 
ùöhdªº‹s
++;

1238 
	}
}

1240 
	$¢mp_öc_ùöaddªº‹s
()

1242 
ùöaddªº‹s
++;

1243 
	}
}

1245 
	$¢mp_öc_ùf‹wd©agøms
()

1247 
ùf‹wd©agøms
++;

1248 
	}
}

1250 
	$¢mp_öc_ùöunknow≈rŸos
()

1252 
ùöunknow≈rŸos
++;

1253 
	}
}

1255 
	$¢mp_öc_ùödisˇrds
()

1257 
ùödisˇrds
++;

1258 
	}
}

1260 
	$¢mp_öc_ùödñivîs
()

1262 
ùödñivîs
++;

1263 
	}
}

1265 
	$¢mp_öc_ùouåeque°s
()

1267 
ùouåeque°s
++;

1268 
	}
}

1270 
	$¢mp_öc_ùoutdisˇrds
()

1272 
ùoutdisˇrds
++;

1273 
	}
}

1275 
	$¢mp_öc_ùouä‹ouãs
()

1277 
ùouä‹ouãs
++;

1278 
	}
}

1280 
	$¢mp_öc_ùªasmªqds
()

1282 
ùªasmªqds
++;

1283 
	}
}

1285 
	$¢mp_öc_ùªasmoks
()

1287 
ùªasmoks
++;

1288 
	}
}

1290 
	$¢mp_öc_ùªasmÁûs
()

1292 
ùªasmÁûs
++;

1293 
	}
}

1295 
	$¢mp_öc_ù‰agoks
()

1297 
ù‰agoks
++;

1298 
	}
}

1300 
	$¢mp_öc_ù‰agÁûs
()

1302 
ù‰agÁûs
++;

1303 
	}
}

1305 
	$¢mp_öc_ù‰ag¸óãs
()

1307 
ù‰ag¸óãs
++;

1308 
	}
}

1310 
	$¢mp_öc_ùroutögdisˇrds
()

1312 
ùroutögdisˇrds
++;

1313 
	}
}

1319 
	$¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
)

1321 
mib_li°_roŸnode
 *
ùa_∫
;

1322 
mib_li°_node
 *
ùa_node
;

1323 
ù_addr
 
ù
;

1324 
s32_t
 
ùaddridx
[4];

1325 
u8_t
 
Àvñ
;

1327 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1328 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1329 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1331 
Àvñ
 = 0;

1332 
ùa_∫
 = &
ùaddπªe_roŸ
;

1333 
Àvñ
 < 4)

1335 
ùa_node
 = 
NULL
;

1336 
	`¢mp_mib_node_ö£π
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_node
);

1337 i‡((
Àvñ
 !3Ë&& (
ùa_node
 !
NULL
))

1339 i‡(
ùa_node
->
≈å
 =
NULL
)

1341 
ùa_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1342 
ùa_node
->
≈å
 = (
mib_node
*)
ùa_∫
;

1343 i‡(
ùa_∫
 !
NULL
)

1345 i‡(
Àvñ
 == 2)

1347 
ùa_∫
->
gë_obje˘_def
 = 
ù_addª¡ry_gë_obje˘_def
;

1348 
ùa_∫
->
gë_vÆue
 = 
ù_addª¡ry_gë_vÆue
;

1349 
ùa_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1350 
ùa_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1356 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_ipaddridx_tree() insert failed, mem full"));

1362 
ùa_∫
 = (
mib_li°_roŸnode
*)
ùa_node
->
≈å
;

1365 
Àvñ
++;

1368 
ùaddπabÀ
.
maxÀngth
 = 1;

1369 
	}
}

1375 
	$¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
)

1377 
mib_li°_roŸnode
 *
ùa_∫
, *
√xt
, *
dñ_∫
[4];

1378 
mib_li°_node
 *
ùa_n
, *
dñ_n
[4];

1379 
ù_addr
 
ù
;

1380 
s32_t
 
ùaddridx
[4];

1381 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1383 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1384 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1385 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1388 
Àvñ
 = 0;

1389 
dñ_˙t
 = 0;

1390 
ùa_∫
 = &
ùaddπªe_roŸ
;

1391 (
Àvñ
 < 4Ë&& (
ùa_∫
 !
NULL
))

1393 
fc
 = 
	`¢mp_mib_node_föd
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_n
);

1394 i‡(
fc
 == 0)

1397 
dñ_˙t
 = 0;

1398 
ùa_∫
 = 
NULL
;

1400 i‡(
fc
 == 1)

1402 
dñ_∫
[
dñ_˙t
] = 
ùa_∫
;

1403 
dñ_n
[
dñ_˙t
] = 
ùa_n
;

1404 
dñ_˙t
++;

1405 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1407 i‡(
fc
 == 2)

1410 
dñ_˙t
 = 0;

1411 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1413 
Àvñ
++;

1416 
dñ_˙t
 > 0)

1418 
dñ_˙t
--;

1420 
ùa_∫
 = 
dñ_∫
[
dñ_˙t
];

1421 
ùa_n
 = 
dñ_n
[
dñ_˙t
];

1423 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùa_∫
, 
ùa_n
);

1424 i‡(
√xt
 !
NULL
)

1426 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1427 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1431 i‡(
ùaddπªe_roŸ
.
cou¡
 =0Ë
ùaddπabÀ
.
maxÀngth
 = 0;

1432 
	}
}

1444 
	$¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1446 
u8_t
 
ö£π
 = 0;

1447 
ù_addr
 
d°
;

1449 i‡(
dÊt
 != 0)

1452 
d°
.
addr
 = 0;

1453 
ö£π
 = 1;

1458 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1460 i‡(
d°
.
addr
 !0Ë
ö£π
 = 1;

1462 i‡(
ö£π
)

1464 
mib_li°_roŸnode
 *
ùπe_∫
;

1465 
mib_li°_node
 *
ùπe_node
;

1466 
s32_t
 
ùπeidx
[4];

1467 
u8_t
 
Àvñ
;

1469 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1470 
Àvñ
 = 0;

1471 
ùπe_∫
 = &
ùπëªe_roŸ
;

1472 
Àvñ
 < 4)

1474 
ùπe_node
 = 
NULL
;

1475 
	`¢mp_mib_node_ö£π
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_node
);

1476 i‡((
Àvñ
 !3Ë&& (
ùπe_node
 !
NULL
))

1478 i‡(
ùπe_node
->
≈å
 =
NULL
)

1480 
ùπe_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1481 
ùπe_node
->
≈å
 = (
mib_node
*)
ùπe_∫
;

1482 i‡(
ùπe_∫
 !
NULL
)

1484 i‡(
Àvñ
 == 2)

1486 
ùπe_∫
->
gë_obje˘_def
 = 
ù_πì¡ry_gë_obje˘_def
;

1487 
ùπe_∫
->
gë_vÆue
 = 
ù_πì¡ry_gë_vÆue
;

1488 
ùπe_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1489 
ùπe_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1495 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_iprteidx_tree() insert failed, mem full"));

1501 
ùπe_∫
 = (
mib_li°_roŸnode
*)
ùπe_node
->
≈å
;

1504 
Àvñ
++;

1508 
ùπëabÀ
.
maxÀngth
 = 1;

1509 
	}
}

1519 
	$¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1521 
u8_t
 
dñëe
 = 0;

1522 
ù_addr
 
d°
;

1524 i‡(
dÊt
 != 0)

1527 
d°
.
addr
 = 0;

1528 
dñëe
 = 1;

1533 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1535 i‡(
d°
.
addr
 !0Ë
dñëe
 = 1;

1537 i‡(
dñëe
)

1539 
mib_li°_roŸnode
 *
ùπe_∫
, *
√xt
, *
dñ_∫
[4];

1540 
mib_li°_node
 *
ùπe_n
, *
dñ_n
[4];

1541 
s32_t
 
ùπeidx
[4];

1542 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1544 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1546 
Àvñ
 = 0;

1547 
dñ_˙t
 = 0;

1548 
ùπe_∫
 = &
ùπëªe_roŸ
;

1549 (
Àvñ
 < 4Ë&& (
ùπe_∫
 !
NULL
))

1551 
fc
 = 
	`¢mp_mib_node_föd
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_n
);

1552 i‡(
fc
 == 0)

1555 
dñ_˙t
 = 0;

1556 
ùπe_∫
 = 
NULL
;

1558 i‡(
fc
 == 1)

1560 
dñ_∫
[
dñ_˙t
] = 
ùπe_∫
;

1561 
dñ_n
[
dñ_˙t
] = 
ùπe_n
;

1562 
dñ_˙t
++;

1563 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1565 i‡(
fc
 == 2)

1568 
dñ_˙t
 = 0;

1569 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1571 
Àvñ
++;

1574 
dñ_˙t
 > 0)

1576 
dñ_˙t
--;

1578 
ùπe_∫
 = 
dñ_∫
[
dñ_˙t
];

1579 
ùπe_n
 = 
dñ_n
[
dñ_˙t
];

1581 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùπe_∫
, 
ùπe_n
);

1582 i‡(
√xt
 !
NULL
)

1584 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1585 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1590 i‡(
ùπëªe_roŸ
.
cou¡
 =0Ë
ùπëabÀ
.
maxÀngth
 = 0;

1591 
	}
}

1594 
	$¢mp_öc_icmpömsgs
()

1596 
icmpömsgs
++;

1597 
	}
}

1599 
	$¢mp_öc_icmpöîr‹s
()

1601 
icmpöîr‹s
++;

1602 
	}
}

1604 
	$¢mp_öc_icmpöde°uƒóchs
()

1606 
icmpöde°uƒóchs
++;

1607 
	}
}

1609 
	$¢mp_öc_icmpötimìxcds
()

1611 
icmpötimìxcds
++;

1612 
	}
}

1614 
	$¢mp_öc_icmpö∑rm¥obs
()

1616 
icmpö∑rm¥obs
++;

1617 
	}
}

1619 
	$¢mp_öc_icmpö§cquíchs
()

1621 
icmpö§cquíchs
++;

1622 
	}
}

1624 
	$¢mp_öc_icmpöªdúe˘s
()

1626 
icmpöªdúe˘s
++;

1627 
	}
}

1629 
	$¢mp_öc_icmpöechos
()

1631 
icmpöechos
++;

1632 
	}
}

1634 
	$¢mp_öc_icmpöech‹ïs
()

1636 
icmpöech‹ïs
++;

1637 
	}
}

1639 
	$¢mp_öc_icmpötime°amps
()

1641 
icmpötime°amps
++;

1642 
	}
}

1644 
	$¢mp_öc_icmpötime°am¥ïs
()

1646 
icmpötime°am¥ïs
++;

1647 
	}
}

1649 
	$¢mp_öc_icmpöaddrmasks
()

1651 
icmpöaddrmasks
++;

1652 
	}
}

1654 
	$¢mp_öc_icmpöaddrmaskªps
()

1656 
icmpöaddrmaskªps
++;

1657 
	}
}

1659 
	$¢mp_öc_icmpoutmsgs
()

1661 
icmpoutmsgs
++;

1662 
	}
}

1664 
	$¢mp_öc_icmpouãº‹s
()

1666 
icmpouãº‹s
++;

1667 
	}
}

1669 
	$¢mp_öc_icmpoutde°uƒóchs
()

1671 
icmpoutde°uƒóchs
++;

1672 
	}
}

1674 
	$¢mp_öc_icmpouâimìxcds
()

1676 
icmpouâimìxcds
++;

1677 
	}
}

1679 
	$¢mp_öc_icmpouç¨m¥obs
()

1681 
icmpouç¨m¥obs
++;

1682 
	}
}

1684 
	$¢mp_öc_icmpout§cquíchs
()

1686 
icmpout§cquíchs
++;

1687 
	}
}

1689 
	$¢mp_öc_icmpouåedúe˘s
()

1691 
icmpouåedúe˘s
++;

1692 
	}
}

1694 
	$¢mp_öc_icmpouãchos
()

1696 
icmpouãchos
++;

1697 
	}
}

1699 
	$¢mp_öc_icmpouãch‹ïs
()

1701 
icmpouãch‹ïs
++;

1702 
	}
}

1704 
	$¢mp_öc_icmpouâime°amps
()

1706 
icmpouâime°amps
++;

1707 
	}
}

1709 
	$¢mp_öc_icmpouâime°am¥ïs
()

1711 
icmpouâime°am¥ïs
++;

1712 
	}
}

1714 
	$¢mp_öc_icmpouèddrmasks
()

1716 
icmpouèddrmasks
++;

1717 
	}
}

1719 
	$¢mp_öc_icmpouèddrmaskªps
()

1721 
icmpouèddrmaskªps
++;

1722 
	}
}

1724 
	$¢mp_öc_t˝a˘ive›ís
()

1726 
t˝a˘ive›ís
++;

1727 
	}
}

1729 
	$¢mp_öc_t˝∑ssive›ís
()

1731 
t˝∑ssive›ís
++;

1732 
	}
}

1734 
	$¢mp_öc_t˝©ãm±Áûs
()

1736 
t˝©ãm±Áûs
++;

1737 
	}
}

1739 
	$¢mp_öc_t˝e°abª£ts
()

1741 
t˝e°abª£ts
++;

1742 
	}
}

1744 
	$¢mp_öc_t˝ö£gs
()

1746 
t˝ö£gs
++;

1747 
	}
}

1749 
	$¢mp_öc_t˝out£gs
()

1751 
t˝out£gs
++;

1752 
	}
}

1754 
	$¢mp_öc_t˝ªå™s£gs
()

1756 
t˝ªå™s£gs
++;

1757 
	}
}

1759 
	$¢mp_öc_t˝öîrs
()

1761 
t˝öîrs
++;

1762 
	}
}

1764 
	$¢mp_öc_t˝ouå°s
()

1766 
t˝ouå°s
++;

1767 
	}
}

1769 
	$¢mp_öc_udpöd©agøms
()

1771 
udpöd©agøms
++;

1772 
	}
}

1774 
	$¢mp_öc_ud≤›‹ts
()

1776 
ud≤›‹ts
++;

1777 
	}
}

1779 
	$¢mp_öc_udpöîr‹s
()

1781 
udpöîr‹s
++;

1782 
	}
}

1784 
	$¢mp_öc_udpoutd©agøms
()

1786 
udpoutd©agøms
++;

1787 
	}
}

1793 
	$¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
)

1795 
mib_li°_roŸnode
 *
udp_∫
;

1796 
mib_li°_node
 *
udp_node
;

1797 
ù_addr
 
ù
;

1798 
s32_t
 
udpidx
[5];

1799 
u8_t
 
Àvñ
;

1801 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1802 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1803 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1804 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1806 
udp_∫
 = &
udp_roŸ
;

1807 
Àvñ
 = 0;Üevel < 5;Üevel++)

1809 
udp_node
 = 
NULL
;

1810 
	`¢mp_mib_node_ö£π
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_node
);

1811 i‡((
Àvñ
 !4Ë&& (
udp_node
 !
NULL
))

1813 i‡(
udp_node
->
≈å
 =
NULL
)

1815 
udp_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1816 
udp_node
->
≈å
 = (
mib_node
*)
udp_∫
;

1817 i‡(
udp_∫
 !
NULL
)

1819 i‡(
Àvñ
 == 3)

1821 
udp_∫
->
gë_obje˘_def
 = 
ud≥¡ry_gë_obje˘_def
;

1822 
udp_∫
->
gë_vÆue
 = 
ud≥¡ry_gë_vÆue
;

1823 
udp_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1824 
udp_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1830 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_udpidx_tree() insert failed, mem full"));

1836 
udp_∫
 = (
mib_li°_roŸnode
*)
udp_node
->
≈å
;

1840 
ud±abÀ
.
maxÀngth
 = 1;

1841 
	}
}

1847 
	$¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
)

1849 
mib_li°_roŸnode
 *
udp_∫
, *
√xt
, *
dñ_∫
[5];

1850 
mib_li°_node
 *
udp_n
, *
dñ_n
[5];

1851 
ù_addr
 
ù
;

1852 
s32_t
 
udpidx
[5];

1853 
u8_t
 
bödögs
, 
fc
, 
Àvñ
, 
dñ_˙t
;

1855 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1856 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1857 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1858 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1862 
bödögs
 = 0;

1863 
pcb
 = 
udp_pcbs
;

1864 (
pcb
 !
NULL
))

1866 i‡((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

1867 (
pcb
->
loˇl_p‹t
 =
udpidx
[4]))

1869 
bödögs
++;

1871 
pcb
 =Öcb->
√xt
;

1873 i‡(
bödögs
 == 1)

1877 
Àvñ
 = 0;

1878 
dñ_˙t
 = 0;

1879 
udp_∫
 = &
udp_roŸ
;

1880 (
Àvñ
 < 5Ë&& (
udp_∫
 !
NULL
))

1882 
fc
 = 
	`¢mp_mib_node_föd
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_n
);

1883 i‡(
fc
 == 0)

1886 
dñ_˙t
 = 0;

1887 
udp_∫
 = 
NULL
;

1889 i‡(
fc
 == 1)

1891 
dñ_∫
[
dñ_˙t
] = 
udp_∫
;

1892 
dñ_n
[
dñ_˙t
] = 
udp_n
;

1893 
dñ_˙t
++;

1894 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1896 i‡(
fc
 == 2)

1899 
dñ_˙t
 = 0;

1900 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1902 
Àvñ
++;

1905 
dñ_˙t
 > 0)

1907 
dñ_˙t
--;

1909 
udp_∫
 = 
dñ_∫
[
dñ_˙t
];

1910 
udp_n
 = 
dñ_n
[
dñ_˙t
];

1912 
√xt
 = 
	`¢mp_mib_node_dñëe
(
udp_∫
, 
udp_n
);

1913 i‡(
√xt
 !
NULL
)

1915 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1916 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1921 i‡(
udp_roŸ
.
cou¡
 =0Ë
ud±abÀ
.
maxÀngth
 = 0;

1922 
	}
}

1925 
	$¢mp_öc_¢mpöpkts
()

1927 
¢mpöpkts
++;

1928 
	}
}

1930 
	$¢mp_öc_¢mpouçkts
()

1932 
¢mpouçkts
++;

1933 
	}
}

1935 
	$¢mp_öc_¢mpöbadvîsi⁄s
()

1937 
¢mpöbadvîsi⁄s
++;

1938 
	}
}

1940 
	$¢mp_öc_¢mpöbadcommunôy«mes
()

1942 
¢mpöbadcommunôy«mes
++;

1943 
	}
}

1945 
	$¢mp_öc_¢mpöbadcommunôyu£s
()

1947 
¢mpöbadcommunôyu£s
++;

1948 
	}
}

1950 
	$¢mp_öc_¢mpöa¢∑r£îrs
()

1952 
¢mpöa¢∑r£îrs
++;

1953 
	}
}

1955 
	$¢mp_öc_¢mpötoobigs
()

1957 
¢mpötoobigs
++;

1958 
	}
}

1960 
	$¢mp_öc_¢mpönosuch«mes
()

1962 
¢mpönosuch«mes
++;

1963 
	}
}

1965 
	$¢mp_öc_¢mpöbadvÆues
()

1967 
¢mpöbadvÆues
++;

1968 
	}
}

1970 
	$¢mp_öc_¢mpöªad⁄lys
()

1972 
¢mpöªad⁄lys
++;

1973 
	}
}

1975 
	$¢mp_öc_¢mpögíîrs
()

1977 
¢mpögíîrs
++;

1978 
	}
}

1980 
	$¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
)

1982 
¢mpötŸÆªqv¨s
 +
vÆue
;

1983 
	}
}

1985 
	$¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
)

1987 
¢mpötŸÆ£tv¨s
 +
vÆue
;

1988 
	}
}

1990 
	$¢mp_öc_¢mpögëªque°s
()

1992 
¢mpögëªque°s
++;

1993 
	}
}

1995 
	$¢mp_öc_¢mpögë√xts
()

1997 
¢mpögë√xts
++;

1998 
	}
}

2000 
	$¢mp_öc_¢mpö£åeque°s
()

2002 
¢mpö£åeque°s
++;

2003 
	}
}

2005 
	$¢mp_öc_¢mpögëª•⁄£s
()

2007 
¢mpögëª•⁄£s
++;

2008 
	}
}

2010 
	$¢mp_öc_¢mpöå≠s
()

2012 
¢mpöå≠s
++;

2013 
	}
}

2015 
	$¢mp_öc_¢mpouâoobigs
()

2017 
¢mpouâoobigs
++;

2018 
	}
}

2020 
	$¢mp_öc_¢mpouäosuch«mes
()

2022 
¢mpouäosuch«mes
++;

2023 
	}
}

2025 
	$¢mp_öc_¢mpoutbadvÆues
()

2027 
¢mpoutbadvÆues
++;

2028 
	}
}

2030 
	$¢mp_öc_¢mpoutgíîrs
()

2032 
¢mpoutgíîrs
++;

2033 
	}
}

2035 
	$¢mp_öc_¢mpoutgëªque°s
()

2037 
¢mpoutgëªque°s
++;

2038 
	}
}

2040 
	$¢mp_öc_¢mpoutgë√xts
()

2042 
¢mpoutgë√xts
++;

2043 
	}
}

2045 
	$¢mp_öc_¢mpout£åeque°s
()

2047 
¢mpout£åeque°s
++;

2048 
	}
}

2050 
	$¢mp_öc_¢mpoutgëª•⁄£s
()

2052 
¢mpoutgëª•⁄£s
++;

2053 
	}
}

2055 
	$¢mp_öc_¢mpouâøps
()

2057 
¢mpouâøps
++;

2058 
	}
}

2060 
	$¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
)

2062 *
oid
 = &
¢mpgΩ_id
;

2063 
	}
}

2065 
	$¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2067 i‡(
vÆue
 !
NULL
)

2069 
¢m≥«bÀauthíå≠s_±r
 = 
vÆue
;

2071 
	}
}

2073 
	$¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2075 *
vÆue
 = *
¢m≥«bÀauthíå≠s_±r
;

2076 
	}
}

2079 
	$nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2081 i‡(
idít_Àn
){}

2082 i‡(
idít
){}

2083 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2084 
	}
}

2087 
	$nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2089 i‡(
od
){}

2090 i‡(
Àn
){}

2091 i‡(
vÆue
){}

2092 
	}
}

2094 
u8_t


2095 
	$nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2097 i‡(
od
){}

2098 i‡(
Àn
){}

2099 i‡(
vÆue
){}

2102 
	}
}

2105 
	$nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2107 i‡(
od
){}

2108 i‡(
Àn
){}

2109 i‡(
vÆue
){}

2110 
	}
}

2121 
	$sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2123 
u8_t
 
id
;

2126 
idít_Àn
 += 1;

2127 
idít
 -= 1;

2128 i‡(
idít_Àn
 == 2)

2130 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2131 
od
->
id_ö°_±r
 = 
idít
;

2133 
id
 = 
idít
[0];

2134 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡sy°em.%"
U16_F
".0\n",(
u16_t
)
id
));

2135 
id
)

2138 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2139 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2140 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2141 
od
->
v_Àn
 = *
sysdes¸_Àn_±r
;

2144 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2145 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2146 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2147 
od
->
v_Àn
 = 
sysobjid
.
Àn
 * (
s32_t
);

2150 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2151 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2152 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2153 
od
->
v_Àn
 = (
u32_t
);

2156 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2157 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2158 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2159 
od
->
v_Àn
 = *
sysc⁄è˘_Àn_±r
;

2162 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2163 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2164 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2165 
od
->
v_Àn
 = *
sy¢ame_Àn_±r
;

2168 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2169 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2170 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2171 
od
->
v_Àn
 = *
sy¶oˇti⁄_Àn_±r
;

2174 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2175 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2176 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2177 
od
->
v_Àn
 = (
s32_t
);

2180 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço such object\n"));

2181 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2187 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço scalar\n"));

2188 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2190 
	}
}

2201 
	$sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2203 
u8_t
 
id
;

2205 
id
 = 
od
->
id_ö°_±r
[0];

2206 
id
)

2209 
	`oc°∫˝y
(
vÆue
,
sysdes¸_±r
,
Àn
);

2212 
	`obje˘idn˝y
((
s32_t
*)
vÆue
,(s32_t*)
sysobjid
.
id
,
Àn
 / (s32_t));

2216 
	`¢mp_gë_sysu±ime
(
vÆue
);

2220 
	`oc°∫˝y
(
vÆue
,
sysc⁄è˘_±r
,
Àn
);

2223 
	`oc°∫˝y
(
vÆue
,
sy¢ame_±r
,
Àn
);

2226 
	`oc°∫˝y
(
vÆue
,
sy¶oˇti⁄_±r
,
Àn
);

2230 
s32_t
 *
söt_±r
 = 
vÆue
;

2231 *
söt_±r
 = 
sys£rvi˚s
;

2235 
	}
}

2237 
u8_t


2238 
	$sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2240 
u8_t
 
id
, 
£t_ok
;

2242 i‡(
vÆue
) {}

2243 
£t_ok
 = 0;

2244 
id
 = 
od
->
id_ö°_±r
[0];

2245 
id
)

2248 i‡((
sysc⁄è˘_±r
 !
sysc⁄è˘_deÁu…
) &&

2249 (
Àn
 <= 255))

2251 
£t_ok
 = 1;

2255 i‡((
sy¢ame_±r
 !
sy¢ame_deÁu…
) &&

2256 (
Àn
 <= 255))

2258 
£t_ok
 = 1;

2262 i‡((
sy¶oˇti⁄_±r
 !
sy¶oˇti⁄_deÁu…
) &&

2263 (
Àn
 <= 255))

2265 
£t_ok
 = 1;

2269  
£t_ok
;

2270 
	}
}

2273 
	$sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2275 
u8_t
 
id
;

2277 
id
 = 
od
->
id_ö°_±r
[0];

2278 
id
)

2281 
	`oc°∫˝y
(
sysc⁄è˘_±r
,
vÆue
,
Àn
);

2282 *
sysc⁄è˘_Àn_±r
 = 
Àn
;

2285 
	`oc°∫˝y
(
sy¢ame_±r
,
vÆue
,
Àn
);

2286 *
sy¢ame_Àn_±r
 = 
Àn
;

2289 
	`oc°∫˝y
(
sy¶oˇti⁄_±r
,
vÆue
,
Àn
);

2290 *
sy¶oˇti⁄_Àn_±r
 = 
Àn
;

2293 
	}
}

2303 
	$öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2306 
idít_Àn
 += 1;

2307 
idít
 -= 1;

2308 i‡(
idít_Àn
 == 2)

2310 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2311 
od
->
id_ö°_±r
 = 
idít
;

2313 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2314 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2315 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2316 
od
->
v_Àn
 = (
s32_t
);

2320 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("interfaces_get_object_def:Ço scalar\n"));

2321 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2323 
	}
}

2334 
	$öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2336 i‡(
Àn
){}

2337 i‡(
od
->
id_ö°_±r
[0] == 1)

2339 
s32_t
 *
söt_±r
 = 
vÆue
;

2340 *
söt_±r
 = 
iÊi°_roŸ
.
cou¡
;

2342 
	}
}

2352 
	$i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2354 
u8_t
 
id
;

2357 
idít_Àn
 += 1;

2358 
idít
 -= 1;

2359 i‡(
idít_Àn
 == 2)

2361 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2362 
od
->
id_ö°_±r
 = 
idít
;

2364 
id
 = 
idít
[0];

2365 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡i„¡ry.%"
U16_F
"\n",(
u16_t
)
id
));

2366 
id
)

2372 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2373 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2374 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2375 
od
->
v_Àn
 = (
s32_t
);

2378 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2379 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2380 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2382 
od
->
v_Àn
 = 2;

2386 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2387 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2388 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

2389 
od
->
v_Àn
 = (
u32_t
);

2393 
√tif
 *netif;

2395 
	`¢mp_ifödext⁄ëif
(
idít
[1], &
√tif
);

2396 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2397 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2398 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2399 
od
->
v_Àn
 = 
√tif
->
hwaddr_Àn
;

2403 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2404 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2405 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2406 
od
->
v_Àn
 = (
s32_t
);

2409 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2410 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2411 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2412 
od
->
v_Àn
 = (
u32_t
);

2425 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2426 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2427 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2428 
od
->
v_Àn
 = (
u32_t
);

2432 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2433 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2434 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2435 
od
->
v_Àn
 = 
if•ecific
.
Àn
 * (
s32_t
);

2438 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço such object\n"));

2439 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2445 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço scalar\n"));

2446 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2448 
	}
}

2459 
	$i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2461 
√tif
 *netif;

2462 
u8_t
 
id
;

2464 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2465 
id
 = 
od
->
id_ö°_±r
[0];

2466 
id
)

2470 
s32_t
 *
söt_±r
 = 
vÆue
;

2471 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2475 
	`oc°∫˝y
(
vÆue
,(
u8_t
*)
√tif
->
«me
,
Àn
);

2479 
s32_t
 *
söt_±r
 = 
vÆue
;

2480 *
söt_±r
 = 
√tif
->
lök_ty≥
;

2485 
s32_t
 *
söt_±r
 = 
vÆue
;

2486 *
söt_±r
 = 
√tif
->
mtu
;

2491 
u32_t
 *
uöt_±r
 = 
vÆue
;

2492 *
uöt_±r
 = 
√tif
->
lök_•ìd
;

2496 
	`oc°∫˝y
(
vÆue
,
√tif
->
hwaddr
,
Àn
);

2499 #i‡
LWIP_NETIF_LINK_CALLBACK


2501 
s32_t
 *
söt_±r
 = 
vÆue
;

2502 i‡(
	`√tif_is_up
(
√tif
))

2504 i‡(
	`√tif_is_lök_up
(
√tif
))

2506 *
söt_±r
 = 1;

2510 *
söt_±r
 = 7;

2515 *
söt_±r
 = 2;

2522 
s32_t
 *
söt_±r
 = 
vÆue
;

2523 i‡(
	`√tif_is_up
(
√tif
))

2525 *
söt_±r
 = 1;

2529 *
söt_±r
 = 2;

2535 
u32_t
 *
uöt_±r
 = 
vÆue
;

2536 *
uöt_±r
 = 
√tif
->
ts
;

2541 
u32_t
 *
uöt_±r
 = 
vÆue
;

2542 *
uöt_±r
 = 
√tif
->
iföo˘ës
;

2547 
u32_t
 *
uöt_±r
 = 
vÆue
;

2548 *
uöt_±r
 = 
√tif
->
iföuˇ°pkts
;

2553 
u32_t
 *
uöt_±r
 = 
vÆue
;

2554 *
uöt_±r
 = 
√tif
->
ifönuˇ°pkts
;

2559 
u32_t
 *
uöt_±r
 = 
vÆue
;

2560 *
uöt_±r
 = 
√tif
->
ifödisˇrds
;

2567 
u32_t
 *
uöt_±r
 = 
vÆue
;

2568 *
uöt_±r
 = 0;

2573 
u32_t
 *
uöt_±r
 = 
vÆue
;

2574 *
uöt_±r
 = 
√tif
->
ifouto˘ës
;

2579 
u32_t
 *
uöt_±r
 = 
vÆue
;

2580 *
uöt_±r
 = 
√tif
->
ifoutuˇ°pkts
;

2585 
u32_t
 *
uöt_±r
 = 
vÆue
;

2586 *
uöt_±r
 = 
√tif
->
ifouäuˇ°pkts
;

2591 
u32_t
 *
uöt_±r
 = 
vÆue
;

2592 *
uöt_±r
 = 
√tif
->
ifoutdisˇrds
;

2598 
u32_t
 *
uöt_±r
 = 
vÆue
;

2599 *
uöt_±r
 = 0;

2605 
u32_t
 *
uöt_±r
 = 
vÆue
;

2606 *
uöt_±r
 = 0;

2610 
	`obje˘idn˝y
((
s32_t
*)
vÆue
,(s32_t*)
if•ecific
.
id
,
Àn
 / (s32_t));

2613 
	}
}

2615 #i‡!
SNMP_SAFE_REQUESTS


2616 
u8_t


2617 
	$i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2619 
√tif
 *netif;

2620 
u8_t
 
id
, 
£t_ok
;

2622 
£t_ok
 = 0;

2623 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2624 
id
 = 
od
->
id_ö°_±r
[0];

2625 
id
)

2629 
s32_t
 *
söt_±r
 = 
vÆue
;

2630 i‡(*
söt_±r
 == 1 || *sint_ptr == 2)

2631 
£t_ok
 = 1;

2635  
£t_ok
;

2636 
	}
}

2639 
	$i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2641 
√tif
 *netif;

2642 
u8_t
 
id
;

2644 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2645 
id
 = 
od
->
id_ö°_±r
[0];

2646 
id
)

2650 
s32_t
 *
söt_±r
 = 
vÆue
;

2651 i‡(*
söt_±r
 == 1)

2653 
	`√tif_£t_up
(
√tif
);

2655 i‡(*
söt_±r
 == 2)

2657 
	`√tif_£t_down
(
√tif
);

2662 
	}
}

2673 
	$©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2676 
idít_Àn
 += 5;

2677 
idít
 -= 5;

2679 i‡(
idít_Àn
 == 6)

2681 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2682 
od
->
id_ö°_±r
 = 
idít
;

2684 
idít
[0])

2687 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2688 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2689 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2690 
od
->
v_Àn
 = (
s32_t
);

2693 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2694 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2695 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2696 
od
->
v_Àn
 = 6;

2699 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2700 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2701 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

2702 
od
->
v_Àn
 = 4;

2705 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço such object\n"));

2706 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2712 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço scalar\n"));

2713 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2715 
	}
}

2718 
	$©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2720 #i‡
LWIP_ARP


2721 
u8_t
 
id
;

2722 
ëh_addr
* 
ëhaddr_ªt
;

2723 
ù_addr
* 
ùaddr_ªt
;

2725 
ù_addr
 
ù
;

2726 
√tif
 *netif;

2728 i‡(
Àn
) {}

2730 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2731 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

2732 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

2734 #i‡
LWIP_ARP


2735 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

2737 
id
 = 
od
->
id_ö°_±r
[0];

2738 
id
)

2742 
s32_t
 *
söt_±r
 = 
vÆue
;

2743 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2748 
ëh_addr
 *
d°
 = 
vÆue
;

2750 *
d°
 = *
ëhaddr_ªt
;

2755 
ù_addr
 *
d°
 = 
vÆue
;

2757 *
d°
 = *
ùaddr_ªt
;

2763 
	}
}

2766 
	$ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2768 
u8_t
 
id
;

2771 
idít_Àn
 += 1;

2772 
idít
 -= 1;

2773 i‡(
idít_Àn
 == 2)

2775 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2776 
od
->
id_ö°_±r
 = 
idít
;

2778 
id
 = 
idít
[0];

2779 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡ù.%"
U16_F
".0\n",(
u16_t
)
id
));

2780 
id
)

2784 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2785 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2786 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2787 
od
->
v_Àn
 = (
s32_t
);

2806 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2807 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2808 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2809 
od
->
v_Àn
 = (
u32_t
);

2812 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2813 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2814 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2815 
od
->
v_Àn
 = (
s32_t
);

2818 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço such object\n"));

2819 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2825 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço scalar\n"));

2826 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2828 
	}
}

2831 
	$ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2833 
u8_t
 
id
;

2835 i‡(
Àn
) {}

2836 
id
 = 
od
->
id_ö°_±r
[0];

2837 
id
)

2841 
s32_t
 *
söt_±r
 = 
vÆue
;

2842 #i‡
IP_FORWARD


2844 *
söt_±r
 = 1;

2847 *
söt_±r
 = 2;

2853 
s32_t
 *
söt_±r
 = 
vÆue
;

2854 *
söt_±r
 = 
IP_DEFAULT_TTL
;

2859 
u32_t
 *
uöt_±r
 = 
vÆue
;

2860 *
uöt_±r
 = 
ùöª˚ives
;

2865 
u32_t
 *
uöt_±r
 = 
vÆue
;

2866 *
uöt_±r
 = 
ùöhdªº‹s
;

2871 
u32_t
 *
uöt_±r
 = 
vÆue
;

2872 *
uöt_±r
 = 
ùöaddªº‹s
;

2877 
u32_t
 *
uöt_±r
 = 
vÆue
;

2878 *
uöt_±r
 = 
ùf‹wd©agøms
;

2883 
u32_t
 *
uöt_±r
 = 
vÆue
;

2884 *
uöt_±r
 = 
ùöunknow≈rŸos
;

2889 
u32_t
 *
uöt_±r
 = 
vÆue
;

2890 *
uöt_±r
 = 
ùödisˇrds
;

2895 
u32_t
 *
uöt_±r
 = 
vÆue
;

2896 *
uöt_±r
 = 
ùödñivîs
;

2901 
u32_t
 *
uöt_±r
 = 
vÆue
;

2902 *
uöt_±r
 = 
ùouåeque°s
;

2907 
u32_t
 *
uöt_±r
 = 
vÆue
;

2908 *
uöt_±r
 = 
ùoutdisˇrds
;

2913 
u32_t
 *
uöt_±r
 = 
vÆue
;

2914 *
uöt_±r
 = 
ùouä‹ouãs
;

2919 
s32_t
 *
söt_±r
 = 
vÆue
;

2920 #i‡
IP_REASSEMBLY


2921 *
söt_±r
 = 
IP_REASS_MAXAGE
;

2923 *
söt_±r
 = 0;

2929 
u32_t
 *
uöt_±r
 = 
vÆue
;

2930 *
uöt_±r
 = 
ùªasmªqds
;

2935 
u32_t
 *
uöt_±r
 = 
vÆue
;

2936 *
uöt_±r
 = 
ùªasmoks
;

2941 
u32_t
 *
uöt_±r
 = 
vÆue
;

2942 *
uöt_±r
 = 
ùªasmÁûs
;

2947 
u32_t
 *
uöt_±r
 = 
vÆue
;

2948 *
uöt_±r
 = 
ù‰agoks
;

2953 
u32_t
 *
uöt_±r
 = 
vÆue
;

2954 *
uöt_±r
 = 
ù‰agÁûs
;

2959 
u32_t
 *
uöt_±r
 = 
vÆue
;

2960 *
uöt_±r
 = 
ù‰ag¸óãs
;

2966 
u32_t
 *
uöt_±r
 = 
vÆue
;

2967 *
uöt_±r
 = 
ùroutögdisˇrds
;

2971 
	}
}

2983 
u8_t


2984 
	$ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2986 
u8_t
 
id
, 
£t_ok
;

2987 
s32_t
 *
söt_±r
 = 
vÆue
;

2989 i‡(
Àn
) {}

2990 
£t_ok
 = 0;

2991 
id
 = 
od
->
id_ö°_±r
[0];

2992 
id
)

2995 #i‡
IP_FORWARD


2997 i‡(*
söt_±r
 == 1)

3000 i‡(*
söt_±r
 == 2)

3003 
£t_ok
 = 1;

3007 i‡(*
söt_±r
 =
IP_DEFAULT_TTL
)

3009 
£t_ok
 = 1;

3013  
£t_ok
;

3014 
	}
}

3017 
	$ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3020 
idít_Àn
 += 4;

3021 
idít
 -= 4;

3023 i‡(
idít_Àn
 == 5)

3025 
u8_t
 
id
;

3027 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3028 
od
->
id_ö°_±r
 = 
idít
;

3030 
id
 = 
idít
[0];

3031 
id
)

3035 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3036 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3037 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3038 
od
->
v_Àn
 = 4;

3043 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3044 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3045 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3046 
od
->
v_Àn
 = (
s32_t
);

3049 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço such object\n"));

3050 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3056 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço scalar\n"));

3057 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3059 
	}
}

3062 
	$ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3064 
u8_t
 
id
;

3065 
u16_t
 
ifidx
;

3066 
ù_addr
 
ù
;

3067 
√tif
 *√ti‡
√tif_li°
;

3069 i‡(
Àn
) {}

3070 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3071 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3072 
ifidx
 = 0;

3073 (
√tif
 !
NULL
Ë&& !
	`ù_addr_cmp
(&
ù
, &√tif->
ù_addr
))

3075 
√tif
 =Çëif->
√xt
;

3076 
ifidx
++;

3079 i‡(
√tif
 !
NULL
)

3081 
id
 = 
od
->
id_ö°_±r
[0];

3082 
id
)

3086 
ù_addr
 *
d°
 = 
vÆue
;

3087 *
d°
 = 
√tif
->
ù_addr
;

3092 
s32_t
 *
söt_±r
 = 
vÆue
;

3093 *
söt_±r
 = 
ifidx
 + 1;

3098 
ù_addr
 *
d°
 = 
vÆue
;

3099 *
d°
 = 
√tif
->
√tmask
;

3104 
s32_t
 *
söt_±r
 = 
vÆue
;

3108 *
söt_±r
 = 
ù_addr_brﬂdˇ°
.
addr
 & 1;

3113 
s32_t
 *
söt_±r
 = 
vÆue
;

3114 #i‡
IP_REASSEMBLY


3119 *
söt_±r
 = (
IP_HLEN
 + ((
IP_REASS_MAX_PBUFS
/2) *

3120 (
PBUF_POOL_BUFSIZE
 - 
PBUF_LINK_HLEN
 - 
IP_HLEN
)));

3124 *
söt_±r
 = 0;

3130 
	}
}

3138 
	$ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3140 
u8_t
 
id
;

3143 
idít_Àn
 += 4;

3144 
idít
 -= 4;

3146 i‡(
idít_Àn
 == 5)

3148 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3149 
od
->
id_ö°_±r
 = 
idít
;

3151 
id
 = 
idít
[0];

3152 
id
)

3157 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3158 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3159 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3160 
od
->
v_Àn
 = 4;

3170 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3171 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3172 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3173 
od
->
v_Àn
 = (
s32_t
);

3176 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3177 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3178 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3179 
od
->
v_Àn
 = (
s32_t
);

3183 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3184 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3185 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

3186 
od
->
v_Àn
 = 
ùrouãöfo
.
Àn
 * (
s32_t
);

3189 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço such object\n"));

3190 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3196 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço scalar\n"));

3197 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3199 
	}
}

3202 
	$ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3204 
√tif
 *netif;

3205 
ù_addr
 
de°
;

3206 
s32_t
 *
idít
;

3207 
u8_t
 
id
;

3209 
idít
 = 
od
->
id_ö°_±r
;

3210 
	`¢mp_oidtoù
(&
idít
[1], &
de°
);

3211 
de°
.
addr
 = 
	`ht⁄l
(dest.addr);

3213 i‡(
de°
.
addr
 == 0)

3216 
√tif
 = 
√tif_deÁu…
;

3221 
√tif
 = 
√tif_li°
;

3222 (
√tif
 !
NULL
) &&

3223 !
	`ù_addr_√tcmp
(&
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) )

3225 
√tif
 =Çëif->
√xt
;

3228 i‡(
√tif
 !
NULL
)

3230 
id
 = 
idít
[0];

3231 
id
)

3235 
ù_addr
 *
d°
 = 
vÆue
;

3237 i‡(
de°
.
addr
 == 0)

3240 
d°
->
addr
 = 0;

3245 
d°
->
addr
 = 
√tif
->
ù_addr
.add∏&Çëif->
√tmask
.addr;

3251 
s32_t
 *
söt_±r
 = 
vÆue
;

3253 
	`¢mp_√ti·oifödex
(
√tif
, 
söt_±r
);

3258 
s32_t
 *
söt_±r
 = 
vÆue
;

3260 i‡(
de°
.
addr
 == 0)

3263 *
söt_±r
 = 1;

3268 *
söt_±r
 = 0;

3277 
s32_t
 *
söt_±r
 = 
vÆue
;

3279 *
söt_±r
 = -1;

3284 
ù_addr
 *
d°
 = 
vÆue
;

3286 i‡(
de°
.
addr
 == 0)

3289 *
d°
 = 
√tif
->
gw
;

3294 *
d°
 = 
√tif
->
ù_addr
;

3300 
s32_t
 *
söt_±r
 = 
vÆue
;

3302 i‡(
de°
.
addr
 == 0)

3305 *
söt_±r
 = 4;

3310 *
söt_±r
 = 3;

3316 
s32_t
 *
söt_±r
 = 
vÆue
;

3318 *
söt_±r
 = 2;

3323 
s32_t
 *
söt_±r
 = 
vÆue
;

3326 *
söt_±r
 = 0;

3331 
ù_addr
 *
d°
 = 
vÆue
;

3333 i‡(
de°
.
addr
 == 0)

3336 
d°
->
addr
 = 0;

3341 *
d°
 = 
√tif
->
√tmask
;

3346 
	`obje˘idn˝y
((
s32_t
*)
vÆue
,(s32_t*)
ùrouãöfo
.
id
,
Àn
 / (s32_t));

3350 
	}
}

3353 
	$ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3356 
idít_Àn
 += 5;

3357 
idít
 -= 5;

3359 i‡(
idít_Àn
 == 6)

3361 
u8_t
 
id
;

3363 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3364 
od
->
id_ö°_±r
 = 
idít
;

3366 
id
 = 
idít
[0];

3367 
id
)

3371 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3372 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3373 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3374 
od
->
v_Àn
 = (
s32_t
);

3377 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3378 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3379 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

3380 
od
->
v_Àn
 = 6;

3383 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3384 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3385 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3386 
od
->
v_Àn
 = 4;

3389 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço such object\n"));

3390 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3396 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço scalar\n"));

3397 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3399 
	}
}

3402 
	$ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3404 #i‡
LWIP_ARP


3405 
u8_t
 
id
;

3406 
ëh_addr
* 
ëhaddr_ªt
;

3407 
ù_addr
* 
ùaddr_ªt
;

3409 
ù_addr
 
ù
;

3410 
√tif
 *netif;

3412 i‡(
Àn
) {}

3414 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

3415 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

3416 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3418 #i‡
LWIP_ARP


3419 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

3421 
id
 = 
od
->
id_ö°_±r
[0];

3422 
id
)

3426 
s32_t
 *
söt_±r
 = 
vÆue
;

3427 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

3432 
ëh_addr
 *
d°
 = 
vÆue
;

3434 *
d°
 = *
ëhaddr_ªt
;

3439 
ù_addr
 *
d°
 = 
vÆue
;

3441 *
d°
 = *
ùaddr_ªt
;

3446 
s32_t
 *
söt_±r
 = 
vÆue
;

3448 *
söt_±r
 = 3;

3454 
	}
}

3457 
	$icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3460 
idít_Àn
 += 1;

3461 
idít
 -= 1;

3462 i‡((
idít_Àn
 == 2) &&

3463 (
idít
[0] > 0) && (ident[0] < 27))

3465 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3466 
od
->
id_ö°_±r
 = 
idít
;

3468 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3469 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3470 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3471 
od
->
v_Àn
 = (
u32_t
);

3475 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("icmp_get_object_def:Ço scalar\n"));

3476 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3478 
	}
}

3481 
	$icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3483 
u32_t
 *
uöt_±r
 = 
vÆue
;

3484 
u8_t
 
id
;

3486 i‡(
Àn
){}

3487 
id
 = 
od
->
id_ö°_±r
[0];

3488 
id
)

3491 *
uöt_±r
 = 
icmpömsgs
;

3494 *
uöt_±r
 = 
icmpöîr‹s
;

3497 *
uöt_±r
 = 
icmpöde°uƒóchs
;

3500 *
uöt_±r
 = 
icmpötimìxcds
;

3503 *
uöt_±r
 = 
icmpö∑rm¥obs
;

3506 *
uöt_±r
 = 
icmpö§cquíchs
;

3509 *
uöt_±r
 = 
icmpöªdúe˘s
;

3512 *
uöt_±r
 = 
icmpöechos
;

3515 *
uöt_±r
 = 
icmpöech‹ïs
;

3518 *
uöt_±r
 = 
icmpötime°amps
;

3521 *
uöt_±r
 = 
icmpötime°am¥ïs
;

3524 *
uöt_±r
 = 
icmpöaddrmasks
;

3527 *
uöt_±r
 = 
icmpöaddrmaskªps
;

3530 *
uöt_±r
 = 
icmpoutmsgs
;

3533 *
uöt_±r
 = 
icmpouãº‹s
;

3536 *
uöt_±r
 = 
icmpoutde°uƒóchs
;

3539 *
uöt_±r
 = 
icmpouâimìxcds
;

3542 *
uöt_±r
 = 
icmpouç¨m¥obs
;

3545 *
uöt_±r
 = 
icmpout§cquíchs
;

3548 *
uöt_±r
 = 
icmpouåedúe˘s
;

3551 *
uöt_±r
 = 
icmpouãchos
;

3554 *
uöt_±r
 = 
icmpouãch‹ïs
;

3557 *
uöt_±r
 = 
icmpouâime°amps
;

3560 *
uöt_±r
 = 
icmpouâime°am¥ïs
;

3563 *
uöt_±r
 = 
icmpouèddrmasks
;

3566 *
uöt_±r
 = 
icmpouèddrmaskªps
;

3569 
	}
}

3571 #i‡
LWIP_TCP


3574 
	$t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3576 
u8_t
 
id
;

3579 
idít_Àn
 += 1;

3580 
idít
 -= 1;

3581 i‡(
idít_Àn
 == 2)

3583 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3584 
od
->
id_ö°_±r
 = 
idít
;

3586 
id
 = 
idít
[0];

3587 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3589 
id
)

3595 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3596 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3597 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3598 
od
->
v_Àn
 = (
s32_t
);

3609 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3610 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3611 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3612 
od
->
v_Àn
 = (
u32_t
);

3615 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3616 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3617 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

3618 
od
->
v_Àn
 = (
u32_t
);

3621 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço such object\n"));

3622 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3628 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço scalar\n"));

3629 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3631 
	}
}

3634 
	$t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3636 
u32_t
 *
uöt_±r
 = 
vÆue
;

3637 
s32_t
 *
söt_±r
 = 
vÆue
;

3638 
u8_t
 
id
;

3640 i‡(
Àn
){}

3641 
id
 = 
od
->
id_ö°_±r
[0];

3642 
id
)

3645 *
söt_±r
 = 4;

3650 *
söt_±r
 = 1000;

3655 *
söt_±r
 = 60000;

3658 *
söt_±r
 = 
MEMP_NUM_TCP_PCB
;

3661 *
uöt_±r
 = 
t˝a˘ive›ís
;

3664 *
uöt_±r
 = 
t˝∑ssive›ís
;

3667 *
uöt_±r
 = 
t˝©ãm±Áûs
;

3670 *
uöt_±r
 = 
t˝e°abª£ts
;

3674 
u16_t
 
t˝cuºe°ab
 = 0;

3675 
t˝_pcb
 *
pcb
 = 
t˝_a˘ive_pcbs
;

3676 
pcb
 !
NULL
)

3678 i‡((
pcb
->
°©e
 =
ESTABLISHED
) ||

3679 (
pcb
->
°©e
 =
CLOSE_WAIT
))

3681 
t˝cuºe°ab
++;

3683 
pcb
 =Öcb->
√xt
;

3685 *
uöt_±r
 = 
t˝cuºe°ab
;

3689 *
uöt_±r
 = 
t˝ö£gs
;

3692 *
uöt_±r
 = 
t˝out£gs
;

3695 *
uöt_±r
 = 
t˝ªå™s£gs
;

3698 *
uöt_±r
 = 
t˝öîrs
;

3701 *
uöt_±r
 = 
t˝ouå°s
;

3704 
	}
}

3705 #ifde‡
THIS_SEEMS_UNUSED


3707 
	$t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3710 
idít_Àn
 += 10;

3711 
idít
 -= 10;

3713 i‡(
idít_Àn
 == 11)

3715 
u8_t
 
id
;

3717 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3718 
od
->
id_ö°_±r
 = 
idít
;

3720 
id
 = 
idít
[0];

3721 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3723 
id
)

3726 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3727 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3728 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3729 
od
->
v_Àn
 = (
s32_t
);

3733 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3734 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3735 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3736 
od
->
v_Àn
 = 4;

3740 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3741 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3742 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3743 
od
->
v_Àn
 = (
s32_t
);

3746 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3747 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3753 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3754 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3756 
	}
}

3759 
	$t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3761 
ù_addr
 
lù
, 
rù
;

3762 
u16_t
 
Õ‹t
, 
Ω‹t
;

3763 
s32_t
 *
idít
;

3765 
idít
 = 
od
->
id_ö°_±r
;

3766 
	`¢mp_oidtoù
(&
idít
[1], &
lù
);

3767 
lù
.
addr
 = 
	`ht⁄l
(lip.addr);

3768 
Õ‹t
 = 
idít
[5];

3769 
	`¢mp_oidtoù
(&
idít
[6], &
rù
);

3770 
rù
.
addr
 = 
	`ht⁄l
(rip.addr);

3771 
Ω‹t
 = 
idít
[10];

3774 
	}
}

3779 
	$udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3782 
idít_Àn
 += 1;

3783 
idít
 -= 1;

3784 i‡((
idít_Àn
 == 2) &&

3785 (
idít
[0] > 0) && (ident[0] < 6))

3787 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3788 
od
->
id_ö°_±r
 = 
idít
;

3790 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3791 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3792 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3793 
od
->
v_Àn
 = (
u32_t
);

3797 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udp_get_object_def:Ço scalar\n"));

3798 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3800 
	}
}

3803 
	$udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3805 
u32_t
 *
uöt_±r
 = 
vÆue
;

3806 
u8_t
 
id
;

3808 i‡(
Àn
){}

3809 
id
 = 
od
->
id_ö°_±r
[0];

3810 
id
)

3813 *
uöt_±r
 = 
udpöd©agøms
;

3816 *
uöt_±r
 = 
ud≤›‹ts
;

3819 *
uöt_±r
 = 
udpöîr‹s
;

3822 *
uöt_±r
 = 
udpoutd©agøms
;

3825 
	}
}

3828 
	$ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3831 
idít_Àn
 += 5;

3832 
idít
 -= 5;

3834 i‡(
idít_Àn
 == 6)

3836 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3837 
od
->
id_ö°_±r
 = 
idít
;

3839 
idít
[0])

3842 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3843 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3844 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3845 
od
->
v_Àn
 = 4;

3848 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3849 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3850 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3851 
od
->
v_Àn
 = (
s32_t
);

3854 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço such object\n"));

3855 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3861 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço scalar\n"));

3862 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3864 
	}
}

3867 
	$ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3869 
u8_t
 
id
;

3870 
udp_pcb
 *
pcb
;

3871 
ù_addr
 
ù
;

3872 
u16_t
 
p‹t
;

3874 i‡(
Àn
){}

3875 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3876 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3877 
p‹t
 = 
od
->
id_ö°_±r
[5];

3879 
pcb
 = 
udp_pcbs
;

3880 (
pcb
 !
NULL
) &&

3881 !((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

3882 (
pcb
->
loˇl_p‹t
 =
p‹t
)))

3884 
pcb
 =Öcb->
√xt
;

3887 i‡(
pcb
 !
NULL
)

3889 
id
 = 
od
->
id_ö°_±r
[0];

3890 
id
)

3894 
ù_addr
 *
d°
 = 
vÆue
;

3895 *
d°
 = 
pcb
->
loˇl_ù
;

3900 
s32_t
 *
söt_±r
 = 
vÆue
;

3901 *
söt_±r
 = 
pcb
->
loˇl_p‹t
;

3906 
	}
}

3909 
	$¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3912 
idít_Àn
 += 1;

3913 
idít
 -= 1;

3914 i‡(
idít_Àn
 == 2)

3916 
u8_t
 
id
;

3918 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3919 
od
->
id_ö°_±r
 = 
idít
;

3921 
id
 = 
idít
[0];

3922 
id
)

3951 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3952 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3953 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3954 
od
->
v_Àn
 = (
u32_t
);

3957 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3958 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3959 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3960 
od
->
v_Àn
 = (
s32_t
);

3963 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço such object\n"));

3964 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3970 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço scalar\n"));

3971 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3973 
	}
}

3976 
	$¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3978 
u32_t
 *
uöt_±r
 = 
vÆue
;

3979 
u8_t
 
id
;

3981 i‡(
Àn
){}

3982 
id
 = 
od
->
id_ö°_±r
[0];

3983 
id
)

3986 *
uöt_±r
 = 
¢mpöpkts
;

3989 *
uöt_±r
 = 
¢mpouçkts
;

3992 *
uöt_±r
 = 
¢mpöbadvîsi⁄s
;

3995 *
uöt_±r
 = 
¢mpöbadcommunôy«mes
;

3998 *
uöt_±r
 = 
¢mpöbadcommunôyu£s
;

4001 *
uöt_±r
 = 
¢mpöa¢∑r£îrs
;

4004 *
uöt_±r
 = 
¢mpötoobigs
;

4007 *
uöt_±r
 = 
¢mpönosuch«mes
;

4010 *
uöt_±r
 = 
¢mpöbadvÆues
;

4013 *
uöt_±r
 = 
¢mpöªad⁄lys
;

4016 *
uöt_±r
 = 
¢mpögíîrs
;

4019 *
uöt_±r
 = 
¢mpötŸÆªqv¨s
;

4022 *
uöt_±r
 = 
¢mpötŸÆ£tv¨s
;

4025 *
uöt_±r
 = 
¢mpögëªque°s
;

4028 *
uöt_±r
 = 
¢mpögë√xts
;

4031 *
uöt_±r
 = 
¢mpö£åeque°s
;

4034 *
uöt_±r
 = 
¢mpögëª•⁄£s
;

4037 *
uöt_±r
 = 
¢mpöå≠s
;

4040 *
uöt_±r
 = 
¢mpouâoobigs
;

4043 *
uöt_±r
 = 
¢mpouäosuch«mes
;

4046 *
uöt_±r
 = 
¢mpoutbadvÆues
;

4049 *
uöt_±r
 = 
¢mpoutgíîrs
;

4052 *
uöt_±r
 = 
¢mpoutgëªque°s
;

4055 *
uöt_±r
 = 
¢mpoutgë√xts
;

4058 *
uöt_±r
 = 
¢mpout£åeque°s
;

4061 *
uöt_±r
 = 
¢mpoutgëª•⁄£s
;

4064 *
uöt_±r
 = 
¢mpouâøps
;

4067 *
uöt_±r
 = *
¢m≥«bÀauthíå≠s_±r
;

4070 
	}
}

4079 
u8_t


4080 
	$¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4082 
u8_t
 
id
, 
£t_ok
;

4084 i‡(
Àn
) {}

4085 
£t_ok
 = 0;

4086 
id
 = 
od
->
id_ö°_±r
[0];

4087 i‡(
id
 == 30)

4090 
s32_t
 *
söt_±r
 = 
vÆue
;

4092 i‡(
¢m≥«bÀauthíå≠s_±r
 !&
¢m≥«bÀauthíå≠s_deÁu…
)

4095 i‡((*
söt_±r
 == 1) || (*sint_ptr == 2))

4097 
£t_ok
 = 1;

4103 i‡(*
söt_±r
 =
¢m≥«bÀauthíå≠s_deÁu…
)

4105 
£t_ok
 = 1;

4109  
£t_ok
;

4110 
	}
}

4113 
	$¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4115 
u8_t
 
id
;

4117 i‡(
Àn
) {}

4118 
id
 = 
od
->
id_ö°_±r
[0];

4119 i‡(
id
 == 30)

4122 
s32_t
 *
söt_±r
 = 
vÆue
;

4123 *
¢m≥«bÀauthíå≠s_±r
 = *
söt_±r
;

4125 
	}
}

	@net/lwip/core/snmp/mib_structs.c

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_SNMP


40 
	~"lwù/¢mp_°ru˘s.h
"

41 
	~"lwù/mem.h
"

44 c⁄° 
s32_t
 
	g¥efix
[4] = {1, 3, 6, 1};

46 
	#NODE_STACK_SIZE
 (
LWIP_SNMP_OBJ_ID_LEN
)

	)

48 
	sn£


51 
mib_node
* 
	mr_±r
;

53 
s32_t
 
	mr_id
;

55 
u8_t
 
	mr_∆
;

57 
u8_t
 
	gnode_°ack_˙t
;

58 
n£
 
	gnode_°ack
[
NODE_STACK_SIZE
];

64 
	$push_node
(
n£
* 
node
)

66 
	`LWIP_ASSERT
("node_°ack_˙à< NODE_STACK_SIZE",
node_°ack_˙t
 < 
NODE_STACK_SIZE
);

67 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("push_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

68 i‡(
node_°ack_˙t
 < 
NODE_STACK_SIZE
)

70 
node_°ack
[
node_°ack_˙t
] = *
node
;

71 
node_°ack_˙t
++;

73 
	}
}

79 
	$p›_node
(
n£
* 
node
)

81 i‡(
node_°ack_˙t
 > 0)

83 
node_°ack_˙t
--;

84 *
node
 = 
node_°ack
[
node_°ack_˙t
];

86 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("p›_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

87 
	}
}

95 
	$¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif)

97 
√tif
 *
nif
 = 
√tif_li°
;

98 
u16_t
 
i
, 
ifidx
;

100 
ifidx
 = 
ifödex
 - 1;

101 
i
 = 0;

102 (
nif
 !
NULL
Ë&& (
i
 < 
ifidx
))

104 
nif
 =Çif->
√xt
;

105 
i
++;

107 *
√tif
 = 
nif
;

108 
	}
}

116 
	$¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
)

118 
√tif
 *
nif
 = 
√tif_li°
;

119 
u16_t
 
i
;

121 
i
 = 0;

122 
nif
 !
√tif
)

124 
nif
 =Çif->
√xt
;

125 
i
++;

127 *
ifidx
 = 
i
+1;

128 
	}
}

136 
	$¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
)

138 
u32_t
 
ùa
;

140 
ùa
 = 
idít
[0];

141 
ùa
 <<= 8;

142 
ùa
 |
idít
[1];

143 
ùa
 <<= 8;

144 
ùa
 |
idít
[2];

145 
ùa
 <<= 8;

146 
ùa
 |
idít
[3];

147 
ù
->
addr
 = 
ùa
;

148 
	}
}

156 
	$¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
)

158 
u32_t
 
ùa
;

160 
ùa
 = 
ù
->
addr
;

161 
idít
[0] = (
ùa
 >> 24) & 0xff;

162 
idít
[1] = (
ùa
 >> 16) & 0xff;

163 
idít
[2] = (
ùa
 >> 8) & 0xff;

164 
idít
[3] = 
ùa
 & 0xff;

165 
	}
}

167 
mib_li°_node
 *

168 
	$¢mp_mib_ _Æloc
(
s32_t
 
id
)

170 
mib_li°_node
 *
 
;

172 
 
 = (
mib_li°_node
 *)
	`mem_mÆloc
((mib_list_node));

173 i‡(
 
 !
NULL
)

175 
 
->
¥ev
 = 
NULL
;

176 
 
->
√xt
 = 
NULL
;

177 
 
->
objid
 = 
id
;

178 
 
->
≈å
 = 
NULL
;

180  
 
;

181 
	}
}

184 
	$¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
)

186 
	`mem_‰ì
(
 
);

187 
	}
}

189 
mib_li°_roŸnode
 *

190 
	$¢mp_mib_Ãn_Æloc
()

192 
mib_li°_roŸnode
 *
Ãn
;

194 
Ãn
 = (
mib_li°_roŸnode
*)
	`mem_mÆloc
((mib_list_rootnode));

195 i‡(
Ãn
 !
NULL
)

197 
Ãn
->
gë_obje˘_def
 = 
nﬁófs_gë_obje˘_def
;

198 
Ãn
->
gë_vÆue
 = 
nﬁófs_gë_vÆue
;

199 
Ãn
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

200 
Ãn
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

201 
Ãn
->
node_ty≥
 = 
MIB_NODE_LR
;

202 
Ãn
->
maxÀngth
 = 0;

203 
Ãn
->
hód
 = 
NULL
;

204 
Ãn
->
èû
 = 
NULL
;

205 
Ãn
->
cou¡
 = 0;

207  
Ãn
;

208 
	}
}

211 
	$¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
)

213 
	`mem_‰ì
(
Ãn
);

214 
	}
}

227 
s8_t


228 
	$¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
)

230 
mib_li°_node
 *
¬
;

231 
s8_t
 
ö£π
;

233 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

236 
ö£π
 = 0;

237 i‡(
∫
->
hód
 =
NULL
)

240 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯em±yÜi° objid==%"
S32_F
"\n",
objid
));

241 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

242 i‡(
¬
 !
NULL
)

244 
∫
->
hód
 = 
¬
;

245 
∫
->
èû
 = 
¬
;

246 *
ö¢
 = 
¬
;

247 
ö£π
 = 1;

251 
ö£π
 = -1;

256 
mib_li°_node
 *
n
;

258 
n
 = 
∫
->
hód
;

259 (
n
 !
NULL
Ë&& (
ö£π
 == 0))

261 i‡(
n
->
objid
 == objid)

264 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("nodêÆªadyÅhîêobjid==%"
S32_F
"\n",
objid
));

265 *
ö¢
 = 
n
;

266 
ö£π
 = 2;

268 i‡(
n
->
objid
 < objid)

270 i‡(
n
->
√xt
 =
NULL
)

273 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†èû objid==%"
S32_F
"\n",
objid
));

274 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

275 i‡(
¬
 !
NULL
)

277 
¬
->
√xt
 = 
NULL
;

278 
¬
->
¥ev
 = 
n
;

279 
n
->
√xt
 = 
¬
;

280 
∫
->
èû
 = 
¬
;

281 *
ö¢
 = 
¬
;

282 
ö£π
 = 1;

287 
ö£π
 = -1;

293 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("traverseÜist\n"));

294 
n
 =Ç->
√xt
;

301 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†n->¥ev, objid==%"
S32_F
",Ç\n",
objid
));

302 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

303 i‡(
¬
 !
NULL
)

305 i‡(
n
->
¥ev
 =
NULL
)

308 
¬
->
√xt
 = 
n
;

309 
¬
->
¥ev
 = 
NULL
;

310 
∫
->
hód
 = 
¬
;

311 
n
->
¥ev
 = 
¬
;

316 
¬
->
√xt
 = 
n
;

317 
¬
->
¥ev
 = 
n
->prev;

318 
n
->
¥ev
->
√xt
 = 
¬
;

319 
n
->
¥ev
 = 
¬
;

321 *
ö¢
 = 
¬
;

322 
ö£π
 = 1;

327 
ö£π
 = -1;

332 i‡(
ö£π
 == 1)

334 
∫
->
cou¡
 += 1;

336 
	`LWIP_ASSERT
("ö£π !0",
ö£π
 != 0);

337  
ö£π
;

338 
	}
}

349 
s8_t


350 
	$¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
)

352 
s8_t
 
fc
;

353 
mib_li°_node
 *
n
;

355 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

356 
n
 = 
∫
->
hód
;

357 (
n
 !
NULL
Ë&& (n->
objid
 != objid))

359 
n
 =Ç->
√xt
;

361 i‡(
n
 =
NULL
)

363 
fc
 = 0;

365 i‡(
n
->
≈å
 =
NULL
)

368 
fc
 = 1;

372 
mib_li°_roŸnode
 *
r
;

374 i‡(
n
->
≈å
->
node_ty≥
 =
MIB_NODE_LR
)

376 
r
 = (
mib_li°_roŸnode
 *)
n
->
≈å
;

377 i‡(
r
->
cou¡
 > 1)

380 
fc
 = 2;

385 
fc
 = 1;

391 
fc
 = 3;

394 *
‚
 = 
n
;

395  
fc
;

396 
	}
}

406 
mib_li°_roŸnode
 *

407 
	$¢mp_mib_node_dñëe
(
mib_li°_roŸnode
 *
∫
, 
mib_li°_node
 *
n
)

409 
mib_li°_roŸnode
 *
√xt
;

411 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

412 
	`LWIP_ASSERT
("¿!NULL",
n
 !
NULL
);

415 
√xt
 = (
mib_li°_roŸnode
*)(
n
->
≈å
);

416 
∫
->
cou¡
 -= 1;

418 i‡(
n
 =
∫
->
hód
)

420 
∫
->
hód
 = 
n
->
√xt
;

421 i‡(
n
->
√xt
 !
NULL
)

424 
n
->
√xt
->
¥ev
 = 
NULL
;

427 i‡(
n
 =
∫
->
èû
)

429 
∫
->
èû
 = 
n
->
¥ev
;

430 i‡(
n
->
¥ev
 !
NULL
)

433 
n
->
¥ev
->
√xt
 = 
NULL
;

439 
n
->
¥ev
->
√xt
 =Ç->next;

440 
n
->
√xt
->
¥ev
 =Ç->prev;

442 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("‰ìÜi° objid==%"
S32_F
"\n",
n
->
objid
));

443 
	`¢mp_mib_ _‰ì
(
n
);

444 i‡(
∫
->
cou¡
 == 0)

446 
∫
->
hód
 = 
NULL
;

447 
∫
->
èû
 = 
NULL
;

449  
√xt
;

450 
	}
}

463 
mib_node
 *

464 
	$¢mp_£¨ch_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
)

466 
u8_t
 
node_ty≥
, 
ext_Àvñ
;

468 
ext_Àvñ
 = 0;

469 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("node==%∞*idít==%"
S32_F
"\n",(*)
node
,*
idít
));

470 
node
 !
NULL
)

472 
node_ty≥
 = 
node
->node_type;

473 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

475 
mib_¨øy_node
 *
™
;

476 
u16_t
 
i
;

478 i‡(
idít_Àn
 > 0)

481 
™
 = (
mib_¨øy_node
 *)
node
;

482 
i
 = 0;

483 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] !*
idít
))

485 
i
++;

487 i‡(
i
 < 
™
->
maxÀngth
)

490 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

491 i‡(
™
->
≈å
[
i
] =
NULL
)

495 
≈
->
idít_Àn
 = ident_len;

496 
≈
->
idít
 = ident;

497  (
mib_node
*)
™
;

502 
idít
++;

503 
idít_Àn
--;

504 
node
 = 
™
->
≈å
[
i
];

510 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™ sórch faûed *idít==%"
S32_F
"\n",*
idít
));

511  
NULL
;

517 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("an search failed, short object identifier\n"));

518  
NULL
;

521 if(
node_ty≥
 =
MIB_NODE_LR
)

523 
mib_li°_roŸnode
 *
Ãn
;

524 
mib_li°_node
 *
 
;

526 i‡(
idít_Àn
 > 0)

529 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

530 
 
 = 
Ãn
->
hód
;

532 (
 
 !
NULL
Ë&& ( ->
objid
 !*
idít
))

534 
 
 =Ün->
√xt
;

536 i‡(
 
 !
NULL
)

539 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

540 i‡(
 
->
≈å
 =
NULL
)

542 
≈
->
idít_Àn
 = ident_len;

543 
≈
->
idít
 = ident;

544  (
mib_node
*)
Ãn
;

549 
idít_Àn
--;

550 
idít
++;

551 
node
 = 
 
->
≈å
;

557 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("  sórch faûed *idít==%"
S32_F
"\n",*
idít
));

558  
NULL
;

564 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ln search failed, short object identifier\n"));

565  
NULL
;

568 if(
node_ty≥
 =
MIB_NODE_EX
)

570 
mib_exã∫Æ_node
 *
í
;

571 
u16_t
 
i
, 
Àn
;

573 i‡(
idít_Àn
 > 0)

576 
í
 = (
mib_exã∫Æ_node
 *)
node
;

578 
i
 = 0;

579 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

580 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) != 0))

582 
i
++;

584 i‡(
i
 < 
Àn
)

586 
s32_t
 
debug_id
;

588 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
debug_id
);

589 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid==%"
S32_F
" *idít==%"S32_F"\n",
debug_id
,*
idít
));

590 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

592 
≈
->
idít_Àn
 = ident_len;

593 
≈
->
idít
 = ident;

594  (
mib_node
*)
í
;

599 
idít_Àn
--;

600 
idít
++;

601 
ext_Àvñ
++;

607 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í sórch faûed *idít==%"
S32_F
"\n",*
idít
));

608  
NULL
;

614 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("en search failed, short object identifier\n"));

615  
NULL
;

618 i‡(
node_ty≥
 =
MIB_NODE_SC
)

620 
mib_sˇœr_node
 *
¢
;

622 
¢
 = (
mib_sˇœr_node
 *)
node
;

623 i‡((
idít_Àn
 =1Ë&& (*
idít
 == 0))

625 
≈
->
idít_Àn
 = ident_len;

626 
≈
->
idít
 = ident;

627  (
mib_node
*)
¢
;

632 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("search failed, invalid object identifierÜength\n"));

633  
NULL
;

639 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

640  
NULL
;

644 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode==%p\n",(*)
node
));

645  
NULL
;

646 
	}
}

651 
u8_t


652 
	$em±y_èbÀ
(
mib_node
 *
node
)

654 
u8_t
 
node_ty≥
;

655 
u8_t
 
em±y
 = 0;

657 i‡(
node
 !
NULL
)

659 
node_ty≥
 = 
node
->node_type;

660 i‡(
node_ty≥
 =
MIB_NODE_LR
)

662 
mib_li°_roŸnode
 *
Ãn
;

663 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

664 i‡((
Ãn
->
cou¡
 =0Ë|| (Ãn->
hód
 =
NULL
))

666 
em±y
 = 1;

669 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

671 
mib_¨øy_node
 *
™
;

672 
™
 = (
mib_¨øy_node
 *)
node
;

673 i‡((
™
->
maxÀngth
 =0Ë|| (™->
≈å
 =
NULL
))

675 
em±y
 = 1;

678 i‡(
node_ty≥
 =
MIB_NODE_EX
)

680 
mib_exã∫Æ_node
 *
í
;

681 
í
 = (
mib_exã∫Æ_node
 *)
node
;

682 i‡(
í
->
åì_Àvñs
 == 0)

684 
em±y
 = 1;

688  
em±y
;

689 
	}
}

694 
mib_node
 *

695 
	$¢mp_ex∑nd_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

697 
u8_t
 
node_ty≥
, 
ext_Àvñ
, 
˛imb_åì
;

699 
ext_Àvñ
 = 0;

701 
node_°ack_˙t
 = 0;

702 
node
 !
NULL
)

704 
˛imb_åì
 = 0;

705 
node_ty≥
 = 
node
->node_type;

706 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

708 
mib_¨øy_node
 *
™
;

709 
u16_t
 
i
;

712 
™
 = (
mib_¨øy_node
 *)
node
;

713 i‡(
idít_Àn
 > 0)

715 
i
 = 0;

716 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] < *
idít
))

718 
i
++;

720 i‡(
i
 < 
™
->
maxÀngth
)

722 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

724 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
];

725 (
oidªt
->
Àn
)++;

727 i‡(
™
->
≈å
[
i
] =
NULL
)

729 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

731 i‡(
™
->
objid
[
i
] > *
idít
)

733  (
mib_node
*)
™
;

735 i‡((
i
 + 1Ë< 
™
->
maxÀngth
)

738 (
oidªt
->
Àn
)--;

739 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
 + 1];

740 (
oidªt
->
Àn
)++;

741  (
mib_node
*)
™
;

746 (
oidªt
->
Àn
)--;

747 
˛imb_åì
 = 1;

752 
u8_t
 
j
;

753 
n£
 
cur_node
;

755 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

757 
j
 = 
i
 + 1;

758 (
j
 < 
™
->
maxÀngth
Ë&& (
	`em±y_èbÀ
◊n->
≈å
[j])))

760 
j
++;

762 i‡(
j
 < 
™
->
maxÀngth
)

764 
cur_node
.
r_±r
 = 
™
->
≈å
[
j
];

765 
cur_node
.
r_id
 = 
™
->
objid
[
j
];

766 
cur_node
.
r_∆
 = 0;

770 
cur_node
.
r_±r
 = 
NULL
;

772 
	`push_node
(&
cur_node
);

773 i‡(
™
->
objid
[
i
] =*
idít
)

775 
idít_Àn
--;

776 
idít
++;

781 
idít_Àn
 = 0;

784 
node
 = 
™
->
≈å
[
i
];

790 
˛imb_åì
 = 1;

795 
u8_t
 
j
;

797 
j
 = 0;

798 (
j
 < 
™
->
maxÀngth
Ë&& 
	`em±y_èbÀ
◊n->
≈å
[j]))

800 
j
++;

802 i‡(
j
 < 
™
->
maxÀngth
)

804 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·án->objid[j]==%"
S32_F
"\n",
™
->
objid
[
j
]));

805 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
j
];

806 (
oidªt
->
Àn
)++;

807 i‡(
™
->
≈å
[
j
] =
NULL
)

810  (
mib_node
*)
™
;

815 
node
 = 
™
->
≈å
[
j
];

821 
˛imb_åì
 = 1;

825 if(
node_ty≥
 =
MIB_NODE_LR
)

827 
mib_li°_roŸnode
 *
Ãn
;

828 
mib_li°_node
 *
 
;

831 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

832 i‡(
idít_Àn
 > 0)

834 
 
 = 
Ãn
->
hód
;

836 (
 
 !
NULL
Ë&& ( ->
objid
 < *
idít
))

838 
 
 =Ün->
√xt
;

840 i‡(
 
 !
NULL
)

842 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

843 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
objid
;

844 (
oidªt
->
Àn
)++;

845 i‡(
 
->
≈å
 =
NULL
)

848 i‡(
 
->
objid
 > *
idít
)

850  (
mib_node
*)
Ãn
;

852 i‡(
 
->
√xt
 !
NULL
)

855 (
oidªt
->
Àn
)--;

856 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
√xt
->
objid
;

857 (
oidªt
->
Àn
)++;

858  (
mib_node
*)
Ãn
;

863 (
oidªt
->
Àn
)--;

864 
˛imb_åì
 = 1;

869 
mib_li°_node
 *
jn
;

870 
n£
 
cur_node
;

873 
jn
 = 
 
->
√xt
;

874 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

876 
jn
 = jn->
√xt
;

878 i‡(
jn
 !
NULL
)

880 
cur_node
.
r_±r
 = 
jn
->
≈å
;

881 
cur_node
.
r_id
 = 
jn
->
objid
;

882 
cur_node
.
r_∆
 = 0;

886 
cur_node
.
r_±r
 = 
NULL
;

888 
	`push_node
(&
cur_node
);

889 i‡(
 
->
objid
 =*
idít
)

891 
idít_Àn
--;

892 
idít
++;

897 
idít_Àn
 = 0;

900 
node
 = 
 
->
≈å
;

907 
˛imb_åì
 = 1;

912 
mib_li°_node
 *
jn
;

914 
jn
 = 
Ãn
->
hód
;

915 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

917 
jn
 = jn->
√xt
;

919 i‡(
jn
 !
NULL
)

921 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À· jn->objid==%"
S32_F
"\n",
jn
->
objid
));

922 
oidªt
->
id
[oidªt->
Àn
] = 
jn
->
objid
;

923 (
oidªt
->
Àn
)++;

924 i‡(
jn
->
≈å
 =
NULL
)

927 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("jn->nptr == NULL\n"));

928  (
mib_node
*)
Ãn
;

933 
node
 = 
jn
->
≈å
;

939 
˛imb_åì
 = 1;

943 if(
node_ty≥
 =
MIB_NODE_EX
)

945 
mib_exã∫Æ_node
 *
í
;

946 
s32_t
 
ex_id
;

949 
í
 = (
mib_exã∫Æ_node
 *)
node
;

950 i‡(
idít_Àn
 > 0)

952 
u16_t
 
i
, 
Àn
;

954 
i
 = 0;

955 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

956 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) < 0))

958 
i
++;

960 i‡(
i
 < 
Àn
)

963 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
ex_id
);

964 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
ex_id
,*
idít
));

965 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

966 (
oidªt
->
Àn
)++;

968 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

970 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

972 i‡(
ex_id
 > *
idít
)

974  (
mib_node
*)
í
;

976 i‡((
i
 + 1Ë< 
Àn
)

979 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
 + 1,&
ex_id
);

980 (
oidªt
->
Àn
)--;

981 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

982 (
oidªt
->
Àn
)++;

983  (
mib_node
*)
í
;

988 (
oidªt
->
Àn
)--;

989 
˛imb_åì
 = 1;

994 
u8_t
 
j
;

995 
n£
 
cur_node
;

997 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

999 
j
 = 
i
 + 1;

1000 i‡(
j
 < 
Àn
)

1003 
cur_node
.
r_±r
 = 
node
;

1004 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
j
,&
cur_node
.
r_id
);

1005 
cur_node
.
r_∆
 = 
ext_Àvñ
 + 1;

1009 
cur_node
.
r_±r
 = 
NULL
;

1011 
	`push_node
(&
cur_node
);

1012 i‡(
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,
i
,*
idít
) == 0)

1014 
idít_Àn
--;

1015 
idít
++;

1020 
idít_Àn
 = 0;

1023 
ext_Àvñ
++;

1029 
˛imb_åì
 = 1;

1035 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,0,&
ex_id
);

1036 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·Én->objid==%"
S32_F
"\n",
ex_id
));

1037 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

1038 (
oidªt
->
Àn
)++;

1039 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

1042 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("(ext_level + 1) ==Én->tree_levels\n"));

1043  (
mib_node
*)
í
;

1048 
ext_Àvñ
++;

1052 if(
node_ty≥
 =
MIB_NODE_SC
)

1054 
mib_sˇœr_node
 *
¢
;

1057 
¢
 = (
mib_sˇœr_node
 *)
node
;

1058 i‡(
idít_Àn
 > 0)

1061 
˛imb_åì
 = 1;

1066 
oidªt
->
id
[oidªt->
Àn
] = 0;

1067 (
oidªt
->
Àn
)++;

1069 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("completed scalarÜeaf\n"));

1070  (
mib_node
*)
¢
;

1076 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

1077  
NULL
;

1080 i‡(
˛imb_åì
)

1082 
n£
 
chûd
;

1085 
chûd
.
r_±r
 = 
NULL
;

1086 
chûd
.
r_id
 = 0;

1087 
chûd
.
r_∆
 = 0;

1088 (
node_°ack_˙t
 > 0Ë&& (
chûd
.
r_±r
 =
NULL
))

1090 
	`p›_node
(&
chûd
);

1092 (
oidªt
->
Àn
)--;

1094 i‡(
chûd
.
r_±r
 !
NULL
)

1097 
idít_Àn
 = 0;

1098 
oidªt
->
id
[oidªt->
Àn
] = 
chûd
.
r_id
;

1099 
oidªt
->
Àn
++;

1100 
node
 = 
chûd
.
r_±r
;

1101 
ext_Àvñ
 = 
chûd
.
r_∆
;

1106 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("expand failed,ÅreeÉnds here\n"));

1107  
NULL
;

1112 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode==%p\n",(*)
node
));

1113  
NULL
;

1114 
	}
}

1123 
u8_t


1124 
	$¢mp_iso_¥efix_t°
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

1126 i‡((
idít_Àn
 > 3) &&

1127 (
idít
[0] == 1) && (ident[1] == 3) &&

1128 (
idít
[2] == 6) && (ident[3] == 1))

1136 
	}
}

1149 
u8_t


1150 
	$¢mp_iso_¥efix_ex∑nd
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

1152 c⁄° 
s32_t
 *
¥efix_±r
;

1153 
s32_t
 *
ªt_±r
;

1154 
u8_t
 
i
;

1156 
i
 = 0;

1157 
¥efix_±r
 = &
¥efix
[0];

1158 
ªt_±r
 = &
oidªt
->
id
[0];

1159 
idít_Àn
 = ((ident_len < 4)?ident_len:4);

1160 (
i
 < 
idít_Àn
Ë&& ((*
idít
Ë<(*
¥efix_±r
)))

1162 *
ªt_±r
++ = *
¥efix_±r
++;

1163 
idít
++;

1164 
i
++;

1166 i‡(
i
 =
idít_Àn
)

1169 
i
 < 4)

1171 *
ªt_±r
++ = *
¥efix_±r
++;

1172 
i
++;

1174 
oidªt
->
Àn
 = 
i
;

1182 
	}
}

	@net/lwip/core/snmp/msg_in.c

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_SNMP


40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/udp.h
"

43 
	~"lwù/°©s.h
"

44 
	~"lwù/¢mp.h
"

45 
	~"lwù/¢mp_a¢1.h
"

46 
	~"lwù/¢mp_msg.h
"

47 
	~"lwù/¢mp_°ru˘s.h
"

49 
	~<°rög.h
>

53 c⁄° 
s32_t
 
	g¢mp_vîsi⁄
 = 0;

55 c⁄° 
	g¢mp_publiccommunôy
[7] = "public";

58 
¢mp_msg_p°©
 
	gmsg_öput_li°
[
SNMP_CONCURRENT_REQUESTS
];

60 
udp_pcb
 *
	g¢mp1_pcb
;

62 
¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

63 
îr_t
 
¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

64 
îr_t
 
¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

72 
	$¢mp_öô
()

74 
¢mp_msg_p°©
 *
msg_ps
;

75 
u8_t
 
i
;

77 
¢mp1_pcb
 = 
	`udp_√w
();

78 i‡(
¢mp1_pcb
 !
NULL
)

80 
	`udp_ªcv
(
¢mp1_pcb
, 
¢mp_ªcv
, (*)
SNMP_IN_PORT
);

81 
	`udp_böd
(
¢mp1_pcb
, 
IP_ADDR_ANY
, 
SNMP_IN_PORT
);

83 
msg_ps
 = &
msg_öput_li°
[0];

84 
i
=0; i<
SNMP_CONCURRENT_REQUESTS
; i++)

86 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

87 
msg_ps
->
îr‹_ödex
 = 0;

88 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

89 
msg_ps
++;

91 
å≠_msg
.
pcb
 = 
¢mp1_pcb
;

94 
	`¢mp_cﬁd°¨t_å≠
();

95 
	}
}

98 
	$¢mp_îr‹_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
, 
u8_t
 
îr‹
)

100 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

101 
msg_ps
->
outvb
 = msg_ps->
övb
;

102 
msg_ps
->
övb
.
hód
 = 
NULL
;

103 
msg_ps
->
övb
.
èû
 = 
NULL
;

104 
msg_ps
->
övb
.
cou¡
 = 0;

105 
msg_ps
->
îr‹_°©us
 = 
îr‹
;

106 
msg_ps
->
îr‹_ödex
 = 1 + msg_ps->
vb_idx
;

107 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

108 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

109 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

110 
	}
}

113 
	$¢mp_ok_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
)

115 
îr_t
 
îr_ªt
;

117 
îr_ªt
 = 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

118 i‡(
îr_ªt
 =
ERR_MEM
)

124 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_evíà%"
S32_F
"\n",
msg_ps
->
îr‹_°©us
));

127 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
övb
);

128 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

129 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

130 
	}
}

139 
	$¢mp_msg_gë_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

141 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

143 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

145 
mib_exã∫Æ_node
 *
í
;

146 
¢mp_«me_±r
 
≈
;

149 
í
 = 
msg_ps
->
ext_mib_node
;

150 
≈
 = 
msg_ps
->
ext_«me_±r
;

153 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

154 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

156 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

157 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

161 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

163 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

166 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

168 
mib_exã∫Æ_node
 *
í
;

169 
¢mp_v¨böd
 *
vb
;

172 
í
 = 
msg_ps
->
ext_mib_node
;

175 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

176 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

177 i‡(
vb
 !
NULL
)

179 
vb
->
√xt
 = 
NULL
;

180 
vb
->
¥ev
 = 
NULL
;

183 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

184 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

186 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

187 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

189 
vb
->
vÆue_ty≥
 = 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
;

190 
vb
->
vÆue_Àn
 = 
msg_ps
->
ext_obje˘_def
.
v_Àn
;

191 i‡(
vb
->
vÆue_Àn
 > 0)

193 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

194 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

195 i‡(
vb
->
vÆue
 !
NULL
)

197 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

198 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

200 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

201 
msg_ps
->
vb_idx
 += 1;

205 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

206 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço variable space\n"));

207 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

208 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

209 
	`mem_‰ì
(
vb
);

210 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

216 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

217 
vb
->
vÆue
 = 
NULL
;

218 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

220 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

221 
msg_ps
->
vb_idx
 += 1;

226 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

227 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço outvb space\n"));

228 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

232 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

233 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

235 
mib_node
 *
mn
;

236 
¢mp_«me_±r
 
≈
;

238 i‡(
msg_ps
->
vb_idx
 == 0)

240 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

244 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

247 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

249 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

250 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

251 i‡(
mn
 !
NULL
)

253 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

256 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

258 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

260 
msg_ps
->
ext_mib_node
 = 
í
;

261 
msg_ps
->
ext_«me_±r
 = 
≈
;

263 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

268 
obj_def
 
obje˘_def
;

270 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

271 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

272 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

274 
mn
 = mn;

279 
mn
 = 
NULL
;

281 i‡(
mn
 !
NULL
)

283 
¢mp_v¨böd
 *
vb
;

285 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

287 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

288 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

289 i‡(
vb
 !
NULL
)

291 
vb
->
√xt
 = 
NULL
;

292 
vb
->
¥ev
 = 
NULL
;

295 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

296 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

298 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

299 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

301 
vb
->
vÆue_ty≥
 = 
obje˘_def
.
a¢_ty≥
;

302 
vb
->
vÆue_Àn
 = 
obje˘_def
.
v_Àn
;

303 i‡(
vb
->
vÆue_Àn
 > 0)

305 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

306 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

307 i‡(
vb
->
vÆue
 !
NULL
)

309 
mn
->
	`gë_vÆue
(&
obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

310 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

311 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

312 
msg_ps
->
vb_idx
 += 1;

316 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate variable space\n"));

317 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

318 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

319 
	`mem_‰ì
(
vb
);

320 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

326 
vb
->
vÆue
 = 
NULL
;

327 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

328 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

329 
msg_ps
->
vb_idx
 += 1;

334 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate outvb space\n"));

335 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

343 
mn
 = 
NULL
;

345 i‡(
mn
 =
NULL
)

348 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

351 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

352 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

354 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

356 
	}
}

365 
	$¢mp_msg_gë√xt_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

367 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë√xt_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

369 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

371 
mib_exã∫Æ_node
 *
í
;

374 
í
 = 
msg_ps
->
ext_mib_node
;

377 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1], &msg_ps->
ext_obje˘_def
);

378 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

380 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

381 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

385 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1]);

387 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

390 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

392 
mib_exã∫Æ_node
 *
í
;

393 
¢mp_v¨böd
 *
vb
;

396 
í
 = 
msg_ps
->
ext_mib_node
;

398 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
msg_ps
->
ext_oid
,

399 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
,

400 
msg_ps
->
ext_obje˘_def
.
v_Àn
);

401 i‡(
vb
 !
NULL
)

403 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

404 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

405 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

406 
msg_ps
->
vb_idx
 += 1;

410 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

411 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_getnext_event: couldn'tállocate outvb space\n"));

412 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

416 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

417 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

419 
mib_node
 *
mn
;

420 
¢mp_obj_id
 
oid
;

422 i‡(
msg_ps
->
vb_idx
 == 0)

424 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

428 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

430 i‡(
	`¢mp_iso_¥efix_ex∑nd
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
, &
oid
))

432 i‡(
msg_ps
->
vb_±r
->
idít_Àn
 > 3)

435 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
,

436 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

437 
msg_ps
->
vb_±r
->
idít
 + 4, &
oid
);

442 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
, 0, 
NULL
, &
oid
);

447 
mn
 = 
NULL
;

449 i‡(
mn
 !
NULL
)

451 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

454 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

456 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

458 
msg_ps
->
ext_mib_node
 = 
í
;

459 
msg_ps
->
ext_oid
 = 
oid
;

461 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 1, &
oid
.
id
[oid.
Àn
 - 1]);

466 
obj_def
 
obje˘_def
;

467 
¢mp_v¨böd
 *
vb
;

469 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

470 
mn
->
	`gë_obje˘_def
(1, &
oid
.
id
[oid.
Àn
 - 1], &
obje˘_def
);

472 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
obje˘_def
.
a¢_ty≥
, obje˘_def.
v_Àn
);

473 i‡(
vb
 !
NULL
)

475 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

476 
mn
->
	`gë_vÆue
(&
obje˘_def
, obje˘_def.
v_Àn
, 
vb
->
vÆue
);

477 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

478 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

479 
msg_ps
->
vb_idx
 += 1;

483 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_recv couldn'tállocate outvb space\n"));

484 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

488 i‡(
mn
 =
NULL
)

491 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

494 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

495 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

497 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

499 
	}
}

508 
	$¢mp_msg_£t_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

510 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_£t_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

512 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

514 
mib_exã∫Æ_node
 *
í
;

515 
¢mp_«me_±r
 
≈
;

518 
í
 = 
msg_ps
->
ext_mib_node
;

519 
≈
 = 
msg_ps
->
ext_«me_±r
;

522 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

523 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

525 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_TEST
;

526 
í
->
	`£t_ã°_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

530 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

532 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

535 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_TEST
)

537 
mib_exã∫Æ_node
 *
í
;

540 
í
 = 
msg_ps
->
ext_mib_node
;

542 i‡(
msg_ps
->
ext_obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

544 i‡((
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
 =msg_ps->
vb_±r
->
vÆue_ty≥
) &&

545 (
í
->
	`£t_ã°_a
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
,

546 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

548 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

549 
msg_ps
->
vb_idx
 += 1;

553 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

555 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

560 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

562 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

565 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
)

567 
mib_exã∫Æ_node
 *
í
;

568 
¢mp_«me_±r
 
≈
;

571 
í
 = 
msg_ps
->
ext_mib_node
;

572 
≈
 = 
msg_ps
->
ext_«me_±r
;

575 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

576 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

578 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_VALUE
;

579 
í
->
	`£t_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

580 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

584 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

586 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_GENERROR
);

589 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_VALUE
)

591 
mib_exã∫Æ_node
 *
í
;

594 
í
 = 
msg_ps
->
ext_mib_node
;

595 
í
->
	`£t_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

598 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

599 
msg_ps
->
vb_idx
 += 1;

603 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

604 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

606 
mib_node
 *
mn
;

607 
¢mp_«me_±r
 
≈
;

609 i‡(
msg_ps
->
vb_idx
 == 0)

611 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

615 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

618 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

620 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

621 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

622 i‡(
mn
 !
NULL
)

624 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

627 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

629 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

631 
msg_ps
->
ext_mib_node
 = 
í
;

632 
msg_ps
->
ext_«me_±r
 = 
≈
;

634 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

639 
obj_def
 
obje˘_def
;

641 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

642 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

643 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

645 
mn
 = mn;

650 
mn
 = 
NULL
;

652 i‡(
mn
 !
NULL
)

654 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_TEST
;

656 i‡(
obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

658 i‡((
obje˘_def
.
a¢_ty≥
 =
msg_ps
->
vb_±r
->
vÆue_ty≥
) &&

659 (
mn
->
	`£t_ã°
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

661 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

662 
msg_ps
->
vb_idx
 += 1;

667 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

673 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

681 
mn
 = 
NULL
;

683 i‡(
mn
 =
NULL
)

686 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

690 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

691 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

693 
msg_ps
->
vb_idx
 = 0;

694 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

698 (
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

699 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

701 
mib_node
 *
mn
;

702 
¢mp_«me_±r
 
≈
;

704 i‡(
msg_ps
->
vb_idx
 == 0)

706 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

710 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

713 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

714 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

717 i‡(
mn
 !
NULL
)

719 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

722 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

724 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
;

726 
msg_ps
->
ext_mib_node
 = 
í
;

727 
msg_ps
->
ext_«me_±r
 = 
≈
;

729 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

734 
obj_def
 
obje˘_def
;

736 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF_S
;

737 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

738 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

739 
mn
->
	`£t_vÆue
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

740 
msg_ps
->
vb_idx
 += 1;

744 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

745 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

750 
msg_ps
->
outvb
 = msg_ps->
övb
;

751 
msg_ps
->
övb
.
hód
 = 
NULL
;

752 
msg_ps
->
övb
.
èû
 = 
NULL
;

753 
msg_ps
->
övb
.
cou¡
 = 0;

754 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

756 
	}
}

766 
	$¢mp_msg_evít
(
u8_t
 
ªque°_id
)

768 
¢mp_msg_p°©
 *
msg_ps
;

770 i‡(
ªque°_id
 < 
SNMP_CONCURRENT_REQUESTS
)

772 
msg_ps
 = &
msg_öput_li°
[
ªque°_id
];

773 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
)

775 
	`¢mp_msg_gë√xt_evít
(
ªque°_id
, 
msg_ps
);

777 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
)

779 
	`¢mp_msg_gë_evít
(
ªque°_id
, 
msg_ps
);

781 if(
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

783 
	`¢mp_msg_£t_evít
(
ªque°_id
, 
msg_ps
);

786 
	}
}

791 
	$¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

793 
udp_hdr
 *
udphdr
;

796 
	`LWIP_UNUSED_ARG
(
¨g
);

798 if(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)){

799 
	`LWIP_ASSERT
("Can't moveÅo UDP header", 0);

800 
	`pbuf_‰ì
(
p
);

803 
udphdr
 = 
p
->
∑ylﬂd
;

806 i‡((
pcb
 =
¢mp1_pcb
Ë&& (
	`¡ohs
(
udphdr
->
de°
Ë=
SNMP_IN_PORT
))

808 
¢mp_msg_p°©
 *
msg_ps
;

809 
u8_t
 
ªq_idx
;

812 
msg_ps
 = &
msg_öput_li°
[0];

813 
ªq_idx
 = 0;

814 (
ªq_idx
<
SNMP_CONCURRENT_REQUESTS
Ë&& (
msg_ps
->
°©e
 !
SNMP_MSG_EMPTY
))

816 
ªq_idx
++;

817 
msg_ps
++;

819 i‡(
ªq_idx
 !
SNMP_CONCURRENT_REQUESTS
)

821 
îr_t
 
îr_ªt
;

822 
u16_t
 
∑ylﬂd_Àn
;

823 
u16_t
 
∑ylﬂd_ofs
;

824 
u16_t
 
v¨böd_ofs
 = 0;

827 
	`¢mp_öc_¢mpöpkts
();

829 
msg_ps
->
pcb
 =Öcb;

831 
msg_ps
->
sù
 = *
addr
;

833 
msg_ps
->
•
 = 
p‹t
;

835 
∑ylﬂd_Àn
 = 
	`¡ohs
(
udphdr
->
Àn
Ë- 
UDP_HLEN
;

838 
∑ylﬂd_ofs
 = 
UDP_HLEN
;

841 
îr_ªt
 = 
	`¢mp_pdu_hódî_check
(
p
, 
∑ylﬂd_ofs
, 
∑ylﬂd_Àn
, &
v¨böd_ofs
, 
msg_ps
);

842 i‡(((
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
) ||

843 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
) ||

844 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)) &&

845 ((
msg_ps
->
îr‹_°©us
 =
SNMP_ES_NOERROR
) &&

846 (
msg_ps
->
îr‹_ödex
 == 0)) )

849 
îr_ªt
 =Érr_ret;

854 
îr_ªt
 = 
ERR_ARG
;

856 i‡(
îr_ªt
 =
ERR_OK
)

858 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv ok, communôy %s\n", 
msg_ps
->
communôy
));

862 
îr_ªt
 = 
	`¢mp_pdu_dec_v¨bödli°
(
p
, 
v¨böd_ofs
, &v¨böd_ofs, 
msg_ps
);

863 i‡((
îr_ªt
 =
ERR_OK
Ë&& (
msg_ps
->
övb
.
cou¡
 > 0))

866 
	`pbuf_‰ì
(
p
);

868 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

869 
msg_ps
->
îr‹_ödex
 = 0;

871 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

873 
msg_ps
->
vb_idx
 = 0;

875 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv v¨böd c¡=%"
U16_F
"\n",(
u16_t
)
msg_ps
->
övb
.
cou¡
));

878 
	`¢mp_msg_evít
(
ªq_idx
);

885 
	`pbuf_‰ì
(
p
);

886 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_dec_varbindlist() failed\n"));

893 
	`pbuf_‰ì
(
p
);

894 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_header_check() failed\n"));

900 
	`pbuf_‰ì
(
p
);

906 
	`pbuf_‰ì
(
p
);

908 
	}
}

922 
îr_t


923 
	$¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

925 
îr_t
 
dîr
;

926 
u16_t
 
Àn
, 
ofs_ba£
;

927 
u8_t
 
Àn_o˘ës
;

928 
u8_t
 
ty≥
;

929 
s32_t
 
vîsi⁄
;

931 
ofs_ba£
 = 
ofs
;

932 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

933 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

934 i‡((
dîr
 !
ERR_OK
) ||

935 (
pdu_Àn
 !(1 + 
Àn_o˘ës
 + 
Àn
)) ||

936 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

938 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

939  
ERR_ARG
;

941 
ofs
 +(1 + 
Àn_o˘ës
);

942 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

943 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

944 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

947 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

948  
ERR_ARG
;

950 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
vîsi⁄
);

951 i‡(
dîr
 !
ERR_OK
)

954 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

955  
ERR_ARG
;

957 i‡(
vîsi⁄
 != 0)

960 
	`¢mp_öc_¢mpöbadvîsi⁄s
();

961  
ERR_ARG
;

963 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

964 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

965 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

966 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
)))

969 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

970  
ERR_ARG
;

972 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
SNMP_COMMUNITY_STR_LEN
, 
m_°©
->
communôy
);

973 i‡(
dîr
 !
ERR_OK
)

975 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

976  
ERR_ARG
;

979 
Àn
 = (÷í < (
SNMP_COMMUNITY_STR_LEN
))?(len):(SNMP_COMMUNITY_STR_LEN));

980 
m_°©
->
communôy
[
Àn
] = 0;

981 
m_°©
->
com_°æí
 = 
Àn
;

982 i‡(
	`°∫cmp
(
¢mp_publiccommunôy
, (c⁄° *)
m_°©
->
communôy
, 
SNMP_COMMUNITY_STR_LEN
) != 0)

985 
	`¢mp_öc_¢mpöbadcommunôy«mes
();

986 
	`¢mp_authÁû_å≠
();

987  
ERR_ARG
;

989 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

990 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

991 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

992 i‡(
dîr
 !
ERR_OK
)

994 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

995  
ERR_ARG
;

997 
ty≥
)

999 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_REQ
):

1001 
	`¢mp_öc_¢mpögëªque°s
();

1002 
dîr
 = 
ERR_OK
;

1004 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_NEXT_REQ
):

1006 
	`¢mp_öc_¢mpögë√xts
();

1007 
dîr
 = 
ERR_OK
;

1009 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
):

1011 
	`¢mp_öc_¢mpögëª•⁄£s
();

1012 
dîr
 = 
ERR_ARG
;

1014 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_SET_REQ
):

1016 
	`¢mp_öc_¢mpö£åeque°s
();

1017 
dîr
 = 
ERR_OK
;

1019 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
):

1021 
	`¢mp_öc_¢mpöå≠s
();

1022 
dîr
 = 
ERR_ARG
;

1025 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1026 
dîr
 = 
ERR_ARG
;

1029 i‡(
dîr
 !
ERR_OK
)

1032  
ERR_ARG
;

1034 
m_°©
->
π
 = 
ty≥
 & 0x1F;

1035 
ofs
 +(1 + 
Àn_o˘ës
);

1036 i‡(
Àn
 !(
pdu_Àn
 - (
ofs
 - 
ofs_ba£
)))

1039 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1040  
ERR_ARG
;

1042 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1043 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1044 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1047 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1048  
ERR_ARG
;

1050 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
rid
);

1051 i‡(
dîr
 !
ERR_OK
)

1054 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1055  
ERR_ARG
;

1057 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1058 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1059 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1060 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1063 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1064  
ERR_ARG
;

1068 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_°©us
);

1069 i‡(
dîr
 !
ERR_OK
)

1072 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1073  
ERR_ARG
;

1075 
m_°©
->
îr‹_°©us
)

1077 
SNMP_ES_TOOBIG
:

1078 
	`¢mp_öc_¢mpötoobigs
();

1080 
SNMP_ES_NOSUCHNAME
:

1081 
	`¢mp_öc_¢mpönosuch«mes
();

1083 
SNMP_ES_BADVALUE
:

1084 
	`¢mp_öc_¢mpöbadvÆues
();

1086 
SNMP_ES_READONLY
:

1087 
	`¢mp_öc_¢mpöªad⁄lys
();

1089 
SNMP_ES_GENERROR
:

1090 
	`¢mp_öc_¢mpögíîrs
();

1093 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1094 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1095 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1096 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1099 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1100  
ERR_ARG
;

1104 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_ödex
);

1105 i‡(
dîr
 !
ERR_OK
)

1108 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1109  
ERR_ARG
;

1111 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1112 *
ofs_ªt
 = 
ofs
;

1113  
ERR_OK
;

1114 
	}
}

1116 
îr_t


1117 
	$¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

1119 
îr_t
 
dîr
;

1120 
u16_t
 
Àn
, 
vb_Àn
;

1121 
u8_t
 
Àn_o˘ës
;

1122 
u8_t
 
ty≥
;

1125 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1126 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
vb_Àn
);

1127 i‡((
dîr
 !
ERR_OK
) ||

1128 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

1130 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1131  
ERR_ARG
;

1133 
ofs
 +(1 + 
Àn_o˘ës
);

1136 
m_°©
->
övb
.
cou¡
 = 0;

1137 
m_°©
->
övb
.
hód
 = 
NULL
;

1138 
m_°©
->
övb
.
èû
 = 
NULL
;

1140 
vb_Àn
 > 0)

1142 
¢mp_obj_id
 
oid
, 
oid_vÆue
;

1143 
¢mp_v¨böd
 *
vb
;

1145 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1146 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1147 i‡((
dîr
 !
ERR_OK
) ||

1148 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)) ||

1149 (
Àn
 =0Ë|| (À¿> 
vb_Àn
))

1151 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1153 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1154  
ERR_ARG
;

1156 
ofs
 +(1 + 
Àn_o˘ës
);

1157 
vb_Àn
 -(1 + 
Àn_o˘ës
);

1159 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1160 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1161 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
)))

1164 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1166 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1167  
ERR_ARG
;

1169 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid
);

1170 i‡(
dîr
 !
ERR_OK
)

1173 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1175 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1176  
ERR_ARG
;

1178 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1179 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1181 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1182 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1183 i‡(
dîr
 !
ERR_OK
)

1186 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1188 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1189  
ERR_ARG
;

1192 
ty≥
)

1194 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

1195 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
s32_t
));

1196 i‡(
vb
 !
NULL
)

1198 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1200 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1201 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1205 
dîr
 = 
ERR_ARG
;

1208 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

1209 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

1210 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

1211 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
u32_t
));

1212 i‡(
vb
 !
NULL
)

1214 
u32_t
 *
v±r
 = 
vb
->
vÆue
;

1216 
dîr
 = 
	`¢mp_a¢1_dec_u32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1217 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1221 
dîr
 = 
ERR_ARG
;

1224 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

1225 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

1226 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
Àn
);

1227 i‡(
vb
 !
NULL
)

1229 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1230 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1234 
dîr
 = 
ERR_ARG
;

1237 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

1238 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 0);

1239 i‡(
vb
 !
NULL
)

1241 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1242 
dîr
 = 
ERR_OK
;

1246 
dîr
 = 
ERR_ARG
;

1249 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

1250 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid_vÆue
);

1251 i‡(
dîr
 =
ERR_OK
)

1253 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
oid_vÆue
.
Àn
 * (
s32_t
));

1254 i‡(
vb
 !
NULL
)

1256 
u8_t
 
i
 = 
oid_vÆue
.
Àn
;

1257 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1259 
i
 > 0)

1261 
i
--;

1262 
v±r
[
i
] = 
oid_vÆue
.
id
[i];

1264 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1265 
dîr
 = 
ERR_OK
;

1269 
dîr
 = 
ERR_ARG
;

1273 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

1274 i‡(
Àn
 == 4)

1277 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 4);

1278 i‡(
vb
 !
NULL
)

1280 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1281 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1285 
dîr
 = 
ERR_ARG
;

1290 
dîr
 = 
ERR_ARG
;

1294 
dîr
 = 
ERR_ARG
;

1297 i‡(
dîr
 !
ERR_OK
)

1299 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1301 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1302  
ERR_ARG
;

1304 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1305 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1308 i‡(
m_°©
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

1310 
	`¢mp_add_¢mpötŸÆ£tv¨s
(
m_°©
->
övb
.
cou¡
);

1314 
	`¢mp_add_¢mpötŸÆªqv¨s
(
m_°©
->
övb
.
cou¡
);

1317 *
ofs_ªt
 = 
ofs
;

1318  
ERR_OK
;

1319 
	}
}

1321 
¢mp_v¨böd
*

1322 
	$¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
)

1324 
¢mp_v¨böd
 *
vb
;

1326 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

1327 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

1328 i‡(
vb
 !
NULL
)

1330 
u8_t
 
i
;

1332 
vb
->
√xt
 = 
NULL
;

1333 
vb
->
¥ev
 = 
NULL
;

1334 
i
 = 
oid
->
Àn
;

1335 
vb
->
idít_Àn
 = 
i
;

1336 i‡(
i
 > 0)

1339 
vb
->
idít
 = (
s32_t
*)
	`mem_mÆloc
((s32_tË* 
i
);

1340 
	`LWIP_ASSERT
("vb->idíà!NULL",
vb
->
idít
 !
NULL
);

1341 i‡(
vb
->
idít
 =
NULL
)

1343 
	`mem_‰ì
(
vb
);

1344  
NULL
;

1346 
i
 > 0)

1348 
i
--;

1349 
vb
->
idít
[
i
] = 
oid
->
id
[i];

1355 
vb
->
idít
 = 
NULL
;

1357 
vb
->
vÆue_ty≥
 = 
ty≥
;

1358 
vb
->
vÆue_Àn
 = 
Àn
;

1359 i‡(
Àn
 > 0)

1362 
vb
->
vÆue
 = 
	`mem_mÆloc
(
Àn
);

1363 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

1364 i‡(
vb
->
vÆue
 =
NULL
)

1366 i‡(
vb
->
idít
 !
NULL
)

1368 
	`mem_‰ì
(
vb
->
idít
);

1370 
	`mem_‰ì
(
vb
);

1371  
NULL
;

1377 
vb
->
vÆue
 = 
NULL
;

1380  
vb
;

1381 
	}
}

1384 
	$¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
)

1386 i‡(
vb
->
vÆue
 !
NULL
 )

1388 
	`mem_‰ì
(
vb
->
vÆue
);

1390 i‡(
vb
->
idít
 !
NULL
 )

1392 
	`mem_‰ì
(
vb
->
idít
);

1394 
	`mem_‰ì
(
vb
);

1395 
	}
}

1398 
	$¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1400 
¢mp_v¨böd
 *
vb
, *
¥ev
;

1402 
vb
 = 
roŸ
->
èû
;

1403  
vb
 !
NULL
 )

1405 
¥ev
 = 
vb
->prev;

1406 
	`¢mp_v¨böd_‰ì
(
vb
);

1407 
vb
 = 
¥ev
;

1409 
roŸ
->
cou¡
 = 0;

1410 
roŸ
->
hód
 = 
NULL
;

1411 
roŸ
->
èû
 = 
NULL
;

1412 
	}
}

1415 
	$¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
)

1417 i‡(
roŸ
->
cou¡
 == 0)

1420 
roŸ
->
hód
 = 
vb
;

1421 
roŸ
->
èû
 = 
vb
;

1426 
roŸ
->
èû
->
√xt
 = 
vb
;

1427 
vb
->
¥ev
 = 
roŸ
->
èû
;

1428 
roŸ
->
èû
 = 
vb
;

1430 
roŸ
->
cou¡
 += 1;

1431 
	}
}

1433 
¢mp_v¨böd
*

1434 
	$¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1436 
¢mp_v¨böd
* 
vb
;

1438 i‡(
roŸ
->
cou¡
 > 0)

1441 
vb
 = 
roŸ
->
èû
;

1442 
roŸ
->
èû
 = 
vb
->
¥ev
;

1443 
vb
->
¥ev
->
√xt
 = 
NULL
;

1444 
roŸ
->
cou¡
 -= 1;

1449 
vb
 = 
NULL
;

1451  
vb
;

1452 
	}
}

	@net/lwip/core/snmp/msg_out.c

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_SNMP


50 
	~"lwù/udp.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/¢mp.h
"

53 
	~"lwù/¢mp_a¢1.h
"

54 
	~"lwù/¢mp_msg.h
"

56 
	s¢mp_å≠_d°


59 
ù_addr
 
	mdù
;

61 
u8_t
 
	míabÀ
;

63 
¢mp_å≠_d°
 
	gå≠_d°
[
SNMP_TRAP_DESTINATIONS
];

66 
¢mp_msg_å≠
 
	gå≠_msg
;

68 
u16_t
 
¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, u16_à
vb_Àn
);

69 
u16_t
 
¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, u16_à
vb_Àn
);

70 
u16_t
 
¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
);

72 
u16_t
 
¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
);

73 
u16_t
 
¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
);

74 
u16_t
 
¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, u16_à
ofs
);

82 
	$¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
)

84 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

86 
å≠_d°
[
d°_idx
].
íabÀ
 =Énable;

88 
	}
}

96 
	$¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
)

98 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

100 
å≠_d°
[
d°_idx
].
dù
.
addr
 = 
	`ht⁄l
(
d°
->addr);

102 
	}
}

113 
îr_t


114 
	$¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
)

116 
¢mp_v¨böd_roŸ
 
em±yvb
 = {
NULL
, NULL, 0, 0, 0};

117 
pbuf
 *
p
;

118 
u16_t
 
tŸ_Àn
;

119 
îr_t
 
îr
;

122 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
m_°©
->
outvb
);

123 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

126 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

127 i‡(
p
 =
NULL
)

129 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()ÅooBig\n"));

132 
m_°©
->
îr‹_°©us
 = 
SNMP_ES_TOOBIG
;

133 
m_°©
->
îr‹_ödex
 = 0;

135 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
em±yvb
);

136 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

138 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

140 i‡(
p
 !
NULL
)

143 
u16_t
 
ofs
;

145 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()Ö != NULL\n"));

148 
ofs
 = 
	`¢mp_ª•_hódî_íc
(
m_°©
, 
p
);

149 i‡(
m_°©
->
îr‹_°©us
 =
SNMP_ES_TOOBIG
)

151 
	`¢mp_v¨böd_li°_íc
(&
em±yvb
, 
p
, 
ofs
);

155 
	`¢mp_v¨böd_li°_íc
(&
m_°©
->
outvb
, 
p
, 
ofs
);

158 
m_°©
->
îr‹_°©us
)

160 
SNMP_ES_TOOBIG
:

161 
	`¢mp_öc_¢mpouâoobigs
();

163 
SNMP_ES_NOSUCHNAME
:

164 
	`¢mp_öc_¢mpouäosuch«mes
();

166 
SNMP_ES_BADVALUE
:

167 
	`¢mp_öc_¢mpoutbadvÆues
();

169 
SNMP_ES_GENERROR
:

170 
	`¢mp_öc_¢mpoutgíîrs
();

173 
	`¢mp_öc_¢mpoutgëª•⁄£s
();

174 
	`¢mp_öc_¢mpouçkts
();

178 
	`udp_c⁄√˘
(
m_°©
->
pcb
, &m_°©->
sù
, m_°©->
•
);

179 
îr
 = 
	`udp_£nd
(
m_°©
->
pcb
, 
p
);

180 i‡(
îr
 =
ERR_MEM
)

183 
îr
 = 
ERR_MEM
;

187 
îr
 = 
ERR_OK
;

190 
	`udp_disc⁄√˘
(
m_°©
->
pcb
);

192 
	`pbuf_‰ì
(
p
);

193 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response() done\n"));

194  
îr
;

200  
ERR_MEM
;

202 
	}
}

220 
îr_t


221 
	$¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
)

223 
¢mp_å≠_d°
 *
td
;

224 
√tif
 *
d°_if
;

225 
ù_addr
 
d°_ù
;

226 
pbuf
 *
p
;

227 
u16_t
 
i
,
tŸ_Àn
;

229 
i
=0, 
td
 = &
å≠_d°
[0]; i<
SNMP_TRAP_DESTINATIONS
; i++,Åd++)

231 i‡((
td
->
íabÀ
 !0Ë&& (td->
dù
.
addr
 != 0))

234 
å≠_msg
.
dù
.
addr
 = 
td
->dip.addr;

236 
d°_if
 = 
	`ù_rouã
(&
td
->
dù
);

237 
d°_ù
.
addr
 = 
	`¡ohl
(
d°_if
->
ù_addr
.addr);

238 
å≠_msg
.
sù_øw
[0] = 
d°_ù
.
addr
 >> 24;

239 
å≠_msg
.
sù_øw
[1] = 
d°_ù
.
addr
 >> 16;

240 
å≠_msg
.
sù_øw
[2] = 
d°_ù
.
addr
 >> 8;

241 
å≠_msg
.
sù_øw
[3] = 
d°_ù
.
addr
;

242 
å≠_msg
.
gí_å≠
 = 
gíîic_å≠
;

243 
å≠_msg
.
•c_å≠
 = 
•ecific_å≠
;

244 i‡(
gíîic_å≠
 =
SNMP_GENTRAP_ENTERPRISESPC
)

247 
å≠_msg
.
íãΩri£
 = 
eoid
;

252 
	`¢mp_gë_¢mpgΩid_±r
(&
å≠_msg
.
íãΩri£
);

254 
	`¢mp_gë_sysu±ime
(&
å≠_msg
.
ts
);

257 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
å≠_msg
.
outvb
);

258 
tŸ_Àn
 = 
	`¢mp_å≠_hódî_sum
(&
å≠_msg
,Åot_len);

261 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

262 i‡(
p
 !
NULL
)

264 
u16_t
 
ofs
;

267 
ofs
 = 
	`¢mp_å≠_hódî_íc
(&
å≠_msg
, 
p
);

268 
	`¢mp_v¨böd_li°_íc
(&
å≠_msg
.
outvb
, 
p
, 
ofs
);

270 
	`¢mp_öc_¢mpouâøps
();

271 
	`¢mp_öc_¢mpouçkts
();

274 
	`udp_c⁄√˘
(
å≠_msg
.
pcb
, &å≠_msg.
dù
, 
SNMP_TRAP_PORT
);

275 
	`udp_£nd
(
å≠_msg
.
pcb
, 
p
);

277 
	`udp_disc⁄√˘
(
å≠_msg
.
pcb
);

279 
	`pbuf_‰ì
(
p
);

283  
ERR_MEM
;

287  
ERR_OK
;

288 
	}
}

291 
	$¢mp_cﬁd°¨t_å≠
()

293 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

294 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

295 
å≠_msg
.
outvb
.
cou¡
 = 0;

296 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_COLDSTART
, 
NULL
, 0);

297 
	}
}

300 
	$¢mp_authÁû_å≠
()

302 
u8_t
 
íabÀ
;

303 
	`¢mp_gë_¢m≥«bÀauthíå≠s
(&
íabÀ
);

304 i‡(
íabÀ
 == 1)

306 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

307 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

308 
å≠_msg
.
outvb
.
cou¡
 = 0;

309 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_AUTHFAIL
, 
NULL
, 0);

311 
	}
}

321 
u16_t


322 
	$¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, 
u16_t
 
vb_Àn
)

324 
u16_t
 
tŸ_Àn
;

325 
¢mp_ª•_hódî_Àngths
 *
rhl
;

327 
rhl
 = &
m_°©
->rhl;

328 
tŸ_Àn
 = 
vb_Àn
;

329 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_ödex
, &
rhl
->
îridxÀn
);

330 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îridxÀn
, &rhl->
îridxÀ∆í
);

331 
tŸ_Àn
 +1 + 
rhl
->
îridxÀ∆í
 +Ñhl->
îridxÀn
;

333 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_°©us
, &
rhl
->
îr°©Àn
);

334 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îr°©Àn
, &rhl->
îr°©À∆í
);

335 
tŸ_Àn
 +1 + 
rhl
->
îr°©À∆í
 +Ñhl->
îr°©Àn
;

337 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
rid
, &
rhl
->
ridÀn
);

338 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
ridÀn
, &rhl->
ridÀ∆í
);

339 
tŸ_Àn
 +1 + 
rhl
->
ridÀ∆í
 +Ñhl->
ridÀn
;

341 
rhl
->
pduÀn
 = 
tŸ_Àn
;

342 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
pduÀn
, &rhl->
pduÀ∆í
);

343 
tŸ_Àn
 +1 + 
rhl
->
pduÀ∆í
;

345 
rhl
->
comÀn
 = 
m_°©
->
com_°æí
;

346 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
comÀn
, &rhl->
comÀ∆í
);

347 
tŸ_Àn
 +1 + 
rhl
->
comÀ∆í
 +Ñhl->
comÀn
;

349 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
rhl
->
vîÀn
);

350 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
vîÀn
, &rhl->
vîÀ∆í
);

351 
tŸ_Àn
 +1 + 
rhl
->
vîÀn
 +Ñhl->
vîÀ∆í
;

353 
rhl
->
£qÀn
 = 
tŸ_Àn
;

354 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
£qÀn
, &rhl->
£qÀ∆í
);

355 
tŸ_Àn
 +1 + 
rhl
->
£qÀ∆í
;

357  
tŸ_Àn
;

358 
	}
}

368 
u16_t


369 
	$¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, 
u16_t
 
vb_Àn
)

371 
u16_t
 
tŸ_Àn
;

372 
¢mp_å≠_hódî_Àngths
 *
thl
;

374 
thl
 = &
m_å≠
->thl;

375 
tŸ_Àn
 = 
vb_Àn
;

377 
	`¢mp_a¢1_íc_u32t_˙t
(
m_å≠
->
ts
, &
thl
->
t¶í
);

378 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
t¶í
, &thl->
t¶íÀn
);

379 
tŸ_Àn
 +1 + 
thl
->
t¶í
 +Åhl->
t¶íÀn
;

381 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
•c_å≠
, &
thl
->
°ΩÀn
);

382 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
°ΩÀn
, &thl->
°ΩÀ∆í
);

383 
tŸ_Àn
 +1 + 
thl
->
°ΩÀn
 +Åhl->
°ΩÀ∆í
;

385 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
gí_å≠
, &
thl
->
gå∂í
);

386 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
gå∂í
, &thl->
gå∂íÀn
);

387 
tŸ_Àn
 +1 + 
thl
->
gå∂í
 +Åhl->
gå∂íÀn
;

389 
thl
->
Øddæí
 = 4;

390 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
Øddæí
, &thl->
ØddæíÀn
);

391 
tŸ_Àn
 +1 + 
thl
->
Øddæí
 +Åhl->
ØddæíÀn
;

393 
	`¢mp_a¢1_íc_oid_˙t
(
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0], &
thl
->
eidÀn
);

394 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
eidÀn
, &thl->
eidÀ∆í
);

395 
tŸ_Àn
 +1 + 
thl
->
eidÀn
 +Åhl->
eidÀ∆í
;

397 
thl
->
pduÀn
 = 
tŸ_Àn
;

398 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
pduÀn
, &thl->
pduÀ∆í
);

399 
tŸ_Àn
 +1 + 
thl
->
pduÀ∆í
;

401 
thl
->
comÀn
 = (
¢mp_publiccommunôy
) - 1;

402 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
comÀn
, &thl->
comÀ∆í
);

403 
tŸ_Àn
 +1 + 
thl
->
comÀ∆í
 +Åhl->
comÀn
;

405 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
thl
->
vîÀn
);

406 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
vîÀn
, &thl->
vîÀ∆í
);

407 
tŸ_Àn
 +1 + 
thl
->
vîÀn
 +Åhl->
vîÀ∆í
;

409 
thl
->
£qÀn
 = 
tŸ_Àn
;

410 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
£qÀn
, &thl->
£qÀ∆í
);

411 
tŸ_Àn
 +1 + 
thl
->
£qÀ∆í
;

413  
tŸ_Àn
;

414 
	}
}

423 
u16_t


424 
	$¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
)

426 
¢mp_v¨böd
 *
vb
;

427 
u32_t
 *
uöt_±r
;

428 
s32_t
 *
söt_±r
;

429 
u16_t
 
tŸ_Àn
;

431 
tŸ_Àn
 = 0;

432 
vb
 = 
roŸ
->
èû
;

433  
vb
 !
NULL
 )

436 
vb
->
vÆue_ty≥
)

438 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

439 
söt_±r
 = 
vb
->
vÆue
;

440 
	`¢mp_a¢1_íc_s32t_˙t
(*
söt_±r
, &
vb
->
vÀn
);

442 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

443 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

444 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

445 
uöt_±r
 = 
vb
->
vÆue
;

446 
	`¢mp_a¢1_íc_u32t_˙t
(*
uöt_±r
, &
vb
->
vÀn
);

448 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

449 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

450 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

451 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

452 
vb
->
vÀn
 = vb->
vÆue_Àn
;

454 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

455 
söt_±r
 = 
vb
->
vÆue
;

456 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
, &vb->
vÀn
);

460 
vb
->
vÀn
 = 0;

464 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
vÀn
, &vb->
vÀ∆í
);

465 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
idít_Àn
, vb->
idít
, &vb->
ﬁí
);

466 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
ﬁí
, &vb->
ﬁíÀn
);

468 
vb
->
£qÀn
 = 1 + vb->
vÀ∆í
 + vb->
vÀn
;

469 
vb
->
£qÀn
 +1 + vb->
ﬁíÀn
 + vb->
ﬁí
;

470 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
£qÀn
, &vb->
£qÀ∆í
);

473 
tŸ_Àn
 +1 + 
vb
->
£qÀ∆í
 + vb->
£qÀn
;

475 
vb
 = vb->
¥ev
;

479 
roŸ
->
£qÀn
 = 
tŸ_Àn
;

480 
	`¢mp_a¢1_íc_Àngth_˙t
(
roŸ
->
£qÀn
, &roŸ->
£qÀ∆í
);

481 
tŸ_Àn
 +1 + 
roŸ
->
£qÀ∆í
;

483  
tŸ_Àn
;

484 
	}
}

489 
u16_t


490 
	$¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
)

492 
u16_t
 
ofs
;

494 
ofs
 = 0;

495 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

496 
ofs
 += 1;

497 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
£qÀn
);

498 
ofs
 +
m_°©
->
rhl
.
£qÀ∆í
;

500 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

501 
ofs
 += 1;

502 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
);

503 
ofs
 +
m_°©
->
rhl
.
vîÀ∆í
;

504 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
, 
¢mp_vîsi⁄
);

505 
ofs
 +
m_°©
->
rhl
.
vîÀn
;

507 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

508 
ofs
 += 1;

509 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
);

510 
ofs
 +
m_°©
->
rhl
.
comÀ∆í
;

511 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
, m_°©->
communôy
);

512 
ofs
 +
m_°©
->
rhl
.
comÀn
;

514 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
));

515 
ofs
 += 1;

516 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
pduÀn
);

517 
ofs
 +
m_°©
->
rhl
.
pduÀ∆í
;

519 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

520 
ofs
 += 1;

521 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
);

522 
ofs
 +
m_°©
->
rhl
.
ridÀ∆í
;

523 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
, m_°©->
rid
);

524 
ofs
 +
m_°©
->
rhl
.
ridÀn
;

526 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

527 
ofs
 += 1;

528 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
);

529 
ofs
 +
m_°©
->
rhl
.
îr°©À∆í
;

530 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
, m_°©->
îr‹_°©us
);

531 
ofs
 +
m_°©
->
rhl
.
îr°©Àn
;

533 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

534 
ofs
 += 1;

535 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
);

536 
ofs
 +
m_°©
->
rhl
.
îridxÀ∆í
;

537 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
, m_°©->
îr‹_ödex
);

538 
ofs
 +
m_°©
->
rhl
.
îridxÀn
;

540  
ofs
;

541 
	}
}

546 
u16_t


547 
	$¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
)

549 
u16_t
 
ofs
;

551 
ofs
 = 0;

552 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

553 
ofs
 += 1;

554 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
£qÀn
);

555 
ofs
 +
m_å≠
->
thl
.
£qÀ∆í
;

557 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

558 
ofs
 += 1;

559 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
);

560 
ofs
 +
m_å≠
->
thl
.
vîÀ∆í
;

561 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
, 
¢mp_vîsi⁄
);

562 
ofs
 +
m_å≠
->
thl
.
vîÀn
;

564 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

565 
ofs
 += 1;

566 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
);

567 
ofs
 +
m_å≠
->
thl
.
comÀ∆í
;

568 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
, (
u8_t
 *)&
¢mp_publiccommunôy
[0]);

569 
ofs
 +
m_å≠
->
thl
.
comÀn
;

571 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
));

572 
ofs
 += 1;

573 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
pduÀn
);

574 
ofs
 +
m_å≠
->
thl
.
pduÀ∆í
;

576 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

577 
ofs
 += 1;

578 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
eidÀn
);

579 
ofs
 +
m_å≠
->
thl
.
eidÀ∆í
;

580 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0]);

581 
ofs
 +
m_å≠
->
thl
.
eidÀn
;

583 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
));

584 
ofs
 += 1;

585 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
);

586 
ofs
 +
m_å≠
->
thl
.
ØddæíÀn
;

587 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
, &m_å≠->
sù_øw
[0]);

588 
ofs
 +
m_å≠
->
thl
.
Øddæí
;

590 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

591 
ofs
 += 1;

592 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
);

593 
ofs
 +
m_å≠
->
thl
.
gå∂íÀn
;

594 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
, m_å≠->
gí_å≠
);

595 
ofs
 +
m_å≠
->
thl
.
gå∂í
;

597 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

598 
ofs
 += 1;

599 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
);

600 
ofs
 +
m_å≠
->
thl
.
°ΩÀ∆í
;

601 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
, m_å≠->
•c_å≠
);

602 
ofs
 +
m_å≠
->
thl
.
°ΩÀn
;

604 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
));

605 
ofs
 += 1;

606 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
);

607 
ofs
 +
m_å≠
->
thl
.
t¶íÀn
;

608 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
, m_å≠->
ts
);

609 
ofs
 +
m_å≠
->
thl
.
t¶í
;

611  
ofs
;

612 
	}
}

617 
u16_t


618 
	$¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, 
u16_t
 
ofs
)

620 
¢mp_v¨böd
 *
vb
;

621 
s32_t
 *
söt_±r
;

622 
u32_t
 *
uöt_±r
;

623 
u8_t
 *
øw_±r
;

625 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

626 
ofs
 += 1;

627 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
roŸ
->
£qÀn
);

628 
ofs
 +
roŸ
->
£qÀ∆í
;

630 
vb
 = 
roŸ
->
hód
;

631  
vb
 !
NULL
 )

633 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

634 
ofs
 += 1;

635 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
£qÀn
);

636 
ofs
 +
vb
->
£qÀ∆í
;

638 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

639 
ofs
 += 1;

640 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
ﬁí
);

641 
ofs
 +
vb
->
ﬁíÀn
;

642 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
idít_Àn
, &vb->
idít
[0]);

643 
ofs
 +
vb
->
ﬁí
;

645 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, 
vb
->
vÆue_ty≥
);

646 
ofs
 += 1;

647 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
vÀn
);

648 
ofs
 +
vb
->
vÀ∆í
;

650 
vb
->
vÆue_ty≥
)

652 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

653 
söt_±r
 = 
vb
->
vÆue
;

654 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
söt_±r
);

656 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

657 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

658 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

659 
uöt_±r
 = 
vb
->
vÆue
;

660 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
uöt_±r
);

662 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

663 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

664 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

665 
øw_±r
 = 
vb
->
vÆue
;

666 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
vb
->
vÀn
, 
øw_±r
);

668 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

670 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

671 
söt_±r
 = 
vb
->
vÆue
;

672 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
);

678 
ofs
 +
vb
->
vÀn
;

679 
vb
 = vb->
√xt
;

681  
ofs
;

682 
	}
}

	@net/lwip/core/stats.c

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_STATS


44 
	~"lwù/def.h
"

45 
	~"lwù/°©s.h
"

46 
	~"lwù/mem.h
"

48 
	~<°rög.h
>

50 
°©s_
 
	glwù_°©s
;

52 #i‡
LWIP_STATS_DISPLAY


54 
	$°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
)

56 
	`LWIP_PLATFORM_DIAG
(("\n%s\n\t", 
«me
));

57 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
xmô
));

58 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ªcv
));

59 
	`LWIP_PLATFORM_DIAG
(("fw: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
fw
));

60 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
dr›
));

61 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
chkîr
));

62 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
À√º
));

63 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
memîr
));

64 
	`LWIP_PLATFORM_DIAG
(("πîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
πîr
));

65 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
¥Ÿîr
));

66 
	`LWIP_PLATFORM_DIAG
(("›ãº: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
›ãº
));

67 
	`LWIP_PLATFORM_DIAG
(("îr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
îr
));

68 
	`LWIP_PLATFORM_DIAG
(("ˇchehô: %"
STAT_COUNTER_F
"\n", 
¥Ÿo
->
ˇchehô
));

69 
	}
}

71 #i‡
IGMP_STATS


73 
	$°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
)

75 
	`LWIP_PLATFORM_DIAG
(("\nIGMP\n\t"));

76 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
À√º
));

77 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
chkîr
));

78 
	`LWIP_PLATFORM_DIAG
(("v1_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
v1_rxed
));

79 
	`LWIP_PLATFORM_DIAG
(("joö_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
joö_£¡
));

80 
	`LWIP_PLATFORM_DIAG
(("Àave_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
Àave_£¡
));

81 
	`LWIP_PLATFORM_DIAG
(("uniˇ°_quîy: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
uniˇ°_quîy
));

82 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_£¡
));

83 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_rxed
));

84 
	`LWIP_PLATFORM_DIAG
(("group_quîy_rxed: %"
STAT_COUNTER_F
"\n", 
igmp
->
group_quîy_rxed
));

85 
	}
}

88 #i‡
MEM_STATS
 || 
MEMP_STATS


90 
	$°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
)

92 
	`LWIP_PLATFORM_DIAG
(("\nMEM %s\n\t", 
«me
));

93 
	`LWIP_PLATFORM_DIAG
(("avaû: %"
U32_F
"\n\t", (
u32_t
)
mem
->
avaû
));

94 
	`LWIP_PLATFORM_DIAG
(("u£d: %"
U32_F
"\n\t", (
u32_t
)
mem
->
u£d
));

95 
	`LWIP_PLATFORM_DIAG
(("max: %"
U32_F
"\n\t", (
u32_t
)
mem
->
max
));

96 
	`LWIP_PLATFORM_DIAG
(("îr: %"
U32_F
"\n", (
u32_t
)
mem
->
îr
));

97 
	}
}

99 #i‡
MEMP_STATS


101 
	$°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
)

103 * 
memp_«mes
[] = {

104 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

105 
	~"lwù/memp_°d.h
"

107 if(
ödex
 < 
MEMP_MAX
) {

108 
	`°©s_di•œy_mem
(
mem
, 
memp_«mes
[
ödex
]);

110 
	}
}

114 #i‡
SYS_STATS


116 
	$°©s_di•œy_sys
(
°©s_sys
 *
sys
)

118 
	`LWIP_PLATFORM_DIAG
(("\nSYS\n\t"));

119 
	`LWIP_PLATFORM_DIAG
(("£m.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
u£d
));

120 
	`LWIP_PLATFORM_DIAG
(("£m.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
max
));

121 
	`LWIP_PLATFORM_DIAG
(("£m.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
îr
));

122 
	`LWIP_PLATFORM_DIAG
(("mbox.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
u£d
));

123 
	`LWIP_PLATFORM_DIAG
(("mbox.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
max
));

124 
	`LWIP_PLATFORM_DIAG
(("mbox.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
îr
));

125 
	}
}

129 
	$°©s_di•œy
()

131 
s16_t
 
i
;

133 
	`LINK_STATS_DISPLAY
();

134 
	`ETHARP_STATS_DISPLAY
();

135 
	`IPFRAG_STATS_DISPLAY
();

136 
	`IP_STATS_DISPLAY
();

137 
	`IGMP_STATS_DISPLAY
();

138 
	`ICMP_STATS_DISPLAY
();

139 
	`UDP_STATS_DISPLAY
();

140 
	`TCP_STATS_DISPLAY
();

141 
	`MEM_STATS_DISPLAY
();

142 
i
 = 0; i < 
MEMP_MAX
; i++) {

143 
	`MEMP_STATS_DISPLAY
(
i
);

145 
	`SYS_STATS_DISPLAY
();

146 
	}
}

	@net/lwip/core/sys.c

40 
	~"lwù/›t.h
"

42 #i‡(
NO_SYS
 == 0)

44 
	~"lwù/sys.h
"

45 
	~"lwù/def.h
"

46 
	~"lwù/memp.h
"

47 
	~"lwù/t˝ù.h
"

53 
	ssswt_cb


55 
s16_t
 
	mtimeÊag
;

56 
sys_£m_t
 *
	mp£m
;

67 
	$sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
)

69 
u32_t
 
time_√eded
;

70 
sys_timeouts
 *
timeouts
;

71 
sys_timeo
 *
tm±imeout
;

72 
sys_timeout_h™dÀr
 
h
;

73 *
¨g
;

75 
agaö
:

76 
timeouts
 = 
	`sys_¨ch_timeouts
();

78 i‡(!
timeouts
 || !timeouts->
√xt
) {

79 
	`UNLOCK_TCPIP_CORE
();

80 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 0);

81 
	`LOCK_TCPIP_CORE
();

83 i‡(
timeouts
->
√xt
->
time
 > 0) {

84 
	`UNLOCK_TCPIP_CORE
();

85 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
timeouts
->
√xt
->
time
);

86 
	`LOCK_TCPIP_CORE
();

88 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

91 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

95 
tm±imeout
 = 
timeouts
->
√xt
;

96 
timeouts
->
√xt
 = 
tm±imeout
->next;

97 
h
 = 
tm±imeout
->h;

98 
¨g
 = 
tm±imeout
->arg;

99 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

100 i‡(
h
 !
NULL
) {

101 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sm‡ˇŒög h=%p(%p)\n", (*)&
h
, 
¨g
));

102 
	`h
(
¨g
);

106 
agaö
;

111 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

112 
timeouts
->
√xt
->
time
 -
time_√eded
;

114 
timeouts
->
√xt
->
time
 = 0;

118 
	}
}

127 
	$sys_£m_waô
(
sys_£m_t
 
£m
)

129 
u32_t
 
time_√eded
;

130 
sys_timeouts
 *
timeouts
;

131 
sys_timeo
 *
tm±imeout
;

132 
sys_timeout_h™dÀr
 
h
;

133 *
¨g
;

135 
agaö
:

137 
timeouts
 = 
	`sys_¨ch_timeouts
();

139 i‡(!
timeouts
 || !timeouts->
√xt
) {

140 
	`sys_¨ch_£m_waô
(
£m
, 0);

142 i‡(
timeouts
->
√xt
->
time
 > 0) {

143 
time_√eded
 = 
	`sys_¨ch_£m_waô
(
£m
, 
timeouts
->
√xt
->
time
);

145 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

148 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

152 
tm±imeout
 = 
timeouts
->
√xt
;

153 
timeouts
->
√xt
 = 
tm±imeout
->next;

154 
h
 = 
tm±imeout
->h;

155 
¨g
 = 
tm±imeout
->arg;

156 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

157 i‡(
h
 !
NULL
) {

158 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("ssw h=%p(%p)\n", (*)&
h
, (*)
¨g
));

159 
	`h
(
¨g
);

163 
agaö
;

168 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

169 
timeouts
->
√xt
->
time
 -
time_√eded
;

171 
timeouts
->
√xt
->
time
 = 0;

175 
	}
}

189 
	$sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

191 
sys_timeouts
 *
timeouts
;

192 
sys_timeo
 *
timeout
, *
t
;

194 
timeout
 = 
	`memp_mÆloc
(
MEMP_SYS_TIMEOUT
);

195 i‡(
timeout
 =
NULL
) {

196 
	`LWIP_ASSERT
("sys_timeout:Åimeouà!NULL", 
timeout
 !
NULL
);

199 
timeout
->
√xt
 = 
NULL
;

200 
timeout
->
h
 = h;

201 
timeout
->
¨g
 =árg;

202 
timeout
->
time
 = 
m£cs
;

204 
timeouts
 = 
	`sys_¨ch_timeouts
();

206 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_timeout: %∞m£cs=%"
U32_F
" h=%párg=%p\n",

207 (*)
timeout
, 
m£cs
, (*)&
h
, (*)
¨g
));

209 i‡(
timeouts
 =
NULL
) {

210 
	`LWIP_ASSERT
("sys_timeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

214 i‡(
timeouts
->
√xt
 =
NULL
) {

215 
timeouts
->
√xt
 = 
timeout
;

219 i‡(
timeouts
->
√xt
->
time
 > 
m£cs
) {

220 
timeouts
->
√xt
->
time
 -
m£cs
;

221 
timeout
->
√xt
 = 
timeouts
->next;

222 
timeouts
->
√xt
 = 
timeout
;

224 
t
 = 
timeouts
->
√xt
;Å !
NULL
;Å =Å->next) {

225 
timeout
->
time
 -
t
->time;

226 i‡(
t
->
√xt
 =
NULL
 ||Å->√xt->
time
 > 
timeout
->time) {

227 i‡(
t
->
√xt
 !
NULL
) {

228 
t
->
√xt
->
time
 -
timeout
->time;

230 
timeout
->
√xt
 = 
t
->next;

231 
t
->
√xt
 = 
timeout
;

236 
	}
}

249 
	$sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

251 
sys_timeouts
 *
timeouts
;

252 
sys_timeo
 *
¥ev_t
, *
t
;

254 
timeouts
 = 
	`sys_¨ch_timeouts
();

256 i‡(
timeouts
 =
NULL
) {

257 
	`LWIP_ASSERT
("sys_u¡imeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

260 i‡(
timeouts
->
√xt
 =
NULL
) {

264 
t
 = 
timeouts
->
√xt
, 
¥ev_t
 = 
NULL
;Å != NULL;Örev_t =Å,Å =Å->next) {

265 i‡((
t
->
h
 =hË&& (t->
¨g
 ==árg)) {

268 i‡(
¥ev_t
 =
NULL
)

269 
timeouts
->
√xt
 = 
t
->next;

271 
¥ev_t
->
√xt
 = 
t
->next;

273 i‡(
t
->
√xt
 !
NULL
)

274 
t
->
√xt
->
time
 +=Å->time;

275 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
t
);

280 
	}
}

288 
	$sswt_h™dÀr
(*
¨g
)

290 
sswt_cb
 *sswt_cb = (sswt_cb *Ë
¨g
;

293 
sswt_cb
->
timeÊag
 = 1;

294 
	`sys_£m_sig«l
(*(
sswt_cb
->
p£m
));

295 
	}
}

305 
	$sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
)

307 
sswt_cb
 sswt_cb;

309 
sswt_cb
.
p£m
 = &
£m
;

310 
sswt_cb
.
timeÊag
 = 0;

313 i‡(
timeout
 > 0) {

315 
	`sys_timeout
(
timeout
, 
sswt_h™dÀr
, &
sswt_cb
);

317 
	`sys_£m_waô
(
£m
);

319 i‡(
sswt_cb
.
timeÊag
) {

324 
	`sys_u¡imeout
(
sswt_h™dÀr
, &
sswt_cb
);

327 
	}
}

335 
	$sys_m¶ìp
(
u32_t
 
ms
)

337 
sys_£m_t
 
dñay£m
 = 
	`sys_£m_√w
(0);

339 
	`sys_£m_waô_timeout
(
dñay£m
, 
ms
);

341 
	`sys_£m_‰ì
(
dñay£m
);

342 
	}
}

	@net/lwip/core/tcp.c

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_TCP


48 
	~"lwù/def.h
"

49 
	~"lwù/mem.h
"

50 
	~"lwù/memp.h
"

51 
	~"lwù/¢mp.h
"

52 
	~"lwù/t˝.h
"

54 
	~<°rög.h
>

57 
u32_t
 
	gt˝_ticks
;

58 c⁄° 
u8_t
 
	gt˝_backoff
[13] =

61 c⁄° 
u8_t
 
	gt˝_≥rsi°_backoff
[7] = { 3, 6, 12, 24, 48, 96, 120 };

66 
t˝_pcb
 *
	gt˝_bound_pcbs
;

68 
t˝_li°í_pcbs_t
 
	gt˝_li°í_pcbs
;

71 
t˝_pcb
 *
	gt˝_a˘ive_pcbs
;

73 
t˝_pcb
 *
	gt˝_tw_pcbs
;

75 
t˝_pcb
 *
	gt˝_tmp_pcb
;

77 
u8_t
 
	gt˝_timî
;

78 
u16_t
 
t˝_√w_p‹t
();

85 
	$t˝_tmr
()

88 
	`t˝_Á°tmr
();

90 i‡(++
t˝_timî
 & 1) {

93 
	`t˝_¶owtmr
();

95 
	}
}

111 
îr_t


112 
	$t˝_˛o£
(
t˝_pcb
 *
pcb
)

114 
îr_t
 
îr
;

116 #i‡
TCP_DEBUG


117 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_close: closing in "));

118 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

121 
pcb
->
°©e
) {

122 
CLOSED
:

130 
îr
 = 
ERR_OK
;

131 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

132 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

133 
pcb
 = 
NULL
;

135 
LISTEN
:

136 
îr
 = 
ERR_OK
;

137 
	`t˝_pcb_ªmove
((
t˝_pcb
 **)&
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

138 
	`memp_‰ì
(
MEMP_TCP_PCB_LISTEN
, 
pcb
);

139 
pcb
 = 
NULL
;

141 
SYN_SENT
:

142 
îr
 = 
ERR_OK
;

143 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

144 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

145 
pcb
 = 
NULL
;

146 
	`¢mp_öc_t˝©ãm±Áûs
();

148 
SYN_RCVD
:

149 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

150 i‡(
îr
 =
ERR_OK
) {

151 
	`¢mp_öc_t˝©ãm±Áûs
();

152 
pcb
->
°©e
 = 
FIN_WAIT_1
;

155 
ESTABLISHED
:

156 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

157 i‡(
îr
 =
ERR_OK
) {

158 
	`¢mp_öc_t˝e°abª£ts
();

159 
pcb
->
°©e
 = 
FIN_WAIT_1
;

162 
CLOSE_WAIT
:

163 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

164 i‡(
îr
 =
ERR_OK
) {

165 
	`¢mp_öc_t˝e°abª£ts
();

166 
pcb
->
°©e
 = 
LAST_ACK
;

171 
îr
 = 
ERR_OK
;

172 
pcb
 = 
NULL
;

176 i‡(
pcb
 !
NULL
 && 
îr
 =
ERR_OK
) {

184 
	`t˝_ouçut
(
pcb
);

186  
îr
;

187 
	}
}

197 
	$t˝_ab‹t
(
t˝_pcb
 *
pcb
)

199 
u32_t
 
£qno
, 
ackno
;

200 
u16_t
 
ªmŸe_p‹t
, 
loˇl_p‹t
;

201 
ù_addr
 
ªmŸe_ù
, 
loˇl_ù
;

202 #i‡
LWIP_CALLBACK_API


203 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

205 *
îrf_¨g
;

211 i‡(
pcb
->
°©e
 =
TIME_WAIT
) {

212 
	`t˝_pcb_ªmove
(&
t˝_tw_pcbs
, 
pcb
);

213 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

215 
£qno
 = 
pcb
->
¢d_nxt
;

216 
ackno
 = 
pcb
->
rcv_nxt
;

217 
	`ù_addr_£t
(&
loˇl_ù
, &(
pcb
->local_ip));

218 
	`ù_addr_£t
(&
ªmŸe_ù
, &(
pcb
->remote_ip));

219 
loˇl_p‹t
 = 
pcb
->local_port;

220 
ªmŸe_p‹t
 = 
pcb
->remote_port;

221 #i‡
LWIP_CALLBACK_API


222 
îrf
 = 
pcb
->errf;

224 
îrf_¨g
 = 
pcb
->
ˇŒback_¨g
;

225 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

226 i‡(
pcb
->
u«cked
 !
NULL
) {

227 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

229 i‡(
pcb
->
un£¡
 !
NULL
) {

230 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

232 #i‡
TCP_QUEUE_OOSEQ


233 i‡(
pcb
->
oo£q
 !
NULL
) {

234 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

237 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

238 
	`TCP_EVENT_ERR
(
îrf
, 
îrf_¨g
, 
ERR_ABRT
);

239 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_abort: sending RST\n"));

240 
	`t˝_r°
(
£qno
, 
ackno
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

242 
	}
}

257 
îr_t


258 
	$t˝_böd
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

260 
t˝_pcb
 *
˝cb
;

262 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y böd i¿°©êCLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

264 i‡(
p‹t
 == 0) {

265 
p‹t
 = 
	`t˝_√w_p‹t
();

269 
˝cb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;

270 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

271 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

272 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

273 
	`ù_addr_ißny
(
ùaddr
) ||

274 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

275  
ERR_USE
;

280 
˝cb
 = 
t˝_a˘ive_pcbs
;

281 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

282 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

283 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

284 
	`ù_addr_ißny
(
ùaddr
) ||

285 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

286  
ERR_USE
;

291 
˝cb
 = 
t˝_bound_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

292 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

293 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

294 
	`ù_addr_ißny
(
ùaddr
) ||

295 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

296  
ERR_USE
;

302 
˝cb
 = 
t˝_tw_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

303 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

304 i‡(
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

305  
ERR_USE
;

310 i‡(!
	`ù_addr_ißny
(
ùaddr
)) {

311 
pcb
->
loˇl_ù
 = *
ùaddr
;

313 
pcb
->
loˇl_p‹t
 = 
p‹t
;

314 
	`TCP_REG
(&
t˝_bound_pcbs
, 
pcb
);

315 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_böd: bödÅÿp‹à%"
U16_F
"\n", 
p‹t
));

316  
ERR_OK
;

317 
	}
}

318 #i‡
LWIP_CALLBACK_API


322 
îr_t


323 
	$t˝_ac˚±_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

325 
	`LWIP_UNUSED_ARG
(
¨g
);

326 
	`LWIP_UNUSED_ARG
(
pcb
);

327 
	`LWIP_UNUSED_ARG
(
îr
);

329  
ERR_ABRT
;

330 
	}
}

347 
t˝_pcb
 *

348 
	$t˝_li°í_wôh_backlog
(
t˝_pcb
 *
pcb
, 
u8_t
 
backlog
)

350 
t˝_pcb_li°í
 *
Õcb
;

352 
	`LWIP_UNUSED_ARG
(
backlog
);

353 
	`LWIP_ERROR
("t˝_li°í:ÖcbáÃódy c⁄√˘ed", 
pcb
->
°©e
 =
CLOSED
,  
NULL
);

356 i‡(
pcb
->
°©e
 =
LISTEN
) {

357  
pcb
;

359 
Õcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB_LISTEN
);

360 i‡(
Õcb
 =
NULL
) {

361  
NULL
;

363 
Õcb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

364 
Õcb
->
loˇl_p‹t
 = 
pcb
->local_port;

365 
Õcb
->
°©e
 = 
LISTEN
;

366 
Õcb
->
so_›ti⁄s
 = 
pcb
->so_options;

367 
Õcb
->
so_›ti⁄s
 |
SOF_ACCEPTCONN
;

368 
Õcb
->
âl
 = 
pcb
->ttl;

369 
Õcb
->
tos
 = 
pcb
->tos;

370 
	`ù_addr_£t
(&
Õcb
->
loˇl_ù
, &
pcb
->local_ip);

371 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

372 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

373 #i‡
LWIP_CALLBACK_API


374 
Õcb
->
ac˚±
 = 
t˝_ac˚±_nuŒ
;

376 #i‡
TCP_LISTEN_BACKLOG


377 
Õcb
->
ac˚±s_≥ndög
 = 0;

378 
Õcb
->
backlog
 = (backlog ? backlog : 1);

380 
	`TCP_REG
(&
t˝_li°í_pcbs
.
li°í_pcbs
, 
Õcb
);

381  (
t˝_pcb
 *)
Õcb
;

382 
	}
}

393 
	$t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

395 i‡((
u32_t
)
pcb
->
rcv_wnd
 + 
Àn
 > 
TCP_WND
) {

396 
pcb
->
rcv_wnd
 = 
TCP_WND
;

397 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

399 
pcb
->
rcv_wnd
 +
Àn
;

400 i‡(
pcb
->
rcv_wnd
 >pcb->
mss
) {

401 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_wnd
;

405 i‡(!(
pcb
->
Êags
 & 
TF_ACK_DELAY
) &&

406 !(
pcb
->
Êags
 & 
TF_ACK_NOW
)) {

417 
	`t˝_ack
(
pcb
);

419 i‡(
pcb
->
Êags
 & 
TF_ACK_DELAY
 &&Öcb->
rcv_wnd
 >
TCP_WND
/2) {

427 
	`t˝_ack_now
(
pcb
);

430 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_ªcved:Ñecveived %"
U16_F
" bytes, wnd %"U16_F" (%"U16_F").\n",

431 
Àn
, 
pcb
->
rcv_wnd
, 
TCP_WND
 -Öcb->rcv_wnd));

432 
	}
}

440 
u16_t


441 
	$t˝_√w_p‹t
()

443 
t˝_pcb
 *
pcb
;

444 #i‚de‡
TCP_LOCAL_PORT_RANGE_START


445 
	#TCP_LOCAL_PORT_RANGE_START
 4096

	)

446 
	#TCP_LOCAL_PORT_RANGE_END
 0x7fff

	)

448 
u16_t
 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

450 
agaö
:

451 i‡(++
p‹t
 > 
TCP_LOCAL_PORT_RANGE_END
) {

452 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

455 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

456 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

457 
agaö
;

460 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

461 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

462 
agaö
;

465 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

466 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

467 
agaö
;

470  
p‹t
;

471 
	}
}

485 
îr_t


486 
t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
,

487 
	$îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
îr_t
 
îr
))

489 
u32_t
 
›td©a
;

490 
îr_t
 
ªt
;

491 
u32_t
 
iss
;

493 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y c⁄√˘ed from sèã CLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

495 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_c⁄√˘Åÿp‹à%"
U16_F
"\n", 
p‹t
));

496 i‡(
ùaddr
 !
NULL
) {

497 
pcb
->
ªmŸe_ù
 = *
ùaddr
;

499  
ERR_VAL
;

501 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

502 i‡(
pcb
->
loˇl_p‹t
 == 0) {

503 
pcb
->
loˇl_p‹t
 = 
	`t˝_√w_p‹t
();

505 
iss
 = 
	`t˝_√xt_iss
();

506 
pcb
->
rcv_nxt
 = 0;

507 
pcb
->
¢d_nxt
 = 
iss
;

508 
pcb
->
œ°ack
 = 
iss
 - 1;

509 
pcb
->
¢d_lbb
 = 
iss
 - 1;

510 
pcb
->
rcv_wnd
 = 
TCP_WND
;

511 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

512 
pcb
->
¢d_wnd
 = 
TCP_WND
;

515 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

516 #i‡
TCP_CALCULATE_EFF_SEND_MSS


517 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, 
ùaddr
);

519 
pcb
->
cwnd
 = 1;

520 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

521 
pcb
->
°©e
 = 
SYN_SENT
;

522 #i‡
LWIP_CALLBACK_API


523 
pcb
->
c⁄√˘ed
 = connected;

525 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

526 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
pcb
);

528 
	`¢mp_öc_t˝a˘ive›ís
();

531 
›td©a
 = 
	`TCP_BUILD_MSS_OPTION
();

533 
ªt
 = 
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
TCP_SYN
, 0, (
u8_t
 *)&
›td©a
, 4);

534 i‡(
ªt
 =
ERR_OK
) {

535 
	`t˝_ouçut
(
pcb
);

537  
ªt
;

538 
	}
}

548 
	$t˝_¶owtmr
()

550 
t˝_pcb
 *
pcb
, *
pcb2
, *
¥ev
;

551 
u16_t
 
eff_wnd
;

552 
u8_t
 
pcb_ªmove
;

553 
îr_t
 
îr
;

555 
îr
 = 
ERR_OK
;

557 ++
t˝_ticks
;

560 
¥ev
 = 
NULL
;

561 
pcb
 = 
t˝_a˘ive_pcbs
;

562 i‡(
pcb
 =
NULL
) {

563 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÇoáctiveÖcbs\n"));

565 
pcb
 !
NULL
) {

566 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÖrocessingáctiveÖcb\n"));

567 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!CLOSED\n", 
pcb
->
°©e
 !
CLOSED
);

568 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!LISTEN\n", 
pcb
->
°©e
 !
LISTEN
);

569 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!TIME-WAIT\n", 
pcb
->
°©e
 !
TIME_WAIT
);

571 
pcb_ªmove
 = 0;

573 i‡(
pcb
->
°©e
 =
SYN_SENT
 &&Öcb->
ƒtx
 =
TCP_SYNMAXRTX
) {

574 ++
pcb_ªmove
;

575 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max SYNÑetriesÑeached\n"));

577 i‡(
pcb
->
ƒtx
 =
TCP_MAXRTX
) {

578 ++
pcb_ªmove
;

579 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max DATAÑetriesÑeached\n"));

581 i‡(
pcb
->
≥rsi°_backoff
 > 0) {

584 
pcb
->
≥rsi°_˙t
++;

585 i‡(
pcb
->
≥rsi°_˙t
 >
t˝_≥rsi°_backoff
[pcb->
≥rsi°_backoff
-1]) {

586 
pcb
->
≥rsi°_˙t
 = 0;

587 i‡(
pcb
->
≥rsi°_backoff
 < (
t˝_≥rsi°_backoff
)) {

588 
pcb
->
≥rsi°_backoff
++;

590 
	`t˝_zîo_wödow_¥obe
(
pcb
);

594 if(
pcb
->
πime
 >= 0)

595 ++
pcb
->
πime
;

597 i‡(
pcb
->
u«cked
 !
NULL
 &&Öcb->
πime
 >pcb->
πo
) {

599 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_¶owtmr:Ñtimê%"
S16_F


600 "Öcb->πÿ%"
S16_F
"\n",

601 
pcb
->
πime
,Öcb->
πo
));

605 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

606 
pcb
->
πo
 = (’cb->
ß
 >> 3Ë+Öcb->
sv
Ë<< 
t˝_backoff
[pcb->
ƒtx
];

610 
pcb
->
πime
 = 0;

613 
eff_wnd
 = 
	`LWIP_MIN
(
pcb
->
cwnd
,Öcb->
¢d_wnd
);

614 
pcb
->
s°hªsh
 = 
eff_wnd
 >> 1;

615 i‡(
pcb
->
s°hªsh
 <Öcb->
mss
) {

616 
pcb
->
s°hªsh
 =Öcb->
mss
 * 2;

618 
pcb
->
cwnd
 =Öcb->
mss
;

619 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_¶owtmr: cwnd %"
U16_F


620 " s°hªsh %"
U16_F
"\n",

621 
pcb
->
cwnd
,Öcb->
s°hªsh
));

625 
	`t˝_ªxmô_πo
(
pcb
);

630 i‡(
pcb
->
°©e
 =
FIN_WAIT_2
) {

631 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

632 
TCP_FIN_WAIT_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

633 ++
pcb_ªmove
;

634 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in FIN-WAIT-2\n"));

639 if((
pcb
->
so_›ti⁄s
 & 
SOF_KEEPALIVE
) &&

640 ((
pcb
->
°©e
 =
ESTABLISHED
) ||

641 (
pcb
->
°©e
 =
CLOSE_WAIT
))) {

642 #i‡
LWIP_TCP_KEEPALIVE


643 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

644 (
pcb
->
kìp_idÀ
 + (pcb->
kìp_˙t
*pcb->
kìp_ötvl
))

645 / 
TCP_SLOW_INTERVAL
)

647 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

648 (
pcb
->
kìp_idÀ
 + 
TCP_MAXIDLE
Ë/ 
TCP_SLOW_INTERVAL
)

651 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¶owtmr: KEEPALIVEÅimeout. Ab‹tög c⁄√˘i⁄Åÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F".\n",

652 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

653 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

655 
	`t˝_ab‹t
(
pcb
);

657 #i‡
LWIP_TCP_KEEPALIVE


658 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

659 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 *Öcb->
kìp_ötvl
)

660 / 
TCP_SLOW_INTERVAL
)

662 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

663 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 * 
TCP_KEEPINTVL_DEFAULT
)

664 / 
TCP_SLOW_INTERVAL
)

667 
	`t˝_kì∑live
(
pcb
);

668 
pcb
->
kìp_˙t_£¡
++;

675 #i‡
TCP_QUEUE_OOSEQ


676 i‡(
pcb
->
oo£q
 !
NULL
 &&

677 (
u32_t
)
t˝_ticks
 - 
pcb
->
tmr
 >pcb->
πo
 * 
TCP_OOSEQ_TIMEOUT
) {

678 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

679 
pcb
->
oo£q
 = 
NULL
;

680 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("tcp_slowtmr: dropping OOSEQ queued data\n"));

685 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

686 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

687 
TCP_SYN_RCVD_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

688 ++
pcb_ªmove
;

689 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in SYN-RCVD\n"));

694 i‡(
pcb
->
°©e
 =
LAST_ACK
) {

695 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

696 ++
pcb_ªmove
;

697 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in LAST-ACK\n"));

702 i‡(
pcb_ªmove
) {

703 
	`t˝_pcb_purge
(
pcb
);

705 i‡(
¥ev
 !
NULL
) {

706 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_a˘ive_pcbs", 
pcb
 !
t˝_a˘ive_pcbs
);

707 
¥ev
->
√xt
 = 
pcb
->next;

710 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_a˘ive_pcbs", 
t˝_a˘ive_pcbs
 =
pcb
);

711 
t˝_a˘ive_pcbs
 = 
pcb
->
√xt
;

714 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_ABRT
);

716 
pcb2
 = 
pcb
->
√xt
;

717 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

718 
pcb
 = 
pcb2
;

722 ++
pcb
->
pﬁ…mr
;

723 i‡(
pcb
->
pﬁ…mr
 >pcb->
pﬁlöãrvÆ
) {

724 
pcb
->
pﬁ…mr
 = 0;

725 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:Öollingápplication\n"));

726 
	`TCP_EVENT_POLL
(
pcb
, 
îr
);

727 i‡(
îr
 =
ERR_OK
) {

728 
	`t˝_ouçut
(
pcb
);

732 
¥ev
 = 
pcb
;

733 
pcb
 =Öcb->
√xt
;

739 
¥ev
 = 
NULL
;

740 
pcb
 = 
t˝_tw_pcbs
;

741 
pcb
 !
NULL
) {

742 
	`LWIP_ASSERT
("t˝_¶owtmr: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

743 
pcb_ªmove
 = 0;

746 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

747 ++
pcb_ªmove
;

753 i‡(
pcb_ªmove
) {

754 
	`t˝_pcb_purge
(
pcb
);

756 i‡(
¥ev
 !
NULL
) {

757 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_tw_pcbs", 
pcb
 !
t˝_tw_pcbs
);

758 
¥ev
->
√xt
 = 
pcb
->next;

761 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_tw_pcbs", 
t˝_tw_pcbs
 =
pcb
);

762 
t˝_tw_pcbs
 = 
pcb
->
√xt
;

764 
pcb2
 = 
pcb
->
√xt
;

765 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

766 
pcb
 = 
pcb2
;

768 
¥ev
 = 
pcb
;

769 
pcb
 =Öcb->
√xt
;

772 
	}
}

781 
	$t˝_Á°tmr
()

783 
t˝_pcb
 *
pcb
;

785 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

787 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

789 
îr_t
 
îr
;

790 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_fasttmr:Çotify keptÖacket\n"));

791 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

792 i‡(
îr
 =
ERR_OK
) {

793 
pcb
->
ªfu£d_d©a
 = 
NULL
;

798 i‡(
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

799 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_fasttmr: delayed ACK\n"));

800 
	`t˝_ack_now
(
pcb
);

801 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

804 
	}
}

812 
u8_t


813 
	$t˝_£gs_‰ì
(
t˝_£g
 *
£g
)

815 
u8_t
 
cou¡
 = 0;

816 
t˝_£g
 *
√xt
;

817 
£g
 !
NULL
) {

818 
√xt
 = 
£g
->next;

819 
cou¡
 +
	`t˝_£g_‰ì
(
£g
);

820 
£g
 = 
√xt
;

822  
cou¡
;

823 
	}
}

831 
u8_t


832 
	$t˝_£g_‰ì
(
t˝_£g
 *
£g
)

834 
u8_t
 
cou¡
 = 0;

836 i‡(
£g
 !
NULL
) {

837 i‡(
£g
->
p
 !
NULL
) {

838 
cou¡
 = 
	`pbuf_‰ì
(
£g
->
p
);

839 #i‡
TCP_DEBUG


840 
£g
->
p
 = 
NULL
;

843 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
£g
);

845  
cou¡
;

846 
	}
}

855 
	$t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
)

857 
pcb
->
¥io
 =Örio;

858 
	}
}

859 #i‡
TCP_QUEUE_OOSEQ


868 
t˝_£g
 *

869 
	$t˝_£g_c›y
(
t˝_£g
 *
£g
)

871 
t˝_£g
 *
c£g
;

873 
c£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

874 i‡(
c£g
 =
NULL
) {

875  
NULL
;

877 
	`SMEMCPY
((
u8_t
 *)
c£g
, (c⁄° u8_à*)
£g
, (
t˝_£g
));

878 
	`pbuf_ªf
(
c£g
->
p
);

879  
c£g
;

880 
	}
}

883 #i‡
LWIP_CALLBACK_API


888 
îr_t


889 
	$t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

891 
¨g
 =árg;

892 i‡(
p
 !
NULL
) {

893 
	`pbuf_‰ì
(
p
);

894 } i‡(
îr
 =
ERR_OK
) {

895  
	`t˝_˛o£
(
pcb
);

897  
ERR_OK
;

898 
	}
}

907 
	$t˝_kûl_¥io
(
u8_t
 
¥io
)

909 
t˝_pcb
 *
pcb
, *
öa˘ive
;

910 
u32_t
 
öa˘ivôy
;

911 
u8_t
 
m¥io
;

914 
m¥io
 = 
TCP_PRIO_MAX
;

917 
öa˘ivôy
 = 0;

918 
öa˘ive
 = 
NULL
;

919 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

920 i‡(
pcb
->
¥io
 <=Örio &&

921 
pcb
->
¥io
 <
m¥io
 &&

922 (
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

923 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

924 
öa˘ive
 = 
pcb
;

925 
m¥io
 = 
pcb
->
¥io
;

928 i‡(
öa˘ive
 !
NULL
) {

929 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_¥io: kûlög olde° PCB %∞(%"
S32_F
")\n",

930 (*)
öa˘ive
, 
öa˘ivôy
));

931 
	`t˝_ab‹t
(
öa˘ive
);

933 
	}
}

940 
	$t˝_kûl_timewaô
()

942 
t˝_pcb
 *
pcb
, *
öa˘ive
;

943 
u32_t
 
öa˘ivôy
;

945 
öa˘ivôy
 = 0;

946 
öa˘ive
 = 
NULL
;

948 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

949 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

950 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

951 
öa˘ive
 = 
pcb
;

954 i‡(
öa˘ive
 !
NULL
) {

955 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_timewaô: kûlög olde° TIME-WAIT PCB %∞(%"
S32_F
")\n",

956 (*)
öa˘ive
, 
öa˘ivôy
));

957 
	`t˝_ab‹t
(
öa˘ive
);

959 
	}
}

967 
t˝_pcb
 *

968 
	$t˝_Æloc
(
u8_t
 
¥io
)

970 
t˝_pcb
 *
pcb
;

971 
u32_t
 
iss
;

973 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

974 i‡(
pcb
 =
NULL
) {

976 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));

977 
	`t˝_kûl_timewaô
();

979 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

980 i‡(
pcb
 =
NULL
) {

982 
	`t˝_kûl_¥io
(
¥io
);

984 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

987 i‡(
pcb
 !
NULL
) {

988 
	`mem£t
(
pcb
, 0, (
t˝_pcb
));

989 
pcb
->
¥io
 = 
TCP_PRIO_NORMAL
;

990 
pcb
->
¢d_buf
 = 
TCP_SND_BUF
;

991 
pcb
->
¢d_queuñí
 = 0;

992 
pcb
->
rcv_wnd
 = 
TCP_WND
;

993 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

994 
pcb
->
tos
 = 0;

995 
pcb
->
âl
 = 
TCP_TTL
;

998 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

999 
pcb
->
πo
 = 3000 / 
TCP_SLOW_INTERVAL
;

1000 
pcb
->
ß
 = 0;

1001 
pcb
->
sv
 = 3000 / 
TCP_SLOW_INTERVAL
;

1002 
pcb
->
πime
 = -1;

1003 
pcb
->
cwnd
 = 1;

1004 
iss
 = 
	`t˝_√xt_iss
();

1005 
pcb
->
¢d_wl2
 = 
iss
;

1006 
pcb
->
¢d_nxt
 = 
iss
;

1007 
pcb
->
¢d_max
 = 
iss
;

1008 
pcb
->
œ°ack
 = 
iss
;

1009 
pcb
->
¢d_lbb
 = 
iss
;

1010 
pcb
->
tmr
 = 
t˝_ticks
;

1012 
pcb
->
pﬁ…mr
 = 0;

1014 #i‡
LWIP_CALLBACK_API


1015 
pcb
->
ªcv
 = 
t˝_ªcv_nuŒ
;

1019 
pcb
->
kìp_idÀ
 = 
TCP_KEEPIDLE_DEFAULT
;

1021 #i‡
LWIP_TCP_KEEPALIVE


1022 
pcb
->
kìp_ötvl
 = 
TCP_KEEPINTVL_DEFAULT
;

1023 
pcb
->
kìp_˙t
 = 
TCP_KEEPCNT_DEFAULT
;

1026 
pcb
->
kìp_˙t_£¡
 = 0;

1028  
pcb
;

1029 
	}
}

1043 
t˝_pcb
 *

1044 
	$t˝_√w
()

1046  
	`t˝_Æloc
(
TCP_PRIO_NORMAL
);

1047 
	}
}

1057 
	$t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
)

1059 
pcb
->
ˇŒback_¨g
 = 
¨g
;

1060 
	}
}

1061 #i‡
LWIP_CALLBACK_API


1071 
t˝_ªcv
(
t˝_pcb
 *
pcb
,

1072 
	$îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
pbuf
 *
p
, 
îr_t
 
îr
))

1074 
pcb
->
ªcv
 =Ñecv;

1075 
	}
}

1085 
t˝_£¡
(
t˝_pcb
 *
pcb
,

1086 
	$îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
u16_t
 
Àn
))

1088 
pcb
->
£¡
 = sent;

1089 
	}
}

1100 
t˝_îr
(
t˝_pcb
 *
pcb
,

1101 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
))

1103 
pcb
->
îrf
 =Érrf;

1104 
	}
}

1115 
t˝_ac˚±
(
t˝_pcb
 *
pcb
,

1116 
	$îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
))

1118 ((
t˝_pcb_li°í
 *)
pcb
)->
ac˚±
 =áccept;

1119 
	}
}

1130 
t˝_pﬁl
(
t˝_pcb
 *
pcb
,

1131 
	$îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
), 
u8_t
 
öãrvÆ
)

1133 #i‡
LWIP_CALLBACK_API


1134 
pcb
->
pﬁl
 =Öoll;

1136 
pcb
->
pﬁlöãrvÆ
 = 
öãrvÆ
;

1137 
	}
}

1146 
	$t˝_pcb_purge
(
t˝_pcb
 *
pcb
)

1148 i‡(
pcb
->
°©e
 !
CLOSED
 &&

1149 
pcb
->
°©e
 !
TIME_WAIT
 &&

1150 
pcb
->
°©e
 !
LISTEN
) {

1152 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge\n"));

1154 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1155 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->refused_data\n"));

1156 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
);

1157 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1159 i‡(
pcb
->
un£¡
 !
NULL
) {

1160 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge:Çotáll data sent\n"));

1162 i‡(
pcb
->
u«cked
 !
NULL
) {

1163 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->unacked\n"));

1165 #i‡
TCP_QUEUE_OOSEQ


1166 i‡(
pcb
->
oo£q
 !
NULL
) {

1167 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->ooseq\n"));

1172 
pcb
->
πime
 = -1;

1174 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

1175 
pcb
->
oo£q
 = 
NULL
;

1177 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

1178 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

1179 
pcb
->
u«cked
 =Öcb->
un£¡
 = 
NULL
;

1181 
	}
}

1190 
	$t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
)

1192 
	`TCP_RMV
(
pcbli°
, 
pcb
);

1194 
	`t˝_pcb_purge
(
pcb
);

1197 i‡(
pcb
->
°©e
 !
TIME_WAIT
 &&

1198 
pcb
->
°©e
 !
LISTEN
 &&

1199 
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

1200 
pcb
->
Êags
 |
TF_ACK_NOW
;

1201 
	`t˝_ouçut
(
pcb
);

1204 i‡(
pcb
->
°©e
 !
LISTEN
) {

1205 
	`LWIP_ASSERT
("un£¡ segmít†Àakög", 
pcb
->
un£¡
 =
NULL
);

1206 
	`LWIP_ASSERT
("u«cked segmít†Àakög", 
pcb
->
u«cked
 =
NULL
);

1207 #i‡
TCP_QUEUE_OOSEQ


1208 
	`LWIP_ASSERT
("oo£q segmít†Àakög", 
pcb
->
oo£q
 =
NULL
);

1212 
pcb
->
°©e
 = 
CLOSED
;

1214 
	`LWIP_ASSERT
("t˝_pcb_ªmove:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

1215 
	}
}

1222 
u32_t


1223 
	$t˝_√xt_iss
()

1225 
u32_t
 
iss
 = 6510;

1227 
iss
 +
t˝_ticks
;

1228  
iss
;

1229 
	}
}

1231 #i‡
TCP_CALCULATE_EFF_SEND_MSS


1237 
u16_t


1238 
	$t˝_eff_£nd_mss
(
u16_t
 
£ndmss
, 
ù_addr
 *
addr
)

1240 
u16_t
 
mss_s
;

1241 
√tif
 *
outif
;

1243 
outif
 = 
	`ù_rouã
(
addr
);

1244 i‡((
outif
 !
NULL
Ë&& (outif->
mtu
 != 0)) {

1245 
mss_s
 = 
outif
->
mtu
 - 
IP_HLEN
 - 
TCP_HLEN
;

1249 
£ndmss
 = 
	`LWIP_MIN
(£ndmss, 
mss_s
);

1251  
£ndmss
;

1252 
	}
}

1255 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


1262 
	$t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
)

1264 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP header:\n"));

1265 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1266 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

1267 
	`¡ohs
(
t˝hdr
->
§c
),Çtohs—˝hdr->
de°
)));

1268 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1269 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (seqÇo)\n",

1270 
	`¡ohl
(
t˝hdr
->
£qno
)));

1271 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1272 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (ackÇo)\n",

1273 
	`¡ohl
(
t˝hdr
->
ackno
)));

1274 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1275 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %2"
U16_F
" | |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"| %5"U16_F" | (hdrlen, flags (",

1276 
	`TCPH_HDRLEN
(
t˝hdr
),

1277 
	`TCPH_FLAGS
(
t˝hdr
) >> 5 & 1,

1278 
	`TCPH_FLAGS
(
t˝hdr
) >> 4 & 1,

1279 
	`TCPH_FLAGS
(
t˝hdr
) >> 3 & 1,

1280 
	`TCPH_FLAGS
(
t˝hdr
) >> 2 & 1,

1281 
	`TCPH_FLAGS
(
t˝hdr
) >> 1 & 1,

1282 
	`TCPH_FLAGS
(
t˝hdr
) & 1,

1283 
	`¡ohs
(
t˝hdr
->
wnd
)));

1284 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

1285 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("), win)\n"));

1286 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1287 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| 0x%04"
X16_F
" | %5"
U16_F
" | (chksum, urgp)\n",

1288 
	`¡ohs
(
t˝hdr
->
chksum
),Çtohs—˝hdr->
urgp
)));

1289 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1290 
	}
}

1298 
	$t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
)

1300 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("State: "));

1301 
s
) {

1302 
CLOSED
:

1303 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSED\n"));

1305 
LISTEN
:

1306 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LISTEN\n"));

1308 
SYN_SENT
:

1309 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_SENT\n"));

1311 
SYN_RCVD
:

1312 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_RCVD\n"));

1314 
ESTABLISHED
:

1315 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ESTABLISHED\n"));

1317 
FIN_WAIT_1
:

1318 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_1\n"));

1320 
FIN_WAIT_2
:

1321 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_2\n"));

1323 
CLOSE_WAIT
:

1324 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSE_WAIT\n"));

1326 
CLOSING
:

1327 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSING\n"));

1329 
LAST_ACK
:

1330 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LAST_ACK\n"));

1332 
TIME_WAIT
:

1333 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME_WAIT\n"));

1336 
	}
}

1344 
	$t˝_debug_¥öt_Êags
(
u8_t
 
Êags
)

1346 i‡(
Êags
 & 
TCP_FIN
) {

1347 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN "));

1349 i‡(
Êags
 & 
TCP_SYN
) {

1350 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN "));

1352 i‡(
Êags
 & 
TCP_RST
) {

1353 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("RST "));

1355 i‡(
Êags
 & 
TCP_PSH
) {

1356 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("PSH "));

1358 i‡(
Êags
 & 
TCP_ACK
) {

1359 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ACK "));

1361 i‡(
Êags
 & 
TCP_URG
) {

1362 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("URG "));

1364 i‡(
Êags
 & 
TCP_ECE
) {

1365 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ECE "));

1367 i‡(
Êags
 & 
TCP_CWR
) {

1368 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CWR "));

1370 
	}
}

1376 
	$t˝_debug_¥öt_pcbs
()

1378 
t˝_pcb
 *
pcb
;

1379 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Active PCB states:\n"));

1380 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1381 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1382 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1383 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1384 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1386 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Listen PCB states:\n"));

1387 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1388 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1389 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1390 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1391 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1393 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME-WAIT PCB states:\n"));

1394 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1395 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1396 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1397 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1398 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1400 
	}
}

1405 
s16_t


1406 
	$t˝_pcbs_ß√
()

1408 
t˝_pcb
 *
pcb
;

1409 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1410 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

1411 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

1412 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

1414 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1415 
	`LWIP_ASSERT
("t˝_pcbs_ß√:ÅwÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

1418 
	}
}

	@net/lwip/core/tcp_in.c

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_TCP


49 
	~"lwù/t˝.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/ù_addr.h
"

52 
	~"lwù/√tif.h
"

53 
	~"lwù/mem.h
"

54 
	~"lwù/memp.h
"

55 
	~"lwù/öë.h
"

56 
	~"lwù/öë_chksum.h
"

57 
	~"lwù/°©s.h
"

58 
	~"lwù/¢mp.h
"

59 
	~"¨ch/≥rf.h
"

64 
t˝_£g
 
	gö£g
;

65 
t˝_hdr
 *
	gt˝hdr
;

66 
ù_hdr
 *
	gùhdr
;

67 
u32_t
 
	g£qno
, 
	gackno
;

68 
u8_t
 
	gÊags
;

69 
u16_t
 
	gt˝Àn
;

71 
u8_t
 
	gªcv_Êags
;

72 
pbuf
 *
	gªcv_d©a
;

74 
t˝_pcb
 *
	gt˝_öput_pcb
;

77 
îr_t
 
t˝_¥o˚ss
(
t˝_pcb
 *
pcb
);

78 
u8_t
 
t˝_ª˚ive
(
t˝_pcb
 *
pcb
);

79 
t˝_∑r£›t
(
t˝_pcb
 *
pcb
);

81 
îr_t
 
t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
);

82 
îr_t
 
t˝_timewaô_öput
(
t˝_pcb
 *
pcb
);

94 
	$t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

96 
t˝_pcb
 *
pcb
, *
¥ev
;

97 
t˝_pcb_li°í
 *
Õcb
;

98 
u8_t
 
hdæí
;

99 
îr_t
 
îr
;

101 
PERF_START
;

103 
	`TCP_STATS_INC
(
t˝
.
ªcv
);

104 
	`¢mp_öc_t˝ö£gs
();

106 
ùhdr
 = 
p
->
∑ylﬂd
;

107 
t˝hdr
 = (
t˝_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 + 
	`IPH_HL
(
ùhdr
) * 4);

109 #i‡
TCP_INPUT_DEBUG


110 
	`t˝_debug_¥öt
(
t˝hdr
);

114 i‡(
	`pbuf_hódî
(
p
, -((
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4))Ë|| (p->
tŸ_Àn
 < (
t˝_hdr
))) {

116 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput: sh‹à∑ckë (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

117 
	`TCP_STATS_INC
(
t˝
.
À√º
);

118 
	`TCP_STATS_INC
(
t˝
.
dr›
);

119 
	`¢mp_öc_t˝öîrs
();

120 
	`pbuf_‰ì
(
p
);

125 i‡(
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) ||

126 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

127 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

128 
	`TCP_STATS_INC
(
t˝
.
dr›
);

129 
	`¢mp_öc_t˝öîrs
();

130 
	`pbuf_‰ì
(
p
);

134 #i‡
CHECKSUM_CHECK_TCP


136 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

137 (
ù_addr
 *)&(
ùhdr
->
de°
),

138 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

139 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput:Öackë disˇrded duêtÿÁûög checksum 0x%04"
X16_F
"\n",

140 
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
), (ù_add∏*)&(ùhdr->
de°
),

141 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
)));

142 #i‡
TCP_DEBUG


143 
	`t˝_debug_¥öt
(
t˝hdr
);

145 
	`TCP_STATS_INC
(
t˝
.
chkîr
);

146 
	`TCP_STATS_INC
(
t˝
.
dr›
);

147 
	`¢mp_öc_t˝öîrs
();

148 
	`pbuf_‰ì
(
p
);

155 
hdæí
 = 
	`TCPH_HDRLEN
(
t˝hdr
);

156 if(
	`pbuf_hódî
(
p
, -(
hdæí
 * 4))){

158 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: shortÖacket\n"));

159 
	`TCP_STATS_INC
(
t˝
.
À√º
);

160 
	`TCP_STATS_INC
(
t˝
.
dr›
);

161 
	`¢mp_öc_t˝öîrs
();

162 
	`pbuf_‰ì
(
p
);

167 
t˝hdr
->
§c
 = 
	`¡ohs
(tcphdr->src);

168 
t˝hdr
->
de°
 = 
	`¡ohs
(tcphdr->dest);

169 
£qno
 = 
t˝hdr
->£qnÿ
	`¡ohl
(tcphdr->seqno);

170 
ackno
 = 
t˝hdr
->acknÿ
	`¡ohl
(tcphdr->ackno);

171 
t˝hdr
->
wnd
 = 
	`¡ohs
(tcphdr->wnd);

173 
Êags
 = 
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_FLAGS
;

174 
t˝Àn
 = 
p
->
tŸ_Àn
 + ((
Êags
 & 
TCP_FIN
 || fœg†& 
TCP_SYN
)? 1: 0);

178 
¥ev
 = 
NULL
;

181 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

182 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

183 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

184 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

185 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

186 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

187 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

188 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

193 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (bef‹êˇche)", 
pcb
->
√xt
 !=Öcb);

194 i‡(
¥ev
 !
NULL
) {

195 
¥ev
->
√xt
 = 
pcb
->next;

196 
pcb
->
√xt
 = 
t˝_a˘ive_pcbs
;

197 
t˝_a˘ive_pcbs
 = 
pcb
;

199 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (a·î cache)", 
pcb
->
√xt
 !=Öcb);

202 
¥ev
 = 
pcb
;

205 i‡(
pcb
 =
NULL
) {

208 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

209 
	`LWIP_ASSERT
("t˝_öput: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

210 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

211 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

212 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

213 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

217 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for TIME_WAITing connection.\n"));

218 
	`t˝_timewaô_öput
(
pcb
);

219 
	`pbuf_‰ì
(
p
);

226 
¥ev
 = 
NULL
;

227 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

228 i‡((
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)) ||

229 
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) &&

230 
Õcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
) {

234 i‡(
¥ev
 !
NULL
) {

235 ((
t˝_pcb_li°í
 *)
¥ev
)->
√xt
 = 
Õcb
->next;

237 
Õcb
->
√xt
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;

239 
t˝_li°í_pcbs
.
li°í_pcbs
 = 
Õcb
;

242 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for LISTENing connection.\n"));

243 
	`t˝_li°í_öput
(
Õcb
);

244 
	`pbuf_‰ì
(
p
);

247 
¥ev
 = (
t˝_pcb
 *)
Õcb
;

251 #i‡
TCP_INPUT_DEBUG


252 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+-Åcp_input: flags "));

253 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

254 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));

258 i‡(
pcb
 !
NULL
) {

260 #i‡
TCP_INPUT_DEBUG


261 #i‡
TCP_DEBUG


262 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

267 
ö£g
.
√xt
 = 
NULL
;

268 
ö£g
.
Àn
 = 
p
->
tŸ_Àn
;

269 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

270 
ö£g
.
p
 =Ö;

271 
ö£g
.
t˝hdr
 =Åcphdr;

273 
ªcv_d©a
 = 
NULL
;

274 
ªcv_Êags
 = 0;

277 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

279 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Çotify keptÖacket\n"));

280 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

281 i‡(
îr
 =
ERR_OK
) {

282 
pcb
->
ªfu£d_d©a
 = 
NULL
;

285 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: drop incomingÖackets, becauseÖcb is \"full\"\n"));

286 
	`TCP_STATS_INC
(
t˝
.
dr›
);

287 
	`¢mp_öc_t˝öîrs
();

288 
	`pbuf_‰ì
(
p
);

293 
t˝_öput_pcb
 = 
pcb
;

294 
îr
 = 
	`t˝_¥o˚ss
(
pcb
);

295 
t˝_öput_pcb
 = 
NULL
;

298 i‡(
îr
 !
ERR_ABRT
) {

299 i‡(
ªcv_Êags
 & 
TF_RESET
) {

304 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_RST
);

305 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

306 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

307 } i‡(
ªcv_Êags
 & 
TF_CLOSED
) {

310 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

311 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

313 
îr
 = 
ERR_OK
;

317 i‡(
pcb
->
acked
 > 0) {

318 
	`TCP_EVENT_SENT
(
pcb
,Öcb->
acked
, 
îr
);

321 i‡(
ªcv_d©a
 !
NULL
) {

322 if(
Êags
 & 
TCP_PSH
) {

323 
ªcv_d©a
->
Êags
 |
PBUF_FLAG_PUSH
;

327 
	`TCP_EVENT_RECV
(
pcb
, 
ªcv_d©a
, 
ERR_OK
, 
îr
);

330 i‡(
îr
 !
ERR_OK
) {

331 
pcb
->
ªfu£d_d©a
 = 
ªcv_d©a
;

332 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: keep incomingÖacket, becauseÖcb is \"full\"\n"));

338 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

339 
	`TCP_EVENT_RECV
(
pcb
, 
NULL
, 
ERR_OK
, 
îr
);

343 i‡(
îr
 =
ERR_OK
) {

344 
	`t˝_ouçut
(
pcb
);

351 i‡(
ö£g
.
p
 !
NULL
)

353 
	`pbuf_‰ì
(
ö£g
.
p
);

354 
ö£g
.
p
 = 
NULL
;

356 #i‡
TCP_INPUT_DEBUG


357 #i‡
TCP_DEBUG


358 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

366 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_input:Ço PCB match found,Ñesetting.\n"));

367 i‡(!(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_RST
)) {

368 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

369 
	`TCP_STATS_INC
(
t˝
.
dr›
);

370 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
,

371 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

372 
t˝hdr
->
de°
,Å˝hdr->
§c
);

374 
	`pbuf_‰ì
(
p
);

377 
	`LWIP_ASSERT
("t˝_öput:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

378 
	`PERF_STOP
("tcp_input");

379 
	}
}

393 
îr_t


394 
	$t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
)

396 
t˝_pcb
 *
≈cb
;

397 
u32_t
 
›td©a
;

401 i‡(
Êags
 & 
TCP_ACK
) {

404 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_listen_input: ACK in LISTEN, sendingÑeset\n"));

405 
	`t˝_r°
(
ackno
 + 1, 
£qno
 + 
t˝Àn
,

406 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

407 
t˝hdr
->
de°
,Å˝hdr->
§c
);

408 } i‡(
Êags
 & 
TCP_SYN
) {

409 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄Ñeque° %"
U16_F
" -> %"U16_F".\n", 
t˝hdr
->
§c
,Å˝hdr->
de°
));

410 #i‡
TCP_LISTEN_BACKLOG


411 i‡(
pcb
->
ac˚±s_≥ndög
 >pcb->
backlog
) {

412  
ERR_ABRT
;

415 
≈cb
 = 
	`t˝_Æloc
(
pcb
->
¥io
);

419 i‡(
≈cb
 =
NULL
) {

420 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_listen_input: couldÇotállocate PCB\n"));

421 
	`TCP_STATS_INC
(
t˝
.
memîr
);

422  
ERR_MEM
;

424 #i‡
TCP_LISTEN_BACKLOG


425 
pcb
->
ac˚±s_≥ndög
++;

428 
	`ù_addr_£t
(&(
≈cb
->
loˇl_ù
), &(
ùhdr
->
de°
));

429 
≈cb
->
loˇl_p‹t
 = 
pcb
->local_port;

430 
	`ù_addr_£t
(&(
≈cb
->
ªmŸe_ù
), &(
ùhdr
->
§c
));

431 
≈cb
->
ªmŸe_p‹t
 = 
t˝hdr
->
§c
;

432 
≈cb
->
°©e
 = 
SYN_RCVD
;

433 
≈cb
->
rcv_nxt
 = 
£qno
 + 1;

434 
≈cb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

435 
≈cb
->
s°hªsh
 =Çpcb->
¢d_wnd
;

436 
≈cb
->
¢d_wl1
 = 
£qno
 - 1;

437 
≈cb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

438 #i‡
LWIP_CALLBACK_API


439 
≈cb
->
ac˚±
 = 
pcb
->accept;

442 
≈cb
->
so_›ti⁄s
 = 
pcb
->so_›ti⁄†& (
SOF_DEBUG
|
SOF_DONTROUTE
|
SOF_KEEPALIVE
|
SOF_OOBINLINE
|
SOF_LINGER
);

445 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
);

448 
	`t˝_∑r£›t
(
≈cb
);

449 #i‡
TCP_CALCULATE_EFF_SEND_MSS


450 
≈cb
->
mss
 = 
	`t˝_eff_£nd_mss
“pcb->mss, &“pcb->
ªmŸe_ù
));

453 
	`¢mp_öc_t˝∑ssive›ís
();

456 
›td©a
 = 
	`TCP_BUILD_MSS_OPTION
();

458 
	`t˝_íqueue
(
≈cb
, 
NULL
, 0, 
TCP_SYN
 | 
TCP_ACK
, 0, (
u8_t
 *)&
›td©a
, 4);

459  
	`t˝_ouçut
(
≈cb
);

461  
ERR_OK
;

462 
	}
}

473 
îr_t


474 
	$t˝_timewaô_öput
(
t˝_pcb
 *
pcb
)

476 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
t˝Àn
, 
pcb
->
rcv_nxt
)) {

477 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

479 i‡(
t˝Àn
 > 0) {

480 
	`t˝_ack_now
(
pcb
);

482  
	`t˝_ouçut
(
pcb
);

483 
	}
}

496 
îr_t


497 
	$t˝_¥o˚ss
(
t˝_pcb
 *
pcb
)

499 
t˝_£g
 *
r£g
;

500 
u8_t
 
ac˚±abÀ
 = 0;

501 
îr_t
 
îr
;

502 
u8_t
 
ac˚±ed_ö£q
;

504 
îr
 = 
ERR_OK
;

507 i‡(
Êags
 & 
TCP_RST
) {

509 i‡(
pcb
->
°©e
 =
SYN_SENT
) {

510 i‡(
ackno
 =
pcb
->
¢d_nxt
) {

511 
ac˚±abÀ
 = 1;

514 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

515 
pcb
->
rcv_nxt
+pcb->
rcv_wnd
)) {

516 
ac˚±abÀ
 = 1;

520 i‡(
ac˚±abÀ
) {

521 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_process: Connection RESET\n"));

522 
	`LWIP_ASSERT
("t˝_öput:Öcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

523 
ªcv_Êags
 = 
TF_RESET
;

524 
pcb
->
Êags
 &~
TF_ACK_DELAY
;

525  
ERR_RST
;

527 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

528 
£qno
, 
pcb
->
rcv_nxt
));

529 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

530 
£qno
, 
pcb
->
rcv_nxt
));

531  
ERR_OK
;

536 
pcb
->
tmr
 = 
t˝_ticks
;

537 
pcb
->
kìp_˙t_£¡
 = 0;

540 
pcb
->
°©e
) {

541 
SYN_SENT
:

542 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("SYN-SENT:ácknÿ%"
U32_F
"Öcb->¢d_nxà%"U32_F" u«cked %"U32_F"\n", 
ackno
,

543 
pcb
->
¢d_nxt
, 
	`¡ohl
’cb->
u«cked
->
t˝hdr
->
£qno
)));

545 i‡((
Êags
 & 
TCP_ACK
Ë&& (Êag†& 
TCP_SYN
)

546 && 
ackno
 =
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) + 1) {

547 
pcb
->
¢d_buf
++;

548 
pcb
->
rcv_nxt
 = 
£qno
 + 1;

549 
pcb
->
œ°ack
 = 
ackno
;

550 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

551 
pcb
->
¢d_wl1
 = 
£qno
 - 1;

552 
pcb
->
°©e
 = 
ESTABLISHED
;

556 
	`t˝_∑r£›t
(
pcb
);

557 #i‡
TCP_CALCULATE_EFF_SEND_MSS


558 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, &’cb->
ªmŸe_ù
));

563 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

565 
pcb
->
cwnd
 = (’cb->cwnd =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

566 
	`LWIP_ASSERT
("pcb->¢d_queuñí > 0", (
pcb
->
¢d_queuñí
 > 0));

567 --
pcb
->
¢d_queuñí
;

568 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_¥o˚ss: SYN-SENT --queuñí %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

569 
r£g
 = 
pcb
->
u«cked
;

570 
pcb
->
u«cked
 = 
r£g
->
√xt
;

574 if(
pcb
->
u«cked
 =
NULL
)

575 
pcb
->
πime
 = -1;

577 
pcb
->
πime
 = 0;

578 
pcb
->
ƒtx
 = 0;

581 
	`t˝_£g_‰ì
(
r£g
);

585 
	`TCP_EVENT_CONNECTED
(
pcb
, 
ERR_OK
, 
îr
);

586 
	`t˝_ack_now
(
pcb
);

589 i‡(
Êags
 & 
TCP_ACK
) {

591 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

592 
t˝hdr
->
de°
,Å˝hdr->
§c
);

595 
SYN_RCVD
:

596 i‡(
Êags
 & 
TCP_ACK
 &&

597 !(
Êags
 & 
TCP_RST
)) {

599 i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)) {

600 
u16_t
 
ﬁd_cwnd
;

601 
pcb
->
°©e
 = 
ESTABLISHED
;

602 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄É°ablished %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

603 #i‡
LWIP_CALLBACK_API


604 
	`LWIP_ASSERT
("pcb->ac˚± !NULL", 
pcb
->
ac˚±
 !
NULL
);

607 
	`TCP_EVENT_ACCEPT
(
pcb
, 
ERR_OK
, 
îr
);

608 i‡(
îr
 !
ERR_OK
) {

611 
	`t˝_ab‹t
(
pcb
);

612  
ERR_ABRT
;

614 
ﬁd_cwnd
 = 
pcb
->
cwnd
;

617 
ac˚±ed_ö£q
 = 
	`t˝_ª˚ive
(
pcb
);

619 
pcb
->
cwnd
 = ((
ﬁd_cwnd
 =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

621 i‡((
Êags
 & 
TCP_FIN
Ë&& 
ac˚±ed_ö£q
) {

622 
	`t˝_ack_now
(
pcb
);

623 
pcb
->
°©e
 = 
CLOSE_WAIT
;

629 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

630 
t˝hdr
->
de°
,Å˝hdr->
§c
);

634 
CLOSE_WAIT
:

636 
ESTABLISHED
:

637 
ac˚±ed_ö£q
 = 
	`t˝_ª˚ive
(
pcb
);

638 i‡((
Êags
 & 
TCP_FIN
Ë&& 
ac˚±ed_ö£q
) {

639 
	`t˝_ack_now
(
pcb
);

640 
pcb
->
°©e
 = 
CLOSE_WAIT
;

643 
FIN_WAIT_1
:

644 
	`t˝_ª˚ive
(
pcb
);

645 i‡(
Êags
 & 
TCP_FIN
) {

646 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

647 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

648 ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

649 
	`t˝_ack_now
(
pcb
);

650 
	`t˝_pcb_purge
(
pcb
);

651 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

652 
pcb
->
°©e
 = 
TIME_WAIT
;

653 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

655 
	`t˝_ack_now
(
pcb
);

656 
pcb
->
°©e
 = 
CLOSING
;

658 } i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

659 
pcb
->
°©e
 = 
FIN_WAIT_2
;

662 
FIN_WAIT_2
:

663 
	`t˝_ª˚ive
(
pcb
);

664 i‡(
Êags
 & 
TCP_FIN
) {

665 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

666 
	`t˝_ack_now
(
pcb
);

667 
	`t˝_pcb_purge
(
pcb
);

668 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

669 
pcb
->
°©e
 = 
TIME_WAIT
;

670 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

673 
CLOSING
:

674 
	`t˝_ª˚ive
(
pcb
);

675 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

676 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

677 
	`t˝_ack_now
(
pcb
);

678 
	`t˝_pcb_purge
(
pcb
);

679 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

680 
pcb
->
°©e
 = 
TIME_WAIT
;

681 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

684 
LAST_ACK
:

685 
	`t˝_ª˚ive
(
pcb
);

686 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

687 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

689 
ªcv_Êags
 = 
TF_CLOSED
;

695  
ERR_OK
;

696 
	}
}

712 
u8_t


713 
	$t˝_ª˚ive
(
t˝_pcb
 *
pcb
)

715 
t˝_£g
 *
√xt
;

716 #i‡
TCP_QUEUE_OOSEQ


717 
t˝_£g
 *
¥ev
, *
c£g
;

719 
pbuf
 *
p
;

720 
s32_t
 
off
;

721 
s16_t
 
m
;

722 
u32_t
 
right_wnd_edge
;

723 
u16_t
 
√w_tŸ_Àn
;

724 
u8_t
 
ac˚±ed_ö£q
 = 0;

726 i‡(
Êags
 & 
TCP_ACK
) {

727 
right_wnd_edge
 = 
pcb
->
¢d_wnd
 +Öcb->
¢d_wl1
;

730 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_wl1
, 
£qno
) ||

731 (
pcb
->
¢d_wl1
 =
£qno
 && 
	`TCP_SEQ_LT
’cb->
¢d_wl2
, 
ackno
)) ||

732 (
pcb
->
¢d_wl2
 =
ackno
 && 
t˝hdr
->
wnd
 >Öcb->
¢d_wnd
)) {

733 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

734 
pcb
->
¢d_wl1
 = 
£qno
;

735 
pcb
->
¢d_wl2
 = 
ackno
;

736 i‡(
pcb
->
¢d_wnd
 > 0 &&Öcb->
≥rsi°_backoff
 > 0) {

737 
pcb
->
≥rsi°_backoff
 = 0;

739 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive: wödow upd©ê%"
U16_F
"\n", 
pcb
->
¢d_wnd
));

740 #i‡
TCP_WND_DEBUG


742 i‡(
pcb
->
¢d_wnd
 !
t˝hdr
->
wnd
) {

743 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive:Çÿwödow upd©êœ°ack %"
U32_F
" snd_max %"U32_F"áckno %"U32_F" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",

744 
pcb
->
œ°ack
,Öcb->
¢d_max
, 
ackno
,Öcb->
¢d_wl1
, 
£qno
,Öcb->
¢d_wl2
));

749 i‡(
pcb
->
œ°ack
 =
ackno
) {

750 
pcb
->
acked
 = 0;

752 i‡(
pcb
->
¢d_wl1
 +Öcb->
¢d_wnd
 =
right_wnd_edge
){

753 ++
pcb
->
du∑cks
;

754 i‡(
pcb
->
du∑cks
 >3 &&Öcb->
u«cked
 !
NULL
) {

755 i‡(!(
pcb
->
Êags
 & 
TF_INFR
)) {

757 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ck†%"
U16_F
" (%"
U32_F
"), fastÑetransmit %"U32_F"\n",

758 (
u16_t
)
pcb
->
du∑cks
,Öcb->
œ°ack
,

759 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
)));

760 
	`t˝_ªxmô
(
pcb
);

766 i‡(
pcb
->
cwnd
 >Öcb->
¢d_wnd
)

767 
pcb
->
s°hªsh
 =Öcb->
¢d_wnd
 / 2;

769 
pcb
->
s°hªsh
 =Öcb->
cwnd
 / 2;

772 i‡(
pcb
->
s°hªsh
 < 2*pcb->
mss
) {

773 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: Thêmöimum vÆuêf‹ s°hªsh %"
U16_F
" should bêmö 2 ms†%"U16_F"...\n", 
pcb
->
s°hªsh
, 2*pcb->
mss
));

774 
pcb
->
s°hªsh
 = 2*pcb->
mss
;

777 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3 *Öcb->
mss
;

778 
pcb
->
Êags
 |
TF_INFR
;

782 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

783 
pcb
->
cwnd
 +pcb->
mss
;

788 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ckávîãd %"
U32_F
" %"U32_F"\n",

789 
pcb
->
¢d_wl1
 +Öcb->
¢d_wnd
, 
right_wnd_edge
));

791 } i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_max
)){

797 i‡(
pcb
->
Êags
 & 
TF_INFR
) {

798 
pcb
->
Êags
 &~
TF_INFR
;

799 
pcb
->
cwnd
 =Öcb->
s°hªsh
;

803 
pcb
->
ƒtx
 = 0;

806 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

809 
pcb
->
acked
 = (
u16_t
)(
ackno
 -Öcb->
œ°ack
);

811 
pcb
->
¢d_buf
 +pcb->
acked
;

814 
pcb
->
du∑cks
 = 0;

815 
pcb
->
œ°ack
 = 
ackno
;

819 i‡(
pcb
->
°©e
 >
ESTABLISHED
) {

820 i‡(
pcb
->
cwnd
 <Öcb->
s°hªsh
) {

821 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

822 
pcb
->
cwnd
 +pcb->
mss
;

824 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: slow sèπ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

826 
u16_t
 
√w_cwnd
 = (
pcb
->
cwnd
 +Öcb->
mss
 *Öcb->mss /Öcb->cwnd);

827 i‡(
√w_cwnd
 > 
pcb
->
cwnd
) {

828 
pcb
->
cwnd
 = 
√w_cwnd
;

830 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: c⁄ge°i⁄ávoid™˚ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

833 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: ACK f‹ %"
U32_F
", unacked->seqno %"U32_F":%"U32_F"\n",

834 
ackno
,

835 
pcb
->
u«cked
 !
NULL
?

836 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
): 0,

837 
pcb
->
u«cked
 !
NULL
?

838 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(pcb->unacked): 0));

842 
pcb
->
u«cked
 !
NULL
 &&

843 
	`TCP_SEQ_LEQ
(
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

844 
	`TCP_TCPLEN
(
pcb
->
u«cked
), 
ackno
)) {

845 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unacked\n",

846 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
),

847 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

848 
	`TCP_TCPLEN
(
pcb
->
u«cked
)));

850 
√xt
 = 
pcb
->
u«cked
;

851 
pcb
->
u«cked
 =Öcb->u«cked->
√xt
;

853 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

854 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

855 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

856 
	`t˝_£g_‰ì
(
√xt
);

858 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög u«cked)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

859 i‡(
pcb
->
¢d_queuñí
 != 0) {

860 
	`LWIP_ASSERT
("t˝_ª˚ive: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

861 
pcb
->
un£¡
 !
NULL
);

867 if(
pcb
->
u«cked
 =
NULL
)

868 
pcb
->
πime
 = -1;

870 
pcb
->
πime
 = 0;

872 
pcb
->
pﬁ…mr
 = 0;

875 
pcb
->
acked
 = 0;

884 
pcb
->
un£¡
 !
NULL
 &&

887 
	`TCP_SEQ_BETWEEN
(
ackno
, 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
’cb->un£¡),Öcb->
¢d_max
)

889 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unsent\n",

890 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
),Çtohl(pcb->unsent->tcphdr->seqno) +

891 
	`TCP_TCPLEN
(
pcb
->
un£¡
)));

893 
√xt
 = 
pcb
->
un£¡
;

894 
pcb
->
un£¡
 =Öcb->un£¡->
√xt
;

895 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

896 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

897 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

898 
	`t˝_£g_‰ì
(
√xt
);

899 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög un£¡)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

900 i‡(
pcb
->
¢d_queuñí
 != 0) {

901 
	`LWIP_ASSERT
("tcp_receive: valid queueÜength",

902 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

905 i‡(
pcb
->
un£¡
 !
NULL
) {

906 
pcb
->
¢d_nxt
 = 
	`ht⁄l
’cb->
un£¡
->
t˝hdr
->
£qno
);

911 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Öcb->πã° %"
U32_F
"Ñtseq %"U32_F"áckno %"U32_F"\n",

912 
pcb
->
πã°
,Öcb->
π£q
, 
ackno
));

917 i‡(
pcb
->
πã°
 && 
	`TCP_SEQ_LT
’cb->
π£q
, 
ackno
)) {

920 
m
 = (
s16_t
)(
t˝_ticks
 - 
pcb
->
πã°
);

922 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Éx≥rõn˚dÑâ %"
U16_F
"Åicks (%"U16_F" msec).\n",

923 
m
, m * 
TCP_SLOW_INTERVAL
));

926 
m
 = m - (
pcb
->
ß
 >> 3);

927 
pcb
->
ß
 +
m
;

928 i‡(
m
 < 0) {

929 
m
 = -m;

931 
m
 = m - (
pcb
->
sv
 >> 2);

932 
pcb
->
sv
 +
m
;

933 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

935 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive: RTO %"
U16_F
" (%"U16_F" milliseconds)\n",

936 
pcb
->
πo
,Öcb->πÿ* 
TCP_SLOW_INTERVAL
));

938 
pcb
->
πã°
 = 0;

944 i‡(
t˝Àn
 > 0) {

975 i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
rcv_nxt
, 
£qno
 + 1, seqnÿ+ 
t˝Àn
 - 1)){

996 
off
 = 
pcb
->
rcv_nxt
 - 
£qno
;

997 
p
 = 
ö£g
.p;

998 
	`LWIP_ASSERT
("ö£g.∞!NULL", 
ö£g
.
p
);

999 
	`LWIP_ASSERT
("öß√ off£t!", (
off
 < 0x7fff));

1000 i‡(
ö£g
.
p
->
Àn
 < 
off
) {

1001 
	`LWIP_ASSERT
("pbu‡toÿsh‹t!", (((
s32_t
)
ö£g
.
p
->
tŸ_Àn
Ë>
off
));

1002 
√w_tŸ_Àn
 = (
u16_t
)(
ö£g
.
p
->
tŸ_Àn
 - 
off
);

1003 
p
->
Àn
 < 
off
) {

1004 
off
 -
p
->
Àn
;

1008 
p
->
tŸ_Àn
 = 
√w_tŸ_Àn
;

1009 
p
->
Àn
 = 0;

1010 
p
 =Ö->
√xt
;

1012 if(
	`pbuf_hódî
(
p
, (
s16_t
)-
off
)) {

1014 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1017 if(
	`pbuf_hódî
(
ö£g
.
p
, (
s16_t
)-
off
)) {

1019 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1024 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

1025 
ö£g
.
Àn
 -(
u16_t
)(
pcb
->
rcv_nxt
 - 
£qno
);

1026 
ö£g
.
t˝hdr
->
£qno
 = seqnÿ
pcb
->
rcv_nxt
;

1029 i‡(
	`TCP_SEQ_LT
(
£qno
, 
pcb
->
rcv_nxt
)){

1033 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: du∂iˇã seqnÿ%"
U32_F
"\n", 
£qno
));

1034 
	`t˝_ack_now
(
pcb
);

1041 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

1042 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 1)){

1043 i‡(
pcb
->
rcv_nxt
 =
£qno
) {

1044 
ac˚±ed_ö£q
 = 1;

1048 #i‡
TCP_QUEUE_OOSEQ


1049 i‡(
pcb
->
oo£q
 !
NULL
 &&

1050 
	`TCP_SEQ_LEQ
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqnÿ+ 
ö£g
.
Àn
)) {

1051 i‡(
pcb
->
oo£q
->
Àn
 > 0) {

1054 
ö£g
.
Àn
 = (
u16_t
)(
pcb
->
oo£q
->
t˝hdr
->
£qno
 - seqno);

1055 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1058 i‡((
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
)) ==

1059 (
	`TCPH_FLAGS
(
pcb
->
oo£q
->
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
))) {

1060 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1061 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1062 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1068 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1073 i‡(
pcb
->
°©e
 !
CLOSE_WAIT
) {

1074 
pcb
->
rcv_nxt
 +
t˝Àn
;

1078 i‡(
pcb
->
rcv_wnd
 < 
t˝Àn
) {

1079 
pcb
->
rcv_wnd
 = 0;

1081 
pcb
->
rcv_wnd
 -
t˝Àn
;

1084 i‡(
pcb
->
rcv_™n_wnd
 < 
t˝Àn
) {

1085 
pcb
->
rcv_™n_wnd
 = 0;

1087 
pcb
->
rcv_™n_wnd
 -
t˝Àn
;

1099 i‡(
ö£g
.
p
->
tŸ_Àn
 > 0) {

1100 
ªcv_d©a
 = 
ö£g
.
p
;

1104 
ö£g
.
p
 = 
NULL
;

1106 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1107 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive:Ñeceived FIN.\n"));

1108 
ªcv_Êags
 = 
TF_GOT_FIN
;

1111 #i‡
TCP_QUEUE_OOSEQ


1114 
pcb
->
oo£q
 !
NULL
 &&

1115 
pcb
->
oo£q
->
t˝hdr
->
£qno
 =pcb->
rcv_nxt
) {

1117 
c£g
 = 
pcb
->
oo£q
;

1118 
£qno
 = 
pcb
->
oo£q
->
t˝hdr
->seqno;

1120 
pcb
->
rcv_nxt
 +
	`TCP_TCPLEN
(
c£g
);

1121 i‡(
pcb
->
rcv_wnd
 < 
	`TCP_TCPLEN
(
c£g
)) {

1122 
pcb
->
rcv_wnd
 = 0;

1124 
pcb
->
rcv_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1126 i‡(
pcb
->
rcv_™n_wnd
 < 
	`TCP_TCPLEN
(
c£g
)) {

1127 
pcb
->
rcv_™n_wnd
 = 0;

1129 
pcb
->
rcv_™n_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1132 i‡(
c£g
->
p
->
tŸ_Àn
 > 0) {

1135 i‡(
ªcv_d©a
) {

1136 
	`pbuf_ˇt
(
ªcv_d©a
, 
c£g
->
p
);

1138 
ªcv_d©a
 = 
c£g
->
p
;

1140 
c£g
->
p
 = 
NULL
;

1142 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

1143 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive: dequeued FIN.\n"));

1144 
ªcv_Êags
 = 
TF_GOT_FIN
;

1145 i‡(
pcb
->
°©e
 =
ESTABLISHED
) {

1146 
pcb
->
°©e
 = 
CLOSE_WAIT
;

1151 
pcb
->
oo£q
 = 
c£g
->
√xt
;

1152 
	`t˝_£g_‰ì
(
c£g
);

1158 
	`t˝_ack
(
pcb
);

1162 
	`t˝_ack_now
(
pcb
);

1163 #i‡
TCP_QUEUE_OOSEQ


1165 i‡(
pcb
->
oo£q
 =
NULL
) {

1166 
pcb
->
oo£q
 = 
	`t˝_£g_c›y
(&
ö£g
);

1180 
¥ev
 = 
NULL
;

1181 
√xt
 = 
pcb
->
oo£q
;Çexà!
NULL
;Çext =Çext->next) {

1182 i‡(
£qno
 =
√xt
->
t˝hdr
->seqno) {

1187 i‡(
ö£g
.
Àn
 > 
√xt
->len) {

1191 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1192 i‡(
c£g
 !
NULL
) {

1193 
c£g
->
√xt
 =Çext->next;

1194 i‡(
¥ev
 !
NULL
) {

1195 
¥ev
->
√xt
 = 
c£g
;

1197 
pcb
->
oo£q
 = 
c£g
;

1199 
	`t˝_£g_‰ì
(
√xt
);

1200 i‡(
c£g
->
√xt
 !
NULL
) {

1201 
√xt
 = 
c£g
->next;

1202 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
c£g
->
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1204 
c£g
->
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1205 
	`pbuf_ªÆloc
(
c£g
->
p
, c£g->
Àn
);

1217 i‡(
¥ev
 =
NULL
) {

1218 i‡(
	`TCP_SEQ_LT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1224 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1226 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1227 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1229 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1230 i‡(
c£g
 !
NULL
) {

1231 
c£g
->
√xt
 =Çext;

1232 
pcb
->
oo£q
 = 
c£g
;

1239 if(
	`TCP_SEQ_BETWEEN
(
£qno
, 
¥ev
->
t˝hdr
->£qno+1, 
√xt
->tcphdr->seqno-1)){

1245 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1247 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1248 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1251 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1252 i‡(
c£g
 !
NULL
) {

1253 
c£g
->
√xt
 =Çext;

1254 
¥ev
->
√xt
 = 
c£g
;

1255 i‡(
	`TCP_SEQ_GT
(
¥ev
->
t˝hdr
->
£qno
 +Öªv->
Àn
, seqno)) {

1257 
¥ev
->
Àn
 = (
u16_t
)(
£qno
 -Öªv->
t˝hdr
->seqno);

1258 
	`pbuf_ªÆloc
(
¥ev
->
p
,Öªv->
Àn
);

1266 i‡(
√xt
->√xà=
NULL
 &&

1267 
	`TCP_SEQ_GT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1268 
√xt
->√xà
	`t˝_£g_c›y
(&
ö£g
);

1269 i‡(
√xt
->√xà!
NULL
) {

1270 i‡(
	`TCP_SEQ_GT
(
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
, seqno)) {

1272 
√xt
->
Àn
 = (
u16_t
)(
£qno
 -Çext->
t˝hdr
->seqno);

1273 
	`pbuf_ªÆloc
(
√xt
->
p
,Çext->
Àn
);

1279 
¥ev
 = 
√xt
;

1286 
	`t˝_ack_now
(
pcb
);

1293 if(!
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxà+Öcb->
rcv_wnd
-1)){

1294 
	`t˝_ack_now
(
pcb
);

1297  
ac˚±ed_ö£q
;

1298 
	}
}

1310 
	$t˝_∑r£›t
(
t˝_pcb
 *
pcb
)

1312 
u8_t
 
c
;

1313 
u8_t
 *
›ts
, 
›t
;

1314 
u16_t
 
mss
;

1316 
›ts
 = (
u8_t
 *)
t˝hdr
 + 
TCP_HLEN
;

1319 if(
	`TCPH_HDRLEN
(
t˝hdr
) > 0x5) {

1320 
c
 = 0; c < (
	`TCPH_HDRLEN
(
t˝hdr
) - 5) << 2 ;) {

1321 
›t
 = 
›ts
[
c
];

1322 i‡(
›t
 == 0x00) {

1325 } i‡(
›t
 == 0x01) {

1326 ++
c
;

1328 } i‡(
›t
 == 0x02 &&

1329 
›ts
[
c
 + 1] == 0x04) {

1331 
mss
 = (
›ts
[
c
 + 2] << 8) | opts[c + 3];

1333 
pcb
->
mss
 = ((ms†> 
TCP_MSS
) || (mss == 0)) ? TCP_MSS : mss;

1338 i‡(
›ts
[
c
 + 1] == 0) {

1345 
c
 +
›ts
[c + 1];

1349 
	}
}

	@net/lwip/core/tcp_out.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_TCP


46 
	~"lwù/t˝.h
"

47 
	~"lwù/def.h
"

48 
	~"lwù/mem.h
"

49 
	~"lwù/memp.h
"

50 
	~"lwù/sys.h
"

51 
	~"lwù/ù_addr.h
"

52 
	~"lwù/√tif.h
"

53 
	~"lwù/öë.h
"

54 
	~"lwù/öë_chksum.h
"

55 
	~"lwù/°©s.h
"

56 
	~"lwù/¢mp.h
"

58 
	~<°rög.h
>

61 
t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
);

70 
îr_t


71 
	$t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
)

74  
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
Êags
, 
TCP_WRITE_FLAG_COPY
, NULL, 0);

75 
	}
}

95 
îr_t


96 
	$t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
d©a
, 
u16_t
 
Àn
, 
u8_t
 
≠iÊags
)

98 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_wrôe’cb=%p, d©a=%p,Üí=%"
U16_F
",ápiÊags=%"U16_F")\n", (*)
pcb
,

99 
d©a
, 
Àn
, (
u16_t
)
≠iÊags
));

101 i‡(
pcb
->
°©e
 =
ESTABLISHED
 ||

102 
pcb
->
°©e
 =
CLOSE_WAIT
 ||

103 
pcb
->
°©e
 =
SYN_SENT
 ||

104 
pcb
->
°©e
 =
SYN_RCVD
) {

105 i‡(
Àn
 > 0) {

106  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
, 
NULL
, 0);

108  
ERR_OK
;

110 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_STATE
 | 3, ("tcp_write() called in invalid state\n"));

111  
ERR_CONN
;

113 
	}
}

130 
îr_t


131 
	$t˝_íqueue
(
t˝_pcb
 *
pcb
, *
¨g
, 
u16_t
 
Àn
,

132 
u8_t
 
Êags
, u8_à
≠iÊags
,

133 
u8_t
 *
›td©a
, u8_à
›éí
)

135 
pbuf
 *
p
;

136 
t˝_£g
 *
£g
, *
u£g
, *
queue
;

137 
u32_t
 
£qno
;

138 
u16_t
 
À·
, 
£gÀn
;

139 *
±r
;

140 
u16_t
 
queuñí
;

142 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_íqueue’cb=%p,árg=%p,Üí=%"
U16_F
", fœgs=%"
X16_F
",ápiflags=%"U16_F")\n",

143 (*)
pcb
, 
¨g
, 
Àn
, (
u16_t
)
Êags
, (u16_t)
≠iÊags
));

144 
	`LWIP_ERROR
("tcp_enqueue:Üen == 0 || optlen == 0 (programmer violates API)",

145 ((
Àn
 =0Ë|| (
›éí
 =0)),  
ERR_ARG
;);

146 
	`LWIP_ERROR
("tcp_enqueue:árg == NULL || optdata == NULL (programmer violates API)",

147 ((
¨g
 =
NULL
Ë|| (
›td©a
 =NULL)),  
ERR_ARG
;);

149 i‡(
Àn
 > 
pcb
->
¢d_buf
) {

150 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿmuch d©®÷í=%"
U16_F
" > snd_buf=%"U16_F")\n", 
Àn
, 
pcb
->
¢d_buf
));

151 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

152  
ERR_MEM
;

154 
À·
 = 
Àn
;

155 
±r
 = 
¨g
;

159 
£qno
 = 
pcb
->
¢d_lbb
;

161 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

165 
queuñí
 = 
pcb
->
¢d_queuñí
;

167 i‡((
queuñí
 >
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

168 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

169 
	`TCP_STATS_INC
(
t˝
.
memîr
);

170 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

171  
ERR_MEM
;

173 i‡(
queuñí
 != 0) {

174 
	`LWIP_ASSERT
("tcp_enqueue:Öbufs on queue =>átÜeast one queueÇon-empty",

175 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

177 
	`LWIP_ASSERT
("tcp_enqueue:ÇoÖbufs on queue => both queuesÉmpty",

178 
pcb
->
u«cked
 =
NULL
 &&Öcb->
un£¡
 == NULL);

183 
u£g
 = 
queue
 = 
£g
 = 
NULL
;

184 
£gÀn
 = 0;

185 
queue
 =
NULL
 || 
À·
 > 0) {

189 
£gÀn
 = 
À·
 > 
pcb
->
mss
?Öcb->mss:Üeft;

192 
£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

193 i‡(
£g
 =
NULL
) {

194 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue: couldÇotállocate memory forÅcp_seg\n"));

195 
memîr
;

197 
£g
->
√xt
 = 
NULL
;

198 
£g
->
p
 = 
NULL
;

201 i‡(
queue
 =
NULL
) {

202 
queue
 = 
£g
;

207 
	`LWIP_ASSERT
("u£g !NULL", 
u£g
 !
NULL
);

208 
u£g
->
√xt
 = 
£g
;

211 
u£g
 = 
£g
;

219 i‡(
›td©a
 !
NULL
) {

220 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

221 
memîr
;

223 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold optlen",

224 (
£g
->
p
->
Àn
 >
›éí
));

225 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

226 
£g
->
d©≠å
 = seg->
p
->
∑ylﬂd
;

229 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

230 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
, 
PBUF_RAM
)Ë=
NULL
) {

231 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_íqueuê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n", 
£gÀn
));

232 
memîr
;

234 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can holdÅhe complete seglen",

235 (
£g
->
p
->
Àn
 >
£gÀn
));

236 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

237 i‡(
¨g
 !
NULL
) {

238 
	`MEMCPY
(
£g
->
p
->
∑ylﬂd
, 
±r
, 
£gÀn
);

240 
£g
->
d©≠å
 = seg->
p
->
∑ylﬂd
;

249 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
, 
PBUF_ROM
)Ë=
NULL
) {

250 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue: couldÇotállocate memory for zero-copyÖbuf\n"));

251 
memîr
;

253 ++
queuñí
;

255 
p
->
∑ylﬂd
 = 
±r
;

256 
£g
->
d©≠å
 = 
±r
;

259 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_RAM
)Ë=
NULL
) {

262 
	`pbuf_‰ì
(
p
);

263 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue: couldÇotállocate memory for headerÖbuf\n"));

264 
memîr
;

266 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

269 
	`pbuf_ˇt
(
£g
->
p
 ,Ö );

270 
p
 = 
NULL
;

275 i‡((
queuñí
 > 
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

276 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_íqueue: queuêtoÿl⁄g %"
U16_F
" (%"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

277 
memîr
;

280 
£g
->
Àn
 = 
£gÀn
;

283 i‡(
	`pbuf_hódî
(
£g
->
p
, 
TCP_HLEN
)) {

284 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue:ÇoÑoom for TCP header inÖbuf.\n"));

285 
	`TCP_STATS_INC
(
t˝
.
îr
);

286 
memîr
;

288 
£g
->
t˝hdr
 = seg->
p
->
∑ylﬂd
;

289 
£g
->
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

290 
£g
->
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

291 
£g
->
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

292 
£g
->
t˝hdr
->
urgp
 = 0;

293 
	`TCPH_FLAGS_SET
(
£g
->
t˝hdr
, 
Êags
);

297 i‡(
›td©a
 =
NULL
) {

298 
	`TCPH_HDRLEN_SET
(
£g
->
t˝hdr
, 5);

301 
	`TCPH_HDRLEN_SET
(
£g
->
t˝hdr
, (5 + 
›éí
 / 4));

305 
	`SMEMCPY
(
£g
->
d©≠å
, 
›td©a
, 
›éí
);

307 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
, ("t˝_íqueue: queueög %"
U32_F
":%"U32_F" (0x%"
X16_F
")\n",

308 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

309 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg),

310 (
u16_t
)
Êags
));

312 
À·
 -
£gÀn
;

313 
£qno
 +
£gÀn
;

314 
±r
 = (*)((
u8_t
 *Ìå + 
£gÀn
);

320 i‡(
pcb
->
un£¡
 =
NULL
) {

321 
u£g
 = 
NULL
;

324 
u£g
 = 
pcb
->
un£¡
; u£g->
√xt
 !
NULL
; useg = useg->next);

330 i‡(
u£g
 !
NULL
 &&

331 
	`TCP_TCPLEN
(
u£g
) != 0 &&

332 !(
	`TCPH_FLAGS
(
u£g
->
t˝hdr
Ë& (
TCP_SYN
 | 
TCP_FIN
)) &&

333 !(
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) &&

335 
u£g
->
Àn
 + 
queue
->À¿<
pcb
->
mss
) {

337 if(
	`pbuf_hódî
(
queue
->
p
, -
TCP_HLEN
)) {

339 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

340 
	`TCP_STATS_INC
(
t˝
.
îr
);

341 
memîr
;

343 
	`pbuf_ˇt
(
u£g
->
p
, 
queue
->p);

344 
u£g
->
Àn
 +
queue
->len;

345 
u£g
->
√xt
 = 
queue
->next;

347 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: chaöög segmíts,ÇewÜí %"
U16_F
"\n", 
u£g
->
Àn
));

348 i‡(
£g
 =
queue
) {

349 
£g
 = 
NULL
;

351 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
queue
);

355 i‡(
u£g
 =
NULL
) {

357 
pcb
->
un£¡
 = 
queue
;

361 
u£g
->
√xt
 = 
queue
;

364 i‡((
Êags
 & 
TCP_SYN
Ë|| (Êag†& 
TCP_FIN
)) {

365 ++
Àn
;

367 i‡(
Êags
 & 
TCP_FIN
) {

368 
pcb
->
Êags
 |
TF_FIN
;

370 
pcb
->
¢d_lbb
 +
Àn
;

372 
pcb
->
¢d_buf
 -
Àn
;

375 
pcb
->
¢d_queuñí
 = 
queuñí
;

376 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: %"
S16_F
" (a·îÉnqueued)\n", 
pcb
->
¢d_queuñí
));

377 i‡(
pcb
->
¢d_queuñí
 != 0) {

378 
	`LWIP_ASSERT
("tcp_enqueue: valid queueÜength",

379 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

384 i‡(
£g
 !
NULL
 && 
£gÀn
 > 0 && seg->
t˝hdr
 !NULL && ((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
)==0)) {

385 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_PSH
);

388  
ERR_OK
;

389 
memîr
:

390 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

391 
	`TCP_STATS_INC
(
t˝
.
memîr
);

393 i‡(
queue
 !
NULL
) {

394 
	`t˝_£gs_‰ì
(
queue
);

396 i‡(
pcb
->
¢d_queuñí
 != 0) {

397 
	`LWIP_ASSERT
("t˝_íqueue: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

398 
pcb
->
un£¡
 !
NULL
);

400 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: %"
S16_F
" (wôh memÉº)\n", 
pcb
->
¢d_queuñí
));

401  
ERR_MEM
;

402 
	}
}

411 
îr_t


412 
	$t˝_ouçut
(
t˝_pcb
 *
pcb
)

414 
pbuf
 *
p
;

415 
t˝_hdr
 *
t˝hdr
;

416 
t˝_£g
 *
£g
, *
u£g
;

417 
u32_t
 
wnd
;

418 #i‡
TCP_CWND_DEBUG


419 
s16_t
 
i
 = 0;

426 i‡(
t˝_öput_pcb
 =
pcb
) {

427  
ERR_OK
;

430 
wnd
 = 
	`LWIP_MIN
(
pcb
->
¢d_wnd
,Öcb->
cwnd
);

432 
£g
 = 
pcb
->
un£¡
;

435 
u£g
 = 
pcb
->
u«cked
;

436 i‡(
u£g
 !
NULL
) {

437 ; 
u£g
->
√xt
 !
NULL
; useg = useg->next);

446 i‡(
pcb
->
Êags
 & 
TF_ACK_NOW
 &&

447 (
£g
 =
NULL
 ||

448 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 > 
wnd
)) {

449 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

450 i‡(
p
 =
NULL
) {

451 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output: (ACK) couldÇotállocateÖbuf\n"));

452  
ERR_BUF
;

454 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut: sídög ACK f‹ %"
U32_F
"\n", 
pcb
->
rcv_nxt
));

456 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

458 
t˝hdr
 = 
p
->
∑ylﬂd
;

459 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

460 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

461 
t˝hdr
->
£qno
 = 
	`ht⁄l
(
pcb
->
¢d_nxt
);

462 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

463 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_ACK
);

464 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

465 
t˝hdr
->
urgp
 = 0;

466 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

468 
t˝hdr
->
chksum
 = 0;

469 #i‡
CHECKSUM_GEN_TCP


470 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),

471 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

473 #i‡
LWIP_NETIF_HWADDRHINT


475 
√tif
 *netif;

476 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

477 if(
√tif
 !
NULL
){

478 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

479 
	`ù_ouçut_if
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

480 
pcb
->
tos
, 
IP_PROTO_TCP
, 
√tif
);

481 
√tif
->
addr_höt
 = 
NULL
;

485 
	`ù_ouçut
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

486 
IP_PROTO_TCP
);

488 
	`pbuf_‰ì
(
p
);

490  
ERR_OK
;

493 #i‡
TCP_OUTPUT_DEBUG


494 i‡(
£g
 =
NULL
) {

495 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output:ÇothingÅo send (%p)\n",

496 (*)
pcb
->
un£¡
));

499 #i‡
TCP_CWND_DEBUG


500 i‡(
£g
 =
NULL
) {

501 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F


502 ", cwnd %"
U16_F
", wnd %"
U32_F


503 ", seg =NULL,áck %"
U32_F
"\n",

504 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,Öcb->
œ°ack
));

506 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
,

507 ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F


508 ",Éffwnd %"
U32_F
", seq %"U32_F",áck %"U32_F"\n",

509 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

510 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
,

511 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
));

515 
£g
 !
NULL
 &&

516 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 <
wnd
) {

517 
	`LWIP_ASSERT
("RSTÇotÉxpected here!",

518 (
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_RST
) == 0);

526 if((
	`t˝_do_ouçut_«gÀ
(
pcb
) == 0) &&

527 ((
pcb
->
Êags
 & (
TF_NAGLEMEMERR
 | 
TF_FIN
)) == 0)){

530 #i‡
TCP_CWND_DEBUG


531 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F
",Éffwnd %"U32_F", seq %"U32_F",áck %"U32_F", i %"
S16_F
"\n",

532 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

533 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ seg->
Àn
 -

534 
pcb
->
œ°ack
,

535 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
, 
i
));

536 ++
i
;

539 
pcb
->
un£¡
 = 
£g
->
√xt
;

541 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

542 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_ACK
);

543 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

546 
	`t˝_ouçut_£gmít
(
£g
, 
pcb
);

547 
pcb
->
¢d_nxt
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg);

548 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_max
,Öcb->
¢d_nxt
)) {

549 
pcb
->
¢d_max
 =Öcb->
¢d_nxt
;

552 i‡(
	`TCP_TCPLEN
(
£g
) > 0) {

553 
£g
->
√xt
 = 
NULL
;

555 i‡(
pcb
->
u«cked
 =
NULL
) {

556 
pcb
->
u«cked
 = 
£g
;

557 
u£g
 = 
£g
;

563 i‡(
	`TCP_SEQ_LT
(
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),Çtohl(
u£g
->tcphdr->seqno))){

565 
£g
->
√xt
 = 
pcb
->
u«cked
;

566 
pcb
->
u«cked
 = 
£g
;

569 
u£g
->
√xt
 = 
£g
;

570 
u£g
 = u£g->
√xt
;

575 
	`t˝_£g_‰ì
(
£g
);

577 
£g
 = 
pcb
->
un£¡
;

580 i‡(
£g
 !
NULL
 && 
pcb
->
≥rsi°_backoff
 == 0 &&

581 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 >Öcb->
¢d_wnd
) {

583 
pcb
->
≥rsi°_˙t
 = 0;

584 
pcb
->
≥rsi°_backoff
 = 1;

587 
pcb
->
Êags
 &~
TF_NAGLEMEMERR
;

588  
ERR_OK
;

589 
	}
}

598 
	$t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
)

600 
u16_t
 
Àn
;

601 
√tif
 *netif;

604 
	`¢mp_öc_t˝out£gs
();

608 
£g
->
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

611 
£g
->
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

615 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

616 
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
));

617 i‡(
√tif
 =
NULL
) {

620 
	`ù_addr_£t
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
));

624 if(
pcb
->
πime
 == -1)

625 
pcb
->
πime
 = 0;

627 i‡(
pcb
->
πã°
 == 0) {

628 
pcb
->
πã°
 = 
t˝_ticks
;

629 
pcb
->
π£q
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
);

631 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ouçut_£gmít:Ñt£q %"
U32_F
"\n", 
pcb
->
π£q
));

633 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut_£gmít: %"
U32_F
":%"U32_F"\n",

634 
	`ht⁄l
(
£g
->
t˝hdr
->
£qno
), htonl(seg->tcphdr->seqno) +

635 
£g
->
Àn
));

637 
Àn
 = (
u16_t
)((
u8_t
 *)
£g
->
t˝hdr
 - (u8_à*)£g->
p
->
∑ylﬂd
);

639 
£g
->
p
->
Àn
 -=Üen;

640 
£g
->
p
->
tŸ_Àn
 -
Àn
;

642 
£g
->
p
->
∑ylﬂd
 = seg->
t˝hdr
;

644 
£g
->
t˝hdr
->
chksum
 = 0;

645 #i‡
CHECKSUM_GEN_TCP


646 
£g
->
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(£g->
p
,

647 &(
pcb
->
loˇl_ù
),

648 &(
pcb
->
ªmŸe_ù
),

649 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

651 
	`TCP_STATS_INC
(
t˝
.
xmô
);

653 #i‡
LWIP_NETIF_HWADDRHINT


655 
√tif
 *netif;

656 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

657 if(
√tif
 !
NULL
){

658 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

659 
	`ù_ouçut_if
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

660 
pcb
->
tos
, 
IP_PROTO_TCP
, 
√tif
);

661 
√tif
->
addr_höt
 = 
NULL
;

665 
	`ù_ouçut
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

666 
IP_PROTO_TCP
);

668 
	}
}

691 
	$t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

692 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

693 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

695 
pbuf
 *
p
;

696 
t˝_hdr
 *
t˝hdr
;

697 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

698 i‡(
p
 =
NULL
) {

699 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_rst: couldÇotállocate memory forÖbuf\n"));

702 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

703 (
p
->
Àn
 >(
t˝_hdr
)));

705 
t˝hdr
 = 
p
->
∑ylﬂd
;

706 
t˝hdr
->
§c
 = 
	`ht⁄s
(
loˇl_p‹t
);

707 
t˝hdr
->
de°
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

708 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

709 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

710 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_RST
 | 
TCP_ACK
);

711 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
TCP_WND
);

712 
t˝hdr
->
urgp
 = 0;

713 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

715 
t˝hdr
->
chksum
 = 0;

716 #i‡
CHECKSUM_GEN_TCP


717 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
loˇl_ù
, 
ªmŸe_ù
,

718 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

720 
	`TCP_STATS_INC
(
t˝
.
xmô
);

721 
	`¢mp_öc_t˝ouå°s
();

723 
	`ù_ouçut
(
p
, 
loˇl_ù
, 
ªmŸe_ù
, 
TCP_TTL
, 0, 
IP_PROTO_TCP
);

724 
	`pbuf_‰ì
(
p
);

725 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("t˝_r°: seqnÿ%"
U32_F
"ácknÿ%"U32_F".\n", 
£qno
, 
ackno
));

726 
	}
}

736 
	$t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
)

738 
t˝_£g
 *
£g
;

740 i‡(
pcb
->
u«cked
 =
NULL
) {

745 
£g
 = 
pcb
->
u«cked
; seg->
√xt
 !
NULL
; seg = seg->next);

747 
£g
->
√xt
 = 
pcb
->
un£¡
;

749 
pcb
->
un£¡
 =Öcb->
u«cked
;

751 
pcb
->
u«cked
 = 
NULL
;

753 
pcb
->
¢d_nxt
 = 
	`¡ohl
’cb->
un£¡
->
t˝hdr
->
£qno
);

755 ++
pcb
->
ƒtx
;

758 
pcb
->
πã°
 = 0;

761 
	`t˝_ouçut
(
pcb
);

762 
	}
}

772 
	$t˝_ªxmô
(
t˝_pcb
 *
pcb
)

774 
t˝_£g
 *
£g
;

776 i‡(
pcb
->
u«cked
 =
NULL
) {

781 
£g
 = 
pcb
->
u«cked
->
√xt
;

782 
pcb
->
u«cked
->
√xt
 =Öcb->
un£¡
;

783 
pcb
->
un£¡
 =Öcb->
u«cked
;

784 
pcb
->
u«cked
 = 
£g
;

786 
pcb
->
¢d_nxt
 = 
	`¡ohl
’cb->
un£¡
->
t˝hdr
->
£qno
);

788 ++
pcb
->
ƒtx
;

791 
pcb
->
πã°
 = 0;

794 
	`¢mp_öc_t˝ªå™s£gs
();

795 
	`t˝_ouçut
(
pcb
);

796 
	}
}

807 
	$t˝_kì∑live
(
t˝_pcb
 *
pcb
)

809 
pbuf
 *
p
;

810 
t˝_hdr
 *
t˝hdr
;

812 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: sídög KEEPALIVEÖrobêtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

813 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

814 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

816 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live:Å˝_tick†%"
U32_F
"Öcb->tm∏%"U32_F"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

817 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

819 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

821 if(
p
 =
NULL
) {

822 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

826 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

827 (
p
->
Àn
 >(
t˝_hdr
)));

829 
t˝hdr
 = 
p
->
∑ylﬂd
;

830 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

831 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

832 
t˝hdr
->
£qno
 = 
	`ht⁄l
(
pcb
->
¢d_nxt
 - 1);

833 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

834 
	`TCPH_FLAGS_SET
(
t˝hdr
, 0);

835 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

836 
t˝hdr
->
urgp
 = 0;

837 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

839 
t˝hdr
->
chksum
 = 0;

840 #i‡
CHECKSUM_GEN_TCP


841 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

842 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

844 
	`TCP_STATS_INC
(
t˝
.
xmô
);

847 #i‡
LWIP_NETIF_HWADDRHINT


849 
√tif
 *netif;

850 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

851 if(
√tif
 !
NULL
){

852 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

853 
	`ù_ouçut_if
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

854 0, 
IP_PROTO_TCP
, 
√tif
);

855 
√tif
->
addr_höt
 = 
NULL
;

859 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

862 
	`pbuf_‰ì
(
p
);

864 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: seqnÿ%"
U32_F
"áckno %"U32_F".\n",

865 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

866 
	}
}

878 
	$t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
)

880 
pbuf
 *
p
;

881 
t˝_hdr
 *
t˝hdr
;

882 
t˝_£g
 *
£g
;

884 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

886 
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

887 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

888 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

890 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

891 ("t˝_zîo_wödow_¥obe:Å˝_tick†%"
U32_F


892 "Öcb->tm∏%"
U32_F
"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

893 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

895 
£g
 = 
pcb
->
u«cked
;

897 if(
£g
 =
NULL
)

898 
£g
 = 
pcb
->
un£¡
;

900 if(
£g
 =
NULL
)

903 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 1, 
PBUF_RAM
);

905 if(
p
 =
NULL
) {

906 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_zero_window_probe:Ço memory forÖbuf\n"));

909 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

910 (
p
->
Àn
 >(
t˝_hdr
)));

912 
t˝hdr
 = 
p
->
∑ylﬂd
;

913 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

914 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

915 
t˝hdr
->
£qno
 = 
£g
->tcphdr->seqno;

916 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

917 
	`TCPH_FLAGS_SET
(
t˝hdr
, 0);

918 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

919 
t˝hdr
->
urgp
 = 0;

920 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

923 *((*)
p
->
∑ylﬂd
 + (
t˝_hdr
)Ë*(*)
£g
->
d©≠å
;

925 
t˝hdr
->
chksum
 = 0;

926 #i‡
CHECKSUM_GEN_TCP


927 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

928 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

930 
	`TCP_STATS_INC
(
t˝
.
xmô
);

933 #i‡
LWIP_NETIF_HWADDRHINT


935 
√tif
 *netif;

936 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

937 if(
√tif
 !
NULL
){

938 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

939 
	`ù_ouçut_if
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

940 0, 
IP_PROTO_TCP
, 
√tif
);

941 
√tif
->
addr_höt
 = 
NULL
;

945 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

948 
	`pbuf_‰ì
(
p
);

950 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_zîo_wödow_¥obe: seqnÿ%"
U32_F


951 "ácknÿ%"
U32_F
".\n",

952 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

953 
	}
}

	@net/lwip/core/udp.c

50 
	~"lwù/›t.h
"

52 #i‡
LWIP_UDP


54 
	~"lwù/udp.h
"

55 
	~"lwù/def.h
"

56 
	~"lwù/memp.h
"

57 
	~"lwù/öë.h
"

58 
	~"lwù/öë_chksum.h
"

59 
	~"lwù/ù_addr.h
"

60 
	~"lwù/√tif.h
"

61 
	~"lwù/icmp.h
"

62 
	~"lwù/°©s.h
"

63 
	~"lwù/¢mp.h
"

64 
	~"¨ch/≥rf.h
"

65 
	~"lwù/dh˝.h
"

67 
	~<°rög.h
>

71 
udp_pcb
 *
	gudp_pcbs
;

86 
	$udp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

88 
udp_hdr
 *
udphdr
;

89 
udp_pcb
 *
pcb
, *
¥ev
;

90 
udp_pcb
 *
unc⁄_pcb
;

91 
ù_hdr
 *
ùhdr
;

92 
u16_t
 
§c
, 
de°
;

93 
u8_t
 
loˇl_m©ch
;

95 
PERF_START
;

97 
	`UDP_STATS_INC
(
udp
.
ªcv
);

99 
ùhdr
 = 
p
->
∑ylﬂd
;

103 i‡(
p
->
tŸ_Àn
 < (
	`IPH_HL
(
ùhdr
Ë* 4 + 
UDP_HLEN
Ë|| 
	`pbuf_hódî
’, -(
s16_t
)(IPH_HL(iphdr) * 4))) {

105 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

106 ("udp_öput: sh‹àUDP d©agøm (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

107 
	`UDP_STATS_INC
(
udp
.
À√º
);

108 
	`UDP_STATS_INC
(
udp
.
dr›
);

109 
	`¢mp_öc_udpöîr‹s
();

110 
	`pbuf_‰ì
(
p
);

111 
íd
;

114 
udphdr
 = (
udp_hdr
 *)
p
->
∑ylﬂd
;

116 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_öput:Ñe˚ived d©agøm o‡Àngth %"
U16_F
"\n", 
p
->
tŸ_Àn
));

119 
§c
 = 
	`¡ohs
(
udphdr
->src);

120 
de°
 = 
	`¡ohs
(
udphdr
->dest);

122 
	`udp_debug_¥öt
(
udphdr
);

125 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

126 ("ud∞(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "

127 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

128 
	`ù4_addr1
(&
ùhdr
->
de°
), 
	`ù4_addr2
(&iphdr->dest),

129 
	`ù4_addr3
(&
ùhdr
->
de°
), 
	`ù4_addr4
(&ùhdr->de°), 
	`¡ohs
(
udphdr
->dest),

130 
	`ù4_addr1
(&
ùhdr
->
§c
), 
	`ù4_addr2
(&iphdr->src),

131 
	`ù4_addr3
(&
ùhdr
->
§c
), 
	`ù4_addr4
(&ùhdr->§c), 
	`¡ohs
(
udphdr
->src)));

133 #i‡
LWIP_DHCP


134 
pcb
 = 
NULL
;

137 i‡(
de°
 =
DHCP_CLIENT_PORT
) {

139 i‡(
§c
 =
DHCP_SERVER_PORT
) {

140 i‡((
öp
->
dh˝
 !
NULL
Ë&& (öp->dh˝->
pcb
 != NULL)) {

144 i‡((
	`ù_addr_ißny
(&
öp
->
dh˝
->
pcb
->
ªmŸe_ù
) ||

145 
	`ù_addr_cmp
(&(
öp
->
dh˝
->
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

146 
pcb
 = 
öp
->
dh˝
->pcb;

153 
¥ev
 = 
NULL
;

154 
loˇl_m©ch
 = 0;

155 
unc⁄_pcb
 = 
NULL
;

160 
pcb
 = 
udp_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

161 
loˇl_m©ch
 = 0;

163 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

164 ("pcb (%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "

165 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

166 
	`ù4_addr1
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2
(&pcb->local_ip),

167 
	`ù4_addr3
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4
(&pcb->loˇl_ù),Öcb->
loˇl_p‹t
,

168 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

169 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->ªmŸe_ù),Öcb->
ªmŸe_p‹t
));

172 i‡((
pcb
->
loˇl_p‹t
 =
de°
) &&

173 (
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
) ||

174 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
)) ||

175 #i‡
LWIP_IGMP


176 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
)) ||

178 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
))) {

179 
loˇl_m©ch
 = 1;

180 i‡((
unc⁄_pcb
 =
NULL
) &&

181 ((
pcb
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0)) {

183 
unc⁄_pcb
 = 
pcb
;

187 i‡((
loˇl_m©ch
 != 0) &&

188 (
pcb
->
ªmŸe_p‹t
 =
§c
) &&

189 (
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
) ||

190 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

192 i‡(
¥ev
 !
NULL
) {

195 
¥ev
->
√xt
 = 
pcb
->next;

196 
pcb
->
√xt
 = 
udp_pcbs
;

197 
udp_pcbs
 = 
pcb
;

199 
	`UDP_STATS_INC
(
udp
.
ˇchehô
);

203 
¥ev
 = 
pcb
;

206 i‡(
pcb
 =
NULL
) {

207 
pcb
 = 
unc⁄_pcb
;

212 i‡(
pcb
 !
NULL
 || 
	`ù_addr_cmp
(&
öp
->
ù_addr
, &
ùhdr
->
de°
)) {

213 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input: calculating checksum\n"));

214 #i‡
LWIP_UDPLITE


215 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDPLITE
) {

217 #i‡
CHECKSUM_CHECK_UDP


218 
u16_t
 
chkÀn
 = 
	`¡ohs
(
udphdr
->
Àn
);

219 i‡(
chkÀn
 < (
udp_hdr
)) {

220 i‡(
chkÀn
 == 0) {

223 
chkÀn
 = 
p
->
tŸ_Àn
;

227 
	`UDP_STATS_INC
(
udp
.
chkîr
);

228 
	`UDP_STATS_INC
(
udp
.
dr›
);

229 
	`¢mp_öc_udpöîr‹s
();

230 
	`pbuf_‰ì
(
p
);

231 
íd
;

234 i‡(
	`öë_chksum_p£udo_∑πül
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

235 (
ù_addr
 *)&(
ùhdr
->
de°
),

236 
IP_PROTO_UDPLITE
, 
p
->
tŸ_Àn
, 
chkÀn
) != 0) {

237 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

239 
	`UDP_STATS_INC
(
udp
.
chkîr
);

240 
	`UDP_STATS_INC
(
udp
.
dr›
);

241 
	`¢mp_öc_udpöîr‹s
();

242 
	`pbuf_‰ì
(
p
);

243 
íd
;

249 #i‡
CHECKSUM_CHECK_UDP


250 i‡(
udphdr
->
chksum
 != 0) {

251 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

252 (
ù_addr
 *)&(
ùhdr
->
de°
),

253 
IP_PROTO_UDP
, 
p
->
tŸ_Àn
) != 0) {

254 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

256 
	`UDP_STATS_INC
(
udp
.
chkîr
);

257 
	`UDP_STATS_INC
(
udp
.
dr›
);

258 
	`¢mp_öc_udpöîr‹s
();

259 
	`pbuf_‰ì
(
p
);

260 
íd
;

265 if(
	`pbuf_hódî
(
p
, -
UDP_HLEN
)) {

267 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

268 
	`UDP_STATS_INC
(
udp
.
dr›
);

269 
	`¢mp_öc_udpöîr‹s
();

270 
	`pbuf_‰ì
(
p
);

271 
íd
;

273 i‡(
pcb
 !
NULL
) {

274 
	`¢mp_öc_udpöd©agøms
();

276 i‡(
pcb
->
ªcv
 !
NULL
) {

278 
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
), src);

281 
	`pbuf_‰ì
(
p
);

282 
íd
;

285 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input:Çot for us.\n"));

287 #i‡
LWIP_ICMP


290 i‡(!
	`ù_addr_isbrﬂdˇ°
(&
ùhdr
->
de°
, 
öp
) &&

291 !
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

293 
	`pbuf_hódî
(
p
, (
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
);

294 
	`LWIP_ASSERT
("p->∑ylﬂd =ùhdr", (
p
->
∑ylﬂd
 =
ùhdr
));

295 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PORT
);

298 
	`UDP_STATS_INC
(
udp
.
¥Ÿîr
);

299 
	`UDP_STATS_INC
(
udp
.
dr›
);

300 
	`¢mp_öc_ud≤›‹ts
();

301 
	`pbuf_‰ì
(
p
);

304 
	`pbuf_‰ì
(
p
);

306 
íd
:

307 
	`PERF_STOP
("udp_input");

308 
	}
}

328 
îr_t


329 
	$udp_£nd
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
)

332  
	`udp_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
,Öcb->
ªmŸe_p‹t
);

333 
	}
}

352 
îr_t


353 
	$udp_£ndto
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

354 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
)

356 
√tif
 *netif;

358 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_send\n"));

361 #i‡
LWIP_IGMP


362 
√tif
 = 
	`ù_rouã
((
	`ù_addr_ismu…iˇ°
(
d°_ù
))?(&(
pcb
->
mu…iˇ°_ù
)):(dst_ip));

364 
√tif
 = 
	`ù_rouã
(
d°_ù
);

368 i‡(
√tif
 =
NULL
) {

369 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£nd: NÿrouãÅÿ0x%"
X32_F
"\n", 
d°_ù
->
addr
));

370 
	`UDP_STATS_INC
(
udp
.
πîr
);

371  
ERR_RTE
;

373  
	`udp_£ndto_if
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
);

374 
	}
}

395 
îr_t


396 
	$udp_£ndto_if
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

397 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif)

399 
udp_hdr
 *
udphdr
;

400 
ù_addr
 *
§c_ù
;

401 
îr_t
 
îr
;

402 
pbuf
 *
q
;

405 i‡(
pcb
->
loˇl_p‹t
 == 0) {

406 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send:Çot yet boundÅoáÖort, bindingÇow\n"));

407 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

408 i‡(
îr
 !
ERR_OK
) {

409 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: forcedÖort bind failed\n"));

410  
îr
;

415 i‡(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)) {

417 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
UDP_HLEN
, 
PBUF_RAM
);

419 i‡(
q
 =
NULL
) {

420 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: couldÇotállocate header\n"));

421  
ERR_MEM
;

424 
	`pbuf_chaö
(
q
, 
p
);

426 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

427 ("udp_£nd:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

431 
q
 = 
p
;

432 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd:ádded hódî i¿givíÖbu‡%p\n", (*)
p
));

434 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct udp_hdr",

435 (
q
->
Àn
 >(
udp_hdr
)));

437 
udphdr
 = 
q
->
∑ylﬂd
;

438 
udphdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

439 
udphdr
->
de°
 = 
	`ht⁄s
(
d°_p‹t
);

441 
udphdr
->
chksum
 = 0x0000;

444 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

446 
§c_ù
 = &(
√tif
->
ù_addr
);

450 i‡(!
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

452 i‡(
q
 !
p
) {

454 
	`pbuf_‰ì
(
q
);

455 
q
 = 
NULL
;

458  
ERR_VAL
;

461 
§c_ù
 = &(
pcb
->
loˇl_ù
);

464 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: sídög d©agøm o‡Àngth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

466 #i‡
LWIP_UDPLITE


468 i‡(
pcb
->
Êags
 & 
UDP_FLAGS_UDPLITE
) {

469 
u16_t
 
chkÀn
, 
chkÀn_hdr
;

470 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

472 
chkÀn_hdr
 = 
chkÀn
 = 
pcb
->
chksum_Àn_tx
;

473 i‡((
chkÀn
 < (
udp_hdr
)Ë|| (chkÀ¿> 
q
->
tŸ_Àn
)) {

474 i‡(
chkÀn
 != 0) {

475 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖcb->chksum_À¿i†ûÀgÆ: %"
U16_F
"\n", 
chkÀn
));

483 
chkÀn_hdr
 = 0;

484 
chkÀn
 = 
q
->
tŸ_Àn
;

486 
udphdr
->
Àn
 = 
	`ht⁄s
(
chkÀn_hdr
);

488 #i‡
CHECKSUM_GEN_UDP


489 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo_∑πül
(
q
, 
§c_ù
, 
d°_ù
,

490 
IP_PROTO_UDPLITE
, 
q
->
tŸ_Àn
, 
chkÀn
);

492 i‡(
udphdr
->
chksum
 == 0x0000)

493 
udphdr
->
chksum
 = 0xffff;

496 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));

497 #i‡
LWIP_NETIF_HWADDRHINT


498 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

500 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDPLITE
, 
√tif
);

501 #i‡
LWIP_NETIF_HWADDRHINT


502 
√tif
->
addr_höt
 = 
NULL
;

507 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDPÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

508 
udphdr
->
Àn
 = 
	`ht⁄s
(
q
->
tŸ_Àn
);

510 #i‡
CHECKSUM_GEN_UDP


511 i‡((
pcb
->
Êags
 & 
UDP_FLAGS_NOCHKSUM
) == 0) {

512 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo
(
q
, 
§c_ù
, 
d°_ù
, 
IP_PROTO_UDP
, q->
tŸ_Àn
);

514 i‡(
udphdr
->
chksum
 == 0x0000) udphdr->chksum = 0xffff;

517 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP checksum 0x%04"
X16_F
"\n", 
udphdr
->
chksum
));

518 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));

520 #i‡
LWIP_NETIF_HWADDRHINT


521 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

523 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDP
, 
√tif
);

524 #i‡
LWIP_NETIF_HWADDRHINT


525 
√tif
->
addr_höt
 = 
NULL
;

529 
	`¢mp_öc_udpoutd©agøms
();

532 i‡(
q
 !
p
) {

534 
	`pbuf_‰ì
(
q
);

535 
q
 = 
NULL
;

539 
	`UDP_STATS_INC
(
udp
.
xmô
);

540  
îr
;

541 
	}
}

562 
îr_t


563 
	$udp_böd
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

565 
udp_pcb
 *
ùcb
;

566 
u8_t
 
ªböd
;

568 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_bind(ipaddr = "));

569 
	`ù_addr_debug_¥öt
(
UDP_DEBUG
, 
ùaddr
);

570 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, (",Ö‹à%"
U16_F
")\n", 
p‹t
));

572 
ªböd
 = 0;

574 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

576 i‡(
pcb
 =
ùcb
) {

578 
	`LWIP_ASSERT
("ªböd =0", 
ªböd
 == 0);

580 
ªböd
 = 1;

587 #ifde‡
LWIP_UDP_TODO


590 i‡((
ùcb
->
loˇl_p‹t
 =
p‹t
) &&

592 (
	`ù_addr_ißny
(&(
ùcb
->
loˇl_ù
)) ||

593 
	`ù_addr_ißny
(
ùaddr
) ||

594 
	`ù_addr_cmp
(&(
ùcb
->
loˇl_ù
), 
ùaddr
))) {

596 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

597 ("udp_böd:Üoˇ»p‹à%"
U16_F
"áÃódy bound byánŸhîÖcb\n", 
p‹t
));

598  
ERR_USE
;

603 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

606 i‡(
p‹t
 == 0) {

607 #i‚de‡
UDP_LOCAL_PORT_RANGE_START


608 
	#UDP_LOCAL_PORT_RANGE_START
 4096

	)

609 
	#UDP_LOCAL_PORT_RANGE_END
 0x7fff

	)

611 
p‹t
 = 
UDP_LOCAL_PORT_RANGE_START
;

612 
ùcb
 = 
udp_pcbs
;

613 (
ùcb
 !
NULL
Ë&& (
p‹t
 !
UDP_LOCAL_PORT_RANGE_END
)) {

614 i‡(
ùcb
->
loˇl_p‹t
 =
p‹t
) {

616 
p‹t
++;

618 
ùcb
 = 
udp_pcbs
;

621 
ùcb
 = ipcb->
√xt
;

623 i‡(
ùcb
 !
NULL
) {

625 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_bind: out of free UDPÖorts\n"));

626  
ERR_USE
;

629 
pcb
->
loˇl_p‹t
 = 
p‹t
;

630 
	`¢mp_ö£π_udpidx_åì
(
pcb
);

632 i‡(
ªböd
 == 0) {

634 
pcb
->
√xt
 = 
udp_pcbs
;

635 
udp_pcbs
 = 
pcb
;

637 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

638 ("udp_böd: boundÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",Öort %"U16_F"\n",

639 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 24 & 0xff),

640 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 16 & 0xff),

641 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 8 & 0xff),

642 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
Ë& 0xff),Öcb->
loˇl_p‹t
));

643  
ERR_OK
;

644 
	}
}

662 
îr_t


663 
	$udp_c⁄√˘
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

665 
udp_pcb
 *
ùcb
;

667 i‡(
pcb
->
loˇl_p‹t
 == 0) {

668 
îr_t
 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

669 i‡(
îr
 !
ERR_OK
)

670  
îr
;

673 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

674 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

675 
pcb
->
Êags
 |
UDP_FLAGS_CONNECTED
;

677 #ifde‡
LWIP_UDP_TODO


679 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
Ë&& !ù_addr_ißny(&pcb->
ªmŸe_ù
)) {

680 
√tif
 *netif;

682 i‡((
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
))Ë=
NULL
) {

683 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_c⁄√˘: NÿrouãÅÿ0x%lx\n", 
pcb
->
ªmŸe_ù
.
addr
));

684 
	`UDP_STATS_INC
(
udp
.
πîr
);

685  
ERR_RTE
;

690 
pcb
->
loˇl_ù
 = 
√tif
->
ù_addr
;

691 } i‡(
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
)) {

692 
pcb
->
loˇl_ù
.
addr
 = 0;

695 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

696 ("udp_c⁄√˘: c⁄√˘edÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",

697 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 24 & 0xff),

698 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 16 & 0xff),

699 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 8 & 0xff),

700 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
Ë& 0xff),Öcb->
ªmŸe_p‹t
));

703 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

704 i‡(
pcb
 =
ùcb
) {

706  
ERR_OK
;

710 
pcb
->
√xt
 = 
udp_pcbs
;

711 
udp_pcbs
 = 
pcb
;

712  
ERR_OK
;

713 
	}
}

721 
	$udp_disc⁄√˘
(
udp_pcb
 *
pcb
)

724 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
IP_ADDR_ANY
);

725 
pcb
->
ªmŸe_p‹t
 = 0;

727 
pcb
->
Êags
 &~
UDP_FLAGS_CONNECTED
;

728 
	}
}

740 
udp_ªcv
(
udp_pcb
 *
pcb
,

741 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
, 
pbuf
 *
p
,

742 
ù_addr
 *
addr
, 
u16_t
 
p‹t
),

743 *
ªcv_¨g
)

746 
pcb
->
ªcv
 =Ñecv;

747 
pcb
->
ªcv_¨g
 =Ñecv_arg;

748 
	}
}

759 
	$udp_ªmove
(
udp_pcb
 *
pcb
)

761 
udp_pcb
 *
pcb2
;

763 
	`¢mp_dñëe_udpidx_åì
(
pcb
);

765 i‡(
udp_pcbs
 =
pcb
) {

767 
udp_pcbs
 = udp_pcbs->
√xt
;

770 
pcb2
 = 
udp_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

772 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

774 
pcb2
->
√xt
 = 
pcb
->next;

777 
	`memp_‰ì
(
MEMP_UDP_PCB
, 
pcb
);

778 
	}
}

788 
udp_pcb
 *

789 
	$udp_√w
()

791 
udp_pcb
 *
pcb
;

792 
pcb
 = 
	`memp_mÆloc
(
MEMP_UDP_PCB
);

794 i‡(
pcb
 !
NULL
) {

799 
	`mem£t
(
pcb
, 0, (
udp_pcb
));

800 
pcb
->
âl
 = 
UDP_TTL
;

802  
pcb
;

803 
	}
}

805 #i‡
UDP_DEBUG


812 
	$udp_debug_¥öt
(
udp_hdr
 *
udphdr
)

814 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("UDP header:\n"));

815 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

816 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

817 
	`¡ohs
(
udphdr
->
§c
),Çtohs(udphdr->
de°
)));

818 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

819 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | 0x%04"
X16_F
" | (len, chksum)\n",

820 
	`¡ohs
(
udphdr
->
Àn
),Çtohs(udphdr->
chksum
)));

821 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

822 
	}
}

	@net/lwip/include/ipv4/lwip/autoip.h

45 #i‚de‡
__LWIP_AUTOIP_H__


46 
	#__LWIP_AUTOIP_H__


	)

48 
	~"lwù/›t.h
"

50 #i‡
LWIP_AUTOIP


52 
	~"lwù/√tif.h
"

53 
	~"lwù/udp.h
"

54 
	~"√tif/ëh¨p.h
"

57 
	#AUTOIP_TMR_INTERVAL
 100

	)

58 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

61 
	#PROBE_WAIT
 1

	)

62 
	#PROBE_MIN
 1

	)

63 
	#PROBE_MAX
 2

	)

64 
	#PROBE_NUM
 3

	)

65 
	#ANNOUNCE_NUM
 2

	)

66 
	#ANNOUNCE_INTERVAL
 2

	)

67 
	#ANNOUNCE_WAIT
 2

	)

68 
	#MAX_CONFLICTS
 10

	)

69 
	#RATE_LIMIT_INTERVAL
 60

	)

70 
	#DEFEND_INTERVAL
 10

	)

73 
	#AUTOIP_STATE_OFF
 0

	)

74 
	#AUTOIP_STATE_PROBING
 1

	)

75 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

76 
	#AUTOIP_STATE_BOUND
 3

	)

78 
	sautoù


80 
ù_addr
 
	mŒùaddr
;

81 
u8_t
 
	m°©e
;

82 
u8_t
 
	m£¡_num
;

83 
u16_t
 
	mâw
;

84 
u8_t
 
	mœ°c⁄Êi˘
;

85 
u8_t
 
	måõd_Œùaddr
;

90 
autoù_öô
();

93 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

96 
îr_t
 
autoù_°›
(
√tif
 *netif);

99 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

102 
autoù_tmr
();

	@net/lwip/include/ipv4/lwip/icmp.h

33 #i‚de‡
__LWIP_ICMP_H__


34 
	#__LWIP_ICMP_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_ICMP


40 
	~"lwù/pbuf.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/√tif.h
"

44 #ifde‡
__˝lu•lus


48 
	#ICMP_ER
 0

	)

49 
	#ICMP_DUR
 3

	)

50 
	#ICMP_SQ
 4

	)

51 
	#ICMP_RD
 5

	)

52 
	#ICMP_ECHO
 8

	)

53 
	#ICMP_TE
 11

	)

54 
	#ICMP_PP
 12

	)

55 
	#ICMP_TS
 13

	)

56 
	#ICMP_TSR
 14

	)

57 
	#ICMP_IRQ
 15

	)

58 
	#ICMP_IR
 16

	)

60 
	eicmp_dur_ty≥
 {

61 
ICMP_DUR_NET
 = 0,

62 
ICMP_DUR_HOST
 = 1,

63 
ICMP_DUR_PROTO
 = 2,

64 
ICMP_DUR_PORT
 = 3,

65 
ICMP_DUR_FRAG
 = 4,

66 
ICMP_DUR_SR
 = 5

69 
	eicmp_ã_ty≥
 {

70 
ICMP_TE_TTL
 = 0,

71 
ICMP_TE_FRAG
 = 1

74 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

76 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

77 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

79 #ifde‡
PACK_STRUCT_USE_INCLUDES


80 
	~"¨ch/bp°ru˘.h
"

82 
PACK_STRUCT_BEGIN


83 
	sicmp_echo_hdr
 {

84 
PACK_STRUCT_FIELD
(
u16_t
 
_ty≥_code
);

85 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

86 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

88 } 
PACK_STRUCT_STRUCT
;

89 
PACK_STRUCT_END


91 
PACK_STRUCT_BEGIN


92 
	sicmp_dur_hdr
 {

93 
PACK_STRUCT_FIELD
(
u16_t
 
_ty≥_code
);

94 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

95 
PACK_STRUCT_FIELD
(
u32_t
 
unu£d
);

96 } 
PACK_STRUCT_STRUCT
;

97 
PACK_STRUCT_END


99 
PACK_STRUCT_BEGIN


100 
	sicmp_ã_hdr
 {

101 
PACK_STRUCT_FIELD
(
u16_t
 
_ty≥_code
);

102 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

103 
PACK_STRUCT_FIELD
(
u32_t
 
unu£d
);

104 } 
PACK_STRUCT_STRUCT
;

105 
PACK_STRUCT_END


106 #ifde‡
PACK_STRUCT_USE_INCLUDES


107 
	~"¨ch/ï°ru˘.h
"

110 
	#ICMPH_TYPE
(
hdr
Ë(
	`¡ohs
((hdr)->
_ty≥_code
Ë>> 8)

	)

111 
	#ICMPH_CODE
(
hdr
Ë(
	`¡ohs
((hdr)->
_ty≥_code
Ë& 0xff)

	)

113 
	#ICMPH_TYPE_SET
(
hdr
, 
ty≥
Ë((hdr)->
_ty≥_code
 = 
	`ht⁄s
(
	`ICMPH_CODE
(hdrË| (—y≥Ë<< 8)))

	)

114 
	#ICMPH_CODE_SET
(
hdr
, 
code
Ë((hdr)->
_ty≥_code
 = 
	`ht⁄s
((codeË| (
	`ICMPH_TYPE
(hdrË<< 8)))

	)

116 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/igmp.h

36 #i‚de‡
__LWIP_IGMP_H__


37 
	#__LWIP_IGMP_H__


	)

39 
	~"lwù/›t.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

42 
	~"lwù/pbuf.h
"

44 #i‡
LWIP_IGMP


46 #ifde‡
__˝lu•lus


53 
	#IP_PROTO_IGMP
 2

	)

54 
	#IGMP_TTL
 1

	)

55 
	#IGMP_MINLEN
 8

	)

56 
	#ROUTER_ALERT
 0x9404

	)

57 
	#ROUTER_ALERTLEN
 4

	)

62 
	#IGMP_MEMB_QUERY
 0x11

	)

63 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

64 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

65 
	#IGMP_LEAVE_GROUP
 0x17

	)

68 
	#IGMP_TMR_INTERVAL
 100

	)

69 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

70 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

73 
	#IGMP_DEL_MAC_FILTER
 0

	)

74 
	#IGMP_ADD_MAC_FILTER
 1

	)

77 
	#IGMP_GROUP_NON_MEMBER
 0

	)

78 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

79 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

84 #ifde‡
PACK_STRUCT_USE_INCLUDES


85 
	~"¨ch/bp°ru˘.h
"

87 
PACK_STRUCT_BEGIN


88 
	sigmp_msg
 {

89 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

90 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

91 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

92 
PACK_STRUCT_FIELD
(
ù_addr
 
igmp_group_addªss
);

93 } 
PACK_STRUCT_STRUCT
;

94 
PACK_STRUCT_END


95 #ifde‡
PACK_STRUCT_USE_INCLUDES


96 
	~"¨ch/ï°ru˘.h
"

111 
	sigmp_group
 {

112 
igmp_group
 *
√xt
;

113 
√tif
 *
öãrÁ˚
;

114 
ù_addr
 
group_addªss
;

115 
u8_t
 
œ°_ªp‹ãr_Êag
;

116 
u8_t
 
group_°©e
;

117 
u16_t
 
timî
;

118 
u8_t
 
u£
;

123 
igmp_öô
();

125 
îr_t
 
igmp_°¨t
–
√tif
 *netif);

127 
îr_t
 
igmp_°›
–
√tif
 *netif);

129 
igmp_ªp‹t_groups
–
√tif
 *netif);

131 
igmp_group
 *
igmp_lookf‹_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

133 
igmp_group
 *
igmp_lookup_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

135 
îr_t
 
igmp_ªmove_group
–
igmp_group
 *
group
);

137 
igmp_öput
–
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
);

139 
îr_t
 
igmp_joögroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

141 
îr_t
 
igmp_Àavegroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

143 
igmp_tmr
();

145 
igmp_timeout
–
igmp_group
 *
group
);

147 
igmp_°¨t_timî
–
igmp_group
 *
group
, 
u8_t
 
max_time
);

149 
igmp_°›_timî
–
igmp_group
 *
group
);

151 
igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
);

153 
îr_t
 
igmp_ù_ouçut_if
–
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
, 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif);

155 
igmp_£nd
–
igmp_group
 *
group
, 
u8_t
 
ty≥
);

157 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/inet.h

33 #i‚de‡
__LWIP_INET_H__


34 
	#__LWIP_INET_H__


	)

36 
	~"lwù/›t.h
"

38 
	~"lwù/ù_addr.h
"

40 #ifde‡
__˝lu•lus


45 
	sö_addr
 {

46 
u32_t
 
s_addr
;

49 
u32_t
 
öë_addr
(c⁄° *
˝
);

50 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

51 *
öë_¡ﬂ
(
ö_addr
 
addr
);

53 #ifde‡
ht⁄s


54 #unde‡
ht⁄s


56 #ifde‡
ht⁄l


57 #unde‡
ht⁄l


59 #ifde‡
¡ohs


60 #unde‡
¡ohs


62 #ifde‡
¡ohl


63 #unde‡
¡ohl


66 #i‚de‡
LWIP_PLATFORM_BYTESWAP


67 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

70 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


71 
	#ht⁄s
(
x
Ë(x)

	)

72 
	#¡ohs
(
x
Ë(x)

	)

73 
	#ht⁄l
(
x
Ë(x)

	)

74 
	#¡ohl
(
x
Ë(x)

	)

76 #ifde‡
LWIP_PREFIX_BYTEORDER_FUNCS


78 
	#ht⁄s
 
lwù_ht⁄s


	)

79 
	#¡ohs
 
lwù_¡ohs


	)

80 
	#ht⁄l
 
lwù_ht⁄l


	)

81 
	#¡ohl
 
lwù_¡ohl


	)

83 #i‡
LWIP_PLATFORM_BYTESWAP


84 
	#ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

85 
	#¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

86 
	#ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

87 
	#¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

89 
u16_t
 
ht⁄s
(u16_à
x
);

90 
u16_t
 
¡ohs
(u16_à
x
);

91 
u32_t
 
ht⁄l
(u32_à
x
);

92 
u32_t
 
¡ohl
(u32_à
x
);

97 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/inet_chksum.h

33 #i‚de‡
__LWIP_INET_CHKSUM_H__


34 
	#__LWIP_INET_CHKSUM_H__


	)

36 
	~"lwù/›t.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

41 #ifde‡
__˝lu•lus


45 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

46 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

47 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

48 
ù_addr
 *
§c
, ù_add∏*
de°
,

49 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

50 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

51 
ù_addr
 *
§c
, ù_add∏*
de°
,

52 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

54 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/ip.h

33 #i‚de‡
__LWIP_IP_H__


34 
	#__LWIP_IP_H__


	)

36 
	~"lwù/›t.h
"

38 
	~"lwù/def.h
"

39 
	~"lwù/pbuf.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/îr.h
"

43 #ifde‡
__˝lu•lus


47 
	#ù_öô
(Ë

	)

48 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

49 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

50 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

51 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

52 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

53 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

54 
√tif
 *netif);

56 
	#IP_HLEN
 20

	)

58 
	#IP_PROTO_ICMP
 1

	)

59 
	#IP_PROTO_UDP
 17

	)

60 
	#IP_PROTO_UDPLITE
 136

	)

61 
	#IP_PROTO_TCP
 6

	)

66 #ifde‡
IP_HDRINCL


67 #unde‡
IP_HDRINCL


69 
	#IP_HDRINCL
 
NULL


	)

71 #i‡
LWIP_NETIF_HWADDRHINT


72 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

74 
	#IP_PCB_ADDRHINT


	)

81 
	#IP_PCB
 \

83 
ù_addr
 
loˇl_ù
; \

84 
ù_addr
 
ªmŸe_ù
; \

86 
u16_t
 
so_›ti⁄s
; \

88 
u8_t
 
tos
; \

90 
u8_t
 
âl
 \

92 
IP_PCB_ADDRHINT


	)

94 
	sù_pcb
 {

96 
IP_PCB
;

102 
	#SOF_DEBUG
 (
u16_t
)0x0001U

	)

103 
	#SOF_ACCEPTCONN
 (
u16_t
)0x0002U

	)

104 
	#SOF_REUSEADDR
 (
u16_t
)0x0004U

	)

105 
	#SOF_KEEPALIVE
 (
u16_t
)0x0008U

	)

106 
	#SOF_DONTROUTE
 (
u16_t
)0x0010U

	)

107 
	#SOF_BROADCAST
 (
u16_t
)0x0020U

	)

108 
	#SOF_USELOOPBACK
 (
u16_t
)0x0040U

	)

109 
	#SOF_LINGER
 (
u16_t
)0x0080U

	)

110 
	#SOF_OOBINLINE
 (
u16_t
)0x0100U

	)

111 
	#SOF_REUSEPORT
 (
u16_t
)0x0200U

	)

114 #ifde‡
PACK_STRUCT_USE_INCLUDES


115 
	~"¨ch/bp°ru˘.h
"

117 
PACK_STRUCT_BEGIN


118 
	sù_hdr
 {

120 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

122 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

124 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

126 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

127 
	#IP_RF
 0x8000

	)

128 
	#IP_DF
 0x4000

	)

129 
	#IP_MF
 0x2000

	)

130 
	#IP_OFFMASK
 0x1ff‡

	)

132 
PACK_STRUCT_FIELD
(
u16_t
 
_âl_¥Ÿo
);

134 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

136 
PACK_STRUCT_FIELD
(
ù_addr
 
§c
);

137 
PACK_STRUCT_FIELD
(
ù_addr
 
de°
);

138 } 
PACK_STRUCT_STRUCT
;

139 
PACK_STRUCT_END


140 #ifde‡
PACK_STRUCT_USE_INCLUDES


141 
	~"¨ch/ï°ru˘.h
"

144 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

145 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

146 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

147 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

148 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

149 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

150 
	#IPH_TTL
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë>> 8)

	)

151 
	#IPH_PROTO
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë& 0xff)

	)

152 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

154 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

155 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

156 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

157 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

158 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(
	`IPH_PROTO
(hdrË| ((
u16_t
)—éË<< 8)))

	)

159 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(’rŸoË| (
	`IPH_TTL
(hdrË<< 8)))

	)

160 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

162 #i‡
IP_DEBUG


163 
ù_debug_¥öt
(
pbuf
 *
p
);

165 
	#ù_debug_¥öt
(
p
)

	)

168 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/ip_addr.h

33 #i‚de‡
__LWIP_IP_ADDR_H__


34 
	#__LWIP_IP_ADDR_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


42 #ifde‡
PACK_STRUCT_USE_INCLUDES


43 
	~"¨ch/bp°ru˘.h
"

45 
PACK_STRUCT_BEGIN


46 
	sù_addr
 {

47 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

48 } 
PACK_STRUCT_STRUCT
;

49 
PACK_STRUCT_END


50 #ifde‡
PACK_STRUCT_USE_INCLUDES


51 
	~"¨ch/ï°ru˘.h
"

58 #ifde‡
PACK_STRUCT_USE_INCLUDES


59 
	~"¨ch/bp°ru˘.h
"

61 
PACK_STRUCT_BEGIN


62 
	sù_addr2
 {

63 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

64 } 
PACK_STRUCT_STRUCT
;

65 
PACK_STRUCT_END


66 #ifde‡
PACK_STRUCT_USE_INCLUDES


67 
	~"¨ch/ï°ru˘.h
"

70 
√tif
;

72 c⁄° 
ù_addr
 
ù_addr_™y
;

73 c⁄° 
ù_addr
 
ù_addr_brﬂdˇ°
;

78 
	#IP_ADDR_ANY
 ((
ù_addr
 *)&
ù_addr_™y
)

	)

79 
	#IP_ADDR_BROADCAST
 ((
ù_addr
 *)&
ù_addr_brﬂdˇ°
)

	)

81 
	#INADDR_NONE
 ((
u32_t
)0xffffffffULË

	)

82 
	#INADDR_LOOPBACK
 ((
u32_t
)0x7f000001ULË

	)

89 
	#IN_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

90 
	#IN_CLASSA_NET
 0xff000000

	)

91 
	#IN_CLASSA_NSHIFT
 24

	)

92 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

93 
	#IN_CLASSA_MAX
 128

	)

95 
	#IN_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

96 
	#IN_CLASSB_NET
 0xffff0000

	)

97 
	#IN_CLASSB_NSHIFT
 16

	)

98 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

99 
	#IN_CLASSB_MAX
 65536

	)

101 
	#IN_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

102 
	#IN_CLASSC_NET
 0xffffff00

	)

103 
	#IN_CLASSC_NSHIFT
 8

	)

104 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

106 
	#IN_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

107 
	#IN_CLASSD_NET
 0xf0000000

	)

108 
	#IN_CLASSD_NSHIFT
 28

	)

109 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

110 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

112 
	#IN_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

113 
	#IN_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

115 
	#IN_LOOPBACKNET
 127

	)

117 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

118 (
ùaddr
)->
addr
 = 
	`ht⁄l
(((
u32_t
)((
a
) & 0xff) << 24) | \

119 ((
u32_t
)((
b
) & 0xff) << 16) | \

120 ((
u32_t
)((
c
) & 0xff) << 8) | \

121 (
u32_t
)((
d
Ë& 0xff))

	)

123 
	#ù_addr_£t
(
de°
, 
§c
Ë(de°)->
addr
 = \

124 ((
§c
Ë=
NULL
? 0:\

125 (
§c
)->
addr
)

	)

134 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

135 (
mask
)->
addr
) == \

136 ((
addr2
)->
addr
 & \

137 (
mask
)->
addr
))

	)

138 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

140 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =0)

	)

142 
u8_t
 
ù_addr_isbrﬂdˇ°
(
ù_addr
 *, 
√tif
 *);

144 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xf0000000UL)Ë=¡ohl(0xe0000000UL))

	)

146 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xffff0000UL)Ë=¡ohl(0xa9„0000UL))

	)

148 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

149 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

150 
ùaddr
 ? (
u16_t
)(
	`¡ohl
((ùaddr)->
addr
) >> 24) & 0xff : 0, \

151 
ùaddr
 ? (
u16_t
)(
	`¡ohl
((ùaddr)->
addr
) >> 16) & 0xff : 0, \

152 
ùaddr
 ? (
u16_t
)(
	`¡ohl
((ùaddr)->
addr
) >> 8) & 0xff : 0, \

153 
ùaddr
 ? (
u16_t
)
	`¡ohl
((ùaddr)->
addr
Ë& 0xf‡: 0))

	)

157 
	#ù4_addr1
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 24Ë& 0xff)

	)

158 
	#ù4_addr2
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 16Ë& 0xff)

	)

159 
	#ù4_addr3
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 8Ë& 0xff)

	)

160 
	#ù4_addr4
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
)Ë& 0xff)

	)

162 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/ip_frag.h

34 #i‚de‡
__LWIP_IP_FRAG_H__


35 
	#__LWIP_IP_FRAG_H__


	)

37 
	~"lwù/›t.h
"

38 
	~"lwù/îr.h
"

39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 #i‡
IP_REASSEMBLY


50 
	#IP_TMR_INTERVAL
 1000

	)

55 
	sù_ªassd©a
 {

56 
ù_ªassd©a
 *
√xt
;

57 
pbuf
 *
p
;

58 
ù_hdr
 
ùhdr
;

59 
u16_t
 
d©agøm_Àn
;

60 
u8_t
 
Êags
;

61 
u8_t
 
timî
;

64 
ù_ªass_öô
();

65 
ù_ªass_tmr
();

66 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

69 #i‡
IP_FRAG


70 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
);

73 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/icmp.h

33 #i‚de‡
__LWIP_ICMP_H__


34 
	#__LWIP_ICMP_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_ICMP


40 
	~"lwù/pbuf.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


47 
	#ICMP6_DUR
 1

	)

48 
	#ICMP6_TE
 3

	)

49 
	#ICMP6_ECHO
 128

	)

50 
	#ICMP6_ER
 129

	)

53 
	eicmp_dur_ty≥
 {

54 
ICMP_DUR_NET
 = 0,

55 
ICMP_DUR_HOST
 = 1,

56 
ICMP_DUR_PROTO
 = 2,

57 
ICMP_DUR_PORT
 = 3,

58 
ICMP_DUR_FRAG
 = 4,

59 
ICMP_DUR_SR
 = 5

62 
	eicmp_ã_ty≥
 {

63 
ICMP_TE_TTL
 = 0,

64 
ICMP_TE_FRAG
 = 1

67 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

69 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

70 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

72 
	sicmp_echo_hdr
 {

73 
u8_t
 
ty≥
;

74 
u8_t
 
icode
;

75 
u16_t
 
chksum
;

76 
u16_t
 
id
;

77 
u16_t
 
£qno
;

80 
	sicmp_dur_hdr
 {

81 
u8_t
 
ty≥
;

82 
u8_t
 
icode
;

83 
u16_t
 
chksum
;

84 
u32_t
 
unu£d
;

87 
	sicmp_ã_hdr
 {

88 
u8_t
 
ty≥
;

89 
u8_t
 
icode
;

90 
u16_t
 
chksum
;

91 
u32_t
 
unu£d
;

94 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/inet.h

33 #i‚de‡
__LWIP_INET_H__


34 
	#__LWIP_INET_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 #ifde‡
__˝lu•lus


44 
u16_t
 
öë_chksum
(*
d©a
, u16_à
Àn
);

45 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

46 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

47 
ù_addr
 *
§c
, ù_add∏*
de°
,

48 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
);

50 
u32_t
 
öë_addr
(c⁄° *
˝
);

51 
s8_t
 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

53 #i‚de‡
_MACHINE_ENDIAN_H_


54 #i‚de‡
_NETINET_IN_H


55 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


56 
u16_t
 
ht⁄s
(u16_à
n
);

57 
u16_t
 
¡ohs
(u16_à
n
);

58 
u32_t
 
ht⁄l
(u32_à
n
);

59 
u32_t
 
¡ohl
(u32_à
n
);

64 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/ip.h

33 #i‚de‡
__LWIP_IP_H__


34 
	#__LWIP_IP_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

41 
	~"lwù/îr.h
"

43 #ifde‡
__˝lu•lus


47 
	#IP_HLEN
 40

	)

49 
	#IP_PROTO_ICMP
 58

	)

50 
	#IP_PROTO_UDP
 17

	)

51 
	#IP_PROTO_UDPLITE
 136

	)

52 
	#IP_PROTO_TCP
 6

	)

57 #ifde‡
IP_HDRINCL


58 #unde‡
IP_HDRINCL


60 
	#IP_HDRINCL
 
NULL


	)

62 #i‡
LWIP_NETIF_HWADDRHINT


63 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

65 
	#IP_PCB_ADDRHINT


	)

72 
	#IP_PCB
 
ù_addr
 
loˇl_ù
; \

73 
ù_addr
 
ªmŸe_ù
; \

75 
u16_t
 
so_›ti⁄s
; \

77 
u8_t
 
tos
; \

79 
u8_t
 
âl
; \

81 
IP_PCB_ADDRHINT


	)

85 
	sù_hdr
 {

86 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


87 
u8_t
 
t˛ass1
:4, 
v
:4;

88 
u8_t
 
Êow1
:4, 
t˛ass2
:4;

90 
u8_t
 
v
:4, 
t˛ass1
:4;

91 
u8_t
 
t˛ass2
:8, 
Êow1
:4;

93 
u16_t
 
Êow2
;

94 
u16_t
 
Àn
;

95 
u8_t
 
√xthdr
;

96 
u8_t
 
h›lim
;

97 
ù_addr
 
§c
, 
de°
;

100 
	#IPH_PROTO
(
hdr
Ë(
ùhdr
->
√xthdr
)

	)

102 
ù_öô
();

104 
	~"lwù/√tif.h
"

106 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

108 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

111 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

112 
u8_t
 
âl
, u8_à
¥Ÿo
);

114 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

115 
u8_t
 
âl
, u8_à
¥Ÿo
,

116 
√tif
 *netif);

118 #i‡
IP_DEBUG


119 
ù_debug_¥öt
(
pbuf
 *
p
);

122 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/ip_addr.h

33 #i‚de‡
__LWIP_IP_ADDR_H__


34 
	#__LWIP_IP_ADDR_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


42 
	#IP_ADDR_ANY
 0

	)

44 #ifde‡
PACK_STRUCT_USE_INCLUDES


45 
	~"¨ch/bp°ru˘.h
"

47 
PACK_STRUCT_BEGIN


48 
	sù_addr
 {

49 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

50 } 
PACK_STRUCT_STRUCT
;

51 
PACK_STRUCT_END


52 #ifde‡
PACK_STRUCT_USE_INCLUDES


53 
	~"¨ch/ï°ru˘.h
"

60 #ifde‡
PACK_STRUCT_USE_INCLUDES


61 
	~"¨ch/bp°ru˘.h
"

63 
PACK_STRUCT_BEGIN


64 
	sù_addr2
 {

65 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

66 } 
PACK_STRUCT_STRUCT
;

67 
PACK_STRUCT_END


68 #ifde‡
PACK_STRUCT_USE_INCLUDES


69 
	~"¨ch/ï°ru˘.h
"

72 
	#IP6_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ëdÿ{ (ùaddr)->
addr
[0] = 
	`ht⁄l
((
u32_t
)((a & 0xffff) << 16) | (b & 0xffff)); \

73 (
ùaddr
)->
addr
[1] = 
	`ht⁄l
(((
c
 & 0xffffË<< 16Ë| (
d
 & 0xffff)); \

74 (
ùaddr
)->
addr
[2] = 
	`ht⁄l
(((
e
 & 0xffffË<< 16Ë| (
f
 & 0xffff)); \

75 (
ùaddr
)->
addr
[3] = 
	`ht⁄l
(((
g
 & 0xffffË<< 16Ë| (
h
 & 0xffff)); } 0)

	)

77 
u8_t
 
ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

78 
ù_addr
 *
mask
);

79 
u8_t
 
ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
);

80 
ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
);

81 
u8_t
 
ù_addr_ißny
(
ù_addr
 *
addr
);

83 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

84 
	`LWIP_DEBUGF
(
debug
, ("%"
X32_F
":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \

85 (
	`¡ohl
(
ùaddr
->
addr
[0]) >> 16) & 0xffff, \

86 
	`¡ohl
(
ùaddr
->
addr
[0]) & 0xffff, \

87 (
	`¡ohl
(
ùaddr
->
addr
[1]) >> 16) & 0xffff, \

88 
	`¡ohl
(
ùaddr
->
addr
[1]) & 0xffff, \

89 (
	`¡ohl
(
ùaddr
->
addr
[2]) >> 16) & 0xffff, \

90 
	`¡ohl
(
ùaddr
->
addr
[2]) & 0xffff, \

91 (
	`¡ohl
(
ùaddr
->
addr
[3]) >> 16) & 0xffff, \

92 
	`¡ohl
(
ùaddr
->
addr
[3]Ë& 0xffff));

	)

94 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/api.h

33 #i‚de‡
__LWIP_API_H__


34 
	#__LWIP_API_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_NETCONN


40 
	~"lwù/√tbuf.h
"

41 
	~"lwù/sys.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/îr.h
"

45 #ifde‡
__˝lu•lus


54 
	#NETCONN_NOFLAG
 0x00

	)

55 
	#NETCONN_NOCOPY
 0x00

	)

56 
	#NETCONN_COPY
 0x01

	)

57 
	#NETCONN_MORE
 0x02

	)

60 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

61 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

63 
	e√tc⁄n_ty≥
 {

64 
NETCONN_INVALID
 = 0,

66 
NETCONN_TCP
 = 0x10,

68 
NETCONN_UDP
 = 0x20,

69 
NETCONN_UDPLITE
 = 0x21,

70 
NETCONN_UDPNOCHKSUM
= 0x22,

72 
NETCONN_RAW
 = 0x40

75 
	e√tc⁄n_°©e
 {

76 
NETCONN_NONE
,

77 
NETCONN_WRITE
,

78 
NETCONN_LISTEN
,

79 
NETCONN_CONNECT
,

80 
NETCONN_CLOSE


83 
	e√tc⁄n_evt
 {

84 
NETCONN_EVT_RCVPLUS
,

85 
NETCONN_EVT_RCVMINUS
,

86 
NETCONN_EVT_SENDPLUS
,

87 
NETCONN_EVT_SENDMINUS


90 #i‡
LWIP_IGMP


91 
	e√tc⁄n_igmp
 {

92 
NETCONN_JOIN
,

93 
NETCONN_LEAVE


98 
ù_pcb
;

99 
t˝_pcb
;

100 
udp_pcb
;

101 
øw_pcb
;

102 
√tc⁄n
;

105 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

108 
	s√tc⁄n
 {

110 
√tc⁄n_ty≥
 
ty≥
;

112 
√tc⁄n_°©e
 
°©e
;

115 
ù_pcb
 *
ù
;

116 
t˝_pcb
 *
t˝
;

117 
udp_pcb
 *
udp
;

118 
øw_pcb
 *
øw
;

119 } 
pcb
;

121 
îr_t
 
îr
;

123 
sys_£m_t
 
›_com∂ëed
;

126 
sys_mbox_t
 
ªcvmbox
;

129 
sys_mbox_t
 
ac˚±mbox
;

131 
sockë
;

132 #i‡
LWIP_SO_RCVTIMEO


135 
ªcv_timeout
;

137 #i‡
LWIP_SO_RCVBUF


139 
ªcv_bufsize
;

141 
u16_t
 
ªcv_avaû
;

144 
≠i_msg_msg
 *
wrôe_msg
;

147 
wrôe_off£t
;

148 #i‡
LWIP_TCPIP_CORE_LOCKING


152 
u8_t
 
wrôe_dñayed
;

155 
√tc⁄n_ˇŒback
 
ˇŒback
;

159 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

160 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

161 }

	)

164 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

165 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

167 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

168 
√tc⁄n_ˇŒback
 
ˇŒback
);

169 
îr_t
 
√tc⁄n_dñëe
 (
√tc⁄n
 *
c⁄n
);

170 
√tc⁄n_ty≥
Çëc⁄n_ty≥ (
√tc⁄n
 *
c⁄n
);

172 
îr_t
 
√tc⁄n_gëaddr
 (
√tc⁄n
 *
c⁄n
,

173 
ù_addr
 *
addr
,

174 
u16_t
 *
p‹t
,

175 
u8_t
 
loˇl
);

176 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

177 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

179 
îr_t
 
√tc⁄n_böd
 (
√tc⁄n
 *
c⁄n
,

180 
ù_addr
 *
addr
,

181 
u16_t
 
p‹t
);

182 
îr_t
 
√tc⁄n_c⁄√˘
 (
√tc⁄n
 *
c⁄n
,

183 
ù_addr
 *
addr
,

184 
u16_t
 
p‹t
);

185 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

186 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

187 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

188 
√tc⁄n
 * 
√tc⁄n_ac˚±
 (√tc⁄¿*
c⁄n
);

189 
√tbuf
 * 
√tc⁄n_ªcv
 (
√tc⁄n
 *
c⁄n
);

190 
îr_t
 
√tc⁄n_£ndto
 (
√tc⁄n
 *
c⁄n
,

191 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

192 
îr_t
 
√tc⁄n_£nd
 (
√tc⁄n
 *
c⁄n
,

193 
√tbuf
 *
buf
);

194 
îr_t
 
√tc⁄n_wrôe
 (
√tc⁄n
 *
c⁄n
,

195 c⁄° *
d©≠å
, 
size
,

196 
u8_t
 
≠iÊags
);

197 
îr_t
 
√tc⁄n_˛o£
 (
√tc⁄n
 *
c⁄n
);

199 #i‡
LWIP_IGMP


200 
îr_t
 
√tc⁄n_joö_Àave_group
 (
√tc⁄n
 *
c⁄n
,

201 
ù_addr
 *
mu…üddr
,

202 
ù_addr
 *
öãrÁ˚
,

203 
√tc⁄n_igmp
 
joö_‹_Àave
);

205 #i‡
LWIP_DNS


206 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
);

209 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
îr
)

	)

210 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

212 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/api_msg.h

33 #i‚de‡
__LWIP_API_MSG_H__


34 
	#__LWIP_API_MSG_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_NETCONN


40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/îr.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/igmp.h
"

44 
	~"lwù/≠i.h
"

46 #ifde‡
__˝lu•lus


56 
	s≠i_msg_msg
 {

59 
√tc⁄n
 *
c⁄n
;

63 
√tbuf
 *
b
;

66 
u8_t
 
¥Ÿo
;

67 } 
n
;

70 
ù_addr
 *
ùaddr
;

71 
u16_t
 
p‹t
;

72 } 
bc
;

75 
ù_addr
 *
ùaddr
;

76 
u16_t
 *
p‹t
;

77 
u8_t
 
loˇl
;

78 } 
ad
;

81 c⁄° *
d©≠å
;

82 
Àn
;

83 
u8_t
 
≠iÊags
;

84 } 
w
;

87 
u16_t
 
Àn
;

88 } 
r
;

89 #i‡
LWIP_IGMP


92 
ù_addr
 *
mu…üddr
;

93 
ù_addr
 *
öãrÁ˚
;

94 
√tc⁄n_igmp
 
joö_‹_Àave
;

95 } 
jl
;

97 #i‡
TCP_LISTEN_BACKLOG


99 
u8_t
 
backlog
;

100 } 
lb
;

102 } 
msg
;

108 
	s≠i_msg
 {

110 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

112 
≠i_msg_msg
 
msg
;

115 #i‡
LWIP_DNS


120 
	sdns_≠i_msg
 {

122 c⁄° *
«me
;

124 
ù_addr
 *
addr
;

127 
sys_£m_t
 
£m
;

129 
îr_t
 *
îr
;

133 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

134 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

135 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

136 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

137 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

138 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

139 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

140 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

141 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

142 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

143 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

144 #i‡
LWIP_IGMP


145 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

148 #i‡
LWIP_DNS


149 
do_gëho°by«me
(*
¨g
);

152 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

153 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

155 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/arch.h

33 #i‚de‡
__LWIP_ARCH_H__


34 
	#__LWIP_ARCH_H__


	)

36 #i‚de‡
LITTLE_ENDIAN


37 
	#LITTLE_ENDIAN
 1234

	)

40 #i‚de‡
BIG_ENDIAN


41 
	#BIG_ENDIAN
 4321

	)

44 
	~"¨ch/cc.h
"

46 #ifde‡
__˝lu•lus


50 #i‚de‡
PACK_STRUCT_BEGIN


51 
	#PACK_STRUCT_BEGIN


	)

54 #i‚de‡
PACK_STRUCT_END


55 
	#PACK_STRUCT_END


	)

58 #i‚de‡
PACK_STRUCT_FIELD


59 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

63 #i‚de‡
LWIP_UNUSED_ARG


64 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

68 #ifde‡
LWIP_PROVIDE_ERRNO


70 
	#EPERM
 1

	)

71 
	#ENOENT
 2

	)

72 
	#ESRCH
 3

	)

73 
	#EINTR
 4

	)

74 
	#EIO
 5

	)

75 
	#ENXIO
 6

	)

76 
	#E2BIG
 7

	)

77 
	#ENOEXEC
 8

	)

78 
	#EBADF
 9

	)

79 
	#ECHILD
 10

	)

80 
	#EAGAIN
 11

	)

81 
	#ENOMEM
 12

	)

82 
	#EACCES
 13

	)

83 
	#EFAULT
 14

	)

84 
	#ENOTBLK
 15

	)

85 
	#EBUSY
 16

	)

86 
	#EEXIST
 17

	)

87 
	#EXDEV
 18

	)

88 
	#ENODEV
 19

	)

89 
	#ENOTDIR
 20

	)

90 
	#EISDIR
 21

	)

91 
	#EINVAL
 22

	)

92 
	#ENFILE
 23

	)

93 
	#EMFILE
 24

	)

94 
	#ENOTTY
 25

	)

95 
	#ETXTBSY
 26

	)

96 
	#EFBIG
 27

	)

97 
	#ENOSPC
 28

	)

98 
	#ESPIPE
 29

	)

99 
	#EROFS
 30

	)

100 
	#EMLINK
 31

	)

101 
	#EPIPE
 32

	)

102 
	#EDOM
 33

	)

103 
	#ERANGE
 34

	)

104 
	#EDEADLK
 35

	)

105 
	#ENAMETOOLONG
 36

	)

106 
	#ENOLCK
 37

	)

107 
	#ENOSYS
 38

	)

108 
	#ENOTEMPTY
 39

	)

109 
	#ELOOP
 40

	)

110 
	#EWOULDBLOCK
 
EAGAIN


	)

111 
	#ENOMSG
 42

	)

112 
	#EIDRM
 43

	)

113 
	#ECHRNG
 44

	)

114 
	#EL2NSYNC
 45

	)

115 
	#EL3HLT
 46

	)

116 
	#EL3RST
 47

	)

117 
	#ELNRNG
 48

	)

118 
	#EUNATCH
 49

	)

119 
	#ENOCSI
 50

	)

120 
	#EL2HLT
 51

	)

121 
	#EBADE
 52

	)

122 
	#EBADR
 53

	)

123 
	#EXFULL
 54

	)

124 
	#ENOANO
 55

	)

125 
	#EBADRQC
 56

	)

126 
	#EBADSLT
 57

	)

128 
	#EDEADLOCK
 
EDEADLK


	)

130 
	#EBFONT
 59

	)

131 
	#ENOSTR
 60

	)

132 
	#ENODATA
 61

	)

133 
	#ETIME
 62

	)

134 
	#ENOSR
 63

	)

135 
	#ENONET
 64

	)

136 
	#ENOPKG
 65

	)

137 
	#EREMOTE
 66

	)

138 
	#ENOLINK
 67

	)

139 
	#EADV
 68

	)

140 
	#ESRMNT
 69

	)

141 
	#ECOMM
 70

	)

142 
	#EPROTO
 71

	)

143 
	#EMULTIHOP
 72

	)

144 
	#EDOTDOT
 73

	)

145 
	#EBADMSG
 74

	)

146 
	#EOVERFLOW
 75

	)

147 
	#ENOTUNIQ
 76

	)

148 
	#EBADFD
 77

	)

149 
	#EREMCHG
 78

	)

150 
	#ELIBACC
 79

	)

151 
	#ELIBBAD
 80

	)

152 
	#ELIBSCN
 81

	)

153 
	#ELIBMAX
 82

	)

154 
	#ELIBEXEC
 83

	)

155 
	#EILSEQ
 84

	)

156 
	#ERESTART
 85

	)

157 
	#ESTRPIPE
 86

	)

158 
	#EUSERS
 87

	)

159 
	#ENOTSOCK
 88

	)

160 
	#EDESTADDRREQ
 89

	)

161 
	#EMSGSIZE
 90

	)

162 
	#EPROTOTYPE
 91

	)

163 
	#ENOPROTOOPT
 92

	)

164 
	#EPROTONOSUPPORT
 93

	)

165 
	#ESOCKTNOSUPPORT
 94

	)

166 
	#EOPNOTSUPP
 95

	)

167 
	#EPFNOSUPPORT
 96

	)

168 
	#EAFNOSUPPORT
 97

	)

169 
	#EADDRINUSE
 98

	)

170 
	#EADDRNOTAVAIL
 99

	)

171 
	#ENETDOWN
 100

	)

172 
	#ENETUNREACH
 101

	)

173 
	#ENETRESET
 102

	)

174 
	#ECONNABORTED
 103

	)

175 
	#ECONNRESET
 104

	)

176 
	#ENOBUFS
 105

	)

177 
	#EISCONN
 106

	)

178 
	#ENOTCONN
 107

	)

179 
	#ESHUTDOWN
 108

	)

180 
	#ETOOMANYREFS
 109

	)

181 
	#ETIMEDOUT
 110

	)

182 
	#ECONNREFUSED
 111

	)

183 
	#EHOSTDOWN
 112

	)

184 
	#EHOSTUNREACH
 113

	)

185 
	#EALREADY
 114

	)

186 
	#EINPROGRESS
 115

	)

187 
	#ESTALE
 116

	)

188 
	#EUCLEAN
 117

	)

189 
	#ENOTNAM
 118

	)

190 
	#ENAVAIL
 119

	)

191 
	#EISNAM
 120

	)

192 
	#EREMOTEIO
 121

	)

193 
	#EDQUOT
 122

	)

195 
	#ENOMEDIUM
 123

	)

196 
	#EMEDIUMTYPE
 124

	)

199 
	#ENSROK
 0

	)

200 
	#ENSRNODATA
 160

	)

201 
	#ENSRFORMERR
 161

	)

202 
	#ENSRSERVFAIL
 162

	)

203 
	#ENSRNOTFOUND
 163

	)

204 
	#ENSRNOTIMP
 164

	)

205 
	#ENSRREFUSED
 165

	)

206 
	#ENSRBADQUERY
 166

	)

207 
	#ENSRBADNAME
 167

	)

208 
	#ENSRBADFAMILY
 168

	)

209 
	#ENSRBADRESP
 169

	)

210 
	#ENSRCONNREFUSED
 170

	)

211 
	#ENSRTIMEOUT
 171

	)

212 
	#ENSROF
 172

	)

213 
	#ENSRFILE
 173

	)

214 
	#ENSRNOMEM
 174

	)

215 
	#ENSRDESTRUCTION
 175

	)

216 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

217 
	#ENSRCNAMELOOP
 177

	)

219 #i‚de‡
î∫o


220 
î∫o
;

225 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/debug.h

33 #i‚de‡
__LWIP_DEBUG_H__


34 
	#__LWIP_DEBUG_H__


	)

36 
	~"lwù/¨ch.h
"

44 
	#LWIP_DBG_LEVEL_OFF
 0x00

	)

45 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

46 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

47 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

48 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

51 
	#LWIP_DBG_ON
 0x80U

	)

53 
	#LWIP_DBG_OFF
 0x00U

	)

56 
	#LWIP_DBG_TRACE
 0x40U

	)

58 
	#LWIP_DBG_STATE
 0x20U

	)

60 
	#LWIP_DBG_FRESH
 0x10U

	)

62 
	#LWIP_DBG_HALT
 0x08U

	)

64 #i‚de‡
LWIP_NOASSERT


65 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

66 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

68 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

72 #i‚de‡
LWIP_ERROR


73 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

74 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

77 #ifde‡
LWIP_DEBUG


81 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

83 ((
debug
Ë& 
LWIP_DBG_ON
) && \

84 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

85 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

86 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

87 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

91 } 0)

	)

94 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@net/lwip/include/lwip/def.h

33 #i‚de‡
__LWIP_DEF_H__


34 
	#__LWIP_DEF_H__


	)

37 
	~"lwù/¨ch.h
"

39 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

40 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

42 #i‚de‡
NULL


43 
	#NULL
 ((*)0)

	)

	@net/lwip/include/lwip/dhcp.h

5 #i‚de‡
__LWIP_DHCP_H__


6 
	#__LWIP_DHCP_H__


	)

8 
	~"lwù/›t.h
"

10 #i‡
LWIP_DHCP


12 
	~"lwù/√tif.h
"

13 
	~"lwù/udp.h
"

15 #ifde‡
__˝lu•lus


20 
	#DHCP_COARSE_TIMER_SECS
 60

	)

22 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
*1000)

	)

24 
	#DHCP_FINE_TIMER_MSECS
 500

	)

26 
	sdh˝


29 
u8_t
 
°©e
;

31 
u8_t
 
åõs
;

33 
u32_t
 
xid
;

35 
udp_pcb
 *
pcb
;

37 
pbuf
 *
p
;

39 
dh˝_msg
 *
msg_ö
;

41 
dh˝_msg
 *
›ti⁄s_ö
;

43 
u16_t
 
›ti⁄s_ö_Àn
;

45 
pbuf
 *
p_out
;

46 
dh˝_msg
 *
msg_out
;

47 
u16_t
 
›ti⁄s_out_Àn
;

48 
u16_t
 
ªque°_timeout
;

49 
u16_t
 
t1_timeout
;

50 
u16_t
 
t2_timeout
;

51 
ù_addr
 
£rvî_ù_addr
;

52 
ù_addr
 
of„ªd_ù_addr
;

53 
ù_addr
 
of„ªd_¢_mask
;

54 
ù_addr
 
of„ªd_gw_addr
;

55 
ù_addr
 
of„ªd_bc_addr
;

56 
	#DHCP_MAX_DNS
 2

	)

57 
u32_t
 
dns_cou¡
;

58 
ù_addr
 
of„ªd_dns_addr
[
DHCP_MAX_DNS
];

60 
u32_t
 
of„ªd_t0_Àa£
;

61 
u32_t
 
of„ªd_t1_ª√w
;

62 
u32_t
 
of„ªd_t2_ªböd
;

63 #i‡
LWIP_DHCP_AUTOIP_COOP


64 
u8_t
 
autoù_co›_°©e
;

70 
ù_addr
 
of„ªd_si_addr
;

71 
u8_t
 *
boŸ_fûe_«me
;

76 #ifde‡
PACK_STRUCT_USE_INCLUDES


77 
	~"¨ch/bp°ru˘.h
"

79 
PACK_STRUCT_BEGIN


81 
	sdh˝_msg


83 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

84 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

86 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

87 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

88 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

89 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

90 
PACK_STRUCT_FIELD
(
ù_addr
 
cüddr
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
yüddr
);

92 
PACK_STRUCT_FIELD
(
ù_addr
 
süddr
);

93 
PACK_STRUCT_FIELD
(
ù_addr
 
güddr
);

94 
	#DHCP_CHADDR_LEN
 16U

	)

95 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

96 
	#DHCP_SNAME_LEN
 64U

	)

97 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

98 
	#DHCP_FILE_LEN
 128U

	)

99 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

100 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

101 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

103 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

104 #unde‡
DHCP_OPTIONS_LEN


107 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

109 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

111 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

112 } 
PACK_STRUCT_STRUCT
;

113 
PACK_STRUCT_END


114 #ifde‡
PACK_STRUCT_USE_INCLUDES


115 
	~"¨ch/ï°ru˘.h
"

119 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

121 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

123 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

125 
dh˝_°›
(
√tif
 *netif);

127 
dh˝_öf‹m
(
√tif
 *netif);

130 #i‡
DHCP_DOES_ARP_CHECK


131 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
);

135 
dh˝_cﬂr£_tmr
();

137 
dh˝_föe_tmr
();

140 
	#DHCP_MSG_OFS
 (
UDP_DATA_OFS
)

	)

141 
	#DHCP_OP_OFS
 (
DHCP_MSG_OFS
 + 0)

	)

142 
	#DHCP_HTYPE_OFS
 (
DHCP_MSG_OFS
 + 1)

	)

143 
	#DHCP_HLEN_OFS
 (
DHCP_MSG_OFS
 + 2)

	)

144 
	#DHCP_HOPS_OFS
 (
DHCP_MSG_OFS
 + 3)

	)

145 
	#DHCP_XID_OFS
 (
DHCP_MSG_OFS
 + 4)

	)

146 
	#DHCP_SECS_OFS
 (
DHCP_MSG_OFS
 + 8)

	)

147 
	#DHCP_FLAGS_OFS
 (
DHCP_MSG_OFS
 + 10)

	)

148 
	#DHCP_CIADDR_OFS
 (
DHCP_MSG_OFS
 + 12)

	)

149 
	#DHCP_YIADDR_OFS
 (
DHCP_MSG_OFS
 + 16)

	)

150 
	#DHCP_SIADDR_OFS
 (
DHCP_MSG_OFS
 + 20)

	)

151 
	#DHCP_GIADDR_OFS
 (
DHCP_MSG_OFS
 + 24)

	)

152 
	#DHCP_CHADDR_OFS
 (
DHCP_MSG_OFS
 + 28)

	)

153 
	#DHCP_SNAME_OFS
 (
DHCP_MSG_OFS
 + 44)

	)

154 
	#DHCP_FILE_OFS
 (
DHCP_MSG_OFS
 + 108)

	)

155 
	#DHCP_MSG_LEN
 236

	)

157 
	#DHCP_COOKIE_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
)

	)

158 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
 + 4)

	)

160 
	#DHCP_CLIENT_PORT
 68

	)

161 
	#DHCP_SERVER_PORT
 67

	)

164 
	#DHCP_REQUESTING
 1

	)

165 
	#DHCP_INIT
 2

	)

166 
	#DHCP_REBOOTING
 3

	)

167 
	#DHCP_REBINDING
 4

	)

168 
	#DHCP_RENEWING
 5

	)

169 
	#DHCP_SELECTING
 6

	)

170 
	#DHCP_INFORMING
 7

	)

171 
	#DHCP_CHECKING
 8

	)

172 
	#DHCP_PERMANENT
 9

	)

173 
	#DHCP_BOUND
 10

	)

175 
	#DHCP_BACKING_OFF
 12

	)

176 
	#DHCP_OFF
 13

	)

179 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

180 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

182 
	#DHCP_BOOTREQUEST
 1

	)

183 
	#DHCP_BOOTREPLY
 2

	)

185 
	#DHCP_DISCOVER
 1

	)

186 
	#DHCP_OFFER
 2

	)

187 
	#DHCP_REQUEST
 3

	)

188 
	#DHCP_DECLINE
 4

	)

189 
	#DHCP_ACK
 5

	)

190 
	#DHCP_NAK
 6

	)

191 
	#DHCP_RELEASE
 7

	)

192 
	#DHCP_INFORM
 8

	)

194 
	#DHCP_HTYPE_ETH
 1

	)

196 
	#DHCP_HLEN_ETH
 6

	)

198 
	#DHCP_BROADCAST_FLAG
 15

	)

199 
	#DHCP_BROADCAST_MASK
 (1 << 
DHCP_FLAG_BROADCAST
)

	)

202 
	#DHCP_OPTION_PAD
 0

	)

203 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

204 
	#DHCP_OPTION_ROUTER
 3

	)

205 
	#DHCP_OPTION_DNS_SERVER
 6

	)

206 
	#DHCP_OPTION_HOSTNAME
 12

	)

207 
	#DHCP_OPTION_IP_TTL
 23

	)

208 
	#DHCP_OPTION_MTU
 26

	)

209 
	#DHCP_OPTION_BROADCAST
 28

	)

210 
	#DHCP_OPTION_TCP_TTL
 37

	)

211 
	#DHCP_OPTION_END
 255

	)

214 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

215 
	#DHCP_OPTION_LEASE_TIME
 51

	)

216 
	#DHCP_OPTION_OVERLOAD
 52

	)

218 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

219 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

222 
	#DHCP_OPTION_SERVER_ID
 54

	)

223 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

225 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

226 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

228 
	#DHCP_OPTION_T1
 58

	)

229 
	#DHCP_OPTION_T2
 59

	)

230 
	#DHCP_OPTION_US
 60

	)

231 
	#DHCP_OPTION_CLIENT_ID
 61

	)

232 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

233 
	#DHCP_OPTION_BOOTFILE
 67

	)

236 
	#DHCP_OVERLOAD_NONE
 0

	)

237 
	#DHCP_OVERLOAD_FILE
 1

	)

238 
	#DHCP_OVERLOAD_SNAME
 2

	)

239 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

241 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/dns.h

35 #i‚de‡
__LWIP_DNS_H__


36 
	#__LWIP_DNS_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_DNS


43 
	#DNS_TMR_INTERVAL
 1000

	)

46 
	#DNS_RRTYPE_A
 1

	)

47 
	#DNS_RRTYPE_NS
 2

	)

48 
	#DNS_RRTYPE_MD
 3

	)

49 
	#DNS_RRTYPE_MF
 4

	)

50 
	#DNS_RRTYPE_CNAME
 5

	)

51 
	#DNS_RRTYPE_SOA
 6

	)

52 
	#DNS_RRTYPE_MB
 7

	)

53 
	#DNS_RRTYPE_MG
 8

	)

54 
	#DNS_RRTYPE_MR
 9

	)

55 
	#DNS_RRTYPE_NULL
 10

	)

56 
	#DNS_RRTYPE_WKS
 11

	)

57 
	#DNS_RRTYPE_PTR
 12

	)

58 
	#DNS_RRTYPE_HINFO
 13

	)

59 
	#DNS_RRTYPE_MINFO
 14

	)

60 
	#DNS_RRTYPE_MX
 15

	)

61 
	#DNS_RRTYPE_TXT
 16

	)

64 
	#DNS_RRCLASS_IN
 1

	)

65 
	#DNS_RRCLASS_CS
 2

	)

66 
	#DNS_RRCLASS_CH
 3

	)

67 
	#DNS_RRCLASS_HS
 4

	)

68 
	#DNS_RRCLASS_FLUSH
 0x800

	)

77 (*
	tdns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr
 *
	tùaddr
, *
	tˇŒback_¨g
);

80 
	`dns_öô
();

82 
	`dns_tmr
();

84 
	`dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
);

86 
ù_addr
 
	`dns_gë£rvî
(
u8_t
 
numdns
);

88 
îr_t
 
	`dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
,

89 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

	@net/lwip/include/lwip/err.h

33 #i‚de‡
__LWIP_ERR_H__


34 
	#__LWIP_ERR_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/¨ch.h
"

39 #ifde‡
__˝lu•lus


45 #ifde‡
LWIP_ERR_T


46 
LWIP_ERR_T
 
	tîr_t
;

48 
s8_t
 
	tîr_t
;

53 
	#ERR_OK
 0

	)

54 
	#ERR_MEM
 -1

	)

55 
	#ERR_BUF
 -2

	)

56 
	#ERR_TIMEOUT
 -3

	)

57 
	#ERR_RTE
 -4

	)

59 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_RTE
)

	)

61 
	#ERR_ABRT
 -5

	)

62 
	#ERR_RST
 -6

	)

63 
	#ERR_CLSD
 -7

	)

64 
	#ERR_CONN
 -8

	)

66 
	#ERR_VAL
 -9

	)

68 
	#ERR_ARG
 -10

	)

70 
	#ERR_USE
 -11

	)

72 
	#ERR_IF
 -12

	)

73 
	#ERR_ISCONN
 -13

	)

75 
	#ERR_INPROGRESS
 -14

	)

78 #ifde‡
LWIP_DEBUG


79 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

81 
	#lwù_°ªº
(
x
Ë""

	)

84 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/init.h

33 #i‚de‡
__LWIP_INIT_H__


34 
	#__LWIP_INIT_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


43 
lwù_öô
();

45 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/mem.h

33 #i‚de‡
__LWIP_MEM_H__


34 
	#__LWIP_MEM_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


42 #i‡
MEM_LIBC_MALLOC


44 
	~<°ddef.h
>

46 
size_t
 
	tmem_size_t
;

49 
	#mem_öô
()

	)

53 #i‚de‡
mem_‰ì


54 
	#mem_‰ì
 
‰ì


	)

56 #i‚de‡
mem_mÆloc


57 
	#mem_mÆloc
 
mÆloc


	)

59 #i‚de‡
mem_ˇŒoc


60 
	#mem_ˇŒoc
 
ˇŒoc


	)

62 #i‚de‡
mem_ªÆloc


63 
	#mem_ªÆloc
 
ªÆloc


	)

70 #i‡
MEM_SIZE
 > 64000l

71 
u32_t
 
	tmem_size_t
;

73 
u16_t
 
	tmem_size_t
;

76 #i‡
MEM_USE_POOLS


78 
	#mem_öô
()

	)

81 
	#mem_ªÆloc
(
mem
, 
size
Ë(mem)

	)

84 
mem_öô
();

85 *
mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
);

87 *
mem_mÆloc
(
mem_size_t
 
size
);

88 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

89 
mem_‰ì
(*
mem
);

92 #i‚de‡
LWIP_MEM_ALIGN_SIZE


93 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

96 #i‚de‡
LWIP_MEM_ALIGN


97 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

100 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/memp.h

34 #i‚de‡
__LWIP_MEMP_H__


35 
	#__LWIP_MEMP_H__


	)

37 
	~"lwù/›t.h
"

39 #ifde‡
__˝lu•lus


45 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

46 
	~"lwù/memp_°d.h
"

47 
MEMP_MAX


48 } 
	tmemp_t
;

50 #i‡
MEM_USE_POOLS


55 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

56 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

57 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

58 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

59 
	#LWIP_MALLOC_MEMPOOL_END


	)

60 
	~"lwù/memp_°d.h
"

64 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

65 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

66 
	#LWIP_MALLOC_MEMPOOL_START


	)

67 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

68 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

69 
	~"lwù/memp_°d.h
"

71 } 
	tmemp_poﬁ_hñ≥r_t
;

75 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

76 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

78 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

81 
memp_öô
();

83 #i‡
MEMP_OVERFLOW_CHECK


84 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

85 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

87 *
memp_mÆloc
(
memp_t
 
ty≥
);

89 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

91 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/memp_std.h

13 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, size, "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

51 #i‡
LWIP_NETCONN


52 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

53 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

56 #i‡
NO_SYS
==0

57 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

58 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

61 #i‡
ARP_QUEUEING


62 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

65 #i‡
LWIP_IGMP


66 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

69 #i‡
NO_SYS
==0

70 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

82 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

83 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

90 #i‡
MEMP_USE_CUSTOM_POOLS


91 
	~"lwùpoﬁs.h
"

98 #unde‡
LWIP_MEMPOOL


99 #unde‡
LWIP_MALLOC_MEMPOOL


100 #unde‡
LWIP_MALLOC_MEMPOOL_START


101 #unde‡
LWIP_MALLOC_MEMPOOL_END


102 #unde‡
LWIP_PBUF_MEMPOOL


	@net/lwip/include/lwip/netbuf.h

33 #i‚de‡
__LWIP_NETBUF_H__


34 
	#__LWIP_NETBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

39 #ifde‡
__˝lu•lus


43 
	s√tbuf
 {

44 
pbuf
 *
p
, *
±r
;

45 
ù_addr
 *
addr
;

46 
u16_t
 
p‹t
;

50 
√tbuf
 * 
√tbuf_√w
 ();

51 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

52 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

53 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

54 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

55 c⁄° *
d©≠å
, 
u16_t
 
size
);

56 
√tbuf_chaö
 (
√tbuf
 *
hód
,

57 
√tbuf
 *
èû
);

59 
u16_t
 
√tbuf_Àn
 (
√tbuf
 *
buf
);

60 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

61 **
d©≠å
, 
u16_t
 *
Àn
);

62 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

63 
√tbuf_fú°
 (
√tbuf
 *
buf
);

66 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

67 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

68 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

69 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

70 
	#√tbuf_‰omaddr
(
buf
Ë((buf)->
addr
)

	)

71 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

73 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/netdb.h

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


35 
	~"lwù/sockës.h
"

38 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


39 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

42 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


43 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

46 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


47 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

50 #i‡
LWIP_DNS_API_DEFINE_ERRORS


52 
	#EAI_NONAME
 200

	)

53 
	#EAI_SERVICE
 201

	)

54 
	#EAI_FAIL
 202

	)

55 
	#EAI_MEMORY
 203

	)

57 
	#HOST_NOT_FOUND
 210

	)

58 
	#NO_DATA
 211

	)

59 
	#NO_RECOVERY
 212

	)

60 
	#TRY_AGAIN
 213

	)

63 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


64 
	sho°ít
 {

65 *
	mh_«me
;

66 **
	mh_Æü£s
;

68 
	mh_addπy≥
;

69 
	mh_Àngth
;

70 **
	mh_addr_li°
;

72 
	#h_addr
 
h_addr_li°
[0]

	)

75 
	saddröfo
 {

76 
	mai_Êags
;

77 
	mai_Ámûy
;

78 
	mai_sockty≥
;

79 
	mai_¥Ÿocﬁ
;

80 
sockÀn_t
 
	mai_addæí
;

81 
sockaddr
 *
	mai_addr
;

82 *
	mai_ˇn⁄«me
;

83 
addröfo
 *
	mai_√xt
;

87 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


89 
h_î∫o
;

92 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

93 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

94 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

95 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

96 
lwù_gëaddröfo
(c⁄° *
nodíame
,

97 c⁄° *
£rv«me
,

98 c⁄° 
addröfo
 *
höts
,

99 
addröfo
 **
ªs
);

101 #i‡
LWIP_COMPAT_SOCKETS


102 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

103 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

104 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

105 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
(
a
)

	)

106 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

107 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

	@net/lwip/include/lwip/netif.h

33 #i‚de‡
__LWIP_NETIF_H__


34 
	#__LWIP_NETIF_H__


	)

36 
	~"lwù/›t.h
"

38 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

40 
	~"lwù/îr.h
"

42 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

45 
	~"lwù/pbuf.h
"

46 #i‡
LWIP_DHCP


47 
	gdh˝
;

49 #i‡
LWIP_AUTOIP


50 
	gautoù
;

53 #ifde‡
__˝lu•lus


62 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

70 
	#NETIF_FLAG_UP
 0x01U

	)

72 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

74 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

76 
	#NETIF_FLAG_DHCP
 0x08U

	)

79 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

81 
	#NETIF_FLAG_ETHARP
 0x20U

	)

83 
	#NETIF_FLAG_IGMP
 0x40U

	)

89 
	s√tif
 {

91 
√tif
 *
√xt
;

94 
ù_addr
 ip_addr;

95 
ù_addr
 
√tmask
;

96 
ù_addr
 
gw
;

100 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *
öp
);

104 
îr_t
 (* 
ouçut
)(
√tif
 *√tif, 
pbuf
 *
p
,

105 
ù_addr
 *
ùaddr
);

109 
îr_t
 (* 
lökouçut
)(
√tif
 *√tif, 
pbuf
 *
p
);

110 #i‡
LWIP_NETIF_STATUS_CALLBACK


113 (* 
°©us_ˇŒback
)(
√tif
 *netif);

115 #i‡
LWIP_NETIF_LINK_CALLBACK


118 (* 
lök_ˇŒback
)(
√tif
 *netif);

122 *
°©e
;

123 #i‡
LWIP_DHCP


125 
dh˝
 *dhcp;

127 #i‡
LWIP_AUTOIP


129 
autoù
 *autoip;

131 #i‡
LWIP_NETIF_HOSTNAME


133 * 
ho°«me
;

136 
u8_t
 
hwaddr_Àn
;

138 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

140 
u16_t
 
mtu
;

142 
u8_t
 
Êags
;

144 
«me
[2];

146 
u8_t
 
num
;

147 #i‡
LWIP_SNMP


149 
u8_t
 
lök_ty≥
;

151 
u32_t
 
lök_•ìd
;

153 
u32_t
 
ts
;

155 
u32_t
 
iföo˘ës
;

156 
u32_t
 
iföuˇ°pkts
;

157 
u32_t
 
ifönuˇ°pkts
;

158 
u32_t
 
ifödisˇrds
;

159 
u32_t
 
ifouto˘ës
;

160 
u32_t
 
ifoutuˇ°pkts
;

161 
u32_t
 
ifouäuˇ°pkts
;

162 
u32_t
 
ifoutdisˇrds
;

164 #i‡
LWIP_IGMP


166 
îr_t
 (*
igmp_mac_fûãr
)–
√tif
 *√tif, 
ù_addr
 *
group
, 
u8_t
 
a˘i⁄
);

168 #i‡
LWIP_NETIF_HWADDRHINT


169 
u8_t
 *
addr_höt
;

171 #i‡
ENABLE_LOOPBACK


173 
pbuf
 *
lo›_fú°
;

174 
pbuf
 *
lo›_œ°
;

175 #i‡
LWIP_LOOPBACK_MAX_PBUFS


176 
u16_t
 
lo›_˙t_cuºít
;

181 #i‡
LWIP_SNMP


182 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

184 
√tif
->
lök_ty≥
 = 
ty≥
; \

186 
√tif
->
lök_•ìd
 = 
•ìd
; \

187 
√tif
->
ts
 = 0; \

188 
√tif
->
iföo˘ës
 = 0; \

189 
√tif
->
iföuˇ°pkts
 = 0; \

190 
√tif
->
ifönuˇ°pkts
 = 0; \

191 
√tif
->
ifödisˇrds
 = 0; \

192 
√tif
->
ifouto˘ës
 = 0; \

193 
√tif
->
ifoutuˇ°pkts
 = 0; \

194 
√tif
->
ifouäuˇ°pkts
 = 0; \

195 
√tif
->
ifoutdisˇrds
 = 0

	)

197 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

202 
√tif
 *
√tif_li°
;

204 
√tif
 *
√tif_deÁu…
;

206 
	#√tif_öô
(Ë

	)

208 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

209 
ù_addr
 *
gw
,

210 *
°©e
,

211 
îr_t
 (* 
öô
)(
√tif
 *netif),

212 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif));

215 
√tif_£t_addr
(
√tif
 *√tif,
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

216 
ù_addr
 *
gw
);

217 
√tif_ªmove
(
√tif
 *Çetif);

223 
√tif
 *
√tif_föd
(*
«me
);

225 
√tif_£t_deÁu…
(
√tif
 *netif);

227 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

228 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
);

229 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
);

231 
√tif_£t_up
(
√tif
 *netif);

232 
√tif_£t_down
(
√tif
 *netif);

233 
u8_t
 
√tif_is_up
(
√tif
 *netif);

235 #i‡
LWIP_NETIF_STATUS_CALLBACK


239 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif));

242 #i‡
LWIP_NETIF_LINK_CALLBACK


243 
√tif_£t_lök_up
(
√tif
 *netif);

244 
√tif_£t_lök_down
(
√tif
 *netif);

245 
u8_t
 
√tif_is_lök_up
(
√tif
 *netif);

249 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif));

252 #ifde‡
__˝lu•lus


256 #i‡
ENABLE_LOOPBACK


257 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
de°_ù
);

258 
√tif_pﬁl
(
√tif
 *netif);

259 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


260 
√tif_pﬁl_Æl
();

	@net/lwip/include/lwip/netifapi.h

29 #i‚de‡
__LWIP_NETIFAPI_H__


30 
	#__LWIP_NETIFAPI_H__


	)

32 
	~"lwù/›t.h
"

34 #i‡
LWIP_NETIF_API


36 
	~"lwù/sys.h
"

37 
	~"lwù/√tif.h
"

38 
	~"lwù/dh˝.h
"

39 
	~"lwù/autoù.h
"

41 #ifde‡
__˝lu•lus


45 
	s√tiÁpi_msg_msg
 {

46 #i‡!
LWIP_TCPIP_CORE_LOCKING


47 
sys_£m_t
 
£m
;

49 
îr_t
 
îr
;

50 
√tif
 *netif;

53 
ù_addr
 *
ùaddr
;

54 
ù_addr
 *
√tmask
;

55 
ù_addr
 *
gw
;

56 *
°©e
;

57 
îr_t
 (* 
öô
Ë(
√tif
 *netif);

58 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif);

59 } 
add
;

61 (* 
voidfunc
)(
√tif
 *netif);

62 
îr_t
 (* 
îπfunc
)(
√tif
 *netif);

63 } 
comm⁄
;

64 } 
msg
;

67 
	s√tiÁpi_msg
 {

68 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

69 
√tiÁpi_msg_msg
 
msg
;

74 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

75 
ù_addr
 *
ùaddr
,

76 
ù_addr
 *
√tmask
,

77 
ù_addr
 *
gw
,

78 *
°©e
,

79 
îr_t
 (* 
öô
)(
√tif
 *netif),

80 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif) );

82 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

83 (* 
voidfunc
)(
√tif
 *netif),

84 
îr_t
 (* 
îπfunc
)(
√tif
 *netif) );

86 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

87 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

88 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

89 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

90 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

91 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

92 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

93 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

95 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/opt.h

39 #i‚de‡
__LWIP_OPT_H__


40 
	#__LWIP_OPT_H__


	)

46 
	~"lwù›ts.h
"

47 
	~"lwù/debug.h
"

60 #i‚de‡
SYS_LIGHTWEIGHT_PROT


61 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

68 #i‚de‡
NO_SYS


69 
	#NO_SYS
 0

	)

76 #i‚de‡
MEMCPY


77 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

84 #i‚de‡
SMEMCPY


85 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

98 #i‚de‡
MEM_LIBC_MALLOC


99 
	#MEM_LIBC_MALLOC
 0

	)

107 #i‚de‡
MEM_ALIGNMENT


108 
	#MEM_ALIGNMENT
 1

	)

115 #i‚de‡
MEM_SIZE


116 
	#MEM_SIZE
 1600

	)

128 #i‚de‡
MEMP_OVERFLOW_CHECK


129 
	#MEMP_OVERFLOW_CHECK
 0

	)

136 #i‚de‡
MEMP_SANITY_CHECK


137 
	#MEMP_SANITY_CHECK
 0

	)

145 #i‚de‡
MEM_USE_POOLS


146 
	#MEM_USE_POOLS
 0

	)

155 #i‚de‡
MEMP_USE_CUSTOM_POOLS


156 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

177 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


178 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

191 #i‚de‡
MEMP_NUM_PBUF


192 
	#MEMP_NUM_PBUF
 16

	)

199 #i‚de‡
MEMP_NUM_RAW_PCB


200 
	#MEMP_NUM_RAW_PCB
 4

	)

208 #i‚de‡
MEMP_NUM_UDP_PCB


209 
	#MEMP_NUM_UDP_PCB
 4

	)

216 #i‚de‡
MEMP_NUM_TCP_PCB


217 
	#MEMP_NUM_TCP_PCB
 5

	)

224 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


225 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

232 #i‚de‡
MEMP_NUM_TCP_SEG


233 
	#MEMP_NUM_TCP_SEG
 16

	)

240 #i‚de‡
MEMP_NUM_REASSDATA


241 
	#MEMP_NUM_REASSDATA
 5

	)

250 #i‚de‡
MEMP_NUM_ARP_QUEUE


251 
	#MEMP_NUM_ARP_QUEUE
 30

	)

260 #i‚de‡
MEMP_NUM_IGMP_GROUP


261 
	#MEMP_NUM_IGMP_GROUP
 8

	)

268 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


269 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

276 #i‚de‡
MEMP_NUM_NETBUF


277 
	#MEMP_NUM_NETBUF
 2

	)

284 #i‚de‡
MEMP_NUM_NETCONN


285 
	#MEMP_NUM_NETCONN
 4

	)

293 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


294 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

302 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


303 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

309 #i‚de‡
PBUF_POOL_SIZE


310 
	#PBUF_POOL_SIZE
 16

	)

321 #i‚de‡
LWIP_ARP


322 
	#LWIP_ARP
 1

	)

328 #i‚de‡
ARP_TABLE_SIZE


329 
	#ARP_TABLE_SIZE
 10

	)

336 #i‚de‡
ARP_QUEUEING


337 
	#ARP_QUEUEING
 1

	)

348 #i‚de‡
ETHARP_TRUST_IP_MAC


349 
	#ETHARP_TRUST_IP_MAC
 1

	)

362 #i‚de‡
IP_FORWARD


363 
	#IP_FORWARD
 0

	)

371 #i‚de‡
IP_OPTIONS_ALLOWED


372 
	#IP_OPTIONS_ALLOWED
 1

	)

380 #i‚de‡
IP_REASSEMBLY


381 
	#IP_REASSEMBLY
 1

	)

389 #i‚de‡
IP_FRAG


390 
	#IP_FRAG
 1

	)

398 #i‚de‡
IP_REASS_MAXAGE


399 
	#IP_REASS_MAXAGE
 3

	)

408 #i‚de‡
IP_REASS_MAX_PBUFS


409 
	#IP_REASS_MAX_PBUFS
 10

	)

417 #i‚de‡
IP_FRAG_USES_STATIC_BUF


418 
	#IP_FRAG_USES_STATIC_BUF
 1

	)

425 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

426 
	#IP_FRAG_MAX_MTU
 1500

	)

432 #i‚de‡
IP_DEFAULT_TTL


433 
	#IP_DEFAULT_TTL
 255

	)

445 #i‚de‡
LWIP_ICMP


446 
	#LWIP_ICMP
 1

	)

452 #i‚de‡
ICMP_TTL


453 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

464 #i‚de‡
LWIP_RAW


465 
	#LWIP_RAW
 1

	)

471 #i‚de‡
RAW_TTL


472 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

483 #i‚de‡
LWIP_DHCP


484 
	#LWIP_DHCP
 0

	)

490 #i‚de‡
DHCP_DOES_ARP_CHECK


491 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

502 #i‚de‡
LWIP_AUTOIP


503 
	#LWIP_AUTOIP
 0

	)

510 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


511 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

523 #i‚de‡
LWIP_SNMP


524 
	#LWIP_SNMP
 0

	)

531 #i‚de‡
SNMP_CONCURRENT_REQUESTS


532 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

539 #i‚de‡
SNMP_TRAP_DESTINATIONS


540 
	#SNMP_TRAP_DESTINATIONS
 1

	)

546 #i‚de‡
SNMP_PRIVATE_MIB


547 
	#SNMP_PRIVATE_MIB
 0

	)

555 #i‚de‡
SNMP_SAFE_REQUESTS


556 
	#SNMP_SAFE_REQUESTS
 1

	)

567 #i‚de‡
LWIP_IGMP


568 
	#LWIP_IGMP
 0

	)

580 #i‚de‡
LWIP_DNS


581 
	#LWIP_DNS
 0

	)

585 #i‚de‡
DNS_TABLE_SIZE


586 
	#DNS_TABLE_SIZE
 4

	)

590 #i‚de‡
DNS_MAX_NAME_LENGTH


591 
	#DNS_MAX_NAME_LENGTH
 256

	)

595 #i‚de‡
DNS_MAX_SERVERS


596 
	#DNS_MAX_SERVERS
 2

	)

600 #i‚de‡
DNS_DOES_NAME_CHECK


601 
	#DNS_DOES_NAME_CHECK
 1

	)

607 #i‚de‡
DNS_USES_STATIC_BUF


608 
	#DNS_USES_STATIC_BUF
 1

	)

612 #i‚de‡
DNS_MSG_SIZE


613 
	#DNS_MSG_SIZE
 512

	)

624 #i‚de‡
LWIP_UDP


625 
	#LWIP_UDP
 1

	)

631 #i‚de‡
LWIP_UDPLITE


632 
	#LWIP_UDPLITE
 0

	)

638 #i‚de‡
UDP_TTL


639 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

650 #i‚de‡
LWIP_TCP


651 
	#LWIP_TCP
 1

	)

657 #i‚de‡
TCP_TTL


658 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

664 #i‚de‡
TCP_WND


665 
	#TCP_WND
 2048

	)

671 #i‚de‡
TCP_MAXRTX


672 
	#TCP_MAXRTX
 12

	)

678 #i‚de‡
TCP_SYNMAXRTX


679 
	#TCP_SYNMAXRTX
 6

	)

686 #i‚de‡
TCP_QUEUE_OOSEQ


687 
	#TCP_QUEUE_OOSEQ
 1

	)

697 #i‚de‡
TCP_MSS


698 
	#TCP_MSS
 128

	)

709 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


710 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

717 #i‚de‡
TCP_SND_BUF


718 
	#TCP_SND_BUF
 256

	)

725 #i‚de‡
TCP_SND_QUEUELEN


726 
	#TCP_SND_QUEUELEN
 (4 * (
TCP_SND_BUF
/
TCP_MSS
))

	)

734 #i‚de‡
TCP_SNDLOWAT


735 
	#TCP_SNDLOWAT
 (
TCP_SND_BUF
/2)

	)

741 #i‚de‡
TCP_LISTEN_BACKLOG


742 
	#TCP_LISTEN_BACKLOG
 0

	)

750 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


751 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

761 #i‚de‡
LWIP_EVENT_API


762 
	#LWIP_EVENT_API
 0

	)

763 
	#LWIP_CALLBACK_API
 1

	)

765 
	#LWIP_EVENT_API
 1

	)

766 
	#LWIP_CALLBACK_API
 0

	)

780 #i‚de‡
PBUF_LINK_HLEN


781 
	#PBUF_LINK_HLEN
 14

	)

789 #i‚de‡
PBUF_POOL_BUFSIZE


790 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

802 #i‚de‡
LWIP_NETIF_HOSTNAME


803 
	#LWIP_NETIF_HOSTNAME
 0

	)

809 #i‚de‡
LWIP_NETIF_API


810 
	#LWIP_NETIF_API
 0

	)

817 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


818 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

825 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


826 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

836 #i‚de‡
LWIP_NETIF_HWADDRHINT


837 
	#LWIP_NETIF_HWADDRHINT
 0

	)

844 #i‚de‡
LWIP_NETIF_LOOPBACK


845 
	#LWIP_NETIF_LOOPBACK
 0

	)

852 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


853 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

869 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


870 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

881 #i‚de‡
LWIP_HAVE_LOOPIF


882 
	#LWIP_HAVE_LOOPIF
 0

	)

893 #i‚de‡
LWIP_HAVE_SLIPIF


894 
	#LWIP_HAVE_SLIPIF
 0

	)

905 #i‚de‡
TCPIP_THREAD_NAME


906 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

914 #i‚de‡
TCPIP_THREAD_STACKSIZE


915 
	#TCPIP_THREAD_STACKSIZE
 0

	)

923 #i‚de‡
TCPIP_THREAD_PRIO


924 
	#TCPIP_THREAD_PRIO
 1

	)

932 #i‚de‡
TCPIP_MBOX_SIZE


933 
	#TCPIP_MBOX_SIZE
 0

	)

939 #i‚de‡
SLIPIF_THREAD_NAME


940 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

948 #i‚de‡
SLIPIF_THREAD_STACKSIZE


949 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

957 #i‚de‡
SLIPIF_THREAD_PRIO


958 
	#SLIPIF_THREAD_PRIO
 1

	)

964 #i‚de‡
PPP_THREAD_NAME


965 
	#PPP_THREAD_NAME
 "µpMaö"

	)

973 #i‚de‡
PPP_THREAD_STACKSIZE


974 
	#PPP_THREAD_STACKSIZE
 0

	)

982 #i‚de‡
PPP_THREAD_PRIO


983 
	#PPP_THREAD_PRIO
 1

	)

989 #i‚de‡
DEFAULT_THREAD_NAME


990 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

998 #i‚de‡
DEFAULT_THREAD_STACKSIZE


999 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1007 #i‚de‡
DEFAULT_THREAD_PRIO


1008 
	#DEFAULT_THREAD_PRIO
 1

	)

1016 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1017 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1025 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1026 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1034 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1035 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1043 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1044 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1056 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1057 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1063 #i‚de‡
LWIP_NETCONN


1064 
	#LWIP_NETCONN
 1

	)

1075 #i‚de‡
LWIP_SOCKET


1076 
	#LWIP_SOCKET
 1

	)

1083 #i‚de‡
LWIP_COMPAT_SOCKETS


1084 
	#LWIP_COMPAT_SOCKETS
 1

	)

1092 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1093 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1101 #i‚de‡
LWIP_TCP_KEEPALIVE


1102 
	#LWIP_TCP_KEEPALIVE
 0

	)

1108 #i‚de‡
LWIP_SO_RCVTIMEO


1109 
	#LWIP_SO_RCVTIMEO
 0

	)

1115 #i‚de‡
LWIP_SO_RCVBUF


1116 
	#LWIP_SO_RCVBUF
 0

	)

1122 #i‚de‡
SO_REUSE


1123 
	#SO_REUSE
 0

	)

1134 #i‚de‡
LWIP_STATS


1135 
	#LWIP_STATS
 1

	)

1138 #i‡
LWIP_STATS


1143 #i‚de‡
LWIP_STATS_DISPLAY


1144 
	#LWIP_STATS_DISPLAY
 0

	)

1150 #i‚de‡
LINK_STATS


1151 
	#LINK_STATS
 1

	)

1157 #i‚de‡
ETHARP_STATS


1158 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1164 #i‚de‡
IP_STATS


1165 
	#IP_STATS
 1

	)

1172 #i‚de‡
IPFRAG_STATS


1173 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1179 #i‚de‡
ICMP_STATS


1180 
	#ICMP_STATS
 1

	)

1186 #i‚de‡
IGMP_STATS


1187 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1194 #i‚de‡
UDP_STATS


1195 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1202 #i‚de‡
TCP_STATS


1203 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1209 #i‚de‡
MEM_STATS


1210 
	#MEM_STATS
 1

	)

1216 #i‚de‡
MEMP_STATS


1217 
	#MEMP_STATS
 1

	)

1223 #i‚de‡
SYS_STATS


1224 
	#SYS_STATS
 1

	)

1229 
	#LINK_STATS
 0

	)

1230 
	#IP_STATS
 0

	)

1231 
	#IPFRAG_STATS
 0

	)

1232 
	#ICMP_STATS
 0

	)

1233 
	#IGMP_STATS
 0

	)

1234 
	#UDP_STATS
 0

	)

1235 
	#TCP_STATS
 0

	)

1236 
	#MEM_STATS
 0

	)

1237 
	#MEMP_STATS
 0

	)

1238 
	#SYS_STATS
 0

	)

1239 
	#LWIP_STATS_DISPLAY
 0

	)

1251 #i‚de‡
PPP_SUPPORT


1252 
	#PPP_SUPPORT
 0

	)

1258 #i‚de‡
PPPOE_SUPPORT


1259 
	#PPPOE_SUPPORT
 0

	)

1265 #i‚de‡
PPPOS_SUPPORT


1266 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1269 #i‡
PPP_SUPPORT


1274 #i‚de‡
NUM_PPP


1275 
	#NUM_PPP
 1

	)

1281 #i‚de‡
PAP_SUPPORT


1282 
	#PAP_SUPPORT
 0

	)

1288 #i‚de‡
CHAP_SUPPORT


1289 
	#CHAP_SUPPORT
 0

	)

1295 #i‚de‡
MSCHAP_SUPPORT


1296 
	#MSCHAP_SUPPORT
 0

	)

1302 #i‚de‡
CBCP_SUPPORT


1303 
	#CBCP_SUPPORT
 0

	)

1309 #i‚de‡
CCP_SUPPORT


1310 
	#CCP_SUPPORT
 0

	)

1316 #i‚de‡
VJ_SUPPORT


1317 
	#VJ_SUPPORT
 0

	)

1323 #i‚de‡
MD5_SUPPORT


1324 
	#MD5_SUPPORT
 0

	)

1330 #i‚de‡
FSM_DEFTIMEOUT


1331 
	#FSM_DEFTIMEOUT
 6

	)

1334 #i‚de‡
FSM_DEFMAXTERMREQS


1335 
	#FSM_DEFMAXTERMREQS
 2

	)

1338 #i‚de‡
FSM_DEFMAXCONFREQS


1339 
	#FSM_DEFMAXCONFREQS
 10

	)

1342 #i‚de‡
FSM_DEFMAXNAKLOOPS


1343 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1346 #i‚de‡
UPAP_DEFTIMEOUT


1347 
	#UPAP_DEFTIMEOUT
 6

	)

1350 #i‚de‡
UPAP_DEFREQTIME


1351 
	#UPAP_DEFREQTIME
 30

	)

1354 #i‚de‡
CHAP_DEFTIMEOUT


1355 
	#CHAP_DEFTIMEOUT
 6

	)

1358 #i‚de‡
CHAP_DEFTRANSMITS


1359 
	#CHAP_DEFTRANSMITS
 10

	)

1363 #i‚de‡
LCP_ECHOINTERVAL


1364 
	#LCP_ECHOINTERVAL
 0

	)

1368 #i‚de‡
LCP_MAXECHOFAILS


1369 
	#LCP_MAXECHOFAILS
 3

	)

1373 #i‚de‡
PPP_MAXIDLEFLAG


1374 
	#PPP_MAXIDLEFLAG
 100

	)

1385 
	#PPP_MTU
 1500

	)

1386 #i‚de‡
PPP_MAXMTU


1388 
	#PPP_MAXMTU
 1500

	)

1390 
	#PPP_MINMTU
 64

	)

1391 
	#PPP_MRU
 1500

	)

1392 
	#PPP_MAXMRU
 1500

	)

1393 #i‚de‡
PPP_DEFMRU


1394 
	#PPP_DEFMRU
 296

	)

1396 
	#PPP_MINMRU
 128

	)

1399 
	#MAXNAMELEN
 256

	)

1400 
	#MAXSECRETLEN
 256

	)

1412 #i‚de‡
CHECKSUM_GEN_IP


1413 
	#CHECKSUM_GEN_IP
 1

	)

1419 #i‚de‡
CHECKSUM_GEN_UDP


1420 
	#CHECKSUM_GEN_UDP
 1

	)

1426 #i‚de‡
CHECKSUM_GEN_TCP


1427 
	#CHECKSUM_GEN_TCP
 1

	)

1433 #i‚de‡
CHECKSUM_CHECK_IP


1434 
	#CHECKSUM_CHECK_IP
 1

	)

1440 #i‚de‡
CHECKSUM_CHECK_UDP


1441 
	#CHECKSUM_CHECK_UDP
 1

	)

1447 #i‚de‡
CHECKSUM_CHECK_TCP


1448 
	#CHECKSUM_CHECK_TCP
 1

	)

1461 #i‚de‡
LWIP_DBG_MIN_LEVEL


1462 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_OFF


	)

1469 #i‚de‡
LWIP_DBG_TYPES_ON


1470 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1476 #i‚de‡
ETHARP_DEBUG


1477 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1483 #i‚de‡
NETIF_DEBUG


1484 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1490 #i‚de‡
PBUF_DEBUG


1491 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1497 #i‚de‡
API_LIB_DEBUG


1498 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1504 #i‚de‡
API_MSG_DEBUG


1505 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1511 #i‚de‡
SOCKETS_DEBUG


1512 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1518 #i‚de‡
ICMP_DEBUG


1519 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1525 #i‚de‡
IGMP_DEBUG


1526 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1532 #i‚de‡
INET_DEBUG


1533 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1539 #i‚de‡
IP_DEBUG


1540 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1546 #i‚de‡
IP_REASS_DEBUG


1547 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1553 #i‚de‡
RAW_DEBUG


1554 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1560 #i‚de‡
MEM_DEBUG


1561 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1567 #i‚de‡
MEMP_DEBUG


1568 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1574 #i‚de‡
SYS_DEBUG


1575 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1581 #i‚de‡
TCP_DEBUG


1582 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1588 #i‚de‡
TCP_INPUT_DEBUG


1589 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1595 #i‚de‡
TCP_FR_DEBUG


1596 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1603 #i‚de‡
TCP_RTO_DEBUG


1604 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1610 #i‚de‡
TCP_CWND_DEBUG


1611 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1617 #i‚de‡
TCP_WND_DEBUG


1618 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1624 #i‚de‡
TCP_OUTPUT_DEBUG


1625 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1631 #i‚de‡
TCP_RST_DEBUG


1632 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1638 #i‚de‡
TCP_QLEN_DEBUG


1639 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1645 #i‚de‡
UDP_DEBUG


1646 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1652 #i‚de‡
TCPIP_DEBUG


1653 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1659 #i‚de‡
PPP_DEBUG


1660 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

1666 #i‚de‡
SLIP_DEBUG


1667 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

1673 #i‚de‡
DHCP_DEBUG


1674 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

1680 #i‚de‡
AUTOIP_DEBUG


1681 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

1687 #i‚de‡
SNMP_MSG_DEBUG


1688 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1694 #i‚de‡
SNMP_MIB_DEBUG


1695 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

1701 #i‚de‡
DNS_DEBUG


1702 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@net/lwip/include/lwip/pbuf.h

34 #i‚de‡
__LWIP_PBUF_H__


35 
	#__LWIP_PBUF_H__


	)

37 
	~"lwù/›t.h
"

38 
	~"lwù/îr.h
"

40 #ifde‡
__˝lu•lus


44 
	#PBUF_TRANSPORT_HLEN
 20

	)

45 
	#PBUF_IP_HLEN
 20

	)

48 
PBUF_TRANSPORT
,

49 
PBUF_IP
,

50 
PBUF_LINK
,

51 
PBUF_RAW


52 } 
	tpbuf_œyî
;

55 
PBUF_RAM
,

56 
PBUF_ROM
,

57 
PBUF_REF
,

58 
PBUF_POOL


59 } 
	tpbuf_ty≥
;

63 
	#PBUF_FLAG_PUSH
 0x01U

	)

65 
	spbuf
 {

67 
pbuf
 *
√xt
;

70 *
∑ylﬂd
;

79 
u16_t
 
tŸ_Àn
;

82 
u16_t
 
Àn
;

85 
u8_t
 
ty≥
;

88 
u8_t
 
Êags
;

95 
u16_t
 
ªf
;

100 
	#pbuf_öô
()

	)

102 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
size
, 
pbuf_ty≥
 
ty≥
);

103 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

104 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

105 
pbuf_ªf
(
pbuf
 *
p
);

106 
pbuf_ªf_chaö
(
pbuf
 *
p
);

107 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

108 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

109 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

110 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

111 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

112 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

113 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

115 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/raw.h

33 #i‚de‡
__LWIP_RAW_H__


34 
	#__LWIP_RAW_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_RAW


40 
	~"lwù/pbuf.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/ù_addr.h
"

45 #ifde‡
__˝lu•lus


49 
	søw_pcb
 {

51 
IP_PCB
;

53 
øw_pcb
 *
√xt
;

55 
u8_t
 
¥Ÿocﬁ
;

67 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

68 
ù_addr
 *
addr
);

70 *
ªcv_¨g
;

75 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

76 
øw_ªmove
 (
øw_pcb
 *
pcb
);

77 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

78 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

80 
øw_ªcv
 (
øw_pcb
 *
pcb
,

81 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
,

82 
pbuf
 *
p
,

83 
ù_addr
 *
addr
),

84 *
ªcv_¨g
);

85 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
);

86 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

89 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

90 
	#øw_öô
(Ë

	)

92 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/sio.h

36 #i‚de‡
__SIO_H__


37 
	#__SIO_H__


	)

39 
	~"lwù/¨ch.h
"

41 #ifde‡
__˝lu•lus


47 #i‚de‡
__sio_fd_t_deföed


48 * 
	tsio_fd_t
;

54 #i‚de‡
sio_›í


55 
sio_fd_t
 
sio_›í
(
u8_t
);

58 #i‚de‡
sio_£nd


59 
sio_£nd
(
u8_t
, 
sio_fd_t
);

62 #i‚de‡
sio_ªcv


63 
u8_t
 
sio_ªcv
(
sio_fd_t
);

66 #i‚de‡
sio_ªad


67 
u32_t
 
sio_ªad
(
sio_fd_t
, 
u8_t
 *, u32_t);

70 #i‚de‡
sio_wrôe


71 
u32_t
 
sio_wrôe
(
sio_fd_t
, 
u8_t
 *, u32_t);

74 #i‚de‡
sio_ªad_ab‹t


75 
sio_ªad_ab‹t
(
sio_fd_t
);

78 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp.h

34 #i‚de‡
__LWIP_SNMP_H__


35 
	#__LWIP_SNMP_H__


	)

37 
	~"lwù/›t.h
"

38 
	~"lwù/√tif.h
"

39 
	~"lwù/udp.h
"

41 #ifde‡
__˝lu•lus


48 
	e¢mp_ifTy≥
 {

49 
¢mp_ifTy≥_Ÿhî
=1,

50 
¢mp_ifTy≥_ªguœr1822
,

51 
¢mp_ifTy≥_hdh1822
,

52 
¢mp_ifTy≥_ddn_x25
,

53 
¢mp_ifTy≥_rfc877_x25
,

54 
¢mp_ifTy≥_ëhî√t_csmacd
,

55 
¢mp_ifTy≥_iso88023_csmacd
,

56 
¢mp_ifTy≥_iso88024_tokíBus
,

57 
¢mp_ifTy≥_iso88025_tokíRög
,

58 
¢mp_ifTy≥_iso88026_m™
,

59 
¢mp_ifTy≥_°¨L™
,

60 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

61 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

62 
¢mp_ifTy≥_hy≥rch™√l
,

63 
¢mp_ifTy≥_fddi
,

64 
¢mp_ifTy≥_œpb
,

65 
¢mp_ifTy≥_sdlc
,

66 
¢mp_ifTy≥_ds1
,

67 
¢mp_ifTy≥_e1
,

68 
¢mp_ifTy≥_basicISDN
,

69 
¢mp_ifTy≥_¥im¨yISDN
,

70 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

71 
¢mp_ifTy≥_µp
,

72 
¢mp_ifTy≥_so·w¨eLo›back
,

73 
¢mp_ifTy≥_e⁄
,

74 
¢mp_ifTy≥_ëhî√t_3Mbô
,

75 
¢mp_ifTy≥_nsù
,

76 
¢mp_ifTy≥_¶ù
,

77 
¢mp_ifTy≥_u…ø
,

78 
¢mp_ifTy≥_ds3
,

79 
¢mp_ifTy≥_sù
,

80 
¢mp_ifTy≥_‰ame_ªœy


83 #i‡
LWIP_SNMP


86 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

89 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

92 
	s¢mp_obj_id


94 
u8_t
 
Àn
;

95 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

99 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

100 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

101 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

102 
¢mp_öc_sysu±ime
();

103 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

104 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

105 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

106 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

107 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

110 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

111 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

112 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

113 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

114 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

115 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

116 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

117 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

118 
¢mp_öc_iÊi°
();

119 
¢mp_dec_iÊi°
();

122 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

123 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

126 
¢mp_öc_ùöª˚ives
();

127 
¢mp_öc_ùöhdªº‹s
();

128 
¢mp_öc_ùöaddªº‹s
();

129 
¢mp_öc_ùf‹wd©agøms
();

130 
¢mp_öc_ùöunknow≈rŸos
();

131 
¢mp_öc_ùödisˇrds
();

132 
¢mp_öc_ùödñivîs
();

133 
¢mp_öc_ùouåeque°s
();

134 
¢mp_öc_ùoutdisˇrds
();

135 
¢mp_öc_ùouä‹ouãs
();

136 
¢mp_öc_ùªasmªqds
();

137 
¢mp_öc_ùªasmoks
();

138 
¢mp_öc_ùªasmÁûs
();

139 
¢mp_öc_ù‰agoks
();

140 
¢mp_öc_ù‰agÁûs
();

141 
¢mp_öc_ù‰ag¸óãs
();

142 
¢mp_öc_ùroutögdisˇrds
();

143 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

144 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

145 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

146 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

149 
¢mp_öc_icmpömsgs
();

150 
¢mp_öc_icmpöîr‹s
();

151 
¢mp_öc_icmpöde°uƒóchs
();

152 
¢mp_öc_icmpötimìxcds
();

153 
¢mp_öc_icmpö∑rm¥obs
();

154 
¢mp_öc_icmpö§cquíchs
();

155 
¢mp_öc_icmpöªdúe˘s
();

156 
¢mp_öc_icmpöechos
();

157 
¢mp_öc_icmpöech‹ïs
();

158 
¢mp_öc_icmpötime°amps
();

159 
¢mp_öc_icmpötime°am¥ïs
();

160 
¢mp_öc_icmpöaddrmasks
();

161 
¢mp_öc_icmpöaddrmaskªps
();

162 
¢mp_öc_icmpoutmsgs
();

163 
¢mp_öc_icmpouãº‹s
();

164 
¢mp_öc_icmpoutde°uƒóchs
();

165 
¢mp_öc_icmpouâimìxcds
();

166 
¢mp_öc_icmpouç¨m¥obs
();

167 
¢mp_öc_icmpout§cquíchs
();

168 
¢mp_öc_icmpouåedúe˘s
();

169 
¢mp_öc_icmpouãchos
();

170 
¢mp_öc_icmpouãch‹ïs
();

171 
¢mp_öc_icmpouâime°amps
();

172 
¢mp_öc_icmpouâime°am¥ïs
();

173 
¢mp_öc_icmpouèddrmasks
();

174 
¢mp_öc_icmpouèddrmaskªps
();

177 
¢mp_öc_t˝a˘ive›ís
();

178 
¢mp_öc_t˝∑ssive›ís
();

179 
¢mp_öc_t˝©ãm±Áûs
();

180 
¢mp_öc_t˝e°abª£ts
();

181 
¢mp_öc_t˝ö£gs
();

182 
¢mp_öc_t˝out£gs
();

183 
¢mp_öc_t˝ªå™s£gs
();

184 
¢mp_öc_t˝öîrs
();

185 
¢mp_öc_t˝ouå°s
();

188 
¢mp_öc_udpöd©agøms
();

189 
¢mp_öc_ud≤›‹ts
();

190 
¢mp_öc_udpöîr‹s
();

191 
¢mp_öc_udpoutd©agøms
();

192 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

193 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

196 
¢mp_öc_¢mpöpkts
();

197 
¢mp_öc_¢mpouçkts
();

198 
¢mp_öc_¢mpöbadvîsi⁄s
();

199 
¢mp_öc_¢mpöbadcommunôy«mes
();

200 
¢mp_öc_¢mpöbadcommunôyu£s
();

201 
¢mp_öc_¢mpöa¢∑r£îrs
();

202 
¢mp_öc_¢mpötoobigs
();

203 
¢mp_öc_¢mpönosuch«mes
();

204 
¢mp_öc_¢mpöbadvÆues
();

205 
¢mp_öc_¢mpöªad⁄lys
();

206 
¢mp_öc_¢mpögíîrs
();

207 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

208 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

209 
¢mp_öc_¢mpögëªque°s
();

210 
¢mp_öc_¢mpögë√xts
();

211 
¢mp_öc_¢mpö£åeque°s
();

212 
¢mp_öc_¢mpögëª•⁄£s
();

213 
¢mp_öc_¢mpöå≠s
();

214 
¢mp_öc_¢mpouâoobigs
();

215 
¢mp_öc_¢mpouäosuch«mes
();

216 
¢mp_öc_¢mpoutbadvÆues
();

217 
¢mp_öc_¢mpoutgíîrs
();

218 
¢mp_öc_¢mpoutgëªque°s
();

219 
¢mp_öc_¢mpoutgë√xts
();

220 
¢mp_öc_¢mpout£åeque°s
();

221 
¢mp_öc_¢mpoutgëª•⁄£s
();

222 
¢mp_öc_¢mpouâøps
();

223 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

224 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

225 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

232 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

233 
	#¢mp_£t_sysobjid
(
oid
);

	)

234 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

235 
	#¢mp_öc_sysu±ime
()

	)

236 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

237 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

238 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

239 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

240 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

243 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

244 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

245 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

246 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

247 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

248 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

249 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

250 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

251 
	#¢mp_öc_iÊi°
()

	)

252 
	#¢mp_dec_iÊi°
()

	)

255 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

256 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

259 
	#¢mp_öc_ùöª˚ives
()

	)

260 
	#¢mp_öc_ùöhdªº‹s
()

	)

261 
	#¢mp_öc_ùöaddªº‹s
()

	)

262 
	#¢mp_öc_ùf‹wd©agøms
()

	)

263 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

264 
	#¢mp_öc_ùödisˇrds
()

	)

265 
	#¢mp_öc_ùödñivîs
()

	)

266 
	#¢mp_öc_ùouåeque°s
()

	)

267 
	#¢mp_öc_ùoutdisˇrds
()

	)

268 
	#¢mp_öc_ùouä‹ouãs
()

	)

269 
	#¢mp_öc_ùªasmªqds
()

	)

270 
	#¢mp_öc_ùªasmoks
()

	)

271 
	#¢mp_öc_ùªasmÁûs
()

	)

272 
	#¢mp_öc_ù‰agoks
()

	)

273 
	#¢mp_öc_ù‰agÁûs
()

	)

274 
	#¢mp_öc_ù‰ag¸óãs
()

	)

275 
	#¢mp_öc_ùroutögdisˇrds
()

	)

276 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

277 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

278 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

279 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

282 
	#¢mp_öc_icmpömsgs
()

	)

283 
	#¢mp_öc_icmpöîr‹s
()

	)

284 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

285 
	#¢mp_öc_icmpötimìxcds
()

	)

286 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

287 
	#¢mp_öc_icmpö§cquíchs
()

	)

288 
	#¢mp_öc_icmpöªdúe˘s
()

	)

289 
	#¢mp_öc_icmpöechos
()

	)

290 
	#¢mp_öc_icmpöech‹ïs
()

	)

291 
	#¢mp_öc_icmpötime°amps
()

	)

292 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

293 
	#¢mp_öc_icmpöaddrmasks
()

	)

294 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

295 
	#¢mp_öc_icmpoutmsgs
()

	)

296 
	#¢mp_öc_icmpouãº‹s
()

	)

297 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

298 
	#¢mp_öc_icmpouâimìxcds
()

	)

299 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

300 
	#¢mp_öc_icmpout§cquíchs
()

	)

301 
	#¢mp_öc_icmpouåedúe˘s
()

	)

302 
	#¢mp_öc_icmpouãchos
()

	)

303 
	#¢mp_öc_icmpouãch‹ïs
()

	)

304 
	#¢mp_öc_icmpouâime°amps
()

	)

305 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

306 
	#¢mp_öc_icmpouèddrmasks
()

	)

307 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

309 
	#¢mp_öc_t˝a˘ive›ís
()

	)

310 
	#¢mp_öc_t˝∑ssive›ís
()

	)

311 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

312 
	#¢mp_öc_t˝e°abª£ts
()

	)

313 
	#¢mp_öc_t˝ö£gs
()

	)

314 
	#¢mp_öc_t˝out£gs
()

	)

315 
	#¢mp_öc_t˝ªå™s£gs
()

	)

316 
	#¢mp_öc_t˝öîrs
()

	)

317 
	#¢mp_öc_t˝ouå°s
()

	)

320 
	#¢mp_öc_udpöd©agøms
()

	)

321 
	#¢mp_öc_ud≤›‹ts
()

	)

322 
	#¢mp_öc_udpöîr‹s
()

	)

323 
	#¢mp_öc_udpoutd©agøms
()

	)

324 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

325 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

328 
	#¢mp_öc_¢mpöpkts
()

	)

329 
	#¢mp_öc_¢mpouçkts
()

	)

330 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

331 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

332 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

333 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

334 
	#¢mp_öc_¢mpötoobigs
()

	)

335 
	#¢mp_öc_¢mpönosuch«mes
()

	)

336 
	#¢mp_öc_¢mpöbadvÆues
()

	)

337 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

338 
	#¢mp_öc_¢mpögíîrs
()

	)

339 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

340 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

341 
	#¢mp_öc_¢mpögëªque°s
()

	)

342 
	#¢mp_öc_¢mpögë√xts
()

	)

343 
	#¢mp_öc_¢mpö£åeque°s
()

	)

344 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

345 
	#¢mp_öc_¢mpöå≠s
()

	)

346 
	#¢mp_öc_¢mpouâoobigs
()

	)

347 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

348 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

349 
	#¢mp_öc_¢mpoutgíîrs
()

	)

350 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

351 
	#¢mp_öc_¢mpoutgë√xts
()

	)

352 
	#¢mp_öc_¢mpout£åeque°s
()

	)

353 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

354 
	#¢mp_öc_¢mpouâøps
()

	)

355 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

356 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

357 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

361 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp_asn1.h

36 #i‚de‡
__LWIP_SNMP_ASN1_H__


37 
	#__LWIP_SNMP_ASN1_H__


	)

39 
	~"lwù/›t.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/¢mp.h
"

44 #ifde‡
__˝lu•lus


48 
	#SNMP_ASN1_UNIV
 (!0x80 | !0x40)

	)

49 
	#SNMP_ASN1_APPLIC
 (!0x80 | 0x40)

	)

50 
	#SNMP_ASN1_CONTXT
 ( 0x80 | !0x40)

	)

52 
	#SNMP_ASN1_CONSTR
 (0x20)

	)

53 
	#SNMP_ASN1_PRIMIT
 (!0x20)

	)

56 
	#SNMP_ASN1_INTEG
 2

	)

57 
	#SNMP_ASN1_OC_STR
 4

	)

58 
	#SNMP_ASN1_NUL
 5

	)

59 
	#SNMP_ASN1_OBJ_ID
 6

	)

60 
	#SNMP_ASN1_SEQ
 16

	)

63 
	#SNMP_ASN1_IPADDR
 0

	)

64 
	#SNMP_ASN1_COUNTER
 1

	)

65 
	#SNMP_ASN1_GAUGE
 2

	)

66 
	#SNMP_ASN1_TIMETICKS
 3

	)

67 
	#SNMP_ASN1_OPAQUE
 4

	)

70 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

71 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

72 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

73 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

74 
	#SNMP_ASN1_PDU_TRAP
 4

	)

76 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

77 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

78 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

79 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

81 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

83 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

84 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

87 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

88 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

89 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
);

90 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

92 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
);

94 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp_msg.h

36 #i‚de‡
__LWIP_SNMP_MSG_H__


37 
	#__LWIP_SNMP_MSG_H__


	)

39 
	~"lwù/›t.h
"

40 
	~"lwù/¢mp.h
"

41 
	~"lwù/¢mp_°ru˘s.h
"

43 #i‡
SNMP_PRIVATE_MIB


44 
	~"¥iv©e_mib.h
"

47 #ifde‡
__˝lu•lus


53 #i‚de‡
SNMP_IN_PORT


54 
	#SNMP_IN_PORT
 161

	)

58 #i‚de‡
SNMP_TRAP_PORT


59 
	#SNMP_TRAP_PORT
 162

	)

62 
	#SNMP_ES_NOERROR
 0

	)

63 
	#SNMP_ES_TOOBIG
 1

	)

64 
	#SNMP_ES_NOSUCHNAME
 2

	)

65 
	#SNMP_ES_BADVALUE
 3

	)

66 
	#SNMP_ES_READONLY
 4

	)

67 
	#SNMP_ES_GENERROR
 5

	)

69 
	#SNMP_GENTRAP_COLDSTART
 0

	)

70 
	#SNMP_GENTRAP_WARMSTART
 1

	)

71 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

72 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

74 
	s¢mp_v¨böd


77 
¢mp_v¨böd
 *
√xt
;

79 
¢mp_v¨böd
 *
¥ev
;

82 
u8_t
 
idít_Àn
;

84 
s32_t
 *
idít
;

87 
u8_t
 
vÆue_ty≥
;

89 
u8_t
 
vÆue_Àn
;

91 *
vÆue
;

94 
u8_t
 
£qÀ∆í
;

96 
u8_t
 
ﬁíÀn
;

98 
u8_t
 
vÀ∆í
;

100 
u16_t
 
£qÀn
;

102 
u16_t
 
ﬁí
;

104 
u16_t
 
vÀn
;

107 
	s¢mp_v¨böd_roŸ


109 
¢mp_v¨böd
 *
hód
;

110 
¢mp_v¨böd
 *
èû
;

112 
u8_t
 
cou¡
;

114 
u8_t
 
£qÀ∆í
;

116 
u16_t
 
£qÀn
;

120 
	s¢mp_ª•_hódî_Àngths


123 
u8_t
 
îridxÀ∆í
;

125 
u8_t
 
îr°©À∆í
;

127 
u8_t
 
ridÀ∆í
;

129 
u8_t
 
pduÀ∆í
;

131 
u8_t
 
comÀ∆í
;

133 
u8_t
 
vîÀ∆í
;

135 
u8_t
 
£qÀ∆í
;

138 
u16_t
 
îridxÀn
;

140 
u16_t
 
îr°©Àn
;

142 
u16_t
 
ridÀn
;

144 
u16_t
 
pduÀn
;

146 
u16_t
 
comÀn
;

148 
u16_t
 
vîÀn
;

150 
u16_t
 
£qÀn
;

154 
	s¢mp_å≠_hódî_Àngths


157 
u8_t
 
t¶íÀn
;

159 
u8_t
 
°ΩÀ∆í
;

161 
u8_t
 
gå∂íÀn
;

163 
u8_t
 
ØddæíÀn
;

165 
u8_t
 
eidÀ∆í
;

167 
u8_t
 
pduÀ∆í
;

169 
u8_t
 
comÀ∆í
;

171 
u8_t
 
vîÀ∆í
;

173 
u8_t
 
£qÀ∆í
;

176 
u16_t
 
t¶í
;

178 
u16_t
 
°ΩÀn
;

180 
u16_t
 
gå∂í
;

182 
u16_t
 
Øddæí
;

184 
u16_t
 
eidÀn
;

186 
u16_t
 
pduÀn
;

188 
u16_t
 
comÀn
;

190 
u16_t
 
vîÀn
;

192 
u16_t
 
£qÀn
;

196 
	#SNMP_MSG_EMPTY
 0

	)

198 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

201 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

202 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

203 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

204 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

205 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

209 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

210 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

211 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

212 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

213 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

215 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

216 
	s¢mp_msg_p°©


219 
udp_pcb
 *
pcb
;

221 
ù_addr
 
sù
;

223 
u16_t
 
•
;

225 
u8_t
 
π
;

227 
s32_t
 
rid
;

229 
s32_t
 
îr‹_°©us
;

231 
s32_t
 
îr‹_ödex
;

233 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

235 
u8_t
 
com_°æí
;

237 
u8_t
 
°©e
;

239 
mib_exã∫Æ_node
 *
ext_mib_node
;

240 
¢mp_«me_±r
 
ext_«me_±r
;

241 
obj_def
 
ext_obje˘_def
;

242 
¢mp_obj_id
 
ext_oid
;

244 
u8_t
 
vb_idx
;

246 
¢mp_v¨böd
 *
vb_±r
;

248 
¢mp_v¨böd_roŸ
 
övb
;

250 
¢mp_v¨böd_roŸ
 
outvb
;

252 
¢mp_ª•_hódî_Àngths
 
rhl
;

255 
	s¢mp_msg_å≠


258 
udp_pcb
 *
pcb
;

260 
ù_addr
 
dù
;

263 
¢mp_obj_id
 *
íãΩri£
;

265 
u8_t
 
sù_øw
[4];

267 
u32_t
 
gí_å≠
;

269 
u32_t
 
•c_å≠
;

271 
u32_t
 
ts
;

273 
¢mp_v¨böd_roŸ
 
outvb
;

275 
¢mp_å≠_hódî_Àngths
 
thl
;

279 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

281 c⁄° 
¢mp_publiccommunôy
[7];

283 
¢mp_msg_å≠
 
å≠_msg
;

286 
¢mp_öô
();

287 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

288 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
);

291 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

292 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

293 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

294 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

295 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

298 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

299 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

300 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

301 
¢mp_cﬁd°¨t_å≠
();

302 
¢mp_authÁû_å≠
();

304 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp_structs.h

38 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


39 
	#__LWIP_SNMP_STRUCTS_H__


	)

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_SNMP


45 
	~"lwù/¢mp.h
"

47 #i‡
SNMP_PRIVATE_MIB


48 
	~"¥iv©e_mib.h
"

51 #ifde‡
__˝lu•lus


56 
	#MIB_OBJECT_NONE
 0

	)

57 
	#MIB_OBJECT_SCALAR
 1

	)

58 
	#MIB_OBJECT_TAB
 2

	)

61 
	#MIB_OBJECT_READ_ONLY
 0

	)

62 
	#MIB_OBJECT_READ_WRITE
 1

	)

63 
	#MIB_OBJECT_WRITE_ONLY
 2

	)

64 
	#MIB_OBJECT_NOT_ACCESSIBLE
 3

	)

67 
	sobj_def


70 
u8_t
 
ö°™˚
;

72 
u8_t
 
ac˚ss
;

74 
u8_t
 
a¢_ty≥
;

76 
u16_t
 
v_Àn
;

78 
u8_t
 
id_ö°_Àn
;

80 
s32_t
 *
id_ö°_±r
;

83 
	s¢mp_«me_±r


85 
u8_t
 
idít_Àn
;

86 
s32_t
 *
idít
;

90 
	#MIB_NODE_SC
 0x01

	)

92 
	#MIB_NODE_AR
 0x02

	)

94 
	#MIB_NODE_RA
 0x03

	)

96 
	#MIB_NODE_LR
 0x04

	)

98 
	#MIB_NODE_EX
 0x05

	)

101 
	smib_node


104 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

107 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

109 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

111 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

113 c⁄° 
u8_t
 
node_ty≥
;

115 c⁄° 
u16_t
 
maxÀngth
;

119 
mib_node
 
	tmib_sˇœr_node
;

123 
	smib_¨øy_node


126 (* c⁄° 
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

127 (* c⁄° 
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

128 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

129 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

131 c⁄° 
u8_t
 
node_ty≥
;

132 c⁄° 
u16_t
 
maxÀngth
;

135 c⁄° 
s32_t
 *
objid
;

136 
mib_node
* c⁄° *
≈å
;

141 
	smib_øm_¨øy_node


144 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

145 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

146 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

147 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

149 
u8_t
 
node_ty≥
;

150 
u16_t
 
maxÀngth
;

153 
s32_t
 *
objid
;

154 
mib_node
 **
≈å
;

157 
	smib_li°_node


159 
mib_li°_node
 *
¥ev
;

160 
mib_li°_node
 *
√xt
;

161 
s32_t
 
objid
;

162 
mib_node
 *
≈å
;

167 
	smib_li°_roŸnode


170 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

171 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

172 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

173 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

175 
u8_t
 
node_ty≥
;

176 
u16_t
 
maxÀngth
;

179 
mib_li°_node
 *
hód
;

180 
mib_li°_node
 *
èû
;

182 
u16_t
 
cou¡
;

187 
	smib_exã∫Æ_node


190 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

191 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

192 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

193 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

195 
u8_t
 
node_ty≥
;

196 
u16_t
 
maxÀngth
;

201 * 
addr_öf
;

203 
u8_t
 
åì_Àvñs
;

205 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

208 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

209 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

212 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

213 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

214 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

215 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

217 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

218 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

219 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

220 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

223 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

224 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

225 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

226 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

230 c⁄° 
mib_¨øy_node
 
öã∫ë
;

233 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

234 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

235 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

236 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

238 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
);

239 
¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
);

240 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

241 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

243 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

244 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

245 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

246 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

248 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

249 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

250 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

252 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

253 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

254 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

255 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

257 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/sockets.h

35 #i‚de‡
__LWIP_SOCKETS_H__


36 
	#__LWIP_SOCKETS_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SOCKET


42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/öë.h
"

45 #ifde‡
__˝lu•lus


50 
	ssockaddr_ö
 {

51 
u8_t
 
sö_Àn
;

52 
u8_t
 
sö_Ámûy
;

53 
u16_t
 
sö_p‹t
;

54 
ö_addr
 
sö_addr
;

55 
sö_zîo
[8];

58 
	ssockaddr
 {

59 
u8_t
 
ß_Àn
;

60 
u8_t
 
ß_Ámûy
;

61 
ß_d©a
[14];

64 #i‚de‡
sockÀn_t


65 
	#sockÀn_t
 
u32_t


	)

69 
	#SOCK_STREAM
 1

	)

70 
	#SOCK_DGRAM
 2

	)

71 
	#SOCK_RAW
 3

	)

76 
	#SO_DEBUG
 0x0001

	)

77 
	#SO_ACCEPTCONN
 0x0002

	)

78 
	#SO_REUSEADDR
 0x0004

	)

79 
	#SO_KEEPALIVE
 0x0008

	)

80 
	#SO_DONTROUTE
 0x0010

	)

81 
	#SO_BROADCAST
 0x0020

	)

82 
	#SO_USELOOPBACK
 0x0040

	)

83 
	#SO_LINGER
 0x0080

	)

84 
	#SO_OOBINLINE
 0x0100

	)

85 
	#SO_REUSEPORT
 0x0200

	)

87 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

92 
	#SO_SNDBUF
 0x1001

	)

93 
	#SO_RCVBUF
 0x1002

	)

94 
	#SO_SNDLOWAT
 0x1003

	)

95 
	#SO_RCVLOWAT
 0x1004

	)

96 
	#SO_SNDTIMEO
 0x1005

	)

97 
	#SO_RCVTIMEO
 0x1006

	)

98 
	#SO_ERROR
 0x1007

	)

99 
	#SO_TYPE
 0x1008

	)

100 
	#SO_CONTIMEO
 0x1009

	)

101 
	#SO_NO_CHECK
 0x100®

	)

107 
	slögî
 {

108 
l_⁄off
;

109 
l_lögî
;

115 
	#SOL_SOCKET
 0xff‡

	)

118 
	#AF_UNSPEC
 0

	)

119 
	#AF_INET
 2

	)

120 
	#PF_INET
 
AF_INET


	)

121 
	#PF_UNSPEC
 
AF_UNSPEC


	)

123 
	#IPPROTO_IP
 0

	)

124 
	#IPPROTO_TCP
 6

	)

125 
	#IPPROTO_UDP
 17

	)

126 
	#IPPROTO_UDPLITE
 136

	)

128 
	#INADDR_ANY
 0

	)

129 
	#INADDR_BROADCAST
 0xffffffff

	)

132 
	#MSG_PEEK
 0x01

	)

133 
	#MSG_WAITALL
 0x02

	)

134 
	#MSG_OOB
 0x04

	)

135 
	#MSG_DONTWAIT
 0x08

	)

136 
	#MSG_MORE
 0x10

	)

142 
	#IP_TOS
 1

	)

143 
	#IP_TTL
 2

	)

145 #i‡
LWIP_TCP


149 
	#TCP_NODELAY
 0x01

	)

150 
	#TCP_KEEPALIVE
 0x02

	)

151 
	#TCP_KEEPIDLE
 0x03

	)

152 
	#TCP_KEEPINTVL
 0x04

	)

153 
	#TCP_KEEPCNT
 0x05

	)

156 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


160 
	#UDPLITE_SEND_CSCOV
 0x01

	)

161 
	#UDPLITE_RECV_CSCOV
 0x02

	)

165 #i‡
LWIP_IGMP


169 
	#IP_ADD_MEMBERSHIP
 3

	)

170 
	#IP_DROP_MEMBERSHIP
 4

	)

171 
	#IP_MULTICAST_TTL
 5

	)

172 
	#IP_MULTICAST_IF
 6

	)

173 
	#IP_MULTICAST_LOOP
 7

	)

175 
	sù_mªq
 {

176 
ö_addr
 
imr_mu…üddr
;

177 
ö_addr
 
imr_öãrÁ˚
;

178 } 
	tù_mªq
;

197 
	#IPTOS_TOS_MASK
 0x1E

	)

198 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

199 
	#IPTOS_LOWDELAY
 0x10

	)

200 
	#IPTOS_THROUGHPUT
 0x08

	)

201 
	#IPTOS_RELIABILITY
 0x04

	)

202 
	#IPTOS_LOWCOST
 0x02

	)

203 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

214 
	#IPTOS_PREC_MASK
 0xe0

	)

215 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

216 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

217 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

218 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

219 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

220 
	#IPTOS_PREC_FLASH
 0x60

	)

221 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

222 
	#IPTOS_PREC_PRIORITY
 0x20

	)

223 
	#IPTOS_PREC_ROUTINE
 0x00

	)

236 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

237 
	#IOCPARM_MASK
 0x7fU

	)

238 
	#IOC_VOID
 0x20000000UL

	)

239 
	#IOC_OUT
 0x40000000UL

	)

240 
	#IOC_IN
 0x80000000UL

	)

241 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

244 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

246 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

248 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

251 #i‚de‡
FIONREAD


252 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

254 #i‚de‡
FIONBIO


255 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

259 #i‚de‡
SIOCSHIWAT


260 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

261 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

262 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

263 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

264 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

268 #i‚de‡
O_NONBLOCK


269 
	#O_NONBLOCK
 04000U

	)

273 #i‚de‡
FD_SET


274 #unde‡
FD_SETSIZE


276 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

277 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

278 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

279 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

280 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

282 
	sfd_£t
 {

283 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

284 } 
	tfd_£t
;

290 #i‚de‡
LWIP_TIMEVAL_PRIVATE


291 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

294 #i‡
LWIP_TIMEVAL_PRIVATE


295 
	stimevÆ
 {

296 
tv_£c
;

297 
tv_u£c
;

301 
lwù_sockë_öô
();

303 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

304 
lwù_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

305 
lwù_shutdown
(
s
, 
how
);

306 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

307 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

308 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

309 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

310 
lwù_˛o£
(
s
);

311 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

312 
lwù_li°í
(
s
, 
backlog
);

313 
lwù_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
);

314 
lwù_ªad
(
s
, *
mem
, 
Àn
);

315 
lwù_ªcv‰om
(
s
, *
mem
, 
Àn
, 
Êags
,

316 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

317 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size
, 
Êags
);

318 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size
, 
Êags
,

319 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

320 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

321 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size
);

322 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

323 
timevÆ
 *
timeout
);

324 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

326 #i‡
LWIP_COMPAT_SOCKETS


327 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

328 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

329 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

330 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

331 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

332 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

333 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

334 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

335 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

336 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

337 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

338 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

339 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

340 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

341 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

342 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

343 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

345 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


346 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

347 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

348 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

353 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/stats.h

33 #i‚de‡
__LWIP_STATS_H__


34 
	#__LWIP_STATS_H__


	)

36 
	~"lwù/›t.h
"

38 
	~"lwù/mem.h
"

39 
	~"lwù/memp.h
"

41 #ifde‡
__˝lu•lus


45 #i‡
LWIP_STATS


47 #i‚de‡
LWIP_STATS_LARGE


48 
	#LWIP_STATS_LARGE
 0

	)

51 #i‡
LWIP_STATS_LARGE


52 
	#STAT_COUNTER
 
u32_t


	)

53 
	#STAT_COUNTER_F
 
U32_F


	)

55 
	#STAT_COUNTER
 
u16_t


	)

56 
	#STAT_COUNTER_F
 
U16_F


	)

59 
	s°©s_¥Ÿo
 {

60 
STAT_COUNTER
 
xmô
;

61 
STAT_COUNTER
 
ªcv
;

62 
STAT_COUNTER
 
fw
;

63 
STAT_COUNTER
 
dr›
;

64 
STAT_COUNTER
 
chkîr
;

65 
STAT_COUNTER
 
À√º
;

66 
STAT_COUNTER
 
memîr
;

67 
STAT_COUNTER
 
πîr
;

68 
STAT_COUNTER
 
¥Ÿîr
;

69 
STAT_COUNTER
 
›ãº
;

70 
STAT_COUNTER
 
îr
;

71 
STAT_COUNTER
 
ˇchehô
;

74 
	s°©s_igmp
 {

75 
STAT_COUNTER
 
	mÀ√º
;

76 
STAT_COUNTER
 
	mchkîr
;

77 
STAT_COUNTER
 
	mv1_rxed
;

78 
STAT_COUNTER
 
	mjoö_£¡
;

79 
STAT_COUNTER
 
	mÀave_£¡
;

80 
STAT_COUNTER
 
	muniˇ°_quîy
;

81 
STAT_COUNTER
 
	mªp‹t_£¡
;

82 
STAT_COUNTER
 
	mªp‹t_rxed
;

83 
STAT_COUNTER
 
	mgroup_quîy_rxed
;

86 
	s°©s_mem
 {

87 
mem_size_t
 
	mavaû
;

88 
mem_size_t
 
	mu£d
;

89 
mem_size_t
 
	mmax
;

90 
STAT_COUNTER
 
	mîr
;

91 
STAT_COUNTER
 
	mûÀgÆ
;

94 
	s°©s_sy£Àm
 {

95 
STAT_COUNTER
 
	mu£d
;

96 
STAT_COUNTER
 
	mmax
;

97 
STAT_COUNTER
 
	mîr
;

100 
	s°©s_sys
 {

101 
°©s_sy£Àm
 
	m£m
;

102 
°©s_sy£Àm
 
	mmbox
;

105 
	s°©s_
 {

106 #i‡
LINK_STATS


107 
°©s_¥Ÿo
 
	mlök
;

109 #i‡
ETHARP_STATS


110 
°©s_¥Ÿo
 
	mëh¨p
;

112 #i‡
IPFRAG_STATS


113 
°©s_¥Ÿo
 
	mù_‰ag
;

115 #i‡
IP_STATS


116 
°©s_¥Ÿo
 
	mù
;

118 #i‡
ICMP_STATS


119 
°©s_¥Ÿo
 
	micmp
;

121 #i‡
IGMP_STATS


122 
°©s_igmp
 
	migmp
;

124 #i‡
UDP_STATS


125 
°©s_¥Ÿo
 
	mudp
;

127 #i‡
TCP_STATS


128 
°©s_¥Ÿo
 
	mt˝
;

130 #i‡
MEM_STATS


131 
°©s_mem
 
	mmem
;

133 #i‡
MEMP_STATS


134 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

136 #i‡
SYS_STATS


137 
°©s_sys
 
	msys
;

141 
°©s_
 
lwù_°©s
;

143 
	#°©s_öô
(Ë

	)

145 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

146 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

148 
	#°©s_öô
()

	)

149 
	#STATS_INC
(
x
)

	)

150 
	#STATS_DEC
(
x
)

	)

153 #i‡
TCP_STATS


154 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

155 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

157 
	#TCP_STATS_INC
(
x
)

	)

158 
	#TCP_STATS_DISPLAY
()

	)

161 #i‡
UDP_STATS


162 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

163 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

165 
	#UDP_STATS_INC
(
x
)

	)

166 
	#UDP_STATS_DISPLAY
()

	)

169 #i‡
ICMP_STATS


170 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

171 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

173 
	#ICMP_STATS_INC
(
x
)

	)

174 
	#ICMP_STATS_DISPLAY
()

	)

177 #i‡
IGMP_STATS


178 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

179 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

181 
	#IGMP_STATS_INC
(
x
)

	)

182 
	#IGMP_STATS_DISPLAY
()

	)

185 #i‡
IP_STATS


186 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

187 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

189 
	#IP_STATS_INC
(
x
)

	)

190 
	#IP_STATS_DISPLAY
()

	)

193 #i‡
IPFRAG_STATS


194 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

195 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

197 
	#IPFRAG_STATS_INC
(
x
)

	)

198 
	#IPFRAG_STATS_DISPLAY
()

	)

201 #i‡
ETHARP_STATS


202 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

203 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

205 
	#ETHARP_STATS_INC
(
x
)

	)

206 
	#ETHARP_STATS_DISPLAY
()

	)

209 #i‡
LINK_STATS


210 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

211 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

213 
	#LINK_STATS_INC
(
x
)

	)

214 
	#LINK_STATS_DISPLAY
()

	)

217 #i‡
MEM_STATS


218 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

219 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

220 
	#MEM_STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.
mem
.
u£d
 += y; \

221 i‡(
lwù_°©s
.
mem
.
max
 <Üwù_°©s.mem.
u£d
) { \

222 
lwù_°©s
.
mem
.
max
 =Üwù_°©s.mem.
u£d
; \

224 } 0)

	)

225 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

226 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

228 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

229 
	#MEM_STATS_INC
(
x
)

	)

230 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

231 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

232 
	#MEM_STATS_DISPLAY
()

	)

235 #i‡
MEMP_STATS


236 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

237 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

238 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

239 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ëdÿ{ ++
lwù_°©s
.
memp
[i].
u£d
; \

240 i‡(
lwù_°©s
.
memp
[
i
].
max
 <Üwù_°©s.memp[i].
u£d
) { \

241 
lwù_°©s
.
memp
[
i
].
max
 =Üwù_°©s.memp[i].
u£d
; \

243 } 0)

	)

244 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

246 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

247 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

248 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

249 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

250 
	#MEMP_STATS_DISPLAY
(
i
)

	)

253 #i‡
SYS_STATS


254 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

255 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

256 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

258 
	#SYS_STATS_INC
(
x
)

	)

259 
	#SYS_STATS_DEC
(
x
)

	)

260 
	#SYS_STATS_DISPLAY
()

	)

264 #i‡
LWIP_STATS_DISPLAY


265 
°©s_di•œy
();

266 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

267 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

268 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

269 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

270 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

272 
	#°©s_di•œy
()

	)

273 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

274 
	#°©s_di•œy_igmp
(
igmp
)

	)

275 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

276 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

277 
	#°©s_di•œy_sys
(
sys
)

	)

280 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/sys.h

33 #i‚de‡
__LWIP_SYS_H__


34 
	#__LWIP_SYS_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


42 #i‡
NO_SYS


46 
u8_t
 
	tsys_£m_t
;

47 
u8_t
 
	tsys_mbox_t
;

48 
u8_t
 
	tsys_¥Ÿ_t
;

49 
	ssys_timeo
 {
u8_t
 
	mdummy
;};

51 
	#sys_öô
()

	)

52 
	#sys_timeout
(
m
,
h
,
a
)

	)

53 
	#sys_u¡imeout
(
m
,
a
)

	)

54 
	#sys_£m_√w
(
c
Ë
	)
c

55 
	#sys_£m_sig«l
(
s
)

	)

56 
	#sys_£m_waô
(
s
)

	)

57 
	#sys_£m_waô_timeout
(
s
,
t
)

	)

58 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

59 
	#sys_£m_‰ì
(
s
)

	)

60 
	#sys_mbox_√w
(
s
Ë0

	)

61 
	#sys_mbox_„tch
(
m
,
d
)

	)

62 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

63 
	#sys_mbox_po°
(
m
,
d
)

	)

64 
	#sys_mbox_åypo°
(
m
,
d
)

	)

65 
	#sys_mbox_‰ì
(
m
)

	)

67 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

72 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

77 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

79 
	~"lwù/îr.h
"

80 
	~"¨ch/sys_¨ch.h
"

82 (* 
	tsys_timeout_h™dÀr
)(*
	t¨g
);

84 
	ssys_timeo
 {

85 
sys_timeo
 *
√xt
;

86 
u32_t
 
time
;

87 
sys_timeout_h™dÀr
 
h
;

88 *
¨g
;

91 
	ssys_timeouts
 {

92 
sys_timeo
 *
√xt
;

96 
	`sys_öô
();

107 
	`sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

108 
	`sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

109 
sys_timeouts
 *
	`sys_¨ch_timeouts
();

112 
sys_£m_t
 
	`sys_£m_√w
(
u8_t
 
cou¡
);

113 
	`sys_£m_sig«l
(
sys_£m_t
 
£m
);

114 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, u32_à
timeout
);

115 
	`sys_£m_‰ì
(
sys_£m_t
 
£m
);

116 
	`sys_£m_waô
(
sys_£m_t
 
£m
);

117 
	`sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
);

120 #i‚de‡
sys_m¶ìp


121 
	`sys_m¶ìp
(
u32_t
 
ms
);

123 #i‚de‡
sys_jiffõs


124 
u32_t
 
	`sys_jiffõs
();

128 
sys_mbox_t
 
	`sys_mbox_√w
(
size
);

129 
	`sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
);

130 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
);

131 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, u32_à
timeout
);

132 #i‚de‡
sys_¨ch_mbox_åy„tch


133 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
);

136 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

137 
	`sys_mbox_‰ì
(
sys_mbox_t
 
mbox
);

138 
	`sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
);

141 
sys_thªad_t
 
	`sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *¨g, 
°acksize
, 
¥io
);

146 
	`sys_now
();

155 #i‚de‡
SYS_ARCH_PROTECT


161 #i‡
SYS_LIGHTWEIGHT_PROT


168 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

178 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

187 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

188 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

189 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

193 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

194 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

195 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

206 #i‚de‡
SYS_ARCH_INC


207 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

208 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

209 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

210 
v¨
 +
vÆ
; \

211 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

212 } 0)

	)

215 #i‚de‡
SYS_ARCH_DEC


216 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

217 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

218 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

219 
v¨
 -
vÆ
; \

220 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

221 } 0)

	)

224 #i‚de‡
SYS_ARCH_GET


225 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

226 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

227 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

228 
ªt
 = 
v¨
; \

229 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

230 } 0)

	)

233 #i‚de‡
SYS_ARCH_SET


234 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

235 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

236 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

237 
v¨
 = 
vÆ
; \

238 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

239 } 0)

	)

243 #ifde‡
__˝lu•lus


244 
	}
}

	@net/lwip/include/lwip/tcp.h

33 #i‚de‡
__LWIP_TCP_H__


34 
	#__LWIP_TCP_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_TCP


40 
	~"lwù/sys.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/icmp.h
"

45 
	~"lwù/îr.h
"

47 #ifde‡
__˝lu•lus


51 
t˝_pcb
;

56 
	#t˝_öô
(Ë

	)

57 
t˝_tmr
 ();

61 
t˝_pcb
 * 
t˝_√w
 ();

62 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

64 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

65 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
,

66 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,

67 
îr_t
 
îr
));

68 
t˝_ªcv
 (
t˝_pcb
 *
pcb
,

69 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
,

70 
pbuf
 *
p
, 
îr_t
 
îr
));

71 
t˝_£¡
 (
t˝_pcb
 *
pcb
,

72 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
,

73 
u16_t
 
Àn
));

74 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
,

75 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
),

76 
u8_t
 
öãrvÆ
);

77 
t˝_îr
 (
t˝_pcb
 *
pcb
,

78 (* 
îr
)(*
¨g
, 
îr_t
Érr));

80 
	#t˝_mss
(
pcb
Ë(’cb)->
mss
)

	)

81 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

83 #i‡
TCP_LISTEN_BACKLOG


84 
	#t˝_ac˚±ed
(
pcb
Ë(((
t˝_pcb_li°í
 *)’cb))->
ac˚±s_≥ndög
--)

	)

86 
	#t˝_ac˚±ed
(
pcb
)

	)

89 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

90 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

91 
u16_t
 
p‹t
);

92 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

93 
u16_t
 
p‹t
, 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
,

94 
t˝_pcb
 *
çcb
,

95 
îr_t
 
îr
));

97 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

98 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

100 
t˝_ab‹t
 (
t˝_pcb
 *
pcb
);

101 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

104 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

105 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

107 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

108 
u8_t
 
≠iÊags
);

110 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

112 
	#TCP_PRIO_MIN
 1

	)

113 
	#TCP_PRIO_NORMAL
 64

	)

114 
	#TCP_PRIO_MAX
 127

	)

118 
t˝_¶owtmr
 ();

119 
t˝_Á°tmr
 ();

123 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

125 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

126 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

127 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

135 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

136 ((
çcb
)->
Êags
 & 
TF_NODELAY
) || \

137 (((
çcb
)->
un£¡
 !
NULL
Ë&& (—pcb)->un£¡->
√xt
 != NULL))) ? \

138 1 : 0)

	)

139 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

143 
	#TCP_BUILD_MSS_OPTION
(Ë
	`ht⁄l
(((
u32_t
)2 << 24) | \

144 ((
u32_t
)4 << 16) | \

145 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

146 (
TCP_MSS
 & 255))

	)

148 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

149 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

150 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

151 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

154 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

156 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

157 
	#TCP_FIN
 0x01U

	)

158 
	#TCP_SYN
 0x02U

	)

159 
	#TCP_RST
 0x04U

	)

160 
	#TCP_PSH
 0x08U

	)

161 
	#TCP_ACK
 0x10U

	)

162 
	#TCP_URG
 0x20U

	)

163 
	#TCP_ECE
 0x40U

	)

164 
	#TCP_CWR
 0x80U

	)

166 
	#TCP_FLAGS
 0x3fU

	)

169 
	#TCP_HLEN
 20

	)

171 #i‚de‡
TCP_TMR_INTERVAL


172 
	#TCP_TMR_INTERVAL
 250

	)

175 #i‚de‡
TCP_FAST_INTERVAL


176 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

179 #i‚de‡
TCP_SLOW_INTERVAL


180 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

183 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

184 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

186 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

188 #i‚de‡
TCP_MSL


189 
	#TCP_MSL
 60000U

	)

193 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


194 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

197 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


198 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

201 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


202 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

205 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

210 #ifde‡
PACK_STRUCT_USE_INCLUDES


211 
	~"¨ch/bp°ru˘.h
"

213 
PACK_STRUCT_BEGIN


214 
	st˝_hdr
 {

215 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

216 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

217 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

218 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

219 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

220 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

221 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

222 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

223 } 
PACK_STRUCT_STRUCT
;

224 
PACK_STRUCT_END


225 #ifde‡
PACK_STRUCT_USE_INCLUDES


226 
	~"¨ch/ï°ru˘.h
"

229 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

230 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

231 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

233 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

234 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

235 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË& ~
TCP_FLAGS
Ë| (Êags))

	)

236 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (Êags))

	)

237 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

239 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& 
TCP_FIN
 || \

240 
	`TCPH_FLAGS
((
£g
)->
t˝hdr
Ë& 
TCP_SYN
)? 1: 0))

	)

242 
	et˝_°©e
 {

243 
CLOSED
 = 0,

244 
LISTEN
 = 1,

245 
SYN_SENT
 = 2,

246 
SYN_RCVD
 = 3,

247 
ESTABLISHED
 = 4,

248 
FIN_WAIT_1
 = 5,

249 
FIN_WAIT_2
 = 6,

250 
CLOSE_WAIT
 = 7,

251 
CLOSING
 = 8,

252 
LAST_ACK
 = 9,

253 
TIME_WAIT
 = 10

258 
	#TF_RESET
 (
u8_t
)0x08U

	)

259 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

260 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

265 
	#TCP_PCB_COMMON
(
ty≥
) \

266 
ty≥
 *
√xt
; \

267 
t˝_°©e
 
°©e
; \

268 
u8_t
 
¥io
; \

269 *
ˇŒback_¨g
; \

271 
u16_t
 
loˇl_p‹t


	)

274 
	st˝_pcb
 {

276 
IP_PCB
;

278 
TCP_PCB_COMMON
(
t˝_pcb
);

281 
u16_t
 
ªmŸe_p‹t
;

283 
u8_t
 
Êags
;

284 
	#TF_ACK_DELAY
 (
u8_t
)0x01U

	)

285 
	#TF_ACK_NOW
 (
u8_t
)0x02U

	)

286 
	#TF_INFR
 (
u8_t
)0x04U

	)

287 
	#TF_FIN
 (
u8_t
)0x20U

	)

288 
	#TF_NODELAY
 (
u8_t
)0x40U

	)

289 
	#TF_NAGLEMEMERR
 (
u8_t
)0x80U

	)

294 
u32_t
 
rcv_nxt
;

295 
u16_t
 
rcv_wnd
;

296 
u16_t
 
rcv_™n_wnd
;

299 
u32_t
 
tmr
;

300 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

303 
s16_t
 
πime
;

305 
u16_t
 
mss
;

308 
u32_t
 
πã°
;

309 
u32_t
 
π£q
;

310 
s16_t
 
ß
, 
sv
;

312 
s16_t
 
πo
;

313 
u8_t
 
ƒtx
;

316 
u32_t
 
œ°ack
;

317 
u8_t
 
du∑cks
;

320 
u16_t
 
cwnd
;

321 
u16_t
 
s°hªsh
;

324 
u32_t
 
¢d_nxt
,

325 
¢d_max
;

326 
u16_t
 
¢d_wnd
;

327 
u32_t
 
¢d_wl1
, 
¢d_wl2
,

329 
¢d_lbb
;

331 
u16_t
 
acked
;

333 
u16_t
 
¢d_buf
;

334 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffff-3)

	)

335 
u16_t
 
¢d_queuñí
;

339 
t˝_£g
 *
un£¡
;

340 
t˝_£g
 *
u«cked
;

341 #i‡
TCP_QUEUE_OOSEQ


342 
t˝_£g
 *
oo£q
;

345 
pbuf
 *
ªfu£d_d©a
;

347 #i‡
LWIP_CALLBACK_API


354 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
•a˚
);

363 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

371 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
pcb
,Éº_à
îr
);

380 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,Éº_à
îr
);

389 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
pcb
);

399 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

403 
u32_t
 
kìp_idÀ
;

404 #i‡
LWIP_TCP_KEEPALIVE


405 
u32_t
 
kìp_ötvl
;

406 
u32_t
 
kìp_˙t
;

410 
u32_t
 
≥rsi°_˙t
;

412 
u8_t
 
≥rsi°_backoff
;

415 
u8_t
 
kìp_˙t_£¡
;

418 
	st˝_pcb_li°í
 {

420 
IP_PCB
;

422 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

424 #i‡
LWIP_CALLBACK_API


432 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,Éº_à
îr
);

434 #i‡
TCP_LISTEN_BACKLOG


435 
u8_t
 
backlog
;

436 
u8_t
 
ac˚±s_≥ndög
;

440 #i‡
LWIP_EVENT_API


442 
	elwù_evít
 {

443 
LWIP_EVENT_ACCEPT
,

444 
LWIP_EVENT_SENT
,

445 
LWIP_EVENT_RECV
,

446 
LWIP_EVENT_CONNECTED
,

447 
LWIP_EVENT_POLL
,

448 
LWIP_EVENT_ERR


451 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

452 
lwù_evít
,

453 
pbuf
 *
p
,

454 
u16_t
 
size
,

455 
îr_t
 
îr
);

457 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

458 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

459 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

460 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

461 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

462 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

463 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

464 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

465 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

466 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

467 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

468 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

470 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

471 if((
pcb
)->
ac˚±
 !
NULL
) \

472 (
ªt
 = (
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)))

	)

473 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

474 if((
pcb
)->
£¡
 !
NULL
) \

475 (
ªt
 = (
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)))

	)

476 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

477 if((
pcb
)->
ªcv
 !
NULL
) \

478 { 
ªt
 = (
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
)); } { \

479 
ªt
 = 
ERR_OK
; \

480 i‡(
p
Ë
	`pbuf_‰ì
’); }

	)

481 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

482 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

483 (
ªt
 = (
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)))

	)

484 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

485 if((
pcb
)->
pﬁl
 !
NULL
) \

486 (
ªt
 = (
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,’cb)))

	)

487 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

488 if((
îrf
Ë!
NULL
) \

489 (
îrf
)((
¨g
),(
îr
))

	)

493 
	st˝_£g
 {

494 
t˝_£g
 *
√xt
;

495 
pbuf
 *
p
;

496 *
d©≠å
;

497 
u16_t
 
Àn
;

498 
t˝_hdr
 *
t˝hdr
;

502 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

503 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

504 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

506 
u8_t
 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

507 
u8_t
 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

508 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

510 
	#t˝_ack
(
pcb
Ëif(’cb)->
Êags
 & 
TF_ACK_DELAY
) { \

511 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

512 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

513 
	`t˝_ouçut
(
pcb
); \

515 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

516 }

	)

518 
	#t˝_ack_now
(
pcb
Ë’cb)->
Êags
 |
TF_ACK_NOW
; \

519 
	`t˝_ouçut
(
pcb
)

	)

521 
îr_t
 
t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

522 
îr_t
 
t˝_íqueue
(
t˝_pcb
 *
pcb
, *
d©≠å
, 
u16_t
 
Àn
,

523 
u8_t
 
Êags
, u8_à
≠iÊags
,

524 
u8_t
 *
›td©a
, u8_à
›éí
);

526 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

528 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

529 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

530 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

532 
u32_t
 
t˝_√xt_iss
();

534 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

535 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

537 #i‡
TCP_CALCULATE_EFF_SEND_MSS


538 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr
 *
addr
);

541 
t˝_pcb
 *
t˝_öput_pcb
;

542 
u32_t
 
t˝_ticks
;

544 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


545 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

546 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

547 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

548 
t˝_debug_¥öt_pcbs
();

549 
s16_t
 
t˝_pcbs_ß√
();

551 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

552 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

553 
	#t˝_debug_¥öt_°©e
(
s
)

	)

554 
	#t˝_debug_¥öt_pcbs
()

	)

555 
	#t˝_pcbs_ß√
(Ë1

	)

558 #i‡
NO_SYS


559 
	#t˝_timî_√eded
()

	)

561 
t˝_timî_√eded
();

565 
	ut˝_li°í_pcbs_t
 {

566 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

567 
t˝_pcb
 *
	gpcbs
;

569 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

570 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

573 
t˝_pcb
 *
t˝_tw_pcbs
;

575 
t˝_pcb
 *
t˝_tmp_pcb
;

587 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

588 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", 
≈cb
,Çpcb->
loˇl_p‹t
)); \

589 
t˝_tmp_pcb
 = *
pcbs
; \

590 
t˝_tmp_pcb
 !
NULL
; \

591 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

592 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !
≈cb
); \

594 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", 
≈cb
->
°©e
 !
CLOSED
); \

595 
≈cb
->
√xt
 = *
pcbs
; \

596 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", 
≈cb
->
√xt
 !=Çpcb); \

597 *(
pcbs
Ë
≈cb
; \

598 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

599 
	`t˝_timî_√eded
(); \

600 } 0)

	)

601 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

602 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *
pcbs
 !
NULL
); \

603 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

604 if(*
pcbs
 =
≈cb
) { \

605 *
pcbs
 = (*pcbs)->
√xt
; \

606 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

607 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

608 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

612 
≈cb
->
√xt
 = 
NULL
; \

613 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

614 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

615 } 0)

	)

618 
	#TCP_REG
(
pcbs
, 
≈cb
) do { \

619 
≈cb
->
√xt
 = *
pcbs
; \

620 *(
pcbs
Ë
≈cb
; \

621 
	`t˝_timî_√eded
(); \

622 } 0)

	)

623 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

624 if(*(
pcbs
Ë=
≈cb
) { \

625 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

626 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

627 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

628 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

632 
≈cb
->
√xt
 = 
NULL
; \

633 } 0)

	)

636 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/tcpip.h

33 #i‚de‡
__LWIP_TCPIP_H__


34 
	#__LWIP_TCPIP_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡!
NO_SYS


40 
	~"lwù/≠i_msg.h
"

41 
	~"lwù/√tiÁpi.h
"

42 
	~"lwù/pbuf.h
"

43 
	~"lwù/≠i.h
"

44 
	~"lwù/sys.h
"

46 #ifde‡
__˝lu•lus


50 #i‡
LWIP_TCPIP_CORE_LOCKING


52 
sys_£m_t
 
lock_t˝ù_c‹e
;

53 
	#LOCK_TCPIP_CORE
(Ë
	`sys_£m_waô
(
lock_t˝ù_c‹e
)

	)

54 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_£m_sig«l
(
lock_t˝ù_c‹e
)

	)

55 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

56 
	#TCPIP_APIMSG_ACK
(
m
)

	)

57 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

58 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

60 
	#LOCK_TCPIP_CORE
()

	)

61 
	#UNLOCK_TCPIP_CORE
()

	)

62 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

63 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
c⁄n
->
›_com∂ëed
)

	)

64 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

65 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
£m
)

	)

68 
t˝ù_öô
((* 
t˝ù_öô_d⁄e
)(*), *
¨g
);

70 #i‡
LWIP_NETCONN


71 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

72 #i‡
LWIP_TCPIP_CORE_LOCKING


73 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

77 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

79 #i‡
LWIP_NETIF_API


80 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

81 #i‡
LWIP_TCPIP_CORE_LOCKING


82 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

86 
îr_t
 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
);

87 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

90 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

91 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

93 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

94 
	#t˝ù_u¡imeout
(
h
, 
¨g
Ë
	`t˝ù_timeout
(0xffffffff, h,árg)

	)

96 
	et˝ù_msg_ty≥
 {

97 #i‡
LWIP_NETCONN


98 
	gTCPIP_MSG_API
,

100 
	gTCPIP_MSG_INPKT
,

101 #i‡
LWIP_NETIF_API


102 
	gTCPIP_MSG_NETIFAPI
,

104 
	gTCPIP_MSG_CALLBACK
,

105 
	gTCPIP_MSG_TIMEOUT


108 
	st˝ù_msg
 {

109 
t˝ù_msg_ty≥
 
	gty≥
;

110 
sys_£m_t
 *
	g£m
;

112 #i‡
LWIP_NETCONN


113 
≠i_msg
 *
	g≠imsg
;

115 #i‡
LWIP_NETIF_API


116 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

119 
pbuf
 *
	gp
;

120 
√tif
 *
	g√tif
;

121 } 
	göp
;

123 (*
	gf
)(*
	g˘x
);

124 *
	g˘x
;

125 } 
	gcb
;

127 
u32_t
 
	gm£cs
;

128 
sys_timeout_h™dÀr
 
	gh
;

129 *
	g¨g
;

130 } 
	gtmo
;

131 } 
	gmsg
;

134 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/udp.h

33 #i‚de‡
__LWIP_UDP_H__


34 
	#__LWIP_UDP_H__


	)

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_UDP


40 
	~"lwù/pbuf.h
"

41 
	~"lwù/√tif.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/ù.h
"

45 #ifde‡
__˝lu•lus


49 
	#UDP_HLEN
 8

	)

52 #ifde‡
PACK_STRUCT_USE_INCLUDES


53 
	~"¨ch/bp°ru˘.h
"

55 
PACK_STRUCT_BEGIN


56 
	sudp_hdr
 {

57 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

60 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

61 } 
PACK_STRUCT_STRUCT
;

62 
PACK_STRUCT_END


63 #ifde‡
PACK_STRUCT_USE_INCLUDES


64 
	~"¨ch/ï°ru˘.h
"

67 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

68 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

69 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

71 
	sudp_pcb
 {

73 
IP_PCB
;

77 
udp_pcb
 *
√xt
;

79 
u8_t
 
Êags
;

81 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

83 #i‡
LWIP_IGMP


85 
ù_addr
 
mu…iˇ°_ù
;

88 #i‡
LWIP_UDPLITE


90 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

104 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

105 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

107 *
ªcv_¨g
;

110 
udp_pcb
 *
udp_pcbs
;

114 
udp_pcb
 * 
udp_√w
 ();

115 
udp_ªmove
 (
udp_pcb
 *
pcb
);

116 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

117 
u16_t
 
p‹t
);

118 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

119 
u16_t
 
p‹t
);

120 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

121 
udp_ªcv
 (
udp_pcb
 *
pcb
,

122 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
,

123 
pbuf
 *
p
,

124 
ù_addr
 *
addr
,

125 
u16_t
 
p‹t
),

126 *
ªcv_¨g
);

127 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif);

128 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

129 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

131 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

132 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

135 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

137 
	#udp_öô
(Ë

	)

139 #i‡
UDP_DEBUG


140 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

142 
	#udp_debug_¥öt
(
udphdr
)

	)

145 #ifde‡
__˝lu•lus


	@net/lwip/include/netif/etharp.h

36 #i‚de‡
__NETIF_ETHARP_H__


37 
	#__NETIF_ETHARP_H__


	)

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_ARP


43 
	~"lwù/pbuf.h
"

44 
	~"lwù/ù_addr.h
"

45 
	~"lwù/√tif.h
"

46 
	~"lwù/ù.h
"

48 #ifde‡
__˝lu•lus


52 #i‚de‡
ETH_PAD_SIZE


53 
	#ETH_PAD_SIZE
 0

	)

56 #i‚de‡
ETHARP_HWADDR_LEN


57 
	#ETHARP_HWADDR_LEN
 6

	)

60 #ifde‡
PACK_STRUCT_USE_INCLUDES


61 
	~"¨ch/bp°ru˘.h
"

63 
PACK_STRUCT_BEGIN


64 
	sëh_addr
 {

65 
PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

66 } 
PACK_STRUCT_STRUCT
;

67 
PACK_STRUCT_END


68 #ifde‡
PACK_STRUCT_USE_INCLUDES


69 
	~"¨ch/ï°ru˘.h
"

72 #ifde‡
PACK_STRUCT_USE_INCLUDES


73 
	~"¨ch/bp°ru˘.h
"

75 
PACK_STRUCT_BEGIN


76 
	sëh_hdr
 {

77 #i‡
ETH_PAD_SIZE


78 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

80 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

81 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

82 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

83 } 
PACK_STRUCT_STRUCT
;

84 
PACK_STRUCT_END


85 #ifde‡
PACK_STRUCT_USE_INCLUDES


86 
	~"¨ch/ï°ru˘.h
"

89 #ifde‡
PACK_STRUCT_USE_INCLUDES


90 
	~"¨ch/bp°ru˘.h
"

92 
PACK_STRUCT_BEGIN


94 
	sëh¨p_hdr
 {

95 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëhhdr
);

96 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

97 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
_hwÀn_¥Ÿﬁí
);

99 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

100 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

101 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

102 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

103 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

104 } 
PACK_STRUCT_STRUCT
;

105 
PACK_STRUCT_END


106 #ifde‡
PACK_STRUCT_USE_INCLUDES


107 
	~"¨ch/ï°ru˘.h
"

110 #ifde‡
PACK_STRUCT_USE_INCLUDES


111 
	~"¨ch/bp°ru˘.h
"

113 
PACK_STRUCT_BEGIN


114 
	sëhù_hdr
 {

115 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëh
);

116 
PACK_STRUCT_FIELD
(
ù_hdr
 
ù
);

117 } 
PACK_STRUCT_STRUCT
;

118 
PACK_STRUCT_END


119 #ifde‡
PACK_STRUCT_USE_INCLUDES


120 
	~"¨ch/ï°ru˘.h
"

124 
	#ARP_TMR_INTERVAL
 5000

	)

126 
	#ETHTYPE_ARP
 0x0806

	)

127 
	#ETHTYPE_IP
 0x0800

	)

128 
	#ETHTYPE_PPPOEDISC
 0x8863

	)

129 
	#ETHTYPE_PPPOE
 0x8864

	)

132 
	#ARP_REQUEST
 1

	)

133 
	#ARP_REPLY
 2

	)

135 #i‡
ARP_QUEUEING


139 
	sëh¨p_q_íåy
 {

140 
ëh¨p_q_íåy
 *
√xt
;

141 
pbuf
 *
p
;

145 
	#ëh¨p_öô
(Ë

	)

146 
ëh¨p_tmr
();

147 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

148 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
);

149 
ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

150 
ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
,

151 
pbuf
 *
p
);

152 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
);

153 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
);

154 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

156 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

158 #i‡
LWIP_AUTOIP


159 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

160 c⁄° 
ëh_addr
 *
ëhd°_addr
,

161 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

162 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

163 c⁄° 
u16_t
 
›code
);

166 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

168 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

170 #ifde‡
__˝lu•lus


	@net/lwip/include/netif/loopif.h

33 #i‚de‡
__NETIF_LOOPIF_H__


34 
	#__NETIF_LOOPIF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/√tif.h
"

38 
	~"lwù/îr.h
"

40 #ifde‡
__˝lu•lus


44 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


45 
	#lo›if_pﬁl
 
√tif_pﬁl


	)

48 
îr_t
 
lo›if_öô
(
√tif
 *netif);

50 #ifde‡
__˝lu•lus


	@net/lwip/include/netif/ppp_oe.h

71 #i‚de‡
PPP_OE_H


72 
	#PPP_OE_H


	)

74 
	~"lwù/›t.h
"

76 #i‡
PPPOE_SUPPORT
 > 0

78 #ifde‡
PACK_STRUCT_USE_INCLUDES


79 
	~"¨ch/bp°ru˘.h
"

81 
PACK_STRUCT_BEGIN


82 
	sµp€hdr
 {

83 
PACK_STRUCT_FIELD
(
u8_t
 
vîty≥
);

84 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

85 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

86 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

87 } 
	gPACK_STRUCT_STRUCT
;

88 
	gPACK_STRUCT_END


89 #ifde‡
PACK_STRUCT_USE_INCLUDES


90 
	~"¨ch/ï°ru˘.h
"

93 #ifde‡
PACK_STRUCT_USE_INCLUDES


94 
	~"¨ch/bp°ru˘.h
"

96 
PACK_STRUCT_BEGIN


97 
	sµp€èg
 {

98 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

99 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

100 } 
	gPACK_STRUCT_STRUCT
;

101 
	gPACK_STRUCT_END


102 #ifde‡
PACK_STRUCT_USE_INCLUDES


103 
	~"¨ch/ï°ru˘.h
"

107 
	#PPPOE_STATE_INITIAL
 0

	)

108 
	#PPPOE_STATE_PADI_SENT
 1

	)

109 
	#PPPOE_STATE_PADR_SENT
 2

	)

110 
	#PPPOE_STATE_SESSION
 3

	)

111 
	#PPPOE_STATE_CLOSING
 4

	)

113 
	#PPPOE_STATE_PADO_SENT
 1

	)

115 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

116 
	#PPPOE_VERTYPE
 0x11

	)

118 
	#PPPOE_TAG_EOL
 0x0000

	)

119 
	#PPPOE_TAG_SNAME
 0x0101

	)

120 
	#PPPOE_TAG_ACNAME
 0x0102

	)

121 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

122 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

123 
	#PPPOE_TAG_VENDOR
 0x0105

	)

124 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

125 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

126 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

127 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

129 
	#PPPOE_CODE_PADI
 0x09

	)

130 
	#PPPOE_CODE_PADO
 0x07

	)

131 
	#PPPOE_CODE_PADR
 0x19

	)

132 
	#PPPOE_CODE_PADS
 0x65

	)

133 
	#PPPOE_CODE_PADT
 0xA7

	)

135 #i‚de‡
ETHERMTU


136 
	#ETHERMTU
 1500

	)

140 
	#PPPOE_MAXMTU
 (
ETHERMTU
-
PPPOE_HEADERLEN
-2)

	)

142 
	gµp€_so·c
;

145 
µp€_öô
();

147 
îr_t
 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
);

148 
îr_t
 
	`µp€_de°roy
(
√tif
 *
iÂ
);

150 
	`µp€_c⁄√˘
(
µp€_so·c
 *
sc
);

151 
	`µp€_disc⁄√˘
(
µp€_so·c
 *
sc
);

153 
	`µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

154 
	`µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

156 
îr_t
 
	`µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
);

158 
µp€_hdæí
;

	@net/lwip/include/netif/slipif.h

35 #i‚de‡
__NETIF_SLIPIF_H__


36 
	#__NETIF_SLIPIF_H__


	)

38 
	~"lwù/√tif.h
"

40 #ifde‡
__˝lu•lus


44 
îr_t
 
¶ùif_öô
(
√tif
 *Çetif);

46 #ifde‡
__˝lu•lus


	@net/lwip/jos/arch/cc.h

2 #i‚de‡
LWIP_ARCH_CC_H


3 
	#LWIP_ARCH_CC_H


	)

5 
	~<öc/ty≥s.h
>

6 
	~<öc/as£π.h
>

8 
uöt32_t
 
	tu32_t
;

9 
öt32_t
 
	ts32_t
;

11 
uöt64_t
 
	tu64_t
;

12 
öt64_t
 
	ts64_t
;

14 
uöt16_t
 
	tu16_t
;

15 
öt16_t
 
	ts16_t
;

17 
uöt8_t
 
	tu8_t
;

18 
öt8_t
 
	ts8_t
;

20 
uöçå_t
 
	tmem_±r_t
;

22 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

23 
	#PACK_STRUCT_STRUCT


	)

24 
	#PACK_STRUCT_BEGIN


	)

25 
	#PACK_STRUCT_END


	)

27 
	#S16_F
 "d"

	)

28 
	#U16_F
 "u"

	)

29 
	#X16_F
 "x"

	)

31 
	#S32_F
 "d"

	)

32 
	#U32_F
 "u"

	)

33 
	#X32_F
 "x"

	)

35 
	#LWIP_PLATFORM_DIAG
(
x
Ë
˝rötf
 
	)
x

36 
	#LWIP_PLATFORM_ASSERT
(
x
Ë
	`∑nic
(x)

	)

38 #i‚de‡
BYTE_ORDER


39 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

	@net/lwip/jos/arch/i386/setjmp.h

2 #i‚de‡
JOS_MACHINE_SETJMP_H


3 
	#JOS_MACHINE_SETJMP_H


	)

5 
	~<öc/ty≥s.h
>

7 
	#JOS_LONGJMP_GCCATTR
 
	`ªg∑rm
(2)

	)

9 
	sjos_jmp_buf
 {

10 
uöt64_t
 
	mjb_rù
;

11 
uöt64_t
 
	mjb_r•
;

12 
uöt64_t
 
	mjb_rbp
;

13 
uöt64_t
 
	mjb_rbx
;

14 
uöt64_t
 
	mjb_rsi
;

15 
uöt64_t
 
	mjb_rdi
;

16 
uöt64_t
 
	mjb_r15
;

17 
uöt64_t
 
	mjb_r14
;

18 
uöt64_t
 
	mjb_r13
;

19 
uöt64_t
 
	mjb_r12
;

20 
uöt64_t
 
	mjb_r11
;

21 
uöt64_t
 
	mjb_r10
;

22 
uöt64_t
 
	mjb_r9
;

23 
uöt64_t
 
	mjb_r8
;

	@net/lwip/jos/arch/perf.h

2 #i‚de‡
LWIP_ARCH_PERF_H


3 
	#LWIP_ARCH_PERF_H


	)

5 
	#PERF_START


	)

6 
	#PERF_STOP
(
x
)

	)

	@net/lwip/jos/arch/perror.c

3 
	#LWIP_PROVIDE_ERRNO


	)

4 
	~<¨ch/≥º‹.h
>

5 
	~<lwù/¨ch.h
>

7 c⁄° *
	gsys_îæi°
[] = {

8 [
EPERM
] = "EPERM",

9 [
ENOENT
] = "ENOENT",

10 [
ESRCH
] = "ESRCH",

11 [
EINTR
] = "EINTR",

12 [
EIO
] = "EIO",

13 [
ENXIO
] = "ENXIO",

14 [
E2BIG
] = "E2BIG",

15 [
ENOEXEC
] = "ENOEXEC",

16 [
EBADF
] = "EBADF",

17 [
ECHILD
] = "ECHILD",

18 [
EAGAIN
] = "EAGAIN",

19 [
ENOMEM
] = "ENOMEM",

20 [
EACCES
] = "EACCES",

21 [
EFAULT
] = "EFAULT",

22 [
ENOTBLK
] = "ENOTBLK",

23 [
EBUSY
] = "EBUSY",

24 [
EEXIST
] = "EEXIST",

25 [
EXDEV
] = "EXDEV",

26 [
ENODEV
] = "ENODEV",

27 [
ENOTDIR
] = "ENOTDIR",

28 [
EISDIR
] = "EISDIR",

29 [
EINVAL
] = "EINVAL",

30 [
ENFILE
] = "ENFILE",

31 [
EMFILE
] = "EMFILE",

32 [
ENOTTY
] = "ENOTTY",

33 [
ETXTBSY
] = "ETXTBSY",

34 [
EFBIG
] = "EFBIG",

35 [
ENOSPC
] = "ENOSPC",

36 [
ESPIPE
] = "ESPIPE",

37 [
EROFS
] = "EROFS",

38 [
EMLINK
] = "EMLINK",

39 [
EPIPE
] = "EPIPE",

40 [
EDOM
] = "EDOM",

41 [
ERANGE
] = "ERANGE",

42 [
EDEADLK
] = "EDEADLK",

43 [
ENAMETOOLONG
] = "ENAMETOOLONG",

44 [
ENOLCK
] = "ENOLCK",

45 [
ENOSYS
] = "ENOSYS",

46 [
ENOTEMPTY
] = "ENOTEMPTY",

47 [
ELOOP
] = "ELOOP",

48 [
EWOULDBLOCK
] = "EWOULDBLOCK",

49 [
ENOMSG
] = "ENOMSG",

50 [
EIDRM
] = "EIDRM",

51 [
ECHRNG
] = "ECHRNG",

52 [
EL2NSYNC
] = "EL2NSYNC",

53 [
EL3HLT
] = "EL3HLT",

54 [
EL3RST
] = "EL3RST",

55 [
ELNRNG
] = "ELNRNG",

56 [
EUNATCH
] = "EUNATCH",

57 [
ENOCSI
] = "ENOCSI",

58 [
EL2HLT
] = "EL2HLT",

59 [
EBADE
] = "EBADE",

60 [
EBADR
] = "EBADR",

61 [
EXFULL
] = "EXFULL",

62 [
ENOANO
] = "ENOANO",

63 [
EBADRQC
] = "EBADRQC",

64 [
EBADSLT
] = "EBADSLT",

66 [
EDEADLOCK
] = "EDEADLOCK",

68 [
EBFONT
] = "EBFONT",

69 [
ENOSTR
] = "ENOSTR",

70 [
ENODATA
] = "ENODATA",

71 [
ETIME
] = "ETIME",

72 [
ENOSR
] = "ENOSR",

73 [
ENONET
] = "ENONET",

74 [
ENOPKG
] = "ENOPKG",

75 [
EREMOTE
] = "EREMOTE",

76 [
ENOLINK
] = "ENOLINK",

77 [
EADV
] = "EADV",

78 [
ESRMNT
] = "ESRMNT",

79 [
ECOMM
] = "ECOMM",

80 [
EPROTO
] = "EPROTO",

81 [
EMULTIHOP
] = "EMULTIHOP",

82 [
EDOTDOT
] = "EDOTDOT",

83 [
EBADMSG
] = "EBADMSG",

84 [
EOVERFLOW
] = "EOVERFLOW",

85 [
ENOTUNIQ
] = "ENOTUNIQ",

86 [
EBADFD
] = "EBADFD",

87 [
EREMCHG
] = "EREMCHG",

88 [
ELIBACC
] = "ELIBACC",

89 [
ELIBBAD
] = "ELIBBAD",

90 [
ELIBSCN
] = "ELIBSCN",

91 [
ELIBMAX
] = "ELIBMAX",

92 [
ELIBEXEC
] = "ELIBEXEC",

93 [
EILSEQ
] = "EILSEQ",

94 [
ERESTART
] = "ERESTART",

95 [
ESTRPIPE
] = "ESTRPIPE",

96 [
EUSERS
] = "EUSERS",

97 [
ENOTSOCK
] = "ENOTSOCK",

98 [
EDESTADDRREQ
] = "EDESTADDRREQ",

99 [
EMSGSIZE
] = "EMSGSIZE",

100 [
EPROTOTYPE
] = "EPROTOTYPE",

101 [
ENOPROTOOPT
] = "ENOPROTOOPT",

102 [
EPROTONOSUPPORT
] = "EPROTONOSUPPORT",

103 [
ESOCKTNOSUPPORT
] = "ESOCKTNOSUPPORT",

104 [
EOPNOTSUPP
] = "EOPNOTSUPP",

105 [
EPFNOSUPPORT
] = "EPFNOSUPPORT",

106 [
EAFNOSUPPORT
] = "EAFNOSUPPORT",

107 [
EADDRINUSE
] = "EADDRINUSE",

108 [
EADDRNOTAVAIL
] = "EADDRNOTAVAIL",

109 [
ENETDOWN
] = "ENETDOWN",

110 [
ENETUNREACH
] = "ENETUNREACH",

111 [
ENETRESET
] = "ENETRESET",

112 [
ECONNABORTED
] = "ECONNABORTED",

113 [
ECONNRESET
] = "ECONNRESET",

114 [
ENOBUFS
] = "ENOBUFS",

115 [
EISCONN
] = "EISCONN",

116 [
ENOTCONN
] = "ENOTCONN",

117 [
ESHUTDOWN
] = "ESHUTDOWN",

118 [
ETOOMANYREFS
] = "ETOOMANYREFS",

119 [
ETIMEDOUT
] = "ETIMEDOUT",

120 [
ECONNREFUSED
] = "ECONNREFUSED",

121 [
EHOSTDOWN
] = "EHOSTDOWN",

122 [
EHOSTUNREACH
] = "EHOSTUNREACH",

123 [
EALREADY
] = "EALREADY",

124 [
EINPROGRESS
] = "EINPROGRESS",

125 [
ESTALE
] = "ESTALE",

126 [
EUCLEAN
] = "EUCLEAN",

127 [
ENOTNAM
] = "ENOTNAM",

128 [
ENAVAIL
] = "ENAVAIL",

129 [
EISNAM
] = "EISNAM",

130 [
EREMOTEIO
] = "EREMOTEIO",

131 [
EDQUOT
] = "EDQUOT",

133 [
ENOMEDIUM
] = "ENOMEDIUM",

134 [
EMEDIUMTYPE
] = "EMEDIUMTYPE",

137 [
ENSROK
] = "ENSROK",

138 [
ENSRNODATA
] = "ENSRNODATA",

139 [
ENSRFORMERR
] = "ENSRFORMERR",

140 [
ENSRSERVFAIL
] = "ENSRSERVFAIL",

141 [
ENSRNOTFOUND
] = "ENSRNOTFOUND",

142 [
ENSRNOTIMP
] = "ENSRNOTIMP",

143 [
ENSRREFUSED
] = "ENSRREFUSED",

144 [
ENSRBADQUERY
] = "ENSRBADQUERY",

145 [
ENSRBADNAME
] = "ENSRBADNAME",

146 [
ENSRBADFAMILY
] = "ENSRBADFAMILY",

147 [
ENSRBADRESP
] = "ENSRBADRESP",

148 [
ENSRCONNREFUSED
] = "ENSRCONNREFUSED",

149 [
ENSRTIMEOUT
] = "ENSRTIMEOUT",

150 [
ENSROF
] = "ENSROF",

151 [
ENSRFILE
] = "ENSRFILE",

152 [
ENSRNOMEM
] = "ENSRNOMEM",

153 [
ENSRDESTRUCTION
] = "ENSRDESTRUCTION",

154 [
ENSRQUERYDOMAINTOOLONG
] = "ENSRQUERYDOMAINTOOLONG",

155 [
ENSRCNAMELOOP
] = "ENSRCNAMELOOP"

159 
	$≥º‹
(c⁄° *
s
) {

160 
îr
 = 
î∫o
;

161 
	`˝rötf
("%s: %s\n", 
s
, 
	`e2s
(
îr
));

162 
	}
}

165 
	$e2s
(
îr
) {

166  
sys_îæi°
[
îr
];

167 
	}
}

	@net/lwip/jos/arch/perror.h

2 #i‚de‡
JOS_INC_PERROR_H


3 
	#JOS_INC_PERROR_H


	)

5 
≥º‹
(c⁄° *
s
);

6 c⁄° *
e2s
(
e
);

	@net/lwip/jos/arch/queue.h

36 #i‚de‡
LWIP_ARCH_QUEUE_H


37 
	#LWIP_ARCH_QUEUE_H


	)

53 
	sFrob


55 
	m‰obozz
;

56 
LIST_ENTRY
(
Frob
Ë
	m‰ob_lök
;

59 
	$LIST_HEAD
(
Frob_li°
, 
Frob
)

61 
Frob_li°
 
Êi°
;

63 
	`LIST_INIT
(&
Êi°
);

64 
Êi°
 = 
	`LIST_HEAD_INITIALIZER
(&flist);

66 if(
	$LIST_EMPTY
(&
Êi°
))

67 
	`¥ötf
("list isÉmpty\n");

69 
Frob
 *
f
 = 
	`LIST_FIRST
(&
Êi°
);

70 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

71 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

73 
f
=
	`LIST_FIRST
(&
Êi°
); f != 0;

74 
f
 = 
	$LIST_NEXT
(
f
, 
‰ob_lök
))

75 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

77 
	$LIST_FOREACH
(
f
, &
Êi°
, 
‰ob_lök
)

78 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

80 
f
 = 
	`LIST_NEXT
(
	`LIST_FIRST
(&
Êi°
));

81 
	`LIST_INSERT_AFTER
(
f
, 
g
, 
‰ob_lök
);

82 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

83 
	`LIST_INSERT_BEFORE
(
f
, 
g
, 
‰ob_lök
);

84 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

85 
	`LIST_INSERT_HEAD
(&
Êi°
, 
g
, 
‰ob_lök
);

110 
	#LIST_HEAD
(
«me
, 
ty≥
) \

111 
	s«me
 { \

112 
ty≥
 *
lh_fú°
; \

113 }

	)

119 
	#LIST_HEAD_INITIALIZER
(
hód
) \

120 { 
NULL
 
	}

	)
}

130 
	#LIST_ENTRY
(
ty≥
) \

132 
ty≥
 *
À_√xt
; \

133 
ty≥
 **
À_¥ev
; \

134 }

	)

143 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

148 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

154 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

161 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

162 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

163 (
v¨
); \

164 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

169 
	#LIST_INIT
(
hód
) do { \

170 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

171 } 0)

	)

178 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

179 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

180 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

181 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

182 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

183 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

184 } 0)

	)

191 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

192 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

193 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

194 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

195 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

196 } 0)

	)

202 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

203 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

204 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

205 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

206 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

207 } 0)

	)

213 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

214 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

215 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

216 (
ñm
)->
fõld
.
À_¥ev
; \

217 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

218 } 0)

	)

	@net/lwip/jos/arch/setjmp.h

2 #i‚de‡
JOS_INC_SETJMP_H


3 
	#JOS_INC_SETJMP_H


	)

5 
	~<¨ch/i386/£tjmp.h
>

7 
jos_£tjmp
(vﬁ©ûê
jos_jmp_buf
 *
buf
);

8 
	$jos_l⁄gjmp
(vﬁ©ûê
jos_jmp_buf
 *
buf
, 
vÆ
)

9 
	`__©åibuã__
((
__n‹ëu∫__
, 
JOS_LONGJMP_GCCATTR
));

	@net/lwip/jos/arch/sys_arch.c

2 
	~<öc/lib.h
>

4 
	~<lwù/sys.h
>

5 
	~<¨ch/thªad.h
>

6 
	~<¨ch/cc.h
>

7 
	~<¨ch/sys_¨ch.h
>

8 
	~<¨ch/≥º‹.h
>

9 
	~<¨ch/queue.h
>

11 
	#debug
 0

	)

13 
	#NSEM
 256

	)

14 
	#NMBOX
 128

	)

15 
	#MBOXSLOTS
 32

	)

17 
	ssys_£m_íåy
 {

18 
	m‰ìd
;

19 
	mgí
;

21 
uöt32_t
 
	mv
;

23 
uöt16_t
 
	mcou¡î
;

24 
uöt16_t
 
	mwaôîs
;

27 
LIST_ENTRY
(
sys_£m_íåy
Ë
	mlök
;

29 
sys_£m_íåy
 
	g£ms
[
NSEM
];

30 
	$LIST_HEAD
(
£m_li°
, 
sys_£m_íåy
Ë
£m_‰ì
;

32 
	ssys_mbox_íåy
 {

33 
‰ìd
;

34 
hód
, 
√xtq
;

35 *
msg
[
MBOXSLOTS
];

36 
sys_£m_t
 
queued_msg
;

37 
sys_£m_t
 
‰ì_msg
;

38 
	`LIST_ENTRY
(
sys_mbox_íåy
Ë
lök
;

40 
sys_mbox_íåy
 
mboxes
[
NMBOX
];

41 
	$LIST_HEAD
(
mbox_li°
, 
sys_mbox_íåy
Ë
mbox_‰ì
;

43 
	ssys_thªad
 {

44 
thªad_id_t
 
tid
;

45 
sys_timeouts
 
tmo
;

46 
	`LIST_ENTRY
(
sys_thªad
Ë
lök
;

49 íum { 
thªad_hash_size
 = 257 };

50 
	$LIST_HEAD
(
thªad_li°
, 
sys_thªad
Ë
thªads
[
thªad_hash_size
];

53 
	$sys_öô
()

55 
i
 = 0;

56 
i
 = 0; i < 
NSEM
; i++) {

57 
£ms
[
i
].
‰ìd
 = 1;

58 
	`LIST_INSERT_HEAD
(&
£m_‰ì
, &
£ms
[
i
], 
lök
);

61 
i
 = 0; i < 
NMBOX
; i++) {

62 
mboxes
[
i
].
‰ìd
 = 1;

63 
	`LIST_INSERT_HEAD
(&
mbox_‰ì
, &
mboxes
[
i
], 
lök
);

65 
	}
}

67 
sys_mbox_t


68 
	$sys_mbox_√w
(
size
)

70 
	`as£π
(
size
 < 
MBOXSLOTS
);

71 
sys_mbox_íåy
 *
mbe
 = 
	`LIST_FIRST
(&
mbox_‰ì
);

72 i‡(!
mbe
) {

73 
	`˝rötf
("lwip: sys_mbox_new: out of mailboxes\n");

74  
SYS_MBOX_NULL
;

76 
	`LIST_REMOVE
(
mbe
, 
lök
);

77 
	`as£π
(
mbe
->
‰ìd
);

78 
mbe
->
‰ìd
 = 0;

80 
i
 = 
mbe
 - &
mboxes
[0];

81 
mbe
->
hód
 = -1;

82 
mbe
->
√xtq
 = 0;

83 
mbe
->
queued_msg
 = 
	`sys_£m_√w
(0);

84 
mbe
->
‰ì_msg
 = 
	`sys_£m_√w
(
MBOXSLOTS
);

86 i‡(
mbe
->
queued_msg
 =
SYS_SEM_NULL
 ||

87 
mbe
->
‰ì_msg
 =
SYS_SEM_NULL
)

89 
	`sys_mbox_‰ì
(
i
);

90 
	`˝rötf
("lwip: sys_mbox_new: can't get semaphore\n");

91  
SYS_MBOX_NULL
;

93  
i
;

94 
	}
}

97 
	$sys_mbox_‰ì
(
sys_mbox_t
 
mbox
)

99 
	`as£π
(!
mboxes
[
mbox
].
‰ìd
);

100 
	`sys_£m_‰ì
(
mboxes
[
mbox
].
queued_msg
);

101 
	`sys_£m_‰ì
(
mboxes
[
mbox
].
‰ì_msg
);

102 
	`LIST_INSERT_HEAD
(&
mbox_‰ì
, &
mboxes
[
mbox
], 
lök
);

103 
mboxes
[
mbox
].
‰ìd
 = 1;

104 
	}
}

107 
	$sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
)

109 
	`as£π
(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë=
ERR_OK
);

110 
	}
}

112 
îr_t


113 
	$sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
)

115 
	`as£π
(!
mboxes
[
mbox
].
‰ìd
);

117 
	`sys_¨ch_£m_waô
(
mboxes
[
mbox
].
‰ì_msg
, 0);

118 i‡(
mboxes
[
mbox
].
√xtq
 =mboxes[mbox].
hód
)

119  
ERR_MEM
;

121 
¶Ÿ
 = 
mboxes
[
mbox
].
√xtq
;

122 
mboxes
[
mbox
].
√xtq
 = (
¶Ÿ
 + 1Ë% 
MBOXSLOTS
;

123 
mboxes
[
mbox
].
msg
[
¶Ÿ
] = msg;

125 i‡(
mboxes
[
mbox
].
hód
 == -1)

126 
mboxes
[
mbox
].
hód
 = 
¶Ÿ
;

128 
	`sys_£m_sig«l
(
mboxes
[
mbox
].
queued_msg
);

130  
ERR_OK
;

131 
	}
}

133 
sys_£m_t


134 
	$sys_£m_√w
(
u8_t
 
cou¡
)

136 
sys_£m_íåy
 *
£
 = 
	`LIST_FIRST
(&
£m_‰ì
);

137 i‡(!
£
) {

138 
	`˝rötf
("lwip: sys_sem_new: out of semaphores\n");

139  
SYS_SEM_NULL
;

141 
	`LIST_REMOVE
(
£
, 
lök
);

142 
	`as£π
(
£
->
‰ìd
);

143 
£
->
‰ìd
 = 0;

145 
£
->
cou¡î
 = 
cou¡
;

146 
£
->
gí
++;

147  
£
 - &
£ms
[0];

148 
	}
}

151 
	$sys_£m_‰ì
(
sys_£m_t
 
£m
)

153 
	`as£π
(!
£ms
[
£m
].
‰ìd
);

154 
£ms
[
£m
].
‰ìd
 = 1;

155 
£ms
[
£m
].
gí
++;

156 
	`LIST_INSERT_HEAD
(&
£m_‰ì
, &
£ms
[
£m
], 
lök
);

157 
	}
}

160 
	$sys_£m_sig«l
(
sys_£m_t
 
£m
)

162 
	`as£π
(!
£ms
[
£m
].
‰ìd
);

163 
£ms
[
£m
].
cou¡î
++;

164 i‡(
£ms
[
£m
].
waôîs
) {

165 
£ms
[
£m
].
waôîs
 = 0;

166 
	`thªad_wakeup
(&
£ms
[
£m
].
v
);

168 
	}
}

170 
u32_t


171 
	$sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, 
u32_t
 
tm_m£c
)

173 
	`as£π
(!
£ms
[
£m
].
‰ìd
);

174 
u32_t
 
waôed
 = 0;

176 
gí
 = 
£ms
[
£m
].gen;

178 
tm_m£c
 =0 || 
waôed
 <Åm_msec) {

179 i‡(
£ms
[
£m
].
cou¡î
 > 0) {

180 
£ms
[
£m
].
cou¡î
--;

181  
waôed
;

182 } i‡(
tm_m£c
 =
SYS_ARCH_NOWAIT
) {

183  
SYS_ARCH_TIMEOUT
;

185 
uöt32_t
 
a
 = 
	`sys_time_m£c
();

186 
uöt32_t
 
¶ìp_u¡û
 = 
tm_m£c
 ? 
a
 + (tm_m£¯- 
waôed
) : ~0;

187 
£ms
[
£m
].
waôîs
 = 1;

188 
uöt32_t
 
cur_v
 = 
£ms
[
£m
].
v
;

189 
	`lwù_c‹e_u∆ock
();

190 
	`thªad_waô
(&
£ms
[
£m
].
v
, 
cur_v
, 
¶ìp_u¡û
);

191 
	`lwù_c‹e_lock
();

192 i‡(
gí
 !
£ms
[
£m
].gen) {

193 
	`˝rötf
("sys_arch_sem_wait: sem freed under waiter!\n");

194  
SYS_ARCH_TIMEOUT
;

196 
uöt32_t
 
b
 = 
	`sys_time_m£c
();

197 
waôed
 +(
b
 - 
a
);

201  
SYS_ARCH_TIMEOUT
;

202 
	}
}

204 
u32_t


205 
	$sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, 
u32_t
 
tm_m£c
)

207 
	`as£π
(!
mboxes
[
mbox
].
‰ìd
);

209 
u32_t
 
waôed
 = 
	`sys_¨ch_£m_waô
(
mboxes
[
mbox
].
queued_msg
, 
tm_m£c
);

210 i‡(
waôed
 =
SYS_ARCH_TIMEOUT
)

211  
waôed
;

213 
¶Ÿ
 = 
mboxes
[
mbox
].
hód
;

214 i‡(
¶Ÿ
 == -1)

215 
	`∑nic
("lwip: sys_arch_mbox_fetch:Ço message");

216 i‡(
msg
)

217 *
msg
 = 
mboxes
[
mbox
].msg[
¶Ÿ
];

219 
mboxes
[
mbox
].
hód
 = (
¶Ÿ
 + 1Ë% 
MBOXSLOTS
;

220 i‡(
mboxes
[
mbox
].
hód
 =mboxes[mbox].
√xtq
)

221 
mboxes
[
mbox
].
hód
 = -1;

223 
	`sys_£m_sig«l
(
mboxes
[
mbox
].
‰ì_msg
);

224  
waôed
;

225 
	}
}

227 
u32_t


228 
	$sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
)

230  
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
SYS_ARCH_NOWAIT
);

231 
	}
}

233 
	slwù_thªad
 {

234 (*
	mfunc
)(*
	m¨g
);

235 *
	m¨g
;

239 
	$lwù_thªad_íåy
(
uöt64_t
 
¨g
)

241 
lwù_thªad
 *
…
 = (lwù_thªad *)
¨g
;

242 
	`lwù_c‹e_lock
();

243 
…
->
	`func
÷t->
¨g
);

244 
	`lwù_c‹e_u∆ock
();

245 
	`‰ì
(
…
);

246 
	}
}

248 
sys_thªad_t


249 
sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *arg,

250 
°acksize
, 
¥io
)

252 
lwù_thªad
 *
…
 = 
	`mÆloc
((*lt));

253 i‡(
…
 == 0)

254 
	`∑nic
("sys_thread_new: cannotállocateÅhread struct");

256 i‡(
°acksize
 > 
PGSIZE
)

257 
	`∑nic
("œrgê°ack %d", 
°acksize
);

259 
…
->
func
 = 
thªad
;

260 
…
->
¨g
 =árg;

262 
thªad_id_t
 
tid
;

263 
r
 = 
	`thªad_¸óã
(&
tid
, 
«me
, 
lwù_thªad_íåy
, (
uöt64_t
)
…
);

265 i‡(
r
 < 0)

266 
	`∑nic
("lwù: sys_thªad_√w: c™nŸ cª©e: %s\n", 
	`e2s
(
r
));

268  
tid
;

269 
	}
}

272 
	$timeout_˛ónup
(
thªad_id_t
 
tid
)

274 
	`lwù_c‹e_lock
();

276 
sys_thªad
 *
t
;

277 
	`LIST_FOREACH
(
t
, &
thªads
[
tid
 % 
thªad_hash_size
], 
lök
)

278 i‡(
t
->
tid
 ==Åid) {

279 
	`LIST_REMOVE
(
t
, 
lök
);

280 
	`‰ì
(
t
);

281 
d⁄e
;

284 i‡(
debug
Ë
	`˝rötf
("timeout_˛ónup: bogu†tid %ld\n", 
tid
);

285 
d⁄e
:

286 
	`lwù_c‹e_u∆ock
();

287 
	}
}

289 
sys_timeouts
 *

290 
	$sys_¨ch_timeouts
()

292 
thªad_id_t
 
tid
 = 
	`thªad_id
();

294 
sys_thªad
 *
t
;

295 
	`LIST_FOREACH
(
t
, &
thªads
[
tid
 % 
thªad_hash_size
], 
lök
)

296 i‡(
t
->
tid
 ==Åid)

297 
out
;

299 
t
 = 
	`mÆloc
((*t));

300 i‡(
t
 == 0)

301 
	`∑nic
("sys_arch_timeouts: cannot malloc");

303 
r
 = 
	`thªad_⁄hÆt
(
timeout_˛ónup
);

304 i‡(
r
 < 0)

305 
	`∑nic
("thªad_⁄hÆàÁûed: %s", 
	`e2s
(
r
));

307 
t
->
tid
 =Åid;

308 
	`mem£t
(&
t
->
tmo
, 0, (t->tmo));

309 
	`LIST_INSERT_HEAD
(&
thªads
[
tid
 % 
thªad_hash_size
], 
t
, 
lök
);

311 
out
:

312  &
t
->
tmo
;

313 
	}
}

316 
	$lwù_c‹e_lock
()

318 
	}
}

321 
	$lwù_c‹e_u∆ock
()

323 
	}
}

	@net/lwip/jos/arch/sys_arch.h

2 #i‚de‡
LWIP_ARCH_SYS_ARCH_H


3 
	#LWIP_ARCH_SYS_ARCH_H


	)

5 
	~<öc/ty≥s.h
>

7 
	tsys_£m_t
;

8 
	tsys_mbox_t
;

9 
	tsys_thªad_t
;

11 
	#SYS_MBOX_NULL
 (-1)

	)

12 
	#SYS_SEM_NULL
 (-1)

	)

14 
lwù_c‹e_lock
();

15 
lwù_c‹e_u∆ock
();

16 
lwù_c‹e_öô
();

18 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

19 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

20 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

22 
	#SYS_ARCH_NOWAIT
 0xffffff„

	)

	@net/lwip/jos/arch/thread.c

2 
	~<öc/lib.h
>

4 
	~<¨ch/thªad.h
>

5 
	~<¨ch/thªadq.h
>

6 
	~<¨ch/£tjmp.h
>

8 
thªad_id_t
 
	gmax_tid
;

9 
thªad_c⁄ãxt
 *
	gcur_tc
;

11 
thªad_queue
 
	gthªad_queue
;

12 
thªad_queue
 
	gkûl_queue
;

15 
	$thªad_öô
() {

16 
	`thªadq_öô
(&
thªad_queue
);

17 
max_tid
 = 0;

18 
	}
}

20 
uöt32_t


21 
	$thªad_id
() {

22  
cur_tc
->
tc_tid
;

23 
	}
}

26 
	$thªad_wakeup
(vﬁ©ûê
uöt32_t
 *
addr
) {

27 
thªad_c⁄ãxt
 *
tc
 = 
thªad_queue
.
tq_fú°
;

28 
tc
) {

29 i‡(
tc
->
tc_waô_addr
 =
addr
)

30 
tc
->
tc_wakeup
 = 1;

31 
tc
 =Åc->
tc_queue_lök
;

33 
	}
}

36 
	$thªad_waô
(vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆ
, uöt32_à
m£c
) {

37 
uöt32_t
 
s
 = 
	`sys_time_m£c
();

38 
uöt32_t
 
p
 = 
s
;

40 
cur_tc
->
tc_waô_addr
 = 
addr
;

41 
cur_tc
->
tc_wakeup
 = 0;

43 
p
 < 
m£c
) {

44 i‡(
p
 < 
s
)

46 i‡(
addr
 && *add∏!
vÆ
)

48 i‡(
cur_tc
->
tc_wakeup
)

51 
	`thªad_yõld
();

52 
p
 = 
	`sys_time_m£c
();

55 
cur_tc
->
tc_waô_addr
 = 0;

56 
cur_tc
->
tc_wakeup
 = 0;

57 
	}
}

60 
	$thªad_wakeups_≥ndög
()

62 
thªad_c⁄ãxt
 *
tc
 = 
thªad_queue
.
tq_fú°
;

63 
n
 = 0;

64 
tc
) {

65 i‡(
tc
->
tc_wakeup
)

66 ++
n
;

67 
tc
 =Åc->
tc_queue_lök
;

69  
n
;

70 
	}
}

73 
thªad_⁄hÆt
((*
fun
)(
thªad_id_t
)) {

74 i‡(
cur_tc
->
tc_n⁄hÆt
 >
THREAD_NUM_ONHALT
)

75  -
E_NO_MEM
;

77 
cur_tc
->
tc_⁄hÆt
[cur_tc->
tc_n⁄hÆt
++] = 
fun
;

79 
	}
}

81 
thªad_id_t


82 
	$Æloc_tid
() {

83 
tid
 = 
max_tid
++;

84 i‡(
max_tid
 =(
uöt32_t
)~0)

85 
	`∑nic
("alloc_tid:Ço moreÅhread ids");

86  
tid
;

87 
	}
}

90 
	$thªad_£t_«me
(
thªad_c⁄ãxt
 *
tc
, c⁄° *
«me
)

92 
	`°∫˝y
(
tc
->
tc_«me
, 
«me
, 
«me_size
 - 1);

93 
tc
->
tc_«me
[
«me_size
 - 1] = 0;

94 
	}
}

97 
	$thªad_íåy
() {

98 
cur_tc
->
	`tc_íåy
(cur_tc->
tc_¨g
);

99 
	`thªad_hÆt
();

100 
	}
}

103 
thªad_¸óã
(
thªad_id_t
 *
tid
, c⁄° *
«me
,

104 (*
íåy
)(
uöt64_t
), uöt64_à
¨g
) {

105 
thªad_c⁄ãxt
 *
tc
 = 
	`mÆloc
((thread_context));

106 i‡(!
tc
)

107  -
E_NO_MEM
;

109 
	`mem£t
(
tc
, 0, (
thªad_c⁄ãxt
));

111 
	`thªad_£t_«me
(
tc
, 
«me
);

112 
tc
->
tc_tid
 = 
	`Æloc_tid
();

114 
tc
->
tc_°ack_bŸtom
 = 
	`mÆloc
(
°ack_size
);

115 i‡(!
tc
->
tc_°ack_bŸtom
) {

116 
	`‰ì
(
tc
);

117  -
E_NO_MEM
;

120 *
°ackt›
 = 
tc
->
tc_°ack_bŸtom
 + 
°ack_size
;

122 
°ackt›
 = stacktop - 8;

123 
	`mem£t
(
°ackt›
, 0, 8);

125 
	`mem£t
(&
tc
->
tc_jb
, 0, (tc->tc_jb));

126 
tc
->
tc_jb
.
jb_r•
 = (
uöt64_t
)
°ackt›
;

127 
tc
->
tc_jb
.
jb_rù
 = (
uöt64_t
)&
thªad_íåy
;

128 
tc
->
tc_íåy
 = 
íåy
;

129 
tc
->
tc_¨g
 = 
¨g
;

131 
	`thªadq_push
(&
thªad_queue
, 
tc
);

133 i‡(
tid
)

134 *
tid
 = 
tc
->
tc_tid
;

136 
	}
}

139 
	$thªad_˛ón
(
thªad_c⁄ãxt
 *
tc
) {

140 i‡(!
tc
) ;

142 
i
;

143 
i
 = 0; i < 
tc
->
tc_n⁄hÆt
; i++)

144 
tc
->
tc_⁄hÆt
[
i
]—c->
tc_tid
);

145 
	`‰ì
(
tc
->
tc_°ack_bŸtom
);

146 
	`‰ì
(
tc
);

147 
	}
}

150 
	$thªad_hÆt
() {

153 
	`thªad_˛ón
(
	`thªadq_p›
(&
kûl_queue
));

155 
	`thªadq_push
(&
kûl_queue
, 
cur_tc
);

156 
cur_tc
 = 
NULL
;

157 
	`thªad_yõld
();

160 
	`exô
();

161 
	}
}

164 
	$thªad_yõld
() {

165 
thªad_c⁄ãxt
 *
√xt_tc
 = 
	`thªadq_p›
(&
thªad_queue
);

167 i‡(!
√xt_tc
)

170 i‡(
cur_tc
) {

171 i‡(
	`jos_£tjmp
(&
cur_tc
->
tc_jb
) != 0)

173 
	`thªadq_push
(&
thªad_queue
, 
cur_tc
);

176 
cur_tc
 = 
√xt_tc
;

177 
	`jos_l⁄gjmp
(&
cur_tc
->
tc_jb
, 1);

178 
	}
}

181 
	$¥öt_jb
(
thªad_c⁄ãxt
 *
tc
) {

182 
	`˝rötf
("jum∞buf„∏f‹Åhªad %s:\n", 
tc
->
tc_«me
);

183 
	`˝rötf
("\åù: %x\n", 
tc
->
tc_jb
.
jb_rù
);

184 
	`˝rötf
("\å•: %x\n", 
tc
->
tc_jb
.
jb_r•
);

185 
	`˝rötf
("\åbp: %x\n", 
tc
->
tc_jb
.
jb_rbp
);

186 
	`˝rötf
("\åbx: %x\n", 
tc
->
tc_jb
.
jb_rbx
);

187 
	`˝rötf
("\åsi: %x\n", 
tc
->
tc_jb
.
jb_rsi
);

188 
	`˝rötf
("\ådi: %x\n", 
tc
->
tc_jb
.
jb_rdi
);

189 
	`˝rötf
("\å15: %x\n", 
tc
->
tc_jb
.
jb_r15
);

190 
	`˝rötf
("\å14: %x\n", 
tc
->
tc_jb
.
jb_r14
);

191 
	`˝rötf
("\å13: %x\n", 
tc
->
tc_jb
.
jb_r13
);

192 
	`˝rötf
("\å12: %x\n", 
tc
->
tc_jb
.
jb_r12
);

193 
	`˝rötf
("\å11: %x\n", 
tc
->
tc_jb
.
jb_r11
);

194 
	`˝rötf
("\å10: %x\n", 
tc
->
tc_jb
.
jb_r10
);

195 
	`˝rötf
("\å9: %x\n", 
tc
->
tc_jb
.
jb_r9
);

196 
	`˝rötf
("\å8: %x\n", 
tc
->
tc_jb
.
jb_r8
);

197 
	}
}

	@net/lwip/jos/arch/thread.h

2 #i‚de‡
LWIP_ARCH_THREAD_H


3 
	#LWIP_ARCH_THREAD_H


	)

5 
	~<öc/ty≥s.h
>

7 
uöt32_t
 
	tthªad_id_t
;

9 
thªad_öô
();

10 
thªad_id_t
 
thªad_id
();

11 
thªad_wakeup
(vﬁ©ûê
uöt32_t
 *
addr
);

12 
thªad_waô
(vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆ
, uöt32_à
m£c
);

13 
thªad_wakeups_≥ndög
();

14 
thªad_⁄hÆt
((*
fun
)(
thªad_id_t
));

15 
	`thªad_¸óã
(
thªad_id_t
 *
tid
, c⁄° *
«me
,

16 (*
íåy
)(
uöt64_t
), uöt64_à
¨g
);

17 
	`thªad_yõld
();

18 
	`thªad_hÆt
();

	@net/lwip/jos/arch/threadq.h

2 #i‚de‡
JOS_INC_THREADQ_H


3 
	#JOS_INC_THREADQ_H


	)

5 
	~<¨ch/thªad.h
>

6 
	~<¨ch/£tjmp.h
>

8 
	#THREAD_NUM_ONHALT
 4

	)

9 íum { 
	m«me_size
 = 32 };

10 íum { 
	m°ack_size
 = 
PGSIZE
 };

12 
	gthªad_c⁄ãxt
;

14 
	sthªad_queue


16 
thªad_c⁄ãxt
 *
	mtq_fú°
;

17 
thªad_c⁄ãxt
 *
	mtq_œ°
;

20 
	sthªad_c⁄ãxt
 {

21 
thªad_id_t
 
	mtc_tid
;

22 *
	mtc_°ack_bŸtom
;

23 
	mtc_«me
[
«me_size
];

24 (*
	mtc_íåy
)(
	muöt64_t
);

25 
uöt32_t
 
	mtc_¨g
;

26 
jos_jmp_buf
 
	mtc_jb
;

27 vﬁ©ûê
uöt32_t
 *
	mtc_waô_addr
;

28 vﬁ©ûê
	mtc_wakeup
;

29 (*
	mtc_⁄hÆt
[
THREAD_NUM_ONHALT
])(
	mthªad_id_t
);

30 
	mtc_n⁄hÆt
;

31 
thªad_c⁄ãxt
 *
	mtc_queue_lök
;

34 
ölöe
 

35 
	$thªadq_öô
(
thªad_queue
 *
tq
)

37 
tq
->
tq_fú°
 = 0;

38 
tq
->
tq_œ°
 = 0;

39 
	}
}

41 
ölöe
 

42 
	$thªadq_push
(
thªad_queue
 *
tq
, 
thªad_c⁄ãxt
 *
tc
)

44 
tc
->
tc_queue_lök
 = 0;

45 i‡(!
tq
->
tq_fú°
) {

46 
tq
->
tq_fú°
 = 
tc
;

47 
tq
->
tq_œ°
 = 
tc
;

49 
tq
->
tq_œ°
->
tc_queue_lök
 = 
tc
;

50 
tq
->
tq_œ°
 = 
tc
;

52 
	}
}

54 
ölöe
 
thªad_c⁄ãxt
 *

55 
	$thªadq_p›
(
thªad_queue
 *
tq
)

57 i‡(!
tq
->
tq_fú°
)

60 
thªad_c⁄ãxt
 *
tc
 = 
tq
->
tq_fú°
;

61 
tq
->
tq_fú°
 = 
tc
->
tc_queue_lök
;

62 
tc
->
tc_queue_lök
 = 0;

63  
tc
;

64 
	}
}

	@net/lwip/jos/jif/jif.c

34 
	~<öc/lib.h
>

35 
	~<öc/ns.h
>

37 
	~<jif/jif.h
>

39 
	~"lwù/›t.h
"

40 
	~"lwù/def.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/pbuf.h
"

43 
	~"lwù/sys.h
"

44 
	~<lwù/°©s.h
>

46 
	~<√tif/ëh¨p.h
>

48 
	#PKTMAP
 0x10000000

	)

50 
	sjif
 {

51 
ëh_addr
 *
	mëhaddr
;

52 
ívid_t
 
	mívid
;

56 
	$low_Àvñ_öô
(
√tif
 *netif)

58 
r
;

60 
√tif
->
hwaddr_Àn
 = 6;

61 
√tif
->
mtu
 = 1500;

62 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
;

65 
√tif
->
hwaddr
[0] = 0x52;

66 
√tif
->
hwaddr
[1] = 0x54;

67 
√tif
->
hwaddr
[2] = 0x00;

68 
√tif
->
hwaddr
[3] = 0x12;

69 
√tif
->
hwaddr
[4] = 0x34;

70 
√tif
->
hwaddr
[5] = 0x56;

71 
	}
}

81 
îr_t


82 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

84 
r
 = 
	`sys_∑ge_Æloc
(0, (*)
PKTMAP
, 
PTE_U
|
PTE_W
|
PTE_P
);

85 i‡(
r
 < 0)

86 
	`∑nic
("jif: couldÇotállocateÖage of memory");

87 
jif_pkt
 *
pkt
 = (jif_pkà*)
PKTMAP
;

89 
jif
 *jif;

90 
jif
 = 
√tif
->
°©e
;

92 *
txbuf
 = 
pkt
->
jp_d©a
;

93 
txsize
 = 0;

94 
pbuf
 *
q
;

95 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

100 i‡(
txsize
 + 
q
->
Àn
 > 2000)

101 
	`∑nic
("ovîsizedÖackë, føgmíà%dÅxsizê%d\n", 
q
->
Àn
, 
txsize
);

102 
	`mem˝y
(&
txbuf
[
txsize
], 
q
->
∑ylﬂd
, q->
Àn
);

103 
txsize
 +
q
->
Àn
;

106 
pkt
->
jp_Àn
 = 
txsize
;

108 
	`ùc_£nd
(
jif
->
ívid
, 
NSREQ_OUTPUT
, (*)
pkt
, 
PTE_P
|
PTE_W
|
PTE_U
);

109 
	`sys_∑ge_unm≠
(0, (*)
pkt
);

111  
ERR_OK
;

112 
	}
}

121 
pbuf
 *

122 
	$low_Àvñ_öput
(*
va
)

124 
jif_pkt
 *
pkt
 = (jif_pkà*)
va
;

125 
s16_t
 
Àn
 = 
pkt
->
jp_Àn
;

127 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

128 i‡(
p
 == 0)

133 *
rxbuf
 = (*Ë
pkt
->
jp_d©a
;

134 
c›õd
 = 0;

135 
pbuf
 *
q
;

136 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

140 
byãs
 = 
q
->
Àn
;

141 i‡(
byãs
 > (
Àn
 - 
c›õd
))

142 
byãs
 = 
Àn
 - 
c›õd
;

143 
	`mem˝y
(
q
->
∑ylﬂd
, 
rxbuf
 + 
c›õd
, 
byãs
);

144 
c›õd
 +
byãs
;

147  
p
;

148 
	}
}

158 
îr_t


159 
	$jif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

160 
ù_addr
 *
ùaddr
)

163  
	`ëh¨p_ouçut
(
√tif
, 
p
, 
ùaddr
);

164 
	}
}

177 
	$jif_öput
(
√tif
 *√tif, *
va
)

179 
jif
 *jif;

180 
ëh_hdr
 *
ëhhdr
;

181 
pbuf
 *
p
;

183 
jif
 = 
√tif
->
°©e
;

186 
p
 = 
	`low_Àvñ_öput
(
va
);

189 i‡(
p
 =
NULL
) ;

191 
ëhhdr
 = 
p
->
∑ylﬂd
;

193 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

194 
ETHTYPE_IP
:

196 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

198 
	`pbuf_hódî
(
p
, -()(
ëh_hdr
));

200 
√tif
->
	`öput
(
p
,Çetif);

203 
ETHTYPE_ARP
:

205 
	`ëh¨p_¨p_öput
(
√tif
, 
jif
->
ëhaddr
, 
p
);

209 
	`pbuf_‰ì
(
p
);

211 
	}
}

222 
îr_t


223 
	$jif_öô
(
√tif
 *netif)

225 
jif
 *jif;

226 
ívid_t
 *
ouçut_ívid
;

228 
jif
 = 
	`mem_mÆloc
((jif));

230 i‡(
jif
 =
NULL
) {

231 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("jif_init: out of memory\n"));

232  
ERR_MEM
;

235 
ouçut_ívid
 = (
ívid_t
 *)
√tif
->
°©e
;

237 
√tif
->
°©e
 = 
jif
;

238 
√tif
->
ouçut
 = 
jif_ouçut
;

239 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

240 
	`mem˝y
(&
√tif
->
«me
[0], "en", 2);

242 
jif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

243 
jif
->
ívid
 = *
ouçut_ívid
;

245 
	`low_Àvñ_öô
(
√tif
);

247 
	`ëh¨p_öô
();

252 
uöt32_t
 
ùaddr
 = 
	`öë_addr
("10.0.2.2");

253 
	`ëh¨p_quîy
(
√tif
, (
ù_addr
 *Ë&
ùaddr
, 0);

255  
ERR_OK
;

256 
	}
}

	@net/lwip/jos/jif/jif.h

2 
	~<lwù/√tif.h
>

4 
jif_öput
(
√tif
 *√tif, *
va
);

5 
îr_t
 
jif_öô
(
√tif
 *netif);

	@net/lwip/jos/lwipopts.h

2 #i‚de‡
JOS_LWIP_LWIPOPTS_H


3 
	#JOS_LWIP_LWIPOPTS_H


	)

9 
	~<öc/ty≥s.h
>

10 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

14 
	#LWIP_STATS
 0

	)

15 
	#LWIP_STATS_DISPLAY
 0

	)

16 
	#LWIP_DHCP
 1

	)

17 
	#LWIP_COMPAT_SOCKETS
 0

	)

19 
	#LWIP_PROVIDE_ERRNO
 1

	)

24 
	#MEM_ALIGNMENT
 4

	)

26 
	#MEMP_NUM_PBUF
 64

	)

27 
	#MEMP_NUM_UDP_PCB
 8

	)

28 
	#MEMP_NUM_TCP_PCB
 32

	)

29 
	#MEMP_NUM_TCP_PCB_LISTEN
 16

	)

30 
	#MEMP_NUM_TCP_SEG
 
TCP_SND_QUEUELEN


31 
	#MEMP_NUM_NETBUF
 128

	)

32 
	#MEMP_NUM_NETCONN
 32

	)

33 
	#MEMP_NUM_SYS_TIMEOUT
 6

	)

35 
	#PER_TCP_PCB_BUFFER
 (16 * 4096)

	)

36 
	#MEM_SIZE
 (
PER_TCP_PCB_BUFFER
*
MEMP_NUM_TCP_SEG
 + 4096*MEMP_NUM_TCP_SEG)

	)

38 
	#PBUF_POOL_SIZE
 512

	)

39 
	#PBUF_POOL_BUFSIZE
 2000

	)

41 
	#TCP_MSS
 1460

	)

42 
	#TCP_WND
 24000

	)

43 
	#TCP_SND_BUF
 (16 * 
TCP_MSS
)

	)

46 
	#TCP_SND_QUEUELEN
 (2 * 
TCP_SND_BUF
/
TCP_MSS
)

	)

50 
	#LWIP_DEBUG
 1

	)

58 
	#DBG_MIN_LEVEL
 
DBG_LEVEL_SERIOUS


	)

59 
	#LWIP_DBG_MIN_LEVEL
 0

	)

60 
	#MEMP_SANITY_CHECK
 0

	)

62 
	#ERRNO


	)

	@net/lwip/netif/etharp.c

48 
	~"lwù/›t.h
"

50 #i‡
LWIP_ARP


52 
	~"lwù/öë.h
"

53 
	~"lwù/ù.h
"

54 
	~"lwù/°©s.h
"

55 
	~"lwù/¢mp.h
"

56 
	~"lwù/dh˝.h
"

57 
	~"lwù/autoù.h
"

58 
	~"√tif/ëh¨p.h
"

60 #i‡
PPPOE_SUPPORT


61 
	~"√tif/µp_€.h
"

64 
	~<°rög.h
>

70 
	#ARP_MAXAGE
 240

	)

78 
	#ARP_MAXPENDING
 2

	)

80 
	#HWTYPE_ETHERNET
 1

	)

82 
	#ARPH_HWLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë>> 8)

	)

83 
	#ARPH_PROTOLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë& 0xff)

	)

85 
	#ARPH_HWLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(
	`ARPH_PROTOLEN
(hdrË| (÷íË<< 8))

	)

86 
	#ARPH_PROTOLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(÷íË| (
	`ARPH_HWLEN
(hdrË<< 8))

	)

88 
	eëh¨p_°©e
 {

89 
	mETHARP_STATE_EMPTY
 = 0,

90 
	mETHARP_STATE_PENDING
,

91 
	mETHARP_STATE_STABLE


94 
	sëh¨p_íåy
 {

95 #i‡
ARP_QUEUEING


99 
ëh¨p_q_íåy
 *
	mq
;

101 
ù_addr
 
	mùaddr
;

102 
ëh_addr
 
	mëhaddr
;

103 
ëh¨p_°©e
 
	m°©e
;

104 
u8_t
 
	m˘ime
;

105 
√tif
 *
	m√tif
;

108 c⁄° 
ëh_addr
 
	gëhbrﬂdˇ°
 = {{0xff,0xff,0xff,0xff,0xff,0xff}};

109 c⁄° 
ëh_addr
 
	gëhzîo
 = {{0,0,0,0,0,0}};

110 
ëh¨p_íåy
 
	g¨p_èbÀ
[
ARP_TABLE_SIZE
];

111 #i‡!
LWIP_NETIF_HWADDRHINT


112 
u8_t
 
	gëh¨p_ˇched_íåy
;

118 
	#ETHARP_TRY_HARD
 1

	)

119 
	#ETHARP_FIND_ONLY
 2

	)

121 #i‡
LWIP_NETIF_HWADDRHINT


122 
	#NETIF_SET_HINT
(
√tif
, 
höt
Ëi‡((“ëifË!
NULL
Ë&& (“ëif)->
addr_höt
 != NULL)) \

123 *((
√tif
)->
addr_höt
Ë(
höt
);

	)

124 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif);

126 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
);

129 
îr_t
 
upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
);

133 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

138 #i‡
ARP_QUEUEING


145 
	$‰ì_ëh¨p_q
(
ëh¨p_q_íåy
 *
q
)

147 
ëh¨p_q_íåy
 *
r
;

148 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

149 
	`LWIP_ASSERT
("q->∞!NULL", 
q
->
p
 !
NULL
);

150 
q
) {

151 
r
 = 
q
;

152 
q
 = q->
√xt
;

153 
	`LWIP_ASSERT
("r->∞!NULL", (
r
->
p
 !
NULL
));

154 
	`pbuf_‰ì
(
r
->
p
);

155 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
r
);

157 
	}
}

167 
	$ëh¨p_tmr
()

169 
u8_t
 
i
;

171 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("etharp_timer\n"));

173 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

174 
¨p_èbÀ
[
i
].
˘ime
++;

175 i‡(((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) &&

176 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXAGE
)) ||

177 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) &&

178 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXPENDING
))) {

180 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî:Éxpúed %†íåy %"
U16_F
".\n",

181 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
 ? "°abÀ" : "≥ndög", (
u16_t
)i));

184 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

185 #i‡
ARP_QUEUEING


187 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

189 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî: fªeögÉ¡ry %"
U16_F
",Öackë queuê%p.\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

190 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

191 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

195 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

197 #i‡
ARP_QUEUEING


199 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

204 
	}
}

228 
	gs8_t


229 #i‡
LWIP_NETIF_HWADDRHINT


230 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif)

232 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
)

235 
s8_t
 
ﬁd_≥ndög
 = 
ARP_TABLE_SIZE
, 
ﬁd_°abÀ
 = ARP_TABLE_SIZE;

236 
s8_t
 
em±y
 = 
ARP_TABLE_SIZE
;

237 
u8_t
 
i
 = 0, 
age_≥ndög
 = 0, 
age_°abÀ
 = 0;

238 #i‡
ARP_QUEUEING


240 
s8_t
 
ﬁd_queue
 = 
ARP_TABLE_SIZE
;

242 
u8_t
 
age_queue
 = 0;

247 i‡(
ùaddr
) {

249 #i‡
LWIP_NETIF_HWADDRHINT


250 i‡((
√tif
 !
NULL
Ë&& (√tif->
addr_höt
 != NULL)) {

252 
u8_t
 
≥r_pcb_ˇche
 = *(
√tif
->
addr_höt
);

253 i‡((
≥r_pcb_ˇche
 < 
ARP_TABLE_SIZE
Ë&& 
¨p_èbÀ
[≥r_pcb_ˇche].
°©e
 =
ETHARP_STATE_STABLE
) {

255 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
≥r_pcb_ˇche
].ipaddr)) {

257 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

258  
≥r_pcb_ˇche
;

263 i‡(
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
°©e
 =
ETHARP_STATE_STABLE
) {

265 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].ipaddr)) {

267 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

268  
ëh¨p_ˇched_íåy
;

289 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

291 i‡((
em±y
 =
ARP_TABLE_SIZE
Ë&& (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
)) {

292 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("föd_íåy: foundÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

294 
em±y
 = 
i
;

297 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

299 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

300 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chögÖídögÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

302 #i‡
LWIP_NETIF_HWADDRHINT


303 
	`NETIF_SET_HINT
(
√tif
, 
i
);

305 
ëh¨p_ˇched_íåy
 = 
i
;

307  
i
;

308 #i‡
ARP_QUEUEING


310 } i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

311 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_queue
) {

312 
ﬁd_queue
 = 
i
;

313 
age_queue
 = 
¨p_èbÀ
[
i
].
˘ime
;

318 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_≥ndög
) {

319 
ﬁd_≥ndög
 = 
i
;

320 
age_≥ndög
 = 
¨p_èbÀ
[
i
].
˘ime
;

325 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

327 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

328 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chög sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

330 #i‡
LWIP_NETIF_HWADDRHINT


331 
	`NETIF_SET_HINT
(
√tif
, 
i
);

333 
ëh¨p_ˇched_íåy
 = 
i
;

335  
i
;

337 } i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_°abÀ
) {

338 
ﬁd_°abÀ
 = 
i
;

339 
age_°abÀ
 = 
¨p_èbÀ
[
i
].
˘ime
;

346 i‡(((
em±y
 =
ARP_TABLE_SIZE
Ë&& ((
Êags
 & 
ETHARP_TRY_HARD
) == 0))

348 || ((
Êags
 & 
ETHARP_FIND_ONLY
) != 0)) {

349 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmptyÉntry foundándÇotállowedÅoÑecycle\n"));

350  (
s8_t
)
ERR_MEM
;

363 i‡(
em±y
 < 
ARP_TABLE_SIZE
) {

364 
i
 = 
em±y
;

365 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ögÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

368 i‡(
ﬁd_°abÀ
 < 
ARP_TABLE_SIZE
) {

370 
i
 = 
ﬁd_°abÀ
;

371 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde° sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

372 #i‡
ARP_QUEUEING


374 
	`LWIP_ASSERT
("¨p_èbÀ[i].q =NULL", 
¨p_èbÀ
[
i
].
q
 =
NULL
);

377 } i‡(
ﬁd_≥ndög
 < 
ARP_TABLE_SIZE
) {

379 
i
 = 
ﬁd_≥ndög
;

380 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
" (wôhouàqueue)\n", (
u16_t
)
i
));

381 #i‡
ARP_QUEUEING


383 } i‡(
ﬁd_queue
 < 
ARP_TABLE_SIZE
) {

385 
i
 = 
ﬁd_queue
;

386 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
", fªeögÖackë queuê%p\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

387 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

388 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

392  (
s8_t
)
ERR_MEM
;

396 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

398 i‡(
¨p_èbÀ
[
i
].
°©e
 !
ETHARP_STATE_EMPTY
)

400 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

403 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

406 i‡(
ùaddr
 !
NULL
) {

408 
	`ù_addr_£t
(&
¨p_èbÀ
[
i
].
ùaddr
, ipaddr);

410 
¨p_èbÀ
[
i
].
˘ime
 = 0;

411 #i‡
LWIP_NETIF_HWADDRHINT


412 
	`NETIF_SET_HINT
(
√tif
, 
i
);

414 
ëh¨p_ˇched_íåy
 = 
i
;

416  (
îr_t
)
i
;

417 
	}
}

429 
îr_t


430 
	$ëh¨p_£nd_ù
(
√tif
 *√tif, 
pbuf
 *
p
, 
ëh_addr
 *
§c
, ëh_add∏*
d°
)

432 
ëh_hdr
 *
ëhhdr
 = 
p
->
∑ylﬂd
;

433 
u8_t
 
k
;

435 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

436 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

437 
k
 = 
ETHARP_HWADDR_LEN
;

438 
k
 > 0) {

439 
k
--;

440 
ëhhdr
->
de°
.
addr
[
k
] = 
d°
->addr[k];

441 
ëhhdr
->
§c
.
addr
[
k
] = src->addr[k];

443 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_IP
);

444 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_£nd_ù: sídögÖackë %p\n", (*)
p
));

446  
√tif
->
	`lökouçut
“ëif, 
p
);

447 
	}
}

468 
îr_t


469 
	$upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
)

471 
s8_t
 
i
;

472 
u8_t
 
k
;

473 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("update_arp_entry()\n"));

474 
	`LWIP_ASSERT
("√tif->hwaddr_À¿=ETHARP_HWADDR_LEN", 
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
);

475 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

476 
	`ù4_addr1
(
ùaddr
), 
	`ù4_addr2
(ùaddr), 
	`ù4_addr3
(ùaddr), 
	`ù4_addr4
(ipaddr),

477 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

478 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

480 i‡(
	`ù_addr_ißny
(
ùaddr
) ||

481 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

482 
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

483 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("update_arp_entry: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

484  
ERR_ARG
;

487 #i‡
LWIP_NETIF_HWADDRHINT


488 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
, 
√tif
);

490 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
);

493 i‡(
i
 < 0)

494  (
îr_t
)
i
;

497 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_STABLE
;

499 
¨p_èbÀ
[
i
].
√tif
 =Çetif;

502 
	`¢mp_ö£π_¨pidx_åì
(
√tif
, &
¨p_èbÀ
[
i
].
ùaddr
);

504 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: upd©ög sèbÀÉ¡ry %"
S16_F
"\n", (
s16_t
)
i
));

506 
k
 = 
ETHARP_HWADDR_LEN
;

507 
k
 > 0) {

508 
k
--;

509 
¨p_èbÀ
[
i
].
ëhaddr
.
addr
[
k
] =Éthaddr->addr[k];

512 
¨p_èbÀ
[
i
].
˘ime
 = 0;

513 #i‡
ARP_QUEUEING


515 
¨p_èbÀ
[
i
].
q
 !
NULL
) {

516 
pbuf
 *
p
;

518 
ëh¨p_q_íåy
 *
q
 = 
¨p_èbÀ
[
i
].q;

520 
¨p_èbÀ
[
i
].
q
 = q->
√xt
;

522 
p
 = 
q
->p;

524 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
q
);

526 
	`ëh¨p_£nd_ù
(
√tif
, 
p
, (
ëh_addr
*)“ëif->
hwaddr
), 
ëhaddr
);

528 
	`pbuf_‰ì
(
p
);

531  
ERR_OK
;

532 
	}
}

545 
s8_t


546 
	$ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

547 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
)

549 
s8_t
 
i
;

551 
	`LWIP_UNUSED_ARG
(
√tif
);

553 #i‡
LWIP_NETIF_HWADDRHINT


554 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
, 
NULL
);

556 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
);

558 if((
i
 >0Ë&& 
¨p_èbÀ
[i].
°©e
 =
ETHARP_STATE_STABLE
) {

559 *
ëh_ªt
 = &
¨p_èbÀ
[
i
].
ëhaddr
;

560 *
ù_ªt
 = &
¨p_èbÀ
[
i
].
ùaddr
;

561  
i
;

564 
	}
}

582 
	$ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

584 
ëhù_hdr
 *
hdr
;

585 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

588 
hdr
 = 
p
->
∑ylﬂd
;

590 i‡(!
	`ù_addr_√tcmp
(&(
hdr
->
ù
.
§c
), &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

595 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_ip_input: updating ETHARPÅable.\n"));

599 
	`upd©e_¨p_íåy
(
√tif
, &(
hdr
->
ù
.
§c
), &(hdr->
ëh
.src), 0);

600 
	}
}

619 
	$ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
, 
pbuf
 *
p
)

621 
ëh¨p_hdr
 *
hdr
;

623 
ù_addr
 
sùaddr
, 
dùaddr
;

624 
u8_t
 
i
;

625 
u8_t
 
f‹_us
;

626 #i‡
LWIP_AUTOIP


627 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

630 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

634 i‡(
p
->
Àn
 < (
ëh¨p_hdr
)) {

635 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ëh¨p_¨p_öput:Öackë dr›≥d,Åoÿsh‹à(%"
S16_F
"/%"S16_F")\n", 
p
->
tŸ_Àn
, (
s16_t
)(
ëh¨p_hdr
)));

636 
	`ETHARP_STATS_INC
(
ëh¨p
.
À√º
);

637 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

638 
	`pbuf_‰ì
(
p
);

642 
hdr
 = 
p
->
∑ylﬂd
;

645 i‡((
hdr
->
hwty≥
 !
	`ht⁄s
(
HWTYPE_ETHERNET
)) ||

646 (
hdr
->
_hwÀn_¥Ÿﬁí
 !
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
))) ||

647 (
hdr
->
¥Ÿo
 !
	`ht⁄s
(
ETHTYPE_IP
)) ||

648 (
hdr
->
ëhhdr
.
ty≥
 !
	`ht⁄s
(
ETHTYPE_ARP
))) {

649 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1,

650 ("ëh¨p_¨p_öput:Öackë dr›≥d, wr⁄g hwÅy≥, hwÀn,ÖrŸo,ÖrŸﬁí o∏ëhî√àty≥ (%"
U16_F
"/%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",

651 
hdr
->
hwty≥
, 
	`ARPH_HWLEN
(hdr), hdr->
¥Ÿo
, 
	`ARPH_PROTOLEN
(hdr), hdr->
ëhhdr
.
ty≥
));

652 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

653 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

654 
	`pbuf_‰ì
(
p
);

657 
	`ETHARP_STATS_INC
(
ëh¨p
.
ªcv
);

659 #i‡
LWIP_AUTOIP


663 
	`autoù_¨p_ª∂y
(
√tif
, 
hdr
);

668 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

669 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

672 i‡(
√tif
->
ù_addr
.
addr
 == 0) {

673 
f‹_us
 = 0;

676 
f‹_us
 = 
	`ù_addr_cmp
(&
dùaddr
, &(
√tif
->
ù_addr
));

680 i‡(
f‹_us
) {

683 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 
ETHARP_TRY_HARD
);

687 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 0);

691 
	`ht⁄s
(
hdr
->
›code
)) {

693 
ARP_REQUEST
:

698 
	`LWIP_DEBUGF
 (
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑequest\n"));

700 i‡(
f‹_us
) {

702 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input:ÑeplyingÅo ARPÑequest for our IPáddress\n"));

706 
hdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

708 
hdr
->
dùaddr
 = hdr->
sùaddr
;

709 
hdr
->
sùaddr
 = *(
ù_addr2
 *)&
√tif
->
ù_addr
;

711 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

712 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

713 
i
 = 
ETHARP_HWADDR_LEN
;

714 #i‡
LWIP_AUTOIP


717 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
hdr
->
shwaddr
.addr;

720 
i
 > 0) {

721 
i
--;

722 
hdr
->
dhwaddr
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

723 #i‡
LWIP_AUTOIP


724 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = 
ëhd°_hwaddr
[i];

726 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

728 
hdr
->
shwaddr
.
addr
[
i
] = 
ëhaddr
->addr[i];

729 
hdr
->
ëhhdr
.
§c
.
addr
[
i
] = 
ëhaddr
->addr[i];

736 
√tif
->
	`lökouçut
“ëif, 
p
);

738 } i‡(
√tif
->
ù_addr
.
addr
 == 0) {

740 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: weáre unconfigured, ARPÑequest ignored.\n"));

744 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: ARPÑequest wasÇot for us.\n"));

747 
ARP_REPLY
:

749 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑeply\n"));

750 #i‡(
LWIP_DHCP
 && 
DHCP_DOES_ARP_CHECK
)

755 
	`dh˝_¨p_ª∂y
(
√tif
, &
sùaddr
);

759 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_¨p_öput: ARP unknow¿›codêty≥ %"
S16_F
"\n", 
	`ht⁄s
(
hdr
->
›code
)));

760 
	`ETHARP_STATS_INC
(
ëh¨p
.
îr
);

764 
	`pbuf_‰ì
(
p
);

765 
	}
}

785 
îr_t


786 
	$ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
)

788 
ëh_addr
 *
de°
, 
mˇ°addr
;

791 i‡(
	`pbuf_hódî
(
q
, (
ëh_hdr
)) != 0) {

793 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_output: couldÇotállocateÑoom for header.\n"));

794 
	`LINK_STATS_INC
(
lök
.
À√º
);

795  
ERR_BUF
;

799 
de°
 = 
NULL
;

804 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

806 
de°
 = (
ëh_addr
 *)&
ëhbrﬂdˇ°
;

808 } i‡(
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

810 
mˇ°addr
.
addr
[0] = 0x01;

811 
mˇ°addr
.
addr
[1] = 0x00;

812 
mˇ°addr
.
addr
[2] = 0x5e;

813 
mˇ°addr
.
addr
[3] = 
	`ù4_addr2
(
ùaddr
) & 0x7f;

814 
mˇ°addr
.
addr
[4] = 
	`ù4_addr3
(
ùaddr
);

815 
mˇ°addr
.
addr
[5] = 
	`ù4_addr4
(
ùaddr
);

817 
de°
 = &
mˇ°addr
;

821 i‡(!
	`ù_addr_√tcmp
(
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

823 i‡(
√tif
->
gw
.
addr
 != 0) {

825 
ùaddr
 = &(
√tif
->
gw
);

829  
ERR_RTE
;

833  
	`ëh¨p_quîy
(
√tif
, 
ùaddr
, 
q
);

839  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
), 
de°
);

840 
	}
}

875 
îr_t


876 
	$ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
)

878 
ëh_addr
 * 
§ˇddr
 = (ëh_add∏*)
√tif
->
hwaddr
;

879 
îr_t
 
ªsu…
 = 
ERR_MEM
;

880 
s8_t
 
i
;

883 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

884 
	`ù_addr_ismu…iˇ°
(
ùaddr
) ||

885 
	`ù_addr_ißny
(
ùaddr
)) {

886 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

887  
ERR_ARG
;

891 #i‡
LWIP_NETIF_HWADDRHINT


892 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
, 
√tif
);

894 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
);

898 i‡(
i
 < 0) {

899 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: couldÇot create ARPÉntry\n"));

900 i‡(
q
) {

901 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query:Öacket dropped\n"));

902 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

904  (
îr_t
)
i
;

908 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
) {

909 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_PENDING
;

913 
	`LWIP_ASSERT
("arp_table[i].state == PENDING or STABLE",

914 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) ||

915 (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
)));

918 i‡((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
Ë|| (
q
 =
NULL
)) {

920 
ªsu…
 = 
	`ëh¨p_ªque°
(
√tif
, 
ùaddr
);

921 i‡(
ªsu…
 !
ERR_OK
) {

930 i‡(
q
 !
NULL
) {

932 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

935 
ªsu…
 = 
	`ëh¨p_£nd_ù
(
√tif
, 
q
, 
§ˇddr
, &(
¨p_èbÀ
[
i
].
ëhaddr
));

937 } i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

938 #i‡
ARP_QUEUEING


939 
pbuf
 *
p
;

940 
c›y_√eded
 = 0;

944 
p
 = 
q
;

945 
p
) {

946 
	`LWIP_ASSERT
("nÿ∑ckë queue†Ælowed!", (
p
->
Àn
 !p->
tŸ_Àn
Ë|| (p->
√xt
 == 0));

947 if(
p
->
ty≥
 !
PBUF_ROM
) {

948 
c›y_√eded
 = 1;

951 
p
 =Ö->
√xt
;

953 if(
c›y_√eded
) {

955 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
,Ö->
tŸ_Àn
, 
PBUF_RAM
);

956 if(
p
 !
NULL
) {

957 i‡(
	`pbuf_c›y
(
p
, 
q
Ë!
ERR_OK
) {

958 
	`pbuf_‰ì
(
p
);

959 
p
 = 
NULL
;

964 
p
 = 
q
;

965 
	`pbuf_ªf
(
p
);

968 i‡(
p
 !
NULL
) {

970 
ëh¨p_q_íåy
 *
√w_íåy
;

972 
√w_íåy
 = 
	`memp_mÆloc
(
MEMP_ARP_QUEUE
);

973 i‡(
√w_íåy
 !
NULL
) {

974 
√w_íåy
->
√xt
 = 0;

975 
√w_íåy
->
p
 =Ö;

976 if(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

978 
ëh¨p_q_íåy
 *
r
;

979 
r
 = 
¨p_èbÀ
[
i
].
q
;

980 
r
->
√xt
 !
NULL
) {

981 
r
 =Ñ->
√xt
;

983 
r
->
√xt
 = 
√w_íåy
;

986 
¨p_èbÀ
[
i
].
q
 = 
√w_íåy
;

988 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

989 
ªsu…
 = 
ERR_OK
;

992 
	`pbuf_‰ì
(
p
);

993 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

997 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

998 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1004 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: Ethî√àde°ö©i⁄áddªs†unknown, queueög dißbÀd,Öackë %∞dr›≥d\n", (*)
q
));

1008  
ªsu…
;

1009 
	}
}

1026 #i‡!
LWIP_AUTOIP


1029 
îr_t


1030 
	$ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

1031 c⁄° 
ëh_addr
 *
ëhd°_addr
,

1032 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

1033 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

1034 c⁄° 
u16_t
 
›code
)

1036 
pbuf
 *
p
;

1037 
îr_t
 
ªsu…
 = 
ERR_OK
;

1038 
u8_t
 
k
;

1039 
ëh¨p_hdr
 *
hdr
;

1040 #i‡
LWIP_AUTOIP


1041 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

1045 
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh¨p_hdr
), 
PBUF_RAM
);

1047 i‡(
p
 =
NULL
) {

1048 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_raw: couldÇotállocateÖbuf for ARPÑequest.\n"));

1049 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1050  
ERR_MEM
;

1052 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÉtharp_hdr",

1053 (
p
->
Àn
 >(
ëh¨p_hdr
)));

1055 
hdr
 = 
p
->
∑ylﬂd
;

1056 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_raw: sendingÑaw ARPÖacket.\n"));

1057 
hdr
->
›code
 = 
	`ht⁄s
(opcode);

1059 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

1060 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

1061 
k
 = 
ETHARP_HWADDR_LEN
;

1062 #i‡
LWIP_AUTOIP


1065 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
ëhd°_addr
->addr;

1068 
k
 > 0) {

1069 
k
--;

1071 
hdr
->
shwaddr
.
addr
[
k
] = 
hw§c_addr
->addr[k];

1072 
hdr
->
dhwaddr
.
addr
[
k
] = 
hwd°_addr
->addr[k];

1074 #i‡
LWIP_AUTOIP


1075 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_hwaddr
[k];

1077 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_addr
->addr[k];

1079 
hdr
->
ëhhdr
.
§c
.
addr
[
k
] = 
ëh§c_addr
->addr[k];

1081 
hdr
->
sùaddr
 = *(
ù_addr2
 *)
ù§c_addr
;

1082 
hdr
->
dùaddr
 = *(
ù_addr2
 *)
ùd°_addr
;

1084 
hdr
->
hwty≥
 = 
	`ht⁄s
(
HWTYPE_ETHERNET
);

1085 
hdr
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

1087 
hdr
->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
));

1089 
hdr
->
ëhhdr
.
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

1091 
ªsu…
 = 
√tif
->
	`lökouçut
“ëif, 
p
);

1092 
	`ETHARP_STATS_INC
(
ëh¨p
.
xmô
);

1094 
	`pbuf_‰ì
(
p
);

1095 
p
 = 
NULL
;

1098  
ªsu…
;

1099 
	}
}

1110 
îr_t


1111 
	$ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

1113 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_request: sending ARPÑequest.\n"));

1114  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

1115 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
ù_addr
, &
ëhzîo
,

1116 
ùaddr
, 
ARP_REQUEST
);

1117 
	}
}

1127 
îr_t


1128 
	$ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif)

1130 
ëh_hdr
* 
ëhhdr
;

1133 
ëhhdr
 = 
p
->
∑ylﬂd
;

1134 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
,

1136 ()
ëhhdr
->
de°
.
addr
[0], ()ethhdr->dest.addr[1], ()ethhdr->dest.addr[2],

1137 ()
ëhhdr
->
de°
.
addr
[3], ()ethhdr->dest.addr[4], ()ethhdr->dest.addr[5],

1138 ()
ëhhdr
->
§c
.
addr
[0], ()ethhdr->src.addr[1], ()ethhdr->src.addr[2],

1139 ()
ëhhdr
->
§c
.
addr
[3], ()ethhdr->src.addr[4], ()ethhdr->src.addr[5],

1140 ()
	`ht⁄s
(
ëhhdr
->
ty≥
)));

1142 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

1144 
ETHTYPE_IP
:

1145 #i‡
ETHARP_TRUST_IP_MAC


1147 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

1150 if(
	`pbuf_hódî
(
p
, -(
s16_t
)(
ëh_hdr
))) {

1151 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

1152 
	`pbuf_‰ì
(
p
);

1153 
p
 = 
NULL
;

1156 
	`ù_öput
(
p
, 
√tif
);

1160 
ETHTYPE_ARP
:

1162 
	`ëh¨p_¨p_öput
(
√tif
, (
ëh_addr
*)“ëif->
hwaddr
), 
p
);

1165 #i‡
PPPOE_SUPPORT


1166 
ETHTYPE_PPPOEDISC
:

1167 
	`µp€_disc_öput
(
√tif
, 
p
);

1170 
ETHTYPE_PPPOE
:

1171 
	`µp€_d©a_öput
(
√tif
, 
p
);

1176 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1177 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1178 
	`pbuf_‰ì
(
p
);

1179 
p
 = 
NULL
;

1185  
ERR_OK
;

1186 
	}
}

	@net/lwip/netif/ethernetif.c

47 
	~"lwù/›t.h
"

51 
	~"lwù/def.h
"

52 
	~"lwù/mem.h
"

53 
	~"lwù/pbuf.h
"

54 
	~"lwù/sys.h
"

55 
	~<lwù/°©s.h
>

56 
	~<lwù/¢mp.h
>

57 
	~"√tif/ëh¨p.h
"

58 
	~"√tif/µp_€.h
"

61 
	#IFNAME0
 'e'

	)

62 
	#IFNAME1
 'n'

	)

70 
	sëhî√tif
 {

71 
ëh_addr
 *
	mëhaddr
;

76 
ëhî√tif_öput
(
√tif
 *netif);

86 
	$low_Àvñ_öô
(
√tif
 *netif)

88 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

91 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

94 
√tif
->
hwaddr
[0] = ;

96 
√tif
->
hwaddr
[5] = ;

99 
√tif
->
mtu
 = 1500;

103 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

106 
	}
}

124 
îr_t


125 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

127 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

128 
pbuf
 *
q
;

130 
öôüã
 
	`å™s„r
();

132 #i‡
ETH_PAD_SIZE


133 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

136 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

140 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

143 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

145 #i‡
ETH_PAD_SIZE


146 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

149 
	`LINK_STATS_INC
(
lök
.
xmô
);

151  
ERR_OK
;

152 
	}
}

162 
pbuf
 *

163 
	$low_Àvñ_öput
(
√tif
 *netif)

165 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

166 
pbuf
 *
p
, *
q
;

167 
u16_t
 
Àn
;

171 
Àn
 = ;

173 #i‡
ETH_PAD_SIZE


174 
Àn
 +
ETH_PAD_SIZE
;

178 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

180 i‡(
p
 !
NULL
) {

182 #i‡
ETH_PAD_SIZE


183 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

188 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

192 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

194 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

196 #i‡
ETH_PAD_SIZE


197 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

200 
	`LINK_STATS_INC
(
lök
.
ªcv
);

202 
dr›
 
	`∑ckë
();

203 
	`LINK_STATS_INC
(
lök
.
memîr
);

204 
	`LINK_STATS_INC
(
lök
.
dr›
);

207  
p
;

208 
	}
}

220 
	$ëhî√tif_öput
(
√tif
 *netif)

222 
ëhî√tif
 *ethernetif;

223 
ëh_hdr
 *
ëhhdr
;

224 
pbuf
 *
p
;

226 
ëhî√tif
 = 
√tif
->
°©e
;

229 
p
 = 
	`low_Àvñ_öput
(
√tif
);

231 i‡(
p
 =
NULL
) ;

233 
ëhhdr
 = 
p
->
∑ylﬂd
;

235 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

237 
ETHTYPE_IP
:

238 
ETHTYPE_ARP
:

239 #i‡
PPPOE_SUPPORT


241 
ETHTYPE_PPPOEDISC
:

242 
ETHTYPE_PPPOE
:

245 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

246 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_input: IP inputÉrror\n"));

247 
	`pbuf_‰ì
(
p
);

248 
p
 = 
NULL
;

253 
	`pbuf_‰ì
(
p
);

254 
p
 = 
NULL
;

257 
	}
}

271 
îr_t


272 
	$ëhî√tif_öô
(
√tif
 *netif)

274 
ëhî√tif
 *ethernetif;

276 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

278 
ëhî√tif
 = 
	`mem_mÆloc
((ethernetif));

279 i‡(
ëhî√tif
 =
NULL
) {

280 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_init: out of memory\n"));

281  
ERR_MEM
;

284 #i‡
LWIP_NETIF_HOSTNAME


286 
√tif
->
ho°«me
 = "lwip";

294 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, ???);

296 
√tif
->
°©e
 = 
ëhî√tif
;

297 
√tif
->
«me
[0] = 
IFNAME0
;

298 
√tif
->
«me
[1] = 
IFNAME1
;

303 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

304 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

306 
ëhî√tif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

309 
	`low_Àvñ_öô
(
√tif
);

311  
ERR_OK
;

312 
	}
}

	@net/lwip/netif/loopif.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_HAVE_LOOPIF


43 
	~"√tif/lo›if.h
"

44 
	~"lwù/¢mp.h
"

53 
îr_t


54 
	$lo›if_öô
(
√tif
 *netif)

59 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_so·w¨eLo›back
, 0);

61 
√tif
->
«me
[0] = 'l';

62 
√tif
->
«me
[1] = 'o';

63 
√tif
->
ouçut
 = 
√tif_lo›_ouçut
;

64  
ERR_OK
;

65 
	}
}

	@net/lwip/netif/ppp/auth.c

68 
	~"lwù/›t.h
"

70 #i‡
PPP_SUPPORT


72 
	~"µp.h
"

73 
	~"µpdebug.h
"

75 
	~"fsm.h
"

76 
	~"l˝.h
"

77 
	~"∑p.h
"

78 
	~"ch≠.h
"

79 
	~"auth.h
"

80 
	~"ù˝.h
"

82 #i‡
CBCP_SUPPORT


83 
	~"cb˝.h
"

91 
	#PAP_WITHPEER
 1

	)

92 
	#PAP_PEER
 2

	)

93 
	#CHAP_WITHPEER
 4

	)

94 
	#CHAP_PEER
 8

	)

101 
	sw‹dli°
 {

102 
w‹dli°
 *
	m√xt
;

103 
	mw‹d
[1];

110 *
¸y±
 (const *, const *);

114 
√tw‹k_pha£
 ();

115 
check_idÀ
 (*);

116 
c⁄√˘_time_expúed
 (*);

118 
logö
 (*, *, **, *);

120 
logout
 ();

121 
nuŒ_logö
 ();

122 
gë_∑p_∑sswd
 (, *, *);

123 
have_∑p_£¸ë
 ();

124 
have_ch≠_£¸ë
 (*, *, 
u32_t
);

125 
ù_addr_check
 (
u32_t
, 
w‹dli°
 *);

127 
£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
);

128 
‰ì_w‹dli°
 (
w‹dli°
 *);

130 #i‡
CBCP_SUPPORT


131 
ˇŒback_pha£
 ();

143 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


145 
	g≥î_auth«me
[
MAXNAMELEN
];

149 
	gauth_≥ndög
[
NUM_PPP
];

152 
	glogged_ö
;

155 
	gdid_authup
;

158 
w‹dli°
 *
	gaddªs£s
[
NUM_PPP
];

161 
	gnum_≈_›í
;

164 
	gnum_≈_up
;

166 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


168 
	g∑sswd_‰om_fûe
;

180 
	$lök_ªquúed
(
unô
)

182 
	`LWIP_UNUSED_ARG
(
unô
);

184 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ªquúed: %d\n", 
unô
));

185 
	}
}

192 
	$lök_ãrmö©ed
(
unô
)

194 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ãrmö©ed: %d\n", 
unô
));

195 i‡(
l˝_pha£
[
unô
] =
PHASE_DEAD
) {

198 i‡(
logged_ö
) {

199 
	`logout
();

201 
l˝_pha£
[
unô
] = 
PHASE_DEAD
;

202 
	`AUTHDEBUG
((
LOG_NOTICE
, "ConnectionÅerminated.\n"));

203 
	`µpLökTîmö©ed
(
unô
);

204 
	}
}

210 
	$lök_down
(
unô
)

212 
i
;

213 
¥Ÿít
 *
¥Ÿp
;

215 
	`AUTHDEBUG
((
LOG_INFO
, "lök_down: %d\n", 
unô
));

216 i‡(
did_authup
) {

218 
did_authup
 = 0;

220 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

221 i‡(!
¥Ÿp
->
íabÀd_Êag
) {

224 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
lowîdown
 !
NULL
) {

225 (*
¥Ÿp
->
lowîdown
)(
unô
);

227 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
˛o£
 !
NULL
) {

228 (*
¥Ÿp
->
˛o£
)(
unô
, "LCP down");

231 
num_≈_›í
 = 0;

232 
num_≈_up
 = 0;

233 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

234 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

236 
	`µpLökDown
(
unô
);

237 
	}
}

244 
	$lök_e°ablished
(
unô
)

246 
auth
;

247 
i
;

248 
¥Ÿít
 *
¥Ÿp
;

249 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

250 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

251 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


252 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

255 
	`AUTHDEBUG
((
LOG_INFO
, "lök_e°ablished: %d\n", 
unô
));

259 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

260 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
lowîup
 !
NULL
) {

261 (*
¥Ÿp
->
lowîup
)(
unô
);

264 i‡(
µp_£âögs
.
auth_ªquúed
 && !(
go
->
√g_ch≠
 || go->
√g_u∑p
)) {

270 i‡(!
wo
->
√g_u∑p
 || !
	`nuŒ_logö
(
unô
)) {

271 
	`AUTHDEBUG
((
LOG_WARNING
, "peerÑefusedÅoáuthenticate\n"));

272 
	`l˝_˛o£
(
unô
, "peerÑefusedÅoáuthenticate");

277 
l˝_pha£
[
unô
] = 
PHASE_AUTHENTICATE
;

278 
auth
 = 0;

279 #i‡
CHAP_SUPPORT


280 i‡(
go
->
√g_ch≠
) {

281 
	`Ch≠AuthPìr
(
unô
, 
µp_£âögs
.
our_«me
, 
go
->
ch≠_mdty≥
);

282 
auth
 |
CHAP_PEER
;

285 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


288 #i‡
PAP_SUPPORT


289 i‡(
go
->
√g_u∑p
) {

290 
	`u∑p_auth≥î
(
unô
);

291 
auth
 |
PAP_PEER
;

294 #i‡
CHAP_SUPPORT


295 i‡(
ho
->
√g_ch≠
) {

296 
	`Ch≠AuthWôhPìr
(
unô
, 
µp_£âögs
.
u£r
, 
ho
->
ch≠_mdty≥
);

297 
auth
 |
CHAP_WITHPEER
;

300 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


303 #i‡
PAP_SUPPORT


304 i‡(
ho
->
√g_u∑p
) {

305 i‡(
µp_£âögs
.
∑sswd
[0] == 0) {

306 
∑sswd_‰om_fûe
 = 1;

307 i‡(!
	`gë_∑p_∑sswd
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
)) {

308 
	`AUTHDEBUG
((
LOG_ERR
, "No secret found for PAPÜogin\n"));

311 
	`u∑p_authwôh≥î
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
);

312 
auth
 |
PAP_WITHPEER
;

315 
auth_≥ndög
[
unô
] = 
auth
;

317 i‡(!
auth
) {

318 
	`√tw‹k_pha£
(
unô
);

320 
	}
}

326 
	$auth_≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

328 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

330 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

334 
	`l˝_˛o£
(
unô
, "Authentication failed");

335 
	}
}

338 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


343 
	$auth_≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
, *
«me
, 
«mñí
)

345 
pbô
;

347 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

348 
¥Ÿocﬁ
) {

349 
PPP_CHAP
:

350 
pbô
 = 
CHAP_PEER
;

352 
PPP_PAP
:

353 
pbô
 = 
PAP_PEER
;

356 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

363 i‡(
«mñí
 > (
≥î_auth«me
) - 1) {

364 
«mñí
 = (
≥î_auth«me
) - 1;

366 
	`BCOPY
(
«me
, 
≥î_auth«me
, 
«mñí
);

367 
≥î_auth«me
[
«mñí
] = 0;

373 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

374 
	`√tw‹k_pha£
(
unô
);

376 
	}
}

382 
	$auth_wôh≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

384 
îrCode
 = 
PPPERR_AUTHFAIL
;

386 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

388 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

389 i‡(
∑sswd_‰om_fûe
) {

390 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

397 
	`µpIOCé
(
unô
, 
PPPCTLS_ERRCODE
, &
îrCode
);

404 
	}
}

410 
	$auth_wôh≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

412 
pbô
;

414 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

415 
¥Ÿocﬁ
) {

416 
PPP_CHAP
:

417 
pbô
 = 
CHAP_WITHPEER
;

419 
PPP_PAP
:

420 i‡(
∑sswd_‰om_fûe
) {

421 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

423 
pbô
 = 
PAP_WITHPEER
;

426 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

427 
pbô
 = 0;

434 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

435 
	`√tw‹k_pha£
(
unô
);

437 
	}
}

445 
	$≈_up
(
unô
, 
u16_t
 
¥Ÿo
)

447 
	`LWIP_UNUSED_ARG
(
unô
);

448 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

450 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

451 i‡(
num_≈_up
 == 0) {

452 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: maxc⁄√˘=%d idÀ_time_limô=%d\n",
µp_£âögs
.
maxc⁄√˘
,µp_£âögs.
idÀ_time_limô
));

456 i‡(
µp_£âögs
.
idÀ_time_limô
 > 0) {

457 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
);

464 i‡(
µp_£âögs
.
maxc⁄√˘
 > 0) {

465 
	`TIMEOUT
(
c⁄√˘_time_expúed
, 0, 
µp_£âögs
.
maxc⁄√˘
);

468 ++
num_≈_up
;

469 
	}
}

475 
	$≈_down
(
unô
, 
u16_t
 
¥Ÿo
)

477 
	`LWIP_UNUSED_ARG
(
unô
);

478 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

480 
	`AUTHDEBUG
((
LOG_INFO
, "≈_down: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

481 i‡(--
num_≈_up
 =0 && 
µp_£âögs
.
idÀ_time_limô
 > 0) {

482 
	`UNTIMEOUT
(
check_idÀ
, 
NULL
);

484 
	}
}

490 
	$≈_föished
(
unô
, 
u16_t
 
¥Ÿo
)

492 
	`LWIP_UNUSED_ARG
(
unô
);

493 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

495 
	`AUTHDEBUG
((
LOG_INFO
, "≈_föished: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

496 i‡(--
num_≈_›í
 <= 0) {

498 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

500 
	}
}

508 
	$auth_ª£t
(
unô
)

510 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

511 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

512 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

513 
u32_t
 
ªmŸe
;

515 
	`AUTHDEBUG
((
LOG_INFO
, "auth_ª£t: %d\n", 
unô
));

516 
ao
->
√g_u∑p
 = !
µp_£âögs
.
ªfu£_∑p
 && (µp_£âögs.
∑sswd
[0] !0 || 
	`gë_∑p_∑sswd
(
unô
, 
NULL
, NULL));

517 
ao
->
√g_ch≠
 = !
µp_£âögs
.
ªfu£_ch≠
 &&Öµ_£âögs.
∑sswd
[0] != 0 ;

519 i‡(
go
->
√g_u∑p
 && !
	`have_∑p_£¸ë
()) {

520 
go
->
√g_u∑p
 = 0;

522 i‡(
go
->
√g_ch≠
) {

523 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

524 i‡(!
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
)) {

525 
go
->
√g_ch≠
 = 0;

528 
	}
}

530 #i‡
PAP_SUPPORT


542 
	$check_∑sswd
–
unô
, *
au£r
, 
u£æí
, *
≠asswd
, 
∑sswdÀn
, **
msg
, *
msgÀn
)

545 
	`LWIP_UNUSED_ARG
(
unô
);

546 
	`LWIP_UNUSED_ARG
(
au£r
);

547 
	`LWIP_UNUSED_ARG
(
u£æí
);

548 
	`LWIP_UNUSED_ARG
(
≠asswd
);

549 
	`LWIP_UNUSED_ARG
(
∑sswdÀn
);

550 
	`LWIP_UNUSED_ARG
(
msgÀn
);

551 *
msg
 = (*) 0;

552  
UPAP_AUTHACK
;

554 
ªt
 = 0;

555 
w‹dli°
 *
addrs
 = 
NULL
;

556 
∑sswd
[256], 
u£r
[256];

557 
£¸ë
[
MAXWORDLEN
];

558 
u_sh‹t
 
©ãm±s
 = 0;

563 
	`BCOPY
(
≠asswd
, 
∑sswd
, 
∑sswdÀn
);

564 
∑sswd
[
∑sswdÀn
] = '\0';

565 
	`BCOPY
(
au£r
, 
u£r
, 
u£æí
);

566 
u£r
[
u£æí
] = '\0';

567 *
msg
 = (*) 0;

570 
ªt
 = 
UPAP_AUTHACK
;

572 i‡(
ªt
 =
UPAP_AUTHNAK
) {

573 i‡(*
msg
 == (*) 0) {

574 *
msg
 = "Login incorrect";

576 *
msgÀn
 = 
	`°æí
(*
msg
);

582 i‡(
©ãm±s
++ >= 10) {

583 
	`AUTHDEBUG
((
LOG_WARNING
, "%d LOGIN FAILURES BY %s\n", 
©ãm±s
, 
u£r
));

586 i‡(
©ãm±s
 > 3) {

587 
	`sys_m¶ìp
((
©ãm±s
 - 3) * 5);

589 i‡(
addrs
 !
NULL
) {

590 
	`‰ì_w‹dli°
(
addrs
);

593 
©ãm±s
 = 0;

594 i‡(*
msg
 == (*) 0) {

595 *
msg
 = "Login ok";

597 *
msgÀn
 = 
	`°æí
(*
msg
);

598 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

601 
	`BZERO
(
∑sswd
, (passwd));

602 
	`BZERO
(
£¸ë
, (secret));

604  
ªt
;

606 
	}
}

615 
	$auth_ù_addr
(
unô
, 
u32_t
 
addr
)

617  
	`ù_addr_check
(
addr
, 
addªs£s
[
unô
]);

618 
	}
}

626 
	$bad_ù_adrs
(
u32_t
 
addr
)

628 
addr
 = 
	`¡ohl
(addr);

629  (
addr
 >> 
IN_CLASSA_NSHIFT
Ë=
IN_LOOPBACKNET


630 || 
	`IN_MULTICAST
(
addr
Ë|| 
	`IN_BADCLASS
(addr);

631 
	}
}

634 #i‡
CHAP_SUPPORT


640 
	$gë_£¸ë
–
unô
, *
˛õ¡
, *
£rvî
, *
£¸ë
, *
£¸ë_Àn
, 
ßve_addrs
)

643 
Àn
;

644 
w‹dli°
 *
addrs
;

646 
	`LWIP_UNUSED_ARG
(
unô
);

647 
	`LWIP_UNUSED_ARG
(
£rvî
);

648 
	`LWIP_UNUSED_ARG
(
ßve_addrs
);

650 
addrs
 = 
NULL
;

652 if(!
˛õ¡
 || !˛õ¡[0] || 
	`°rcmp
(˛õ¡, 
µp_£âögs
.
u£r
)) {

656 
Àn
 = 
	`°æí
(
µp_£âögs
.
∑sswd
);

657 i‡(
Àn
 > 
MAXSECRETLEN
) {

658 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

659 
Àn
 = 
MAXSECRETLEN
;

662 
	`BCOPY
(
µp_£âögs
.
∑sswd
, 
£¸ë
, 
Àn
);

663 *
£¸ë_Àn
 = 
Àn
;

667 
ªt
 = 0, 
Àn
;

668 
w‹dli°
 *
addrs
;

669 
£cbuf
[
MAXWORDLEN
];

671 
addrs
 = 
NULL
;

672 
£cbuf
[0] = 0;

675 i‡(
ªt
 < 0) {

679 i‡(
ßve_addrs
) {

680 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

683 
Àn
 = 
	`°æí
(
£cbuf
);

684 i‡(
Àn
 > 
MAXSECRETLEN
) {

685 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

686 
Àn
 = 
MAXSECRETLEN
;

689 
	`BCOPY
(
£cbuf
, 
£¸ë
, 
Àn
);

690 
	`BZERO
(
£cbuf
, (secbuf));

691 *
£¸ë_Àn
 = 
Àn
;

695 
	}
}

704 
	$auth_check_›ti⁄s
()

706 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

707 
ˇn_auth
;

708 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

709 
u32_t
 
ªmŸe
;

712 i‡(
µp_£âögs
.
our_«me
[0] =0 ||Öµ_£âögs.
u£ho°«me
) {

713 
	`°r˝y
(
µp_£âögs
.
our_«me
,Öµ_£âögs.
ho°«me
);

716 i‡(
µp_£âögs
.
u£r
[0] == 0) {

717 
	`°r˝y
(
µp_£âögs
.
u£r
,Öµ_£âögs.
our_«me
);

721 i‡(
µp_£âögs
.
auth_ªquúed
 && !
wo
->
√g_ch≠
 && !wo->
√g_u∑p
) {

722 
wo
->
√g_ch≠
 = 1;

723 
wo
->
√g_u∑p
 = 1;

730 
ˇn_auth
 = 
wo
->
√g_u∑p
 && 
	`have_∑p_£¸ë
();

731 i‡(!
ˇn_auth
 && 
wo
->
√g_ch≠
) {

732 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

733 
ˇn_auth
 = 
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
);

736 i‡(
µp_£âögs
.
auth_ªquúed
 && !
ˇn_auth
) {

737 
	`µp_∑nic
("Noáuth secret");

739 
	}
}

750 
	$√tw‹k_pha£
(
unô
)

752 
i
;

753 
¥Ÿít
 *
¥Ÿp
;

754 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

759 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
Ë&& !
did_authup
) {

761 
did_authup
 = 1;

764 #i‡
CBCP_SUPPORT


768 i‡(
go
->
√g_cb˝
) {

769 
l˝_pha£
[
unô
] = 
PHASE_CALLBACK
;

770 (*
cb˝_¥Ÿít
.
›í
)(
unô
);

775 
l˝_pha£
[
unô
] = 
PHASE_NETWORK
;

776 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

777 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
) {

778 (*
¥Ÿp
->
›í
)(
unô
);

779 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_CCP
) {

780 ++
num_≈_›í
;

785 i‡(
num_≈_›í
 == 0) {

787 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

789 
	}
}

796 
	$check_idÀ
(*
¨g
)

798 
µp_idÀ
 
idÀ
;

799 
u_sh‹t
 
ôime
;

801 
	`LWIP_UNUSED_ARG
(
¨g
);

802 i‡(!
	`gë_idÀ_time
(0, &
idÀ
)) {

805 
ôime
 = 
	`LWIP_MIN
(
idÀ
.
xmô_idÀ
, idÀ.
ªcv_idÀ
);

806 i‡(
ôime
 >
µp_£âögs
.
idÀ_time_limô
) {

808 
	`AUTHDEBUG
((
LOG_INFO
, "Terminating connection dueÅoÜack ofáctivity.\n"));

809 
	`l˝_˛o£
(0, "Link inactive");

811 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
 - 
ôime
);

813 
	}
}

819 
	$c⁄√˘_time_expúed
(*
¨g
)

821 
	`LWIP_UNUSED_ARG
(
¨g
);

823 
	`AUTHDEBUG
((
LOG_INFO
, "ConnectÅimeÉxpired\n"));

824 
	`l˝_˛o£
(0, "ConnectÅimeÉxpired");

825 
	}
}

838 
	$logö
(*
u£r
, *
∑sswd
, **
msg
, *
msgÀn
)

841  (
UPAP_AUTHNAK
);

842 
	}
}

849 
	$logout
()

851 
logged_ö
 = 0;

852 
	}
}

860 
	$nuŒ_logö
(
unô
)

862 
	`LWIP_UNUSED_ARG
(
unô
);

865 
	}
}

873 
	$gë_∑p_∑sswd
(
unô
, *
u£r
, *
∑sswd
)

875 
	`LWIP_UNUSED_ARG
(
unô
);

881 if(
u£r
) {

882 
	`°r˝y
(
u£r
, "none");

884 if(
∑sswd
) {

885 
	`°r˝y
(
∑sswd
, "none");

888 
	}
}

895 
	$have_∑p_£¸ë
()

899 
	}
}

908 
	$have_ch≠_£¸ë
(*
˛õ¡
, *
£rvî
, 
u32_t
 
ªmŸe
)

910 
	`LWIP_UNUSED_ARG
(
˛õ¡
);

911 
	`LWIP_UNUSED_ARG
(
£rvî
);

912 
	`LWIP_UNUSED_ARG
(
ªmŸe
);

915 
	}
}

922 
	$£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
)

924 i‡(
addªs£s
[
unô
] !
NULL
) {

925 
	`‰ì_w‹dli°
(
addªs£s
[
unô
]);

927 
addªs£s
[
unô
] = 
addrs
;

934 i‡(
addrs
 !
NULL
 &&áddrs->
√xt
 == NULL) {

935 *
p
 = 
addrs
->
w‹d
;

936 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

937 
u32_t
 
a
;

938 
ho°ít
 *
hp
;

940 i‡(
wo
->
hißddr
 =0 && *
p
 !'!' && *∞!'-' && 
	`°rchr
’, '/'Ë=
NULL
) {

941 
hp
 = 
	`gëho°by«me
(
p
);

942 i‡(
hp
 !
NULL
 && hp->
h_addπy≥
 =
AF_INET
) {

943 
a
 = *(
u32_t
 *)
hp
->
h_addr
;

945 
a
 = 
	`öë_addr
(
p
);

947 i‡(
a
 !(
u32_t
) -1) {

948 
wo
->
hißddr
 = 
a
;

953 
	}
}

957 
	$ù_addr_check
(
u32_t
 
addr
, 
w‹dli°
 *
addrs
)

960 i‡(
	`bad_ù_adrs
(
addr
)) {

964 i‡(
addrs
 =
NULL
) {

965  !
µp_£âögs
.
auth_ªquúed
;

970 
	}
}

977 
	$‰ì_w‹dli°
(
w‹dli°
 *
wp
)

979 
w‹dli°
 *
√xt
;

981 
wp
 !
NULL
) {

982 
√xt
 = 
wp
->next;

983 
	`‰ì
(
wp
);

984 
wp
 = 
√xt
;

986 
	}
}

	@net/lwip/netif/ppp/auth.h

54 #i‚de‡
AUTH_H


55 
	#AUTH_H


	)

62 
lök_ªquúed
 ();

65 
lök_ãrmö©ed
 ();

68 
lök_down
 ();

71 
lök_e°ablished
 ();

74 
≈_up
 (, 
u16_t
);

77 
≈_down
 (, 
u16_t
);

80 
≈_föished
 (, 
u16_t
);

83 
auth_≥î_Áû
 (, 
u16_t
);

86 
auth_≥î_suc˚ss
 (, 
u16_t
, *, );

89 
auth_wôh≥î_Áû
 (, 
u16_t
);

92 
auth_wôh≥î_suc˚ss
 (, 
u16_t
);

95 
auth_check_›ti⁄s
 ();

98 
auth_ª£t
 ();

101 
check_∑sswd
 (, *, , *, , **, *);

104 
gë_£¸ë
 (, *, *, *, *, );

107 
auth_ù_addr
 (, 
u32_t
);

110 
bad_ù_adrs
 (
u32_t
);

	@net/lwip/netif/ppp/chap.c

70 
	~"lwù/›t.h
"

72 #i‡
PPP_SUPPORT


74 #i‡
CHAP_SUPPORT


76 
	~"µp.h
"

77 
	~"µpdebug.h
"

79 
	~"magic.h
"

80 
	~"øndm.h
"

81 
	~"auth.h
"

82 
	~"md5.h
"

83 
	~"ch≠.h
"

84 
	~"chpms.h
"

103 
Ch≠Inô
 ();

104 
Ch≠LowîUp
 ();

105 
Ch≠LowîDown
 ();

106 
Ch≠I≈ut
 (, 
u_ch¨
 *, );

107 
Ch≠PrŸocﬁReje˘
 ();

109 
Ch≠PrötPkt
 (
u_ch¨
 *, , (*) (*, *, ...), *);

112 
	`Ch≠ChÆÀngeTimeout
 (*);

113 
	`Ch≠Re•⁄£Timeout
 (*);

114 
	`Ch≠Re˚iveChÆÀnge
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

115 
	`Ch≠RechÆÀnge
 (*);

116 
	`Ch≠Re˚iveRe•⁄£
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

117 
	`Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

118 
	`Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

119 
	`Ch≠SídSètus
 (
ch≠_°©e
 *, );

120 
	`Ch≠SídChÆÀnge
 (
ch≠_°©e
 *);

121 
	`Ch≠SídRe•⁄£
 (
ch≠_°©e
 *);

122 
	`Ch≠GíChÆÀnge
 (
ch≠_°©e
 *);

128 
ch≠_°©e
 
ch≠
[
NUM_PPP
];

130 
¥Ÿít
 
ch≠_¥Ÿít
 = {

131 
PPP_CHAP
,

132 
Ch≠Inô
,

133 
Ch≠I≈ut
,

134 
Ch≠PrŸocﬁReje˘
,

135 
Ch≠LowîUp
,

136 
Ch≠LowîDown
,

137 
NULL
,

138 
NULL
,

140 
Ch≠PrötPkt
,

141 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL


150 
	}
};

161 
	$Ch≠AuthWôhPìr
(
unô
, *
our_«me
, 
dige°
)

163 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

165 
c°©e
->
ª•_«me
 = 
our_«me
;

166 
c°©e
->
ª•_ty≥
 = 
dige°
;

168 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
 ||

169 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

171 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_PENDING
;

180 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

181 
	}
}

188 
	$Ch≠AuthPìr
(
unô
, *
our_«me
, 
dige°
)

190 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

192 
c°©e
->
chÆ_«me
 = 
our_«me
;

193 
c°©e
->
chÆ_ty≥
 = 
dige°
;

195 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
 ||

196 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

198 
c°©e
->
£rvî°©e
 = 
CHAPSS_PENDING
;

202 
	`Ch≠GíChÆÀnge
(
c°©e
);

203 
	`Ch≠SídChÆÀnge
(
c°©e
);

204 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

205 
	}
}

215 
	$Ch≠Inô
(
unô
)

217 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

219 
	`BZERO
(
c°©e
, (*cstate));

220 
c°©e
->
unô
 = unit;

221 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

222 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

223 
c°©e
->
timeouâime
 = 
CHAP_DEFTIMEOUT
;

224 
c°©e
->
max_å™smôs
 = 
CHAP_DEFTRANSMITS
;

226 
	}
}

233 
	$Ch≠ChÆÀngeTimeout
(*
¨g
)

235 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

239 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL_CHAL
 &&

240 
c°©e
->
£rvî°©e
 !
CHAPSS_RECHALLENGE
) {

244 i‡(
c°©e
->
chÆ_å™smôs
 >c°©e->
max_å™smôs
) {

246 
	`CHAPDEBUG
((
LOG_ERR
, "Peer failedÅoÑespondÅo CHAP challenge\n"));

247 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

248 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

252 
	`Ch≠SídChÆÀnge
(
c°©e
);

253 
	}
}

260 
	$Ch≠Re•⁄£Timeout
(*
¨g
)

262 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

265 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

269 
	`Ch≠SídRe•⁄£
(
c°©e
);

270 
	}
}

277 
	$Ch≠RechÆÀnge
(*
¨g
)

279 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

282 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_OPEN
) {

286 
	`Ch≠GíChÆÀnge
(
c°©e
);

287 
	`Ch≠SídChÆÀnge
(
c°©e
);

288 
c°©e
->
£rvî°©e
 = 
CHAPSS_RECHALLENGE
;

289 
	}
}

298 
	$Ch≠LowîUp
(
unô
)

300 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

302 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
) {

303 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_CLOSED
;

304 } i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

305 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

308 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
) {

309 
c°©e
->
£rvî°©e
 = 
CHAPSS_CLOSED
;

310 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

311 
	`Ch≠GíChÆÀnge
(
c°©e
);

312 
	`Ch≠SídChÆÀnge
(
c°©e
);

313 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

315 
	}
}

324 
	$Ch≠LowîDown
(
unô
)

326 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

329 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL_CHAL
 ||

330 
c°©e
->
£rvî°©e
 =
CHAPSS_RECHALLENGE
) {

331 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

332 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN


333 && 
c°©e
->
chÆ_öãrvÆ
 != 0) {

334 
	`UNTIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
);

336 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

337 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

339 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

340 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

341 
	}
}

348 
	$Ch≠PrŸocﬁReje˘
(
unô
)

350 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

352 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL
 &&

353 
c°©e
->
£rvî°©e
 !
CHAPSS_CLOSED
) {

354 
	`auth_≥î_Áû
(
unô
, 
PPP_CHAP
);

356 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_INITIAL
 &&

357 
c°©e
->
˛õ¡°©e
 !
CHAPCS_CLOSED
) {

358 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_CHAP
);

360 
	`Ch≠LowîDown
(
unô
);

361 
	}
}

368 
	$Ch≠I≈ut
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
∑ckë_Àn
)

370 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

371 
u_ch¨
 *
öp
;

372 
u_ch¨
 
code
, 
id
;

373 
Àn
;

379 
öp
 = 
ö∑ckë
;

380 i‡(
∑ckë_Àn
 < 
CHAP_HEADERLEN
) {

381 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd short header.\n"));

384 
	`GETCHAR
(
code
, 
öp
);

385 
	`GETCHAR
(
id
, 
öp
);

386 
	`GETSHORT
(
Àn
, 
öp
);

387 i‡(
Àn
 < 
CHAP_HEADERLEN
) {

388 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd illegalÜength.\n"));

391 i‡(
Àn
 > 
∑ckë_Àn
) {

392 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd shortÖacket.\n"));

395 
Àn
 -
CHAP_HEADERLEN
;

400 
code
) {

401 
CHAP_CHALLENGE
:

402 
	`Ch≠Re˚iveChÆÀnge
(
c°©e
, 
öp
, 
id
, 
Àn
);

405 
CHAP_RESPONSE
:

406 
	`Ch≠Re˚iveRe•⁄£
(
c°©e
, 
öp
, 
id
, 
Àn
);

409 
CHAP_FAILURE
:

410 
	`Ch≠Re˚iveFaûuª
(
c°©e
, 
öp
, 
id
, 
Àn
);

413 
CHAP_SUCCESS
:

414 
	`Ch≠Re˚iveSuc˚ss
(
c°©e
, 
öp
, 
id
, 
Àn
);

418 
	`CHAPDEBUG
((
LOG_WARNING
, "Unknow¿CHAP codê(%dËª˚ived.\n", 
code
));

421 
	}
}

428 
	$Ch≠Re˚iveChÆÀnge
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

430 
rchÆÀnge_Àn
;

431 
u_ch¨
 *
rchÆÀnge
;

432 
£¸ë_Àn
;

433 
£¸ë
[
MAXSECRETLEN
];

434 
rho°«me
[256];

435 
MD5_CTX
 
mdC⁄ãxt
;

436 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

438 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: Rcvd id %d.\n", 
id
));

439 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_CLOSED
 ||

440 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

441 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge: in state %d\n",

442 
c°©e
->
˛õ¡°©e
));

446 i‡(
Àn
 < 2) {

447 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

451 
	`GETCHAR
(
rchÆÀnge_Àn
, 
öp
);

452 
Àn
 - (
u_ch¨
Ë+ 
rchÆÀnge_Àn
;

453 i‡(
Àn
 < 0) {

454 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

457 
rchÆÀnge
 = 
öp
;

458 
	`INCPTR
(
rchÆÀnge_Àn
, 
öp
);

460 i‡(
Àn
 >(
rho°«me
)) {

461 
Àn
 = (
rho°«me
) - 1;

463 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

464 
rho°«me
[
Àn
] = '\000';

466 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge:Ñe˚ivedÇamêfõld '%s'\n", 
rho°«me
));

469 i‡(
µp_£âögs
.
ªmŸe_«me
[0] !0 && (µp_£âögs.
ex∂icô_ªmŸe
 || 
rho°«me
[0] == 0)) {

470 
	`°∫˝y
(
rho°«me
, 
µp_£âögs
.
ªmŸe_«me
, (rhostname));

471 
rho°«me
[(rhostname) - 1] = 0;

472 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: usög '%s'á†ªmŸê«me\n", 
rho°«me
));

476 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, c°©e->
ª•_«me
, 
rho°«me
, 
£¸ë
, &
£¸ë_Àn
, 0)) {

477 
£¸ë_Àn
 = 0;

478 
	`CHAPDEBUG
((
LOG_WARNING
, "NÿCHAP se¸ë found f‹áuthítiˇtög u†tÿ%s\n", 
rho°«me
));

482 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

483 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

486 
c°©e
->
ª•_id
 = 
id
;

487 
c°©e
->
ª•_å™smôs
 = 0;

490 
c°©e
->
ª•_ty≥
) {

492 
CHAP_DIGEST_MD5
:

493 
	`MD5Inô
(&
mdC⁄ãxt
);

494 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
ª•_id
, 1);

495 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

496 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
rchÆÀnge
, 
rchÆÀnge_Àn
);

497 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

498 
	`BCOPY
(
hash
, 
c°©e
->
ª•⁄£
, 
MD5_SIGNATURE_SIZE
);

499 
c°©e
->
ª•_Àngth
 = 
MD5_SIGNATURE_SIZE
;

502 #ifde‡
CHAPMS


503 
CHAP_MICROSOFT
:

504 
	`Ch≠MS
(
c°©e
, 
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
);

509 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
ª•_ty≥
));

513 
	`BZERO
(
£¸ë
, (secret));

514 
	`Ch≠SídRe•⁄£
(
c°©e
);

515 
	}
}

522 
	$Ch≠Re˚iveRe•⁄£
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

524 
u_ch¨
 *
ªmmd
, 
ªmmd_Àn
;

525 
£¸ë_Àn
, 
ﬁd_°©e
;

526 
code
;

527 
rho°«me
[256];

528 
MD5_CTX
 
mdC⁄ãxt
;

529 
£¸ë
[
MAXSECRETLEN
];

530 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

532 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£: Rcvd id %d.\n", 
id
));

534 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_CLOSED
 ||

535 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

536 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse: in state %d\n",

537 
c°©e
->
£rvî°©e
));

541 i‡(
id
 !
c°©e
->
chÆ_id
) {

550 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN
) {

551 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_SUCCESS
);

554 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_BADAUTH
) {

555 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_FAILURE
);

559 i‡(
Àn
 < 2) {

560 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

563 
	`GETCHAR
(
ªmmd_Àn
, 
öp
);

564 
ªmmd
 = 
öp
;

565 
	`INCPTR
(
ªmmd_Àn
, 
öp
);

567 
Àn
 - (
u_ch¨
Ë+ 
ªmmd_Àn
;

568 i‡(
Àn
 < 0) {

569 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

573 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

575 i‡(
Àn
 >(
rho°«me
)) {

576 
Àn
 = (
rho°«me
) - 1;

578 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

579 
rho°«me
[
Àn
] = '\000';

581 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£:Ñe˚ivedÇamêfõld: %s\n", 
rho°«me
));

587 
code
 = 
CHAP_FAILURE
;

588 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, 
rho°«me
, c°©e->
chÆ_«me
, 
£¸ë
, &
£¸ë_Àn
, 1)) {

590 
	`CHAPDEBUG
((
LOG_WARNING
, "No CHAP secret found foráuthenticating %s\n",

591 
rho°«me
));

594 
c°©e
->
chÆ_ty≥
) {

596 
CHAP_DIGEST_MD5
:

597 i‡(
ªmmd_Àn
 !
MD5_SIGNATURE_SIZE
) {

600 
	`MD5Inô
(&
mdC⁄ãxt
);

601 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
chÆ_id
, 1);

602 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

603 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
c°©e
->
chÆÀnge
, c°©e->
chÆ_Àn
);

604 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

607 i‡(
	`memcmp
 (
hash
, 
ªmmd
, 
MD5_SIGNATURE_SIZE
) == 0) {

608 
code
 = 
CHAP_SUCCESS
;

613 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
chÆ_ty≥
));

617 
	`BZERO
(
£¸ë
, (secret));

618 
	`Ch≠SídSètus
(
c°©e
, 
code
);

620 i‡(
code
 =
CHAP_SUCCESS
) {

621 
ﬁd_°©e
 = 
c°©e
->
£rvî°©e
;

622 
c°©e
->
£rvî°©e
 = 
CHAPSS_OPEN
;

623 i‡(
ﬁd_°©e
 =
CHAPSS_INITIAL_CHAL
) {

624 
	`auth_≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
, 
rho°«me
, 
Àn
);

626 i‡(
c°©e
->
chÆ_öãrvÆ
 != 0) {

627 
	`TIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
, c°©e->
chÆ_öãrvÆ
);

630 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPÖeeráuthentication failed\n"));

631 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

632 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

634 
	}
}

640 
	$Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

642 
	`LWIP_UNUSED_ARG
(
id
);

643 
	`LWIP_UNUSED_ARG
(
öp
);

645 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: Rcvd id %d.\n", 
id
));

647 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_OPEN
) {

652 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

654 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

658 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

663 i‡(
Àn
 > 0) {

664 
	`PRINTMSG
(
öp
, 
Àn
);

667 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_OPEN
;

669 
	`auth_wôh≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
);

670 
	}
}

677 
	$Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

679 
	`LWIP_UNUSED_ARG
(
id
);

680 
	`LWIP_UNUSED_ARG
(
öp
);

682 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: Rcvd id %d.\n", 
id
));

684 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

686 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

690 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

695 i‡(
Àn
 > 0) {

696 
	`PRINTMSG
(
öp
, 
Àn
);

699 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPáuthentication failed\n"));

700 
	`auth_wôh≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

701 
	}
}

708 
	$Ch≠SídChÆÀnge
(
ch≠_°©e
 *
c°©e
)

710 
u_ch¨
 *
ouç
;

711 
chÆ_Àn
, 
«me_Àn
;

712 
ouéí
;

714 
chÆ_Àn
 = 
c°©e
->chal_len;

715 
«me_Àn
 = 
	`°æí
(
c°©e
->
chÆ_«me
);

716 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
chÆ_Àn
 + 
«me_Àn
;

717 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

719 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

721 
	`PUTCHAR
(
CHAP_CHALLENGE
, 
ouç
);

722 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

723 
	`PUTSHORT
(
ouéí
, 
ouç
);

725 
	`PUTCHAR
(
chÆ_Àn
, 
ouç
);

726 
	`BCOPY
(
c°©e
->
chÆÀnge
, 
ouç
, 
chÆ_Àn
);

727 
	`INCPTR
(
chÆ_Àn
, 
ouç
);

729 
	`BCOPY
(
c°©e
->
chÆ_«me
, 
ouç
, 
«me_Àn
);

731 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

733 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídChÆÀnge: Síàid %d.\n", 
c°©e
->
chÆ_id
));

735 
	`TIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
, c°©e->
timeouâime
);

736 ++
c°©e
->
chÆ_å™smôs
;

737 
	}
}

744 
	$Ch≠SídSètus
(
ch≠_°©e
 *
c°©e
, 
code
)

746 
u_ch¨
 *
ouç
;

747 
ouéí
, 
msgÀn
;

748 
msg
[256];

750 i‡(
code
 =
CHAP_SUCCESS
) {

751 
	`°r˝y
(
msg
, "Welcome!");

753 
	`°r˝y
(
msg
, "I don'tÜike you. Go 'way.");

755 
msgÀn
 = 
	`°æí
(
msg
);

757 
ouéí
 = 
CHAP_HEADERLEN
 + 
msgÀn
;

758 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

760 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

762 
	`PUTCHAR
(
code
, 
ouç
);

763 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

764 
	`PUTSHORT
(
ouéí
, 
ouç
);

765 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

766 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

768 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídSètus: Síàcodê%d, id %d.\n", 
code
, 
c°©e
->
chÆ_id
));

769 
	}
}

779 
	$Ch≠GíChÆÀnge
(
ch≠_°©e
 *
c°©e
)

781 
chÆ_Àn
;

782 
u_ch¨
 *
±r
 = 
c°©e
->
chÆÀnge
;

783 
i
;

787 
chÆ_Àn
 = ()

788 ((((
	`magic
() >> 16) *

789 (
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
)) >> 16)

790 + 
MIN_CHALLENGE_LENGTH
);

791 
c°©e
->
chÆ_Àn
 = chal_len;

792 
c°©e
->
chÆ_id
 = ++c°©e->
id
;

793 
c°©e
->
chÆ_å™smôs
 = 0;

796 
i
 = 0; i < 
chÆ_Àn
; i++ ) {

797 *
±r
++ = (Ë(
	`magic
() & 0xff);

799 
	}
}

807 
	$Ch≠SídRe•⁄£
(
ch≠_°©e
 *
c°©e
)

809 
u_ch¨
 *
ouç
;

810 
ouéí
, 
md_Àn
, 
«me_Àn
;

812 
md_Àn
 = 
c°©e
->
ª•_Àngth
;

813 
«me_Àn
 = 
	`°æí
(
c°©e
->
ª•_«me
);

814 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
md_Àn
 + 
«me_Àn
;

815 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

817 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

819 
	`PUTCHAR
(
CHAP_RESPONSE
, 
ouç
);

820 
	`PUTCHAR
(
c°©e
->
ª•_id
, 
ouç
);

821 
	`PUTSHORT
(
ouéí
, 
ouç
);

823 
	`PUTCHAR
(
md_Àn
, 
ouç
);

824 
	`BCOPY
(
c°©e
->
ª•⁄£
, 
ouç
, 
md_Àn
);

825 
	`INCPTR
(
md_Àn
, 
ouç
);

827 
	`BCOPY
(
c°©e
->
ª•_«me
, 
ouç
, 
«me_Àn
);

830 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

832 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_RESPONSE
;

833 
	`TIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
, c°©e->
timeouâime
);

834 ++
c°©e
->
ª•_å™smôs
;

835 
	}
}

838 *
	gCh≠Codíames
[] = {

845 
Ch≠PrötPkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

847 
code
, 
id
, 
Àn
;

848 
˛í
, 
∆í
;

849 
u_ch¨
 
x
;

851 i‡(
∂í
 < 
CHAP_HEADERLEN
) {

854 
	`GETCHAR
(
code
, 
p
);

855 
	`GETCHAR
(
id
, 
p
);

856 
	`GETSHORT
(
Àn
, 
p
);

857 i‡(
Àn
 < 
CHAP_HEADERLEN
 ||Üí > 
∂í
) {

860 i‡(
code
 >1 && codê<(
Ch≠Codíames
) / (*)) {

861 
	`¥öãr
(
¨g
, " %s", 
Ch≠Codíames
[
code
-1]);

863 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

865 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

866 
Àn
 -
CHAP_HEADERLEN
;

867 
code
) {

868 
CHAP_CHALLENGE
:

869 
CHAP_RESPONSE
:

870 i‡(
Àn
 < 1) {

873 
˛í
 = 
p
[0];

874 i‡(
Àn
 < 
˛í
 + 1) {

877 ++
p
;

878 
∆í
 = 
Àn
 - 
˛í
 - 1;

879 
	`¥öãr
(
¨g
, " <");

880 ; 
˛í
 > 0; --clen) {

881 
	`GETCHAR
(
x
, 
p
);

882 
	`¥öãr
(
¨g
, "%.2x", 
x
);

884 
	`¥öãr
(
¨g
, ">,Çamê%.*Z", 
∆í
, 
p
);

886 
CHAP_FAILURE
:

887 
CHAP_SUCCESS
:

888 
	`¥öãr
(
¨g
, " %.*Z", 
Àn
, 
p
);

891 
˛í
 = 
Àn
; clen > 0; --clen) {

892 
	`GETCHAR
(
x
, 
p
);

893 
	`¥öãr
(
¨g
, " %.2x", 
x
);

897  
Àn
 + 
CHAP_HEADERLEN
;

898 
	}
}

	@net/lwip/netif/ppp/chap.h

69 #i‚de‡
CHAP_H


70 
	#CHAP_H


	)

77 
	#CHAP_HEADERLEN
 4

	)

83 
	#CHAP_DIGEST_MD5
 5

	)

84 
	#MD5_SIGNATURE_SIZE
 16

	)

85 
	#CHAP_MICROSOFT
 0x80

	)

86 
	#MS_CHAP_RESPONSE_LEN
 49

	)

88 
	#CHAP_CHALLENGE
 1

	)

89 
	#CHAP_RESPONSE
 2

	)

90 
	#CHAP_SUCCESS
 3

	)

91 
	#CHAP_FAILURE
 4

	)

96 
	#MIN_CHALLENGE_LENGTH
 32

	)

97 
	#MAX_CHALLENGE_LENGTH
 64

	)

98 
	#MAX_RESPONSE_LENGTH
 64

	)

103 
	#CHAPCS_INITIAL
 0

	)

104 
	#CHAPCS_CLOSED
 1

	)

105 
	#CHAPCS_PENDING
 2

	)

106 
	#CHAPCS_LISTEN
 3

	)

107 
	#CHAPCS_RESPONSE
 4

	)

108 
	#CHAPCS_OPEN
 5

	)

113 
	#CHAPSS_INITIAL
 0

	)

114 
	#CHAPSS_CLOSED
 1

	)

115 
	#CHAPSS_PENDING
 2

	)

116 
	#CHAPSS_INITIAL_CHAL
 3

	)

117 
	#CHAPSS_OPEN
 4

	)

118 
	#CHAPSS_RECHALLENGE
 5

	)

119 
	#CHAPSS_BADAUTH
 6

	)

129 
	sch≠_°©e
 {

130 
	munô
;

131 
	m˛õ¡°©e
;

132 
	m£rvî°©e
;

133 
u_ch¨
 
	mchÆÀnge
[
MAX_CHALLENGE_LENGTH
];

134 
u_ch¨
 
	mchÆ_Àn
;

135 
u_ch¨
 
	mchÆ_id
;

136 
u_ch¨
 
	mchÆ_ty≥
;

137 
u_ch¨
 
	mid
;

138 *
	mchÆ_«me
;

139 
	mchÆ_öãrvÆ
;

140 
	mtimeouâime
;

141 
	mmax_å™smôs
;

142 
	mchÆ_å™smôs
;

143 
	mª•_å™smôs
;

144 
u_ch¨
 
	mª•⁄£
[
MAX_RESPONSE_LENGTH
];

145 
u_ch¨
 
	mª•_Àngth
;

146 
u_ch¨
 
	mª•_id
;

147 
u_ch¨
 
	mª•_ty≥
;

148 *
	mª•_«me
;

149 } 
	tch≠_°©e
;

155 
ch≠_°©e
 
ch≠
[];

157 
¥Ÿít
 
ch≠_¥Ÿít
;

164 
Ch≠AuthWôhPìr
 (, *, );

165 
Ch≠AuthPìr
 (, *, );

	@net/lwip/netif/ppp/chpms.c

68 
	#USE_CRYPT


	)

70 
	~"lwù/›t.h
"

72 #i‡
PPP_SUPPORT


74 #i‡
MSCHAP_SUPPORT


76 
	~"µp.h
"

77 
	~"µpdebug.h
"

79 
	~"md4.h
"

80 #i‚de‡
USE_CRYPT


81 
	~"des.h
"

83 
	~"ch≠.h
"

84 
	~"chpms.h
"

96 
u_ch¨
 
	mLANM™Re•
[24];

97 
u_ch¨
 
	mNTRe•
[24];

98 
u_ch¨
 
	mU£NT
;

99 } 
	tMS_Ch≠Re•⁄£
;

110 
£tkey
(const *);

111 
í¸y±
(*, );

113 
DesEn¸y±
 (
u_ch¨
 *, u_char *, u_char *);

114 
MakeKey
 (
u_ch¨
 *, u_char *);

116 #ifde‡
USE_CRYPT


117 
Ex∑nd
 (
u_ch¨
 *, u_char *);

118 
Cﬁœp£
 (
u_ch¨
 *, u_char *);

121 
ChÆÀngeRe•⁄£
(

122 
u_ch¨
 *
chÆÀnge
,

123 
u_ch¨
 *
pwHash
,

124 
u_ch¨
 *
ª•⁄£


126 
Ch≠MS_NT
(

127 *
rchÆÀnge
,

128 
rchÆÀnge_Àn
,

129 *
£¸ë
,

130 
£¸ë_Àn
,

131 
MS_Ch≠Re•⁄£
 *
ª•⁄£


133 
u_ch¨
 
Gë7Bôs
(

134 
u_ch¨
 *
öput
,

135 
°¨tBô


143 
	$Ch≠MS
–
ch≠_°©e
 *
c°©e
, *
rchÆÀnge
, 
rchÆÀnge_Àn
, *
£¸ë
, 
£¸ë_Àn
)

145 
MS_Ch≠Re•⁄£
 
ª•⁄£
;

146 #ifde‡
MSLANMAN


147 
ms_œnm™
;

151 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠MS: se¸ë i†'%.*s'\n", 
£¸ë_Àn
, 
£¸ë
));

153 
	`BZERO
(&
ª•⁄£
, (response));

156 
	`Ch≠MS_NT
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

158 #ifde‡
MSLANMAN


159 
	`Ch≠MS_LANM™
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

162 
ª•⁄£
.
U£NT
 = !
ms_œnm™
;

164 
ª•⁄£
.
U£NT
 = 1;

167 
	`BCOPY
(&
ª•⁄£
, 
c°©e
->ª•⁄£, 
MS_CHAP_RESPONSE_LEN
);

168 
c°©e
->
ª•_Àngth
 = 
MS_CHAP_RESPONSE_LEN
;

169 
	}
}

176 
	$ChÆÀngeRe•⁄£
–
u_ch¨
 *
chÆÀnge
,

177 
u_ch¨
 *
pwHash
,

178 
u_ch¨
 *
ª•⁄£
 )

180 
ZPassw‹dHash
[21];

182 
	`BZERO
(
ZPassw‹dHash
, (ZPasswordHash));

183 
	`BCOPY
(
pwHash
, 
ZPassw‹dHash
, 16);

186 
	`log_∑ckë
(
ZPassw‹dHash
, (ZPassw‹dHash), "ChÆÀngeRe•⁄£ - ZPassw‹dHash", 
LOG_DEBUG
);

189 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 0, 
ª•⁄£
 + 0);

190 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 7, 
ª•⁄£
 + 8);

191 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 14, 
ª•⁄£
 + 16);

194 
	`log_∑ckë
(
ª•⁄£
, 24, "ChÆÀngeRe•⁄£ -Ñe•⁄£", 
LOG_DEBUG
);

196 
	}
}

199 #ifde‡
USE_CRYPT


201 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

202 
u_ch¨
 *
key
,

203 
u_ch¨
 *
cùhî
 )

205 
u_ch¨
 
des_key
[8];

206 
u_ch¨
 
¸y±_key
[66];

207 
u_ch¨
 
des_öput
[66];

209 
	`MakeKey
(
key
, 
des_key
);

211 
	`Ex∑nd
(
des_key
, 
¸y±_key
);

212 
	`£tkey
(
¸y±_key
);

215 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

216 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

219 
	`Ex∑nd
(
˛ór
, 
des_öput
);

220 
	`í¸y±
(
des_öput
, 0);

221 
	`Cﬁœp£
(
des_öput
, 
cùhî
);

224 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

225 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

227 
	}
}

232 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

233 
u_ch¨
 *
key
,

234 
u_ch¨
 *
cùhî
 )

236 
des_cblock
 
des_key
;

237 
des_key_scheduÀ
 
key_scheduÀ
;

239 
	`MakeKey
(
key
, 
des_key
);

241 
	`des_£t_key
(&
des_key
, 
key_scheduÀ
);

244 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

245 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

248 
	`des_ecb_í¸y±
((
des_cblock
 *)
˛ór
, (des_cblock *)
cùhî
, 
key_scheduÀ
, 1);

251 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

252 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

254 
	}
}

259 
u_ch¨


260 
	$Gë7Bôs
–
u_ch¨
 *
öput
, 
°¨tBô
)

262 
w‹d
;

264 
w‹d
 = ()
öput
[
°¨tBô
 / 8] << 8;

265 
w‹d
 |()
öput
[
°¨tBô
 / 8 + 1];

267 
w‹d
 >>15 - (
°¨tBô
 % 8 + 7);

269  
w‹d
 & 0xFE;

270 
	}
}

272 #ifde‡
USE_CRYPT


279 
	$Ex∑nd
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

281 
j
, 
c
;

282 
i
;

284 
i
 = 0; i < 64; 
ö
++){

285 
c
 = *
ö
;

286 
j
 = 7; j >= 0; j--) {

287 *
out
++ = (
c
 >> 
j
) & 01;

289 
i
 += 8;

291 
	}
}

296 
	$Cﬁœp£
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

298 
j
;

299 
i
;

300 
c
;

302 
i
 = 0; i < 64; i +8, 
out
++) {

303 
c
 = 0;

304 
j
 = 7; j >0; j--, 
ö
++) {

305 
c
 |*
ö
 << 
j
;

307 *
out
 = 
c
 & 0xff;

309 
	}
}

313 
	$MakeKey
–
u_ch¨
 *
key
,

314 
u_ch¨
 *
des_key
 )

316 
des_key
[0] = 
	`Gë7Bôs
(
key
, 0);

317 
des_key
[1] = 
	`Gë7Bôs
(
key
, 7);

318 
des_key
[2] = 
	`Gë7Bôs
(
key
, 14);

319 
des_key
[3] = 
	`Gë7Bôs
(
key
, 21);

320 
des_key
[4] = 
	`Gë7Bôs
(
key
, 28);

321 
des_key
[5] = 
	`Gë7Bôs
(
key
, 35);

322 
des_key
[6] = 
	`Gë7Bôs
(
key
, 42);

323 
des_key
[7] = 
	`Gë7Bôs
(
key
, 49);

325 #i‚de‡
USE_CRYPT


326 
	`des_£t_odd_∑rôy
((
des_cblock
 *)
des_key
);

330 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 56-bit input : %02X%02X%02X%02X%02X%02X%02X\n",

331 
key
[0], key[1], key[2], key[3], key[4], key[5], key[6]));

332 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 64-bit output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

333 
des_key
[0], des_key[1], des_key[2], des_key[3], des_key[4], des_key[5], des_key[6], des_key[7]));

335 
	}
}

338 
	$Ch≠MS_NT
–*
rchÆÀnge
,

339 
rchÆÀnge_Àn
,

340 *
£¸ë
,

341 
£¸ë_Àn
,

342 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

344 
i
;

345 
MD°ru˘
 
md4C⁄ãxt
;

346 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

347 
low_byã_fú°
 = -1;

351 
	`BZERO
(
unicodePassw‹d
, (unicodePassword));

352 
i
 = 0; i < 
£¸ë_Àn
; i++) {

353 
unicodePassw‹d
[
i
 * 2] = (
u_ch¨
)
£¸ë
[i];

355 
	`MDbegö
(&
md4C⁄ãxt
);

356 
	`MDupd©e
(&
md4C⁄ãxt
, 
unicodePassw‹d
, 
£¸ë_Àn
 * 2 * 8);

358 i‡(
low_byã_fú°
 == -1) {

359 
low_byã_fú°
 = (
	`ht⁄s
(()1) != 1);

361 i‡(
low_byã_fú°
 == 0) {

362 
	`MDªvî£
((
u_l⁄g
 *)&
md4C⁄ãxt
);

365 
	`MDupd©e
(&
md4C⁄ãxt
, 
NULL
, 0);

367 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, (*)
md4C⁄ãxt
.
buf„r
, 
ª•⁄£
->
NTRe•
);

368 
	}
}

370 #ifde‡
MSLANMAN


371 
u_ch¨
 *
	gStdText
 = (u_char *)"KGS!@#$%";

374 
	$Ch≠MS_LANM™
–*
rchÆÀnge
,

375 
rchÆÀnge_Àn
,

376 *
£¸ë
,

377 
£¸ë_Àn
,

378 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

380 
i
;

381 
u_ch¨
 
Uˇ£Passw‹d
[
MAX_NT_PASSWORD
];

382 
u_ch¨
 
Passw‹dHash
[16];

385 
	`BZERO
(
Uˇ£Passw‹d
, (UcasePassword));

386 
i
 = 0; i < 
£¸ë_Àn
; i++) {

387 
Uˇ£Passw‹d
[
i
] = (
u_ch¨
)
	`touµî
(
£¸ë
[i]);

389 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 0, 
Passw‹dHash
 + 0 );

390 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 7, 
Passw‹dHash
 + 8 );

391 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, 
ª•⁄£
->
LANM™Re•
);

392 
	}
}

	@net/lwip/netif/ppp/chpms.h

58 #i‚de‡
CHPMS_H


59 
	#CHPMS_H


	)

61 
	#MAX_NT_PASSWORD
 256

	)

63 
Ch≠MS
 (
ch≠_°©e
 *, *, , *, );

	@net/lwip/netif/ppp/fsm.c

59 
	~"lwù/›t.h
"

61 #i‡
PPP_SUPPORT


63 
	~"µp.h
"

64 
	~"µpdebug.h
"

66 
	~"fsm.h
"

73 #i‡
PPP_DEBUG


75 c⁄° *
	gµ≥º_°ªº
[] = {

98 
fsm_timeout
 (*);

99 
fsm_rc⁄‰eq
 (
fsm
 *, 
u_ch¨
, u_char *, );

100 
fsm_rc⁄Áck
 (
fsm
 *, , 
u_ch¨
 *, );

101 
fsm_rc⁄‚akªj
 (
fsm
 *, , , 
u_ch¨
 *, );

102 
fsm_πîmªq
 (
fsm
 *, , 
u_ch¨
 *, );

103 
fsm_πîmack
 (
fsm
 *);

104 
fsm_rcodîej
 (
fsm
 *, 
u_ch¨
 *, );

105 
fsm_sc⁄‰eq
 (
fsm
 *, );

107 
	#PROTO_NAME
(
f
Ë((f)->
ˇŒbacks
->
¥Ÿo_«me
)

	)

118 
	g≥î_mru
[
NUM_PPP
];

131 
	$fsm_öô
(
fsm
 *
f
)

133 
f
->
°©e
 = 
LS_INITIAL
;

134 
f
->
Êags
 = 0;

135 
f
->
id
 = 0;

136 
f
->
timeouâime
 = 
FSM_DEFTIMEOUT
;

137 
f
->
maxc⁄‰eqå™smôs
 = 
FSM_DEFMAXCONFREQS
;

138 
f
->
maxãrmå™smôs
 = 
FSM_DEFMAXTERMREQS
;

139 
f
->
max«klo›s
 = 
FSM_DEFMAXNAKLOOPS
;

140 
f
->
ãrm_ªas⁄_Àn
 = 0;

141 
	}
}

148 
	$fsm_lowîup
(
fsm
 *
f
)

150 
ﬁdSèã
 = 
f
->
°©e
;

152 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

154  
f
->
°©e
 ) {

155 
LS_INITIAL
:

156 
f
->
°©e
 = 
LS_CLOSED
;

159 
LS_STARTING
:

160 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

161 
f
->
°©e
 = 
LS_STOPPED
;

164 
	`fsm_sc⁄‰eq
(
f
, 0);

165 
f
->
°©e
 = 
LS_REQSENT
;

170 
	`FSMDEBUG
((
LOG_INFO
, "%s: UpÉvent in state %d (%s)!\n",

171 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

174 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerup state %d (%s) -> %d (%s)\n",

175 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

176 
	}
}

185 
	$fsm_lowîdown
(
fsm
 *
f
)

187 
ﬁdSèã
 = 
f
->
°©e
;

189 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

191  
f
->
°©e
 ) {

192 
LS_CLOSED
:

193 
f
->
°©e
 = 
LS_INITIAL
;

196 
LS_STOPPED
:

197 
f
->
°©e
 = 
LS_STARTING
;

198 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

199 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

203 
LS_CLOSING
:

204 
f
->
°©e
 = 
LS_INITIAL
;

205 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

208 
LS_STOPPING
:

209 
LS_REQSENT
:

210 
LS_ACKRCVD
:

211 
LS_ACKSENT
:

212 
f
->
°©e
 = 
LS_STARTING
;

213 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

216 
LS_OPENED
:

217 if–
f
->
ˇŒbacks
->
down
 ) {

218 (*
f
->
ˇŒbacks
->
down
)(f);

220 
f
->
°©e
 = 
LS_STARTING
;

224 
	`FSMDEBUG
((
LOG_INFO
, "%s: DownÉvent in state %d (%s)!\n",

225 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

228 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerdown state %d (%s) -> %d (%s)\n",

229 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

230 
	}
}

237 
	$fsm_›í
(
fsm
 *
f
)

239 
ﬁdSèã
 = 
f
->
°©e
;

241 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

243  
f
->
°©e
 ) {

244 
LS_INITIAL
:

245 
f
->
°©e
 = 
LS_STARTING
;

246 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

247 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

251 
LS_CLOSED
:

252 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

253 
f
->
°©e
 = 
LS_STOPPED
;

256 
	`fsm_sc⁄‰eq
(
f
, 0);

257 
f
->
°©e
 = 
LS_REQSENT
;

261 
LS_CLOSING
:

262 
f
->
°©e
 = 
LS_STOPPING
;

264 
LS_STOPPED
:

265 
LS_OPENED
:

266 if–
f
->
Êags
 & 
OPT_RESTART
 ) {

267 
	`fsm_lowîdown
(
f
);

268 
	`fsm_lowîup
(
f
);

273 
	`FSMDEBUG
((
LOG_INFO
, "%s: open state %d (%s) -> %d (%s)\n",

274 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

275 
	}
}

285 
	$fsm_˛o£
(
fsm
 *
f
, *
ªas⁄
)

287 
ﬁdSèã
 = 
f
->
°©e
;

289 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

291 
f
->
ãrm_ªas⁄
 = 
ªas⁄
;

292 
f
->
ãrm_ªas⁄_Àn
 = (
ªas⁄
 =
NULL
? 0: 
	`°æí
(reason));

293  
f
->
°©e
 ) {

294 
LS_STARTING
:

295 
f
->
°©e
 = 
LS_INITIAL
;

297 
LS_STOPPED
:

298 
f
->
°©e
 = 
LS_CLOSED
;

300 
LS_STOPPING
:

301 
f
->
°©e
 = 
LS_CLOSING
;

304 
LS_REQSENT
:

305 
LS_ACKRCVD
:

306 
LS_ACKSENT
:

307 
LS_OPENED
:

308 if–
f
->
°©e
 !
LS_OPENED
 ) {

309 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

310 } if–
f
->
ˇŒbacks
->
down
 ) {

311 (*
f
->
ˇŒbacks
->
down
)(f);

314 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

315 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

316 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

317 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

318 --
f
->
ªå™smôs
;

320 
f
->
°©e
 = 
LS_CLOSING
;

324 
	`FSMDEBUG
((
LOG_INFO
, "%s: closeÑeason=%s state %d (%s) -> %d (%s)\n",

325 
	`PROTO_NAME
(
f
), 
ªas⁄
, 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

326 
	}
}

335 
	$fsm_sd©a
–
fsm
 *
f
, 
u_ch¨
 
code
, u_ch¨ 
id
, u_ch¨ *
d©a
, 
d©Æí
)

337 
u_ch¨
 *
ouç
;

338 
ouéí
;

341 
ouç
 = 
ouçackë_buf
[
f
->
unô
];

342 i‡(
d©Æí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
) {

343 
d©Æí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

345 i‡(
d©Æí
 && 
d©a
 !
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
) {

346 
	`BCOPY
(
d©a
, 
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
, 
d©Æí
);

348 
ouéí
 = 
d©Æí
 + 
HEADERLEN
;

349 
	`MAKEHEADER
(
ouç
, 
f
->
¥Ÿocﬁ
);

350 
	`PUTCHAR
(
code
, 
ouç
);

351 
	`PUTCHAR
(
id
, 
ouç
);

352 
	`PUTSHORT
(
ouéí
, 
ouç
);

353 
	`µpWrôe
(
f
->
unô
, 
ouçackë_buf
[f->unô], 
ouéí
 + 
PPP_HDRLEN
);

354 
	`FSMDEBUG
((
LOG_INFO
, "fsm_sdata(%s): Sent code %d,%d,%d.\n",

355 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
ouéí
));

356 
	}
}

363 
	$fsm_öput
(
fsm
 *
f
, 
u_ch¨
 *
ö∑ckë
, 
l
)

365 
u_ch¨
 *
öp
 = 
ö∑ckë
;

366 
u_ch¨
 
code
, 
id
;

367 
Àn
;

373 i‡(
l
 < 
HEADERLEN
) {

374 
	`FSMDEBUG
((
LOG_WARNING
, "fsm_input(%x): Rcvd short header.\n",

375 
f
->
¥Ÿocﬁ
));

378 
	`GETCHAR
(
code
, 
öp
);

379 
	`GETCHAR
(
id
, 
öp
);

380 
	`GETSHORT
(
Àn
, 
öp
);

381 i‡(
Àn
 < 
HEADERLEN
) {

382 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd illegalÜength.\n",

383 
f
->
¥Ÿocﬁ
));

386 i‡(
Àn
 > 
l
) {

387 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd shortÖacket.\n",

388 
f
->
¥Ÿocﬁ
));

391 
Àn
 -
HEADERLEN
;

393 if–
f
->
°©e
 =
LS_INITIAL
 || f->°©ê=
LS_STARTING
 ) {

394 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): RcvdÖacket in state %d (%s).\n",

395 
f
->
¥Ÿocﬁ
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

398 
	`FSMDEBUG
((
LOG_INFO
, "fsm_öput(%s):%d,%d,%d\n", 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
l
));

402 
code
) {

403 
CONFREQ
:

404 
	`fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
);

407 
CONFACK
:

408 
	`fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
);

411 
CONFNAK
:

412 
CONFREJ
:

413 
	`fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

416 
TERMREQ
:

417 
	`fsm_πîmªq
(
f
, 
id
, 
öp
, 
Àn
);

420 
TERMACK
:

421 
	`fsm_πîmack
(
f
);

424 
CODEREJ
:

425 
	`fsm_rcodîej
(
f
, 
öp
, 
Àn
);

429 if–!
f
->
ˇŒbacks
->
extcode
 ||

430 !(*
f
->
ˇŒbacks
->
extcode
)(f, 
code
, 
id
, 
öp
, 
Àn
) ) {

431 
	`fsm_sd©a
(
f
, 
CODEREJ
, ++f->
id
, 
ö∑ckë
, 
Àn
 + 
HEADERLEN
);

435 
	}
}

444 
	$fsm_¥Ÿªje˘
(
fsm
 *
f
)

446  
f
->
°©e
 ) {

447 
LS_CLOSING
:

448 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

450 
LS_CLOSED
:

451 
f
->
°©e
 = 
LS_CLOSED
;

452 if–
f
->
ˇŒbacks
->
föished
 ) {

453 (*
f
->
ˇŒbacks
->
föished
)(f);

457 
LS_STOPPING
:

458 
LS_REQSENT
:

459 
LS_ACKRCVD
:

460 
LS_ACKSENT
:

461 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

463 
LS_STOPPED
:

464 
f
->
°©e
 = 
LS_STOPPED
;

465 if–
f
->
ˇŒbacks
->
föished
 ) {

466 (*
f
->
ˇŒbacks
->
föished
)(f);

470 
LS_OPENED
:

471 if–
f
->
ˇŒbacks
->
down
 ) {

472 (*
f
->
ˇŒbacks
->
down
)(f);

475 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

476 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

477 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

478 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

479 --
f
->
ªå™smôs
;

481 
f
->
°©e
 = 
LS_STOPPING
;

485 
	`FSMDEBUG
((
LOG_INFO
, "%s: Protocol-rejectÉvent in state %d (%s)!\n",

486 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

488 
	}
}

502 
	$fsm_timeout
(*
¨g
)

504 
fsm
 *
f
 = (fsm *Ë
¨g
;

506 
f
->
°©e
) {

507 
LS_CLOSING
:

508 
LS_STOPPING
:

509 if–
f
->
ªå™smôs
 <= 0 ) {

510 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Terminate-Request state=%d (%s)\n",

511 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

515 
f
->
°©e
 = (f->°©ê=
LS_CLOSING
)? 
LS_CLOSED
: 
LS_STOPPED
;

516 if–
f
->
ˇŒbacks
->
föished
 ) {

517 (*
f
->
ˇŒbacks
->
föished
)(f);

520 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Terminate-Requests state=%d (%s)\n",

521 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

523 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

524 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

525 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

526 --
f
->
ªå™smôs
;

530 
LS_REQSENT
:

531 
LS_ACKRCVD
:

532 
LS_ACKSENT
:

533 i‡(
f
->
ªå™smôs
 <= 0) {

534 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Config-Requests state=%d (%s)\n",

535 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

536 
f
->
°©e
 = 
LS_STOPPED
;

537 if–(
f
->
Êags
 & 
OPT_PASSIVE
Ë=0 && f->
ˇŒbacks
->
föished
 ) {

538 (*
f
->
ˇŒbacks
->
föished
)(f);

541 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Config-Request state=%d (%s)\n",

542 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

544 i‡(
f
->
ˇŒbacks
->
ªå™smô
) {

545 (*
f
->
ˇŒbacks
->
ªå™smô
)(f);

547 
	`fsm_sc⁄‰eq
(
f
, 1);

548 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

549 
f
->
°©e
 = 
LS_REQSENT
;

555 
	`FSMDEBUG
((
LOG_INFO
, "%s: TimeoutÉvent in state %d (%s)!\n",

556 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

558 
	}
}

565 
	$fsm_rc⁄‰eq
(
fsm
 *
f
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

567 
code
, 
ªje˘_if_dißgªe
;

569 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n",

570 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

571  
f
->
°©e
 ) {

572 
LS_CLOSED
:

574 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

576 
LS_CLOSING
:

577 
LS_STOPPING
:

580 
LS_OPENED
:

582 if–
f
->
ˇŒbacks
->
down
 ) {

583 (*
f
->
ˇŒbacks
->
down
)(f);

585 
	`fsm_sc⁄‰eq
(
f
, 0);

588 
LS_STOPPED
:

590 
	`fsm_sc⁄‰eq
(
f
, 0);

591 
f
->
°©e
 = 
LS_REQSENT
;

599 i‡(
f
->
ˇŒbacks
->
ªqci
) {

600 
ªje˘_if_dißgªe
 = (
f
->
«klo›s
 >f->
max«klo›s
);

601 
code
 = (*
f
->
ˇŒbacks
->
ªqci
)(f, 
öp
, &
Àn
, 
ªje˘_if_dißgªe
);

602 } i‡(
Àn
) {

603 
code
 = 
CONFREJ
;

605 
code
 = 
CONFACK
;

609 
	`fsm_sd©a
(
f
, (
u_ch¨
)
code
, 
id
, 
öp
, 
Àn
);

611 i‡(
code
 =
CONFACK
) {

612 i‡(
f
->
°©e
 =
LS_ACKRCVD
) {

613 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

614 
f
->
°©e
 = 
LS_OPENED
;

615 i‡(
f
->
ˇŒbacks
->
up
) {

616 (*
f
->
ˇŒbacks
->
up
)(f);

619 
f
->
°©e
 = 
LS_ACKSENT
;

621 
f
->
«klo›s
 = 0;

624 i‡(
f
->
°©e
 !
LS_ACKRCVD
) {

625 
f
->
°©e
 = 
LS_REQSENT
;

627 if–
code
 =
CONFNAK
 ) {

628 ++
f
->
«klo›s
;

631 
	}
}

638 
	$fsm_rc⁄Áck
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

640 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",

641 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

643 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

646 if–!(
f
->
ˇŒbacks
->
ackci
? (*f->ˇŒbacks->ackci)(f, 
öp
, 
Àn
): (len == 0)) ) {

648 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad Ack (length %d)\n",

649 
	`PROTO_NAME
(
f
), 
Àn
));

652 
f
->
£í_ack
 = 1;

654 
f
->
°©e
) {

655 
LS_CLOSED
:

656 
LS_STOPPED
:

657 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

660 
LS_REQSENT
:

661 
f
->
°©e
 = 
LS_ACKRCVD
;

662 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

665 
LS_ACKRCVD
:

667 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

668 
	`fsm_sc⁄‰eq
(
f
, 0);

669 
f
->
°©e
 = 
LS_REQSENT
;

672 
LS_ACKSENT
:

673 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

674 
f
->
°©e
 = 
LS_OPENED
;

675 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

676 i‡(
f
->
ˇŒbacks
->
up
) {

677 (*
f
->
ˇŒbacks
->
up
)(f);

681 
LS_OPENED
:

683 i‡(
f
->
ˇŒbacks
->
down
) {

684 (*
f
->
ˇŒbacks
->
down
)(f);

686 
	`fsm_sc⁄‰eq
(
f
, 0);

687 
f
->
°©e
 = 
LS_REQSENT
;

690 
	}
}

697 
	$fsm_rc⁄‚akªj
(
fsm
 *
f
, 
code
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

699 (*
¥oc
Ë(
fsm
 *, 
u_ch¨
 *, );

700 
ªt
;

702 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",

703 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

705 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

708 
¥oc
 = (
code
 =
CONFNAK
)? 
f
->
ˇŒbacks
->
«kci
: f->ˇŒbacks->
ªjci
;

709 i‡(!
¥oc
 || !((
ªt
 = 
	`¥oc
(
f
, 
öp
, 
Àn
)))) {

711 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad %s (length %d)\n",

712 
	`PROTO_NAME
(
f
), (
code
==
CONFNAK
? "Nak": "ªje˘"), 
Àn
));

715 
f
->
£í_ack
 = 1;

717 
f
->
°©e
) {

718 
LS_CLOSED
:

719 
LS_STOPPED
:

720 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

723 
LS_REQSENT
:

724 
LS_ACKSENT
:

726 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

727 i‡(
ªt
 < 0) {

728 
f
->
°©e
 = 
LS_STOPPED
;

730 
	`fsm_sc⁄‰eq
(
f
, 0);

734 
LS_ACKRCVD
:

736 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

737 
	`fsm_sc⁄‰eq
(
f
, 0);

738 
f
->
°©e
 = 
LS_REQSENT
;

741 
LS_OPENED
:

743 i‡(
f
->
ˇŒbacks
->
down
) {

744 (*
f
->
ˇŒbacks
->
down
)(f);

746 
	`fsm_sc⁄‰eq
(
f
, 0);

747 
f
->
°©e
 = 
LS_REQSENT
;

750 
	}
}

757 
	$fsm_πîmªq
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
p
, 
Àn
)

759 
	`LWIP_UNUSED_ARG
(
p
);

761 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",

762 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

764 
f
->
°©e
) {

765 
LS_ACKRCVD
:

766 
LS_ACKSENT
:

767 
f
->
°©e
 = 
LS_REQSENT
;

770 
LS_OPENED
:

771 i‡(
Àn
 > 0) {

772 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖì∏(%x)\n", 
	`PROTO_NAME
(
f
), 
p
));

774 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖìr\n", 
	`PROTO_NAME
(
f
)));

776 i‡(
f
->
ˇŒbacks
->
down
) {

777 (*
f
->
ˇŒbacks
->
down
)(f);

779 
f
->
ªå™smôs
 = 0;

780 
f
->
°©e
 = 
LS_STOPPING
;

781 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

785 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

786 
	}
}

793 
	$fsm_πîmack
(
fsm
 *
f
)

795 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermack(%s): state=%d (%s)\n",

796 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

798 
f
->
°©e
) {

799 
LS_CLOSING
:

800 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

801 
f
->
°©e
 = 
LS_CLOSED
;

802 if–
f
->
ˇŒbacks
->
föished
 ) {

803 (*
f
->
ˇŒbacks
->
föished
)(f);

807 
LS_STOPPING
:

808 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

809 
f
->
°©e
 = 
LS_STOPPED
;

810 if–
f
->
ˇŒbacks
->
föished
 ) {

811 (*
f
->
ˇŒbacks
->
föished
)(f);

815 
LS_ACKRCVD
:

816 
f
->
°©e
 = 
LS_REQSENT
;

819 
LS_OPENED
:

820 i‡(
f
->
ˇŒbacks
->
down
) {

821 (*
f
->
ˇŒbacks
->
down
)(f);

823 
	`fsm_sc⁄‰eq
(
f
, 0);

826 
	}
}

833 
	$fsm_rcodîej
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

835 
u_ch¨
 
code
, 
id
;

837 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej(%s): state=%d (%s)\n",

838 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

840 i‡(
Àn
 < 
HEADERLEN
) {

841 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej: Rcvd short Code-RejectÖacket!\n"));

844 
	`GETCHAR
(
code
, 
öp
);

845 
	`GETCHAR
(
id
, 
öp
);

846 
	`FSMDEBUG
((
LOG_WARNING
, "%s: Rcvd Code-Reject for code %d, id %d\n",

847 
	`PROTO_NAME
(
f
), 
code
, 
id
));

849 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

850 
f
->
°©e
 = 
LS_REQSENT
;

852 
	}
}

859 
	$fsm_sc⁄‰eq
(
fsm
 *
f
, 
ªå™smô
)

861 
u_ch¨
 *
ouç
;

862 
cûí
;

864 if–
f
->
°©e
 !
LS_REQSENT
 && f->°©ê!
LS_ACKRCVD
 && f->°©ê!
LS_ACKSENT
 ) {

866 if–
f
->
ˇŒbacks
->
ª£tci
 ) {

867 (*
f
->
ˇŒbacks
->
ª£tci
)(f);

869 
f
->
«klo›s
 = 0;

872 if–!
ªå™smô
 ) {

874 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

875 
f
->
ªqid
 = ++f->
id
;

878 
f
->
£í_ack
 = 0;

883 
ouç
 = 
ouçackë_buf
[
f
->
unô
] + 
PPP_HDRLEN
 + 
HEADERLEN
;

884 if–
f
->
ˇŒbacks
->
cûí
 && f->ˇŒbacks->
addci
 ) {

885 
cûí
 = (*
f
->
ˇŒbacks
->cilen)(f);

886 if–
cûí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
 ) {

887 
cûí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

889 i‡(
f
->
ˇŒbacks
->
addci
) {

890 (*
f
->
ˇŒbacks
->
addci
)(f, 
ouç
, &
cûí
);

893 
cûí
 = 0;

897 
	`fsm_sd©a
(
f
, 
CONFREQ
, f->
ªqid
, 
ouç
, 
cûí
);

900 --
f
->
ªå™smôs
;

901 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

903 
	`FSMDEBUG
((
LOG_INFO
, "%s: sending Configure-Request, id %d\n",

904 
	`PROTO_NAME
(
f
), f->
ªqid
));

905 
	}
}

	@net/lwip/netif/ppp/fsm.h

55 #i‚de‡
FSM_H


56 
	#FSM_H


	)

64 
	#HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

70 
	#CONFREQ
 1

	)

71 
	#CONFACK
 2

	)

72 
	#CONFNAK
 3

	)

73 
	#CONFREJ
 4

	)

74 
	#TERMREQ
 5

	)

75 
	#TERMACK
 6

	)

76 
	#CODEREJ
 7

	)

81 
	#LS_INITIAL
 0

	)

82 
	#LS_STARTING
 1

	)

83 
	#LS_CLOSED
 2

	)

84 
	#LS_STOPPED
 3

	)

85 
	#LS_CLOSING
 4

	)

86 
	#LS_STOPPING
 5

	)

87 
	#LS_REQSENT
 6

	)

88 
	#LS_ACKRCVD
 7

	)

89 
	#LS_ACKSENT
 8

	)

90 
	#LS_OPENED
 9

	)

95 
	#OPT_PASSIVE
 1

	)

96 
	#OPT_RESTART
 2

	)

97 
	#OPT_SILENT
 4

	)

106 
	sfsm
 {

107 
	munô
;

108 
u_sh‹t
 
	m¥Ÿocﬁ
;

109 
	m°©e
;

110 
	mÊags
;

111 
u_ch¨
 
	mid
;

112 
u_ch¨
 
	mªqid
;

113 
u_ch¨
 
	m£í_ack
;

114 
	mtimeouâime
;

115 
	mmaxc⁄‰eqå™smôs
;

116 
	mªå™smôs
;

117 
	mmaxãrmå™smôs
;

118 
	m«klo›s
;

119 
	mmax«klo›s
;

120 
fsm_ˇŒbacks
* 
	mˇŒbacks
;

121 * 
	mãrm_ªas⁄
;

122 
	mãrm_ªas⁄_Àn
;

123 } 
	tfsm
;

126 
	sfsm_ˇŒbacks
 {

127 (*
	mª£tci
)(
	mfsm
*);

128 (*
	mcûí
)(
	mfsm
*);

129 (*
	maddci
)(
	mfsm
*, 
	mu_ch¨
*, *);

130 (*
	mackci
)(
	mfsm
*, 
	mu_ch¨
*, );

131 (*
	m«kci
)(
	mfsm
*, 
	mu_ch¨
*, );

132 (*
	mªjci
)(
	mfsm
*, 
	mu_ch¨
*, );

133 (*
	mªqci
)(
	mfsm
*, 
	mu_ch¨
*, *, );

134 (*
	mup
)(
	mfsm
*);

135 (*
	mdown
)(
	mfsm
*);

136 (*
	m°¨tög
)(
	mfsm
*);

137 (*
	mföished
)(
	mfsm
*);

138 (*
	m¥Ÿªje˘
)();

139 (*
	mªå™smô
)(
	mfsm
*);

140 (*
	mextcode
)(
	mfsm
*, , 
	mu_ch¨
, u_char*, );

141 *
	m¥Ÿo_«me
;

142 } 
	tfsm_ˇŒbacks
;

151 
≥î_mru
[];

161 
fsm_öô
 (
fsm
*);

162 
fsm_lowîup
 (
fsm
*);

163 
fsm_lowîdown
 (
fsm
*);

164 
fsm_›í
 (
fsm
*);

165 
fsm_˛o£
 (
fsm
*, *);

166 
fsm_öput
 (
fsm
*, 
u_ch¨
*, );

167 
fsm_¥Ÿªje˘
 (
fsm
*);

168 
fsm_sd©a
 (
fsm
*, 
u_ch¨
, u_char, u_char*, );

	@net/lwip/netif/ppp/ipcp.c

53 
	~"lwù/›t.h
"

55 #i‡
PPP_SUPPORT


57 
	~"µp.h
"

58 
	~"µpdebug.h
"

60 
	~"auth.h
"

61 
	~"fsm.h
"

62 
	~"vj.h
"

63 
	~"ù˝.h
"

65 
	~<°rög.h
>

75 
	#CILEN_VOID
 2

	)

76 
	#CILEN_COMPRESS
 4

	)

77 
	#CILEN_VJ
 6

	)

78 
	#CILEN_ADDR
 6

	)

79 
	#CILEN_ADDRS
 10

	)

89 
ù˝_ª£tci
 (
fsm
 *);

90 
ù˝_cûí
 (
fsm
 *);

91 
ù˝_addci
 (
fsm
 *, 
u_ch¨
 *, *);

92 
ù˝_ackci
 (
fsm
 *, 
u_ch¨
 *, );

93 
ù˝_«kci
 (
fsm
 *, 
u_ch¨
 *, );

94 
ù˝_ªjci
 (
fsm
 *, 
u_ch¨
 *, );

95 
ù˝_ªqci
 (
fsm
 *, 
u_ch¨
 *, *, );

96 
ù˝_up
 (
fsm
 *);

97 
ù˝_down
 (
fsm
 *);

99 
ù˝_s¸ùt
 (
fsm
 *, *);

101 
ù˝_föished
 (
fsm
 *);

106 
ù˝_öô
 ();

107 
ù˝_›í
 ();

108 
ù˝_˛o£
 (, *);

109 
ù˝_lowîup
 ();

110 
ù˝_lowîdown
 ();

111 
ù˝_öput
 (, 
u_ch¨
 *, );

112 
ù˝_¥Ÿªj
 ();

114 
ù˝_˛ór_addrs
 ();

116 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

117 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

125 
ù˝_›ti⁄s
 
	gù˝_w™t›ti⁄s
[
NUM_PPP
];

126 
ù˝_›ti⁄s
 
	gù˝_gŸ›ti⁄s
[
NUM_PPP
];

127 
ù˝_›ti⁄s
 
	gù˝_Ælow›ti⁄s
[
NUM_PPP
];

128 
ù˝_›ti⁄s
 
	gù˝_his›ti⁄s
[
NUM_PPP
];

130 
fsm
 
	gù˝_fsm
[
NUM_PPP
];

132 
¥Ÿít
 
	gù˝_¥Ÿít
 = {

133 
PPP_IPCP
,

134 
ù˝_öô
,

135 
ù˝_öput
,

136 
ù˝_¥Ÿªj
,

137 
ù˝_lowîup
,

138 
ù˝_lowîdown
,

139 
ù˝_›í
,

140 
ù˝_˛o£
,

142 
ù˝_¥öçkt
,

143 
NULL
,

148 
ù_check_›ti⁄s
,

149 
NULL
,

150 
ù_a˘ive_pkt


160 
	gcis_ª˚ived
[
NUM_PPP
];

161 
	gdeÁu…_rouã_£t
[
NUM_PPP
];

163 
fsm_ˇŒbacks
 
	gù˝_ˇŒbacks
 = {

164 
ù˝_ª£tci
,

165 
ù˝_cûí
,

166 
ù˝_addci
,

167 
ù˝_ackci
,

168 
ù˝_«kci
,

169 
ù˝_ªjci
,

170 
ù˝_ªqci
,

171 
ù˝_up
,

172 
ù˝_down
,

173 
NULL
,

174 
ù˝_föished
,

175 
NULL
,

176 
NULL
,

177 
NULL
,

193 
	$_öë_¡ﬂ
(
u32_t
 
n
)

195 
ö_addr
 
ü
;

196 
ü
.
s_addr
 = 
n
;

197  
	`öë_¡ﬂ
(
ü
);

198 
	}
}

200 
	#öë_¡ﬂ
 
_öë_¡ﬂ


	)

206 
	$ù˝_öô
(
unô
)

208 
fsm
 *
f
 = &
ù˝_fsm
[
unô
];

209 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

210 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
unô
];

212 
f
->
unô
 = unit;

213 
f
->
¥Ÿocﬁ
 = 
PPP_IPCP
;

214 
f
->
ˇŒbacks
 = &
ù˝_ˇŒbacks
;

215 
	`fsm_öô
(&
ù˝_fsm
[
unô
]);

217 
	`mem£t
(
wo
, 0, (*wo));

218 
	`mem£t
(
ao
, 0, (*ao));

220 
wo
->
√g_addr
 = 1;

221 
wo
->
ouøddr
 = 0;

222 #i‡
VJ_SUPPORT


223 
wo
->
√g_vj
 = 1;

225 
wo
->
√g_vj
 = 0;

227 
wo
->
vj_¥Ÿocﬁ
 = 
IPCP_VJ_COMP
;

228 
wo
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

229 
wo
->
cÊag
 = 0;

230 
wo
->
deÁu…_rouã
 = 1;

232 
ao
->
√g_addr
 = 1;

233 #i‡
VJ_SUPPORT


234 
ao
->
√g_vj
 = 1;

236 
ao
->
√g_vj
 = 0;

238 
ao
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

239 
ao
->
cÊag
 = 1;

240 
ao
->
deÁu…_rouã
 = 1;

241 
	}
}

248 
	$ù˝_›í
(
unô
)

250 
	`fsm_›í
(&
ù˝_fsm
[
unô
]);

251 
	}
}

258 
	$ù˝_˛o£
(
unô
, *
ªas⁄
)

260 
	`fsm_˛o£
(&
ù˝_fsm
[
unô
], 
ªas⁄
);

261 
	}
}

268 
	$ù˝_lowîup
(
unô
)

270 
	`fsm_lowîup
(&
ù˝_fsm
[
unô
]);

271 
	}
}

278 
	$ù˝_lowîdown
(
unô
)

280 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

281 
	}
}

288 
	$ù˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

290 
	`fsm_öput
(&
ù˝_fsm
[
unô
], 
p
, 
Àn
);

291 
	}
}

300 
	$ù˝_¥Ÿªj
(
unô
)

302 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

303 
	}
}

310 
	$ù˝_ª£tci
(
fsm
 *
f
)

312 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

314 
wo
->
ªq_addr
 = wo->
√g_addr
 && 
ù˝_Ælow›ti⁄s
[
f
->
unô
].neg_addr;

315 i‡(
wo
->
ouøddr
 == 0) {

316 
wo
->
ac˚±_loˇl
 = 1;

318 i‡(
wo
->
hißddr
 == 0) {

319 
wo
->
ac˚±_ªmŸe
 = 1;

322 
wo
->
ªq_dns1
 = 
µp_£âögs
.
u£≥îdns
;

323 
wo
->
ªq_dns2
 = 
µp_£âögs
.
u£≥îdns
;

324 
ù˝_gŸ›ti⁄s
[
f
->
unô
] = *
wo
;

325 
cis_ª˚ived
[
f
->
unô
] = 0;

326 
	}
}

333 
	$ù˝_cûí
(
fsm
 *
f
)

335 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

336 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

337 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

339 
	#LENCIVJ
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_COMPRESS
 : 
CILEN_VJ
Ë: 0)

	)

340 
	#LENCIADDR
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_ADDRS
 : 
CILEN_ADDR
Ë: 0)

	)

341 
	#LENCIDNS
(
√g
Ë“eg ? (
CILEN_ADDR
Ë: 0)

	)

347 i‡(
wo
->
√g_addr
 && !
go
->√g_add∏&& !go->
ﬁd_addrs
) {

349 
go
->
√g_addr
 = 1;

350 
go
->
ﬁd_addrs
 = 1;

352 i‡(
wo
->
√g_vj
 && !
go
->√g_vj && !go->
ﬁd_vj
) {

354 i‡(
cis_ª˚ived
[
f
->
unô
] == 0) {

356 
go
->
√g_vj
 = 1;

359 i‡(
ho
->
√g_vj
 && ho->
ﬁd_vj
) {

360 
go
->
√g_vj
 = 1;

361 
go
->
ﬁd_vj
 = 1;

362 
go
->
vj_¥Ÿocﬁ
 = 
ho
->vj_protocol;

367  (
	`LENCIADDR
(
go
->
√g_addr
, go->
ﬁd_addrs
) +

368 
	`LENCIVJ
(
go
->
√g_vj
, go->
ﬁd_vj
) +

369 
	`LENCIDNS
(
go
->
ªq_dns1
) +

370 
	`LENCIDNS
(
go
->
ªq_dns2
));

371 
	}
}

378 
	$ù˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

380 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

381 
Àn
 = *
À≈
;

383 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

384 i‡(
√g
) { \

385 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

386 i‡(
Àn
 >
vjÀn
) { \

387 
	`PUTCHAR
(
›t
, 
u˝
); \

388 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

389 
	`PUTSHORT
(
vÆ
, 
u˝
); \

390 i‡(!
ﬁd
) { \

391 
	`PUTCHAR
(
max¶Ÿödex
, 
u˝
); \

392 
	`PUTCHAR
(
cÊag
, 
u˝
); \

394 
Àn
 -
vjÀn
; \

396 
√g
 = 0; \

398 }

	)

400 
	#ADDCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

401 i‡(
√g
) { \

402 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

403 i‡(
Àn
 >
addæí
) { \

404 
u32_t
 
l
; \

405 
	`PUTCHAR
(
›t
, 
u˝
); \

406 
	`PUTCHAR
(
addæí
, 
u˝
); \

407 
l
 = 
	`¡ohl
(
vÆ1
); \

408 
	`PUTLONG
(
l
, 
u˝
); \

409 i‡(
ﬁd
) { \

410 
l
 = 
	`¡ohl
(
vÆ2
); \

411 
	`PUTLONG
(
l
, 
u˝
); \

413 
Àn
 -
addæí
; \

415 
√g
 = 0; \

417 }

	)

419 
	#ADDCIDNS
(
›t
, 
√g
, 
addr
) \

420 i‡(
√g
) { \

421 i‡(
Àn
 >
CILEN_ADDR
) { \

422 
u32_t
 
l
; \

423 
	`PUTCHAR
(
›t
, 
u˝
); \

424 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

425 
l
 = 
	`¡ohl
(
addr
); \

426 
	`PUTLONG
(
l
, 
u˝
); \

427 
Àn
 -
CILEN_ADDR
; \

429 
√g
 = 0; \

431 }

	)

433 
	`ADDCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

434 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

436 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

437 
go
->
max¶Ÿödex
, go->
cÊag
);

439 
	`ADDCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

441 
	`ADDCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

443 *
À≈
 -
Àn
;

444 
	}
}

455 
	$ù˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

457 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

458 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

459 
u32_t
 
cû⁄g
;

460 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

468 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

469 i‡(
√g
) { \

470 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

471 i‡((
Àn
 -
vjÀn
) < 0) { \

472 
bad
; \

474 
	`GETCHAR
(
côy≥
, 
p
); \

475 
	`GETCHAR
(
cûí
, 
p
); \

476 i‡(
cûí
 !
vjÀn
 || \

477 
côy≥
 !
›t
) { \

478 
bad
; \

480 
	`GETSHORT
(
cish‹t
, 
p
); \

481 i‡(
cish‹t
 !
vÆ
) { \

482 
bad
; \

484 i‡(!
ﬁd
) { \

485 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

486 i‡(
cimax¶Ÿödex
 !
max¶Ÿödex
) { \

487 
bad
; \

489 
	`GETCHAR
(
cicÊag
, 
p
); \

490 i‡(
cicÊag
 !
cÊag
) { \

491 
bad
; \

494 }

	)

496 
	#ACKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

497 i‡(
√g
) { \

498 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

499 
u32_t
 
l
; \

500 i‡((
Àn
 -
addæí
) < 0) { \

501 
bad
; \

503 
	`GETCHAR
(
côy≥
, 
p
); \

504 
	`GETCHAR
(
cûí
, 
p
); \

505 i‡(
cûí
 !
addæí
 || \

506 
côy≥
 !
›t
) { \

507 
bad
; \

509 
	`GETLONG
(
l
, 
p
); \

510 
cû⁄g
 = 
	`ht⁄l
(
l
); \

511 i‡(
vÆ1
 !
cû⁄g
) { \

512 
bad
; \

514 i‡(
ﬁd
) { \

515 
	`GETLONG
(
l
, 
p
); \

516 
cû⁄g
 = 
	`ht⁄l
(
l
); \

517 i‡(
vÆ2
 !
cû⁄g
) { \

518 
bad
; \

521 }

	)

523 
	#ACKCIDNS
(
›t
, 
√g
, 
addr
) \

524 i‡(
√g
) { \

525 
u32_t
 
l
; \

526 i‡((
Àn
 -
CILEN_ADDR
) < 0) { \

527 
bad
; \

529 
	`GETCHAR
(
côy≥
, 
p
); \

530 
	`GETCHAR
(
cûí
, 
p
); \

531 i‡(
cûí
 !
CILEN_ADDR
 || \

532 
côy≥
 !
›t
) { \

533 
bad
; \

535 
	`GETLONG
(
l
, 
p
); \

536 
cû⁄g
 = 
	`ht⁄l
(
l
); \

537 i‡(
addr
 !
cû⁄g
) { \

538 
bad
; \

540 }

	)

542 
	`ACKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

543 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

545 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

546 
go
->
max¶Ÿödex
, go->
cÊag
);

548 
	`ACKCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

550 
	`ACKCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

555 i‡(
Àn
 != 0) {

556 
bad
;

560 
bad
:

561 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_ackci:Ñeceived bad Ack!\n"));

563 
	}
}

575 
	$ù˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

577 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

578 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

579 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

580 
u_sh‹t
 
cish‹t
;

581 
u32_t
 
cüddr1
, 
cüddr2
, 
l
, 
cidnßddr
;

582 
ù˝_›ti⁄s
 
no
;

583 
ù˝_›ti⁄s
 
åy
;

585 
	`BZERO
(&
no
, (no));

586 
åy
 = *
go
;

593 
	#NAKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
code
) \

594 i‡(
go
->
√g
 && \

595 
Àn
 >(
cûí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
)) && \

596 
p
[1] =
cûí
 && \

597 
p
[0] =
›t
) { \

598 
Àn
 -
cûí
; \

599 
	`INCPTR
(2, 
p
); \

600 
	`GETLONG
(
l
, 
p
); \

601 
cüddr1
 = 
	`ht⁄l
(
l
); \

602 i‡(
ﬁd
) { \

603 
	`GETLONG
(
l
, 
p
); \

604 
cüddr2
 = 
	`ht⁄l
(
l
); \

605 
no
.
ﬁd_addrs
 = 1; \

607 
cüddr2
 = 0; \

609 
no
.
√g
 = 1; \

610 
code
 \

611 }

	)

613 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

614 i‡(
go
->
√g
 && \

615 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
 || cûí =
CILEN_VJ
) && \

616 
Àn
 >
cûí
 && \

617 
p
[0] =
›t
) { \

618 
Àn
 -
cûí
; \

619 
	`INCPTR
(2, 
p
); \

620 
	`GETSHORT
(
cish‹t
, 
p
); \

621 
no
.
√g
 = 1; \

622 
code
 \

623 }

	)

625 
	#NAKCIDNS
(
›t
, 
√g
, 
code
) \

626 i‡(
go
->
√g
 && \

627 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

628 
Àn
 >
cûí
 && \

629 
p
[0] =
›t
) { \

630 
Àn
 -
cûí
; \

631 
	`INCPTR
(2, 
p
); \

632 
	`GETLONG
(
l
, 
p
); \

633 
cidnßddr
 = 
	`ht⁄l
(
l
); \

634 
no
.
√g
 = 1; \

635 
code
 \

636 }

	)

642 
	`NAKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
, go->old_addrs,

643 i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

644 
åy
.
ouøddr
 = 
cüddr1
;

645 
	`IPCPDEBUG
((
LOG_INFO
, "local IPáddress %s\n",

646 
	`öë_¡ﬂ
(
cüddr1
)));

648 i‡(
go
->
ac˚±_ªmŸe
 && 
cüddr2
) {

649 
åy
.
hißddr
 = 
cüddr2
;

650 
	`IPCPDEBUG
((
LOG_INFO
, "remote IPáddress %s\n",

651 
	`öë_¡ﬂ
(
cüddr2
)));

661 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

662 i‡(
cûí
 =
CILEN_VJ
) {

663 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
);

664 
	`GETCHAR
(
cicÊag
, 
p
);

665 i‡(
cish‹t
 =
IPCP_VJ_COMP
) {

666 
åy
.
ﬁd_vj
 = 0;

667 i‡(
cimax¶Ÿödex
 < 
go
->
max¶Ÿödex
) {

668 
åy
.
max¶Ÿödex
 = 
cimax¶Ÿödex
;

670 i‡(!
cicÊag
) {

671 
åy
.
cÊag
 = 0;

674 
åy
.
√g_vj
 = 0;

677 i‡(
cish‹t
 =
IPCP_VJ_COMP
 || cish‹à=
IPCP_VJ_COMP_OLD
) {

678 
åy
.
ﬁd_vj
 = 1;

679 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

681 
åy
.
√g_vj
 = 0;

686 
	`NAKCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
,

687 
åy
.
dnßddr
[0] = 
cidnßddr
;

688 
	`IPCPDEBUG
((
LOG_INFO
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

691 
	`NAKCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
,

692 
åy
.
dnßddr
[1] = 
cidnßddr
;

693 
	`IPCPDEBUG
((
LOG_INFO
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

702 
Àn
 > 
CILEN_VOID
) {

703 
	`GETCHAR
(
côy≥
, 
p
);

704 
	`GETCHAR
(
cûí
, 
p
);

705 if–(
Àn
 -
cûí
) < 0 ) {

706 
bad
;

708 
√xt
 = 
p
 + 
cûí
 - 2;

710 
côy≥
) {

711 
CI_COMPRESSTYPE
:

712 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

713 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
)) {

714 
bad
;

716 
no
.
√g_vj
 = 1;

718 
CI_ADDRS
:

719 i‡((
go
->
√g_addr
 && go->
ﬁd_addrs
Ë|| 
no
.old_addrs

720 || 
cûí
 !
CILEN_ADDRS
) {

721 
bad
;

723 
åy
.
√g_addr
 = 1;

724 
åy
.
ﬁd_addrs
 = 1;

725 
	`GETLONG
(
l
, 
p
);

726 
cüddr1
 = 
	`ht⁄l
(
l
);

727 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

728 
åy
.
ouøddr
 = 
cüddr1
;

730 
	`GETLONG
(
l
, 
p
);

731 
cüddr2
 = 
	`ht⁄l
(
l
);

732 i‡(
cüddr2
 && 
go
->
ac˚±_ªmŸe
) {

733 
åy
.
hißddr
 = 
cüddr2
;

735 
no
.
ﬁd_addrs
 = 1;

737 
CI_ADDR
:

738 i‡(
go
->
√g_addr
 || 
no
.√g_add∏|| 
cûí
 !
CILEN_ADDR
) {

739 
bad
;

741 
åy
.
ﬁd_addrs
 = 0;

742 
	`GETLONG
(
l
, 
p
);

743 
cüddr1
 = 
	`ht⁄l
(
l
);

744 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

745 
åy
.
ouøddr
 = 
cüddr1
;

747 i‡(
åy
.
ouøddr
 != 0) {

748 
åy
.
√g_addr
 = 1;

750 
no
.
√g_addr
 = 1;

753 
p
 = 
√xt
;

757 i‡(
Àn
 != 0) {

758 
bad
;

764 i‡(
f
->
°©e
 !
LS_OPENED
) {

765 *
go
 = 
åy
;

770 
bad
:

771 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_nakci:Ñeceived bad Nak!\n"));

773 
	}
}

780 
	$ù˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

782 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

783 
u_ch¨
 
cimax¶Ÿödex
, 
ciÊag
, 
cûí
;

784 
u_sh‹t
 
cish‹t
;

785 
u32_t
 
cû⁄g
;

786 
ù˝_›ti⁄s
 
åy
;

788 
åy
 = *
go
;

794 
	#REJCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

795 i‡(
go
->
√g
 && \

796 
Àn
 >(
cûí
 = 
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
) && \

797 
p
[1] =
cûí
 && \

798 
p
[0] =
›t
) { \

799 
u32_t
 
l
; \

800 
Àn
 -
cûí
; \

801 
	`INCPTR
(2, 
p
); \

802 
	`GETLONG
(
l
, 
p
); \

803 
cû⁄g
 = 
	`ht⁄l
(
l
); \

805 i‡(
cû⁄g
 !
vÆ1
) { \

806 
bad
; \

808 i‡(
ﬁd
) { \

809 
	`GETLONG
(
l
, 
p
); \

810 
cû⁄g
 = 
	`ht⁄l
(
l
); \

812 i‡(
cû⁄g
 !
vÆ2
) { \

813 
bad
; \

816 
åy
.
√g
 = 0; \

817 }

	)

819 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿ
, 
cÊag
) \

820 i‡(
go
->
√g
 && \

821 
p
[1] =(
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
) && \

822 
Àn
 >
p
[1] && \

823 
p
[0] =
›t
) { \

824 
Àn
 -
p
[1]; \

825 
	`INCPTR
(2, 
p
); \

826 
	`GETSHORT
(
cish‹t
, 
p
); \

828 i‡(
cish‹t
 !
vÆ
) { \

829 
bad
; \

831 i‡(!
ﬁd
) { \

832 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

833 i‡(
cimax¶Ÿödex
 !
max¶Ÿ
) { \

834 
bad
; \

836 
	`GETCHAR
(
ciÊag
, 
p
); \

837 i‡(
ciÊag
 !
cÊag
) { \

838 
bad
; \

841 
åy
.
√g
 = 0; \

842 }

	)

844 
	#REJCIDNS
(
›t
, 
√g
, 
dnßddr
) \

845 i‡(
go
->
√g
 && \

846 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

847 
Àn
 >
cûí
 && \

848 
p
[0] =
›t
) { \

849 
u32_t
 
l
; \

850 
Àn
 -
cûí
; \

851 
	`INCPTR
(2, 
p
); \

852 
	`GETLONG
(
l
, 
p
); \

853 
cû⁄g
 = 
	`ht⁄l
(
l
); \

855 i‡(
cû⁄g
 !
dnßddr
) { \

856 
bad
; \

858 
åy
.
√g
 = 0; \

859 }

	)

861 
	`REJCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
,

862 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

864 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

865 
go
->
max¶Ÿödex
, go->
cÊag
);

867 
	`REJCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
, 
go
->
dnßddr
[0]);

869 
	`REJCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
, 
go
->
dnßddr
[1]);

874 i‡(
Àn
 != 0) {

875 
bad
;

880 i‡(
f
->
°©e
 !
LS_OPENED
) {

881 *
go
 = 
åy
;

885 
bad
:

886 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_rejci:Ñeceived bad Reject!\n"));

888 
	}
}

899 
	$ù˝_ªqci
(
fsm
 *
f
, 
u_ch¨
 *
öp
 ,*
Àn
 ,
ªje˘_if_dißgªe
)

901 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

902 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

903 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

904 #ifde‡
OLD_CI_ADDRS


905 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

907 
u_ch¨
 *
cù
, *
√xt
;

908 
u_sh‹t
 
cûí
, 
côy≥
;

909 
u_sh‹t
 
cish‹t
;

910 
u32_t
 
é
, 
cüddr1
;

911 #ifde‡
OLD_CI_ADDRS


912 
u32_t
 
cüddr2
;

914 
rc
 = 
CONFACK
;

915 
‹c
;

916 
u_ch¨
 *
p
;

917 
u_ch¨
 *
u˝
 = 
öp
;

918 
l
 = *
Àn
;

919 
u_ch¨
 
max¶Ÿödex
, 
cÊag
;

920 
d
;

922 
cis_ª˚ived
[
f
->
unô
] = 1;

927 
	`BZERO
(
ho
, (*ho));

932 
√xt
 = 
öp
;

933 
l
) {

934 
‹c
 = 
CONFACK
;

935 
cù
 = 
p
 = 
√xt
;

936 i‡(
l
 < 2 ||

937 
p
[1] < 2 ||

938 
p
[1] > 
l
) {

939 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: bad CIÜength!\n"));

940 
‹c
 = 
CONFREJ
;

941 
cûí
 = 
l
;

942 
l
 = 0;

943 
ídswôch
;

945 
	`GETCHAR
(
côy≥
, 
p
);

946 
	`GETCHAR
(
cûí
, 
p
);

947 
l
 -
cûí
;

948 
√xt
 +
cûí
;

950 
côy≥
) {

951 #ifde‡
OLD_CI_ADDRS


952 
CI_ADDRS
:

953 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci:Ñeceived ADDRS\n"));

954 i‡(!
ao
->
√g_addr
 ||

955 
cûí
 !
CILEN_ADDRS
) {

956 
‹c
 = 
CONFREJ
;

966 
	`GETLONG
(
é
, 
p
);

967 
cüddr1
 = 
	`ht⁄l
(
é
);

968 
	`IPCPDEBUG
((
LOG_INFO
, "hi†add∏%s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

969 i‡(
cüddr1
 !
wo
->
hißddr


970 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

971 
‹c
 = 
CONFNAK
;

972 i‡(!
ªje˘_if_dißgªe
) {

973 
	`DECPTR
((
u32_t
), 
p
);

974 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

975 
	`PUTLONG
(
é
, 
p
);

977 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

981 
‹c
 = 
CONFREJ
;

982 
wo
->
ªq_addr
 = 0;

990 
	`GETLONG
(
é
, 
p
);

991 
cüddr2
 = 
	`ht⁄l
(
é
);

992 
	`IPCPDEBUG
((
LOG_INFO
, "ou∏add∏%s\n", 
	`öë_¡ﬂ
(
cüddr2
)));

993 i‡(
cüddr2
 !
wo
->
ouøddr
) {

994 i‡(
cüddr2
 =0 || !
wo
->
ac˚±_loˇl
) {

995 
‹c
 = 
CONFNAK
;

996 i‡(!
ªje˘_if_dißgªe
) {

997 
	`DECPTR
((
u32_t
), 
p
);

998 
é
 = 
	`¡ohl
(
wo
->
ouøddr
);

999 
	`PUTLONG
(
é
, 
p
);

1002 
go
->
ouøddr
 = 
cüddr2
;

1006 
ho
->
√g_addr
 = 1;

1007 
ho
->
ﬁd_addrs
 = 1;

1008 
ho
->
hißddr
 = 
cüddr1
;

1009 
ho
->
ouøddr
 = 
cüddr2
;

1013 
CI_ADDR
:

1014 i‡(!
ao
->
√g_addr
) {

1015 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDRÇotállowed\n"));

1016 
‹c
 = 
CONFREJ
;

1018 } i‡(
cûí
 !
CILEN_ADDR
) {

1019 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDR badÜen\n"));

1020 
‹c
 = 
CONFREJ
;

1030 
	`GETLONG
(
é
, 
p
);

1031 
cüddr1
 = 
	`ht⁄l
(
é
);

1032 i‡(
cüddr1
 !
wo
->
hißddr


1033 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1034 
‹c
 = 
CONFNAK
;

1035 i‡(!
ªje˘_if_dißgªe
) {

1036 
	`DECPTR
((
u32_t
), 
p
);

1037 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1038 
	`PUTLONG
(
é
, 
p
);

1040 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nak ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1041 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1045 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1046 
‹c
 = 
CONFREJ
;

1047 
wo
->
ªq_addr
 = 0;

1051 
ho
->
√g_addr
 = 1;

1052 
ho
->
hißddr
 = 
cüddr1
;

1053 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1056 
CI_MS_DNS1
:

1057 
CI_MS_DNS2
:

1059 
d
 = 
côy≥
 =
CI_MS_DNS2
;

1062 i‡(
ao
->
dnßddr
[
d
] == 0 ||

1063 
cûí
 !
CILEN_ADDR
) {

1064 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög DNS%d Reque°\n", 
d
+1));

1065 
‹c
 = 
CONFREJ
;

1068 
	`GETLONG
(
é
, 
p
);

1069 i‡(
	`ht⁄l
(
é
Ë!
ao
->
dnßddr
[
d
]) {

1070 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Naking DNS%d Request %d\n",

1071 
d
+1, 
	`öë_¡ﬂ
(
é
)));

1072 
	`DECPTR
((
u32_t
), 
p
);

1073 
é
 = 
	`¡ohl
(
ao
->
dnßddr
[
d
]);

1074 
	`PUTLONG
(
é
, 
p
);

1075 
‹c
 = 
CONFNAK
;

1077 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived DNS%d Reque°\n", 
d
+1));

1080 
CI_MS_WINS1
:

1081 
CI_MS_WINS2
:

1083 
d
 = 
côy≥
 =
CI_MS_WINS2
;

1084 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived WINS%d Reque°\n", 
d
+1));

1087 i‡(
ao
->
wößddr
[
d
] == 0 ||

1088 
cûí
 !
CILEN_ADDR
) {

1089 
‹c
 = 
CONFREJ
;

1092 
	`GETLONG
(
é
, 
p
);

1093 i‡(
	`ht⁄l
(
é
Ë!
ao
->
wößddr
[
d
]) {

1094 
	`DECPTR
((
u32_t
), 
p
);

1095 
é
 = 
	`¡ohl
(
ao
->
wößddr
[
d
]);

1096 
	`PUTLONG
(
é
, 
p
);

1097 
‹c
 = 
CONFNAK
;

1101 
CI_COMPRESSTYPE
:

1102 i‡(!
ao
->
√g_vj
) {

1103 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Rejecting COMPRESSTYPEÇotállowed\n"));

1104 
‹c
 = 
CONFREJ
;

1106 } i‡(
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
) {

1107 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPEÜí=%d\n", 
cûí
));

1108 
‹c
 = 
CONFREJ
;

1111 
	`GETSHORT
(
cish‹t
, 
p
);

1113 i‡(!(
cish‹t
 =
IPCP_VJ_COMP
 ||

1114 (
cish‹t
 =
IPCP_VJ_COMP_OLD
 && 
cûí
 =
CILEN_COMPRESS
))) {

1115 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPE %d\n", 
cish‹t
));

1116 
‹c
 = 
CONFREJ
;

1120 
ho
->
√g_vj
 = 1;

1121 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1122 i‡(
cûí
 =
CILEN_VJ
) {

1123 
	`GETCHAR
(
max¶Ÿödex
, 
p
);

1124 i‡(
max¶Ÿödex
 > 
ao
->maxslotindex) {

1125 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ max slŸ %d\n", 
max¶Ÿödex
));

1126 
‹c
 = 
CONFNAK
;

1127 i‡(!
ªje˘_if_dißgªe
) {

1128 
	`DECPTR
(1, 
p
);

1129 
	`PUTCHAR
(
ao
->
max¶Ÿödex
, 
p
);

1132 
	`GETCHAR
(
cÊag
, 
p
);

1133 i‡(
cÊag
 && !
ao
->cflag) {

1134 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ cÊag %d\n", 
cÊag
));

1135 
‹c
 = 
CONFNAK
;

1136 i‡(!
ªje˘_if_dißgªe
) {

1137 
	`DECPTR
(1, 
p
);

1138 
	`PUTCHAR
(
wo
->
cÊag
, 
p
);

1141 
ho
->
max¶Ÿödex
 = maxslotindex;

1142 
ho
->
cÊag
 = cflag;

1144 
ho
->
ﬁd_vj
 = 1;

1145 
ho
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

1146 
ho
->
cÊag
 = 1;

1148 
	`IPCPDEBUG
((
LOG_INFO
,

1150 
ho
->
vj_¥Ÿocﬁ
, ho->
ﬁd_vj
, ho->
max¶Ÿödex
, ho->
cÊag
));

1154 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög unknow¿CIÅy≥ %d\n", 
côy≥
));

1155 
‹c
 = 
CONFREJ
;

1159 
ídswôch
:

1160 i‡(
‹c
 =
CONFACK
 &&

1161 
rc
 !
CONFACK
) {

1165 i‡(
‹c
 =
CONFNAK
) {

1166 i‡(
ªje˘_if_dißgªe
) {

1167 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RejectingÅoo manyÇaks\n"));

1168 
‹c
 = 
CONFREJ
;

1170 i‡(
rc
 =
CONFREJ
) {

1173 i‡(
rc
 =
CONFACK
) {

1174 
rc
 = 
CONFNAK
;

1175 
u˝
 = 
öp
;

1180 i‡(
‹c
 =
CONFREJ
 &&

1181 
rc
 !
CONFREJ
) {

1182 
rc
 = 
CONFREJ
;

1183 
u˝
 = 
öp
;

1187 i‡(
u˝
 !
cù
) {

1188 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1192 
	`INCPTR
(
cûí
, 
u˝
);

1202 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_addr
 &&

1203 
wo
->
ªq_addr
 && !
ªje˘_if_dißgªe
) {

1204 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RequestingÖeeráddress\n"));

1205 i‡(
rc
 =
CONFACK
) {

1206 
rc
 = 
CONFNAK
;

1207 
u˝
 = 
öp
;

1208 
wo
->
ªq_addr
 = 0;

1210 
	`PUTCHAR
(
CI_ADDR
, 
u˝
);

1211 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
);

1212 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1213 
	`PUTLONG
(
é
, 
u˝
);

1216 *
Àn
 = ()(
u˝
 - 
öp
);

1217 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñëu∫ög C⁄figuª-%s\n", 
	`CODENAME
(
rc
)));

1218  (
rc
);

1219 
	}
}

1228 
	$ù_check_›ti⁄s
(
u_l⁄g
 
loˇlAddr
)

1230 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1236 i‡(
wo
->
ouøddr
 =0 && !
µp_£âögs
.
dißbÀ_deÁu…ù
) {

1237 
wo
->
ac˚±_loˇl
 = 1;

1238 
wo
->
ouøddr
 = 
	`ht⁄l
(
loˇlAddr
);

1240 
	}
}

1250 
	$ù˝_up
(
fsm
 *
f
)

1252 
u32_t
 
mask
;

1253 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1254 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1255 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1257 
	`≈_up
(
f
->
unô
, 
PPP_IP
);

1258 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: up\n"));

1263 i‡(!
ho
->
√g_addr
) {

1264 
ho
->
hißddr
 = 
wo
->hisaddr;

1267 i‡(
ho
->
hißddr
 == 0) {

1268 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÑemote IPáddress\n"));

1269 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÑemote IPáddress");

1272 i‡(
go
->
ouøddr
 == 0) {

1273 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÜocal IPáddress\n"));

1274 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal IPáddress");

1278 i‡(
µp_£âögs
.
u£≥îdns
 && (
go
->
dnßddr
[0] || go->dnsaddr[1])) {

1285 i‡(!
	`auth_ù_addr
(
f
->
unô
, 
ho
->
hißddr
)) {

1286 
	`IPCPDEBUG
((
LOG_ERR
, "Peer isÇotáuthorizedÅo useÑemoteáddress %s\n",

1287 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1288 
	`ù˝_˛o£
(
f
->
unô
, "UnauthorizedÑemote IPáddress");

1293 
	`sifvjcomp
(
f
->
unô
, 
ho
->
√g_vj
, ho->
cÊag
, ho->
max¶Ÿödex
);

1298 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1300 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
, go->
dnßddr
[0], go->dnsaddr[1])) {

1301 
	`IPCPDEBUG
((
LOG_WARNING
, "sifaddr failed\n"));

1302 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1307 i‡(!
	`sifup
(
f
->
unô
)) {

1308 
	`IPCPDEBUG
((
LOG_WARNING
, "sifup failed\n"));

1309 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1313 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1316 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
) {

1317 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
)) {

1318 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1322 
	`IPCPDEBUG
((
LOG_NOTICE
, "loˇ» IPáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
ouøddr
)));

1323 
	`IPCPDEBUG
((
LOG_NOTICE
, "ªmŸêIPáddªs†%s\n", 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1324 i‡(
go
->
dnßddr
[0]) {

1325 
	`IPCPDEBUG
((
LOG_NOTICE
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[0])));

1327 i‡(
go
->
dnßddr
[1]) {

1328 
	`IPCPDEBUG
((
LOG_NOTICE
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[1])));

1330 
	}
}

1340 
	$ù˝_down
(
fsm
 *
f
)

1342 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: down\n"));

1343 
	`≈_down
(
f
->
unô
, 
PPP_IP
);

1344 
	`sifvjcomp
(
f
->
unô
, 0, 0, 0);

1346 
	`sifdown
(
f
->
unô
);

1347 
	`ù˝_˛ór_addrs
(
f
->
unô
);

1348 
	}
}

1355 
	$ù˝_˛ór_addrs
(
unô
)

1357 
u32_t
 
ouøddr
, 
hißddr
;

1359 
ouøddr
 = 
ù˝_gŸ›ti⁄s
[
unô
].ouraddr;

1360 
hißddr
 = 
ù˝_his›ti⁄s
[
unô
].hisaddr;

1361 i‡(
deÁu…_rouã_£t
[
unô
]) {

1362 
	`cifdeÁu…rouã
(
unô
, 
ouøddr
, 
hißddr
);

1363 
deÁu…_rouã_£t
[
unô
] = 0;

1365 
	`ciÁddr
(
unô
, 
ouøddr
, 
hißddr
);

1366 
	}
}

1373 
	$ù˝_föished
(
fsm
 *
f
)

1375 
	`≈_föished
(
f
->
unô
, 
PPP_IP
);

1376 
	}
}

1380 
ù˝_¥öçkt
(
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1382 
	`LWIP_UNUSED_ARG
(
p
);

1383 
	`LWIP_UNUSED_ARG
(
∂í
);

1384 
	`LWIP_UNUSED_ARG
(
¥öãr
);

1385 
	`LWIP_UNUSED_ARG
(
¨g
);

1387 
	}
}

1394 
	#IP_HDRLEN
 20

	)

1395 
	#IP_OFFMASK
 0x1fff

	)

1396 
	#IPPROTO_TCP
 6

	)

1397 
	#TCP_HDRLEN
 20

	)

1398 
	#TH_FIN
 0x01

	)

1405 
	#√t_sh‹t
(
x
Ë(((x)[0] << 8Ë+ (x)[1])

	)

1406 
	#gë_ùhl
(
x
Ë(((*)(x))[0] & 0xF)

	)

1407 
	#gë_ùoff
(
x
Ë
	`√t_sh‹t
((*)(xË+ 6)

	)

1408 
	#gë_ù¥Ÿo
(
x
Ë(((*)(x))[9])

	)

1409 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

1410 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

1413 
	$ù_a˘ive_pkt
(
u_ch¨
 *
pkt
, 
Àn
)

1415 
u_ch¨
 *
t˝
;

1416 
hÀn
;

1418 
Àn
 -
PPP_HDRLEN
;

1419 
pkt
 +
PPP_HDRLEN
;

1420 i‡(
Àn
 < 
IP_HDRLEN
) {

1423 i‡((
	`gë_ùoff
(
pkt
Ë& 
IP_OFFMASK
) != 0) {

1426 i‡(
	`gë_ù¥Ÿo
(
pkt
Ë!
IPPROTO_TCP
) {

1429 
hÀn
 = 
	`gë_ùhl
(
pkt
) * 4;

1430 i‡(
Àn
 < 
hÀn
 + 
TCP_HDRLEN
) {

1433 
t˝
 = 
pkt
 + 
hÀn
;

1434 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
hÀn
 + 
	`gë_t˝off
(tcp) * 4) {

1438 
	}
}

	@net/lwip/netif/ppp/ipcp.h

55 #i‚de‡
IPCP_H


56 
	#IPCP_H


	)

64 
	#CI_ADDRS
 1

	)

65 
	#CI_COMPRESSTYPE
 2

	)

66 
	#CI_ADDR
 3

	)

68 
	#CI_MS_WINS1
 128

	)

69 
	#CI_MS_DNS1
 129

	)

70 
	#CI_MS_WINS2
 130

	)

71 
	#CI_MS_DNS2
 131

	)

73 
	#IPCP_VJMODE_OLD
 1

	)

74 
	#IPCP_VJMODE_RFC1172
 2

	)

75 
	#IPCP_VJMODE_RFC1332
 3

	)

78 
	#IPCP_VJ_COMP
 0x002d

	)

79 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

87 
	sù˝_›ti⁄s
 {

88 
u_öt
 
	m√g_addr
 : 1;

89 
u_öt
 
	mﬁd_addrs
 : 1;

90 
u_öt
 
	mªq_addr
 : 1;

91 
u_öt
 
	mdeÁu…_rouã
 : 1;

92 
u_öt
 
	m¥oxy_¨p
 : 1;

93 
u_öt
 
	m√g_vj
 : 1;

94 
u_öt
 
	mﬁd_vj
 : 1;

95 
u_öt
 
	mac˚±_loˇl
 : 1;

96 
u_öt
 
	mac˚±_ªmŸe
 : 1;

97 
u_öt
 
	mªq_dns1
 : 1;

98 
u_öt
 
	mªq_dns2
 : 1;

99 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

100 
u_ch¨
 
	mmax¶Ÿödex
;

101 
u_ch¨
 
	mcÊag
;

102 
u32_t
 
	mouøddr
, 
	mhißddr
;

103 
u32_t
 
	mdnßddr
[2];

104 
u32_t
 
	mwößddr
[2];

105 } 
	tù˝_›ti⁄s
;

112 
fsm
 
ù˝_fsm
[];

113 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

114 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

115 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

116 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

118 
¥Ÿít
 
ù˝_¥Ÿít
;

	@net/lwip/netif/ppp/lcp.c

55 
	~"lwù/›t.h
"

57 #i‡
PPP_SUPPORT


59 
	~"µp.h
"

60 
	~"µpdebug.h
"

62 
	~"fsm.h
"

63 
	~"ch≠.h
"

64 
	~"magic.h
"

65 
	~"auth.h
"

66 
	~"l˝.h
"

68 
	~<°rög.h
>

70 #i‡
PPPOE_SUPPORT


71 
	~"√tif/µp_€.h
"

73 
	#PPPOE_MAXMTU
 
PPP_MAXMRU


	)

83 
	#CILEN_VOID
 2

	)

84 
	#CILEN_CHAR
 3

	)

85 
	#CILEN_SHORT
 4

	)

86 
	#CILEN_CHAP
 5

	)

87 
	#CILEN_LONG
 6

	)

88 
	#CILEN_LQR
 8

	)

89 
	#CILEN_CBCP
 3

	)

98 
l˝_ª£tci
 (
fsm
*);

99 
l˝_cûí
 (
fsm
*);

100 
l˝_addci
 (
fsm
*, 
u_ch¨
*, *);

101 
l˝_ackci
 (
fsm
*, 
u_ch¨
*, );

102 
l˝_«kci
 (
fsm
*, 
u_ch¨
*, );

103 
l˝_ªjci
 (
fsm
*, 
u_ch¨
*, );

104 
l˝_ªqci
 (
fsm
*, 
u_ch¨
*, *, );

105 
l˝_up
 (
fsm
*);

106 
l˝_down
 (
fsm
*);

107 
l˝_°¨tög
 (
fsm
*);

108 
l˝_föished
 (
fsm
*);

109 
l˝_extcode
 (
fsm
*, , 
u_ch¨
, u_char*, );

111 
l˝_ΩrŸªj
 (
fsm
*, 
u_ch¨
*, );

116 
l˝_echo_lowîup
 ();

117 
l˝_echo_lowîdown
 ();

118 
L˝EchoTimeout
 (*);

119 
l˝_ª˚ived_echo_ª∂y
 (
fsm
*, , 
u_ch¨
*, );

120 
L˝SídEchoReque°
 (
fsm
*);

121 
L˝LökFaûuª
 (
fsm
*);

122 
L˝EchoCheck
 (
fsm
*);

128 
l˝_öput
 (, 
u_ch¨
 *, );

129 
l˝_¥Ÿªj
 ();

131 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : (xË=
CONFNAK
 ? "NAK" : "REJ")

	)

138 
LökPha£
 
	gl˝_pha£
[
NUM_PPP
];

139 
l˝_›ti⁄s
 
	gl˝_w™t›ti⁄s
[
NUM_PPP
];

140 
l˝_›ti⁄s
 
	gl˝_gŸ›ti⁄s
[
NUM_PPP
];

141 
l˝_›ti⁄s
 
	gl˝_Ælow›ti⁄s
[
NUM_PPP
];

142 
l˝_›ti⁄s
 
	gl˝_his›ti⁄s
[
NUM_PPP
];

143 
ext_accm
 
	gxmô_accm
[
NUM_PPP
];

150 
fsm
 
	gl˝_fsm
[
NUM_PPP
];

151 
u_öt
 
	gl˝_echo_öãrvÆ
 = 
LCP_ECHOINTERVAL
;

152 
u_öt
 
	gl˝_echo_Áûs
 = 
LCP_MAXECHOFAILS
;

153 
u32_t
 
	gl˝_echos_≥ndög
 = 0;

154 
u32_t
 
	gl˝_echo_numbî
 = 0;

155 
u32_t
 
	gl˝_echo_timî_ru¬ög
 = 0;

157 
u_ch¨
 
	g«k_buf„r
[
PPP_MRU
];

159 
fsm_ˇŒbacks
 
	gl˝_ˇŒbacks
 = {

160 
l˝_ª£tci
,

161 
l˝_cûí
,

162 
l˝_addci
,

163 
l˝_ackci
,

164 
l˝_«kci
,

165 
l˝_ªjci
,

166 
l˝_ªqci
,

167 
l˝_up
,

168 
l˝_down
,

169 
l˝_°¨tög
,

170 
l˝_föished
,

171 
NULL
,

172 
NULL
,

173 
l˝_extcode
,

177 
¥Ÿít
 
	gl˝_¥Ÿít
 = {

178 
PPP_LCP
,

179 
l˝_öô
,

180 
l˝_öput
,

181 
l˝_¥Ÿªj
,

182 
l˝_lowîup
,

183 
l˝_lowîdown
,

184 
l˝_›í
,

185 
l˝_˛o£
,

187 
l˝_¥öçkt
,

188 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL


199 
	gl˝_lo›backÁû
 = 
DEFLOOPBACKFAIL
;

210 
	$l˝_öô
(
unô
)

212 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

213 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

214 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

216 
f
->
unô
 = unit;

217 
f
->
¥Ÿocﬁ
 = 
PPP_LCP
;

218 
f
->
ˇŒbacks
 = &
l˝_ˇŒbacks
;

220 
	`fsm_öô
(
f
);

222 
wo
->
∑ssive
 = 0;

223 
wo
->
sûít
 = 0;

224 
wo
->
ª°¨t
 = 0;

225 
wo
->
√g_mru
 = 1;

226 
wo
->
mru
 = 
PPP_DEFMRU
;

227 
wo
->
√g_asyncm≠
 = 1;

228 
wo
->
asyncm≠
 = 0x00000000l;

229 
wo
->
√g_ch≠
 = 0;

230 
wo
->
√g_u∑p
 = 0;

231 
wo
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

232 
wo
->
√g_magi˙umbî
 = 1;

233 
wo
->
√g_pcom¥essi⁄
 = 1;

234 
wo
->
√g_accom¥essi⁄
 = 1;

235 
wo
->
√g_lqr
 = 0;

236 
wo
->
√g_cb˝
 = 0;

238 
ao
->
√g_mru
 = 1;

239 
ao
->
mru
 = 
PPP_MAXMRU
;

240 
ao
->
√g_asyncm≠
 = 1;

241 
ao
->
asyncm≠
 = 0x00000000l;

242 
ao
->
√g_ch≠
 = (
CHAP_SUPPORT
 != 0);

243 
ao
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

244 
ao
->
√g_u∑p
 = (
PAP_SUPPORT
 != 0);

245 
ao
->
√g_magi˙umbî
 = 1;

246 
ao
->
√g_pcom¥essi⁄
 = 1;

247 
ao
->
√g_accom¥essi⁄
 = 1;

248 
ao
->
√g_lqr
 = 0;

249 
ao
->
√g_cb˝
 = (
CBCP_SUPPORT
 != 0);

255 
	`mem£t
(
xmô_accm
[
unô
], 0, (xmit_accm[0]));

256 
xmô_accm
[
unô
][15] = 0x60;

257 
xmô_accm
[
unô
][0] = (
u_ch¨
)((
ao
->
asyncm≠
 & 0xFF));

258 
xmô_accm
[
unô
][1] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 8) & 0xFF);

259 
xmô_accm
[
unô
][2] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 16) & 0xFF);

260 
xmô_accm
[
unô
][3] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 24) & 0xFF);

261 
	`LCPDEBUG
((
LOG_INFO
, "lcp_init: xmit_accm=%X %X %X %X\n",

262 
xmô_accm
[
unô
][0],

263 
xmô_accm
[
unô
][1],

264 
xmô_accm
[
unô
][2],

265 
xmô_accm
[
unô
][3]));

267 
l˝_pha£
[
unô
] = 
PHASE_INITIALIZE
;

268 
	}
}

275 
	$l˝_›í
(
unô
)

277 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

278 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

280 
f
->
Êags
 = 0;

281 i‡(
wo
->
∑ssive
) {

282 
f
->
Êags
 |
OPT_PASSIVE
;

284 i‡(
wo
->
sûít
) {

285 
f
->
Êags
 |
OPT_SILENT
;

287 
	`fsm_›í
(
f
);

289 
l˝_pha£
[
unô
] = 
PHASE_ESTABLISH
;

290 
	}
}

297 
	$l˝_˛o£
(
unô
, *
ªas⁄
)

299 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

301 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

302 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

304 i‡(
f
->
°©e
 =
LS_STOPPED
 && f->
Êags
 & (
OPT_PASSIVE
|
OPT_SILENT
)) {

311 
f
->
°©e
 = 
LS_CLOSED
;

312 
	`l˝_föished
(
f
);

314 
	`fsm_˛o£
(&
l˝_fsm
[
unô
], 
ªas⁄
);

316 
	}
}

323 
	$l˝_lowîup
(
unô
)

325 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

332 
	`µp_£t_xaccm
(
unô
, &
xmô_accm
[unit]);

333 
	`µp_£nd_c⁄fig
(
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

334 
	`µp_ªcv_c⁄fig
(
unô
, 
PPP_MRU
, 0x00000000l,

335 
wo
->
√g_pcom¥essi⁄
, wo->
√g_accom¥essi⁄
);

336 
≥î_mru
[
unô
] = 
PPP_MRU
;

337 
l˝_Ælow›ti⁄s
[
unô
].
asyncm≠
 = (
u_l⁄g
)
xmô_accm
[unit][0]

338 | ((
u_l⁄g
)
xmô_accm
[
unô
][1] << 8)

339 | ((
u_l⁄g
)
xmô_accm
[
unô
][2] << 16)

340 | ((
u_l⁄g
)
xmô_accm
[
unô
][3] << 24);

341 
	`LCPDEBUG
((
LOG_INFO
, "lcp_lowerup:ásyncmap=%X %X %X %X\n",

342 
xmô_accm
[
unô
][3],

343 
xmô_accm
[
unô
][2],

344 
xmô_accm
[
unô
][1],

345 
xmô_accm
[
unô
][0]));

347 
	`fsm_lowîup
(&
l˝_fsm
[
unô
]);

348 
	}
}

355 
	$l˝_lowîdown
(
unô
)

357 
	`fsm_lowîdown
(&
l˝_fsm
[
unô
]);

358 
	}
}

364 
	$l˝_•rŸªj
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

371 
	`fsm_sd©a
(&
l˝_fsm
[
unô
], 
PROTREJ
, ++l˝_fsm[unô].
id
, 
p
, 
Àn
);

372 
	}
}

383 
	$l˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

385 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

387 
	`fsm_öput
(
f
, 
p
, 
Àn
);

388 
	}
}

395 
	$l˝_extcode
(
fsm
 *
f
, 
code
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

397 
u_ch¨
 *
magp
;

399  
code
 ){

400 
PROTREJ
:

401 
	`l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
);

404 
ECHOREQ
:

405 i‡(
f
->
°©e
 !
LS_OPENED
) {

408 
	`LCPDEBUG
((
LOG_INFO
, "l˝: Echo-Reque°, Rcvd id %d\n", 
id
));

409 
magp
 = 
öp
;

410 
	`PUTLONG
(
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
, 
magp
);

411 
	`fsm_sd©a
(
f
, 
ECHOREP
, 
id
, 
öp
, 
Àn
);

414 
ECHOREP
:

415 
	`l˝_ª˚ived_echo_ª∂y
(
f
, 
id
, 
öp
, 
Àn
);

418 
DISCREQ
:

425 
	}
}

434 
	$l˝_ΩrŸªj
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

436 
i
;

437 
¥Ÿít
 *
¥Ÿp
;

438 
u_sh‹t
 
¥Ÿ
;

440 i‡(
Àn
 <  (
u_sh‹t
)) {

441 
	`LCPDEBUG
((
LOG_INFO
, "lcp_rprotrej: Rcvd short Protocol-RejectÖacket!\n"));

445 
	`GETSHORT
(
¥Ÿ
, 
öp
);

447 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ΩrŸªj: Rcvd PrŸocﬁ-Reje˘Öackë f‹ %x!\n", 
¥Ÿ
));

453 if–
f
->
°©e
 !
LS_OPENED
 ) {

454 
	`LCPDEBUG
((
LOG_INFO
, "PrŸocﬁ-Reje˘ disˇrded: LCP i¿°©ê%d\n", 
f
->
°©e
));

461 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

462 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =
¥Ÿ
 &&ÖrŸp->
íabÀd_Êag
) {

463 (*
¥Ÿp
->
¥Ÿªj
)(
f
->
unô
);

468 
	`LCPDEBUG
((
LOG_WARNING
, "PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ 0x%x\n", 
¥Ÿ
));

469 
	}
}

476 
	$l˝_¥Ÿªj
(
unô
)

478 
	`LWIP_UNUSED_ARG
(
unô
);

482 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_protrej: Received Protocol-Reject for LCP!\n"));

483 
	`fsm_¥Ÿªje˘
(&
l˝_fsm
[
unô
]);

484 
	}
}

491 
	$l˝_ª£tci
(
fsm
 *
f
)

493 
l˝_w™t›ti⁄s
[
f
->
unô
].
magi˙umbî
 = 
	`magic
();

494 
l˝_w™t›ti⁄s
[
f
->
unô
].
numlo›s
 = 0;

495 
l˝_gŸ›ti⁄s
[
f
->
unô
] = 
l˝_w™t›ti⁄s
[f->unit];

496 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

497 
	`auth_ª£t
(
f
->
unô
);

498 
	}
}

504 
	$l˝_cûí
(
fsm
 *
f
)

506 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

508 
	#LENCIVOID
(
√g
Ë(“egË? 
CILEN_VOID
 : 0)

	)

509 
	#LENCICHAP
(
√g
Ë(“egË? 
CILEN_CHAP
 : 0)

	)

510 
	#LENCISHORT
(
√g
Ë(“egË? 
CILEN_SHORT
 : 0)

	)

511 
	#LENCILONG
(
√g
Ë(“egË? 
CILEN_LONG
 : 0)

	)

512 
	#LENCILQR
(
√g
Ë(“egË? 
CILEN_LQR
: 0)

	)

513 
	#LENCICBCP
(
√g
Ë(“egË? 
CILEN_CBCP
: 0)

	)

518  (
	`LENCISHORT
(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) +

519 
	`LENCILONG
(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) +

520 
	`LENCICHAP
(
go
->
√g_ch≠
) +

521 
	`LENCISHORT
(!
go
->
√g_ch≠
 && go->
√g_u∑p
) +

522 
	`LENCILQR
(
go
->
√g_lqr
) +

523 
	`LENCICBCP
(
go
->
√g_cb˝
) +

524 
	`LENCILONG
(
go
->
√g_magi˙umbî
) +

525 
	`LENCIVOID
(
go
->
√g_pcom¥essi⁄
) +

526 
	`LENCIVOID
(
go
->
√g_accom¥essi⁄
));

527 
	}
}

534 
	$l˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

536 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

537 
u_ch¨
 *
°¨t_u˝
 = 
u˝
;

539 
	#ADDCIVOID
(
›t
, 
√g
) \

540 i‡(
√g
) { \

541 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: o±=%d\n", 
›t
)); \

542 
	`PUTCHAR
(
›t
, 
u˝
); \

543 
	`PUTCHAR
(
CILEN_VOID
, 
u˝
); \

544 }

	)

545 
	#ADDCISHORT
(
›t
, 
√g
, 
vÆ
) \

546 i‡(
√g
) { \

547 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: INT o±=%d %X\n", 
›t
, 
vÆ
)); \

548 
	`PUTCHAR
(
›t
, 
u˝
); \

549 
	`PUTCHAR
(
CILEN_SHORT
, 
u˝
); \

550 
	`PUTSHORT
(
vÆ
, 
u˝
); \

551 }

	)

552 
	#ADDCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

553 i‡(
√g
) { \

554 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAP o±=%d %X\n", 
›t
, 
vÆ
)); \

555 
	`PUTCHAR
(
›t
, 
u˝
); \

556 
	`PUTCHAR
(
CILEN_CHAP
, 
u˝
); \

557 
	`PUTSHORT
(
vÆ
, 
u˝
); \

558 
	`PUTCHAR
(
dige°
, 
u˝
); \

559 }

	)

560 
	#ADDCILONG
(
›t
, 
√g
, 
vÆ
) \

561 i‡(
√g
) { \

562 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: L o±=%d %lX\n", 
›t
, 
vÆ
)); \

563 
	`PUTCHAR
(
›t
, 
u˝
); \

564 
	`PUTCHAR
(
CILEN_LONG
, 
u˝
); \

565 
	`PUTLONG
(
vÆ
, 
u˝
); \

566 }

	)

567 
	#ADDCILQR
(
›t
, 
√g
, 
vÆ
) \

568 i‡(
√g
) { \

569 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: LQR o±=%d %lX\n", 
›t
, 
vÆ
)); \

570 
	`PUTCHAR
(
›t
, 
u˝
); \

571 
	`PUTCHAR
(
CILEN_LQR
, 
u˝
); \

572 
	`PUTSHORT
(
PPP_LQR
, 
u˝
); \

573 
	`PUTLONG
(
vÆ
, 
u˝
); \

574 }

	)

575 
	#ADDCICHAR
(
›t
, 
√g
, 
vÆ
) \

576 i‡(
√g
) { \

577 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAR o±=%d %X '%z'\n", 
›t
, 
vÆ
, val)); \

578 
	`PUTCHAR
(
›t
, 
u˝
); \

579 
	`PUTCHAR
(
CILEN_CHAR
, 
u˝
); \

580 
	`PUTCHAR
(
vÆ
, 
u˝
); \

581 }

	)

583 
	`ADDCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

584 
	`ADDCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

585 
	`ADDCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

586 
	`ADDCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

587 
	`ADDCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

588 
	`ADDCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

589 
	`ADDCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

590 
	`ADDCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

591 
	`ADDCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

593 i‡(
u˝
 - 
°¨t_u˝
 !*
À≈
) {

595 
	`LCPDEBUG
((
LOG_ERR
, "Bug inÜcp_addci: wrongÜength\n"));

597 
	}
}

609 
	$l˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

611 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

612 
u_ch¨
 
cûí
, 
côy≥
, 
cich¨
;

613 
u_sh‹t
 
cish‹t
;

614 
u32_t
 
cû⁄g
;

621 
	#ACKCIVOID
(
›t
, 
√g
) \

622 i‡(
√g
) { \

623 i‡((
Àn
 -
CILEN_VOID
) < 0) \

624 
bad
; \

625 
	`GETCHAR
(
côy≥
, 
p
); \

626 
	`GETCHAR
(
cûí
, 
p
); \

627 i‡(
cûí
 !
CILEN_VOID
 || 
côy≥
 !
›t
) \

628 
bad
; \

629 }

	)

630 
	#ACKCISHORT
(
›t
, 
√g
, 
vÆ
) \

631 i‡(
√g
) { \

632 i‡((
Àn
 -
CILEN_SHORT
) < 0) \

633 
bad
; \

634 
	`GETCHAR
(
côy≥
, 
p
); \

635 
	`GETCHAR
(
cûí
, 
p
); \

636 i‡(
cûí
 !
CILEN_SHORT
 || 
côy≥
 !
›t
) \

637 
bad
; \

638 
	`GETSHORT
(
cish‹t
, 
p
); \

639 i‡(
cish‹t
 !
vÆ
) \

640 
bad
; \

641 }

	)

642 
	#ACKCICHAR
(
›t
, 
√g
, 
vÆ
) \

643 i‡(
√g
) { \

644 i‡((
Àn
 -
CILEN_CHAR
) < 0) \

645 
bad
; \

646 
	`GETCHAR
(
côy≥
, 
p
); \

647 
	`GETCHAR
(
cûí
, 
p
); \

648 i‡(
cûí
 !
CILEN_CHAR
 || 
côy≥
 !
›t
) \

649 
bad
; \

650 
	`GETCHAR
(
cich¨
, 
p
); \

651 i‡(
cich¨
 !
vÆ
) \

652 
bad
; \

653 }

	)

654 
	#ACKCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

655 i‡(
√g
) { \

656 i‡((
Àn
 -
CILEN_CHAP
) < 0) \

657 
bad
; \

658 
	`GETCHAR
(
côy≥
, 
p
); \

659 
	`GETCHAR
(
cûí
, 
p
); \

660 i‡(
cûí
 !
CILEN_CHAP
 || 
côy≥
 !
›t
) \

661 
bad
; \

662 
	`GETSHORT
(
cish‹t
, 
p
); \

663 i‡(
cish‹t
 !
vÆ
) \

664 
bad
; \

665 
	`GETCHAR
(
cich¨
, 
p
); \

666 i‡(
cich¨
 !
dige°
) \

667 
bad
; \

668 }

	)

669 
	#ACKCILONG
(
›t
, 
√g
, 
vÆ
) \

670 i‡(
√g
) { \

671 i‡((
Àn
 -
CILEN_LONG
) < 0) \

672 
bad
; \

673 
	`GETCHAR
(
côy≥
, 
p
); \

674 
	`GETCHAR
(
cûí
, 
p
); \

675 i‡(
cûí
 !
CILEN_LONG
 || 
côy≥
 !
›t
) \

676 
bad
; \

677 
	`GETLONG
(
cû⁄g
, 
p
); \

678 i‡(
cû⁄g
 !
vÆ
) \

679 
bad
; \

680 }

	)

681 
	#ACKCILQR
(
›t
, 
√g
, 
vÆ
) \

682 i‡(
√g
) { \

683 i‡((
Àn
 -
CILEN_LQR
) < 0) \

684 
bad
; \

685 
	`GETCHAR
(
côy≥
, 
p
); \

686 
	`GETCHAR
(
cûí
, 
p
); \

687 i‡(
cûí
 !
CILEN_LQR
 || 
côy≥
 !
›t
) \

688 
bad
; \

689 
	`GETSHORT
(
cish‹t
, 
p
); \

690 i‡(
cish‹t
 !
PPP_LQR
) \

691 
bad
; \

692 
	`GETLONG
(
cû⁄g
, 
p
); \

693 i‡(
cû⁄g
 !
vÆ
) \

694 
bad
; \

695 }

	)

697 
	`ACKCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

698 
	`ACKCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

699 
	`ACKCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

700 
	`ACKCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

701 
	`ACKCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

702 
	`ACKCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

703 
	`ACKCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

704 
	`ACKCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

705 
	`ACKCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

710 i‡(
Àn
 != 0) {

711 
bad
;

713 
	`LCPDEBUG
((
LOG_INFO
, "lcp_acki: Ack\n"));

715 
bad
:

716 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_acki:Ñeceived bad Ack!\n"));

718 
	}
}

731 
	$l˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

733 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

734 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

735 
u_ch¨
 
côy≥
, 
cich¨
, *
√xt
;

736 
u_sh‹t
 
cish‹t
;

737 
u32_t
 
cû⁄g
;

738 
l˝_›ti⁄s
 
no
;

739 
l˝_›ti⁄s
 
åy
;

740 
lo›ed_back
 = 0;

741 
cûí
;

743 
	`BZERO
(&
no
, (no));

744 
åy
 = *
go
;

751 
	#NAKCIVOID
(
›t
, 
√g
, 
code
) \

752 i‡(
go
->
√g
 && \

753 
Àn
 >
CILEN_VOID
 && \

754 
p
[1] =
CILEN_VOID
 && \

755 
p
[0] =
›t
) { \

756 
Àn
 -
CILEN_VOID
; \

757 
	`INCPTR
(
CILEN_VOID
, 
p
); \

758 
no
.
√g
 = 1; \

759 
code
 \

760 }

	)

761 
	#NAKCICHAP
(
›t
, 
√g
, 
code
) \

762 i‡(
go
->
√g
 && \

763 
Àn
 >
CILEN_CHAP
 && \

764 
p
[1] =
CILEN_CHAP
 && \

765 
p
[0] =
›t
) { \

766 
Àn
 -
CILEN_CHAP
; \

767 
	`INCPTR
(2, 
p
); \

768 
	`GETSHORT
(
cish‹t
, 
p
); \

769 
	`GETCHAR
(
cich¨
, 
p
); \

770 
no
.
√g
 = 1; \

771 
code
 \

772 }

	)

773 
	#NAKCICHAR
(
›t
, 
√g
, 
code
) \

774 i‡(
go
->
√g
 && \

775 
Àn
 >
CILEN_CHAR
 && \

776 
p
[1] =
CILEN_CHAR
 && \

777 
p
[0] =
›t
) { \

778 
Àn
 -
CILEN_CHAR
; \

779 
	`INCPTR
(2, 
p
); \

780 
	`GETCHAR
(
cich¨
, 
p
); \

781 
no
.
√g
 = 1; \

782 
code
 \

783 }

	)

784 
	#NAKCISHORT
(
›t
, 
√g
, 
code
) \

785 i‡(
go
->
√g
 && \

786 
Àn
 >
CILEN_SHORT
 && \

787 
p
[1] =
CILEN_SHORT
 && \

788 
p
[0] =
›t
) { \

789 
Àn
 -
CILEN_SHORT
; \

790 
	`INCPTR
(2, 
p
); \

791 
	`GETSHORT
(
cish‹t
, 
p
); \

792 
no
.
√g
 = 1; \

793 
code
 \

794 }

	)

795 
	#NAKCILONG
(
›t
, 
√g
, 
code
) \

796 i‡(
go
->
√g
 && \

797 
Àn
 >
CILEN_LONG
 && \

798 
p
[1] =
CILEN_LONG
 && \

799 
p
[0] =
›t
) { \

800 
Àn
 -
CILEN_LONG
; \

801 
	`INCPTR
(2, 
p
); \

802 
	`GETLONG
(
cû⁄g
, 
p
); \

803 
no
.
√g
 = 1; \

804 
code
 \

805 }

	)

806 
	#NAKCILQR
(
›t
, 
√g
, 
code
) \

807 i‡(
go
->
√g
 && \

808 
Àn
 >
CILEN_LQR
 && \

809 
p
[1] =
CILEN_LQR
 && \

810 
p
[0] =
›t
) { \

811 
Àn
 -
CILEN_LQR
; \

812 
	`INCPTR
(2, 
p
); \

813 
	`GETSHORT
(
cish‹t
, 
p
); \

814 
	`GETLONG
(
cû⁄g
, 
p
); \

815 
no
.
√g
 = 1; \

816 
code
 \

817 }

	)

826 i‡(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) {

827 
	`NAKCISHORT
(
CI_MRU
, 
√g_mru
,

828 i‡(
cish‹t
 <
wo
->
mru
 || cish‹à< 
PPP_DEFMRU
) {

829 
åy
.
mru
 = 
cish‹t
;

837 i‡(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) {

838 
	`NAKCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
,

839 
åy
.
asyncm≠
 = 
go
->asyncm≠ | 
cû⁄g
;

848 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
)

849 && 
Àn
 >
CILEN_SHORT


850 && 
p
[0] =
CI_AUTHTYPE
 &&Ö[1] >
CILEN_SHORT
 &&Ö[1] <
Àn
) {

851 
cûí
 = 
p
[1];

852 
Àn
 -
cûí
;

853 
no
.
√g_ch≠
 = 
go
->neg_chap;

854 
no
.
√g_u∑p
 = 
go
->neg_upap;

855 
	`INCPTR
(2, 
p
);

856 
	`GETSHORT
(
cish‹t
, 
p
);

857 i‡(
cish‹t
 =
PPP_PAP
 && 
cûí
 =
CILEN_SHORT
) {

863 i‡(!
go
->
√g_ch≠
) {

864 
bad
;

866 
åy
.
√g_ch≠
 = 0;

868 } i‡(
cish‹t
 =
PPP_CHAP
 && 
cûí
 =
CILEN_CHAP
) {

869 
	`GETCHAR
(
cich¨
, 
p
);

870 i‡(
go
->
√g_ch≠
) {

876 i‡(
cich¨
 !
go
->
ch≠_mdty≥
) {

877 
åy
.
√g_ch≠
 = 0;

883 
åy
.
√g_u∑p
 = 0;

891 i‡(
go
->
√g_ch≠
) {

892 
åy
.
√g_ch≠
 = 0;

894 
åy
.
√g_u∑p
 = 0;

896 
p
 +
cûí
 - 
CILEN_SHORT
;

905 
	`NAKCILQR
(
CI_QUALITY
, 
√g_lqr
,

906 i‡(
cish‹t
 !
PPP_LQR
) {

907 
åy
.
√g_lqr
 = 0;

909 
åy
.
lqr_≥riod
 = 
cû⁄g
;

916 
	`NAKCICHAR
(
CI_CALLBACK
, 
√g_cb˝
,

917 
åy
.
√g_cb˝
 = 0;

923 
	`NAKCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
,

924 
åy
.
magi˙umbî
 = 
	`magic
();

925 
lo›ed_back
 = 1;

933 
	`NAKCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
,

934 
åy
.
√g_pcom¥essi⁄
 = 0;

936 
	`NAKCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
,

937 
åy
.
√g_accom¥essi⁄
 = 0;

956 
Àn
 > 
CILEN_VOID
) {

957 
	`GETCHAR
(
côy≥
, 
p
);

958 
	`GETCHAR
(
cûí
, 
p
);

959 i‡(
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0) {

960 
bad
;

962 
√xt
 = 
p
 + 
cûí
 - 2;

964 
côy≥
) {

965 
CI_MRU
:

966 i‡((
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
)

967 || 
no
.
√g_mru
 || 
cûí
 !
CILEN_SHORT
) {

968 
bad
;

970 
	`GETSHORT
(
cish‹t
, 
p
);

971 i‡(
cish‹t
 < 
PPP_DEFMRU
) {

972 
åy
.
mru
 = 
cish‹t
;

975 
CI_ASYNCMAP
:

976 i‡((
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl)

977 || 
no
.
√g_asyncm≠
 || 
cûí
 !
CILEN_LONG
) {

978 
bad
;

981 
CI_AUTHTYPE
:

982 i‡(
go
->
√g_ch≠
 || 
no
.√g_ch≠ || go->
√g_u∑p
 ||Ço.neg_upap) {

983 
bad
;

986 
CI_MAGICNUMBER
:

987 i‡(
go
->
√g_magi˙umbî
 || 
no
.neg_magicnumber ||

988 
cûí
 !
CILEN_LONG
) {

989 
bad
;

992 
CI_PCOMPRESSION
:

993 i‡(
go
->
√g_pcom¥essi⁄
 || 
no
.neg_pcompression

994 || 
cûí
 !
CILEN_VOID
) {

995 
bad
;

998 
CI_ACCOMPRESSION
:

999 i‡(
go
->
√g_accom¥essi⁄
 || 
no
.neg_accompression

1000 || 
cûí
 !
CILEN_VOID
) {

1001 
bad
;

1004 
CI_QUALITY
:

1005 i‡(
go
->
√g_lqr
 || 
no
.√g_lq∏|| 
cûí
 !
CILEN_LQR
) {

1006 
bad
;

1010 
p
 = 
√xt
;

1014 i‡(
Àn
 != 0) {

1015 
bad
;

1021 i‡(
f
->
°©e
 !
LS_OPENED
) {

1022 i‡(
lo›ed_back
) {

1023 i‡(++
åy
.
numlo›s
 >
l˝_lo›backÁû
) {

1024 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜine isÜooped back.\n"));

1025 
	`l˝_˛o£
(
f
->
unô
, "Loopback detected");

1028 
åy
.
numlo›s
 = 0;

1030 *
go
 = 
åy
;

1035 
bad
:

1036 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_nakci:Ñeceived bad Nak!\n"));

1038 
	}
}

1051 
	$l˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

1053 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1054 
u_ch¨
 
cich¨
;

1055 
u_sh‹t
 
cish‹t
;

1056 
u32_t
 
cû⁄g
;

1057 
l˝_›ti⁄s
 
åy
;

1059 
åy
 = *
go
;

1066 
	#REJCIVOID
(
›t
, 
√g
) \

1067 i‡(
go
->
√g
 && \

1068 
Àn
 >
CILEN_VOID
 && \

1069 
p
[1] =
CILEN_VOID
 && \

1070 
p
[0] =
›t
) { \

1071 
Àn
 -
CILEN_VOID
; \

1072 
	`INCPTR
(
CILEN_VOID
, 
p
); \

1073 
åy
.
√g
 = 0; \

1074 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªjci: void o± %dÑeje˘ed\n", 
›t
)); \

1075 }

	)

1076 
	#REJCISHORT
(
›t
, 
√g
, 
vÆ
) \

1077 i‡(
go
->
√g
 && \

1078 
Àn
 >
CILEN_SHORT
 && \

1079 
p
[1] =
CILEN_SHORT
 && \

1080 
p
[0] =
›t
) { \

1081 
Àn
 -
CILEN_SHORT
; \

1082 
	`INCPTR
(2, 
p
); \

1083 
	`GETSHORT
(
cish‹t
, 
p
); \

1085 i‡(
cish‹t
 !
vÆ
) { \

1086 
bad
; \

1088 
åy
.
√g
 = 0; \

1089 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: sh‹à›à%dÑeje˘ed\n", 
›t
)); \

1090 }

	)

1091 
	#REJCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

1092 i‡(
go
->
√g
 && \

1093 
Àn
 >
CILEN_CHAP
 && \

1094 
p
[1] =
CILEN_CHAP
 && \

1095 
p
[0] =
›t
) { \

1096 
Àn
 -
CILEN_CHAP
; \

1097 
	`INCPTR
(2, 
p
); \

1098 
	`GETSHORT
(
cish‹t
, 
p
); \

1099 
	`GETCHAR
(
cich¨
, 
p
); \

1101 i‡(
cish‹t
 !
vÆ
 || 
cich¨
 !
dige°
) { \

1102 
bad
; \

1104 
åy
.
√g
 = 0; \

1105 
åy
.
√g_u∑p
 = 0; \

1106 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: ch≠ o± %dÑeje˘ed\n", 
›t
)); \

1107 }

	)

1108 
	#REJCILONG
(
›t
, 
√g
, 
vÆ
) \

1109 i‡(
go
->
√g
 && \

1110 
Àn
 >
CILEN_LONG
 && \

1111 
p
[1] =
CILEN_LONG
 && \

1112 
p
[0] =
›t
) { \

1113 
Àn
 -
CILEN_LONG
; \

1114 
	`INCPTR
(2, 
p
); \

1115 
	`GETLONG
(
cû⁄g
, 
p
); \

1117 i‡(
cû⁄g
 !
vÆ
) { \

1118 
bad
; \

1120 
åy
.
√g
 = 0; \

1121 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci:Ü⁄g o± %dÑeje˘ed\n", 
›t
)); \

1122 }

	)

1123 
	#REJCILQR
(
›t
, 
√g
, 
vÆ
) \

1124 i‡(
go
->
√g
 && \

1125 
Àn
 >
CILEN_LQR
 && \

1126 
p
[1] =
CILEN_LQR
 && \

1127 
p
[0] =
›t
) { \

1128 
Àn
 -
CILEN_LQR
; \

1129 
	`INCPTR
(2, 
p
); \

1130 
	`GETSHORT
(
cish‹t
, 
p
); \

1131 
	`GETLONG
(
cû⁄g
, 
p
); \

1133 i‡(
cish‹t
 !
PPP_LQR
 || 
cû⁄g
 !
vÆ
) { \

1134 
bad
; \

1136 
åy
.
√g
 = 0; \

1137 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: LQR o± %dÑeje˘ed\n", 
›t
)); \

1138 }

	)

1139 
	#REJCICBCP
(
›t
, 
√g
, 
vÆ
) \

1140 i‡(
go
->
√g
 && \

1141 
Àn
 >
CILEN_CBCP
 && \

1142 
p
[1] =
CILEN_CBCP
 && \

1143 
p
[0] =
›t
) { \

1144 
Àn
 -
CILEN_CBCP
; \

1145 
	`INCPTR
(2, 
p
); \

1146 
	`GETCHAR
(
cich¨
, 
p
); \

1148 i‡(
cich¨
 !
vÆ
) { \

1149 
bad
; \

1151 
åy
.
√g
 = 0; \

1152 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: CÆlback o± %dÑeje˘ed\n", 
›t
)); \

1153 }

	)

1155 
	`REJCISHORT
(
CI_MRU
, 
√g_mru
, 
go
->
mru
);

1156 
	`REJCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
, 
go
->
asyncm≠
);

1157 
	`REJCICHAP
(
CI_AUTHTYPE
, 
√g_ch≠
, 
PPP_CHAP
, 
go
->
ch≠_mdty≥
);

1158 i‡(!
go
->
√g_ch≠
) {

1159 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_u∑p
, 
PPP_PAP
);

1161 
	`REJCILQR
(
CI_QUALITY
, 
√g_lqr
, 
go
->
lqr_≥riod
);

1162 
	`REJCICBCP
(
CI_CALLBACK
, 
√g_cb˝
, 
CBCP_OPT
);

1163 
	`REJCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
, 
go
->
magi˙umbî
);

1164 
	`REJCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1165 
	`REJCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1170 i‡(
Àn
 != 0) {

1171 
bad
;

1176 i‡(
f
->
°©e
 !
LS_OPENED
) {

1177 *
go
 = 
åy
;

1181 
bad
:

1182 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_rejci:Ñeceived bad Reject!\n"));

1184 
	}
}

1195 
	$l˝_ªqci
(
fsm
 *
f
,

1196 
u_ch¨
 *
öp
,

1197 *
À≈
,

1198 
ªje˘_if_dißgªe
)

1200 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1201 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1202 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1203 
u_ch¨
 *
cù
, *
√xt
;

1204 
cûí
, 
côy≥
, 
cich¨
;

1205 
u_sh‹t
 
cish‹t
;

1206 
u32_t
 
cû⁄g
;

1207 
rc
 = 
CONFACK
;

1208 
‹c
;

1209 
u_ch¨
 *
p
;

1210 
u_ch¨
 *
ªjp
;

1211 
u_ch¨
 *
«kp
;

1212 
l
 = *
À≈
;

1213 #i‡
TRACELCP
 > 0

1214 
åa˚Buf
[80];

1215 
åa˚Ndx
 = 0;

1221 
	`BZERO
(
ho
, (*ho));

1226 
√xt
 = 
öp
;

1227 
«kp
 = 
«k_buf„r
;

1228 
ªjp
 = 
öp
;

1229 
l
) {

1230 
‹c
 = 
CONFACK
;

1231 
cù
 = 
p
 = 
√xt
;

1232 i‡(
l
 < 2 ||

1233 
p
[1] < 2 ||

1234 
p
[1] > 
l
) {

1235 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: bad CIÜength!\n"));

1236 
‹c
 = 
CONFREJ
;

1237 
cûí
 = 
l
;

1238 
l
 = 0;

1239 
côy≥
 = 0;

1240 
ídswôch
;

1242 
	`GETCHAR
(
côy≥
, 
p
);

1243 
	`GETCHAR
(
cûí
, 
p
);

1244 
l
 -
cûí
;

1245 
√xt
 +
cûí
;

1247 
côy≥
) {

1248 
CI_MRU
:

1249 i‡(!
ao
->
√g_mru
) {

1250 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU -Çotállowed\n"));

1251 
‹c
 = 
CONFREJ
;

1253 } i‡(
cûí
 !
CILEN_SHORT
) {

1254 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU - badÜength\n"));

1255 
‹c
 = 
CONFREJ
;

1258 
	`GETSHORT
(
cish‹t
, 
p
);

1265 i‡(
cish‹t
 < 
PPP_MINMRU
) {

1266 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak - MRUÅoo small\n"));

1267 
‹c
 = 
CONFNAK
;

1268 
	`PUTCHAR
(
CI_MRU
, 
«kp
);

1269 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1270 
	`PUTSHORT
(
PPP_MINMRU
, 
«kp
);

1273 
ho
->
√g_mru
 = 1;

1274 
ho
->
mru
 = 
cish‹t
;

1275 #i‡
TRACELCP
 > 0

1276 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MRU %d", 
cish‹t
);

1277 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1281 
CI_ASYNCMAP
:

1282 i‡(!
ao
->
√g_asyncm≠
) {

1283 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAPÇotállowed\n"));

1284 
‹c
 = 
CONFREJ
;

1286 } i‡(
cûí
 !
CILEN_LONG
) {

1287 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAP badÜength\n"));

1288 
‹c
 = 
CONFREJ
;

1291 
	`GETLONG
(
cû⁄g
, 
p
);

1297 i‡((
ao
->
asyncm≠
 & ~
cû⁄g
) != 0) {

1298 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak ASYNCMAP %lX missing %lX\n",

1299 
cû⁄g
, 
ao
->
asyncm≠
));

1300 
‹c
 = 
CONFNAK
;

1301 
	`PUTCHAR
(
CI_ASYNCMAP
, 
«kp
);

1302 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1303 
	`PUTLONG
(
ao
->
asyncm≠
 | 
cû⁄g
, 
«kp
);

1306 
ho
->
√g_asyncm≠
 = 1;

1307 
ho
->
asyncm≠
 = 
cû⁄g
;

1308 #i‡
TRACELCP
 > 0

1309 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " ASYNCMAP=%lX", 
cû⁄g
);

1310 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1314 
CI_AUTHTYPE
:

1315 i‡(
cûí
 < 
CILEN_SHORT
) {

1316 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPE missingárg\n"));

1317 
‹c
 = 
CONFREJ
;

1319 } i‡(!(
ao
->
√g_u∑p
 ||áo->
√g_ch≠
)) {

1323 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPEÇotállowed\n"));

1324 
‹c
 = 
CONFREJ
;

1327 
	`GETSHORT
(
cish‹t
, 
p
);

1340 i‡(
cish‹t
 =
PPP_PAP
) {

1341 i‡(
ho
->
√g_ch≠
) {

1342 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAPálreadyáccepted\n"));

1343 
‹c
 = 
CONFREJ
;

1345 } i‡(
cûí
 !
CILEN_SHORT
) {

1346 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAP badÜen\n"));

1347 
‹c
 = 
CONFREJ
;

1350 i‡(!
ao
->
√g_u∑p
) {

1351 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE PAPÇotállowed\n"));

1352 
‹c
 = 
CONFNAK
;

1353 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1354 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1355 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1356 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1359 
ho
->
√g_u∑p
 = 1;

1360 #i‡
TRACELCP
 > 0

1361 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " PAP (%X)", 
cish‹t
);

1362 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1366 i‡(
cish‹t
 =
PPP_CHAP
) {

1367 i‡(
ho
->
√g_u∑p
) {

1368 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAPáccepted PAP\n"));

1369 
‹c
 = 
CONFREJ
;

1371 } i‡(
cûí
 !
CILEN_CHAP
) {

1372 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAP badÜen\n"));

1373 
‹c
 = 
CONFREJ
;

1376 i‡(!
ao
->
√g_ch≠
) {

1377 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE CHAPÇotállowed\n"));

1378 
‹c
 = 
CONFNAK
;

1379 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1380 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1381 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1384 
	`GETCHAR
(
cich¨
, 
p
);

1385 i‡(
cich¨
 !
CHAP_DIGEST_MD5


1386 #ifde‡
CHAPMS


1387 && 
cich¨
 !
CHAP_MICROSOFT


1390 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE CHAP dige°=%d\n", 
cich¨
));

1391 
‹c
 = 
CONFNAK
;

1392 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1393 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1394 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1395 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1398 #i‡
TRACELCP
 > 0

1399 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " CHAP %X,%d", 
cish‹t
, 
cich¨
);

1400 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1402 
ho
->
ch≠_mdty≥
 = 
cich¨
;

1403 
ho
->
√g_ch≠
 = 1;

1412 
‹c
 = 
CONFNAK
;

1413 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1414 i‡(
ao
->
√g_ch≠
) {

1415 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq CHAP\n", 
cish‹t
));

1416 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1417 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1418 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1420 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq PAP\n", 
cish‹t
));

1421 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1422 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1426 
CI_QUALITY
:

1427 
	`GETSHORT
(
cish‹t
, 
p
);

1428 
	`GETLONG
(
cû⁄g
, 
p
);

1429 #i‡
TRACELCP
 > 0

1430 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " QUALITY (%x %x)", 
cish‹t
, (Ë
cû⁄g
);

1431 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1434 i‡(!
ao
->
√g_lqr
 ||

1435 
cûí
 !
CILEN_LQR
) {

1436 
‹c
 = 
CONFREJ
;

1444 i‡(
cish‹t
 !
PPP_LQR
) {

1445 
‹c
 = 
CONFNAK
;

1446 
	`PUTCHAR
(
CI_QUALITY
, 
«kp
);

1447 
	`PUTCHAR
(
CILEN_LQR
, 
«kp
);

1448 
	`PUTSHORT
(
PPP_LQR
, 
«kp
);

1449 
	`PUTLONG
(
ao
->
lqr_≥riod
, 
«kp
);

1454 
CI_MAGICNUMBER
:

1455 i‡(!(
ao
->
√g_magi˙umbî
 || 
go
->neg_magicnumber) ||

1456 
cûí
 !
CILEN_LONG
) {

1457 
‹c
 = 
CONFREJ
;

1460 
	`GETLONG
(
cû⁄g
, 
p
);

1461 #i‡
TRACELCP
 > 0

1462 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MAGICNUMBER (%lX)", 
cû⁄g
);

1463 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1469 i‡(
go
->
√g_magi˙umbî
 &&

1470 
cû⁄g
 =
go
->
magi˙umbî
) {

1471 
cû⁄g
 = 
	`magic
();

1472 
‹c
 = 
CONFNAK
;

1473 
	`PUTCHAR
(
CI_MAGICNUMBER
, 
«kp
);

1474 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1475 
	`PUTLONG
(
cû⁄g
, 
«kp
);

1478 
ho
->
√g_magi˙umbî
 = 1;

1479 
ho
->
magi˙umbî
 = 
cû⁄g
;

1483 
CI_PCOMPRESSION
:

1484 #i‡
TRACELCP
 > 0

1485 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " PCOMPRESSION");

1486 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1488 i‡(!
ao
->
√g_pcom¥essi⁄
 ||

1489 
cûí
 !
CILEN_VOID
) {

1490 
‹c
 = 
CONFREJ
;

1493 
ho
->
√g_pcom¥essi⁄
 = 1;

1496 
CI_ACCOMPRESSION
:

1497 #i‡
TRACELCP
 > 0

1498 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " ACCOMPRESSION");

1499 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1501 i‡(!
ao
->
√g_accom¥essi⁄
 ||

1502 
cûí
 !
CILEN_VOID
) {

1503 
‹c
 = 
CONFREJ
;

1506 
ho
->
√g_accom¥essi⁄
 = 1;

1509 
CI_MRRU
:

1510 #i‡
TRACELCP
 > 0

1511 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_MRRU");

1512 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1514 
‹c
 = 
CONFREJ
;

1517 
CI_SSNHF
:

1518 #i‡
TRACELCP
 > 0

1519 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_SSNHF");

1520 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1522 
‹c
 = 
CONFREJ
;

1525 
CI_EPDISC
:

1526 #i‡
TRACELCP
 > 0

1527 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_EPDISC");

1528 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1530 
‹c
 = 
CONFREJ
;

1534 #i‡
TRACELCP


1535 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " unknow¿%d", 
côy≥
);

1536 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1538 
‹c
 = 
CONFREJ
;

1542 
ídswôch
:

1543 #i‡
TRACELCP


1544 i‡(
åa˚Ndx
 >= 80 - 32) {

1545 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñcvd%s\n", 
åa˚Buf
));

1546 
åa˚Ndx
 = 0;

1549 i‡(
‹c
 =
CONFACK
 &&

1550 
rc
 !
CONFACK
) {

1554 i‡(
‹c
 =
CONFNAK
) {

1555 i‡(
ªje˘_if_dißgªe


1556 && 
côy≥
 !
CI_MAGICNUMBER
) {

1557 
‹c
 = 
CONFREJ
;

1559 i‡(
rc
 =
CONFREJ
) {

1562 
rc
 = 
CONFNAK
;

1565 i‡(
‹c
 =
CONFREJ
) {

1566 
rc
 = 
CONFREJ
;

1567 i‡(
cù
 !
ªjp
) {

1568 
	`BCOPY
(
cù
, 
ªjp
, 
cûí
);

1570 
	`INCPTR
(
cûí
, 
ªjp
);

1581 
rc
) {

1582 
CONFACK
:

1583 *
À≈
 = ()(
√xt
 - 
öp
);

1585 
CONFNAK
:

1589 *
À≈
 = ()(
«kp
 - 
«k_buf„r
);

1590 
	`BCOPY
(
«k_buf„r
, 
öp
, *
À≈
);

1592 
CONFREJ
:

1593 *
À≈
 = ()(
ªjp
 - 
öp
);

1597 #i‡
TRACELCP
 > 0

1598 i‡(
åa˚Ndx
 > 0) {

1599 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci: %s\n", 
åa˚Buf
));

1602 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñëu∫ög CONF%s.\n", 
	`CODENAME
(
rc
)));

1603  (
rc
);

1604 
	}
}

1611 
	$l˝_up
(
fsm
 *
f
)

1613 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

1614 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1615 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1616 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1618 i‡(!
go
->
√g_magi˙umbî
) {

1619 
go
->
magi˙umbî
 = 0;

1621 i‡(!
ho
->
√g_magi˙umbî
) {

1622 
ho
->
magi˙umbî
 = 0;

1631 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
	`LWIP_MIN
(
ao
->
mru
, (
ho
->
√g_mru
? ho->mru: 
PPP_MRU
)),

1632 (
ho
->
√g_asyncm≠
? ho->
asyncm≠
: 0xffffffffl),

1633 
ho
->
√g_pcom¥essi⁄
, ho->
√g_accom¥essi⁄
);

1639 
	`µp_ªcv_c⁄fig
(
f
->
unô
, (
go
->
√g_mru
? 
	`LWIP_MAX
(
wo
->
mru
, go->mru): 
PPP_MRU
),

1640 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1641 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1643 i‡(
ho
->
√g_mru
) {

1644 
≥î_mru
[
f
->
unô
] = 
ho
->
mru
;

1647 
	`l˝_echo_lowîup
(
f
->
unô
);

1649 
	`lök_e°ablished
(
f
->
unô
);

1650 
	}
}

1659 
	$l˝_down
(
fsm
 *
f
)

1661 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1663 
	`l˝_echo_lowîdown
(
f
->
unô
);

1665 
	`lök_down
(
f
->
unô
);

1667 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

1668 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
PPP_MRU
,

1669 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1670 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1671 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

1672 
	}
}

1679 
	$l˝_°¨tög
(
fsm
 *
f
)

1681 
	`lök_ªquúed
(
f
->
unô
);

1682 
	}
}

1689 
	$l˝_föished
(
fsm
 *
f
)

1691 
	`lök_ãrmö©ed
(
f
->
unô
);

1692 
	}
}

1701 
¥öt_°rög
–*
p
, 
Àn
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1703 
c
;

1705 
	`¥öãr
(
¨g
, "\"");

1706 ; 
Àn
 > 0; --len) {

1707 
c
 = *
p
++;

1708 i‡(' ' <
c
 && c <= '~') {

1709 i‡(
c
 == '\\' || c == '"') {

1710 
	`¥öãr
(
¨g
, "\\");

1712 
	`¥öãr
(
¨g
, "%c", 
c
);

1714 
c
) {

1716 
	`¥öãr
(
¨g
, "\\n");

1719 
	`¥öãr
(
¨g
, "\\r");

1722 
	`¥öãr
(
¨g
, "\\t");

1725 
	`¥öãr
(
¨g
, "\\%.3o", 
c
);

1729 
	`¥öãr
(
¨g
, "\"");

1730 
	}
}

1736 *
	gl˝_codíames
[] = {

1743 
l˝_¥öçkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1745 
code
, 
id
, 
Àn
, 
ﬁí
;

1746 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1747 
u_sh‹t
 
cish‹t
;

1748 
u32_t
 
cû⁄g
;

1750 i‡(
∂í
 < 
HEADERLEN
) {

1753 
p°¨t
 = 
p
;

1754 
	`GETCHAR
(
code
, 
p
);

1755 
	`GETCHAR
(
id
, 
p
);

1756 
	`GETSHORT
(
Àn
, 
p
);

1757 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
) {

1761 i‡(
code
 >1 && codê<(
l˝_codíames
) / (*)) {

1762 
	`¥öãr
(
¨g
, " %s", 
l˝_codíames
[
code
-1]);

1764 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1766 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1767 
Àn
 -
HEADERLEN
;

1768 
code
) {

1769 
CONFREQ
:

1770 
CONFACK
:

1771 
CONFNAK
:

1772 
CONFREJ
:

1774 
Àn
 >= 2) {

1775 
	`GETCHAR
(
code
, 
p
);

1776 
	`GETCHAR
(
ﬁí
, 
p
);

1777 
p
 -= 2;

1778 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

1781 
	`¥öãr
(
¨g
, " <");

1782 
Àn
 -
ﬁí
;

1783 
›ãnd
 = 
p
 + 
ﬁí
;

1784 
code
) {

1785 
CI_MRU
:

1786 i‡(
ﬁí
 =
CILEN_SHORT
) {

1787 
p
 += 2;

1788 
	`GETSHORT
(
cish‹t
, 
p
);

1789 
	`¥öãr
(
¨g
, "mru %d", 
cish‹t
);

1792 
CI_ASYNCMAP
:

1793 i‡(
ﬁí
 =
CILEN_LONG
) {

1794 
p
 += 2;

1795 
	`GETLONG
(
cû⁄g
, 
p
);

1796 
	`¥öãr
(
¨g
, "asyncm≠ 0x%lx", 
cû⁄g
);

1799 
CI_AUTHTYPE
:

1800 i‡(
ﬁí
 >
CILEN_SHORT
) {

1801 
p
 += 2;

1802 
	`¥öãr
(
¨g
, "auth ");

1803 
	`GETSHORT
(
cish‹t
, 
p
);

1804 
cish‹t
) {

1805 
PPP_PAP
:

1806 
	`¥öãr
(
¨g
, "pap");

1808 
PPP_CHAP
:

1809 
	`¥öãr
(
¨g
, "chap");

1812 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1816 
CI_QUALITY
:

1817 i‡(
ﬁí
 >
CILEN_SHORT
) {

1818 
p
 += 2;

1819 
	`¥öãr
(
¨g
, "quality ");

1820 
	`GETSHORT
(
cish‹t
, 
p
);

1821 
cish‹t
) {

1822 
PPP_LQR
:

1823 
	`¥öãr
(
¨g
, "lqr");

1826 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1830 
CI_CALLBACK
:

1831 i‡(
ﬁí
 >
CILEN_CHAR
) {

1832 
p
 += 2;

1833 
	`¥öãr
(
¨g
, "callback ");

1834 
	`GETSHORT
(
cish‹t
, 
p
);

1835 
cish‹t
) {

1836 
CBCP_OPT
:

1837 
	`¥öãr
(
¨g
, "CBCP");

1840 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1844 
CI_MAGICNUMBER
:

1845 i‡(
ﬁí
 =
CILEN_LONG
) {

1846 
p
 += 2;

1847 
	`GETLONG
(
cû⁄g
, 
p
);

1848 
	`¥öãr
(
¨g
, "magi¯0x%x", 
cû⁄g
);

1851 
CI_PCOMPRESSION
:

1852 i‡(
ﬁí
 =
CILEN_VOID
) {

1853 
p
 += 2;

1854 
	`¥öãr
(
¨g
, "pcomp");

1857 
CI_ACCOMPRESSION
:

1858 i‡(
ﬁí
 =
CILEN_VOID
) {

1859 
p
 += 2;

1860 
	`¥öãr
(
¨g
, "accomp");

1864 
p
 < 
›ãnd
) {

1865 
	`GETCHAR
(
code
, 
p
);

1866 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1868 
	`¥öãr
(
¨g
, ">");

1872 
TERMACK
:

1873 
TERMREQ
:

1874 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1875 
	`¥öãr
(
¨g
, " ");

1876 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1877 
p
 +
Àn
;

1878 
Àn
 = 0;

1882 
ECHOREQ
:

1883 
ECHOREP
:

1884 
DISCREQ
:

1885 i‡(
Àn
 >= 4) {

1886 
	`GETLONG
(
cû⁄g
, 
p
);

1887 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

1888 
p
 += 4;

1889 
Àn
 -= 4;

1895 ; 
Àn
 > 0; --len) {

1896 
	`GETCHAR
(
code
, 
p
);

1897 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1900  ()(
p
 - 
p°¨t
);

1901 
	}
}

1908 
	$L˝LökFaûuª
 (
fsm
 *
f
)

1910 i‡(
f
->
°©e
 =
LS_OPENED
) {

1911 
	`LCPDEBUG
((
LOG_INFO
, "Nÿª•⁄£Åÿ%dÉcho-ªque°s\n", 
l˝_echos_≥ndög
));

1912 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜinkáppearsÅo be disconnected.\n"));

1913 
	`l˝_˛o£
(
f
->
unô
, "PeerÇotÑesponding");

1915 
	}
}

1921 
	$L˝EchoCheck
 (
fsm
 *
f
)

1923 
	`L˝SídEchoReque°
 (
f
);

1928 
	`LWIP_ASSERT
("l˝_echo_timî_ru¬ög =0", 
l˝_echo_timî_ru¬ög
 == 0);

1930 
	`TIMEOUT
 (
L˝EchoTimeout
, 
f
, 
l˝_echo_öãrvÆ
);

1931 
l˝_echo_timî_ru¬ög
 = 1;

1932 
	}
}

1938 
	$L˝EchoTimeout
 (*
¨g
)

1940 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

1941 
l˝_echo_timî_ru¬ög
 = 0;

1942 
	`L˝EchoCheck
 ((
fsm
 *Ë
¨g
);

1944 
	}
}

1950 
	$l˝_ª˚ived_echo_ª∂y
 (
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

1952 
u32_t
 
magic
;

1954 
	`LWIP_UNUSED_ARG
(
id
);

1957 i‡(
Àn
 < 4) {

1958 
	`LCPDEBUG
((
LOG_WARNING
, "l˝:Ñe˚ived sh‹àEcho-Rïly,Üígth %d\n", 
Àn
));

1961 
	`GETLONG
(
magic
, 
öp
);

1962 i‡(
l˝_gŸ›ti⁄s
[
f
->
unô
].
√g_magi˙umbî
 && 
magic
 =l˝_gŸ›ti⁄s[f->unô].
magi˙umbî
) {

1963 
	`LCPDEBUG
((
LOG_WARNING
, "appearÅo haveÑeceived our ownÉcho-reply!\n"));

1968 
l˝_echos_≥ndög
 = 0;

1969 
	}
}

1975 
	$L˝SídEchoReque°
 (
fsm
 *
f
)

1977 
u32_t
 
l˝_magic
;

1978 
u_ch¨
 
pkt
[4], *
pkç
;

1983 i‡(
l˝_echo_Áûs
 != 0) {

1984 i‡(
l˝_echos_≥ndög
++ >
l˝_echo_Áûs
) {

1985 
	`L˝LökFaûuª
(
f
);

1986 
l˝_echos_≥ndög
 = 0;

1993 i‡(
f
->
°©e
 =
LS_OPENED
) {

1994 
l˝_magic
 = 
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
;

1995 
pkç
 = 
pkt
;

1996 
	`PUTLONG
(
l˝_magic
, 
pkç
);

1997 
	`fsm_sd©a
(
f
, 
ECHOREQ
, (
u_ch¨
)(
l˝_echo_numbî
++ & 0xFF), 
pkt
, ()(
pkç
 -Ökt));

1999 
	}
}

2006 
	$l˝_echo_lowîup
 (
unô
)

2008 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2011 
l˝_echos_≥ndög
 = 0;

2012 
l˝_echo_numbî
 = 0;

2013 
l˝_echo_timî_ru¬ög
 = 0;

2016 i‡(
l˝_echo_öãrvÆ
 != 0) {

2017 
	`L˝EchoCheck
 (
f
);

2019 
	}
}

2026 
	$l˝_echo_lowîdown
 (
unô
)

2028 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2030 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2031 
	`UNTIMEOUT
 (
L˝EchoTimeout
, 
f
);

2032 
l˝_echo_timî_ru¬ög
 = 0;

2034 
	}
}

	@net/lwip/netif/ppp/lcp.h

55 #i‚de‡
LCP_H


56 
	#LCP_H


	)

64 
	#CI_MRU
 1

	)

65 
	#CI_ASYNCMAP
 2

	)

66 
	#CI_AUTHTYPE
 3

	)

67 
	#CI_QUALITY
 4

	)

68 
	#CI_MAGICNUMBER
 5

	)

69 
	#CI_PCOMPRESSION
 7

	)

70 
	#CI_ACCOMPRESSION
 8

	)

71 
	#CI_CALLBACK
 13

	)

72 
	#CI_MRRU
 17

	)

73 
	#CI_SSNHF
 18

	)

74 
	#CI_EPDISC
 19

	)

79 
	#PROTREJ
 8

	)

80 
	#ECHOREQ
 9

	)

81 
	#ECHOREP
 10

	)

82 
	#DISCREQ
 11

	)

83 
	#CBCP_OPT
 6

	)

93 
	sl˝_›ti⁄s
 {

94 
u_öt
 
	m∑ssive
 : 1;

95 
u_öt
 
	msûít
 : 1;

96 
u_öt
 
	mª°¨t
 : 1;

97 
u_öt
 
	m√g_mru
 : 1;

98 
u_öt
 
	m√g_asyncm≠
 : 1;

99 
u_öt
 
	m√g_u∑p
 : 1;

100 
u_öt
 
	m√g_ch≠
 : 1;

101 
u_öt
 
	m√g_magi˙umbî
 : 1;

102 
u_öt
 
	m√g_pcom¥essi⁄
 : 1;

103 
u_öt
 
	m√g_accom¥essi⁄
 : 1;

104 
u_öt
 
	m√g_lqr
 : 1;

105 
u_öt
 
	m√g_cb˝
 : 1;

106 #ifde‡
PPP_MULTILINK


107 
u_öt
 
	m√g_mºu
 : 1;

108 
u_öt
 
	m√g_s¢hf
 : 1;

109 
u_öt
 
	m√g_ídpoöt
 : 1;

111 
u_sh‹t
 
	mmru
;

112 #ifde‡
PPP_MULTILINK


113 
u_sh‹t
 
	mmºu
;

115 
u_ch¨
 
	mch≠_mdty≥
;

116 
u32_t
 
	masyncm≠
;

117 
u32_t
 
	mmagi˙umbî
;

118 
	mnumlo›s
;

119 
u32_t
 
	mlqr_≥riod
;

120 #ifde‡
PPP_MULTILINK


121 
ïdisc
 
	mídpoöt
;

123 } 
	tl˝_›ti⁄s
;

129 
	mPHASE_DEAD
 = 0,

130 
	mPHASE_INITIALIZE
,

131 
	mPHASE_ESTABLISH
,

132 
	mPHASE_AUTHENTICATE
,

133 
	mPHASE_CALLBACK
,

134 
	mPHASE_NETWORK
,

135 
	mPHASE_TERMINATE


136 } 
	tLökPha£
;

143 
LökPha£
 
l˝_pha£
[
NUM_PPP
];

144 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

145 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

146 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

147 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

148 
ext_accm
 
xmô_accm
[];

155 
l˝_öô
 ();

156 
l˝_›í
 ();

157 
l˝_˛o£
 (, *);

158 
l˝_lowîup
 ();

159 
l˝_lowîdown
();

160 
l˝_•rŸªj
 (, 
u_ch¨
 *, );

162 
¥Ÿít
 
l˝_¥Ÿít
;

166 
	#DEFLOOPBACKFAIL
 10

	)

	@net/lwip/netif/ppp/magic.c

53 
	~"lwù/›t.h
"

55 #i‡
PPP_SUPPORT


57 
	~"µp.h
"

58 
	~"øndm.h
"

59 
	~"magic.h
"

70 
	$magicInô
()

73 
	}
}

78 
u32_t
 
	$magic
()

80  
	`avR™dom
();

81 
	}
}

	@net/lwip/netif/ppp/magic.h

55 #i‚de‡
MAGIC_H


56 
	#MAGIC_H


	)

63 
magicInô
();

66 
u32_t
 
magic
();

	@net/lwip/netif/ppp/md5.c

35 
	~"lwù/›t.h
"

37 #i‡
PPP_SUPPORT


39 #i‡
CHAP_SUPPORT
 || 
MD5_SUPPORT


41 
	~"µp.h
"

42 
	~"µpdebug.h
"

44 
	~"md5.h
"

58 
Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
);

60 
	gPADDING
[64] = {

72 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

73 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

74 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

75 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

78 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

82 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

83 {(
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

84 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

85 (
a
Ë+(
b
); \

86 }

	)

87 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

88 {(
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

89 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

90 (
a
Ë+(
b
); \

91 }

	)

92 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

93 {(
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

94 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

95 (
a
Ë+(
b
); \

96 }

	)

97 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

98 {(
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

99 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

100 (
a
Ë+(
b
); \

101 }

	)

103 #ifde‡
__STDC__


104 
	#UL
(
x
Ëx##
UL


	)

106 #ifde‡
WIN32


107 
	#UL
(
x
Ëx##
UL


	)

109 
	#UL
(
x
Ë
	)
x

117 
	$MD5Inô
 (
MD5_CTX
 *
mdC⁄ãxt
)

119 
mdC⁄ãxt
->
i
[0] = mdC⁄ãxt->i[1] = (
u32_t
)0;

122 
mdC⁄ãxt
->
buf
[0] = (
u32_t
)0x67452301UL;

123 
mdC⁄ãxt
->
buf
[1] = (
u32_t
)0xefcdab89UL;

124 
mdC⁄ãxt
->
buf
[2] = (
u32_t
)0x98badcfeUL;

125 
mdC⁄ãxt
->
buf
[3] = (
u32_t
)0x10325476UL;

126 
	}
}

133 
	$MD5Upd©e
(
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
)

135 
u32_t
 
ö
[16];

136 
mdi
;

137 
i
, 
ii
;

140 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%.*H\n", 
öLí
, 
	`MIN
(öLí, 20Ë* 2, 
öBuf
);

141 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%s\n", 
öLí
, 
öBuf
);

145 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

148 i‡((
mdC⁄ãxt
->
i
[0] + ((
u32_t
)
öLí
 << 3)) < mdContext->i[0]) {

149 
mdC⁄ãxt
->
i
[1]++;

151 
mdC⁄ãxt
->
i
[0] +((
u32_t
)
öLí
 << 3);

152 
mdC⁄ãxt
->
i
[1] +((
u32_t
)
öLí
 >> 29);

154 
öLí
--) {

156 
mdC⁄ãxt
->
ö
[
mdi
++] = *
öBuf
++;

159 i‡(
mdi
 == 0x40) {

160 
i
 = 0, 
ii
 = 0; i < 16; i++, ii += 4) {

161 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

162 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

163 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

164 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

166 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

167 
mdi
 = 0;

170 
	}
}

176 
	$MD5FöÆ
 (
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
)

178 
u32_t
 
ö
[16];

179 
mdi
;

180 
i
, 
ii
;

181 
∑dLí
;

184 
ö
[14] = 
mdC⁄ãxt
->
i
[0];

185 
ö
[15] = 
mdC⁄ãxt
->
i
[1];

188 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

191 
∑dLí
 = (
mdi
 < 56) ? (56 - mdi) : (120 - mdi);

192 
	`MD5Upd©e
 (
mdC⁄ãxt
, 
PADDING
, 
∑dLí
);

195 
i
 = 0, 
ii
 = 0; i < 14; i++, ii += 4) {

196 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

197 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

198 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

199 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

201 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

204 
i
 = 0, 
ii
 = 0; i < 4; i++, ii += 4) {

205 
mdC⁄ãxt
->
dige°
[
ii
] = ()(mdC⁄ãxt->
buf
[
i
] & 0xFF);

206 
mdC⁄ãxt
->
dige°
[
ii
+1] =

207 ()((
mdC⁄ãxt
->
buf
[
i
] >> 8) & 0xFF);

208 
mdC⁄ãxt
->
dige°
[
ii
+2] =

209 ()((
mdC⁄ãxt
->
buf
[
i
] >> 16) & 0xFF);

210 
mdC⁄ãxt
->
dige°
[
ii
+3] =

211 ()((
mdC⁄ãxt
->
buf
[
i
] >> 24) & 0xFF);

213 
	`SMEMCPY
(
hash
, 
mdC⁄ãxt
->
dige°
, 16);

214 
	}
}

219 
	$Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
)

221 
u32_t
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

224 
	#S11
 7

	)

225 
	#S12
 12

	)

226 
	#S13
 17

	)

227 
	#S14
 22

	)

228 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S11
, 
	`UL
(3614090360));

229 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 1], 
S12
, 
	`UL
(3905402710));

230 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S13
, 
	`UL
( 606105819));

231 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 3], 
S14
, 
	`UL
(3250441966));

232 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S11
, 
	`UL
(4118548399));

233 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 5], 
S12
, 
	`UL
(1200080426));

234 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S13
, 
	`UL
(2821735955));

235 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 7], 
S14
, 
	`UL
(4249261313));

236 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S11
, 
	`UL
(1770035416));

237 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 9], 
S12
, 
	`UL
(2336552879));

238 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S13
, 
	`UL
(4294925233));

239 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[11], 
S14
, 
	`UL
(2304563134));

240 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S11
, 
	`UL
(1804603682));

241 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[13], 
S12
, 
	`UL
(4254626195));

242 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S13
, 
	`UL
(2792965006));

243 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[15], 
S14
, 
	`UL
(1236535329));

246 
	#S21
 5

	)

247 
	#S22
 9

	)

248 
	#S23
 14

	)

249 
	#S24
 20

	)

250 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S21
, 
	`UL
(4129170786));

251 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 6], 
S22
, 
	`UL
(3225465664));

252 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S23
, 
	`UL
( 643717713));

253 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 0], 
S24
, 
	`UL
(3921069994));

254 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S21
, 
	`UL
(3593408605));

255 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[10], 
S22
, 
	`UL
( 38016083));

256 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S23
, 
	`UL
(3634488961));

257 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 4], 
S24
, 
	`UL
(3889429448));

258 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S21
, 
	`UL
( 568446438));

259 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[14], 
S22
, 
	`UL
(3275163606));

260 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S23
, 
	`UL
(4107603335));

261 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 8], 
S24
, 
	`UL
(1163531501));

262 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S21
, 
	`UL
(2850285829));

263 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 2], 
S22
, 
	`UL
(4243563512));

264 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S23
, 
	`UL
(1735328473));

265 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[12], 
S24
, 
	`UL
(2368359562));

268 
	#S31
 4

	)

269 
	#S32
 11

	)

270 
	#S33
 16

	)

271 
	#S34
 23

	)

272 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S31
, 
	`UL
(4294588738));

273 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 8], 
S32
, 
	`UL
(2272392833));

274 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S33
, 
	`UL
(1839030562));

275 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[14], 
S34
, 
	`UL
(4259657740));

276 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S31
, 
	`UL
(2763975236));

277 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 4], 
S32
, 
	`UL
(1272893353));

278 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S33
, 
	`UL
(4139469664));

279 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[10], 
S34
, 
	`UL
(3200236656));

280 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S31
, 
	`UL
( 681279174));

281 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 0], 
S32
, 
	`UL
(3936430074));

282 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S33
, 
	`UL
(3572445317));

283 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 6], 
S34
, 
	`UL
( 76029189));

284 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S31
, 
	`UL
(3654602809));

285 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[12], 
S32
, 
	`UL
(3873151461));

286 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S33
, 
	`UL
( 530742520));

287 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 2], 
S34
, 
	`UL
(3299628645));

290 
	#S41
 6

	)

291 
	#S42
 10

	)

292 
	#S43
 15

	)

293 
	#S44
 21

	)

294 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S41
, 
	`UL
(4096336452));

295 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 7], 
S42
, 
	`UL
(1126891415));

296 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S43
, 
	`UL
(2878612391));

297 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 5], 
S44
, 
	`UL
(4237533241));

298 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S41
, 
	`UL
(1700485571));

299 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 3], 
S42
, 
	`UL
(2399980690));

300 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S43
, 
	`UL
(4293915773));

301 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 1], 
S44
, 
	`UL
(2240044497));

302 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S41
, 
	`UL
(1873313359));

303 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[15], 
S42
, 
	`UL
(4264355552));

304 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S43
, 
	`UL
(2734768916));

305 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[13], 
S44
, 
	`UL
(1309151649));

306 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S41
, 
	`UL
(4149444226));

307 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[11], 
S42
, 
	`UL
(3174756917));

308 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S43
, 
	`UL
( 718787259));

309 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 9], 
S44
, 
	`UL
(3951481745));

311 
buf
[0] +
a
;

312 
buf
[1] +
b
;

313 
buf
[2] +
c
;

314 
buf
[3] +
d
;

315 
	}
}

	@net/lwip/netif/ppp/md5.h

41 #i‚de‡
MD5_H


42 
	#MD5_H


	)

46 
u32_t
 
	mi
[2];

47 
u32_t
 
	mbuf
[4];

48 
	mö
[64];

49 
	mdige°
[16];

50 } 
	tMD5_CTX
;

52 
MD5Inô
 ( 
MD5_CTX
 *
mdC⁄ãxt
);

53 
MD5Upd©e
–
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

54 
MD5FöÆ
 ( 
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

	@net/lwip/netif/ppp/pap.c

53 
	~"lwù/›t.h
"

55 #i‡
PPP_SUPPORT


57 #i‡
PAP_SUPPORT


59 
	~"µp.h
"

60 
	~"µpdebug.h
"

62 
	~"auth.h
"

63 
	~"∑p.h
"

71 
u∑p_öô
 ();

72 
u∑p_lowîup
 ();

73 
u∑p_lowîdown
 ();

74 
u∑p_öput
 (, 
u_ch¨
 *, );

75 
u∑p_¥Ÿªj
 ();

77 
u∑p_timeout
 (*);

78 
u∑p_ªqtimeout
(*);

79 
u∑p_øuthªq
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

80 
u∑p_øuthack
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

81 
u∑p_øuth«k
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

82 
u∑p_ßuthªq
 (
u∑p_°©e
 *);

83 
u∑p_§e•
 (
u∑p_°©e
 *, 
u_ch¨
, u_char, *, );

89 
¥Ÿít
 
	g∑p_¥Ÿít
 = {

90 
PPP_PAP
,

91 
u∑p_öô
,

92 
u∑p_öput
,

93 
u∑p_¥Ÿªj
,

94 
u∑p_lowîup
,

95 
u∑p_lowîdown
,

96 
NULL
,

97 
NULL
,

99 
u∑p_¥öçkt
,

100 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL


111 
u∑p_°©e
 
	gu∑p
[
NUM_PPP
];

122 
	$u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
)

124 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

127 
u
->
us_u£r
 = 
lu£r
;

128 
u
->
us_u£æí
 = 
	`°æí
(
lu£r
);

129 
u
->
us_∑sswd
 = 
Õassw‹d
;

130 
u
->
us_∑sswdÀn
 = 
	`°æí
(
Õassw‹d
);

131 
	}
}

140 
	$u∑p_authwôh≥î
(
unô
, *
u£r
, *
∑ssw‹d
)

142 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

144 
	`UPAPDEBUG
((
LOG_INFO
, "upap_authwithpeer: %d user=%sÖassword=%s s=%d\n",

145 
unô
, 
u£r
, 
∑ssw‹d
, 
u
->
us_˛õ¡°©e
));

147 
	`u∑p_£éogö∑sswd
(
unô
, 
u£r
, 
∑ssw‹d
);

149 
u
->
us_å™smôs
 = 0;

152 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
 ||

153 
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

154 
u
->
us_˛õ¡°©e
 = 
UPAPCS_PENDING
;

158 
	`u∑p_ßuthªq
(
u
);

159 
	}
}

168 
	$u∑p_auth≥î
(
unô
)

170 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

173 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
 ||

174 
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

175 
u
->
us_£rvî°©e
 = 
UPAPSS_PENDING
;

179 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

180 i‡(
u
->
us_ªqtimeout
 > 0) {

181 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

183 
	}
}

194 
	$u∑p_öô
(
unô
)

196 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

198 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_öô: %d\n", 
unô
));

199 
u
->
us_unô
 = 
unô
;

200 
u
->
us_u£r
 = 
NULL
;

201 
u
->
us_u£æí
 = 0;

202 
u
->
us_∑sswd
 = 
NULL
;

203 
u
->
us_∑sswdÀn
 = 0;

204 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

205 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

206 
u
->
us_id
 = 0;

207 
u
->
us_timeouâime
 = 
UPAP_DEFTIMEOUT
;

208 
u
->
us_maxå™smôs
 = 10;

209 
u
->
us_ªqtimeout
 = 
UPAP_DEFREQTIME
;

210 
	}
}

216 
	$u∑p_timeout
(*
¨g
)

218 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

220 
	`UPAPDEBUG
((
LOG_INFO
, "upap_timeout: %dÅimeout %dÉxpired s=%d\n",

221 
u
->
us_unô
, u->
us_timeouâime
, u->
us_˛õ¡°©e
));

223 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

227 i‡(
u
->
us_å™smôs
 >u->
us_maxå™smôs
) {

229 
	`UPAPDEBUG
((
LOG_ERR
, "NoÑesponseÅo PAPáuthenticate-requests\n"));

230 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

231 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

235 
	`u∑p_ßuthªq
(
u
);

236 
	}
}

243 
	$u∑p_ªqtimeout
(*
¨g
)

245 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

247 i‡(
u
->
us_£rvî°©e
 !
UPAPSS_LISTEN
) {

251 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

252 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

253 
	}
}

262 
	$u∑p_lowîup
(
unô
)

264 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

266 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîup: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

268 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
) {

269 
u
->
us_˛õ¡°©e
 = 
UPAPCS_CLOSED
;

270 } i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

271 
	`u∑p_ßuthªq
(
u
);

274 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
) {

275 
u
->
us_£rvî°©e
 = 
UPAPSS_CLOSED
;

276 } i‡(
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

277 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

278 i‡(
u
->
us_ªqtimeout
 > 0) {

279 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

282 
	}
}

291 
	$u∑p_lowîdown
(
unô
)

293 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

295 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîdown: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

297 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

298 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

300 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
 && u->
us_ªqtimeout
 > 0) {

301 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

304 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

305 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

306 
	}
}

315 
	$u∑p_¥Ÿªj
(
unô
)

317 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

319 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

320 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed dueÅoÖrotocol-reject\n"));

321 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_PAP
);

323 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
) {

324 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication ofÖeer failed (protocol-reject)\n"));

325 
	`auth_≥î_Áû
(
unô
, 
PPP_PAP
);

327 
	`u∑p_lowîdown
(
unô
);

328 
	}
}

335 
	$u∑p_öput
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
l
)

337 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

338 
u_ch¨
 *
öp
;

339 
u_ch¨
 
code
, 
id
;

340 
Àn
;

346 
öp
 = 
ö∑ckë
;

347 i‡(
l
 < 
UPAP_HEADERLEN
) {

348 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd short header.\n"));

351 
	`GETCHAR
(
code
, 
öp
);

352 
	`GETCHAR
(
id
, 
öp
);

353 
	`GETSHORT
(
Àn
, 
öp
);

354 i‡(
Àn
 < 
UPAP_HEADERLEN
) {

355 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd illegalÜength.\n"));

358 i‡(
Àn
 > 
l
) {

359 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd shortÖacket.\n"));

362 
Àn
 -
UPAP_HEADERLEN
;

367 
code
) {

368 
UPAP_AUTHREQ
:

369 
	`u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
);

372 
UPAP_AUTHACK
:

373 
	`u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
);

376 
UPAP_AUTHNAK
:

377 
	`u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
);

383 
	}
}

390 
	$u∑p_øuthªq
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

392 
u_ch¨
 
ru£æí
, 
ΩasswdÀn
;

393 *
ru£r
, *
Ωasswd
;

394 
ªtcode
;

395 *
msg
;

396 
msgÀn
;

398 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth: Rcvd id %d.\n", 
id
));

400 i‡(
u
->
us_£rvî°©e
 < 
UPAPSS_LISTEN
) {

408 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_OPEN
) {

409 
	`u∑p_§e•
(
u
, 
UPAP_AUTHACK
, 
id
, "", 0);

412 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_BADAUTH
) {

413 
	`u∑p_§e•
(
u
, 
UPAP_AUTHNAK
, 
id
, "", 0);

420 i‡(
Àn
 <  (
u_ch¨
)) {

421 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

424 
	`GETCHAR
(
ru£æí
, 
öp
);

425 
Àn
 - (
u_ch¨
Ë+ 
ru£æí
 +  (u_char);

426 i‡(
Àn
 < 0) {

427 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

430 
ru£r
 = (*Ë
öp
;

431 
	`INCPTR
(
ru£æí
, 
öp
);

432 
	`GETCHAR
(
ΩasswdÀn
, 
öp
);

433 i‡(
Àn
 < 
ΩasswdÀn
) {

434 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

437 
Ωasswd
 = (*Ë
öp
;

442 
ªtcode
 = 
	`check_∑sswd
(
u
->
us_unô
, 
ru£r
, 
ru£æí
, 
Ωasswd
, 
ΩasswdÀn
, &
msg
, &
msgÀn
);

443 
	`BZERO
(
Ωasswd
, 
ΩasswdÀn
);

445 
	`u∑p_§e•
(
u
, 
ªtcode
, 
id
, 
msg
, 
msgÀn
);

447 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

448 
u
->
us_£rvî°©e
 = 
UPAPSS_OPEN
;

449 
	`auth_≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 
ru£r
, 
ru£æí
);

451 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

452 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

455 i‡(
u
->
us_ªqtimeout
 > 0) {

456 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

458 
	}
}

465 
	$u∑p_øuthack
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

467 
u_ch¨
 
msgÀn
;

468 *
msg
;

470 
	`LWIP_UNUSED_ARG
(
id
);

472 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuthack: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

474 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

481 i‡(
Àn
 <  (
u_ch¨
)) {

482 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

485 
	`GETCHAR
(
msgÀn
, 
öp
);

486 
Àn
 - (
u_ch¨
);

487 i‡(
Àn
 < 
msgÀn
) {

488 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

491 
msg
 = (*Ë
öp
;

492 
	`PRINTMSG
(
msg
, 
msgÀn
);

494 
u
->
us_˛õ¡°©e
 = 
UPAPCS_OPEN
;

496 
	`auth_wôh≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
);

497 
	}
}

504 
	$u∑p_øuth«k
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

506 
u_ch¨
 
msgÀn
;

507 *
msg
;

509 
	`LWIP_UNUSED_ARG
(
id
);

511 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth«k: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

513 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

520 i‡(
Àn
 <  (
u_ch¨
)) {

521 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

524 
	`GETCHAR
(
msgÀn
, 
öp
);

525 
Àn
 - (
u_ch¨
);

526 i‡(
Àn
 < 
msgÀn
) {

527 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

530 
msg
 = (*Ë
öp
;

531 
	`PRINTMSG
(
msg
, 
msgÀn
);

533 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

535 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed\n"));

536 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

537 
	}
}

544 
	$u∑p_ßuthªq
(
u∑p_°©e
 *
u
)

546 
u_ch¨
 *
ouç
;

547 
ouéí
;

549 
ouéí
 = 
UPAP_HEADERLEN
 + 2 *  (
u_ch¨
)

550 + 
u
->
us_u£æí
 + u->
us_∑sswdÀn
;

551 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

553 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

555 
	`PUTCHAR
(
UPAP_AUTHREQ
, 
ouç
);

556 
	`PUTCHAR
(++
u
->
us_id
, 
ouç
);

557 
	`PUTSHORT
(
ouéí
, 
ouç
);

558 
	`PUTCHAR
(
u
->
us_u£æí
, 
ouç
);

559 
	`BCOPY
(
u
->
us_u£r
, 
ouç
, u->
us_u£æí
);

560 
	`INCPTR
(
u
->
us_u£æí
, 
ouç
);

561 
	`PUTCHAR
(
u
->
us_∑sswdÀn
, 
ouç
);

562 
	`BCOPY
(
u
->
us_∑sswd
, 
ouç
, u->
us_∑sswdÀn
);

564 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

566 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_ßuth: Síàid %d\n", 
u
->
us_id
));

568 
	`TIMEOUT
(
u∑p_timeout
, 
u
, u->
us_timeouâime
);

569 ++
u
->
us_å™smôs
;

570 
u
->
us_˛õ¡°©e
 = 
UPAPCS_AUTHREQ
;

571 
	}
}

578 
	$u∑p_§e•
(
u∑p_°©e
 *
u
, 
u_ch¨
 
code
, u_ch¨ 
id
, *
msg
, 
msgÀn
)

580 
u_ch¨
 *
ouç
;

581 
ouéí
;

583 
ouéí
 = 
UPAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
msgÀn
;

584 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

585 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

587 
	`PUTCHAR
(
code
, 
ouç
);

588 
	`PUTCHAR
(
id
, 
ouç
);

589 
	`PUTSHORT
(
ouéí
, 
ouç
);

590 
	`PUTCHAR
(
msgÀn
, 
ouç
);

591 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

592 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

594 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_§e•: Síàcodê%d, id %d s=%d\n", 
code
, 
id
, 
u
->
us_˛õ¡°©e
));

595 
	}
}

601 
u∑p_¥öçkt
(

602 
u_ch¨
 *
p
,

603 
∂í
,

604 (*
¥öãr
) (*, *, ...),

605 *
¨g


608 
	`LWIP_UNUSED_ARG
(
p
);

609 
	`LWIP_UNUSED_ARG
(
∂í
);

610 
	`LWIP_UNUSED_ARG
(
¥öãr
);

611 
	`LWIP_UNUSED_ARG
(
¨g
);

613 
	}
}

	@net/lwip/netif/ppp/pap.h

53 #i‚de‡
PAP_H


54 
	#PAP_H


	)

56 #i‡
PAP_SUPPORT


64 
	#UPAP_HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

70 
	#UPAP_AUTHREQ
 1

	)

71 
	#UPAP_AUTHACK
 2

	)

72 
	#UPAP_AUTHNAK
 3

	)

77 
	#UPAPCS_INITIAL
 0

	)

78 
	#UPAPCS_CLOSED
 1

	)

79 
	#UPAPCS_PENDING
 2

	)

80 
	#UPAPCS_AUTHREQ
 3

	)

81 
	#UPAPCS_OPEN
 4

	)

82 
	#UPAPCS_BADAUTH
 5

	)

87 
	#UPAPSS_INITIAL
 0

	)

88 
	#UPAPSS_CLOSED
 1

	)

89 
	#UPAPSS_PENDING
 2

	)

90 
	#UPAPSS_LISTEN
 3

	)

91 
	#UPAPSS_OPEN
 4

	)

92 
	#UPAPSS_BADAUTH
 5

	)

102 
	su∑p_°©e
 {

103 
	mus_unô
;

104 c⁄° *
	mus_u£r
;

105 
	mus_u£æí
;

106 c⁄° *
	mus_∑sswd
;

107 
	mus_∑sswdÀn
;

108 
	mus_˛õ¡°©e
;

109 
	mus_£rvî°©e
;

110 
u_ch¨
 
	mus_id
;

111 
	mus_timeouâime
;

112 
	mus_å™smôs
;

113 
	mus_maxå™smôs
;

114 
	mus_ªqtimeout
;

115 } 
	tu∑p_°©e
;

122 
u∑p_°©e
 
u∑p
[];

124 
u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
);

125 
u∑p_authwôh≥î
 (, *, *);

126 
u∑p_auth≥î
 ();

128 
¥Ÿít
 
∑p_¥Ÿít
;

	@net/lwip/netif/ppp/ppp.c

83 
	~"lwù/›t.h
"

85 #i‡
PPP_SUPPORT


87 
	~"lwù/ù.h
"

89 
	~"µp.h
"

90 
	~"µpdebug.h
"

92 
	~"øndm.h
"

93 
	~"fsm.h
"

94 #i‡
PAP_SUPPORT


95 
	~"∑p.h
"

97 #i‡
CHAP_SUPPORT


98 
	~"ch≠.h
"

100 
	~"ù˝.h
"

101 
	~"l˝.h
"

102 
	~"magic.h
"

103 
	~"auth.h
"

104 #i‡
VJ_SUPPORT


105 
	~"vj.h
"

107 #i‡
PPPOE_SUPPORT


108 
	~"√tif/µp_€.h
"

111 
	~<°rög.h
>

120 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

121 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

122 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

127 
	mPDIDLE
 = 0,

128 
	mPDSTART
,

129 
	mPDADDRESS
,

130 
	mPDCONTROL
,

131 
	mPDPROTOCOL1
,

132 
	mPDPROTOCOL2
,

133 
	mPDDATA


134 } 
	tPPPDevSèãs
;

136 
	#ESCAPE_P
(
accm
, 
c
Ë(◊ccm)[(cË>> 3] & 
µpACCMMask
[¯& 0x07])

	)

144 
	sPPPC⁄åﬁ_s
 {

145 
	m›íFœg
;

146 #i‡
PPPOE_SUPPORT


147 
√tif
 *
	mëhif
;

148 
µp€_so·c
 *
	mµp€_sc
;

150 
	mif_up
;

151 
	mîrCode
;

152 #i‡
PPPOS_SUPPORT


153 
sio_fd_t
 
	mfd
;

154 
	mkûl_lök
;

155 
	msig_hup
;

156 
pbuf
 *
	möHód
, *
	möTaû
;

157 
PPPDevSèãs
 
	möSèã
;

158 
	möEsˇ≥d
;

159 
u16_t
 
	möPrŸocﬁ
;

160 
u16_t
 
	möFCS
;

162 
	mmtu
;

163 
	mpcomp
;

164 
	maccomp
;

165 
u_l⁄g
 
	mœ°XMô
;

166 
ext_accm
 
	möACCM
;

167 
ext_accm
 
	moutACCM
;

168 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


169 
	mvjE«bÀd
;

170 
vjcom¥ess
 
	mvjComp
;

173 
√tif
 
	m√tif
;

175 
µp_addrs
 
	maddrs
;

177 (*
	mlökSètusCB
)(*
	m˘x
, 
	mîrCode
, *
	m¨g
);

178 *
	mlökSètusCtx
;

180 } 
	tPPPC⁄åﬁ
;

187 
	s≈io˘l
 {

188 
	m¥Ÿocﬁ
;

189 
NPmode
 
	mmode
;

197 #i‡
PPPOS_SUPPORT


198 
µpMaö
(*
pd
);

199 
µpDr›
(
PPPC⁄åﬁ
 *
pc
);

200 
µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
);

207 
u_l⁄g
 
	gsub√tMask
;

209 
PPPC⁄åﬁ
 
	gµpC⁄åﬁ
[
NUM_PPP
];

216 
¥Ÿít
 *
	gµp_¥Ÿocﬁs
[] = {

217 &
l˝_¥Ÿít
,

218 #i‡
PAP_SUPPORT


219 &
∑p_¥Ÿít
,

221 #i‡
CHAP_SUPPORT


222 &
ch≠_¥Ÿít
,

224 #i‡
CBCP_SUPPORT


225 &
cb˝_¥Ÿít
,

227 &
ù˝_¥Ÿít
,

228 #i‡
CCP_SUPPORT


229 &
c˝_¥Ÿít
,

231 
NULL


239 
u_ch¨
 *
	gouçackë_buf
[
NUM_PPP
];

246 #i‡
PPPOS_SUPPORT


250 c⁄° 
u_sh‹t
 
	gfc°ab
[256] = {

287 
u_ch¨
 
	gµpACCMMask
[] = {

300 
	$µpMaöWakeup
(
pd
)

302 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaöWakeup: unô %d\n", 
pd
));

303 
	`sio_ªad_ab‹t
(
µpC⁄åﬁ
[
pd
].
fd
);

304 
	}
}

308 
	$µpLökTîmö©ed
(
pd
)

310 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

312 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökTîmö©ed: unô %d\n", 
pd
));

314 #i‡
PPPOE_SUPPORT


315 if(
pc
->
ëhif
) {

316 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

320 #i‡
PPPOS_SUPPORT


321 
	`µpMaöWakeup
(
pd
);

324 
	}
}

327 
	$µpLökDown
(
pd
)

329 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

331 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökDown: unô %d\n", 
pd
));

333 #i‡
PPPOE_SUPPORT


334 if(
pc
->
ëhif
) {

335 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

339 #i‡
PPPOS_SUPPORT


340 
	`µpMaöWakeup
(
pd
);

343 
	}
}

352 
	$µpSèπCB
(*
¨g
)

354 
pd
 = ()
¨g
;

356 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSèπCB: unô %d\n", 
pd
));

357 
	`l˝_lowîup
(
pd
);

358 
	`l˝_›í
(
pd
);

359 
	}
}

362 
	$µpSt›CB
(*
¨g
)

364 
pd
 = ()
¨g
;

366 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSt›CB: unô %d\n", 
pd
));

367 
	`l˝_˛o£
(
pd
, "UserÑequest");

368 
	}
}

371 
	$µpHupCB
(*
¨g
)

373 
pd
 = ()
¨g
;

375 
	`PPPDEBUG
((
LOG_DEBUG
, "µpHupCB: unô %d\n", 
pd
));

376 
	`l˝_lowîdown
(
pd
);

377 
	`lök_ãrmö©ed
(
pd
);

378 
	}
}

385 
µp_£âögs
 
	gµp_£âögs
;

387 
îr_t


388 
	$µpInô
()

390 
¥Ÿít
 *
¥Ÿp
;

391 
i
, 
j
;

393 
	`mem£t
(&
µp_£âögs
, 0, (ppp_settings));

394 
µp_£âögs
.
u£≥îdns
 = 1;

395 
	`µpSëAuth
(
PPPAUTHTYPE_NONE
, 
NULL
, NULL);

397 
	`magicInô
();

399 
i
 = 0; i < 
NUM_PPP
; i++) {

400 
µpC⁄åﬁ
[
i
].
›íFœg
 = 0;

402 
sub√tMask
 = 
	`ht⁄l
(0xffffff00);

404 
ouçackë_buf
[
i
] = (
u_ch¨
 *)
	`mem_mÆloc
(
PPP_MRU
+
PPP_HDRLEN
);

405 if(!
ouçackë_buf
[
i
]) {

406  
ERR_MEM
;

412 
j
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[j]Ë!
NULL
; ++j) {

413 (*
¥Ÿp
->
öô
)(
i
);

417 #i‡
LINK_STATS


420 
	`mem£t
(&
lwù_°©s
.
lök
, 0, (lwip_stats.link));

423 #i‡
PPPOE_SUPPORT


424 
	`µp€_öô
();

427  
ERR_OK
;

428 
	}
}

431 
	$µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
)

433 
authTy≥
) {

434 
PPPAUTHTYPE_NONE
:

436 #ifde‡
LWIP_PPP_STRICT_PAP_REJECT


437 
µp_£âögs
.
ªfu£_∑p
 = 1;

440 
µp_£âögs
.
ªfu£_∑p
 = 0;

442 
µp_£âögs
.
ªfu£_ch≠
 = 1;

445 
PPPAUTHTYPE_ANY
:

465 
µp_£âögs
.
ªfu£_∑p
 = 0;

466 
µp_£âögs
.
ªfu£_ch≠
 = 0;

469 
PPPAUTHTYPE_PAP
:

470 
µp_£âögs
.
ªfu£_∑p
 = 0;

471 
µp_£âögs
.
ªfu£_ch≠
 = 1;

474 
PPPAUTHTYPE_CHAP
:

475 
µp_£âögs
.
ªfu£_∑p
 = 1;

476 
µp_£âögs
.
ªfu£_ch≠
 = 0;

480 if(
u£r
) {

481 
	`°∫˝y
(
µp_£âögs
.
u£r
, user, (ppp_settings.user)-1);

482 
µp_£âögs
.
u£r
[(ppp_settings.user)-1] = '\0';

484 
µp_£âögs
.
u£r
[0] = '\0';

487 if(
∑sswd
) {

488 
	`°∫˝y
(
µp_£âögs
.
∑sswd
,Öasswd, (ppp_settings.passwd)-1);

489 
µp_£âögs
.
∑sswd
[(ppp_settings.passwd)-1] = '\0';

491 
µp_£âögs
.
∑sswd
[0] = '\0';

493 
	}
}

495 #i‡
PPPOS_SUPPORT


504 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

506 
PPPC⁄åﬁ
 *
pc
;

507 
pd
;

510 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

512 i‡(
pd
 >
NUM_PPP
) {

513 
pd
 = 
PPPERR_OPEN
;

515 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

519 i‡(
pd
 >= 0) {

520 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

522 
	`l˝_öô
(
pd
);

523 
pc
 = &
µpC⁄åﬁ
[
pd
];

524 
pc
->
fd
 = fd;

525 #i‡
PPPOE_SUPPORT


526 
pc
->
ëhif

NULL
;

528 
pc
->
kûl_lök
 = 0;

529 
pc
->
sig_hup
 = 0;

530 
pc
->
if_up
 = 0;

531 
pc
->
îrCode
 = 0;

532 
pc
->
öSèã
 = 
PDIDLE
;

533 
pc
->
öHód
 = 
NULL
;

534 
pc
->
öTaû
 = 
NULL
;

535 
pc
->
öEsˇ≥d
 = 0;

536 
pc
->
œ°XMô
 = 0;

538 #i‡
VJ_SUPPORT


539 
pc
->
vjE«bÀd
 = 0;

540 
	`vj_com¥ess_öô
(&
pc
->
vjComp
);

547 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

548 
pc
->
öACCM
[15] = 0x60;

549 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

550 
pc
->
outACCM
[15] = 0x60;

552 
pc
->
lökSètusCB
 =ÜinkStatusCB;

553 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

555 
	`sys_thªad_√w
(
PPP_THREAD_NAME
, 
µpMaö
, (*)
pd
, 
PPP_THREAD_STACKSIZE
, 
PPP_THREAD_PRIO
);

556 if(!
lökSètusCB
) {

557 
pd
 >0 && !
pc
->
if_up
) {

558 
	`sys_m¶ìp
(500);

559 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

560 
	`µpClo£
(
pd
);

561 i‡(
pc
->
îrCode
) {

562 
pd
 = 
pc
->
îrCode
;

564 
pd
 = 
PPPERR_CONNECT
;

571  
pd
;

572 
	}
}

575 #i‡
PPPOE_SUPPORT


576 
µpOvîEthî√tLökSètusCB
(
pd
, 
up
);

579 
	$µpOvîEthî√tClo£
(
pd
)

581 
PPPC⁄åﬁ
* 
pc
 = &
µpC⁄åﬁ
[
pd
];

584 
	`l˝_˛o£
(
pd
, 
NULL
);

586 
	`µp€_de°roy
(&
pc
->
√tif
);

587 
	}
}

589 
µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

591 
PPPC⁄åﬁ
 *
pc
;

592 
pd
;

594 
	`LWIP_UNUSED_ARG
(
£rvi˚_«me
);

595 
	`LWIP_UNUSED_ARG
(
c⁄˚¡øt‹_«me
);

598 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

599 i‡(
pd
 >
NUM_PPP
) {

600 
pd
 = 
PPPERR_OPEN
;

602 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

606 i‡(
pd
 >= 0) {

608 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

610 
	`l˝_öô
(
pd
);

612 
l˝_w™t›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

613 
l˝_w™t›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

614 
l˝_w™t›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

615 
l˝_w™t›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

617 
l˝_Ælow›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

618 
l˝_Ælow›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

619 
l˝_Ælow›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

620 
l˝_Ælow›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

622 
pc
 = &
µpC⁄åﬁ
[
pd
];

623 
pc
->
if_up
 = 0;

624 
pc
->
îrCode
 = 0;

625 
pc
->
œ°XMô
 = 0;

626 #i‡
PPPOS_SUPPORT


627 
pc
->
kûl_lök
 = 0;

628 
pc
->
sig_hup
 = 0;

629 
pc
->
öSèã
 = 
PDIDLE
;

630 
pc
->
öHód
 = 
NULL
;

631 
pc
->
öTaû
 = 
NULL
;

632 
pc
->
öEsˇ≥d
 = 0;

633 #i‡
VJ_SUPPORT


634 
pc
->
vjE«bÀd
 = 0;

637 
pc
->
ëhif
=Éthif;

639 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

640 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

642 
pc
->
lökSètusCB
 =ÜinkStatusCB;

643 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

645 if(
	`µp€_¸óã
(
ëhif
, 
pd
, 
µpOvîEthî√tLökSètusCB
, &
pc
->
µp€_sc
Ë!
ERR_OK
) {

646 
pc
->
›íFœg
 = 0;

647  
PPPERR_OPEN
;

650 
	`µp€_c⁄√˘
(
pc
->
µp€_sc
);

652 if(!
lökSètusCB
) {

653 
pd
 >0 && !
pc
->
if_up
) {

654 
	`sys_m¶ìp
(500);

655 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

656 
	`µpClo£
(
pd
);

657 i‡(
pc
->
îrCode
) {

658 
pd
 = 
pc
->
îrCode
;

660 
pd
 = 
PPPERR_CONNECT
;

667  
pd
;

668 
	}
}

676 
	$µpClo£
(
pd
)

678 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

679 
°
 = 0;

682 #i‡
PPPOE_SUPPORT


683 if(
pc
->
ëhif
) {

684 
	`PPPDEBUG
((
LOG_DEBUG
, "µpClo£: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

685 
pc
->
îrCode
 = 
PPPERR_USER
;

687 
	`t˝ù_ˇŒback
(
µpSt›CB
, (*)
pd
);

691 #i‡
PPPOS_SUPPORT


692 
pc
->
kûl_lök
 = !0;

693 
	`µpMaöWakeup
(
pd
);

697 if(!
pc
->
lökSètusCB
) {

698 
°
 >0 && 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

699 
	`sys_m¶ìp
(500);

704  
°
;

705 
	}
}

709 
	$µpSigHUP
(
pd
)

711 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

713 #i‡
PPPOE_SUPPORT


714 if(
pc
->
ëhif
) {

715 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSigHUP: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

716 
	`t˝ù_ˇŒback
(
µpHupCB
, (*)
pd
);

720 #i‡
PPPOS_SUPPORT


721 
pc
->
sig_hup
 = 1;

722 
	`µpMaöWakeup
(
pd
);

725 
	}
}

727 #i‡
PPPOS_SUPPORT


729 
	$nPut
(
PPPC⁄åﬁ
 *
pc
, 
pbuf
 *
nb
)

731 
pbuf
 *
b
;

732 
c
;

734 
b
 = 
nb
; b !
NULL
; b = b->
√xt
) {

735 if((
c
 = 
	`sio_wrôe
(
pc
->
fd
, 
b
->
∑ylﬂd
, b->
Àn
)) != b->len) {

736 
	`PPPDEBUG
((
LOG_WARNING
,

737 "PPPÇPut: incom∂ëêsio_wrôe(%d,, %uË%d\n", 
pc
->
fd
, 
b
->
Àn
, 
c
));

738 
	`LINK_STATS_INC
(
lök
.
îr
);

739 
pc
->
œ°XMô
 = 0;

744 
	`pbuf_‰ì
(
nb
);

745 
	`LINK_STATS_INC
(
lök
.
xmô
);

746 
	}
}

754 
pbuf
 *

755 
	$µpAµíd
(
u_ch¨
 
c
, 
pbuf
 *
nb
, 
ext_accm
 *
outACCM
)

757 
pbuf
 *
tb
 = 
nb
;

763 i‡(
nb
 && (
PBUF_POOL_BUFSIZE
 -Çb->
Àn
) < 2) {

764 
tb
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

765 i‡(
tb
) {

766 
nb
->
√xt
 = 
tb
;

768 
	`LINK_STATS_INC
(
lök
.
memîr
);

770 
nb
 = 
tb
;

773 i‡(
nb
) {

774 i‡(
outACCM
 && 
	`ESCAPE_P
(*outACCM, 
c
)) {

775 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
PPP_ESCAPE
;

776 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
 ^ 
PPP_TRANS
;

778 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
;

782  
tb
;

783 
	}
}

786 #i‡
PPPOE_SUPPORT


787 
îr_t


788 
	$µpifOuçutOvîEthî√t
(
pd
, 
pbuf
 *
p
)

790 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

791 
pbuf
 *
pb
;

792 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

793 
i
=0;

795 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + (
¥Ÿocﬁ
), 
PBUF_RAM
);

796 if(!
pb
) {

797 
	`LINK_STATS_INC
(
lök
.
memîr
);

798 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

799  
ERR_MEM
;

802 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

804 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

806 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

807 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
++Ë(
¥Ÿocﬁ
 >> 8) & 0xFF;

809 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
Ë
¥Ÿocﬁ
 & 0xFF;

811 
	`pbuf_chaö
(
pb
, 
p
);

813 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

814 
	`LINK_STATS_INC
(
lök
.
îr
);

815  
PPPERR_DEVICE
;

818 
	`LINK_STATS_INC
(
lök
.
xmô
);

819  
ERR_OK
;

820 
	}
}

824 
îr_t


825 
	$µpifOuçut
(
√tif
 *√tif, 
pbuf
 *
pb
, 
ù_addr
 *
ùaddr
)

827 
pd
 = ()
√tif
->
°©e
;

828 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

829 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

830 #i‡
PPPOS_SUPPORT


831 
u_öt
 
fcsOut
 = 
PPP_INITFCS
;

832 
pbuf
 *
hódMB
 = 
NULL
, *
èûMB
 = NULL, *
p
;

833 
u_ch¨
 
c
;

836 
	`LWIP_UNUSED_ARG
(
ùaddr
);

841 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
 || !
pb
) {

842 
	`PPPDEBUG
((
LOG_WARNING
, "pppifOutput[%d]: badÖarmsÖrot=%dÖb=%p\n",

843 
pd
, 
¥Ÿocﬁ
, 
pb
));

844 
	`LINK_STATS_INC
(
lök
.
›ãº
);

845 
	`LINK_STATS_INC
(
lök
.
dr›
);

846  
ERR_ARG
;

850 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

851 
	`PPPDEBUG
((
LOG_ERR
, "µpifOuçut[%d]:ÜökÇŸ up\n", 
pd
));

852 
	`LINK_STATS_INC
(
lök
.
πîr
);

853 
	`LINK_STATS_INC
(
lök
.
dr›
);

854  
ERR_RTE
;

857 #i‡
PPPOE_SUPPORT


858 if(
pc
->
ëhif
) {

859  
	`µpifOuçutOvîEthî√t
(
pd
, 
pb
);

863 #i‡
PPPOS_SUPPORT


865 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

866 i‡(
hódMB
 =
NULL
) {

867 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: fú°áŒo¯Áû\n", 
pd
));

868 
	`LINK_STATS_INC
(
lök
.
memîr
);

869 
	`LINK_STATS_INC
(
lök
.
dr›
);

870  
ERR_MEM
;

873 #i‡
VJ_SUPPORT


878 i‡(
¥Ÿocﬁ
 =
PPP_IP
 && 
pc
->
vjE«bÀd
) {

879 
	`vj_com¥ess_t˝
(&
pc
->
vjComp
, 
pb
)) {

880 
TYPE_IP
:

884 
TYPE_COMPRESSED_TCP
:

885 
¥Ÿocﬁ
 = 
PPP_VJC_COMP
;

887 
TYPE_UNCOMPRESSED_TCP
:

888 
¥Ÿocﬁ
 = 
PPP_VJC_UNCOMP
;

891 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: bad IPÖackë\n", 
pd
));

892 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

893 
	`LINK_STATS_INC
(
lök
.
dr›
);

894 
	`pbuf_‰ì
(
hódMB
);

895  
ERR_VAL
;

900 
èûMB
 = 
hódMB
;

903 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

904 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

907 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

908 i‡(!
pc
->
accomp
) {

909 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_ALLSTATIONS
);

910 
èûMB
 = 
	`µpAµíd
(
PPP_ALLSTATIONS
,ÅaûMB, &
pc
->
outACCM
);

911 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_UI
);

912 
èûMB
 = 
	`µpAµíd
(
PPP_UI
,ÅaûMB, &
pc
->
outACCM
);

914 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

915 
c
 = (
¥Ÿocﬁ
 >> 8) & 0xFF;

916 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

917 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

919 
c
 = 
¥Ÿocﬁ
 & 0xFF;

920 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

921 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

924 
p
 = 
pb
;Ö;Ö =Ö->
√xt
) {

925 
n
;

926 
u_ch¨
 *
sPå
;

928 
sPå
 = (
u_ch¨
*)
p
->
∑ylﬂd
;

929 
n
 = 
p
->
Àn
;

930 
n
-- > 0) {

931 
c
 = *
sPå
++;

934 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

937 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

942 
c
 = ~
fcsOut
 & 0xFF;

943 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

944 
c
 = (~
fcsOut
 >> 8) & 0xFF;

945 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

946 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

949 i‡(!
èûMB
) {

950 
	`PPPDEBUG
((
LOG_WARNING
,

952 
pd
, 
¥Ÿocﬁ
));

953 
	`pbuf_‰ì
(
hódMB
);

954 
	`LINK_STATS_INC
(
lök
.
memîr
);

955 
	`LINK_STATS_INC
(
lök
.
dr›
);

956  
ERR_MEM
;

960 
	`PPPDEBUG
((
LOG_INFO
, "µpifOuçut[%d]:ÖrŸo=0x%04X\n", 
pd
, 
¥Ÿocﬁ
));

962 
	`nPut
(
pc
, 
hódMB
);

965  
ERR_OK
;

966 
	}
}

971 
	$µpIOCé
(
pd
, 
cmd
, *
¨g
)

973 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

974 
°
 = 0;

976 i‡(
pd
 < 0 ||Öd >
NUM_PPP
) {

977 
°
 = 
PPPERR_PARAM
;

979 
cmd
) {

980 
PPPCTLG_UPSTATUS
:

981 i‡(
¨g
) {

982 *(*)
¨g
 = ()(
pc
->
if_up
);

984 
°
 = 
PPPERR_PARAM
;

987 
PPPCTLS_ERRCODE
:

988 i‡(
¨g
) {

989 
pc
->
îrCode
 = *(*)
¨g
;

991 
°
 = 
PPPERR_PARAM
;

994 
PPPCTLG_ERRCODE
:

995 i‡(
¨g
) {

996 *(*)
¨g
 = ()(
pc
->
îrCode
);

998 
°
 = 
PPPERR_PARAM
;

1001 #i‡
PPPOS_SUPPORT


1002 
PPPCTLG_FD
:

1003 i‡(
¨g
) {

1004 *(
sio_fd_t
 *)
¨g
 = 
pc
->
fd
;

1006 
°
 = 
PPPERR_PARAM
;

1011 
°
 = 
PPPERR_PARAM
;

1016  
°
;

1017 
	}
}

1022 
u_öt


1023 
	$µpMTU
(
pd
)

1025 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1026 
u_öt
 
°
;

1029 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1030 
°
 = 0;

1032 
°
 = 
pc
->
mtu
;

1035  
°
;

1036 
	}
}

1038 #i‡
PPPOE_SUPPORT


1040 
	$µpWrôeOvîEthî√t
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1042 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1043 
pbuf
 *
pb
;

1046 
s
 += 2;

1047 
n
 -= 2;

1049 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + 
n
, 
PBUF_RAM
);

1050 if(!
pb
) {

1051 
	`LINK_STATS_INC
(
lök
.
memîr
);

1052 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1053  
PPPERR_ALLOC
;

1056 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

1058 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1060 
	`SMEMCPY
(
pb
->
∑ylﬂd
, 
s
, 
n
);

1062 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

1063 
	`LINK_STATS_INC
(
lök
.
îr
);

1064  
PPPERR_DEVICE
;

1067 
	`LINK_STATS_INC
(
lök
.
xmô
);

1068  
PPPERR_NONE
;

1069 
	}
}

1078 
	$µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1080 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1081 #i‡
PPPOS_SUPPORT


1082 
u_ch¨
 
c
;

1083 
u_öt
 
fcsOut
;

1084 
pbuf
 *
hódMB
, *
èûMB
;

1087 #i‡
PPPOE_SUPPORT


1088 if(
pc
->
ëhif
) {

1089  
	`µpWrôeOvîEthî√t
(
pd
, 
s
, 
n
);

1093 #i‡
PPPOS_SUPPORT


1094 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1095 i‡(
hódMB
 =
NULL
) {

1096 
	`LINK_STATS_INC
(
lök
.
memîr
);

1097 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1098  
PPPERR_ALLOC
;

1101 
èûMB
 = 
hódMB
;

1105 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

1106 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1108 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1110 
fcsOut
 = 
PPP_INITFCS
;

1112 
n
-- > 0) {

1113 
c
 = *
s
++;

1116 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

1119 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1123 
c
 = ~
fcsOut
 & 0xFF;

1124 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1125 
c
 = (~
fcsOut
 >> 8) & 0xFF;

1126 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1127 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1131 i‡(!
èûMB
) {

1132 
	`PPPDEBUG
((
LOG_WARNING
,

1133 "µpWrôe[%d]: AŒo¯î∏- dr›pögÖbu‡Àn=%d\n", 
pd
, 
hódMB
->
Àn
));

1135 
	`pbuf_‰ì
(
hódMB
);

1136 
	`LINK_STATS_INC
(
lök
.
memîr
);

1137 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1138  
PPPERR_ALLOC
;

1141 
	`PPPDEBUG
((
LOG_INFO
, "µpWrôe[%d]:Üí=%d\n", 
pd
, 
hódMB
->
Àn
));

1143 
	`nPut
(
pc
, 
hódMB
);

1146  
PPPERR_NONE
;

1147 
	}
}

1154 
	$µp_£nd_c⁄fig
–
unô
, 
mtu
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1156 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1157 
i
;

1159 
pc
->
mtu
 = mtu;

1160 
pc
->
pcomp
 =Öcomp;

1161 
pc
->
accomp
 =áccomp;

1164 
i
 = 0; i < 32/8; i++) {

1165 
pc
->
outACCM
[
i
] = (
u_ch¨
)((
asyncm≠
 >> (8 * i)) & 0xFF);

1167 
	`PPPDEBUG
((
LOG_INFO
, "ppp_send_config[%d]: outACCM=%X %X %X %X\n",

1168 
unô
,

1169 
pc
->
outACCM
[0],Öc->outACCM[1],Öc->outACCM[2],Öc->outACCM[3]));

1170 
	}
}

1177 
	$µp_£t_xaccm
(
unô
, 
ext_accm
 *
accm
)

1179 
	`SMEMCPY
(
µpC⁄åﬁ
[
unô
].
outACCM
, 
accm
, (
ext_accm
));

1180 
	`PPPDEBUG
((
LOG_INFO
, "ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",

1181 
unô
,

1182 
µpC⁄åﬁ
[
unô
].
outACCM
[0],

1183 
µpC⁄åﬁ
[
unô
].
outACCM
[1],

1184 
µpC⁄åﬁ
[
unô
].
outACCM
[2],

1185 
µpC⁄åﬁ
[
unô
].
outACCM
[3]));

1186 
	}
}

1194 
	$µp_ªcv_c⁄fig
–
unô
, 
mru
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1196 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1197 
i
;

1199 
	`LWIP_UNUSED_ARG
(
accomp
);

1200 
	`LWIP_UNUSED_ARG
(
pcomp
);

1201 
	`LWIP_UNUSED_ARG
(
mru
);

1204 
i
 = 0; i < 32 / 8; i++) {

1205 
pc
->
öACCM
[
i
] = (
u_ch¨
)(
asyncm≠
 >> (i * 8));

1207 
	`PPPDEBUG
((
LOG_INFO
, "ppp_recv_config[%d]: inACCM=%X %X %X %X\n",

1208 
unô
,

1209 
pc
->
öACCM
[0],Öc->inACCM[1],Öc->inACCM[2],Öc->inACCM[3]));

1210 
	}
}

1220 
	$c˝_ã°
–
unô
, 
›t_Àn
, 
f‹_å™smô
, 
u_ch¨
 *
›t_±r
)

1223 
	}
}

1229 
	$c˝_Êags_£t
(
unô
, 
is›í
, 
isup
)

1232 
	}
}

1240 
	$c˝_Áèl_îr‹
(
unô
)

1244 
	}
}

1251 
	$gë_idÀ_time
(
u
, 
µp_idÀ
 *
ù
)

1254 
	`LWIP_UNUSED_ARG
(
u
);

1255 
	`LWIP_UNUSED_ARG
(
ù
);

1258 
	}
}

1269 
u32_t


1270 
	$GëMask
(
u32_t
 
addr
)

1272 
u32_t
 
mask
, 
nmask
;

1274 
	`ht⁄l
(
addr
);

1275 i‡(
	`IN_CLASSA
(
addr
)) {

1276 
nmask
 = 
IN_CLASSA_NET
;

1277 } i‡(
	`IN_CLASSB
(
addr
)) {

1278 
nmask
 = 
IN_CLASSB_NET
;

1280 
nmask
 = 
IN_CLASSC_NET
;

1284 
mask
 = 
sub√tMask
 | 
	`ht⁄l
(
nmask
);

1291  
mask
;

1292 
	}
}

1298 
	$sifvjcomp
–
pd
, 
vjcomp
, 
cidcomp
, 
maxcid
)

1300 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1301 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1303 
pc
->
vjE«bÀd
 = 
vjcomp
;

1304 
pc
->
vjComp
.
com¥essSlŸ
 = 
cidcomp
;

1305 
pc
->
vjComp
.
maxSlŸIndex
 = 
maxcid
;

1306 
	`PPPDEBUG
((
LOG_INFO
, "sifvjcomp: VJ compressÉnable=%d slot=%d max slot=%d\n",

1307 
vjcomp
, 
cidcomp
, 
maxcid
));

1311 
	}
}

1316 
îr_t


1317 
	$µpifNëifInô
(
√tif
 *netif)

1319 
√tif
->
«me
[0] = 'p';

1320 
√tif
->
«me
[1] = 'p';

1321 
√tif
->
ouçut
 = 
µpifOuçut
;

1322 
√tif
->
mtu
 = 
	`µpMTU
((Íëif->
°©e
);

1323  
ERR_OK
;

1324 
	}
}

1331 
	$sifup
(
pd
)

1333 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1334 
°
 = 1;

1336 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1337 
°
 = 0;

1338 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1340 
	`√tif_ªmove
(&
pc
->
√tif
);

1341 i‡(
	`√tif_add
(&
pc
->
√tif
, &pc->
addrs
.
our_ùaddr
, &pc->addrs.
√tmask
, &pc->addrs.
his_ùaddr
, (*)
pd
, 
µpifNëifInô
, 
ù_öput
)) {

1342 
	`√tif_£t_up
(&
pc
->
√tif
);

1343 #i‡
LWIP_DHCP


1345 
pc
->
√tif
.
dh˝
 = (dh˝ *Ë&pc->
addrs
;

1347 
pc
->
if_up
 = 1;

1348 
pc
->
îrCode
 = 
PPPERR_NONE
;

1350 
	`PPPDEBUG
((
LOG_DEBUG
, "sifup: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1351 if(
pc
->
lökSètusCB
) {

1352 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
, &pc->
addrs
);

1355 
°
 = 0;

1356 
	`PPPDEBUG
((
LOG_ERR
, "sifup[%d]:Çëif_add faûed\n", 
pd
));

1360  
°
;

1361 
	}
}

1367 
	$si‚pmode
(
u
, 
¥Ÿo
, 
NPmode
 
mode
)

1369 
	`LWIP_UNUSED_ARG
(
u
);

1370 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

1371 
	`LWIP_UNUSED_ARG
(
mode
);

1373 
	}
}

1379 
	$sifdown
(
pd
)

1381 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1382 
°
 = 1;

1384 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1385 
°
 = 0;

1386 
	`PPPDEBUG
((
LOG_WARNING
, "sifdown[%d]: badÖ¨ms\n", 
pd
));

1388 
pc
->
if_up
 = 0;

1389 
	`√tif_ªmove
(&
pc
->
√tif
);

1390 
	`PPPDEBUG
((
LOG_DEBUG
, "sifdown: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1391 if(
pc
->
lökSètusCB
) {

1392 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
, 
PPPERR_CONNECT
, 
NULL
);

1395  
°
;

1396 
	}
}

1408 
	$siÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
, u32_à
m
, u32_à
ns1
, u32_à
ns2
)

1410 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1411 
°
 = 1;

1413 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1414 
°
 = 0;

1415 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1417 
	`SMEMCPY
(&
pc
->
addrs
.
our_ùaddr
, &
o
, (o));

1418 
	`SMEMCPY
(&
pc
->
addrs
.
his_ùaddr
, &
h
, (h));

1419 
	`SMEMCPY
(&
pc
->
addrs
.
√tmask
, &
m
, (m));

1420 
	`SMEMCPY
(&
pc
->
addrs
.
dns1
, &
ns1
, (ns1));

1421 
	`SMEMCPY
(&
pc
->
addrs
.
dns2
, &
ns2
, (ns2));

1423  
°
;

1424 
	}
}

1434 
	$ciÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
)

1436 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1437 
°
 = 1;

1439 
	`LWIP_UNUSED_ARG
(
o
);

1440 
	`LWIP_UNUSED_ARG
(
h
);

1441 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1442 
°
 = 0;

1443 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1445 
	`IP4_ADDR
(&
pc
->
addrs
.
our_ùaddr
, 0,0,0,0);

1446 
	`IP4_ADDR
(&
pc
->
addrs
.
his_ùaddr
, 0,0,0,0);

1447 
	`IP4_ADDR
(&
pc
->
addrs
.
√tmask
, 255,255,255,0);

1448 
	`IP4_ADDR
(&
pc
->
addrs
.
dns1
, 0,0,0,0);

1449 
	`IP4_ADDR
(&
pc
->
addrs
.
dns2
, 0,0,0,0);

1451  
°
;

1452 
	}
}

1458 
	$sifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1460 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1461 
°
 = 1;

1463 
	`LWIP_UNUSED_ARG
(
l
);

1464 
	`LWIP_UNUSED_ARG
(
g
);

1466 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1467 
°
 = 0;

1468 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1470 
	`√tif_£t_deÁu…
(&
pc
->
√tif
);

1475  
°
;

1476 
	}
}

1482 
	$cifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1484 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1485 
°
 = 1;

1487 
	`LWIP_UNUSED_ARG
(
l
);

1488 
	`LWIP_UNUSED_ARG
(
g
);

1490 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1491 
°
 = 0;

1492 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1494 
	`√tif_£t_deÁu…
(
NULL
);

1497  
°
;

1498 
	}
}

1504 #i‡
PPPOS_SUPPORT


1508 
	$µpMaö
(*
¨g
)

1510 
pd
 = ()
¨g
;

1511 
pbuf
 *
p
;

1512 
PPPC⁄åﬁ
* 
pc
;

1513 
c
;

1515 
pc
 = &
µpC⁄åﬁ
[
pd
];

1517 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
PPP_MRU
+
PPP_HDRLEN
, 
PBUF_RAM
);

1518 i‡(!
p
) {

1519 
	`LWIP_ASSERT
("∞!NULL", 
p
);

1520 
pc
->
îrCode
 = 
PPPERR_ALLOC
;

1521 
out
;

1527 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1528 
	`t˝ù_ˇŒback
(
µpSèπCB
, 
¨g
);

1529 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

1530 i‡(
pc
->
kûl_lök
) {

1531 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

1532 
pc
->
îrCode
 = 
PPPERR_USER
;

1534 
	`t˝ù_ˇŒback
(
µpSt›CB
, 
¨g
);

1535 
pc
->
kûl_lök
 = 0;

1536 } i‡(
pc
->
sig_hup
) {

1537 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

1538 
pc
->
sig_hup
 = 0;

1539 
	`t˝ù_ˇŒback
(
µpHupCB
, 
¨g
);

1541 
c
 = 
	`sio_ªad
(
pc
->
fd
, 
p
->
∑ylﬂd
,Ö->
Àn
);

1542 if(
c
 > 0) {

1543 
	`µpInProc
(
pd
, 
p
->
∑ylﬂd
, 
c
);

1545 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sio_ªadÜí=%dÑëu∫ed %d\n", 
pd
, 
p
->
Àn
, 
c
));

1546 
	`sys_m¶ìp
(1);

1550 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: PHASE_DEAD\n", 
pd
));

1551 
	`µpDr›
(
pc
);

1552 
	`pbuf_‰ì
(
p
);

1554 
out
:

1555 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1556 if(
pc
->
lökSètusCB
) {

1557 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1560 
pc
->
›íFœg
 = 0;

1561 
	}
}

1564 #i‡
PPPOE_SUPPORT


1567 
	$µpOvîEthî√tInôFaûed
(* 
¨g
)

1569 
PPPC⁄åﬁ
* 
pc
;

1570 
pd
 = ()
¨g
;

1572 
	`µpHupCB
(
¨g
);

1573 
	`µpSt›CB
(
¨g
);

1575 
pc
 = &
µpC⁄åﬁ
[
pd
];

1576 
	`µp€_de°roy
(&
pc
->
√tif
);

1577 
pc
->
›íFœg
 = 0;

1579 if(
pc
->
lökSètusCB
) {

1580 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1582 
	}
}

1585 
	$µpOvîEthî√tLökSètusCB
(
pd
, 
up
)

1587 if(
up
) {

1588 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1589 
	`t˝ù_ˇŒback
(
µpSèπCB
, (*)
pd
);

1591 
PPPC⁄åﬁ
* 
pc
;

1592 
pc
 = &
µpC⁄åﬁ
[
pd
];

1593 
	`t˝ù_ˇŒback
(
µpOvîEthî√tInôFaûed
, (*)
pd
);

1595 
	}
}

1598 
pbuf
 *

1599 
	$µpSögÀBuf
(
pbuf
 *
p
)

1601 
pbuf
 *
q
, *
b
;

1602 
u_ch¨
 *
∂
;

1604 if(
p
->
tŸ_Àn
 =p->
Àn
) {

1605  
p
;

1608 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

1609 if(!
q
) {

1610 
	`PPPDEBUG
((
LOG_ERR
,

1611 "µpSögÀBuf: u«bÀÅÿÆlo¯√w bu‡(%d)\n", 
p
->
tŸ_Àn
));

1612  
p
;

1615 
b
 = 
p
, 
∂
 = 
q
->
∑ylﬂd
; b !
NULL
; b = b->
√xt
) {

1616 
	`MEMCPY
(
∂
, 
b
->
∑ylﬂd
, b->
Àn
);

1617 
∂
 +
b
->
Àn
;

1620 
	`pbuf_‰ì
(
p
);

1622  
q
;

1623 
	}
}

1625 
	sµpI≈utHódî
 {

1626 
	munô
;

1627 
u16_t
 
	m¥Ÿo
;

1635 
	$µpI≈ut
(*
¨g
)

1637 
pbuf
 *
nb
 = (pbu‡*)
¨g
;

1638 
u16_t
 
¥Ÿocﬁ
;

1639 
pd
;

1641 
pd
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
unô
;

1642 
¥Ÿocﬁ
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
¥Ÿo
;

1644 if(
	`pbuf_hódî
(
nb
, -()(
µpI≈utHódî
))) {

1645 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1646 
dr›
;

1649 
	`LINK_STATS_INC
(
lök
.
ªcv
);

1656 if((
l˝_pha£
[
pd
] <
PHASE_AUTHENTICATE
Ë&& (
¥Ÿocﬁ
 !
PPP_LCP
)) {

1657 if(!((
¥Ÿocﬁ
 =
PPP_LQR
Ë|| (¥Ÿocﬁ =
PPP_PAP
Ë|| (¥Ÿocﬁ =
PPP_CHAP
)) ||

1658 (
l˝_pha£
[
pd
] !
PHASE_AUTHENTICATE
)) {

1659 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut: disˇrdögÖrŸÿ0x%04X i¿pha£ %d\n", 
¥Ÿocﬁ
, 
l˝_pha£
[
pd
]));

1660 
dr›
;

1664 
¥Ÿocﬁ
) {

1665 
PPP_VJC_COMP
:

1666 #i‡
VJ_SUPPORT


1667 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_com∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1672 i‡((
	`vj_uncom¥ess_t˝
(&
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&& (µpC⁄åﬁ[pd].
√tif
.
öput
)) {

1673 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1677 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ com¥es£d\n", 
pd
));

1680 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: dr› VJ Com∞ö %d:%s\n", 
pd
, 
nb
->
Àn
,Çb->
∑ylﬂd
));

1684 
PPP_VJC_UNCOMP
:

1685 #i‡
VJ_SUPPORT


1686 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_u¿öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1691 i‡((
	`vj_uncom¥ess_uncomp
(
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&&ÖµC⁄åﬁ[pd].
√tif
.
öput
) {

1692 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1696 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ uncom¥es£d\n", 
pd
));

1699 
	`PPPDEBUG
((
LOG_INFO
,

1701 
pd
, 
nb
->
Àn
, 
	`LWIP_MIN
“b->À¿* 2, 40),Çb->
∑ylﬂd
));

1705 
PPP_IP
:

1706 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: i∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1707 i‡(
µpC⁄åﬁ
[
pd
].
√tif
.
öput
) {

1708 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1714 
¥Ÿít
 *
¥Ÿp
;

1715 
i
;

1720 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

1721 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =¥Ÿocﬁ &&ÖrŸp->
íabÀd_Êag
) {

1722 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: %†Àn=%d\n", 
pd
, 
¥Ÿp
->
«me
, 
nb
->
Àn
));

1723 
nb
 = 
	`µpSögÀBuf
(nb);

1724 (*
¥Ÿp
->
öput
)(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1725 
out
;

1730 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]:Ñeje˘ög unsuµ‹ãdÖrŸÿ0x%04XÜí=%d\n", 
pd
, 
¥Ÿocﬁ
, 
nb
->
Àn
));

1731 i‡(
	`pbuf_hódî
(
nb
, (
¥Ÿocﬁ
))) {

1732 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1733 
dr›
;

1735 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1736 
¥Ÿocﬁ
 = 
	`ht⁄s
(protocol);

1737 
	`SMEMCPY
(
nb
->
∑ylﬂd
, &
¥Ÿocﬁ
, (protocol));

1739 
	`l˝_•rŸªj
(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1744 
dr›
:

1745 
	`LINK_STATS_INC
(
lök
.
dr›
);

1747 
out
:

1748 
	`pbuf_‰ì
(
nb
);

1750 
	}
}

1752 #i‡
PPPOS_SUPPORT


1757 
	$µpDr›
(
PPPC⁄åﬁ
 *
pc
)

1759 i‡(
pc
->
öHód
 !
NULL
) {

1761 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›: %d:%.*H\n", 
pc
->
öHód
->
Àn
, 
	`mö
(60,Öc->öHód->À¿* 2),Öc->öHód->
∑ylﬂd
));

1763 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›:Öbu‡Àn=%d\n", 
pc
->
öHód
->
Àn
));

1764 i‡(
pc
->
öTaû
 && (pc->öTaû !pc->
öHód
)) {

1765 
	`pbuf_‰ì
(
pc
->
öTaû
);

1767 
	`pbuf_‰ì
(
pc
->
öHód
);

1768 
pc
->
öHód
 = 
NULL
;

1769 
pc
->
öTaû
 = 
NULL
;

1771 #i‡
VJ_SUPPORT


1772 
	`vj_uncom¥ess_îr
(&
pc
->
vjComp
);

1775 
	`LINK_STATS_INC
(
lök
.
dr›
);

1776 
	}
}

1782 
	$µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
)

1784 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1785 
pbuf
 *
√xtNBuf
;

1786 
u_ch¨
 
curCh¨
;

1788 
	`PPPDEBUG
((
LOG_DEBUG
, "µpInProc[%d]: gŸ %d byãs\n", 
pd
, 
l
));

1789 
l
-- > 0) {

1790 
curCh¨
 = *
s
++;

1793 i‡(
	`ESCAPE_P
(
pc
->
öACCM
, 
curCh¨
)) {

1799 i‡(
curCh¨
 =
PPP_ESCAPE
) {

1800 
pc
->
öEsˇ≥d
 = 1;

1802 } i‡(
curCh¨
 =
PPP_FLAG
) {

1804 i‡(
pc
->
öSèã
 <
PDADDRESS
) {

1807 } i‡(
pc
->
öSèã
 < 
PDDATA
) {

1808 
	`PPPDEBUG
((
LOG_WARNING
,

1810 
pd
, 
pc
->
öSèã
));

1811 
	`LINK_STATS_INC
(
lök
.
À√º
);

1812 
	`µpDr›
(
pc
);

1814 } i‡(
pc
->
öFCS
 !
PPP_GOODFCS
) {

1815 
	`PPPDEBUG
((
LOG_INFO
,

1817 
pd
, 
pc
->
öFCS
,Öc->
öPrŸocﬁ
));

1818 
	`LINK_STATS_INC
(
lök
.
chkîr
);

1819 
	`µpDr›
(
pc
);

1823 if(
pc
->
öTaû
->
Àn
 >= 2) {

1824 
pc
->
öTaû
->
Àn
 -= 2;

1826 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1827 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1828 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1831 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1832 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1833 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1836 
	`pbuf_ªÆloc
(
pc
->
öHód
,Öc->öHód->
tŸ_Àn
 - 2);

1840 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pc
->
öHód
Ë!
ERR_OK
) {

1841 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1842 
	`pbuf_‰ì
(
pc
->
öHód
);

1843 
	`LINK_STATS_INC
(
lök
.
dr›
);

1845 
pc
->
öHód
 = 
NULL
;

1846 
pc
->
öTaû
 = 
NULL
;

1850 
pc
->
öFCS
 = 
PPP_INITFCS
;

1851 
pc
->
öSèã
 = 
PDADDRESS
;

1852 
pc
->
öEsˇ≥d
 = 0;

1856 
	`PPPDEBUG
((
LOG_WARNING
,

1857 "µpInProc[%d]: Dr›pög ACCM ch¨ <%d>\n", 
pd
, 
curCh¨
));

1862 i‡(
pc
->
öEsˇ≥d
) {

1863 
pc
->
öEsˇ≥d
 = 0;

1864 
curCh¨
 ^
PPP_TRANS
;

1868 
pc
->
öSèã
) {

1869 
PDIDLE
:

1872 i‡(
curCh¨
 !
PPP_ALLSTATIONS
) {

1877 
PDSTART
:

1879 
pc
->
öFCS
 = 
PPP_INITFCS
;

1882 
PDADDRESS
:

1883 i‡(
curCh¨
 =
PPP_ALLSTATIONS
) {

1884 
pc
->
öSèã
 = 
PDCONTROL
;

1889 
PDCONTROL
:

1891 i‡(
curCh¨
 =
PPP_UI
) {

1892 
pc
->
öSèã
 = 
PDPROTOCOL1
;

1897 
	`PPPDEBUG
((
LOG_WARNING
,

1898 "µpInProc[%d]: InvÆid c⁄åﬁ <%d>\n", 
pd
, 
curCh¨
));

1899 
pc
->
öSèã
 = 
PDSTART
;

1902 
PDPROTOCOL1
:

1905 i‡(
curCh¨
 & 1) {

1906 
pc
->
öPrŸocﬁ
 = 
curCh¨
;

1907 
pc
->
öSèã
 = 
PDDATA
;

1909 
pc
->
öPrŸocﬁ
 = (
u_öt
)
curCh¨
 << 8;

1910 
pc
->
öSèã
 = 
PDPROTOCOL2
;

1913 
PDPROTOCOL2
:

1914 
pc
->
öPrŸocﬁ
 |
curCh¨
;

1915 
pc
->
öSèã
 = 
PDDATA
;

1917 
PDDATA
:

1919 i‡(
pc
->
öTaû
 =
NULL
 ||Öc->öTaû->
Àn
 =
PBUF_POOL_BUFSIZE
) {

1920 if(
pc
->
öTaû
) {

1921 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1922 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1923 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1927 
√xtNBuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1928 i‡(
√xtNBuf
 =
NULL
) {

1932 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]: NO FREE MBUFS!\n", 
pd
));

1933 
	`LINK_STATS_INC
(
lök
.
memîr
);

1934 
	`µpDr›
(
pc
);

1935 
pc
->
öSèã
 = 
PDSTART
;

1938 i‡(
pc
->
öHód
 =
NULL
) {

1939 
µpI≈utHódî
 *
pih
 = 
√xtNBuf
->
∑ylﬂd
;

1941 
pih
->
unô
 = 
pd
;

1942 
pih
->
¥Ÿo
 = 
pc
->
öPrŸocﬁ
;

1944 
√xtNBuf
->
Àn
 +(*
pih
);

1946 
pc
->
öHód
 = 
√xtNBuf
;

1948 
pc
->
öTaû
 = 
√xtNBuf
;

1951 ((
u_ch¨
*)
pc
->
öTaû
->
∑ylﬂd
)[pc->öTaû->
Àn
++] = 
curCh¨
;

1956 
pc
->
öFCS
 = 
	`PPP_FCS
’c->öFCS, 
curCh¨
);

1960 
	`avR™domize
();

1961 
	}
}

1964 #i‡
PPPOE_SUPPORT


1966 
	$µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
)

1968 
µpI≈utHódî
 *
pih
;

1969 
u16_t
 
öPrŸocﬁ
;

1971 if(
pb
->
Àn
 < (
öPrŸocﬁ
)) {

1972 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet:Åoo small forÖrotocol field\n"));

1973 
dr›
;

1976 
öPrŸocﬁ
 = (((
u8_t
 *)
pb
->
∑ylﬂd
)[0] << 8) | ((u8_t*)pb->payload)[1];

1979 i‡(
	`pbuf_hódî
(
pb
, (*
pih
Ë- (
öPrŸocﬁ
)) != 0) {

1980 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet: couldÇotállocateÑoom for header\n"));

1981 
dr›
;

1984 
pih
 = 
pb
->
∑ylﬂd
;

1986 
pih
->
unô
 = 
pd
;

1987 
pih
->
¥Ÿo
 = 
öPrŸocﬁ
;

1990 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pb
Ë!
ERR_OK
) {

1991 
	`PPPDEBUG
((
LOG_ERR
, "µpInProcOvîEthî√t[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1992 
dr›
;

1997 
dr›
:

1998 
	`LINK_STATS_INC
(
lök
.
dr›
);

1999 
	`pbuf_‰ì
(
pb
);

2001 
	}
}

	@net/lwip/netif/ppp/ppp.h

35 #i‚de‡
PPP_H


36 
	#PPP_H


	)

38 
	~"lwù/›t.h
"

40 #i‡
PPP_SUPPORT


42 
	~"lwù/def.h
"

43 
	~"lwù/sio.h
"

44 
	~"lwù/≠i.h
"

45 
	~"lwù/sockës.h
"

46 
	~"lwù/°©s.h
"

47 
	~"lwù/mem.h
"

48 
	~"lwù/t˝ù.h
"

49 
	~"lwù/√tif.h
"

97 
	#TIMEOUT
(
f
, 
a
, 
t
Ë
	`sys_u¡imeout
((f), (a)), 
	`sys_timeout
(—)*1000, (f), (a))

	)

98 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

101 #i‚de‡
__u_ch¨_deföed


104 
	tu_l⁄g
;

105 
	tu_öt
;

106 
	tu_sh‹t
;

107 
	tu_ch¨
;

119 
	#PPP_HDRLEN
 4

	)

120 
	#PPP_FCSLEN
 2

	)

126 
	#PPP_ALLSTATIONS
 0xf‡

	)

127 
	#PPP_UI
 0x03

	)

128 
	#PPP_FLAG
 0x7ê

	)

129 
	#PPP_ESCAPE
 0x7d

	)

130 
	#PPP_TRANS
 0x20

	)

135 
	#PPP_IP
 0x21

	)

136 
	#PPP_AT
 0x29

	)

137 
	#PPP_VJC_COMP
 0x2d

	)

138 
	#PPP_VJC_UNCOMP
 0x2‡

	)

139 
	#PPP_COMP
 0xfd

	)

140 
	#PPP_IPCP
 0x8021

	)

141 
	#PPP_ATCP
 0x8029

	)

142 
	#PPP_CCP
 0x80fd

	)

143 
	#PPP_LCP
 0xc021

	)

144 
	#PPP_PAP
 0xc023

	)

145 
	#PPP_LQR
 0xc025

	)

146 
	#PPP_CHAP
 0xc223

	)

147 
	#PPP_CBCP
 0xc029

	)

152 
	#PPP_INITFCS
 0xfff‡

	)

153 
	#PPP_GOODFCS
 0xf0b8

	)

154 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

159 
u_ch¨
 
	text_accm
[32];

164 
	eNPmode
 {

165 
	mNPMODE_PASS
,

166 
	mNPMODE_DROP
,

167 
	mNPMODE_ERROR
,

168 
	mNPMODE_QUEUE


177 
	#GETCHAR
(
c
, 
˝
) { \

178 (
c
Ë*(
˝
)++; \

179 }

	)

180 
	#PUTCHAR
(
c
, 
˝
) { \

181 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

182 }

	)

185 
	#GETSHORT
(
s
, 
˝
) { \

186 (
s
Ë*(
˝
); (cp)++; (s) <<= 8; \

187 (
s
Ë|*(
˝
); (cp)++; \

188 }

	)

189 
	#PUTSHORT
(
s
, 
˝
) { \

190 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

191 *(
˝
)++ = (
u_ch¨
Ë(
s
 & 0xff); \

192 }

	)

194 
	#GETLONG
(
l
, 
˝
) { \

195 (
l
Ë*(
˝
); (cp)++; (l) <<= 8; \

196 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

197 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

198 (
l
Ë|*(
˝
); (cp)++; \

199 }

	)

200 
	#PUTLONG
(
l
, 
˝
) { \

201 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

202 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

203 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

204 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

205 }

	)

208 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

209 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

211 
	#BCMP
(
s0
, 
s1
, 
l
Ë
	`memcmp
((
u_ch¨
 *)(s0), (u_ch¨ *)(s1), (l))

	)

212 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`MEMCPY
((d), (s), (l))

	)

213 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

215 #i‡
PPP_DEBUG


216 
	#PRINTMSG
(
m
, 
l
Ë{ m[l] = '\0'; 
	`µp_åa˚
(
LOG_INFO
, "RemŸêmesßge: %s\n", m); }

	)

218 
	#PRINTMSG
(
m
, 
l
)

	)

224 
	#MAKEHEADER
(
p
, 
t
) { \

225 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

226 
	`PUTCHAR
(
PPP_UI
, 
p
); \

227 
	`PUTSHORT
(
t
, 
p
); }

	)

234 
	#PPPERR_NONE
 0

	)

235 
	#PPPERR_PARAM
 -1

	)

236 
	#PPPERR_OPEN
 -2

	)

237 
	#PPPERR_DEVICE
 -3

	)

238 
	#PPPERR_ALLOC
 -4

	)

239 
	#PPPERR_USER
 -5

	)

240 
	#PPPERR_CONNECT
 -6

	)

241 
	#PPPERR_AUTHFAIL
 -7

	)

242 
	#PPPERR_PROTOCOL
 -8

	)

251 
	#PPPCTLG_UPSTATUS
 100

	)

252 
	#PPPCTLS_ERRCODE
 101

	)

253 
	#PPPCTLG_ERRCODE
 102

	)

254 
	#PPPCTLG_FD
 103

	)

264 
	s¥Ÿít
 {

265 
u_sh‹t
 
	m¥Ÿocﬁ
;

267 (*
	möô
Ë(
	munô
);

269 (*
	möput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

271 (*
	m¥Ÿªj
Ë(
	munô
);

273 (*
	mlowîup
Ë(
	munô
);

275 (*
	mlowîdown
Ë(
	munô
);

277 (*
	m›í
Ë(
	munô
);

279 (*
	m˛o£
Ë(
	munô
, *
	mªas⁄
);

282 (*
	m¥öçkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
,

283 (*
	m¥öãr
) (*, *, ...),

284 *
	m¨g
);

286 (*
	md©aöput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

288 
	míabÀd_Êag
;

289 *
	m«me
;

292 (*
	mcheck_›ti⁄s
Ë(
	mu_l⁄g
);

294 (*
	mdem™d_c⁄f
Ë(
	munô
);

296 (*
	ma˘ive_pkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
);

304 
	sµp_idÀ
 {

305 
u_sh‹t
 
	mxmô_idÀ
;

306 
u_sh‹t
 
	mªcv_idÀ
;

309 
	sµp_£âögs
 {

311 
u_öt
 
	mdißbÀ_deÁu…ù
 : 1;

312 
u_öt
 
	mauth_ªquúed
 : 1;

313 
u_öt
 
	mex∂icô_ªmŸe
 : 1;

314 
u_öt
 
	mªfu£_∑p
 : 1;

315 
u_öt
 
	mªfu£_ch≠
 : 1;

316 
u_öt
 
	mu£ho°«me
 : 1;

317 
u_öt
 
	mu£≥îdns
 : 1;

319 
u_sh‹t
 
	midÀ_time_limô
;

320 
	mmaxc⁄√˘
;

322 
	mu£r
 [
MAXNAMELEN
 + 1];

323 
	m∑sswd
 [
MAXSECRETLEN
 + 1];

324 
	mour_«me
 [
MAXNAMELEN
 + 1];

325 
	mªmŸe_«me
[
MAXNAMELEN
 + 1];

328 
	sµp_addrs
 {

329 
ù_addr
 
	mour_ùaddr
, 
	mhis_ùaddr
, 
	m√tmask
, 
	mdns1
, 
	mdns2
;

337 
u_ch¨
 *
ouçackë_buf
[
NUM_PPP
];

339 
µp_£âögs
Öpp_settings;

341 
¥Ÿít
 *
µp_¥Ÿocﬁs
[];

349 
îr_t
 
µpInô
();

370 
	eµpAuthTy≥
 {

371 
	mPPPAUTHTYPE_NONE
,

372 
	mPPPAUTHTYPE_ANY
,

373 
	mPPPAUTHTYPE_PAP
,

374 
	mPPPAUTHTYPE_CHAP


377 
µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

386 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

391 
	`µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

394 
	#µpO≥n
(
fd
,
cb
,
ls
Ë
	`µpOvîSîülO≥n
(fd,cb,ls)

	)

401 
	`µpClo£
(
pd
);

406 
	`µpSigHUP
(
pd
);

412 
	`µpIOCé
(
pd
, 
cmd
, *
¨g
);

417 
u_öt
 
	`µpMTU
(
pd
);

423 
	`µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
);

425 
	`µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
);

427 
pbuf
 *
	`µpSögÀBuf
(pbu‡*
p
);

429 
	`µpLökTîmö©ed
(
pd
);

431 
	`µpLökDown
(
pd
);

433 
	`µpMaöWakeup
(
pd
);

436 
	`µp_£nd_c⁄fig
 (, , 
u32_t
, , );

438 
	`µp_£t_xaccm
 (, 
ext_accm
 *);

440 
	`µp_ªcv_c⁄fig
 (, , 
u32_t
, , );

442 
	`gë_idÀ_time
 (, 
µp_idÀ
 *);

445 
	`sifvjcomp
 (, , , );

447 
	`sifup
 ();

449 
	`si‚pmode
 (
u
, 
¥Ÿo
, 
NPmode
 
mode
);

451 
	`sifdown
 ();

453 
	`siÁddr
 (, 
u32_t
, u32_t, u32_t, u32_t, u32_t);

455 
	`ciÁddr
 (, 
u32_t
, u32_t);

457 
	`sifdeÁu…rouã
 (, 
u32_t
, u32_t);

459 
	`cifdeÁu…rouã
 (, 
u32_t
, u32_t);

462 
u32_t
 
	`GëMask
 (u32_t);

	@net/lwip/netif/ppp/ppp_oe.c

72 
	~"lwù/›t.h
"

74 #i‡
PPPOE_SUPPORT


76 
	~"µp.h
"

77 
	~"µpdebug.h
"

79 
	~"lwù/sys.h
"

81 
	~"√tif/µp_€.h
"

82 
	~"√tif/ëh¨p.h
"

84 
	~<°rög.h
>

85 
	~<°dio.h
>

88 #i‚de‡
_SYS_QUEUE_H_


89 
	#_SYS_QUEUE_H_


	)

105 
	#LIST_HEAD
(
«me
, 
ty≥
) \

106 
	s«me
 { \

107 
ty≥
 *
lh_fú°
; \

108 }

	)

110 
	#LIST_HEAD_INITIALIZER
(
hód
) \

111 { 
NULL
 }

	)

113 
	#LIST_ENTRY
(
ty≥
) \

115 
ty≥
 *
À_√xt
; \

116 
ty≥
 **
À_¥ev
; \

117 }

	)

123 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

125 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

127 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

128 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

129 (
v¨
); \

130 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

132 
	#LIST_INIT
(
hód
) do { \

133 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

134 } 0)

	)

136 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

137 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
) \

138 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

139 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

140 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

141 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

142 } 0)

	)

144 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

145 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

146 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

147 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

148 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

149 } 0)

	)

151 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

152 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

153 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

154 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

155 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

156 } 0)

	)

158 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

160 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

161 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

162 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

163 (
ñm
)->
fõld
.
À_¥ev
; \

164 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

165 } 0)

	)

171 
	#PPPOE_ADD_16
(
PTR
, 
VAL
) \

172 *(
PTR
)++ = (
VAL
) / 256; \

173 *(
PTR
)++ = (
VAL
Ë% 256

	)

176 
	#PPPOE_ADD_HEADER
(
PTR
, 
CODE
, 
SESS
, 
LEN
) \

177 *(
PTR
)++ = 
PPPOE_VERTYPE
; \

178 *(
PTR
)++ = (
CODE
); \

179 
	`PPPOE_ADD_16
(
PTR
, 
SESS
); \

180 
	`PPPOE_ADD_16
(
PTR
, 
LEN
)

	)

182 
	#PPPOE_DISC_TIMEOUT
 (5*1000Ë

	)

183 
	#PPPOE_SLOW_RETRY
 (60*1000Ë

	)

184 
	#PPPOE_DISC_MAXPADI
 4

	)

185 
	#PPPOE_DISC_MAXPADR
 2

	)

187 #ifde‡
PPPOE_SERVER


189 
	#IFF_PASSIVE
 
IFF_LINK0


	)

192 
	sµp€_so·c
 {

193 
LIST_ENTRY
(
µp€_so·c
Ë
	msc_li°
;

194 
√tif
 *
	msc_ëhif
;

195 
	msc_pd
;

196 (*
	msc_lökSètusCB
)(
	mpd
, 
	mup
);

198 
	msc_°©e
;

199 
ëh_addr
 
	msc_de°
;

200 
u16_t
 
	msc_£ssi⁄
;

202 *
	msc_£rvi˚_«me
;

203 *
	msc_c⁄˚¡øt‹_«me
;

204 
u8_t
 *
	msc_ac_cookõ
;

205 
size_t
 
	msc_ac_cookõ_Àn
;

206 #ifde‡
PPPOE_SERVER


207 
u8_t
 *
	msc_hunique
;

208 
size_t
 
	msc_hunique_Àn
;

210 
	msc_∑di_ªåõd
;

211 
	msc_∑dr_ªåõd
;

215 
µp€_di•©ch_disc_pkt
(
√tif
 *, 
pbuf
 *);

218 
µp€_do_disc⁄√˘
(
µp€_so·c
 *);

219 
µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *);

220 
µp€_˛ór_so·c
(
µp€_so·c
 *, const *);

223 
µp€_timeout
(*);

226 
îr_t
 
µp€_£nd_∑di
(
µp€_so·c
 *);

227 
îr_t
 
µp€_£nd_∑dr
(
µp€_so·c
 *);

228 #ifde‡
PPPOE_SERVER


229 
îr_t
 
µp€_£nd_∑do
(
µp€_so·c
 *);

230 
îr_t
 
µp€_£nd_∑ds
(
µp€_so·c
 *);

232 
îr_t
 
µp€_£nd_∑dt
(
√tif
 *, 
u_öt
, c⁄° 
u8_t
 *);

235 
µp€_so·c
 * 
µp€_föd_so·c_by_£ssi⁄
(
u_öt
, 
√tif
 *);

236 
µp€_so·c
 * 
µp€_föd_so·c_by_hunique
(
u8_t
 *, 
size_t
, 
√tif
 *);

238 
	$LIST_HEAD
(
µp€_so·c_hód
, 
µp€_so·c
Ë
µp€_so·c_li°
;

240 
µp€_hdæí
;

243 
	$µp€_öô
()

245 
µp€_hdæí
 = (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
;

246 
	`LIST_INIT
(&
µp€_so·c_li°
);

247 
	}
}

249 
îr_t


250 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
)

252 
µp€_so·c
 *
sc
;

254 
sc
 = 
	`mem_mÆloc
((
µp€_so·c
));

255 if(!
sc
) {

256 *
s˝å
 = 
NULL
;

257  
ERR_MEM
;

259 
	`mem£t
(
sc
, 0, (
µp€_so·c
));

262 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

264 
sc
->
sc_pd
 = 
pd
;

265 
sc
->
sc_lökSètusCB
 = 
lökSètusCB
;

266 
sc
->
sc_ëhif
 = 
ëhif
;

268 
	`LIST_INSERT_HEAD
(&
µp€_so·c_li°
, 
sc
, 
sc_li°
);

270 *
s˝å
 = 
sc
;

272  
ERR_OK
;

273 
	}
}

275 
îr_t


276 
	$µp€_de°roy
(
√tif
 *
iÂ
)

278 
µp€_so·c
 * 
sc
;

280 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

281 i‡(
sc
->
sc_ëhif
 =
iÂ
) {

286 if(!(
sc
 && (sc->
sc_ëhif
 =
iÂ
))) {

287  
ERR_IF
;

290 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

291 
	`LIST_REMOVE
(
sc
, 
sc_li°
);

293 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
) {

294 
	`mem_‰ì
(
sc
->
sc_c⁄˚¡øt‹_«me
);

296 i‡(
sc
->
sc_£rvi˚_«me
) {

297 
	`mem_‰ì
(
sc
->
sc_£rvi˚_«me
);

299 i‡(
sc
->
sc_ac_cookõ
) {

300 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

302 
	`mem_‰ì
(
sc
);

304  
ERR_OK
;

305 
	}
}

313 
µp€_so·c
 *

314 
	$µp€_föd_so·c_by_£ssi⁄
(
u_öt
 
£ssi⁄
, 
√tif
 *
rcvif
)

316 
µp€_so·c
 *
sc
;

318 i‡(
£ssi⁄
 == 0) {

319  
NULL
;

322 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

323 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION


324 && 
sc
->
sc_£ssi⁄
 =
£ssi⁄
) {

325 i‡(
sc
->
sc_ëhif
 =
rcvif
) {

326  
sc
;

328  
NULL
;

332  
NULL
;

333 
	}
}

337 
µp€_so·c
 *

338 
	$µp€_föd_so·c_by_hunique
(
u8_t
 *
tokí
, 
size_t
 
Àn
, 
√tif
 *
rcvif
)

340 
µp€_so·c
 *
sc
, *
t
;

342 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

343  
NULL
;

346 i‡(
Àn
 ! 
sc
) {

347  
NULL
;

349 
	`MEMCPY
(&
t
, 
tokí
, 
Àn
);

351 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

352 i‡(
sc
 =
t
) {

357 i‡(
sc
 =
NULL
) {

358 
	`PPPDEBUG
((
LOG_DEBUG
, "pppoe:álien host uniqueÅag,Ço session found\n"));

359  
NULL
;

363 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_PADI_SENT
 || sc->sc_°©ê>
PPPOE_STATE_SESSION
) {

364 
	`¥ötf
("%c%c%"
U16_F
": host uniqueÅag found, but it belongsÅoá connection in state %d\n",

365 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_°©e
);

366  
NULL
;

368 i‡(
sc
->
sc_ëhif
 !
rcvif
) {

369 
	`¥ötf
("%c%c%"
U16_F
": wrong interface,Çotáccepting host unique\n",

370 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

371  
NULL
;

373  
sc
;

374 
	}
}

377 
	$µp€_lök°©us_up
(*
¨g
)

379 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

381 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 1);

382 
	}
}

386 
	$µp€_di•©ch_disc_pkt
(
√tif
 *√tif, 
pbuf
 *
pb
)

388 
u16_t
 
èg
, 
Àn
;

389 
u16_t
 
£ssi⁄
, 
∂í
;

390 
µp€_so·c
 *
sc
;

391 c⁄° *
îr_msg
;

392 
dev«me
[6];

393 *
îr‹
;

394 
u8_t
 *
ac_cookõ
;

395 
size_t
 
ac_cookõ_Àn
;

396 #ifde‡
PPPOE_SERVER


397 
u8_t
 *
hunique
;

398 
size_t
 
hunique_Àn
;

400 
µp€hdr
 *
ph
;

401 
µp€èg
 
±
;

402 
off
 = 0, 
îr
, 
îr‹èg
;

403 
ëh_hdr
 *
ëhhdr
;

405 
pb
 = 
	`µpSögÀBuf
(pb);

407 
	`°r˝y
(
dev«me
, "pppoe");

408 
îr_msg
 = 
NULL
;

409 
îr‹èg
 = 0;

410 i‡(
pb
->
Àn
 < (*
ëhhdr
)) {

411 
d⁄e
;

413 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

414 
off
 +(*
ëhhdr
);

416 
ac_cookõ
 = 
NULL
;

417 
ac_cookõ_Àn
 = 0;

418 #ifde‡
PPPOE_SERVER


419 
hunique
 = 
NULL
;

420 
hunique_Àn
 = 0;

422 
£ssi⁄
 = 0;

423 i‡(
pb
->
Àn
 - 
off
 <
PPPOE_HEADERLEN
) {

424 
	`¥ötf
("µp€:ÖackëÅoÿsh‹t: %d\n", 
pb
->
Àn
);

425 
d⁄e
;

428 
ph
 = (
µp€hdr
 *Ë(
ëhhdr
 + 1);

429 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

430 
	`¥ötf
("µp€: unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

431 
d⁄e
;

433 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

434 
∂í
 = 
	`¡ohs
(
ph
->plen);

435 
off
 +(*
ph
);

437 i‡(
∂í
 + 
off
 > 
pb
->
Àn
) {

438 
	`¥ötf
("pppoe:Öacket content doesÇot fit: dataávailable = %d,Öacket size = %u\n",

439 
pb
->
Àn
 - 
off
, 
∂í
);

440 
d⁄e
;

442 if(
pb
->
tŸ_Àn
 =pb->
Àn
) {

443 
pb
->
tŸ_Àn
 =Öb->
Àn
 = 
off
 + 
∂í
;

445 
èg
 = 0;

446 
Àn
 = 0;

447 
sc
 = 
NULL
;

448 
off
 + (
±
Ë<
pb
->
Àn
) {

449 
	`MEMCPY
(&
±
, (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
, (pt));

450 
èg
 = 
	`¡ohs
(
±
.tag);

451 
Àn
 = 
	`¡ohs
(
±
.len);

452 i‡(
off
 + (
±
Ë+ 
Àn
 > 
pb
->len) {

453 
	`¥ötf
("µp€:Åag 0x%xÜí 0x%x i†toÿl⁄g\n", 
èg
, 
Àn
);

454 
d⁄e
;

456 
èg
) {

457 
PPPOE_TAG_EOL
:

458 
bªakbªak
;

459 
PPPOE_TAG_SNAME
:

461 
PPPOE_TAG_ACNAME
:

463 
PPPOE_TAG_HUNIQUE
:

464 i‡(
sc
 !
NULL
) {

467 #ifde‡
PPPOE_SERVER


468 
hunique
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

469 
hunique_Àn
 = 
Àn
;

471 
sc
 = 
	`µp€_föd_so·c_by_hunique
((
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
, 
√tif
);

472 i‡(
sc
 !
NULL
) {

473 
	`¢¥ötf
(
dev«me
, (dev«me), "%c%c%"
U16_F
, 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

476 
PPPOE_TAG_ACCOOKIE
:

477 i‡(
ac_cookõ
 =
NULL
) {

478 
ac_cookõ
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

479 
ac_cookõ_Àn
 = 
Àn
;

482 
PPPOE_TAG_SNAME_ERR
:

483 
îr_msg
 = "SERVICE NAME ERROR";

484 
îr‹èg
 = 1;

486 
PPPOE_TAG_ACSYS_ERR
:

487 
îr_msg
 = "AC SYSTEM ERROR";

488 
îr‹èg
 = 1;

490 
PPPOE_TAG_GENERIC_ERR
:

491 
îr_msg
 = "GENERIC ERROR";

492 
îr‹èg
 = 1;

495 i‡(
îr_msg
) {

496 
îr‹
 = 
NULL
;

497 i‡(
îr‹èg
 && 
Àn
) {

498 
îr‹
 = 
	`mem_mÆloc
(
Àn
+1);

499 i‡(
îr‹
) {

500 
	`°∫˝y
(
îr‹
, (*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
);

501 
îr‹
[
Àn
-1] = '\0';

504 i‡(
îr‹
) {

505 
	`¥ötf
("%s: %s: %s\n", 
dev«me
, 
îr_msg
, 
îr‹
);

506 
	`mem_‰ì
(
îr‹
);

508 
	`¥ötf
("%s: %s\n", 
dev«me
, 
îr_msg
);

510 i‡(
îr‹èg
) {

511 
d⁄e
;

514 
off
 +(
±
Ë+ 
Àn
;

517 
bªakbªak
:;

518 
ph
->
code
) {

519 
PPPOE_CODE_PADI
:

520 #ifde‡
PPPOE_SERVER


525 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

526 
d⁄e
;

528 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

529 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
)) {

532 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

535 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_INITIAL
) {

539 i‡(
sc
 =
NULL
) {

541 
d⁄e
;

543 i‡(
hunique
) {

544 i‡(
sc
->
sc_hunique
) {

545 
	`mem_‰ì
(
sc
->
sc_hunique
);

547 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

548 i‡(
sc
->
sc_hunique
 =
NULL
) {

549 
d⁄e
;

551 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

552 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

554 
	`MEMCPY
(&
sc
->
sc_de°
, 
eh
->
ëhî_sho°
,  sc->sc_dest);

555 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADO_SENT
;

556 
	`µp€_£nd_∑do
(
sc
);

559 
PPPOE_CODE_PADR
:

560 #ifde‡
PPPOE_SERVER


564 i‡(
ac_cookõ
 =
NULL
) {

566 
	`¥ötf
("pppoe:Ñeceived PADR butÇot includesác_cookie\n");

567 
d⁄e
;

569 
sc
 = 
	`µp€_föd_so·c_by_hunique
(
ac_cookõ
, 
ac_cookõ_Àn
, 
√tif
);

570 i‡(
sc
 =
NULL
) {

572 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

573 
	`¥ötf
("pppoe:Ñeceived PADR but couldÇot findÑequest for it\n");

575 
d⁄e
;

577 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

578 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADR\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

579 
d⁄e
;

581 i‡(
hunique
) {

582 i‡(
sc
->
sc_hunique
) {

583 
	`mem_‰ì
(
sc
->
sc_hunique
);

585 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

586 i‡(
sc
->
sc_hunique
 =
NULL
) {

587 
d⁄e
;

589 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

590 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

592 
	`µp€_£nd_∑ds
(
sc
);

593 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

594 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

598 
d⁄e
;

600 
PPPOE_CODE_PADO
:

601 i‡(
sc
 =
NULL
) {

603 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

604 
	`¥ötf
("pppoe:Ñeceived PADO but couldÇot findÑequest for it\n");

606 
d⁄e
;

608 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADI_SENT
) {

609 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADO\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

610 
d⁄e
;

612 i‡(
ac_cookõ
) {

613 i‡(
sc
->
sc_ac_cookõ
) {

614 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

616 
sc
->
sc_ac_cookõ
 = 
	`mem_mÆloc
(
ac_cookõ_Àn
);

617 i‡(
sc
->
sc_ac_cookõ
 =
NULL
) {

618 
d⁄e
;

620 
sc
->
sc_ac_cookõ_Àn
 = 
ac_cookõ_Àn
;

621 
	`MEMCPY
(
sc
->
sc_ac_cookõ
, 
ac_cookõ
, 
ac_cookõ_Àn
);

623 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhhdr
->
§c
.
addr
, (sc->sc_dest.addr));

624 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

625 
sc
->
sc_∑dr_ªåõd
 = 0;

626 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADR_SENT
;

627 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

628 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

630 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

632 
PPPOE_CODE_PADS
:

633 i‡(
sc
 =
NULL
) {

634 
d⁄e
;

636 
sc
->
sc_£ssi⁄
 = 
£ssi⁄
;

637 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

638 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%x c⁄√˘ed\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
£ssi⁄
));

639 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

640 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

642 
PPPOE_CODE_PADT
:

643 i‡(
sc
 =
NULL
) {

644 
d⁄e
;

646 
	`µp€_˛ór_so·c
(
sc
, "received PADT");

649 if(
sc
) {

650 
	`¥ötf
("%c%c%"
U16_F
": unknown code (0x%04x) session = 0x%04x\n",

651 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

652 
ph
->
code
, 
£ssi⁄
);

654 
	`¥ötf
("µp€: unknow¿codê(0x%04xË£ssi⁄ = 0x%04x\n", 
ph
->
code
, 
£ssi⁄
);

659 
d⁄e
:

660 
	`pbuf_‰ì
(
pb
);

662 
	}
}

665 
	$µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

668 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

669 
	`µp€_di•©ch_disc_pkt
(
√tif
, 
p
);

671 
	`pbuf_‰ì
(
p
);

673 
	}
}

676 
	$µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
pb
)

678 
u16_t
 
£ssi⁄
, 
∂í
;

679 
µp€_so·c
 *
sc
;

680 
µp€hdr
 *
ph
;

681 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


682 
u8_t
 
sho°
[
ETHER_ADDR_LEN
];

685 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


686 
	`MEMCPY
(
sho°
, ((
ëh_hdr
 *)
pb
->
∑ylﬂd
)->
§c
.
addr
, (shost));

688 i‡(
	`pbuf_hódî
(
pb
, -()(
ëh_hdr
)) != 0) {

690 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header failed\n"));

691 
	`LINK_STATS_INC
(
lök
.
À√º
);

692 
dr›
;

695 
pb
 = 
	`µpSögÀBuf
 (pb);

697 i‡(
pb
->
Àn
 <
PPPOE_HEADERLEN
) {

698 
	`¥ötf
("µp€ (d©a): dr›pögÅoÿsh‹à∑ckë: %d byãs\n", 
pb
->
Àn
);

699 
dr›
;

702 i‡(
pb
->
Àn
 < (*
ph
)) {

703 
	`¥ötf
("pppoe_data_input: couldÇot get PPPoE header\n");

704 
dr›
;

706 
ph
 = (
µp€hdr
 *)
pb
->
∑ylﬂd
;

708 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

709 
	`¥ötf
("µp€ (d©a): unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

710 
dr›
;

712 i‡(
ph
->
code
 != 0) {

713 
dr›
;

716 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

717 
sc
 = 
	`µp€_föd_so·c_by_£ssi⁄
(
£ssi⁄
, 
√tif
);

718 i‡(
sc
 =
NULL
) {

719 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


720 
	`¥ötf
("µp€: i≈uàf‹ unknow¿£ssi⁄ 0x%x, sídög PADT\n", 
£ssi⁄
);

721 
	`µp€_£nd_∑dt
(
√tif
, 
£ssi⁄
, 
sho°
);

723 
dr›
;

726 
∂í
 = 
	`¡ohs
(
ph
->plen);

728 i‡(
	`pbuf_hódî
(
pb
, -()(
PPPOE_HEADERLEN
)) != 0) {

730 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header PPPOE_HEADERLEN failed\n"));

731 
	`LINK_STATS_INC
(
lök
.
À√º
);

732 
dr›
;

735 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€_d©a_öput: %c%c%"
U16_F
":Ökthdr.len=%d,Öppoe.len=%d\n",

736 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

737 
pb
->
Àn
, 
∂í
));

739 i‡(
pb
->
Àn
 < 
∂í
) {

740 
dr›
;

743 
	`µpInProcOvîEthî√t
(
sc
->
sc_pd
, 
pb
);

747 
dr›
:

748 
	`pbuf_‰ì
(
pb
);

749 
	}
}

751 
îr_t


752 
	$µp€_ouçut
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

754 
ëh_hdr
 *
ëhhdr
;

755 
u16_t
 
ëy≥
;

756 
îr_t
 
ªs
;

758 i‡(!
sc
->
sc_ëhif
) {

759 
	`pbuf_‰ì
(
pb
);

760  
ERR_IF
;

763 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

764 
ëy≥
 = 
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION
 ? 
ETHTYPE_PPPOE
 : 
ETHTYPE_PPPOEDISC
;

765 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ëy≥
);

766 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, 
sc
->
sc_de°
.addr, (ethhdr->dest.addr));

767 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
sc
->
sc_ëhif
->
hwaddr
)->addr, (ethhdr->src.addr));

769 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
" (%xË°©e=%d, sessi⁄=0x%x ouçuà-> %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F",Üen=%d\n",

770 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
ëy≥
,

771 
sc
->
sc_°©e
, sc->
sc_£ssi⁄
,

772 
sc
->
sc_de°
.
addr
[0], sc->sc_dest.addr[1], sc->sc_dest.addr[2], sc->sc_dest.addr[3], sc->sc_dest.addr[4], sc->sc_dest.addr[5],

773 
pb
->
tŸ_Àn
));

775 
ªs
 = 
sc
->
sc_ëhif
->
	`lökouçut
(sc->sc_ëhif, 
pb
);

777 
	`pbuf_‰ì
(
pb
);

779  
ªs
;

780 
	}
}

782 
îr_t


783 
	$µp€_£nd_∑di
(
µp€_so·c
 *
sc
)

785 
pbuf
 *
pb
;

786 
u8_t
 *
p
;

787 
Àn
, 
l1
 = 0, 
l2
 = 0;

789 i‡(
sc
->
sc_°©e
 >
PPPOE_STATE_PADI_SENT
) {

790 
	`PPPDEBUG
((
LOG_ERR
, "ERROR:Öµ€_£nd_∑dòö sèã %d", 
sc
->
sc_°©e
));

794 
Àn
 = 2 + 2 + 2 + 2 +  
sc
;

795 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

796 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

797 
Àn
 +
l1
;

799 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

800 
l2
 = 
	`°æí
(
sc
->
sc_c⁄˚¡øt‹_«me
);

801 
Àn
 +2 + 2 + 
l2
;

805 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

806 i‡(!
pb
) {

807  
ERR_MEM
;

810 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

812 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADI
, 0, 
Àn
);

813 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

814 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

815 
	`PPPOE_ADD_16
(
p
, 
l1
);

816 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

817 
p
 +
l1
;

819 
	`PPPOE_ADD_16
(
p
, 0);

821 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

822 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACNAME
);

823 
	`PPPOE_ADD_16
(
p
, 
l2
);

824 
	`MEMCPY
(
p
, 
sc
->
sc_c⁄˚¡øt‹_«me
, 
l2
);

825 
p
 +
l2
;

827 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

828 
	`PPPOE_ADD_16
(
p
, (
sc
));

829 
	`MEMCPY
(
p
, &
sc
,  sc);

832  
	`µp€_ouçut
(
sc
, 
pb
);

833 
	}
}

836 
	$µp€_timeout
(*
¨g
)

838 
ªåy_waô
, 
îr
;

839 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

841 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
":Åimeout\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

843 
sc
->
sc_°©e
) {

844 
PPPOE_STATE_PADI_SENT
:

856 
ªåy_waô
 = 
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
);

858 
sc
->
sc_∑di_ªåõd
++;

859 i‡(
sc
->
sc_∑di_ªåõd
 >
PPPOE_DISC_MAXPADI
) {

861 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_LINK1
) == 0) {

863 
ªåy_waô
 = 
PPPOE_SLOW_RETRY
;

867 
	`µp€_ab‹t_c⁄√˘
(
sc
);

871 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

872 
sc
->
sc_∑di_ªåõd
--;

873 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿå™smô PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

875 
	`t˝ù_timeout
(
ªåy_waô
, 
µp€_timeout
, 
sc
);

878 
PPPOE_STATE_PADR_SENT
:

879 
sc
->
sc_∑dr_ªåõd
++;

880 i‡(
sc
->
sc_∑dr_ªåõd
 >
PPPOE_DISC_MAXPADR
) {

881 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

882 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

883 
sc
->
sc_∑dr_ªåõd
 = 0;

884 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

885 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

887 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
), 
µp€_timeout
, sc);

890 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

891 
sc
->
sc_∑dr_ªåõd
--;

892 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

894 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

896 
PPPOE_STATE_CLOSING
:

897 
	`µp€_do_disc⁄√˘
(
sc
);

902 
	}
}

906 
	$µp€_c⁄√˘
(
µp€_so·c
 *
sc
)

908 
îr
;

910 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_INITIAL
) {

911  
EBUSY
;

914 #ifde‡
PPPOE_SERVER


916 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

921 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

922 
sc
->
sc_∑dr_ªåõd
 = 0;

923 
îr
 = 
	`µp€_£nd_∑di
(
sc
);

924 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

925 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
, 
µp€_timeout
, 
sc
);

926  
îr
;

927 
	}
}

931 
	$µp€_disc⁄√˘
(
µp€_so·c
 *
sc
)

933 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

941 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

942 
	`t˝ù_timeout
(20, 
µp€_timeout
, 
sc
);

943 
	}
}

946 
	$µp€_do_disc⁄√˘
(
µp€_so·c
 *
sc
)

948 
îr
;

950 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

951 
îr
 = 
EBUSY
;

953 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": disc⁄√˘ög\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

954 
îr
 = 
	`µp€_£nd_∑dt
(
sc
->
sc_ëhif
, sc->
sc_£ssi⁄
, (c⁄° 
u8_t
 *)&sc->
sc_de°
);

958 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

959 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

960 i‡(
sc
->
sc_ac_cookõ
) {

961 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

962 
sc
->
sc_ac_cookõ
 = 
NULL
;

964 
sc
->
sc_ac_cookõ_Àn
 = 0;

965 #ifde‡
PPPOE_SERVER


966 i‡(
sc
->
sc_hunique
) {

967 
	`mem_‰ì
(
sc
->
sc_hunique
);

968 
sc
->
sc_hunique
 = 
NULL
;

970 
sc
->
sc_hunique_Àn
 = 0;

972 
sc
->
sc_£ssi⁄
 = 0;

974 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

976  
îr
;

977 
	}
}

981 
	$µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *
sc
)

983 
	`¥ötf
("%c%c%"
U16_F
": couldÇŸÉ°ablish c⁄√˘i⁄\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

984 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

986 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

989 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

990 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

991 
	}
}

994 
îr_t


995 
	$µp€_£nd_∑dr
(
µp€_so·c
 *
sc
)

997 
pbuf
 *
pb
;

998 
u8_t
 *
p
;

999 
size_t
 
Àn
, 
l1
 = 0;

1001 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADR_SENT
) {

1002  
ERR_CONN
;

1005 
Àn
 = 2 + 2 + 2 + 2 + (
sc
);

1006 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1007 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1008 
Àn
 +
l1
;

1010 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1011 
Àn
 +2 + 2 + 
sc
->
sc_ac_cookõ_Àn
;

1013 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1014 i‡(!
pb
) {

1015  
ERR_MEM
;

1017 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1018 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADR
, 0, 
Àn
);

1019 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1020 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1021 
	`PPPOE_ADD_16
(
p
, 
l1
);

1022 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1023 
p
 +
l1
;

1025 
	`PPPOE_ADD_16
(
p
, 0);

1027 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1028 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1029 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_ac_cookõ_Àn
);

1030 
	`MEMCPY
(
p
, 
sc
->
sc_ac_cookõ
, sc->
sc_ac_cookõ_Àn
);

1031 
p
 +
sc
->
sc_ac_cookõ_Àn
;

1033 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1034 
	`PPPOE_ADD_16
(
p
, (
sc
));

1035 
	`MEMCPY
(
p
, &
sc
,  sc);

1037  
	`µp€_ouçut
(
sc
, 
pb
);

1038 
	}
}

1041 
îr_t


1042 
	$µp€_£nd_∑dt
(
√tif
 *
outgoög_if
, 
u_öt
 
£ssi⁄
, c⁄° 
u8_t
 *
de°
)

1044 
pbuf
 *
pb
;

1045 
ëh_hdr
 *
ëhhdr
;

1046 
îr_t
 
ªs
;

1047 
u8_t
 *
p
;

1049 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
, 
PBUF_RAM
);

1050 i‡(!
pb
) {

1051  
ERR_MEM
;

1054 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

1055 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_PPPOEDISC
);

1056 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, dest, (ethhdr->dest.addr));

1057 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
outgoög_if
->
hwaddr
)->addr, (ethhdr->src.addr));

1059 
p
 = (
u8_t
*)(
ëhhdr
 + 1);

1060 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADT
, 
£ssi⁄
, 0);

1062 
ªs
 = 
outgoög_if
->
	`lökouçut
(outgoög_if, 
pb
);

1064 
	`pbuf_‰ì
(
pb
);

1066  
ªs
;

1067 
	}
}

1069 #ifde‡
PPPOE_SERVER


1070 
îr_t


1071 
	$µp€_£nd_∑do
(
µp€_so·c
 *
sc
)

1073 
pbuf
 *
pb
;

1074 
u8_t
 *
p
;

1075 
size_t
 
Àn
;

1077 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1078  
ERR_CONN
;

1082 
Àn
 = 0;

1084 
Àn
 +2 + 2 + (
sc
);

1086 
Àn
 +2 + 2 + 
sc
->
sc_hunique_Àn
;

1087 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1088 i‡(!
pb
) {

1089  
ERR_MEM
;

1091 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1092 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADO
, 0, 
Àn
);

1093 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1094 
	`PPPOE_ADD_16
(
p
, (
sc
));

1095 
	`MEMCPY
(
p
, &
sc
, (sc));

1096 
p
 +(
sc
);

1097 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1098 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1099 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1100  
	`µp€_ouçut
(
sc
, 
pb
);

1101 
	}
}

1103 
îr_t


1104 
	$µp€_£nd_∑ds
(
µp€_so·c
 *
sc
)

1106 
pbuf
 *
pb
;

1107 
u8_t
 *
p
;

1108 
size_t
 
Àn
, 
l1
 = 0;

1110 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1111  
ERR_CONN
;

1114 
sc
->
sc_£ssi⁄
 = 
m⁄o_time
.
tv_£c
 % 0xff + 1;

1116 
Àn
 = 0;

1118 
Àn
 +2 + 2 + 2 + 2 + 
sc
->
sc_hunique_Àn
;

1119 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1120 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1121 
Àn
 +
l1
;

1123 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1124 i‡(!
pb
) {

1125  
ERR_MEM
;

1127 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1128 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADS
, 
sc
->
sc_£ssi⁄
, 
Àn
);

1129 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1130 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1131 
	`PPPOE_ADD_16
(
p
, 
l1
);

1132 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1133 
p
 +
l1
;

1135 
	`PPPOE_ADD_16
(
p
, 0);

1137 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1138 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1139 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1140  
	`µp€_ouçut
(
sc
, 
pb
);

1141 
	}
}

1144 
îr_t


1145 
	$µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

1147 
u8_t
 *
p
;

1148 
size_t
 
Àn
;

1151 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

1153 
	`pbuf_‰ì
(
pb
);

1154  
ERR_CONN
;

1157 
Àn
 = 
pb
->
tŸ_Àn
;

1160 i‡(
	`pbuf_hódî
(
pb
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
) != 0) {

1162 
	`PPPDEBUG
((
LOG_ERR
, "µp€: %c%c%"
U16_F
":Öµ€_xmô: couldÇŸáŒoˇãÑoom f‹ hódî\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

1163 
	`LINK_STATS_INC
(
lök
.
À√º
);

1164 
	`pbuf_‰ì
(
pb
);

1165  
ERR_BUF
;

1168 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 + (
ëh_hdr
);

1169 
	`PPPOE_ADD_HEADER
(
p
, 0, 
sc
->
sc_£ssi⁄
, 
Àn
);

1171  
	`µp€_ouçut
(
sc
, 
pb
);

1172 
	}
}

1176 
	$µp€_iÁâach_hook
(*
¨g
, 
pbuf
 **
mp
, 
√tif
 *
iÂ
, 
dú
)

1178 
µp€_so·c
 *
sc
;

1179 
s
;

1181 i‡(
mp
 !(
pbuf
 **)
PFIL_IFNET_DETACH
) {

1185 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

1186 i‡(
sc
->
sc_ëhif
 !
iÂ
) {

1189 i‡(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
) {

1190 
sc
->
sc_•µ
.
µ_if
.
if_Êags
 &~(
IFF_UP
|
IFF_RUNNING
);

1191 
	`¥ötf
("%c%c%"
U16_F
":Éthernet interface detached, going down\n",

1192 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

1194 
sc
->
sc_ëhif
 = 
NULL
;

1195 
	`µp€_˛ór_so·c
(
sc
, "ethernet interface detached");

1199 
	}
}

1203 
	$µp€_˛ór_so·c
(
µp€_so·c
 *
sc
, c⁄° *
mesßge
)

1205 
	`LWIP_UNUSED_ARG
(
mesßge
);

1208 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

1209 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%xÅîmö©ed, %s\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_£ssi⁄
, 
mesßge
));

1212 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

1215 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

1218 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

1219 i‡(
sc
->
sc_ac_cookõ
) {

1220 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

1221 
sc
->
sc_ac_cookõ
 = 
NULL
;

1223 
sc
->
sc_ac_cookõ_Àn
 = 0;

1224 
sc
->
sc_£ssi⁄
 = 0;

1225 
	}
}

	@net/lwip/netif/ppp/pppdebug.h

37 #i‚de‡
PPPDEBUG_H


38 
	#PPPDEBUG_H


	)

45 
	mLOG_CRITICAL
 = 0,

46 
	mLOG_ERR
 = 1,

47 
	mLOG_NOTICE
 = 2,

48 
	mLOG_WARNING
 = 3,

49 
	mLOG_INFO
 = 5,

50 
	mLOG_DETAIL
 = 6,

51 
	mLOG_DEBUG
 = 7

52 } 
	tLogCodes
;

61 
µp_åa˚
(
Àvñ
, c⁄° *
f‹m©
,...);

63 
	#TRACELCP
 
PPP_DEBUG


	)

65 #i‡
PPP_DEBUG


67 
	#AUTHDEBUG
(
a
Ë
µp_åa˚
 
	)
a

68 
	#IPCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

69 
	#UPAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

70 
	#LCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

71 
	#FSMDEBUG
(
a
Ë
µp_åa˚
 
	)
a

72 
	#CHAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

73 
	#PPPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

77 
	#AUTHDEBUG
(
a
)

	)

78 
	#IPCPDEBUG
(
a
)

	)

79 
	#UPAPDEBUG
(
a
)

	)

80 
	#LCPDEBUG
(
a
)

	)

81 
	#FSMDEBUG
(
a
)

	)

82 
	#CHAPDEBUG
(
a
)

	)

83 
	#PPPDEBUG
(
a
)

	)

	@net/lwip/netif/ppp/randm.c

35 
	~"lwù/›t.h
"

37 #i‡
PPP_SUPPORT


39 
	~"md5.h
"

40 
	~"øndm.h
"

42 
	~"µp.h
"

43 
	~"µpdebug.h
"

46 #i‡
MD5_SUPPORT


47 
	#RANDPOOLSZ
 16

	)

52 
	gøndPoﬁ
[
RANDPOOLSZ
];

53 
	gøndCou¡
 = 0;

68 
	$avR™domInô
()

70 
	`avChu∫R™d
(
NULL
, 0);

71 
	}
}

84 
	$avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
)

86 
MD5_CTX
 
md5
;

89 
	`MD5Inô
(&
md5
);

90 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

91 i‡(
øndD©a
) {

92 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndD©a
, 
øndLí
);

96 
foob¨
;

97 } 
sysD©a
;

100 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
sysD©a
, (sysData));

102 
	`MD5FöÆ
((
u_ch¨
 *)
øndPoﬁ
, &
md5
);

104 
	}
}

123 
	$avGíR™d
(*
buf
, 
u32_t
 
bufLí
)

125 
MD5_CTX
 
md5
;

126 
u_ch¨
 
tmp
[16];

127 
u32_t
 
n
;

129 
bufLí
 > 0) {

130 
n
 = 
	`LWIP_MIN
(
bufLí
, 
RANDPOOLSZ
);

131 
	`MD5Inô
(&
md5
);

132 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

133 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
øndCou¡
, (randCount));

134 
	`MD5FöÆ
(
tmp
, &
md5
);

135 
øndCou¡
++;

136 
	`MEMCPY
(
buf
, 
tmp
, 
n
);

137 
buf
 +
n
;

138 
bufLí
 -
n
;

140 
	}
}

145 
u32_t


146 
	$avR™dom
()

148 
u32_t
 
√wR™d
;

150 
	`avGíR™d
((*)&
√wR™d
, (newRand));

152  
√wR™d
;

153 
	}
}

160 
	gavR™domized
 = 0;

161 
u32_t
 
	gavR™domSìd
 = 0;

182 
	$avR™domInô
()

186 
u32_t
 *
Õå1
 = (u32_à*)((*)&
˛ockBuf
[3]);

198 
	`ªadClk
();

199 
avR™domSìd
 +*(
u32_t
 *)
˛ockBuf
 + *
Õå1
 + 
OSIdÀCå


200 + 
	`µp_mtime
(Ë+ ((
u32_t
)
TM1
 << 16) + TM1;

202 
avR™domSìd
 +
	`sys_jiffõs
();

206 
	`§™d
(()
avR™domSìd
);

207 
	}
}

217 
	$avR™domize
()

219 
u32_t
 
œ°_jiffõs
;

221 i‡(!
avR™domized
) {

222 
avR™domized
 = !0;

223 
	`avR™domInô
();

227 
avR™domSìd
 +(
	`sys_jiffõs
(Ë- 
œ°_jiffõs
);

229 
œ°_jiffõs
 = 
	`sys_jiffõs
();

230 
	}
}

241 
u32_t


242 
	$avR™dom
()

244  ((((
u32_t
)
	`ønd
(Ë<< 16Ë+Ñ™d()Ë+ 
avR™domSìd
);

245 
	}
}

	@net/lwip/netif/ppp/randm.h

35 #i‚de‡
RANDM_H


36 
	#RANDM_H


	)

44 
avR™domInô
();

54 
avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
);

60 #i‡
MD5_SUPPORT


61 
	#avR™domize
(Ë
	`avChu∫R™d
(
NULL
, 0)

	)

63 
avR™domize
();

74 
avGíR™d
(*
buf
, 
u32_t
 
bufLí
);

79 
u32_t
 
avR™dom
();

	@net/lwip/netif/ppp/vj.c

32 
	~"lwù/›t.h
"

34 #i‡
PPP_SUPPORT


36 
	~"µp.h
"

37 
	~"µpdebug.h
"

39 
	~"vj.h
"

41 
	~<°rög.h
>

43 #i‡
VJ_SUPPORT


45 #i‡
LINK_STATS


46 
	#INCR
(
cou¡î
Ë++
comp
->
°©s
.
	)
counter

48 
	#INCR
(
cou¡î
)

	)

51 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

52 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl_v
&0xf)

	)

53 
	#gëth_off
(
ba£
Ë(((ba£).
th_x2_off
&0xf0)>>4)

	)

55 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl
)

	)

56 
	#gëth_off
(
ba£
Ë((ba£).
th_off
)

	)

60 
	$vj_com¥ess_öô
(
vjcom¥ess
 *
comp
)

62 
u_öt
 
i
;

63 
c°©e
 *
t°©e
 = 
comp
->tstate;

65 #i‡
MAX_SLOTS
 == 0

66 
	`mem£t
((*)
comp
, 0, (*comp));

68 
comp
->
maxSlŸIndex
 = 
MAX_SLOTS
 - 1;

69 
comp
->
com¥essSlŸ
 = 0;

70 
i
 = 
MAX_SLOTS
 - 1; i > 0; --i) {

71 
t°©e
[
i
].
cs_id
 = i;

72 
t°©e
[
i
].
cs_√xt
 = &tstate[i - 1];

74 
t°©e
[0].
cs_√xt
 = &t°©e[
MAX_SLOTS
 - 1];

75 
t°©e
[0].
cs_id
 = 0;

76 
comp
->
œ°_cs
 = &
t°©e
[0];

77 
comp
->
œ°_ªcv
 = 255;

78 
comp
->
œ°_xmô
 = 255;

79 
comp
->
Êags
 = 
VJF_TOSS
;

80 
	}
}

87 
	#ENCODE
(
n
) { \

88 i‡((
u_sh‹t
)(
n
) >= 256) { \

89 *
˝
++ = 0; \

90 
˝
[1] = (
n
); \

91 
˝
[0] = (
n
) >> 8; \

92 
˝
 += 2; \

94 *
˝
++ = (
n
); \

96 }

	)

97 
	#ENCODEZ
(
n
) { \

98 i‡((
u_sh‹t
)(
n
) >= 256 || (u_short)(n) == 0) { \

99 *
˝
++ = 0; \

100 
˝
[1] = (
n
); \

101 
˝
[0] = (
n
) >> 8; \

102 
˝
 += 2; \

104 *
˝
++ = (
n
); \

106 }

	)

108 
	#DECODEL
(
f
) { \

109 i‡(*
˝
 == 0) {\

110 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

111 (
f
Ë
	`ht⁄l
(
tmp
); \

112 
˝
 += 3; \

114 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ (u32_t)*
˝
++; \

115 (
f
Ë
	`ht⁄l
(
tmp
); \

117 }

	)

119 
	#DECODES
(
f
) { \

120 i‡(*
˝
 == 0) {\

121 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (((u_sh‹t)
˝
[1] << 8) | cp[2]); \

122 (
f
Ë
	`ht⁄s
(
tmp
); \

123 
˝
 += 3; \

125 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (u_sh‹t)*
˝
++; \

126 (
f
Ë
	`ht⁄s
(
tmp
); \

128 }

	)

130 
	#DECODEU
(
f
) { \

131 i‡(*
˝
 == 0) {\

132 (
f
Ë
	`ht⁄s
(((
u_sh‹t
)
˝
[1] << 8) | cp[2]); \

133 
˝
 += 3; \

135 (
f
Ë
	`ht⁄s
((
u_sh‹t
)*
˝
++); \

137 }

	)

146 
u_öt


147 
	$vj_com¥ess_t˝
(
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
)

149 
ù
 *ù = (ù *)
pb
->
∑ylﬂd
;

150 
c°©e
 *
cs
 = 
comp
->
œ°_cs
->
cs_√xt
;

151 
u_sh‹t
 
hÀn
 = 
	`gëù_hl
(*
ù
);

152 
t˝hdr
 *
Ÿh
;

153 
t˝hdr
 *
th
;

154 
u_sh‹t
 
dñèS
, 
dñèA
;

155 
u_l⁄g
 
dñèL
;

156 
u_öt
 
ch™ges
 = 0;

157 
u_ch¨
 
√w_£q
[16];

158 
u_ch¨
 *
˝
 = 
√w_£q
;

163 i‡(
ù
->
ù_p
 !
IPPROTO_TCP
) {

164  (
TYPE_IP
);

172 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(0x3fff)Ë|| 
pb
->
tŸ_Àn
 < 40) {

173  (
TYPE_IP
);

175 
th
 = (
t˝hdr
 *)&((*)
ù
)[
hÀn
];

176 i‡((
th
->
th_Êags
 & (
TCP_SYN
|
TCP_FIN
|
TCP_RST
|
TCP_ACK
)) != TCP_ACK) {

177  (
TYPE_IP
);

186 
	`INCR
(
vjs_∑ckës
);

187 i‡(
ù
->
ù_§c
.
s_addr
 !
cs
->
cs_ù
.ip_src.s_addr

188 || 
ù
->
ù_d°
.
s_addr
 !
cs
->
cs_ù
.ip_dst.s_addr

189 || *(*)
th
 !((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

202 
c°©e
 *
lcs
;

203 
c°©e
 *
œ°cs
 = 
comp
->
œ°_cs
;

206 
lcs
 = 
cs
; c†cs->
cs_√xt
;

207 
	`INCR
(
vjs_£¨ches
);

208 i‡(
ù
->
ù_§c
.
s_addr
 =
cs
->
cs_ù
.ip_src.s_addr

209 && 
ù
->
ù_d°
.
s_addr
 =
cs
->
cs_ù
.ip_dst.s_addr

210 && *(*)
th
 =((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

211 
found
;

213 } 
cs
 !
œ°cs
);

223 
	`INCR
(
vjs_mis£s
);

224 
comp
->
œ°_cs
 = 
lcs
;

225 
hÀn
 +
	`gëth_off
(*
th
);

226 
hÀn
 <<= 2;

228 i‡(
hÀn
 > 
pb
->
Àn
) {

229  (
TYPE_IP
);

231 
uncom¥es£d
;

233 
found
:

237 i‡(
cs
 =
œ°cs
) {

238 
comp
->
œ°_cs
 = 
lcs
;

240 
lcs
->
cs_√xt
 = 
cs
->cs_next;

241 
cs
->
cs_√xt
 = 
œ°cs
->cs_next;

242 
œ°cs
->
cs_√xt
 = 
cs
;

246 
Ÿh
 = (
t˝hdr
 *)&((*)&
cs
->
cs_ù
)[
hÀn
];

247 
dñèS
 = 
hÀn
;

248 
hÀn
 +
	`gëth_off
(*
th
);

249 
hÀn
 <<= 2;

251 i‡(
hÀn
 > 
pb
->
Àn
) {

252 
	`PPPDEBUG
((
LOG_INFO
, "vj_com¥ess_t˝: hódîÜí %d s∑n†buf„rs\n", 
hÀn
));

253  (
TYPE_IP
);

267 i‡(((
u_sh‹t
 *)
ù
)[0] !((u_sh‹à*)&
cs
->
cs_ù
)[0]

268 || ((
u_sh‹t
 *)
ù
)[3] !((u_sh‹à*)&
cs
->
cs_ù
)[3]

269 || ((
u_sh‹t
 *)
ù
)[4] !((u_sh‹à*)&
cs
->
cs_ù
)[4]

270 || 
	`gëth_off
(*
th
Ë!gëth_off(*
Ÿh
)

271 || (
dñèS
 > 5 && 
	`BCMP
(
ù
 + 1, &
cs
->
cs_ù
 + 1, (deltaS - 5) << 2))

272 || (
	`gëth_off
(*
th
Ë> 5 && 
	`BCMP
—h + 1, 
Ÿh
 + 1, (getth_off(*th) - 5) << 2))) {

273 
uncom¥es£d
;

282 i‡(
th
->
th_Êags
 & 
TCP_URG
) {

283 
dñèS
 = 
	`¡ohs
(
th
->
th_uΩ
);

284 
	`ENCODEZ
(
dñèS
);

285 
ch™ges
 |
NEW_U
;

286 } i‡(
th
->
th_uΩ
 !
Ÿh
->th_urp) {

291 
uncom¥es£d
;

294 i‡((
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
th
->
th_wö
Ë-Çtohs(
Ÿh
->th_win))) != 0) {

295 
	`ENCODE
(
dñèS
);

296 
ch™ges
 |
NEW_W
;

299 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_ack
Ë-Çtohl(
Ÿh
->th_ack)) != 0) {

300 i‡(
dñèL
 > 0xffff) {

301 
uncom¥es£d
;

303 
dñèA
 = (
u_sh‹t
)
dñèL
;

304 
	`ENCODE
(
dñèA
);

305 
ch™ges
 |
NEW_A
;

308 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_£q
Ë-Çtohl(
Ÿh
->th_seq)) != 0) {

309 i‡(
dñèL
 > 0xffff) {

310 
uncom¥es£d
;

312 
dñèS
 = (
u_sh‹t
)
dñèL
;

313 
	`ENCODE
(
dñèS
);

314 
ch™ges
 |
NEW_S
;

317 
ch™ges
) {

327 i‡(
ù
->
ù_Àn
 !
cs
->
cs_ù
.ip_len &&

328 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë=
hÀn
) {

334 
SPECIAL_I
:

335 
SPECIAL_D
:

340 
uncom¥es£d
;

342 
NEW_S
|
NEW_A
:

343 i‡(
dñèS
 =
dñèA
 && dñèS =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

345 
ch™ges
 = 
SPECIAL_I
;

346 
˝
 = 
√w_£q
;

350 
NEW_S
:

351 i‡(
dñèS
 =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

353 
ch™ges
 = 
SPECIAL_D
;

354 
˝
 = 
√w_£q
;

359 
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
ù
->
ù_id
Ë-Çtohs(
cs
->
cs_ù
.ip_id));

360 i‡(
dñèS
 != 1) {

361 
	`ENCODEZ
(
dñèS
);

362 
ch™ges
 |
NEW_I
;

364 i‡(
th
->
th_Êags
 & 
TCP_PSH
) {

365 
ch™ges
 |
TCP_PUSH_BIT
;

371 
dñèA
 = 
	`¡ohs
(
th
->
th_sum
);

372 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

383 
dñèS
 = (
u_sh‹t
)(
˝
 - 
√w_£q
);

384 i‡(!
comp
->
com¥essSlŸ
 || comp->
œ°_xmô
 !
cs
->
cs_id
) {

385 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

386 
hÀn
 -
dñèS
 + 4;

387 if(
	`pbuf_hódî
(
pb
, -
hÀn
)){

389 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

391 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

392 *
˝
++ = 
ch™ges
 | 
NEW_C
;

393 *
˝
++ = 
cs
->
cs_id
;

395 
hÀn
 -
dñèS
 + 3;

396 if(
	`pbuf_hódî
(
pb
, -
hÀn
)) {

398 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

400 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

401 *
˝
++ = 
ch™ges
;

403 *
˝
++ = 
dñèA
 >> 8;

404 *
˝
++ = 
dñèA
;

405 
	`BCOPY
(
√w_£q
, 
˝
, 
dñèS
);

406 
	`INCR
(
vjs_com¥es£d
);

407  (
TYPE_COMPRESSED_TCP
);

414 
uncom¥es£d
:

415 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

416 
ù
->
ù_p
 = 
cs
->
cs_id
;

417 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

418  (
TYPE_UNCOMPRESSED_TCP
);

419 
	}
}

425 
	$vj_uncom¥ess_îr
(
vjcom¥ess
 *
comp
)

427 
comp
->
Êags
 |
VJF_TOSS
;

428 
	`INCR
(
vjs_îr‹ö
);

429 
	}
}

436 
	$vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
)

438 
u_öt
 
hÀn
;

439 
c°©e
 *
cs
;

440 
ù
 *ip;

442 
ù
 = (ù *)
nb
->
∑ylﬂd
;

443 
hÀn
 = 
	`gëù_hl
(*
ù
) << 2;

444 i‡(
ù
->
ù_p
 >
MAX_SLOTS


445 || 
hÀn
 + (
t˝hdr
Ë> 
nb
->
Àn


446 || (
hÀn
 +
	`gëth_off
(*((
t˝hdr
 *)&((*)
ù
)[hlen])) << 2)

447 > 
nb
->
Àn


448 || 
hÀn
 > 
MAX_HDR
) {

449 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",

450 
ù
->
ù_p
, 
hÀn
, 
nb
->
Àn
));

451 
comp
->
Êags
 |
VJF_TOSS
;

452 
	`INCR
(
vjs_îr‹ö
);

455 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
 = 
ù
->
ù_p
];

456 
comp
->
Êags
 &=~ 
VJF_TOSS
;

457 
ù
->
ù_p
 = 
IPPROTO_TCP
;

458 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

459 
cs
->
cs_hÀn
 = 
hÀn
;

460 
	`INCR
(
vjs_uncom¥es£dö
);

462 
	}
}

473 
	$vj_uncom¥ess_t˝
(
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
)

475 
u_ch¨
 *
˝
;

476 
t˝hdr
 *
th
;

477 
c°©e
 *
cs
;

478 
u_sh‹t
 *
bp
;

479 
pbuf
 *
n0
 = *
nb
;

480 
u32_t
 
tmp
;

481 
u_öt
 
vjÀn
, 
hÀn
, 
ch™ges
;

483 
	`INCR
(
vjs_com¥es£dö
);

484 
˝
 = (
u_ch¨
 *)
n0
->
∑ylﬂd
;

485 
ch™ges
 = *
˝
++;

486 i‡(
ch™ges
 & 
NEW_C
) {

491 i‡(*
˝
 >
MAX_SLOTS
) {

492 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncom¥ess_t˝: bad cid=%d\n", *
˝
));

493 
bad
;

496 
comp
->
Êags
 &=~ 
VJF_TOSS
;

497 
comp
->
œ°_ªcv
 = *
˝
++;

504 i‡(
comp
->
Êags
 & 
VJF_TOSS
) {

505 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp:Åossing\n"));

506 
	`INCR
(
vjs_tos£d
);

510 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
];

511 
hÀn
 = 
	`gëù_hl
(
cs
->
cs_ù
) << 2;

512 
th
 = (
t˝hdr
 *)&((
u_ch¨
 *)&
cs
->
cs_ù
)[
hÀn
];

513 
th
->
th_sum
 = 
	`ht⁄s
((*
˝
 << 8) | cp[1]);

514 
˝
 += 2;

515 i‡(
ch™ges
 & 
TCP_PUSH_BIT
) {

516 
th
->
th_Êags
 |
TCP_PSH
;

518 
th
->
th_Êags
 &=~ 
TCP_PSH
;

521 
ch™ges
 & 
SPECIALS_MASK
) {

522 
SPECIAL_I
:

524 
u32_t
 
i
 = 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

526 
tmp
 = 
	`¡ohl
(
th
->
th_ack
Ë+ 
i
;

527 
th
->
th_ack
 = 
	`ht⁄l
(
tmp
);

528 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
i
;

529 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

533 
SPECIAL_D
:

535 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

536 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

540 i‡(
ch™ges
 & 
NEW_U
) {

541 
th
->
th_Êags
 |
TCP_URG
;

542 
	`DECODEU
(
th
->
th_uΩ
);

544 
th
->
th_Êags
 &=~ 
TCP_URG
;

546 i‡(
ch™ges
 & 
NEW_W
) {

547 
	`DECODES
(
th
->
th_wö
);

549 i‡(
ch™ges
 & 
NEW_A
) {

550 
	`DECODEL
(
th
->
th_ack
);

552 i‡(
ch™ges
 & 
NEW_S
) {

553 
	`DECODEL
(
th
->
th_£q
);

557 i‡(
ch™ges
 & 
NEW_I
) {

558 
	`DECODES
(
cs
->
cs_ù
.
ù_id
);

560 
cs
->
cs_ù
.
ù_id
 = 
	`¡ohs
(cs->cs_ip.ip_id) + 1;

561 
cs
->
cs_ù
.
ù_id
 = 
	`ht⁄s
(cs->cs_ip.ip_id);

569 
vjÀn
 = (
u_sh‹t
)(
˝
 - (
u_ch¨
*)
n0
->
∑ylﬂd
);

570 i‡(
n0
->
Àn
 < 
vjÀn
) {

575 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp: head buffer %dÅoo short %d\n",

576 
n0
->
Àn
, 
vjÀn
));

577 
bad
;

580 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


581 
tmp
 = 
n0
->
tŸ_Àn
 - 
vjÀn
 + 
cs
->
cs_hÀn
;

582 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
tmp
);

584 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
n0
->
tŸ_Àn
 - 
vjÀn
 + cs->
cs_hÀn
);

588 
bp
 = (
u_sh‹t
 *Ë&
cs
->
cs_ù
;

589 
cs
->
cs_ù
.
ù_sum
 = 0;

590 
tmp
 = 0; 
hÀn
 > 0; hlen -= 2) {

591 
tmp
 +*
bp
++;

593 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

594 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

595 
cs
->
cs_ù
.
ù_sum
 = (
u_sh‹t
)(~
tmp
);

598 if(
	`pbuf_hódî
(
n0
, -((
s16_t
)(
vjÀn
)))) {

600 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

601 
bad
;

604 if(
	`LWIP_MEM_ALIGN
(
n0
->
∑ylﬂd
) !=Ç0->payload) {

605 
pbuf
 *
≈
, *
q
;

606 
u8_t
 *
buÂå
;

608 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
n0
->
Àn
 + 
cs
->
cs_hÀn
, 
PBUF_POOL
);

609 if(!
≈
) {

610 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Ñealign failed\n"));

611 
bad
;

614 if(
	`pbuf_hódî
(
≈
, -
cs
->
cs_hÀn
)) {

616 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

617 
bad
;

620 
buÂå
 = 
n0
->
∑ylﬂd
;

621 
q
 = 
≈
; q !
NULL
; q = q->
√xt
) {

622 
	`MEMCPY
(
q
->
∑ylﬂd
, 
buÂå
, q->
Àn
);

623 
buÂå
 +
q
->
Àn
;

626 if(
n0
->
√xt
) {

627 
	`pbuf_chaö
(
≈
, 
n0
->
√xt
);

628 
	`pbuf_dechaö
(
n0
);

630 
	`pbuf_‰ì
(
n0
);

631 
n0
 = 
≈
;

634 if(
	`pbuf_hódî
(
n0
, 
cs
->
cs_hÀn
)) {

635 
pbuf
 *
≈
;

637 
	`LWIP_ASSERT
("vj_uncom¥ess_t˝: cs->cs_hÀ¿<PBUF_POOL_BUFSIZE", 
cs
->
cs_hÀn
 <
PBUF_POOL_BUFSIZE
);

638 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
cs
->
cs_hÀn
, 
PBUF_POOL
);

639 if(!
≈
) {

640 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Örepend failed\n"));

641 
bad
;

643 
	`pbuf_ˇt
(
≈
, 
n0
);

644 
n0
 = 
≈
;

646 
	`LWIP_ASSERT
("n0->À¿>cs->cs_hÀn", 
n0
->
Àn
 >
cs
->
cs_hÀn
);

647 
	`MEMCPY
(
n0
->
∑ylﬂd
, &
cs
->
cs_ù
, cs->
cs_hÀn
);

649 *
nb
 = 
n0
;

651  
vjÀn
;

653 
bad
:

654 
comp
->
Êags
 |
VJF_TOSS
;

655 
	`INCR
(
vjs_îr‹ö
);

657 
	}
}

	@net/lwip/netif/ppp/vj.h

26 #i‚de‡
VJ_H


27 
	#VJ_H


	)

29 
	~"vjbsdhdr.h
"

31 
	#MAX_SLOTS
 16

	)

32 
	#MAX_HDR
 128

	)

78 
	#TYPE_IP
 0x40

	)

79 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

80 
	#TYPE_COMPRESSED_TCP
 0x80

	)

81 
	#TYPE_ERROR
 0x00

	)

84 
	#NEW_C
 0x40

	)

85 
	#NEW_I
 0x20

	)

86 
	#NEW_S
 0x08

	)

87 
	#NEW_A
 0x04

	)

88 
	#NEW_W
 0x02

	)

89 
	#NEW_U
 0x01

	)

92 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

93 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

94 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

96 
	#TCP_PUSH_BIT
 0x10

	)

105 
	sc°©e
 {

106 
c°©e
 *
	mcs_√xt
;

107 
u_sh‹t
 
	mcs_hÀn
;

108 
u_ch¨
 
	mcs_id
;

109 
u_ch¨
 
	mcs_fûÀr
;

111 
	mcsu_hdr
[
MAX_HDR
];

112 
ù
 
	mcsu_ù
;

113 } 
	mvjcs_u
;

115 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

116 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

119 
	svj°©
 {

120 
	mvjs_∑ckës
;

121 
	mvjs_com¥es£d
;

122 
	mvjs_£¨ches
;

123 
	mvjs_mis£s
;

124 
	mvjs_uncom¥es£dö
;

125 
	mvjs_com¥es£dö
;

126 
	mvjs_îr‹ö
;

127 
	mvjs_tos£d
;

133 
	svjcom¥ess
 {

134 
c°©e
 *
	mœ°_cs
;

135 
u_ch¨
 
	mœ°_ªcv
;

136 
u_ch¨
 
	mœ°_xmô
;

137 
u_sh‹t
 
	mÊags
;

138 
u_ch¨
 
	mmaxSlŸIndex
;

139 
u_ch¨
 
	mcom¥essSlŸ
;

140 #i‡
LINK_STATS


141 
vj°©
 
	m°©s
;

143 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

144 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

148 
	#VJF_TOSS
 1U

	)

150 
vj_com¥ess_öô
 (
vjcom¥ess
 *
comp
);

151 
u_öt
 
vj_com¥ess_t˝
 (
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
);

152 
vj_uncom¥ess_îr
 (
vjcom¥ess
 *
comp
);

153 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

154 
vj_uncom¥ess_t˝
 (
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@net/lwip/netif/ppp/vjbsdhdr.h

2 #i‚de‡
VJBSDHDR_H


3 
	#VJBSDHDR_H


	)

5 
	~"lwù/t˝.h
"

14 
PACK_STRUCT_BEGIN


15 
	sù


17 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

18 
u_ch¨
 
	mù_hl_v
;

20 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


21 
	mù_hl
:4,

22 
	mù_v
 :4;

23 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


24 
	mù_v
 :4,

25 
	mù_hl
:4;

27 
	mCOMPLAIN
 - 
NO
 
BYTE
 
ORDER
 
	mSELECTED
!

30 
u_ch¨
 
	mù_tos
;

31 
u_sh‹t
 
	mù_Àn
;

32 
u_sh‹t
 
	mù_id
;

33 
u_sh‹t
 
	mù_off
;

34 
	#IP_DF
 0x4000

	)

35 
	#IP_MF
 0x2000

	)

36 
	#IP_OFFMASK
 0x1ff‡

	)

37 
u_ch¨
 
	mù_âl
;

38 
u_ch¨
 
	mù_p
;

39 
u_sh‹t
 
	mù_sum
;

40 
ö_addr
 
	mù_§c
,
	mù_d°
;

42 
PACK_STRUCT_END


44 
u32_t
 
	tt˝_£q
;

50 
PACK_STRUCT_BEGIN


51 
	st˝hdr


53 
u_sh‹t
 
	mth_•‹t
;

54 
u_sh‹t
 
	mth_dp‹t
;

55 
t˝_£q
 
	mth_£q
;

56 
t˝_£q
 
	mth_ack
;

57 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

58 
u_ch¨
 
	mth_x2_off
;

60 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


61 
	mth_x2
 :4,

62 
	mth_off
:4;

64 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


65 
	mth_off
:4,

66 
	mth_x2
 :4;

69 
u_ch¨
 
	mth_Êags
;

70 
u_sh‹t
 
	mth_wö
;

71 
u_sh‹t
 
	mth_sum
;

72 
u_sh‹t
 
	mth_uΩ
;

74 
	gPACK_STRUCT_END


	@net/lwip/netif/slipif.c

46 
	~"√tif/¶ùif.h
"

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_HAVE_SLIPIF


51 
	~"lwù/def.h
"

52 
	~"lwù/pbuf.h
"

53 
	~"lwù/sys.h
"

54 
	~"lwù/°©s.h
"

55 
	~"lwù/¢mp.h
"

56 
	~"lwù/sio.h
"

58 
	#SLIP_END
 0300

	)

59 
	#SLIP_ESC
 0333

	)

60 
	#SLIP_ESC_END
 0334

	)

61 
	#SLIP_ESC_ESC
 0335

	)

63 
	#MAX_SIZE
 1500

	)

75 
îr_t


76 
	$¶ùif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

78 
pbuf
 *
q
;

79 
u16_t
 
i
;

80 
u8_t
 
c
;

82 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

83 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

84 
	`LWIP_ASSERT
("∞!NULL", (
p
 !
NULL
));

86 
	`LWIP_UNUSED_ARG
(
ùaddr
);

89 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

91 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

92 
i
 = 0; i < 
q
->
Àn
; i++) {

93 
c
 = ((
u8_t
 *)
q
->
∑ylﬂd
)[
i
];

94 
c
) {

95 
SLIP_END
:

96 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

97 
	`sio_£nd
(
SLIP_ESC_END
, 
√tif
->
°©e
);

99 
SLIP_ESC
:

100 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

101 
	`sio_£nd
(
SLIP_ESC_ESC
, 
√tif
->
°©e
);

104 
	`sio_£nd
(
c
, 
√tif
->
°©e
);

109 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

110  
ERR_OK
;

111 
	}
}

121 
pbuf
 *

122 
	$¶ùif_öput
(
√tif
 *netif)

124 
u8_t
 
c
;

126 
pbuf
 *
p
, *
q
;

127 
u16_t
 
ªcved
;

128 
u16_t
 
i
;

130 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

131 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

133 
q
 = 
p
 = 
NULL
;

134 
ªcved
 = 
i
 = 0;

135 
c
 = 0;

138 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

139 
c
) {

140 
SLIP_END
:

141 i‡(
ªcved
 > 0) {

144 
	`pbuf_ªÆloc
(
q
, 
ªcved
);

146 
	`LINK_STATS_INC
(
lök
.
ªcv
);

148 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif: GotÖacket\n"));

149  
q
;

153 
SLIP_ESC
:

154 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

155 
c
) {

156 
SLIP_ESC_END
:

157 
c
 = 
SLIP_END
;

159 
SLIP_ESC_ESC
:

160 
c
 = 
SLIP_ESC
;

167 i‡(
p
 =
NULL
) {

169 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:álloc\n"));

170 
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
PBUF_POOL_BUFSIZE
, 
PBUF_POOL
);

172 i‡(
p
 =
NULL
) {

173 
	`LINK_STATS_INC
(
lök
.
dr›
);

174 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:ÇoÇewÖbuf! (DROP)\n"));

179 i‡(
q
 !
NULL
) {

181 
	`pbuf_ˇt
(
q
, 
p
);

184 
q
 = 
p
;

189 i‡((
p
 !
NULL
Ë&& (
ªcved
 <
MAX_SIZE
)) {

190 ((
u8_t
 *)
p
->
∑ylﬂd
)[
i
] = 
c
;

191 
ªcved
++;

192 
i
++;

193 i‡(
i
 >
p
->
Àn
) {

195 
i
 = 0;

196 i‡(
p
->
√xt
 !
NULL
 &&Ö->√xt->
Àn
 > 0) {

198 
p
 =Ö->
√xt
;

202 
p
 = 
NULL
;

209  
NULL
;

210 
	}
}

212 #i‡!
NO_SYS


221 
	$¶ùif_lo›
(*
nf
)

223 
pbuf
 *
p
;

224 
√tif
 *√ti‡(√ti‡*)
nf
;

227 
p
 = 
	`¶ùif_öput
(
√tif
);

228 i‡(
p
 !
NULL
) {

229 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

230 
	`pbuf_‰ì
(
p
);

231 
p
 = 
NULL
;

235 
	}
}

251 
îr_t


252 
	$¶ùif_öô
(
√tif
 *netif)

255 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("¶ùif_öô:Çëif->num=%"
U16_F
"\n", (
u16_t
)
√tif
->
num
));

257 
√tif
->
«me
[0] = 's';

258 
√tif
->
«me
[1] = 'l';

259 
√tif
->
ouçut
 = 
¶ùif_ouçut
;

260 
√tif
->
mtu
 = 
MAX_SIZE
;

261 
√tif
->
Êags
 = 
NETIF_FLAG_POINTTOPOINT
;

264 
√tif
->
°©e
 = 
	`sio_›í
“ëif->
num
);

265 i‡(!
√tif
->
°©e
) {

267  
ERR_IF
;

274 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_¶ù
, 0);

277 
	`sys_thªad_√w
(
SLIPIF_THREAD_NAME
, 
¶ùif_lo›
, 
√tif
, 
SLIPIF_THREAD_STACKSIZE
, 
SLIPIF_THREAD_PRIO
);

278  
ERR_OK
;

279 
	}
}

	@net/ns.h

2 
	~<öc/ns.h
>

3 
	~<öc/lib.h
>

5 
	#IP
 "10.0.2.15"

	)

6 
	#MASK
 "255.255.255.0"

	)

7 
	#DEFAULT
 "10.0.2.2"

	)

9 
	#TIMER_INTERVAL
 250

	)

12 
	#QUEUE_SIZE
 20

	)

13 
	#REQVA
 (0x0ffff000 - 
QUEUE_SIZE
 * 
PGSIZE
)

	)

16 
timî
(
ívid_t
 
ns_ívid
, 
uöt32_t
 
öôül_to
);

19 
öput
(
ívid_t
 
ns_ívid
);

22 
ouçut
(
ívid_t
 
ns_ívid
);

	@net/output.c

2 
	~"ns.h
"

4 
Nsùc
 
nsùcbuf
;

7 
	$ouçut
(
ívid_t
 
ns_ívid
)

9 
bö¨y«me
 = "ns_output";

12 
r
;

15 
öt32_t
 
ªq
, 
whom
;

16 
ªq
 = 
	`ùc_ªcv
(&
whom
, &
nsùcbuf
, 
NULL
);

17 
	`as£π
(
whom
 =
ns_ívid
);

18 
	`as£π
(
ªq
 =
NSREQ_OUTPUT
);

19 i‡((
r
 = 
	`sys_√t_å™smô
(
nsùcbuf
.
pkt
.
jp_d©a
,Çsùcbuf.pkt.
jp_Àn
)) < 0)

20 
	`˝rötf
("FaûedÅÿå™smôÖackë: %e\n", 
r
);

23 
	}
}

	@net/serv.c

7 
	~<öc/x86.h
>

8 
	~<öc/°rög.h
>

9 
	~<öc/ív.h
>

10 
	~<öc/ns.h
>

11 
	~<öc/lib.h
>

13 
	~<¨ch/≥º‹.h
>

14 
	~<¨ch/thªad.h
>

15 
	~<lwù/sockës.h
>

16 
	~<lwù/√tif.h
>

17 
	~<lwù/°©s.h
>

18 
	~<lwù/sys.h
>

19 
	~<lwù/t˝.h
>

20 
	~<lwù/udp.h
>

21 
	~<lwù/dh˝.h
>

22 
	~<lwù/t˝ù.h
>

23 
	~<lwù/°©s.h
>

24 
	~<lwù/√tbuf.h
>

25 
	~<√tif/ëh¨p.h
>

26 
	~<jif/jif.h
>

28 
	~"ns.h
"

31 
	gî∫o
;

33 
√tif
 
	gnif
;

35 
	#debug
 0

	)

37 
	stimî_thªad
 {

38 
uöt32_t
 
	mm£c
;

39 (*
	mfunc
)();

40 c⁄° *
	m«me
;

43 
timî_thªad
 
	gt_¨p
;

44 
timî_thªad
 
	gt_t˝f
;

45 
timî_thªad
 
	gt_t˝s
;

47 
ívid_t
 
	gtimî_ívid
;

48 
ívid_t
 
	göput_ívid
;

49 
ívid_t
 
	gouçut_ívid
;

51 
boﬁ
 
	gbu£
[
QUEUE_SIZE
];

52 
	$√xt_i
(
i
Ë{  (i+1Ë% 
QUEUE_SIZE
; 
	}
}

53 
	$¥ev_i
(
i
Ë{  (ò? i-1 : 
QUEUE_SIZE
-1); 
	}
}

56 
	$gë_buf„r
() {

57 *
va
;

59 
öt64_t
 
i
;

60 
i
 = 0; i < 
QUEUE_SIZE
; i++)

61 i‡(!
bu£
[
i
]) ;

63 i‡(
i
 =
QUEUE_SIZE
) {

64 
	`∑nic
("NS: buffer overflow");

68 
va
 = (*)(
REQVA
 + 
i
 * 
PGSIZE
);

69 
bu£
[
i
] = 1;

71  
va
;

72 
	}
}

75 
	$put_buf„r
(*
va
) {

76 
öt64_t
 
i
 = ((
uöt64_t
)
va
 - 
REQVA
Ë/ 
PGSIZE
;

77 
bu£
[
i
] = 0;

78 
	}
}

81 
	$lwù_öô
(
√tif
 *
nif
, *
if_°©e
,

82 
uöt32_t
 
öô_addr
, uöt32_à
öô_mask
, uöt32_à
öô_gw
)

84 
ù_addr
 
ùaddr
, 
√tmask
, 
g©eway
;

85 
ùaddr
.
addr
 = 
öô_addr
;

86 
√tmask
.
addr
 = 
öô_mask
;

87 
g©eway
.
addr
 = 
öô_gw
;

89 i‡(0 =
	`√tif_add
(
nif
, &
ùaddr
, &
√tmask
, &
g©eway
,

90 
if_°©e
,

91 
jif_öô
,

92 
ù_öput
))

93 
	`∑nic
("lwip_init:Érror inÇetif_add\n");

95 
	`√tif_£t_deÁu…
(
nif
);

96 
	`√tif_£t_up
(
nif
);

97 
	}
}

99 
__©åibuã__
((
n‹ëu∫
))

100 
	$√t_timî
(
uöt64_t
 
¨g
)

102 
timî_thªad
 *
t
 = (timî_thªad *Ë
¨g
;

105 
uöt32_t
 
cur
 = 
	`sys_time_m£c
();

107 
	`lwù_c‹e_lock
();

108 
t
->
	`func
();

109 
	`lwù_c‹e_u∆ock
();

111 
	`thªad_waô
(0, 0, 
cur
 + 
t
->
m£c
);

113 
	}
}

116 
°¨t_timî
(
timî_thªad
 *
t
, (*
func
)(), c⁄° *
«me
, 
m£c
)

118 
t
->
m£c
 = msec;

119 
t
->
func
 = func;

120 
t
->
«me
 =Çame;

121 
r
 = 
	`thªad_¸óã
(0, 
«me
, &
√t_timî
, (
uöt64_t
)
t
);

122 i‡(
r
 < 0)

123 
	`∑nic
("ˇ¬Ÿ cª©êtimîÅhªad: %s", 
	`e2s
(
r
));

124 
	}
}

127 
	$t˝ù_öô_d⁄e
(*
¨g
)

129 
uöt32_t
 *
d⁄e
 = 
¨g
;

130 *
d⁄e
 = 1;

131 
	`thªad_wakeup
(
d⁄e
);

132 
	}
}

135 
	$£rve_öô
(
uöt32_t
 
ùaddr
, uöt32_à
√tmask
, uöt32_à
gw
)

137 
r
;

138 
	`lwù_c‹e_lock
();

140 
uöt32_t
 
d⁄e
 = 0;

141 
	`t˝ù_öô
(&
t˝ù_öô_d⁄e
, &
d⁄e
);

142 
	`lwù_c‹e_u∆ock
();

143 
	`thªad_waô
(&
d⁄e
, 0, (
uöt32_t
)~0);

144 
	`lwù_c‹e_lock
();

146 
	`lwù_öô
(&
nif
, &
ouçut_ívid
, 
ùaddr
, 
√tmask
, 
gw
);

148 
	`°¨t_timî
(&
t_¨p
, &
ëh¨p_tmr
, "¨∞timî", 
ARP_TMR_INTERVAL
);

149 
	`°¨t_timî
(&
t_t˝f
, &
t˝_Á°tmr
, "t˝ fÅimî", 
TCP_FAST_INTERVAL
);

150 
	`°¨t_timî
(&
t_t˝s
, &
t˝_¶owtmr
, "t˝ sÅimî", 
TCP_SLOW_INTERVAL
);

152 
ö_addr
 
ü
 = {
ùaddr
};

153 
	`˝rötf
("ns: %02x:%02x:%02x:%02x:%02x:%02x"

155 
nif
.
hwaddr
[0],Çif.hwaddr[1],Çif.hwaddr[2],

156 
nif
.
hwaddr
[3],Çif.hwaddr[4],Çif.hwaddr[5],

157 
	`öë_¡ﬂ
(
ü
));

159 
	`lwù_c‹e_u∆ock
();

161 
	`˝rötf
("NS: TCP/IP initialized.\n");

162 
	}
}

165 
	$¥o˚ss_timî
(
ívid_t
 
ívid
) {

166 
uöt32_t
 
°¨t
, 
now
, 
to
;

168 i‡(
ívid
 !
timî_ívid
) {

169 
	`˝rötf
("NS:Ñe˚ivedÅimî i¡îru± fromÉnvid %xÇŸÅimîÉnv\n", 
ívid
);

173 
°¨t
 = 
	`sys_time_m£c
();

174 
	`thªad_yõld
();

175 
now
 = 
	`sys_time_m£c
();

177 
to
 = 
TIMER_INTERVAL
 - (
now
 - 
°¨t
);

178 
	`ùc_£nd
(
ívid
, 
to
, 0, 0);

179 
	}
}

181 
	s°_¨gs
 {

182 
öt32_t
 
	mªqno
;

183 
uöt32_t
 
	mwhom
;

184 
Nsùc
 *
	mªq
;

188 
	$£rve_thªad
(
uöt64_t
 
a
) {

189 
°_¨gs
 *
¨gs
 = (°_¨g†*)
a
;

190 
Nsùc
 *
ªq
 = 
¨gs
->req;

191 
r
;

193 
¨gs
->
ªqno
) {

194 
NSREQ_ACCEPT
:

196 
N§ë_ac˚±
 
ªt
;

197 
r
 = 
	`lwù_ac˚±
(
ªq
->
ac˚±
.
ªq_s
, &
ªt
.
ªt_addr
,

198 &
ªt
.
ªt_addæí
);

199 
	`memmove
(
ªq
, &
ªt
, Ñet);

202 
NSREQ_BIND
:

203 
r
 = 
	`lwù_böd
(
ªq
->
böd
.
ªq_s
, &ªq->böd.
ªq_«me
,

204 
ªq
->
böd
.
ªq_«mñí
);

206 
NSREQ_SHUTDOWN
:

207 
r
 = 
	`lwù_shutdown
(
ªq
->
shutdown
.
ªq_s
,Ñeq->shutdown.
ªq_how
);

209 
NSREQ_CLOSE
:

210 
r
 = 
	`lwù_˛o£
(
ªq
->
˛o£
.
ªq_s
);

212 
NSREQ_CONNECT
:

213 
r
 = 
	`lwù_c⁄√˘
(
ªq
->
c⁄√˘
.
ªq_s
, &ªq->c⁄√˘.
ªq_«me
,

214 
ªq
->
c⁄√˘
.
ªq_«mñí
);

216 
NSREQ_LISTEN
:

217 
r
 = 
	`lwù_li°í
(
ªq
->
li°í
.
ªq_s
,Ñeq->li°í.
ªq_backlog
);

219 
NSREQ_RECV
:

222 
r
 = 
	`lwù_ªcv
(
ªq
->
ªcv
.
ªq_s
,Ñeq->
ªcvRë
.
ªt_buf
,

223 
ªq
->
ªcv
.
ªq_Àn
,Ñeq->ªcv.
ªq_Êags
);

225 
NSREQ_SEND
:

226 
r
 = 
	`lwù_£nd
(
ªq
->
£nd
.
ªq_s
, &ªq->£nd.
ªq_buf
,

227 
ªq
->
£nd
.
ªq_size
,Ñeq->£nd.
ªq_Êags
);

229 
NSREQ_SOCKET
:

230 
r
 = 
	`lwù_sockë
(
ªq
->
sockë
.
ªq_domaö
,Ñeq->sockë.
ªq_ty≥
,

231 
ªq
->
sockë
.
ªq_¥Ÿocﬁ
);

233 
NSREQ_INPUT
:

234 
	`jif_öput
(&
nif
, (*)&
ªq
->
pkt
);

235 
r
 = 0;

238 
	`˝rötf
("InvÆidÑeque° codê%d from %08x\n", 
¨gs
->
whom
,árgs->
ªq
);

239 
r
 = -
E_INVAL
;

243 i‡(
r
 == -1) {

244 
buf
[100];

245 
	`¢¥ötf
(
buf
,  buf, "n†ªqÅy≥ %d", 
¨gs
->
ªqno
);

246 
	`≥º‹
(
buf
);

249 i‡(
¨gs
->
ªqno
 !
NSREQ_INPUT
)

250 
	`ùc_£nd
(
¨gs
->
whom
, 
r
, 0, 0);

252 
	`put_buf„r
(
¨gs
->
ªq
);

253 
	`sys_∑ge_unm≠
(0, (*Ë
¨gs
->
ªq
);

254 
	`‰ì
(
¨gs
);

255 
	}
}

258 
	$£rve
() {

259 
öt32_t
 
ªqno
;

260 
uöt32_t
 
whom
;

261 
i
, 
≥rm
;

262 *
va
;

268 
i
 = 0; 
	`thªad_wakeups_≥ndög
() && i < 32; ++i)

269 
	`thªad_yõld
();

271 
≥rm
 = 0;

272 
va
 = 
	`gë_buf„r
();

273 
ªqno
 = 
	`ùc_ªcv
((
öt32_t
 *Ë&
whom
, (*Ë
va
, &
≥rm
);

274 i‡(
debug
) {

275 
	`˝rötf
("n†ªq %d from %08x\n", 
ªqno
, 
whom
);

279 i‡(
ªqno
 =
NSREQ_TIMER
) {

280 
	`¥o˚ss_timî
(
whom
);

281 
	`put_buf„r
(
va
);

286 i‡(!(
≥rm
 & 
PTE_P
)) {

287 
	`˝rötf
("InvÆidÑeque° from %08x:Çÿ¨gumíà∑ge\n", 
whom
);

293 
°_¨gs
 *
¨gs
 = 
	`mÆloc
((st_args));

294 i‡(!
¨gs
)

295 
	`∑nic
("couldÇotállocateÅhreadárgs structure");

297 
¨gs
->
ªqno
 =Ñeqno;

298 
¨gs
->
whom
 = whom;

299 
¨gs
->
ªq
 = 
va
;

301 
	`thªad_¸óã
(0, "£rve_thªad", 
£rve_thªad
, (
uöt64_t
)
¨gs
);

302 
	`thªad_yõld
();

304 
	}
}

307 
	$tmaö
(
uöt64_t
 
¨g
) {

308 
	`£rve_öô
(
	`öë_addr
(
IP
),

309 
	`öë_addr
(
MASK
),

310 
	`öë_addr
(
DEFAULT
));

311 
	`£rve
();

312 
	}
}

315 
	$umaö
(
¨gc
, **
¨gv
)

317 
ívid_t
 
ns_ívid
 = 
	`sys_gëívid
();

319 
bö¨y«me
 = "ns";

322 
timî_ívid
 = 
	`f‹k
();

323 i‡(
timî_ívid
 < 0)

324 
	`∑nic
("error forking");

325 i‡(
timî_ívid
 == 0) {

326 
	`timî
(
ns_ívid
, 
TIMER_INTERVAL
);

332 
öput_ívid
 = 
	`f‹k
();

333 i‡(
öput_ívid
 < 0)

334 
	`∑nic
("error forking");

335 i‡(
öput_ívid
 == 0) {

336 
	`öput
(
ns_ívid
);

342 
ouçut_ívid
 = 
	`f‹k
();

343 i‡(
ouçut_ívid
 < 0)

344 
	`∑nic
("error forking");

345 i‡(
ouçut_ívid
 == 0) {

346 
	`ouçut
(
ns_ívid
);

352 
	`thªad_öô
();

353 
	`thªad_¸óã
(0, "maö", 
tmaö
, 0);

354 
	`thªad_yõld
();

356 
	}
}

	@net/testinput.c

2 
	~"ns.h
"

3 
	~<√tif/ëh¨p.h
>

5 
ívid_t
 
	gouçut_ívid
;

6 
ívid_t
 
	göput_ívid
;

8 
jif_pkt
 *
	gpkt
 = (jif_pkt*)
REQVA
;

12 
	$™noun˚
()

20 
uöt8_t
 
mac
[6] = {0x52, 0x54, 0x00, 0x12, 0x34, 0x56};

21 
uöt32_t
 
myù
 = 
	`öë_addr
(
IP
);

22 
uöt32_t
 
gwù
 = 
	`öë_addr
(
DEFAULT
);

23 
r
;

25 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
pkt
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

26 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

28 
ëh¨p_hdr
 *
¨p
 = (ëh¨p_hdr*)
pkt
->
jp_d©a
;

29 
pkt
->
jp_Àn
 = (*
¨p
);

31 
	`mem£t
(
¨p
->
ëhhdr
.
de°
.
addr
, 0xff, 
ETHARP_HWADDR_LEN
);

32 
	`mem˝y
(
¨p
->
ëhhdr
.
§c
.
addr
, 
mac
, 
ETHARP_HWADDR_LEN
);

33 
¨p
->
ëhhdr
.
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

34 
¨p
->
hwty≥
 = 
	`ht⁄s
(1);

35 
¨p
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

36 
¨p
->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8) | 4);

37 
¨p
->
›code
 = 
	`ht⁄s
(
ARP_REQUEST
);

38 
	`mem˝y
(
¨p
->
shwaddr
.
addr
, 
mac
, 
ETHARP_HWADDR_LEN
);

39 
	`mem˝y
(
¨p
->
sùaddr
.
addrw
, &
myù
, 4);

40 
	`mem£t
(
¨p
->
dhwaddr
.
addr
, 0x00, 
ETHARP_HWADDR_LEN
);

41 
	`mem˝y
(
¨p
->
dùaddr
.
addrw
, &
gwù
, 4);

43 
	`ùc_£nd
(
ouçut_ívid
, 
NSREQ_OUTPUT
, 
pkt
, 
PTE_P
|
PTE_W
|
PTE_U
);

44 
	`sys_∑ge_unm≠
(0, 
pkt
);

45 
	}
}

48 
	$hexdump
(c⁄° *
¥efix
, c⁄° *
d©a
, 
Àn
)

50 
i
;

51 
buf
[80];

52 *
íd
 = 
buf
 + (buf);

53 *
out
 = 
NULL
;

54 
i
 = 0; i < 
Àn
; i++) {

55 i‡(
i
 % 16 == 0)

56 
out
 = 
buf
 + 
	`¢¥ötf
(buf, 
íd
 - buf,

57 "%s%04x ", 
¥efix
, 
i
);

58 
out
 +
	`¢¥ötf
(out, 
íd
 - out, "%02x", ((
uöt8_t
*)
d©a
)[
i
]);

59 i‡(
i
 % 16 =15 || i =
Àn
 - 1)

60 
	`˝rötf
("%.*s\n", 
out
 - 
buf
, buf);

61 i‡(
i
 % 2 == 1)

62 *(
out
++) = ' ';

63 i‡(
i
 % 16 == 7)

64 *(
out
++) = ' ';

66 
	}
}

69 
	$umaö
(
¨gc
, **
¨gv
)

71 
ívid_t
 
ns_ívid
 = 
	`sys_gëívid
();

72 
i
, 
r
, 
fú°
 = 1;

74 
bö¨y«me
 = "testinput";

76 
ouçut_ívid
 = 
	`f‹k
();

77 i‡(
ouçut_ívid
 < 0)

78 
	`∑nic
("error forking");

79 i‡(
ouçut_ívid
 == 0) {

80 
	`ouçut
(
ns_ívid
);

84 
öput_ívid
 = 
	`f‹k
();

85 i‡(
öput_ívid
 < 0)

86 
	`∑nic
("error forking");

87 i‡(
öput_ívid
 == 0) {

88 
	`öput
(
ns_ívid
);

92 
	`˝rötf
("Sending ARPánnouncement...\n");

93 
	`™noun˚
();

96 
ívid_t
 
whom
;

97 
≥rm
;

99 
öt32_t
 
ªq
 = 
	`ùc_ªcv
((öt32_à*)&
whom
, 
pkt
, &
≥rm
);

100 i‡(
ªq
 < 0)

101 
	`∑nic
("ùc_ªcv: %e", 
ªq
);

102 i‡(
whom
 !
öput_ívid
)

103 
	`∑nic
("IPC from u√x≥˘edÉnvú⁄míà%08x", 
whom
);

104 i‡(
ªq
 !
NSREQ_INPUT
)

105 
	`∑nic
("U√x≥˘ed IPC %d", 
ªq
);

107 
	`hexdump
("öput: ", 
pkt
->
jp_d©a
,Ökt->
jp_Àn
);

108 
	`˝rötf
("\n");

112 i‡(
fú°
)

113 
	`˝rötf
("Waiting forÖackets...\n");

114 
fú°
 = 0;

116 
	}
}

	@net/testoutput.c

2 
	~"ns.h
"

4 #i‚de‡
TESTOUTPUT_COUNT


5 
	#TESTOUTPUT_COUNT
 10

	)

8 
ívid_t
 
	gouçut_ívid
;

10 
jif_pkt
 *
	gpkt
 = (jif_pkt*)
REQVA
;

14 
	$umaö
(
¨gc
, **
¨gv
)

16 
ívid_t
 
ns_ívid
 = 
	`sys_gëívid
();

17 
i
, 
r
;

19 
bö¨y«me
 = "testoutput";

21 
ouçut_ívid
 = 
	`f‹k
();

22 i‡(
ouçut_ívid
 < 0)

23 
	`∑nic
("error forking");

24 i‡(
ouçut_ívid
 == 0) {

25 
	`ouçut
(
ns_ívid
);

29 
i
 = 0; i < 
TESTOUTPUT_COUNT
; i++) {

30 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
pkt
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

31 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

32 
pkt
->
jp_Àn
 = 
	`¢¥ötf
’kt->
jp_d©a
,

33 
PGSIZE
 - (
pkt
->
jp_Àn
),

34 "Packë %02d", 
i
);

35 
	`˝rötf
("TønsmôtögÖackë %d\n", 
i
);

36 
	`ùc_£nd
(
ouçut_ívid
, 
NSREQ_OUTPUT
, 
pkt
, 
PTE_P
|
PTE_W
|
PTE_U
);

37 
	`sys_∑ge_unm≠
(0, 
pkt
);

41 
i
 = 0; i < 
TESTOUTPUT_COUNT
*2; i++)

42 
	`sys_yõld
();

43 
	}
}

	@net/timer.c

2 
	~"ns.h
"

5 
	$timî
(
ívid_t
 
ns_ívid
, 
uöt32_t
 
öôül_to
) {

6 
r
;

7 
uöt32_t
 
°›
 = 
	`sys_time_m£c
(Ë+ 
öôül_to
;

9 
bö¨y«me
 = "ns_timer";

12 (
r
 = 
	`sys_time_m£c
()Ë< 
°›
 &&Ñ >= 0) {

13 
	`sys_yõld
();

15 i‡(
r
 < 0)

16 
	`∑nic
("sys_time_m£c: %e", 
r
);

18 
	`ùc_£nd
(
ns_ívid
, 
NSREQ_TIMER
, 0, 0);

21 
uöt32_t
 
to
, 
whom
;

22 
to
 = 
	`ùc_ªcv
((
öt32_t
 *Ë&
whom
, 0, 0);

24 i‡(
whom
 !
ns_ívid
) {

25 
	`˝rötf
("NS TIMER:ÅimîÅhªad gŸ IPC mesßgê‰omÉnv %xÇŸ NS\n", 
whom
);

29 
°›
 = 
	`sys_time_m£c
(Ë+ 
to
;

33 
	}
}

	@user/badsegment.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

10 
asm
 volatile("movw $0x28,%ax; movw %ax,%ds");

11 
	}
}

	@user/breakpoint.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
asm
 volatile("int $3");

10 
	}
}

	@user/buggyhello.c

5 
	~<öc/lib.h
>

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
	`sys_˝uts
((*)1, 1);

11 
	}
}

	@user/buggyhello2.c

5 
	~<öc/lib.h
>

7 c⁄° *
	ghñlo
 = "hello, world\n";

10 
	$umaö
(
¨gc
, **
¨gv
)

12 
	`sys_˝uts
(
hñlo
, 1024*1024);

13 
	}
}

	@user/cat.c

2 
	~<öc/lib.h
>

4 
	gbuf
[8192];

7 
	$ˇt
(
f
, *
s
)

9 
n
;

10 
r
;

12 (
n
 = 
	`ªad
(
f
, 
buf
, ()(buf))) > 0)

13 i‡((
r
 = 
	`wrôe
(1, 
buf
, 
n
)) !=Ç)

14 
	`∑nic
("wrôêîr‹ c›yög %s: %e", 
s
, 
r
);

15 i‡(
n
 < 0)

16 
	`∑nic
("îr‹Ñódög %s: %e", 
s
, 
n
);

17 
	}
}

20 
	$umaö
(
¨gc
, **
¨gv
)

22 
f
, 
i
;

24 
bö¨y«me
 = "cat";

25 i‡(
¨gc
 == 1)

26 
	`ˇt
(0, "<stdin>");

28 
i
 = 1; i < 
¨gc
; i++) {

29 
f
 = 
	`›í
(
¨gv
[
i
], 
O_RDONLY
);

30 i‡(
f
 < 0)

31 
	`¥ötf
("ˇn'à›í %s: %e\n", 
¨gv
[
i
], 
f
);

33 
	`ˇt
(
f
, 
¨gv
[
i
]);

34 
	`˛o£
(
f
);

37 
	}
}

	@user/divzero.c

4 
	~<öc/lib.h
>

6 
	gzîo
;

9 
	$umaö
(
¨gc
, **
¨gv
)

11 
zîo
 = 0;

12 
	`˝rötf
("1/0 i†%08x!\n", 1/
zîo
);

13 
	}
}

	@user/dumbfork.c

5 
	~<öc/°rög.h
>

6 
	~<öc/lib.h
>

8 
ívid_t
 
dumbf‹k
();

11 
	$umaö
(
¨gc
, **
¨gv
)

13 
ívid_t
 
who
;

14 
i
;

17 
who
 = 
	`dumbf‹k
();

20 
i
 = 0; i < (
who
 ? 10 : 20); i++) {

21 
	`˝rötf
("%d: IámÅhê%s!\n", 
i
, 
who
 ? "parent" : "child");

22 
	`sys_yõld
();

24 
	}
}

27 
	$duµage
(
ívid_t
 
d°ív
, *
addr
)

29 
r
;

32 i‡((
r
 = 
	`sys_∑ge_Æloc
(
d°ív
, 
addr
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

33 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

34 i‡((
r
 = 
	`sys_∑ge_m≠
(
d°ív
, 
addr
, 0, 
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

35 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

36 
	`memmove
(
UTEMP
, 
addr
, 
PGSIZE
);

37 i‡((
r
 = 
	`sys_∑ge_unm≠
(0, 
UTEMP
)) < 0)

38 
	`∑nic
("sys_∑ge_unm≠: %e", 
r
);

39 
	}
}

41 
ívid_t


42 
	$dumbf‹k
()

44 
ívid_t
 
ívid
;

45 
uöt8_t
 *
addr
;

46 
r
;

47 
íd
[];

54 
ívid
 = 
	`sys_exof‹k
();

55 i‡(
ívid
 < 0)

56 
	`∑nic
("sys_exof‹k: %e", 
ívid
);

57 i‡(
ívid
 == 0) {

62 
thi£nv
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

69 
addr
 = (
uöt8_t
*Ë
UTEXT
;ádd∏< 
íd
;ádd∏+
PGSIZE
)

70 
	`duµage
(
ívid
, 
addr
);

73 
	`duµage
(
ívid
, 
	`ROUNDDOWN
(&
addr
, 
PGSIZE
));

76 i‡((
r
 = 
	`sys_ív_£t_°©us
(
ívid
, 
ENV_RUNNABLE
)) < 0)

77 
	`∑nic
("sys_ív_£t_°©us: %e", 
r
);

79  
ívid
;

80 
	}
}

	@user/echo.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
i
, 
nÊag
;

9 
nÊag
 = 0;

10 i‡(
¨gc
 > 1 && 
	`°rcmp
(
¨gv
[1], "-n") == 0) {

11 
nÊag
 = 1;

12 
¨gc
--;

13 
¨gv
++;

15 
i
 = 1; i < 
¨gc
; i++) {

16 i‡(
i
 > 1)

17 
	`wrôe
(1, " ", 1);

18 
	`wrôe
(1, 
¨gv
[
i
], 
	`°æí
(argv[i]));

20 i‡(!
nÊag
)

21 
	`wrôe
(1, "\n", 1);

22 
	}
}

	@user/echosrv.c

2 
	~<öc/lib.h
>

3 
	~<lwù/sockës.h
>

4 
	~<lwù/öë.h
>

6 
	#PORT
 7

	)

8 
	#BUFFSIZE
 32

	)

9 
	#MAXPENDING
 5

10 

	)

12 
	$dõ
(*
m
)

14 
	`˝rötf
("%s\n", 
m
);

15 
	`exô
();

16 
	}
}

19 
	$h™dÀ_˛õ¡
(
sock
)

21 
buf„r
[
BUFFSIZE
];

22 
ª˚ived
 = -1;

24 i‡((
ª˚ived
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
)) < 0)

25 
	`dõ
("FailedÅoÑeceive initial bytes from client");

28 
ª˚ived
 > 0) {

30 i‡(
	`wrôe
(
sock
, 
buf„r
, 
ª˚ived
) !=Ñeceived)

31 
	`dõ
("FailedÅo send bytesÅo client");

34 i‡((
ª˚ived
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
)) < 0)

35 
	`dõ
("FailedÅoÑeceiveádditional bytes from client");

37 
	`˛o£
(
sock
);

38 
	}
}

41 
	$umaö
(
¨gc
, **
¨gv
)

43 
£rvîsock
, 
˛õ¡sock
;

44 
sockaddr_ö
 
echo£rvî
, 
echo˛õ¡
;

45 
buf„r
[
BUFFSIZE
];

46 
echﬁí
;

47 
ª˚ived
 = 0;

50 i‡((
£rvîsock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)) < 0)

51 
	`dõ
("FailedÅo create socket");

53 
	`˝rötf
("opened socket\n");

56 
	`mem£t
(&
echo£rvî
, 0, (echoserver));

57 
echo£rvî
.
sö_Ámûy
 = 
AF_INET
;

58 
echo£rvî
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

59 
echo£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

61 
	`˝rötf
("tryingÅo bind\n");

64 i‡(
	`böd
(
£rvîsock
, (
sockaddr
 *Ë&
echo£rvî
,

65 (
echo£rvî
)) < 0) {

66 
	`dõ
("FailedÅo bindÅhe server socket");

70 i‡(
	`li°í
(
£rvîsock
, 
MAXPENDING
) < 0)

71 
	`dõ
("FailedÅoÜisten on server socket");

73 
	`˝rötf
("bound\n");

77 
˛õ¡Àn
 = (
echo˛õ¡
);

79 i‡((
˛õ¡sock
 =

80 
	`ac˚±
(
£rvîsock
, (
sockaddr
 *Ë&
echo˛õ¡
,

81 &
˛õ¡Àn
)) < 0) {

82 
	`dõ
("FailedÅoáccept client connection");

84 
	`˝rötf
("Clõ¡ c⁄√˘ed: %s\n", 
	`öë_¡ﬂ
(
echo˛õ¡
.
sö_addr
));

85 
	`h™dÀ_˛õ¡
(
˛õ¡sock
);

88 
	`˛o£
(
£rvîsock
);

90 
	}
}

	@user/echotest.c

2 
	~<öc/lib.h
>

3 
	~<lwù/sockës.h
>

4 
	~<lwù/öë.h
>

6 
	#BUFFSIZE
 32

	)

7 
	#IPADDR
 "10.0.2.15"

	)

8 
	#PORT
 10000

	)

10 c⁄° *
	gmsg
 = "Hello world!\n";

13 
	$dõ
(*
m
)

15 
	`˝rötf
("%s\n", 
m
);

16 
	`exô
();

17 
	}
}

19 
	$umaö
(
¨gc
, **
¨gv
)

21 
sock
;

22 
sockaddr_ö
 
echo£rvî
;

23 
buf„r
[
BUFFSIZE
];

24 
echﬁí
;

25 
ª˚ived
 = 0;

27 
	`˝rötf
("ConnectingÅo:\n");

28 
	`˝rötf
("\tùáddªs†%†%x\n", 
IPADDR
, 
	`öë_addr
(IPADDR));

31 i‡((
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)) < 0)

32 
	`dõ
("FailedÅo create socket");

34 
	`˝rötf
("opened socket\n");

37 
	`mem£t
(&
echo£rvî
, 0, (echoserver));

38 
echo£rvî
.
sö_Ámûy
 = 
AF_INET
;

39 
echo£rvî
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
IPADDR
);

40 
echo£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

42 
	`˝rötf
("tryingÅo connectÅo server\n");

45 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *Ë&
echo£rvî
, (echoserver)) < 0)

46 
	`dõ
("FailedÅo connect with server");

48 
	`˝rötf
("connectedÅo server\n");

51 
echﬁí
 = 
	`°æí
(
msg
);

52 i‡(
	`wrôe
(
sock
, 
msg
, 
echﬁí
) !=Écholen)

53 
	`dõ
("Mismatch inÇumber of sent bytes");

56 
	`˝rötf
("Received: \n");

57 
ª˚ived
 < 
echﬁí
) {

58 
byãs
 = 0;

59 i‡((
byãs
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
-1)) < 1) {

60 
	`dõ
("FailedÅoÑeceive bytes from server");

62 
ª˚ived
 +
byãs
;

63 
buf„r
[
byãs
] = '\0';

64 
	`˝rötf
(
buf„r
);

66 
	`˝rötf
("\n");

68 
	`˛o£
(
sock
);

69 
	}
}

	@user/evilhello.c

5 
	~<öc/lib.h
>

8 
	$umaö
(
¨gc
, **
¨gv
)

11 
	`sys_˝uts
((*)0x800420000c, 100);

12 
	}
}

	@user/fairness.c

6 
	~<öc/lib.h
>

9 
	$umaö
(
¨gc
, **
¨gv
)

11 
ívid_t
 
who
, 
id
;

13 
id
 = 
	`sys_gëívid
();

15 i‡(
thi£nv
 =&
ívs
[1]) {

17 
	`ùc_ªcv
(&
who
, 0, 0);

18 
	`˝rötf
("%xÑecv from %x\n", 
id
, 
who
);

21 
	`˝rötf
("%xÜo› sídögÅÿ%x\n", 
id
, 
ívs
[1].
ív_id
);

23 
	`ùc_£nd
(
ívs
[1].
ív_id
, 0, 0, 0);

25 
	}
}

	@user/faultalloc.c

4 
	~<öc/lib.h
>

7 
	$h™dÀr
(
UTøp‰ame
 *
utf
)

9 
r
;

10 *
addr
 = (*)
utf
->
utf_Áu…_va
;

12 
	`˝rötf
("Áu… %x\n", 
addr
);

13 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
	`ROUNDDOWN
(
addr
, 
PGSIZE
),

14 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

15 
	`∑nic
("Æloˇtögáà%x i¿∑gêÁu… h™dÀr: %e", 
addr
, 
r
);

16 
	`¢¥ötf
((*Ë
addr
, 100, "this string was faulted inát %x",áddr);

17 
	}
}

20 
	$umaö
(
¨gc
, **
¨gv
)

22 
	`£t_pgÁu…_h™dÀr
(
h™dÀr
);

23 
	`˝rötf
("%s\n", (*)0xDeadBeef);

24 
	`˝rötf
("%s\n", (*)0xCafeBffe);

25 
	}
}

	@user/faultallocbad.c

5 
	~<öc/lib.h
>

8 
	$h™dÀr
(
UTøp‰ame
 *
utf
)

10 
r
;

11 *
addr
 = (*)
utf
->
utf_Áu…_va
;

13 
	`˝rötf
("Áu… %x\n", 
addr
);

14 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
	`ROUNDDOWN
(
addr
, 
PGSIZE
),

15 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

16 
	`∑nic
("Æloˇtögáà%x i¿∑gêÁu… h™dÀr: %e", 
addr
, 
r
);

17 
	`¢¥ötf
((*Ë
addr
, 100, "this string was faulted inát %x",áddr);

18 
	}
}

21 
	$umaö
(
¨gc
, **
¨gv
)

23 
	`£t_pgÁu…_h™dÀr
(
h™dÀr
);

24 
	`sys_˝uts
((*)0xDEADBEEF, 4);

25 
	}
}

	@user/faultbadhandler.c

7 
	~<öc/lib.h
>

10 
	$umaö
(
¨gc
, **
¨gv
)

12 
	`sys_∑ge_Æloc
(0, (*Ë(
UXSTACKTOP
 - 
PGSIZE
), 
PTE_P
|
PTE_U
|
PTE_W
);

13 
	`sys_ív_£t_pgÁu…_upˇŒ
(0, (*) 0xDeadBeef);

15 
	}
}

	@user/faultdie.c

4 
	~<öc/lib.h
>

7 
	$h™dÀr
(
UTøp‰ame
 *
utf
)

9 *
addr
 = (*)
utf
->
utf_Áu…_va
;

10 
uöt32_t
 
îr
 = 
utf
->
utf_îr
;

11 
	`˝rötf
("òÁu…edáàv®%x,Éº %x\n", 
addr
, 
îr
 & 7);

12 
	`sys_ív_de°roy
(
	`sys_gëívid
());

13 
	}
}

16 
	$umaö
(
¨gc
, **
¨gv
)

18 
	`£t_pgÁu…_h™dÀr
(
h™dÀr
);

20 
	}
}

	@user/faultevilhandler.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
	`sys_∑ge_Æloc
(0, (*Ë(
UXSTACKTOP
 - 
PGSIZE
), 
PTE_P
|
PTE_U
|
PTE_W
);

10 
	`sys_ív_£t_pgÁu…_upˇŒ
(0, (*) 0xF0100020);

12 
	}
}

	@user/faultnostack.c

4 
	~<öc/lib.h
>

6 
_pgÁu…_upˇŒ
();

9 
	$umaö
(
¨gc
, **
¨gv
)

11 
	`sys_ív_£t_pgÁu…_upˇŒ
(0, (*Ë
_pgÁu…_upˇŒ
);

13 
	}
}

	@user/faultread.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
	`˝rötf
("IÑead %08x fromÜocation 0!\n", *(*)0);

10 
	}
}

	@user/faultreadkernel.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
	`˝rötf
("IÑead %08x fromÜocation 0x8004000000!\n", *(*)0x8004000000);

10 
	}
}

	@user/faultregs.c

4 
	~<öc/lib.h
>

6 
	sªgs


8 
PushRegs
 
	mªgs
;

9 
uöçå_t
 
	meù
;

10 
uöt64_t
 
	meÊags
;

11 
uöçå_t
 
	me•
;

14 
	#SAVE_REGS
(
ba£
) \

15 "\tmovq %%r14, 0x8("
ba£
")\n" \

16 "\tmovq %%r13, 0x10("
ba£
")\n" \

17 "\tmovq %%r12, 0x18("
ba£
")\n" \

18 "\tmovq %%r11, 0x20("
ba£
")\n" \

19 "\tmovq %%r10, 0x28("
ba£
")\n" \

20 "\tmovq %%r9, 0x30("
ba£
")\n" \

21 "\tmovq %%r8, 0x38("
ba£
")\n" \

22 "\tmovq %%rsi, 0x40("
ba£
")\n" \

23 "\tmovq %%rdi, 0x48("
ba£
")\n" \

24 "\tmovq %%rbp, 0x50("
ba£
")\n" \

25 "\tmovq %%rdx, 0x58("
ba£
")\n" \

26 "\tmovq %%rcx, 0x60("
ba£
")\n" \

27 "\tmovq %%rbx, 0x68("
ba£
")\n" \

28 "\tmovq %%øx, 0x70("
ba£
")\n" \

29 "\tmovq %%r•, 0x88("
ba£
")\n"

	)

31 
	#LOAD_REGS
(
ba£
) \

32 "\tmovq 0x8("
ba£
"), %%r14\n" \

33 "\tmovq 0x10("
ba£
"), %%r13\n" \

34 "\tmovq 0x18("
ba£
"), %%r12 \n" \

35 "\tmovq 0x20("
ba£
"), %%r11\n" \

36 "\tmovq 0x28("
ba£
"), %%r10\n" \

37 "\tmovq 0x30("
ba£
"), %%r9\n" \

38 "\tmovq 0x38("
ba£
"), %%r8\n" \

39 "\tmovq 0x40("
ba£
"), %%rsi\n" \

40 "\tmovq 0x48("
ba£
"), %%rdi\n" \

41 "\tmovq 0x50("
ba£
"), %%rbp\n" \

42 "\tmovq 0x58("
ba£
"), %%rdx\n" \

43 "\tmovq 0x60("
ba£
"), %%rcx\n" \

44 "\tmovq 0x68("
ba£
"), %%rbx\n" \

45 "\tmovq 0x70("
ba£
"), %%rax\n" \

46 "\tmovq 0x88("
ba£
"), %%r•\n"

	)

48 
ªgs
 
	gbef‹e
, 
	gdurög
, 
	ga·î
;

51 
	$check_ªgs
(
ªgs
* 
a
, c⁄° *
™
, ªgs* 
b
, c⁄° *
bn
,

52 c⁄° *
ã°«me
)

54 
mism©ch
 = 0;

56 
	`˝rötf
("%-6†%-8†%-8s\n", "", 
™
, 
bn
);

58 
	#CHECK
(
«me
, 
fõld
) \

60 
	`˝rötf
("%-6†%08x %08x ", #«me, 
a
->
fõld
, 
b
->field); \

61 i‡(
a
->
fõld
 =
b
->field) \

62 
	`˝rötf
("OK\n"); \

64 
	`˝rötf
("MISMATCH\n"); \

65 
mism©ch
 = 1; \

67 } 0)

	)

69 
	`CHECK
(
edi
, 
ªgs
.
ªg_rdi
);

70 
	`CHECK
(
esi
, 
ªgs
.
ªg_rsi
);

71 
	`CHECK
(
ebp
, 
ªgs
.
ªg_rbp
);

72 
	`CHECK
(
ebx
, 
ªgs
.
ªg_rbx
);

73 
	`CHECK
(
edx
, 
ªgs
.
ªg_rdx
);

74 
	`CHECK
(
ecx
, 
ªgs
.
ªg_rcx
);

75 
	`CHECK
(
óx
, 
ªgs
.
ªg_øx
);

76 
	`CHECK
(
eù
,Éip);

77 
	`CHECK
(
eÊags
,Éflags);

78 
	`CHECK
(
e•
,Ésp);

80 #unde‡
CHECK


83 i‡(!
mism©ch
)

84 
	`˝rötf
("Regi°î†%†OK\n", 
ã°«me
);

86 
	`˝rötf
("Regi°î†%†MISMATCH\n", 
ã°«me
);

87 
	}
}

90 
	$pgÁu…
(
UTøp‰ame
 *
utf
)

92 
r
;

94 i‡(
utf
->
utf_Áu…_va
 !(
uöt64_t
)
UTEMP
)

95 
	`∑nic
("pgfaultÉxpectedát UTEMP, got 0x%08x (eip %08x)",

96 
utf
->
utf_Áu…_va
, utf->
utf_rù
);

99 
durög
.
ªgs
 = 
utf
->
utf_ªgs
;

100 
durög
.
eù
 = 
utf
->
utf_rù
;

101 
durög
.
eÊags
 = 
utf
->
utf_eÊags
 & 0xfff;

102 
durög
.
e•
 = 
utf
->
utf_r•
;

103 
	`check_ªgs
(&
bef‹e
, "bef‹e", &
durög
, "during", "in UTrapframe");

106 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
UTEMP
, 
PTE_U
|
PTE_P
|
PTE_W
)) < 0)

107 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

108 
	}
}

111 
	$umaö
(
¨gc
, **
¨gv
)

113 
	`£t_pgÁu…_h™dÀr
(
pgÁu…
);

115 
__asm
 
	`__vﬁ©ûe
(

135 
	`SAVE_REGS
("%%r15")

142 
	`SAVE_REGS
("%%r15")

147 
	`LOAD_REGS
("%%r15")

157 : : "r" (&
bef‹e
), "r" (&
a·î
) : "memory", "cc");

162 i‡(*(*)
UTEMP
 != 42)

163 
	`˝rötf
("EIPáfterÖage-fault MISMATCH\n");

164 
a·î
.
eù
 = 
bef‹e
.eip;

166 
	`check_ªgs
(&
bef‹e
, "bef‹e", &
a·î
, "after", "afterÖage-fault");

167 
	}
}

	@user/faultwrite.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

10 
	}
}

	@user/faultwritekernel.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

10 
	}
}

	@user/forktree.c

4 
	~<öc/lib.h
>

6 
	#DEPTH
 3

	)

8 
f‹kåì
(c⁄° *
cur
);

11 
	$f‹kchûd
(c⁄° *
cur
, 
bønch
)

13 
nxt
[
DEPTH
+1];

15 i‡(
	`°æí
(
cur
Ë>
DEPTH
)

18 
	`¢¥ötf
(
nxt
, 
DEPTH
+1, "%s%c", 
cur
, 
bønch
);

19 i‡(
	`f‹k
() == 0) {

20 
	`f‹kåì
(
nxt
);

21 
	`exô
();

23 
	}
}

26 
	$f‹kåì
(c⁄° *
cur
)

28 
	`˝rötf
("%04x: Iám '%s'\n", 
	`sys_gëívid
(), 
cur
);

30 
	`f‹kchûd
(
cur
, '0');

31 
	`f‹kchûd
(
cur
, '1');

32 
	}
}

35 
	$umaö
(
¨gc
, **
¨gv
)

37 
	`f‹kåì
("");

38 
	}
}

	@user/hello.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
	`˝rötf
("hello, world\n");

9 
	`˝rötf
("òamÉnvú⁄míà%08x\n", 
thi£nv
->
ív_id
);

10 
	}
}

	@user/httpd.c

2 
	~<öc/lib.h
>

3 
	~<lwù/sockës.h
>

4 
	~<lwù/öë.h
>

6 
	#PORT
 80

	)

7 
	#VERSION
 "0.1"

	)

8 
	#HTTP_VERSION
 "1.0"

	)

10 
	#E_BAD_REQ
 1000

	)

12 
	#BUFFSIZE
 512

	)

13 
	#MAXPENDING
 5

14 

	)

15 
	shâp_ªque°
 {

16 
	msock
;

17 *
	muæ
;

18 *
	mvîsi⁄
;

21 
	sª•⁄˚_hódî
 {

22 
	mcode
;

23 *
	mhódî
;

26 
ª•⁄˚_hódî
 
	ghódîs
[] = {

27 { 200, "HTTP/" 
HTTP_VERSION
 " 200 OK\r\n"

28 "Sîvî: jhâpd/" 
VERSION
 "\r\n"},

32 
	sîr‹_mesßges
 {

33 
	mcode
;

34 *
	mmsg
;

37 
îr‹_mesßges
 
	gîr‹s
[] = {

43 
	$dõ
(*
m
)

45 
	`˝rötf
("%s\n", 
m
);

46 
	`exô
();

47 
	}
}

50 
	$ªq_‰ì
(
hâp_ªque°
 *
ªq
)

52 
	`‰ì
(
ªq
->
uæ
);

53 
	`‰ì
(
ªq
->
vîsi⁄
);

54 
	}
}

57 
	$£nd_hódî
(
hâp_ªque°
 *
ªq
, 
code
)

59 
ª•⁄˚_hódî
 *
h
 = 
hódîs
;

60 
h
->
code
 !0 && h->
hódî
!= 0) {

61 i‡(
h
->
code
 == code)

63 
h
++;

66 i‡(
h
->
code
 == 0)

69 
Àn
 = 
	`°æí
(
h
->
hódî
);

70 i‡(
	`wrôe
(
ªq
->
sock
, 
h
->
hódî
, 
Àn
) !=Üen) {

71 
	`dõ
("FailedÅo send bytesÅo client");

75 
	}
}

78 
	$£nd_d©a
(
hâp_ªque°
 *
ªq
, 
fd
)

81 
buf
[256];

82 
n
;

85 
n
 = 
	`ªad
(
fd
, 
buf
, (buf));

86 i‡(
n
 < 0) {

87 
	`˝rötf
("£nd_d©a:Ñód faûed: %e\n", 
n
);

88  
n
;

89 } i‡(
n
 == 0) {

93 i‡(
	`wrôe
(
ªq
->
sock
, 
buf
, 
n
) !=Ç)

94 
	`dõ
("FailedÅo sent fileÅo client");

97 
	}
}

100 
	$£nd_size
(
hâp_ªque°
 *
ªq
, 
off_t
 
size
)

102 
buf
[64];

103 
r
;

105 
r
 = 
	`¢¥ötf
(
buf
, 64, "C⁄ã¡-Lígth: %ld\r\n", ()
size
);

106 i‡(
r
 > 63)

107 
	`∑nic
("bufferÅoo small!");

109 i‡(
	`wrôe
(
ªq
->
sock
, 
buf
, 
r
) !=Ñ)

113 
	}
}

116 
	$mime_ty≥
(c⁄° *
fûe
)

120 
	}
}

123 
	$£nd_c⁄ã¡_ty≥
(
hâp_ªque°
 *
ªq
)

125 
buf
[128];

126 
r
;

127 c⁄° *
ty≥
;

129 
ty≥
 = 
	`mime_ty≥
(
ªq
->
uæ
);

130 i‡(!
ty≥
)

133 
r
 = 
	`¢¥ötf
(
buf
, 128, "C⁄ã¡-Ty≥: %s\r\n", 
ty≥
);

134 i‡(
r
 > 127)

135 
	`∑nic
("bufferÅoo small!");

137 i‡(
	`wrôe
(
ªq
->
sock
, 
buf
, 
r
) !=Ñ)

141 
	}
}

144 
	$£nd_hódî_fö
(
hâp_ªque°
 *
ªq
)

146 c⁄° *
fö
 = "\r\n";

147 
fö_Àn
 = 
	`°æí
(
fö
);

149 i‡(
	`wrôe
(
ªq
->
sock
, 
fö
, 
fö_Àn
) != fin_len)

153 
	}
}

157 
	$hâp_ªque°_∑r£
(
hâp_ªque°
 *
ªq
, *
ªque°
)

159 c⁄° *
uæ
;

160 c⁄° *
vîsi⁄
;

161 
uæ_Àn
, 
vîsi⁄_Àn
;

163 i‡(!
ªq
)

166 i‡(
	`°∫cmp
(
ªque°
, "GET ", 4) != 0)

167  -
E_BAD_REQ
;

170 
ªque°
 += 4;

173 
uæ
 = 
ªque°
;

174 *
ªque°
 && *request != ' ')

175 
ªque°
++;

176 
uæ_Àn
 = 
ªque°
 - 
uæ
;

178 
ªq
->
uæ
 = 
	`mÆloc
(
uæ_Àn
 + 1);

179 
	`memmove
(
ªq
->
uæ
, uæ, 
uæ_Àn
);

180 
ªq
->
uæ
[
uæ_Àn
] = '\0';

183 
ªque°
++;

185 
vîsi⁄
 = 
ªque°
;

186 *
ªque°
 && *request != '\n')

187 
ªque°
++;

188 
vîsi⁄_Àn
 = 
ªque°
 - 
vîsi⁄
;

190 
ªq
->
vîsi⁄
 = 
	`mÆloc
(
vîsi⁄_Àn
 + 1);

191 
	`memmove
(
ªq
->
vîsi⁄
, vîsi⁄, 
vîsi⁄_Àn
);

192 
ªq
->
vîsi⁄
[
vîsi⁄_Àn
] = '\0';

197 
	}
}

200 
	$£nd_îr‹
(
hâp_ªque°
 *
ªq
, 
code
)

202 
buf
[512];

203 
r
;

205 
îr‹_mesßges
 *
e
 = 
îr‹s
;

206 
e
->
code
 !0 &&É->
msg
 != 0) {

207 i‡(
e
->
code
 == code)

209 
e
++;

212 i‡(
e
->
code
 == 0)

215 
r
 = 
	`¢¥ötf
(
buf
, 512, "HTTP/" 
HTTP_VERSION
" %d %s\r\n"

216 "Sîvî: jhâpd/" 
VERSION
 "\r\n"

221 
e
->
code
,É->
msg
,É->code,É->msg);

223 i‡(
	`wrôe
(
ªq
->
sock
, 
buf
, 
r
) !=Ñ)

227 
	}
}

230 
	$£nd_fûe
(
hâp_ªque°
 *
ªq
)

232 
r
;

233 
off_t
 
fûe_size
 = -1;

234 
fd
;

242 
Sèt
 
°©
;

244 i‡((
fd
 = 
	`›í
(
ªq
->
uæ
, 
O_RDONLY
)) < 0)

245  
	`£nd_îr‹
(
ªq
, 404);

247 i‡((
r
 = 
	`f°©
(
fd
, &
°©
)) < 0) {

248 
	`˛o£
(
fd
);

249  
	`£nd_îr‹
(
ªq
, 404);

252 i‡(
°©
.
°_isdú
) {

253 
	`˛o£
(
fd
);

254  
	`£nd_îr‹
(
ªq
, 404);

257 
fûe_size
 = 
°©
.
°_size
;

260 i‡((
r
 = 
	`£nd_hódî
(
ªq
, 200)) < 0)

261 
íd
;

263 i‡((
r
 = 
	`£nd_size
(
ªq
, 
fûe_size
)) < 0)

264 
íd
;

266 i‡((
r
 = 
	`£nd_c⁄ã¡_ty≥
(
ªq
)) < 0)

267 
íd
;

269 i‡((
r
 = 
	`£nd_hódî_fö
(
ªq
)) < 0)

270 
íd
;

272 
r
 = 
	`£nd_d©a
(
ªq
, 
fd
);

274 
íd
:

275 
	`˛o£
(
fd
);

276  
r
;

277 
	}
}

280 
	$h™dÀ_˛õ¡
(
sock
)

282 
hâp_ªque°
 
c⁄_d
;

283 
r
;

284 
buf„r
[
BUFFSIZE
];

285 
ª˚ived
 = -1;

286 
hâp_ªque°
 *
ªq
 = &
c⁄_d
;

291 i‡((
ª˚ived
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
)) < 0)

292 
	`∑nic
("failedÅoÑead");

294 
	`mem£t
(
ªq
, 0, (req));

296 
ªq
->
sock
 = sock;

298 
r
 = 
	`hâp_ªque°_∑r£
(
ªq
, 
buf„r
);

299 i‡(
r
 =-
E_BAD_REQ
)

300 
	`£nd_îr‹
(
ªq
, 400);

301 i‡(
r
 < 0)

302 
	`∑nic
("parse failed");

304 
	`£nd_fûe
(
ªq
);

306 
	`ªq_‰ì
(
ªq
);

312 
	`˛o£
(
sock
);

313 
	}
}

316 
	$umaö
(
¨gc
, **
¨gv
)

318 
£rvîsock
, 
˛õ¡sock
;

319 
sockaddr_ö
 
£rvî
, 
˛õ¡
;

321 
bö¨y«me
 = "jhttpd";

324 i‡((
£rvîsock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)) < 0)

325 
	`dõ
("FailedÅo create socket");

328 
	`mem£t
(&
£rvî
, 0, (server));

329 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

330 
£rvî
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

331 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

334 i‡(
	`böd
(
£rvîsock
, (
sockaddr
 *Ë&
£rvî
,

335 (
£rvî
)) < 0)

337 
	`dõ
("FailedÅo bindÅhe server socket");

341 i‡(
	`li°í
(
£rvîsock
, 
MAXPENDING
) < 0)

342 
	`dõ
("FailedÅoÜisten on server socket");

344 
	`˝rötf
("Waiting for http connections...\n");

347 
˛õ¡Àn
 = (
˛õ¡
);

349 i‡((
˛õ¡sock
 = 
	`ac˚±
(
£rvîsock
,

350 (
sockaddr
 *Ë&
˛õ¡
,

351 &
˛õ¡Àn
)) < 0)

353 
	`dõ
("FailedÅoáccept client connection");

355 
	`h™dÀ_˛õ¡
(
˛õ¡sock
);

358 
	`˛o£
(
£rvîsock
);

359 
	}
}

	@user/icode.c

2 
	~<öc/lib.h
>

5 #ifde‡
VMM_GUEST


6 
	#MOTD
 "/mŸd_gue°"

	)

8 
	#MOTD
 "/mŸd"

	)

13 
	$umaö
(
¨gc
, **
¨gv
)

15 
fd
, 
n
, 
r
;

16 
buf
[512+1];

18 
bö¨y«me
 = "icode";

20 
	`˝rötf
("icode startup\n");

22 
	`˝rötf
("icode: open /motd\n");

23 i‡((
fd
 = 
	`›í
(
MOTD
, 
O_RDONLY
)) < 0)

24 
	`∑nic
("icode: o≥¿/mŸd: %e", 
fd
);

26 
	`˝rötf
("icode:Ñead /motd\n");

27 (
n
 = 
	`ªad
(
fd
, 
buf
,  buf-1)) > 0) {

28 
	`˝rötf
("Writing MOTD\n");

29 
	`sys_˝uts
(
buf
, 
n
);

32 
	`˝rötf
("icode: close /motd\n");

33 
	`˛o£
(
fd
);

36 
	`˝rötf
("icode: spawn /sbin/init\n");

37 i‡((
r
 = 
	`•aw∆
("/sbin/init", "init", "initarg1", "initarg2", (*)0)) < 0)

38 
	`∑nic
("icode: s∑w¿/sbö/öô: %e", 
r
);

40 
	`˝rötf
("icode:Éxiting\n");

41 
	}
}

	@user/idle.c

4 
	~<öc/x86.h
>

5 
	~<öc/lib.h
>

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
bö¨y«me
 = "idle";

18 
	`sys_yõld
();

20 
	}
}

	@user/init.c

2 
	~<öc/lib.h
>

5 
	mmsg1
[5000];

6 
	mmsg2
[1000];

7 } 
	gd©a
 = {

12 
	gbss
[6000];

15 
	$sum
(c⁄° *
s
, 
n
)

17 
i
, 
tŸ
 = 0;

18 
i
 = 0; i < 
n
; i++)

19 
tŸ
 ^
i
 * 
s
[i];

20  
tŸ
;

21 
	}
}

24 
	$umaö
(
¨gc
, **
¨gv
)

26 
i
, 
r
, 
x
, 
w™t
;

27 
¨gs
[256];

29 
	`˝rötf
("init:Ñunning\n");

31 
w™t
 = 0xf989e;

32 i‡((
x
 = 
	`sum
((*)&
d©a
,  d©a)Ë!
w™t
)

33 
	`˝rötf
("init: data isÇot initialized: got sum %08x wanted %08x\n",

34 
x
, 
w™t
);

36 
	`˝rötf
("init: data seems okay\n");

37 i‡((
x
 = 
	`sum
(
bss
,  bss)) != 0)

38 
	`˝rötf
("bs†i†nŸ inôülized: w™ãd sum 0 gŸ %08x\n", 
x
);

40 
	`˝rötf
("init: bss seems okay\n");

43 
	`°rˇt
(
¨gs
, "init:árgs:");

44 
i
 = 0; i < 
¨gc
; i++) {

45 
	`°rˇt
(
¨gs
, " '");

46 
	`°rˇt
(
¨gs
, 
¨gv
[
i
]);

47 
	`°rˇt
(
¨gs
, "'");

49 
	`˝rötf
("%s\n", 
¨gs
);

52 
	`˝rötf
("init:Ñunning sh\n");

55 
	`˛o£
(0);

56 i‡((
r
 = 
	`›íc⁄s
()) < 0)

57 
	`∑nic
("›íc⁄s: %e", 
r
);

58 i‡(
r
 != 0)

59 
	`∑nic
("fú° o≥nc⁄†u£d fd %d", 
r
);

60 i‡((
r
 = 
	`dup
(0, 1)) < 0)

61 
	`∑nic
("dup: %e", 
r
);

63 
	`˝rötf
("init: starting sh\n");

64 
r
 = 
	`•aw∆
("/bin/sh", "sh", (*)0);

65 i‡(
r
 < 0) {

66 
	`˝rötf
("öô: s∑w¿sh: %e\n", 
r
);

69 
	`˝rötf
("init waiting\n");

70 
	`waô
(
r
);

72 #ifde‡
VMM_GUEST


78 
	}
}

	@user/initsh.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
i
, 
r
, 
x
, 
w™t
;

9 
	`˝rötf
("initsh:Ñunning sh\n");

12 
	`˛o£
(0);

13 i‡((
r
 = 
	`›íc⁄s
()) < 0)

14 
	`∑nic
("›íc⁄s: %e", 
r
);

15 i‡(
r
 != 0)

16 
	`∑nic
("fú° o≥nc⁄†u£d fd %d", 
r
);

17 i‡((
r
 = 
	`dup
(0, 1)) < 0)

18 
	`∑nic
("dup: %e", 
r
);

20 
	`˝rötf
("init: starting sh\n");

21 
r
 = 
	`•aw∆
("/sh", "sh", (*)0);

22 i‡(
r
 < 0) {

23 
	`˝rötf
("öô: s∑w¿sh: %e\n", 
r
);

26 
	`waô
(
r
);

28 
	}
}

	@user/ls.c

2 
	~<öc/lib.h
>

4 
	gÊag
[256];

6 
lsdú
(const *, const *);

7 
ls1
(c⁄° *, 
boﬁ
, 
off_t
, const *);

10 
	$ls
(c⁄° *
∑th
, c⁄° *
¥efix
)

12 
r
;

13 
Sèt
 
°
;

15 i‡((
r
 = 
	`°©
(
∑th
, &
°
)) < 0)

16 
	`∑nic
("°© %s: %e", 
∑th
, 
r
);

17 i‡(
°
.
°_isdú
 && !
Êag
['d'])

18 
	`lsdú
(
∑th
, 
¥efix
);

20 
	`ls1
(0, 
°
.
°_isdú
, st.
°_size
, 
∑th
);

21 
	}
}

24 
	$lsdú
(c⁄° *
∑th
, c⁄° *
¥efix
)

26 
fd
, 
n
;

27 
Fûe
 
f
;

29 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) < 0)

30 
	`∑nic
("›í %s: %e", 
∑th
, 
fd
);

31 (
n
 = 
	`ªadn
(
fd
, &
f
,  f)) ==  f)

32 i‡(
f
.
f_«me
[0])

33 
	`ls1
(
¥efix
, 
f
.
f_ty≥
==
FTYPE_DIR
, f.
f_size
, f.
f_«me
);

34 i‡(
n
 > 0)

35 
	`∑nic
("sh‹àªad i¿dúe˘‹y %s", 
∑th
);

36 i‡(
n
 < 0)

37 
	`∑nic
("îr‹Ñódög dúe˘‹y %s: %e", 
∑th
, 
n
);

38 
	}
}

41 
	$ls1
(c⁄° *
¥efix
, 
boﬁ
 
isdú
, 
off_t
 
size
, c⁄° *
«me
)

43 c⁄° *
£p
;

45 if(
Êag
['l'])

46 
	`¥ötf
("%11d %¯", 
size
, 
isdú
 ? 'd' : '-');

47 if(
¥efix
) {

48 i‡(
¥efix
[0] &&Öªfix[
	`°æí
(prefix)-1] != '/')

49 
£p
 = "/";

51 
£p
 = "";

52 
	`¥ötf
("%s%s", 
¥efix
, 
£p
);

54 
	`¥ötf
("%s", 
«me
);

55 if(
Êag
['F'] && 
isdú
)

56 
	`¥ötf
("/");

57 
	`¥ötf
("\n");

58 
	}
}

61 
	$ußge
()

63 
	`¥ötf
("usage:Üs [-dFl] [file...]\n");

64 
	`exô
();

65 
	}
}

68 
	$umaö
(
¨gc
, **
¨gv
)

70 
i
;

71 
Arg°©e
 
¨gs
;

73 
	`¨g°¨t
(&
¨gc
, 
¨gv
, &
¨gs
);

74 (
i
 = 
	`¨g√xt
(&
¨gs
)) >= 0)

75 
i
) {

79 
Êag
[
i
]++;

82 
	`ußge
();

85 i‡(
¨gc
 == 1)

86 
	`ls
("/", "");

88 
i
 = 1; i < 
¨gc
; i++)

89 
	`ls
(
¨gv
[
i
],árgv[i]);

91 
	}
}

	@user/lsfd.c

2 
	~<öc/lib.h
>

5 
	$ußge
()

7 
	`˝rötf
("usage:Üsfd [-1]\n");

8 
	`exô
();

9 
	}
}

12 
	$umaö
(
¨gc
, **
¨gv
)

14 
i
, 
u£Âröt
 = 0;

15 
Sèt
 
°
;

16 
Arg°©e
 
¨gs
;

18 
	`¨g°¨t
(&
¨gc
, 
¨gv
, &
¨gs
);

19 (
i
 = 
	`¨g√xt
(&
¨gs
)) >= 0)

20 i‡(
i
 == '1')

21 
u£Âröt
 = 1;

23 
	`ußge
();

25 
i
 = 0; i < 32; i++)

26 i‡(
	`f°©
(
i
, &
°
) >= 0) {

27 i‡(
u£Âröt
)

28 
	`Ârötf
(1, "fd %d:Çame %s isdir %d size %d dev %s\n",

29 
i
, 
°
.
°_«me
, st.
°_isdú
,

30 
°
.
°_size
, st.
°_dev
->
dev_«me
);

32 
	`˝rötf
("fd %d:Çame %s isdir %d size %d dev %s\n",

33 
i
, 
°
.
°_«me
, st.
°_isdú
,

34 
°
.
°_size
, st.
°_dev
->
dev_«me
);

36 
	}
}

	@user/num.c

2 
	~<öc/lib.h
>

4 
	gbﬁ
 = 1;

5 
	glöe
 = 0;

8 
	$num
(
f
, c⁄° *
s
)

10 
n
;

11 
r
;

12 
c
;

14 (
n
 = 
	`ªad
(
f
, &
c
, 1)) > 0) {

15 i‡(
bﬁ
) {

16 
	`¥ötf
("%5d ", ++
löe
);

17 
bﬁ
 = 0;

19 i‡((
r
 = 
	`wrôe
(1, &
c
, 1)) != 1)

20 
	`∑nic
("wrôêîr‹ c›yög %s: %e", 
s
, 
r
);

21 i‡(
c
 == '\n')

22 
bﬁ
 = 1;

24 i‡(
n
 < 0)

25 
	`∑nic
("îr‹Ñódög %s: %e", 
s
, 
n
);

26 
	}
}

29 
	$umaö
(
¨gc
, **
¨gv
)

31 
f
, 
i
;

33 
bö¨y«me
 = "num";

34 i‡(
¨gc
 == 1)

35 
	`num
(0, "<stdin>");

37 
i
 = 1; i < 
¨gc
; i++) {

38 
f
 = 
	`›í
(
¨gv
[
i
], 
O_RDONLY
);

39 i‡(
f
 < 0)

40 
	`∑nic
("ˇn'à›í %s: %e", 
¨gv
[
i
], 
f
);

42 
	`num
(
f
, 
¨gv
[
i
]);

43 
	`˛o£
(
f
);

46 
	`exô
();

47 
	}
}

	@user/pingpong.c

5 
	~<öc/lib.h
>

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
ívid_t
 
who
;

12 i‡((
who
 = 
	`f‹k
()) != 0) {

14 
	`˝rötf
("£nd 0 from %xÅÿ%x\n", 
	`sys_gëívid
(), 
who
);

15 
	`ùc_£nd
(
who
, 0, 0, 0);

19 
uöt32_t
 
i
 = 
	`ùc_ªcv
(&
who
, 0, 0);

20 
	`˝rötf
("%x gŸ %d from %x\n", 
	`sys_gëívid
(), 
i
, 
who
);

21 i‡(
i
 == 10)

23 
i
++;

24 
	`ùc_£nd
(
who
, 
i
, 0, 0);

25 i‡(
i
 == 10)

29 
	}
}

	@user/pingpongs.c

5 
	~<öc/lib.h
>

7 
uöt32_t
 
	gvÆ
;

10 
	$umaö
(
¨gc
, **
¨gv
)

12 
ívid_t
 
who
;

13 
uöt32_t
 
i
;

15 
i
 = 0;

16 i‡((
who
 = 
	`sf‹k
()) != 0) {

17 
	`˝rötf
("òam %08x;Åhi£nv i†%p\n", 
	`sys_gëívid
(), 
thi£nv
);

19 
	`˝rötf
("£nd 0 from %xÅÿ%x\n", 
	`sys_gëívid
(), 
who
);

20 
	`ùc_£nd
(
who
, 0, 0, 0);

24 
	`ùc_ªcv
(&
who
, 0, 0);

25 
	`˝rötf
("%x gŸ %d from %x (thi£nv i†%∞%x)\n", 
	`sys_gëívid
(), 
vÆ
, 
who
, 
thi£nv
,Åhi£nv->
ív_id
);

26 i‡(
vÆ
 == 10)

28 ++
vÆ
;

29 
	`ùc_£nd
(
who
, 0, 0, 0);

30 i‡(
vÆ
 == 10)

34 
	}
}

	@user/primes.c

12 
	~<öc/lib.h
>

15 
	$¥imïroc
()

17 
i
, 
id
, 
p
;

18 
ívid_t
 
ívid
;

21 
t›
:

22 
p
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

23 
	`˝rötf
("CPU %d: %d ", 
thi£nv
->
ív_˝unum
, 
p
);

26 i‡((
id
 = 
	`f‹k
()) < 0)

27 
	`∑nic
("f‹k: %e", 
id
);

28 i‡(
id
 == 0)

29 
t›
;

33 
i
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

34 i‡(
i
 % 
p
)

35 
	`ùc_£nd
(
id
, 
i
, 0, 0);

37 
	}
}

40 
	$umaö
(
¨gc
, **
¨gv
)

42 
i
, 
id
;

45 i‡((
id
 = 
	`f‹k
()) < 0)

46 
	`∑nic
("f‹k: %e", 
id
);

47 i‡(
id
 == 0)

48 
	`¥imïroc
();

51 
i
 = 2; ; i++)

52 
	`ùc_£nd
(
id
, 
i
, 0, 0);

53 
	}
}

	@user/primespipe.c

12 
	~<öc/lib.h
>

15 
	$¥imïroc
(
fd
)

17 
i
, 
id
, 
p
, 
pfd
[2], 
wfd
, 
r
;

20 
t›
:

21 i‡((
r
 = 
	`ªadn
(
fd
, &
p
, 4)) != 4)

22 
	`∑nic
("¥imïro¯couldÇŸÑód inôü»¥ime: %d, %e", 
r
,Ñ >= 0 ? 0 :Ñ);

24 
	`˝rötf
("%d\n", 
p
);

27 i‡((
i
=
	`pùe
(
pfd
)) < 0)

28 
	`∑nic
("pùe: %e", 
i
);

29 i‡((
id
 = 
	`f‹k
()) < 0)

30 
	`∑nic
("f‹k: %e", 
id
);

31 i‡(
id
 == 0) {

32 
	`˛o£
(
fd
);

33 
	`˛o£
(
pfd
[1]);

34 
fd
 = 
pfd
[0];

35 
t›
;

38 
	`˛o£
(
pfd
[0]);

39 
wfd
 = 
pfd
[1];

43 i‡((
r
=
	`ªadn
(
fd
, &
i
, 4)) != 4)

44 
	`∑nic
("¥imïro¯%dÑód¿%d %d %e", 
p
, 
fd
, 
r
,Ñ >= 0 ? 0 :Ñ);

45 i‡(
i
%
p
)

46 i‡((
r
=
	`wrôe
(
wfd
, &
i
, 4)) != 4)

47 
	`∑nic
("¥imïro¯%d wrôe: %d %e", 
p
, 
r
,Ñ >= 0 ? 0 :Ñ);

49 
	}
}

52 
	$umaö
(
¨gc
, **
¨gv
)

54 
i
, 
id
, 
p
[2], 
r
;

56 
bö¨y«me
 = "primespipe";

58 i‡((
i
=
	`pùe
(
p
)) < 0)

59 
	`∑nic
("pùe: %e", 
i
);

62 i‡((
id
=
	`f‹k
()) < 0)

63 
	`∑nic
("f‹k: %e", 
id
);

65 i‡(
id
 == 0) {

66 
	`˛o£
(
p
[1]);

67 
	`¥imïroc
(
p
[0]);

70 
	`˛o£
(
p
[0]);

73 
i
=2;; i++)

74 i‡((
r
=
	`wrôe
(
p
[1], &
i
, 4)) != 4)

75 
	`∑nic
("gíî©‹ wrôe: %d, %e", 
r
,Ñ >= 0 ? 0 :Ñ);

76 
	}
}

	@user/sendpage.c

4 
	~<öc/lib.h
>

6 c⁄° *
	g°r1
 = "hello childÉnvironment! howáre you?";

7 c⁄° *
	g°r2
 = "helloÖarentÉnvironment! I'm good.";

9 
	#TEMP_ADDR
 ((*)0xa00000)

	)

10 
	#TEMP_ADDR_CHILD
 ((*)0xb00000)

	)

13 
	$umaö
(
¨gc
, **
¨gv
)

15 
ívid_t
 
who
;

17 i‡((
who
 = 
	`f‹k
()) == 0) {

19 
	`ùc_ªcv
(&
who
, 
TEMP_ADDR_CHILD
, 0);

20 
	`˝rötf
("%x gŸ mesßgê: %s\n", 
who
, 
TEMP_ADDR_CHILD
);

21 i‡(
	`°∫cmp
(
TEMP_ADDR_CHILD
, 
°r1
, 
	`°æí
(str1)) == 0)

22 
	`˝rötf
("childÑeceived correct message\n");

24 
	`mem˝y
(
TEMP_ADDR_CHILD
, 
°r2
, 
	`°æí
(
°r1
) + 1);

25 
	`ùc_£nd
(
who
, 0, 
TEMP_ADDR_CHILD
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

30 
	`sys_∑ge_Æloc
(
thi£nv
->
ív_id
, 
TEMP_ADDR
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

31 
	`mem˝y
(
TEMP_ADDR
, 
°r1
, 
	`°æí
(str1) + 1);

32 
	`ùc_£nd
(
who
, 0, 
TEMP_ADDR
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

34 
	`ùc_ªcv
(&
who
, 
TEMP_ADDR
, 0);

35 
	`˝rötf
("%x gŸ mesßgê: %s\n", 
who
, 
TEMP_ADDR
);

36 i‡(
	`°∫cmp
(
TEMP_ADDR
, 
°r2
, 
	`°æí
(str2)) == 0)

37 
	`˝rötf
("parentÑeceived correct message\n");

39 
	}
}

	@user/sh.c

6 
	~<öc/lib.h
>

8 
	#BUFSIZ
 1024

	)

9 
	gdebug
 = 0;

11 * 
	gPATH
[] = {"/bin/","/"};

12 
	g≈©hs
 = 2;

19 
gëtokí
(*
s
, **
tokí
);

26 
	#MAXARGS
 16

	)

28 
	$runcmd
(* 
s
)

30 *
¨gv
[
MAXARGS
], *
t
, 
¨gv0buf
[
BUFSIZ
];

31 
¨gc
, 
c
, 
i
, 
r
, 
p
[2], 
fd
, 
pùe_chûd
;

33 
pùe_chûd
 = 0;

34 
	`gëtokí
(
s
, 0);

36 
agaö
:

37 
¨gc
 = 0;

39 (
c
 = 
	`gëtokí
(0, &
t
))) {

42 i‡(
¨gc
 =
MAXARGS
) {

43 
	`˝rötf
("too manyárguments\n");

44 
	`exô
();

46 
¨gv
[
¨gc
++] = 
t
;

51 i‡(
	`gëtokí
(0, &
t
) != 'w') {

52 
	`˝rötf
("syntaxÉrror: <Çot followed by word\n");

53 
	`exô
();

56 i‡((
fd
 = 
	`›í
(
t
, 
O_RDONLY
)) < 0) {

57 
	`˝rötf
("›í %†f‹Ñód: %e", 
t
, 
fd
);

58 
	`exô
();

60 i‡(
fd
 != 0) {

61 
	`dup
(
fd
, 0);

62 
	`˛o£
(
fd
);

69 i‡(
	`gëtokí
(0, &
t
) != 'w') {

70 
	`˝rötf
("syntaxÉrror: >Çot followed by word\n");

71 
	`exô
();

74 i‡((
fd
 = 
	`›í
(
t
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
)) < 0) {

75 
	`˝rötf
("›í %†f‹ wrôe: %e", 
t
, 
fd
);

76 
	`exô
();

78 i‡(
fd
 != 1) {

79 
	`dup
(
fd
, 1);

80 
	`˛o£
(
fd
);

87 i‡((
r
 = 
	`pùe
(
p
)) < 0) {

88 
	`˝rötf
("pùe: %e", 
r
);

89 
	`exô
();

91 i‡(
debug
)

92 
	`˝rötf
("PIPE: %d %d\n", 
p
[0],Ö[1]);

93 i‡((
r
 = 
	`f‹k
()) < 0) {

94 
	`˝rötf
("f‹k: %e", 
r
);

95 
	`exô
();

97 i‡(
r
 == 0) {

98 i‡(
p
[0] != 0) {

99 
	`dup
(
p
[0], 0);

100 
	`˛o£
(
p
[0]);

102 
	`˛o£
(
p
[1]);

103 
agaö
;

105 
pùe_chûd
 = 
r
;

106 i‡(
p
[1] != 1) {

107 
	`dup
(
p
[1], 1);

108 
	`˛o£
(
p
[1]);

110 
	`˛o£
(
p
[0]);

111 
runô
;

114 
	`∑nic
("|Çot implemented");

119 
runô
;

122 
	`∑nic
("badÑëu∫ %d from gëtokí", 
c
);

128 
runô
:

130 if(
¨gc
 == 0) {

131 i‡(
debug
)

132 
	`˝rötf
("EMPTY COMMAND\n");

137 
Sèt
 
°
;

138 
i
=0;i<
≈©hs
;i++) {

139 
	`°r˝y
(
¨gv0buf
, 
PATH
[
i
]);

140 
	`°rˇt
(
¨gv0buf
, 
¨gv
[0]);

141 
r
 = 
	`°©
(
¨gv0buf
, &
°
);

142 if(
r
==0) {

143 
¨gv
[0] = 
¨gv0buf
;

152 i‡(
¨gv
[0][0] != '/') {

153 
¨gv0buf
[0] = '/';

154 
	`°r˝y
(
¨gv0buf
 + 1, 
¨gv
[0]);

155 
¨gv
[0] = 
¨gv0buf
;

157 
¨gv
[
¨gc
] = 0;

160 i‡(
debug
) {

161 
	`˝rötf
("[%08x] SPAWN:", 
thi£nv
->
ív_id
);

162 
i
 = 0; 
¨gv
[i]; i++)

163 
	`˝rötf
(" %s", 
¨gv
[
i
]);

164 
	`˝rötf
("\n");

168 i‡((
r
 = 
	`•awn
(
¨gv
[0], (const **)árgv)) < 0)

169 
	`˝rötf
("•aw¿%s: %e\n", 
¨gv
[0], 
r
);

173 
	`˛o£_Æl
();

174 i‡(
r
 >= 0) {

175 i‡(
debug
)

176 
	`˝rötf
("[%08x] WAIT %†%08x\n", 
thi£nv
->
ív_id
, 
¨gv
[0], 
r
);

177 
	`waô
(
r
);

178 i‡(
debug
)

179 
	`˝rötf
("[%08x] waô föished\n", 
thi£nv
->
ív_id
);

184 i‡(
pùe_chûd
) {

185 i‡(
debug
)

186 
	`˝rötf
("[%08x] WAITÖùe_chûd %08x\n", 
thi£nv
->
ív_id
, 
pùe_chûd
);

187 
	`waô
(
pùe_chûd
);

188 i‡(
debug
)

189 
	`˝rötf
("[%08x] waô föished\n", 
thi£nv
->
ív_id
);

193 
	`exô
();

194 
	}
}

208 
	#WHITESPACE
 " \t\r\n"

	)

209 
	#SYMBOLS
 "<|>&;()"

	)

212 
	$_gëtokí
(*
s
, **
p1
, **
p2
)

214 
t
;

216 i‡(
s
 == 0) {

217 i‡(
debug
 > 1)

218 
	`˝rötf
("GETTOKEN NULL\n");

222 i‡(
debug
 > 1)

223 
	`˝rötf
("GETTOKEN: %s\n", 
s
);

225 *
p1
 = 0;

226 *
p2
 = 0;

228 
	`°rchr
(
WHITESPACE
, *
s
))

229 *
s
++ = 0;

230 i‡(*
s
 == 0) {

231 i‡(
debug
 > 1)

232 
	`˝rötf
("EOL\n");

235 i‡(
	`°rchr
(
SYMBOLS
, *
s
)) {

236 
t
 = *
s
;

237 *
p1
 = 
s
;

238 *
s
++ = 0;

239 *
p2
 = 
s
;

240 i‡(
debug
 > 1)

241 
	`˝rötf
("TOK %c\n", 
t
);

242  
t
;

244 *
p1
 = 
s
;

245 *
s
 && !
	`°rchr
(
WHITESPACE
 
SYMBOLS
, *s))

246 
s
++;

247 *
p2
 = 
s
;

248 i‡(
debug
 > 1) {

249 
t
 = **
p2
;

250 **
p2
 = 0;

251 
	`˝rötf
("WORD: %s\n", *
p1
);

252 **
p2
 = 
t
;

255 
	}
}

258 
	$gëtokí
(*
s
, **
p1
)

260 
c
, 
nc
;

261 * 
≈1
, *
≈2
;

263 i‡(
s
) {

264 
nc
 = 
	`_gëtokí
(
s
, &
≈1
, &
≈2
);

267 
c
 = 
nc
;

268 *
p1
 = 
≈1
;

269 
nc
 = 
	`_gëtokí
(
≈2
, &
≈1
, &np2);

270  
c
;

271 
	}
}

275 
	$ußge
()

277 
	`˝rötf
("usage: sh [-dix] [command-file]\n");

278 
	`exô
();

279 
	}
}

282 
	$umaö
(
¨gc
, **
¨gv
)

284 
r
, 
öãø˘ive
, 
echocmds
;

285 
Arg°©e
 
¨gs
;

287 
boﬁ
 
auto_ãrmö©e
 = 
Ál£
;

289 
öãø˘ive
 = '?';

290 
echocmds
 = 0;

291 
	`¨g°¨t
(&
¨gc
, 
¨gv
, &
¨gs
);

292 (
r
 = 
	`¨g√xt
(&
¨gs
)) >= 0)

293 
r
) {

295 
debug
++;

298 
öãø˘ive
 = 1;

301 
echocmds
 = 1;

304 
	`ußge
();

307 
	`˛o£
(0);

308 i‡((
r
 = 
	`›íc⁄s
()) < 0)

309 
	`∑nic
("›íc⁄s: %e", 
r
);

310 i‡(
r
 != 0)

311 
	`∑nic
("fú° o≥nc⁄†u£d fd %d", 
r
);

312 i‡((
r
 = 
	`dup
(0, 1)) < 0)

313 
	`∑nic
("dup: %e", 
r
);

315 i‡(
¨gc
 > 2)

316 
	`ußge
();

317 i‡(
¨gc
 == 2) {

318 
	`˛o£
(0);

319 i‡((
r
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
)) < 0)

320 
	`∑nic
("›í %s: %e", 
¨gv
[1], 
r
);

321 
	`as£π
(
r
 == 0);

323 i‡(
öãø˘ive
 == '?')

324 
öãø˘ive
 = 
	`isc⁄s
(0);

327 *
buf
;

329 #i‚de‡
VMM_GUEST


330 
buf
 = 
	`ªadlöe
(
öãø˘ive
 ? "$ " : 
NULL
);

332 
buf
 = 
	`ªadlöe
(
öãø˘ive
 ? "vm$ " : 
NULL
);

335 i‡(
buf
 =
NULL
) {

336 i‡(
debug
)

337 
	`˝rötf
("EXITING\n");

338 
	`exô
();

341 #i‚de‡
VMM_GUEST


342 if(
	`°rcmp
(
buf
, "vmmanager")==0)

343 
auto_ãrmö©e
 = 
åue
;

346 if(
	`°rcmp
(
buf
, "quit")==0)

347 
	`exô
();

348 i‡(
debug
)

349 
	`˝rötf
("LINE: %s\n", 
buf
);

350 i‡(
buf
[0] == '#')

352 i‡(
echocmds
)

353 
	`¥ötf
("# %s\n", 
buf
);

354 i‡(
debug
)

355 
	`˝rötf
("BEFORE FORK\n");

356 i‡((
r
 = 
	`f‹k
()) < 0)

357 
	`∑nic
("f‹k: %e", 
r
);

358 i‡(
debug
)

359 
	`˝rötf
("FORK: %d\n", 
r
);

360 i‡(
r
 == 0) {

361 
	`runcmd
(
buf
);

362 
	`exô
();

364 
	`waô
(
r
);

366 i‡(
auto_ãrmö©e
)

367 
	`exô
();

371 
	}
}

	@user/softint.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
asm
 volatile("int $14");

10 
	}
}

	@user/spawnhello.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
r
;

8 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
thi£nv
->
ív_id
);

9 i‡((
r
 = 
	`•aw∆
("/bin/hello", "hello", 0)) < 0)

10 
	`∑nic
("•awn(hñloËÁûed: %e", 
r
);

11 
	}
}

	@user/spawninit.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
r
;

8 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
thi£nv
->
ív_id
);

9 i‡((
r
 = 
	`•aw∆
("init", "init", "one", "two", 0)) < 0)

10 
	`∑nic
("•aw∆(öôËÁûed: %e", 
r
);

11 
	}
}

	@user/spin.c

5 
	~<öc/lib.h
>

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
ívid_t
 
ív
;

12 
	`˝rötf
("IámÅheÖarent. ForkingÅhe child...\n");

13 i‡((
ív
 = 
	`f‹k
()) == 0) {

14 
	`˝rötf
("IámÅhe child. Spinning...\n");

19 
	`˝rötf
("IámÅheÖarent. RunningÅhe child...\n");

20 
	`sys_yõld
();

21 
	`sys_yõld
();

22 
	`sys_yõld
();

23 
	`sys_yõld
();

24 
	`sys_yõld
();

25 
	`sys_yõld
();

26 
	`sys_yõld
();

27 
	`sys_yõld
();

29 
	`˝rötf
("IámÅheÖarent. KillingÅhe child...\n");

30 
	`sys_ív_de°roy
(
ív
);

31 
	}
}

	@user/stresssched.c

2 
	~<öc/lib.h
>

4 vﬁ©ûê
	gcou¡î
;

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
i
, 
j
;

10 
£í
;

11 
ívid_t
 
∑ª¡
 = 
	`sys_gëívid
();

14 
i
 = 0; i < 20; i++)

15 i‡(
	`f‹k
() == 0)

17 i‡(
i
 == 20) {

18 
	`sys_yõld
();

23 
ívs
[
	`ENVX
(
∑ª¡
)].
ív_°©us
 !
ENV_FREE
)

24 
asm
 volatile("pause");

27 
i
 = 0; i < 10; i++) {

28 
	`sys_yõld
();

29 
j
 = 0; j < 10000; j++)

30 
cou¡î
++;

33 i‡(
cou¡î
 != 10*10000)

34 
	`∑nic
("ø¿⁄ÅwÿCPU†© on˚ (cou¡î i†%d)", 
cou¡î
);

37 
	`˝rötf
("[%08x] såesssched o¿CPU %d\n", 
thi£nv
->
ív_id
,Åhi£nv->
ív_˝unum
);

39 
	}
}

	@user/testbss.c

4 
	~<öc/lib.h
>

6 
	#ARRAYSIZE
 (1024*1024)

	)

8 
uöt32_t
 
	gbig¨øy
[
ARRAYSIZE
];

11 
	$umaö
(
¨gc
, **
¨gv
)

13 
i
;

15 
	`˝rötf
("Making sure bss worksÑight...\n");

16 
i
 = 0; i < 
ARRAYSIZE
; i++)

17 i‡(
big¨øy
[
i
] != 0)

18 
	`∑nic
("big¨øy[%d] i¢'à˛óªd!\n", 
i
);

19 
i
 = 0; i < 
ARRAYSIZE
; i++)

20 
big¨øy
[
i
] = i;

21 
i
 = 0; i < 
ARRAYSIZE
; i++)

22 i‡(
big¨øy
[
i
] != i)

23 
	`∑nic
("big¨øy[%d] didn'àhﬁd it†vÆue!\n", 
i
);

25 
	`˝rötf
("Yes, good. Now doingá wild write offÅheÉnd...\n");

26 
big¨øy
[
ARRAYSIZE
+1024] = 0;

27 
	`∑nic
("SHOULD HAVE TRAPPED!!!");

28 
	}
}

	@user/testfdsharing.c

2 
	~<öc/x86.h
>

3 
	~<öc/lib.h
>

5 
	gbuf
[512], 
	gbuf2
[512];

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
fd
, 
r
, 
n
, 
n2
;

12 i‡((
fd
 = 
	`›í
("mŸd", 
O_RDONLY
)) < 0)

13 
	`∑nic
("›í mŸd: %e", 
fd
);

14 
	`£ek
(
fd
, 0);

15 i‡((
n
 = 
	`ªadn
(
fd
, 
buf
,  buf)) <= 0)

16 
	`∑nic
("ªadn: %e", 
n
);

18 i‡((
r
 = 
	`f‹k
()) < 0)

19 
	`∑nic
("f‹k: %e", 
r
);

20 i‡(
r
 == 0) {

21 
	`£ek
(
fd
, 0);

22 
	`˝rötf
("goingÅoÑead in child (mightÖage fault if your sharing is buggy)\n");

23 i‡((
n2
 = 
	`ªadn
(
fd
, 
buf2
,  buf2)Ë!
n
)

24 
	`∑nic
("ªad i¿∑ª¡ gŸ %d,Ñód i¿chûd gŸ %d", 
n
, 
n2
);

25 i‡(
	`memcmp
(
buf
, 
buf2
, 
n
) != 0)

26 
	`∑nic
("read inÖarent got different bytes fromÑead in child");

27 
	`˝rötf
("read in child succeeded\n");

28 
	`£ek
(
fd
, 0);

29 
	`˛o£
(
fd
);

30 
	`exô
();

32 
	`waô
(
r
);

33 i‡((
n2
 = 
	`ªadn
(
fd
, 
buf2
,  buf2)Ë!
n
)

34 
	`∑nic
("ªad i¿∑ª¡ gŸ %d,Åhí gŸ %d", 
n
, 
n2
);

35 
	`˝rötf
("read inÖarent succeeded\n");

36 
	`˛o£
(
fd
);

39 
	`bªakpoöt
();

40 
	}
}

	@user/testfile.c

2 
	~<öc/lib.h
>

4 c⁄° *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

6 
	#FVA
 ((
Fd
*)0xCCCCC000)

	)

9 
	$x›í
(c⁄° *
∑th
, 
mode
)

11 
Fsùc
 
fsùcbuf
;

12 
ívid_t
 
f£nv
;

14 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
, 
∑th
);

15 
fsùcbuf
.
›í
.
ªq_omode
 = 
mode
;

17 
f£nv
 = 
	`ùc_föd_ív
(
ENV_TYPE_FS
);

18 
	`ùc_£nd
(
f£nv
, 
FSREQ_OPEN
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

19  
	`ùc_ªcv
(
NULL
, 
FVA
, NULL);

20 
	}
}

23 
	$umaö
(
¨gc
, **
¨gv
)

25 
öt64_t
 
r
, 
f
, 
i
;

26 
Fd
 *
fd
;

27 
Fd
 
fdc›y
;

28 
Sèt
 
°
;

29 
buf
[512];

32 i‡((
r
 = 
	`x›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

33 
	`∑nic
("£rve_›í /nŸ-found: %e", 
r
);

34 i‡(
r
 >= 0)

35 
	`∑nic
("serve_open /not-found succeeded!");

37 i‡((
r
 = 
	`x›í
("/√wmŸd", 
O_RDONLY
)) < 0)

38 
	`∑nic
("£rve_›í /√wmŸd: %e", 
r
);

39 i‡(
FVA
->
fd_dev_id
 !'f' || FVA->
fd_off£t
 !0 || FVA->
fd_omode
 !
O_RDONLY
)

40 
	`∑nic
("serve_open didÇot fill struct Fd correctly\n");

41 
	`˝rötf
("serve_open is good\n");

43 i‡((
r
 = 
devfûe
.
	`dev_°©
(
FVA
, &
°
)) < 0)

44 
	`∑nic
("fûe_°©: %e", 
r
);

45 i‡(
	`°æí
(
msg
Ë!
°
.
°_size
)

46 
	`∑nic
("fûe_°©Ñëu∫ed sizê%d w™ãd %d\n", 
°
.
°_size
, 
	`°æí
(
msg
));

47 
	`˝rötf
("file_stat is good\n");

49 
	`mem£t
(
buf
, 0,  buf);

50 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

51 
	`∑nic
("fûe_ªad: %e", 
r
);

52 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

53 
	`∑nic
("file_readÑeturned wrong data");

54 
	`˝rötf
("file_read is good\n");

56 i‡((
r
 = 
devfûe
.
	`dev_˛o£
(
FVA
)) < 0)

57 
	`∑nic
("fûe_˛o£: %e", 
r
);

58 
	`˝rötf
("file_close is good\n");

64 
fdc›y
 = *
FVA
;

65 
	`sys_∑ge_unm≠
(0, 
FVA
);

67 i‡((
r
 = 
devfûe
.
	`dev_ªad
(&
fdc›y
, 
buf
,  buf)Ë!-
E_INVAL
)

68 
	`∑nic
("£rve_ªad d€†nŸ h™dÀ sèÀ fûeid†c‹ª˘ly: %e", 
r
);

69 
	`˝rötf
("stale fileid is good\n");

72 i‡((
r
 = 
	`x›í
("/√w-fûe", 
O_RDWR
|
O_CREAT
)) < 0)

73 
	`∑nic
("£rve_›í /√w-fûe: %e", 
r
);

75 
	`˝rötf
("x›íÇew fûêw‹ked devfûê%p, dev_wrôê%p, msg %p, FVA %p\n", 
devfûe
, devfûe.
dev_wrôe
, 
msg
, 
FVA
);

77 i‡((
r
 = 
devfûe
.
	`dev_wrôe
(
FVA
, 
msg
, 
	`°æí
(msg))) != strlen(msg))

78 
	`∑nic
("fûe_wrôe: %e", 
r
);

79 
	`˝rötf
("file_write is good\n");

81 
FVA
->
fd_off£t
 = 0;

82 
	`mem£t
(
buf
, 0,  buf);

83 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

84 
	`∑nic
("fûe_ªadá·î fûe_wrôe: %e", 
r
);

85 i‡(
r
 !
	`°æí
(
msg
))

86 
	`∑nic
("fûe_ªadá·î fûe_wrôêªtu∫ed wr⁄gÜígth: %d", 
r
);

87 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

88 
	`∑nic
("file_readáfter file_writeÑeturned wrong data");

89 
	`˝rötf
("file_readáfter file_write is good\n");

92 i‡((
r
 = 
	`›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

93 
	`∑nic
("›í /nŸ-found: %e", 
r
);

94 i‡(
r
 >= 0)

95 
	`∑nic
("open /not-found succeeded!");

97 i‡((
r
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

98 
	`∑nic
("›í /√wmŸd: %e", 
r
);

99 
fd
 = (
Fd
*Ë(0xD0000000 + 
r
*
PGSIZE
);

100 i‡(
fd
->
fd_dev_id
 !'f' || fd->
fd_off£t
 !0 || fd->
fd_omode
 !
O_RDONLY
)

101 
	`∑nic
("open didÇot fill struct Fd correctly\n");

102 
	`˝rötf
("open is good\n");

105 i‡((
f
 = 
	`›í
("/big", 
O_WRONLY
|
O_CREAT
)) < 0)

106 
	`∑nic
("¸óà/big: %e", 
f
);

107 
	`mem£t
(
buf
, 0, (buf));

108 
i
 = 0; i < (
NDIRECT
*3)*
BLKSIZE
; i +(
buf
)) {

109 *(*)
buf
 = 
i
;

110 i‡((
r
 = 
	`wrôe
(
f
, 
buf
, (buf))) < 0)

111 
	`∑nic
("wrôê/big@%d: %e", 
i
, 
r
);

113 
	`˛o£
(
f
);

115 i‡((
f
 = 
	`›í
("/big", 
O_RDONLY
)) < 0)

116 
	`∑nic
("›í /big: %e", 
f
);

117 
i
 = 0; i < (
NDIRECT
*3)*
BLKSIZE
; i +(
buf
)) {

118 *(*)
buf
 = 
i
;

119 i‡((
r
 = 
	`ªadn
(
f
, 
buf
, (buf))) < 0)

120 
	`∑nic
("ªad /big@%d: %e", 
i
, 
r
);

121 i‡(
r
 !(
buf
))

122 
	`∑nic
("read /big from %dÑeturned %d < %d bytes",

123 
i
, 
r
, (
buf
));

124 i‡(*(*)
buf
 !
i
)

125 
	`∑nic
("read /big from %dÑeturned bad data %d",

126 
i
, *(*)
buf
);

128 
	`˛o£
(
f
);

129 
	`˝rötf
("large file is good\n");

130 
	}
}

	@user/testfilero.c

2 
	~<öc/lib.h
>

4 c⁄° *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

6 
	#FVA
 ((
Fd
*)0xCCCCC000)

	)

9 
	$x›í
(c⁄° *
∑th
, 
mode
)

11 
Fsùc
 
fsùcbuf
;

12 
ívid_t
 
f£nv
;

14 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
, 
∑th
);

15 
fsùcbuf
.
›í
.
ªq_omode
 = 
mode
;

17 
f£nv
 = 
	`ùc_föd_ív
(
ENV_TYPE_FS
);

18 
	`ùc_£nd
(
f£nv
, 
FSREQ_OPEN
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

19  
	`ùc_ªcv
(
NULL
, 
FVA
, NULL);

20 
	}
}

23 
	$umaö
(
¨gc
, **
¨gv
)

25 
öt64_t
 
r
, 
f
, 
i
;

26 
Fd
 *
fd
;

27 
Fd
 
fdc›y
;

28 
Sèt
 
°
;

29 
buf
[512];

32 i‡((
r
 = 
	`x›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

33 
	`∑nic
("£rve_›í /nŸ-found: %e", 
r
);

34 i‡(
r
 >= 0)

35 
	`∑nic
("serve_open /not-found succeeded!");

37 i‡((
r
 = 
	`x›í
("/√wmŸd", 
O_RDONLY
)) < 0)

38 
	`∑nic
("£rve_›í /√wmŸd: %e", 
r
);

39 i‡(
FVA
->
fd_dev_id
 !'f' || FVA->
fd_off£t
 !0 || FVA->
fd_omode
 !
O_RDONLY
)

40 
	`∑nic
("serve_open didÇot fill struct Fd correctly\n");

41 
	`˝rötf
("serve_open is good\n");

43 i‡((
r
 = 
devfûe
.
	`dev_°©
(
FVA
, &
°
)) < 0)

44 
	`∑nic
("fûe_°©: %e", 
r
);

45 i‡(
	`°æí
(
msg
Ë!
°
.
°_size
)

46 
	`∑nic
("fûe_°©Ñëu∫ed sizê%d w™ãd %d\n", 
°
.
°_size
, 
	`°æí
(
msg
));

47 
	`˝rötf
("file_stat is good\n");

49 
	`mem£t
(
buf
, 0,  buf);

50 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

51 
	`∑nic
("fûe_ªad: %e", 
r
);

52 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

53 
	`∑nic
("file_readÑeturned wrong data");

54 
	`˝rötf
("file_read is good\n");

56 i‡((
r
 = 
devfûe
.
	`dev_˛o£
(
FVA
)) < 0)

57 
	`∑nic
("fûe_˛o£: %e", 
r
);

58 
	`˝rötf
("file_close is good\n");

64 
fdc›y
 = *
FVA
;

65 
	`sys_∑ge_unm≠
(0, 
FVA
);

67 i‡((
r
 = 
devfûe
.
	`dev_ªad
(&
fdc›y
, 
buf
,  buf)Ë!-
E_INVAL
)

68 
	`∑nic
("£rve_ªad d€†nŸ h™dÀ sèÀ fûeid†c‹ª˘ly: %e", 
r
);

69 
	`˝rötf
("stale fileid is good\n");

72 i‡((
r
 = 
	`›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

73 
	`∑nic
("›í /nŸ-found: %e", 
r
);

74 i‡(
r
 >= 0)

75 
	`∑nic
("open /not-found succeeded!");

77 i‡((
r
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

78 
	`∑nic
("›í /√wmŸd: %e", 
r
);

79 
fd
 = (
Fd
*Ë(0xD0000000 + 
r
*
PGSIZE
);

80 i‡(
fd
->
fd_dev_id
 !'f' || fd->
fd_off£t
 !0 || fd->
fd_omode
 !
O_RDONLY
)

81 
	`∑nic
("open didÇot fill struct Fd correctly\n");

82 
	`˝rötf
("open is good\n");

85 i‡((
f
 = 
	`›í
("/robig", 
O_RDONLY
)) < 0)

86 
	`∑nic
("›í /robig: %e", 
f
);

87 
i
 = 0; i < (
NDIRECT
*3)*
BLKSIZE
; i +(
buf
)) {

88 *(*)
buf
 = 
i
;

89 i‡((
r
 = 
	`ªadn
(
f
, 
buf
, (buf))) < 0)

90 
	`∑nic
("ªad /robig@%d: %e", 
i
, 
r
);

91 i‡(
r
 !(
buf
))

92 
	`∑nic
("read /robig from %dÑeturned %d < %d bytes",

93 
i
, 
r
, (
buf
));

94 i‡(*(*)
buf
 !
i
)

95 
	`∑nic
("read /robig from %dÑeturned bad data %d",

96 
i
, *(*)
buf
);

98 
	`˛o£
(
f
);

99 
	`˝rötf
("large file is good\n");

100 
	}
}

	@user/testkbd.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
i
, 
r
;

11 
i
 = 0; i < 10; ++i)

12 
	`sys_yõld
();

14 
	`˛o£
(0);

15 i‡((
r
 = 
	`›íc⁄s
()) < 0)

16 
	`∑nic
("›íc⁄s: %e", 
r
);

17 i‡(
r
 != 0)

18 
	`∑nic
("fú° o≥nc⁄†u£d fd %d", 
r
);

19 i‡((
r
 = 
	`dup
(0, 1)) < 0)

20 
	`∑nic
("dup: %e", 
r
);

23 *
buf
;

25 
buf
 = 
	`ªadlöe
("TypeáÜine: ");

26 i‡(
buf
 !
NULL
)

27 
	`Ârötf
(1, "%s\n", 
buf
);

29 
	`Ârötf
(1, "(end of fileÑeceived)\n");

31 
	}
}

	@user/testmalloc.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 *
buf
;

8 
n
;

9 *
v
;

12 
buf
 = 
	`ªadlöe
("> ");

13 i‡(
buf
 == 0)

14 
	`exô
();

15 i‡(
	`memcmp
(
buf
, "free ", 5) == 0) {

16 
v
 = (*Ë
	`°πﬁ
(
buf
 + 5, 0, 0);

17 
	`‰ì
(
v
);

18 } i‡(
	`memcmp
(
buf
, "malloc ", 7) == 0) {

19 
n
 = 
	`°πﬁ
(
buf
 + 7, 0, 0);

20 
v
 = 
	`mÆloc
(
n
);

21 
	`¥ötf
("\t0x%x\n", (
uöçå_t
Ë
v
);

23 
	`¥ötf
("?unknown command\n");

25 
	}
}

	@user/testpipe.c

2 
	~<öc/lib.h
>

4 *
	gmsg
 = "Now isÅheÅime foráll good menÅo comeÅoÅheáid ofÅheirÖarty.";

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
buf
[100];

10 
i
, 
pid
, 
p
[2];

12 
bö¨y«me
 = "pipereadeof";

14 i‡((
i
 = 
	`pùe
(
p
)) < 0)

15 
	`∑nic
("pùe: %e", 
i
);

17 i‡((
pid
 = 
	`f‹k
()) < 0)

18 
	`∑nic
("f‹k: %e", 
i
);

20 i‡(
pid
 == 0) {

21 
	`˝rötf
("[%08x]Öùîódeo‡˛o£ %d\n", 
thi£nv
->
ív_id
, 
p
[1]);

22 
	`˛o£
(
p
[1]);

23 
	`˝rötf
("[%08x]Öùîódeo‡ªad¿%d\n", 
thi£nv
->
ív_id
, 
p
[0]);

24 
i
 = 
	`ªadn
(
p
[0], 
buf
,  buf-1);

25 i‡(
i
 < 0)

26 
	`∑nic
("ªad: %e", 
i
);

27 
buf
[
i
] = 0;

28 i‡(
	`°rcmp
(
buf
, 
msg
) == 0)

29 
	`˝rötf
("\npipeÑead closedÖroperly\n");

31 
	`˝rötf
("\ngŸ %d byãs: %s\n", 
i
, 
buf
);

32 
	`exô
();

34 
	`˝rötf
("[%08x]Öùîódeo‡˛o£ %d\n", 
thi£nv
->
ív_id
, 
p
[0]);

35 
	`˛o£
(
p
[0]);

36 
	`˝rötf
("[%08x]Öùîódeo‡wrôê%d\n", 
thi£nv
->
ív_id
, 
p
[1]);

37 i‡((
i
 = 
	`wrôe
(
p
[1], 
msg
, 
	`°æí
(msg))) != strlen(msg))

38 
	`∑nic
("wrôe: %e", 
i
);

39 
	`˛o£
(
p
[1]);

41 
	`waô
(
pid
);

43 
bö¨y«me
 = "pipewriteeof";

44 i‡((
i
 = 
	`pùe
(
p
)) < 0)

45 
	`∑nic
("pùe: %e", 
i
);

47 i‡((
pid
 = 
	`f‹k
()) < 0)

48 
	`∑nic
("f‹k: %e", 
i
);

50 i‡(
pid
 == 0) {

51 
	`˛o£
(
p
[0]);

53 
	`˝rötf
(".");

54 i‡(
	`wrôe
(
p
[1], "x", 1) != 1)

57 
	`˝rötf
("\npipe write closedÖroperly\n");

58 
	`exô
();

60 
	`˛o£
(
p
[0]);

61 
	`˛o£
(
p
[1]);

62 
	`waô
(
pid
);

64 
	`˝rötf
("pipeÅestsÖassed\n");

65 
	}
}

	@user/testpiperace.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
p
[2], 
r
, 
pid
, 
i
, 
max
;

8 *
va
;

9 
Fd
 *
fd
;

10 c⁄° vﬁ©ûê
Env
 *
kid
;

12 
	`˝rötf
("testing for dupÑace...\n");

13 i‡((
r
 = 
	`pùe
(
p
)) < 0)

14 
	`∑nic
("pùe: %e", 
r
);

15 
max
 = 200;

16 i‡((
r
 = 
	`f‹k
()) < 0)

17 
	`∑nic
("f‹k: %e", 
r
);

18 i‡(
r
 == 0) {

19 
	`˛o£
(
p
[1]);

38 
i
=0; i<
max
; i++) {

39 if(
	`pùeis˛o£d
(
p
[0])){

40 
	`˝rötf
("RACE:Öipeáppears closed\n");

41 
	`exô
();

43 
	`sys_yõld
();

46 
	`ùc_ªcv
(0,0,0);

48 
pid
 = 
r
;

49 
	`˝rötf
("pid i†%d\n", 
pid
);

50 
va
 = 0;

51 
kid
 = &
ívs
[
	`ENVX
(
pid
)];

52 
	`˝rötf
("kid i†%d\n", 
kid
-
ívs
);

53 
	`dup
(
p
[0], 10);

54 
kid
->
ív_°©us
 =
ENV_RUNNABLE
)

55 
	`dup
(
p
[0], 10);

57 
	`˝rötf
("child done withÜoop\n");

58 i‡(
	`pùeis˛o£d
(
p
[0]))

59 
	`∑nic
("somehowÅhe otherÉnd ofÖ[0] got closed!");

60 i‡((
r
 = 
	`fd_lookup
(
p
[0], &
fd
)) < 0)

61 
	`∑nic
("ˇ¬ŸÜook u∞p[0]: %e", 
r
);

62 
va
 = 
	`fd2d©a
(
fd
);

63 i‡(
	`∑gîef
(
va
) != 3+1)

64 
	`˝rötf
("\nchild detectedÑace\n");

66 
	`˝rötf
("\ƒa˚ didn'àh≠≥n\n", 
max
);

67 
	}
}

	@user/testpiperace2.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
p
[2], 
r
, 
i
;

9 
Fd
 *
fd
;

10 c⁄° vﬁ©ûê
Env
 *
kid
;

12 
	`˝rötf
("testing forÖipeisclosedÑace...\n");

13 i‡((
r
 = 
	`pùe
(
p
)) < 0)

14 
	`∑nic
("pùe: %e", 
r
);

15 i‡((
r
 = 
	`f‹k
()) < 0)

16 
	`∑nic
("f‹k: %e", 
r
);

17 i‡(
r
 == 0) {

21 
	`˛o£
(
p
[1]);

22 
i
 = 0; i < 200; i++) {

23 i‡(
i
 % 10 == 0)

24 
	`˝rötf
("%d.", 
i
);

27 
	`dup
(
p
[0], 10);

28 
	`sys_yõld
();

29 
	`˛o£
(10);

30 
	`sys_yõld
();

32 
	`exô
();

56 
kid
 = &
ívs
[
	`ENVX
(
r
)];

57 
kid
->
ív_°©us
 =
ENV_RUNNABLE
)

58 i‡(
	`pùeis˛o£d
(
p
[0]) != 0) {

59 
	`˝rötf
("\nRACE:Öipeáppears closed\n");

60 
	`sys_ív_de°roy
(
r
);

61 
	`exô
();

63 
	`˝rötf
("child done withÜoop\n");

64 i‡(
	`pùeis˛o£d
(
p
[0]))

65 
	`∑nic
("somehowÅhe otherÉnd ofÖ[0] got closed!");

66 i‡((
r
 = 
	`fd_lookup
(
p
[0], &
fd
)) < 0)

67 
	`∑nic
("ˇ¬ŸÜook u∞p[0]: %e", 
r
);

68 (Ë
	`fd2d©a
(
fd
);

69 
	`˝rötf
("race didn't happen\n");

70 
	}
}

	@user/testptelibrary.c

2 
	~<öc/lib.h
>

4 
	#VA
 ((*Ë0xA0000000)

	)

5 c⁄° *
	gmsg
 = "hello, world\n";

6 c⁄° *
	gmsg2
 = "goodbye, world\n";

8 
chûdof•awn
();

11 
	$umaö
(
¨gc
, **
¨gv
)

13 
r
;

15 i‡(
¨gc
 != 0)

16 
	`chûdof•awn
();

18 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
VA
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

19 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

22 i‡((
r
 = 
	`f‹k
()) < 0)

23 
	`∑nic
("f‹k: %e", 
r
);

24 i‡(
r
 == 0) {

25 
	`°r˝y
(
VA
, 
msg
);

26 
	`exô
();

28 
	`waô
(
r
);

29 
	`˝rötf
("f‹k h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg
) == 0 ? "right" : "wrong");

32 i‡((
r
 = 
	`•aw∆
("/testptelibrary", "testptelibrary", "arg", 0)) < 0)

33 
	`∑nic
("•awn: %e", 
r
);

34 
	`waô
(
r
);

35 
	`˝rötf
("•aw¿h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg2
) == 0 ? "right" : "wrong");

36 
	}
}

39 
	$chûdof•awn
()

41 
	`°r˝y
(
VA
, 
msg2
);

42 
	`exô
();

43 
	}
}

	@user/testpteshare.c

2 
	~<öc/x86.h
>

3 
	~<öc/lib.h
>

5 
	#VA
 ((*Ë0xA0000000)

	)

6 c⁄° *
	gmsg
 = "hello, world\n";

7 c⁄° *
	gmsg2
 = "goodbye, world\n";

9 
chûdof•awn
();

12 
	$umaö
(
¨gc
, **
¨gv
)

14 
r
;

16 i‡(
¨gc
 != 0)

17 
	`chûdof•awn
();

19 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
VA
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

20 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

23 i‡((
r
 = 
	`f‹k
()) < 0)

24 
	`∑nic
("f‹k: %e", 
r
);

25 i‡(
r
 == 0) {

26 
	`°r˝y
(
VA
, 
msg
);

27 
	`exô
();

29 
	`waô
(
r
);

30 
	`˝rötf
("f‹k h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg
) == 0 ? "right" : "wrong");

33 i‡((
r
 = 
	`•aw∆
("/bin/testpteshare", "testpteshare", "arg", 0)) < 0)

34 
	`∑nic
("•awn: %e", 
r
);

35 
	`waô
(
r
);

36 
	`˝rötf
("•aw¿h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg2
) == 0 ? "right" : "wrong");

38 
	`bªakpoöt
();

39 
	}
}

42 
	$chûdof•awn
()

44 
	`°r˝y
(
VA
, 
msg2
);

45 
	`exô
();

46 
	}
}

	@user/testshell.c

2 
	~<öc/x86.h
>

3 
	~<öc/lib.h
>

5 
wr⁄g
(, , );

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
c1
, 
c2
;

11 
r
, 
rfd
, 
wfd
, 
kfd
, 
n1
, 
n2
, 
off
, 
∆off
;

12 
pfds
[2];

14 
	`˛o£
(0);

15 
	`˛o£
(1);

16 
	`›íc⁄s
();

17 
	`›íc⁄s
();

19 i‡((
rfd
 = 
	`›í
("ã°shñl.sh", 
O_RDONLY
)) < 0)

20 
	`∑nic
("›íÅe°shñl.sh: %e", 
rfd
);

21 i‡((
wfd
 = 
	`pùe
(
pfds
)) < 0)

22 
	`∑nic
("pùe: %e", 
wfd
);

23 
wfd
 = 
pfds
[1];

25 
	`˝rötf
("running sh -x <Åestshell.sh | cat\n");

26 i‡((
r
 = 
	`f‹k
()) < 0)

27 
	`∑nic
("f‹k: %e", 
r
);

28 i‡(
r
 == 0) {

29 
	`dup
(
rfd
, 0);

30 
	`dup
(
wfd
, 1);

31 
	`˛o£
(
rfd
);

32 
	`˛o£
(
wfd
);

33 i‡((
r
 = 
	`•aw∆
("/bin/sh", "sh", "-x", 0)) < 0)

34 
	`∑nic
("•awn: %e", 
r
);

35 
	`˛o£
(0);

36 
	`˛o£
(1);

37 
	`waô
(
r
);

38 
	`exô
();

40 
	`˛o£
(
rfd
);

41 
	`˛o£
(
wfd
);

43 
rfd
 = 
pfds
[0];

44 i‡((
kfd
 = 
	`›í
("ã°shñl.key", 
O_RDONLY
)) < 0)

45 
	`∑nic
("›íÅe°shñl.key f‹Ñódög: %e", 
kfd
);

47 
∆off
 = 0;

48 
off
=0;; off++) {

49 
n1
 = 
	`ªad
(
rfd
, &
c1
, 1);

50 
n2
 = 
	`ªad
(
kfd
, &
c2
, 1);

51 i‡(
n1
 < 0)

52 
	`∑nic
("ªadögÅe°shñl.out: %e", 
n1
);

53 i‡(
n2
 < 0)

54 
	`∑nic
("ªadögÅe°shñl.key: %e", 
n2
);

55 i‡(
n1
 =0 && 
n2
 == 0)

57 i‡(
n1
 !1 || 
n2
 !1 || 
c1
 !
c2
)

58 
	`wr⁄g
(
rfd
, 
kfd
, 
∆off
);

59 i‡(
c1
 == '\n')

60 
∆off
 = 
off
+1;

62 
	`˝rötf
("shellÑan correctly\n");

64 
	`bªakpoöt
();

65 
	}
}

68 
	$wr⁄g
(
rfd
, 
kfd
, 
off
)

70 
buf
[100];

71 
n
;

73 
	`£ek
(
rfd
, 
off
);

74 
	`£ek
(
kfd
, 
off
);

76 
	`˝rötf
("shellÖroduced incorrect output.\n");

77 
	`˝rötf
("expected:\n===\n");

78 (
n
 = 
	`ªad
(
kfd
, 
buf
,  buf-1)) > 0)

79 
	`sys_˝uts
(
buf
, 
n
);

80 
	`˝rötf
("===\ngot:\n===\n");

81 (
n
 = 
	`ªad
(
rfd
, 
buf
,  buf-1)) > 0)

82 
	`sys_˝uts
(
buf
, 
n
);

83 
	`˝rötf
("===\n");

84 
	`exô
();

85 
	}
}

	@user/testtime.c

2 
	~<öc/lib.h
>

3 
	~<öc/x86.h
>

6 
	$¶ìp
(
£c
)

8 
now
 = 
	`sys_time_m£c
();

9 
íd
 = 
now
 + 
£c
 * 1000;

11 i‡(()
now
 < 0 && (Íow > -
MAXERROR
)

12 
	`∑nic
("sys_time_m£c: %e", ()
now
);

13 i‡(
íd
 < 
now
)

14 
	`∑nic
("sleep: wrap");

16 
	`sys_time_m£c
(Ë< 
íd
)

17 
	`sys_yõld
();

18 
	}
}

21 
	$umaö
(
¨gc
, **
¨gv
)

23 
i
;

26 
i
 = 0; i < 50; i++)

27 
	`sys_yõld
();

29 
	`˝rötf
("starting count down: ");

30 
i
 = 5; i >= 0; i--) {

31 
	`˝rötf
("%d ", 
i
);

32 
	`¶ìp
(1);

34 
	`˝rötf
("\n");

35 
	`bªakpoöt
();

36 
	}
}

	@user/vmm.c

1 
	~<öc/lib.h
>

2 
	~<öc/vmx.h
>

3 
	~<öc/ñf.h
>

4 
	~<öc/ït.h
>

5 
	~<öc/°dio.h
>

7 
	#GUEST_KERN
 "/vmm/kî√l"

	)

8 
	#GUEST_BOOT
 "/vmm/boŸ"

	)

10 
	#JOS_ENTRY
 0x7000

	)

19 
	$m≠_ö_gue°
–
ívid_t
 
gue°
, 
uöçå_t
 
g∑
, 
size_t
 
memsz
,

20 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
 ) {

22 
i
, 
r
;

23 *
blk
;

26 i‡((
i
 = 
	`PGOFF
(
g∑
))) {

27 
g∑
 -
i
;

28 
memsz
 +
i
;

29 
fûesz
 +
i
;

30 
fûeoff£t
 -
i
;

33 
i
 = 0; i < 
memsz
; i +
PGSIZE
) {

34 i‡(
i
 >
fûesz
) {

35 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

36  
r
;

37 i‡((
r
 = 
	`sys_ït_m≠
(
thi£nv
->
ív_id
, 
UTEMP
, 
gue°
, (*)(
g∑
 + 
i
), 
__EPTE_FULL
)) < 0)

38 
	`∑nic
("•awn: sys_ït_m≠ d©a: %e", 
r
);

39 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

42 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

43  
r
;

44 i‡((
r
 = 
	`£ek
(
fd
, 
fûeoff£t
 + 
i
)) < 0)

45  
r
;

46 i‡((
r
 = 
	`ªadn
(
fd
, 
UTEMP
, 
	`MIN
(
PGSIZE
, 
fûesz
-
i
))) < 0)

47  
r
;

48 i‡((
r
 = 
	`sys_ït_m≠
(
thi£nv
->
ív_id
, 
UTEMP
, 
gue°
, (*)(
g∑
 + 
i
), 
__EPTE_FULL
)) < 0)

49 
	`∑nic
("•awn: sys_ït_m≠ d©a: %e", 
r
);

50 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

54 
	}
}

63 
	$c›y_gue°_kîn_g∑
–
ívid_t
 
gue°
, * 
‚ame
 ) {

66 
ñf_buf
[512];

68 
fd
, 
i
, 
r
;

69 
Elf
 *
ñf
;

70 
Proghdr
 *
ph
;

71 
≥rm
;

72 i‡((
r
 = 
	`›í
(
‚ame
, 
O_RDONLY
)) < 0)

73  
r
;

74 
fd
 = 
r
;

76 
ñf
 = (
Elf
*Ë
ñf_buf
;

77 i‡(
	`ªadn
(
fd
, 
ñf_buf
, ”lf_buf)Ë!”lf_bufË|| 
ñf
->
e_magic
 !
ELF_MAGIC
)

79 
	`˛o£
(
fd
);

80 
	`˝rötf
("ñ‡magi¯%08x w™à%08x\n", 
ñf
->
e_magic
, 
ELF_MAGIC
);

81  -
E_NOT_EXEC
;

84 
ph
 = (
Proghdr
*Ë(
ñf_buf
 + 
ñf
->
e_phoff
);

85 
i
 = 0; i < 
ñf
->
e_phnum
; i++, 
ph
++) {

86 i‡(
ph
->
p_ty≥
 !
ELF_PROG_LOAD
)

88 
≥rm
 = 
PTE_P
 | 
PTE_U
;

89 i‡(
ph
->
p_Êags
 & 
ELF_PROG_FLAG_WRITE
)

90 
≥rm
 |
PTE_W
;

91 i‡((
r
 = 
	`m≠_ö_gue°
(
gue°
, 
ph
->
p_∑
,Öh->
p_memsz
, 
fd
,Öh->
p_fûesz
,Öh->
p_off£t
)) < 0)

92 
îr‹
;

94 
	`˛o£
(
fd
);

95 
fd
 = -1;

97 
îr‹
:

98 
	`˛o£
(
fd
);

99  
r
;

101 
	}
}

104 
	$umaö
(
¨gc
, **
¨gv
) {

106 
ªt
;

107 
ívid_t
 
gue°
;

108 
fûíame_buf„r
[50];

109 
vmdisk_numbî
;

110 
r
;

111 i‡((
ªt
 = 
	`sys_ív_mkgue°
–
GUEST_MEM_SZ
, 
JOS_ENTRY
 )) < 0) {

112 
	`˝rötf
("Eº‹ cª©ögá gue° OSÉnv: %e\n", 
ªt
 );

113 
	`exô
();

115 
gue°
 = 
ªt
;

118 if((
ªt
 = 
	`c›y_gue°_kîn_g∑
(
gue°
, 
GUEST_KERN
)) < 0) {

119 
	`˝rötf
("Eº‹ c›yögÖagêötÿthêgue° - %d\n.", 
ªt
);

120 
	`exô
();

124 
fd
;

125 i‡((
fd
 = 
	`›í
–
GUEST_BOOT
, 
O_RDONLY
)) < 0 ) {

126 
	`˝rötf
("›í %†f‹Ñód: %e\n", 
GUEST_BOOT
, 
fd
 );

127 
	`exô
();

131 i‡((
ªt
 = 
	`m≠_ö_gue°
(
gue°
, 
JOS_ENTRY
, 512, 
fd
, 512, 0)) < 0) {

132 
	`˝rötf
("Eº‹ m≠pög boŸlﬂdî i¡ÿthêgue° - %d\n.", 
ªt
);

133 
	`exô
();

136 #i‚de‡
VMM_GUEST


137 
	`sys_vmx_ö¸_vmdisk_numbî
();

140 
vmdisk_numbî
 = 
	`sys_vmx_gë_vmdisk_numbî
();

141 
	`¢¥ötf
(
fûíame_buf„r
, 50, "/vmm/fs%d.img", 
vmdisk_numbî
);

143 
	`˝rötf
("Cª©ögáÇew vútuÆ HDDáà/vmm/fs%d.img\n", 
vmdisk_numbî
);

144 
r
 = 
	`c›y
("vmm/˛ón-fs.img", 
fûíame_buf„r
);

146 i‡(
r
 < 0) {

147 
	`˝rötf
("Cª©ê√w vútuÆ HDD faûed: %e\n", 
r
);

148 
	`exô
();

151 
	`˝rötf
("Create VHD finished\n");

155 
	`sys_ív_£t_°©us
(
gue°
, 
ENV_RUNNABLE
);

156 
	`waô
(
gue°
);

158 
	}
}

	@user/vmmanager.c

2 #i‚de‡
VMM_GUEST


3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 *
buf
;

9 
	`sys_vmx_li°_vms
();

10 
buf
 = 
	`ªadlöe
("Please selectá VMÅoÑesume: ");

11 !(
	`°æí
(
buf
) == 1

12 && 
buf
[0] >= '1'

13 && 
buf
[0] <= '9')) {

14 
îr‹
: 
	`˝rötf
("PleaseÉnterá correct vmÇumber\n");

15 
buf
 = 
	`ªadlöe
("Please selectá VMÅoÑesume: ");

18 i‡(
	`sys_vmx_£l_ªsume
(
buf
[0] - '1' + 1)) {

19 
	`˝rötf
("Press EnterÅo Continue\n");

22 
îr‹
;

25 
	}
}

	@user/writemotd.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
rfd
, 
wfd
;

8 
buf
[512];

9 
n
, 
r
;

11 i‡((
rfd
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

12 
	`∑nic
("›í /√wmŸd: %e", 
rfd
);

13 i‡((
wfd
 = 
	`›í
("/mŸd", 
O_RDWR
)) < 0)

14 
	`∑nic
("›í /mŸd: %e", 
wfd
);

15 
	`˝rötf
("fûêdes¸ùt‹†%d %d\n", 
rfd
, 
wfd
);

16 i‡(
rfd
 =
wfd
)

17 
	`∑nic
("open /newmotdánd /motd give same file descriptor");

19 
	`˝rötf
("OLD MOTD\n===\n");

20 (
n
 = 
	`ªad
(
wfd
, 
buf
,  buf-1)) > 0)

21 
	`sys_˝uts
(
buf
, 
n
);

22 
	`˝rötf
("===\n");

23 
	`£ek
(
wfd
, 0);

25 i‡((
r
 = 
	`·runˇã
(
wfd
, 0)) < 0)

26 
	`∑nic
("åunˇã /mŸd: %e", 
r
);

28 
	`˝rötf
("NEW MOTD\n===\n");

29 (
n
 = 
	`ªad
(
rfd
, 
buf
,  buf-1)) > 0) {

30 
	`sys_˝uts
(
buf
, 
n
);

31 i‡((
r
 = 
	`wrôe
(
wfd
, 
buf
, 
n
)) !=Ç)

32 
	`∑nic
("wrôê/mŸd: %e", 
r
);

34 
	`˝rötf
("===\n");

36 i‡(
n
 < 0)

37 
	`∑nic
("ªad /√wmŸd: %e", 
n
);

39 
	`˛o£
(
rfd
);

40 
	`˛o£
(
wfd
);

41 
	}
}

	@user/yield.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
i
;

11 
	`˝rötf
("Hñlo, IámÉnvú⁄míà%08x.\n", 
thi£nv
->
ív_id
);

12 
i
 = 0; i < 5; i++) {

13 
	`sys_yõld
();

14 
	`˝rötf
("Back inÉnvironment %08x, iteration %d.\n",

15 
thi£nv
->
ív_id
, 
i
);

17 
	`˝rötf
("AŒ d⁄êöÉnvú⁄míà%08x.\n", 
thi£nv
->
ív_id
);

18 
	}
}

	@vmm/ept.c

3 
	~<vmm/ït.h
>

4 
	~<öc/x86.h
>

5 
	~<öc/îr‹.h
>

6 
	~<öc/memœyout.h
>

7 
	~<kîn/pm≠.h
>

8 
	~<öc/°rög.h
>

11 
ölöe
 
uöçå_t
 
	$ïã_addr
(
ïã_t
 
ïã
)

13  (
ïã
 & 
EPTE_ADDR
);

14 
	}
}

17 
ölöe
 
uöçå_t
 
	$ïã_∑ge_vaddr
(
ïã_t
 
ïã
)

19  (
uöçå_t
Ë
	`KADDR
(
	`ïã_addr
(
ïã
));

20 
	}
}

23 
ölöe
 
ïã_t
 
	$ïã_Êags
(
ïã_t
 
ïã
)

25  (
ïã
 & 
EPTE_FLAGS
);

26 
	}
}

29 
ölöe
 
	$ïã_¥e£¡
(
ïã_t
 
ïã
)

31  (
ïã
 & 
__EPTE_FULL
) > 0;

32 
	}
}

49 
	$ït_lookup_g∑
(
ïã_t
* 
ïåt
, *
g∑
,

50 
¸óã
, 
ïã_t
 **
ïã_out
) {

52 
ïã_t
 * 
ïã
;

53 
ªt
;

55 if(!
ïåt
)

56  -
E_INVAL
;

58  
	`ït_pml4e_wÆk
(
ïåt
, 
g∑
, 
¸óã
, 
ïã_out
);

59 
	}
}

62 
	$ït_pml4e_wÆk
(
ïã_t
 *
ïåt
, c⁄° *
g∑
, 
¸óã
,É±e_à**
ïã_out
)

64 
uöçå_t
 
ödex_ö_ït_pml4t
 = 
	`PML4
(
g∑
);

65 
ïã_t
 *
off£td_±r_ö_ït_pml4t
 = 
ïåt
 + 
ödex_ö_ït_pml4t
;

66 
ïã_t
 *
pd±_ba£
 = (ïã_t*)(
	`PTE_ADDR
(*
off£td_±r_ö_ït_pml4t
));

67 
ªt
 = 0;

68 i‡(
pd±_ba£
 =
NULL
) {

69 i‡(!
¸óã
Ë -
E_NO_ENT
;

71 
PageInfo
 *
√wPage
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
);

73 i‡(
√wPage
 =
NULL
Ë -
E_NO_MEM
;

75 
√wPage
->
µ_ªf
++;

76 
pd±_ba£
 = (
ïã_t
*)
	`∑ge2∑
(
√wPage
);

77 
ªt
 = 
	`ït_pd≥_wÆk
((
ïã_t
*)
	`∑ge2kva
(
√wPage
), 
g∑
, 
¸óã
, 
ïã_out
);

79 i‡(
ªt
 < 0)

80 
	`∑ge_de¸ef
(
√wPage
);

82 *
off£td_±r_ö_ït_pml4t
 = ((
uöt64_t
)
pd±_ba£
Ë| 
PTE_P
 | 
PTE_U
 | 
PTE_W
;

84  
ªt
;

88  
	`ït_pd≥_wÆk
(
	`KADDR
((
uöt64_t
)
pd±_ba£
), 
g∑
, 
¸óã
, 
ïã_out
);

90 
	}
}

92 
	$ït_pd≥_wÆk
(
ïã_t
 *
pd±_ba£
,c⁄° *
g∑
,
¸óã
,É±e_à**
ïã_out
)

94 
uöçå_t
 
ödex_ö_pd±
 = 
	`PDPE
(
g∑
);

95 
ïã_t
 *
off£td_±r_ö_pd±
 = 
pd±_ba£
 + 
ödex_ö_pd±
;

96 
ïã_t
 *
pgdú_ba£
 = (
pde_t
*Ë
	`PTE_ADDR
(*
off£td_±r_ö_pd±
);

97 
ªt
 = 0;

98 i‡(
pgdú_ba£
 =
NULL
)

100 i‡(
¸óã
 =0Ë 
E_NO_ENT
;

102 
PageInfo
 *
√wPage
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
);

104 i‡(
√wPage
 =
NULL
Ë 
E_NO_MEM
;

106 
√wPage
->
µ_ªf
++;

107 
pgdú_ba£
 = (
ïã_t
*)
	`∑ge2∑
(
√wPage
);

108 
ªt
 = 
	`ït_pgdú_wÆk
(
	`∑ge2kva
(
√wPage
), 
g∑
, 
¸óã
, 
ïã_out
);

110 i‡(
ªt
 < 0Ë
	`∑ge_de¸ef
(
√wPage
);

112 *
off£td_±r_ö_pd±
 = ((
uöt64_t
)
pgdú_ba£
Ë| 
PTE_P
 | 
PTE_U
 | 
PTE_W
;

114  
ªt
;

118  
	`ït_pgdú_wÆk
(
	`KADDR
((
uöt64_t
)
pgdú_ba£
), 
g∑
, 
¸óã
, 
ïã_out
);

119 
	}
}

122 
	$ït_pgdú_wÆk
(
pde_t
 *
pgdú_ba£
, c⁄° *
g∑
, 
¸óã
, 
ïã_t
 **
ïã_out
)

124 
uöçå_t
 
ödex_ö_pgdú
 = 
	`PDX
(
g∑
);

125 
ïã_t
 *
off£td_±r_ö_pgdú
 = 
pgdú_ba£
 + 
ödex_ö_pgdú
;

126 
ïã_t
 *
∑ge_èbÀ_ba£
 = (ïã_t*)(
	`PTE_ADDR
(*
off£td_±r_ö_pgdú
));

128 i‡(
∑ge_èbÀ_ba£
 =
NULL
) {

129 i‡(
¸óã
 =0Ë -
E_NO_ENT
;

131 
PageInfo
 *
√wPage
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
);

133 i‡(
√wPage
 =
NULL
Ë -
E_NO_MEM
;

135 
√wPage
->
µ_ªf
++;

136 
∑ge_èbÀ_ba£
 = (
ïã_t
*)
	`∑ge2∑
(
√wPage
);

137 *
off£td_±r_ö_pgdú
 = ((
uöt64_t
)
∑ge_èbÀ_ba£
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

139 
uöçå_t
 
ödex_ö_∑ge_èbÀ
 = 
	`PTX
(
g∑
);

140 
±e_t
 *
off£td_±r_ö_∑ge_èbÀ
 = 
∑ge_èbÀ_ba£
 + 
ödex_ö_∑ge_èbÀ
;

141 *
ïã_out
 = (
ïã_t
*)
	`KADDR
((
uöt64_t
)
off£td_±r_ö_∑ge_èbÀ
);

146 
uöçå_t
 
ödex_ö_∑ge_èbÀ
 = 
	`PTX
(
g∑
);

147 
±e_t
 *
off£td_±r_ö_∑ge_èbÀ
 = 
∑ge_èbÀ_ba£
 + 
ödex_ö_∑ge_èbÀ
;

148 *
ïã_out
 = (
ïã_t
*)
	`KADDR
((
uöt64_t
)
off£td_±r_ö_∑ge_èbÀ
);

152 
	}
}

154 
	$ït_g∑2hva
(
ïã_t
* 
ïåt
, *
g∑
, **
hva
) {

155 
ïã_t
* 
±e
;

156 
ªt
 = 
	`ït_lookup_g∑
(
ïåt
, 
g∑
, 0, &
±e
);

157 if(
ªt
 < 0) {

158 *
hva
 = 
NULL
;

160 if(!
	`ïã_¥e£¡
(*
±e
)) {

161 *
hva
 = 
NULL
;

163 *
hva
 = 
	`KADDR
(
	`ïã_addr
(*
±e
));

166 
	}
}

168 
	$‰ì_ït_Àvñ
(
ïã_t
* 
ïåt
, 
Àvñ
) {

169 
ïã_t
* 
dú
 = 
ïåt
;

170 
i
;

172 
i
=0; i<
NPTENTRIES
; ++i) {

173 if(
Àvñ
 != 0) {

174 if(
	`ïã_¥e£¡
(
dú
[
i
])) {

175 
phyßddr_t
 
∑
 = 
	`ïã_addr
(
dú
[
i
]);

176 
	`‰ì_ït_Àvñ
((
ïã_t
*Ë
	`KADDR
(
∑
), 
Àvñ
-1);

178 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

182 if(
	`ïã_¥e£¡
(
dú
[
i
])) {

183 
phyßddr_t
 
∑
 = 
	`ïã_addr
(
dú
[
i
]);

184 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

189 
	}
}

193 
	$‰ì_gue°_mem
(
ïã_t
* 
ïåt
) {

194 
	`‰ì_ït_Àvñ
(
ïåt
, 
EPT_LEVELS
 - 1);

195 
	`ébÊush
();

196 
	}
}

207 
	$ït_∑ge_ö£π
(
ïã_t
* 
ïåt
, 
PageInfo
* 
µ
, * 
g∑
, 
≥rm
) {

211 
	`∑nic
("ept_page_insertÇot implemented\n");

214 
	}
}

228 
	$ït_m≠_hva2g∑
(
ïã_t
* 
ïåt
, * 
hva
, * 
g∑
, 
≥rm
,

229 
ovîwrôe
) {

232 
phyßddr_t
 
h∑
 = 0;

233 
±e_t
 *
±e
 = 
NULL
;

234 
ªt
 = 0;

236 
h∑
 = 
	`PADDR
(
hva
);

238 
ªt
 = 
	`ït_lookup_g∑
(
ïåt
, 
g∑
, 1, (
ïã_t
**)&
±e
);

239 if(!
ªt
)

241 if(*
±e
)

243 if(
ovîwrôe
)

245 *
±e
 = (
±e_t
)
h∑
 | 
≥rm
;

249  -
E_INVAL
;

253 *
±e
 = (
±e_t
)
h∑
 | 
≥rm
;

257  
ªt
;

258 
	}
}

260 
	$ït_Æloc_°©ic
(
ïã_t
 *
ïåt
, 
VmxGue°Info
 *
göfo
) {

261 
phyßddr_t
 
i
;

263 
i
=0x0; i < 0xA0000; i+=
PGSIZE
) {

264 
PageInfo
 *
p
 = 
	`∑ge_Æloc
(0);

265 
p
->
µ_ªf
 += 1;

266 
r
 = 
	`ït_m≠_hva2g∑
(
ïåt
, 
	`∑ge2kva
(
p
), (*)
i
, 
__EPTE_FULL
, 0);

269 
i
=0x100000; i < 
göfo
->
phys_sz
; i+=
PGSIZE
) {

270 
PageInfo
 *
p
 = 
	`∑ge_Æloc
(0);

271 
p
->
µ_ªf
 += 1;

272 
r
 = 
	`ït_m≠_hva2g∑
(
ïåt
, 
	`∑ge2kva
(
p
), (*)
i
, 
__EPTE_FULL
, 0);

275 
	}
}

277 #ifde‡
TEST_EPT_MAP


278 
	~<kîn/ív.h
>

279 
	~<kîn/sysˇŒ.h
>

280 
_exp‹t_sys_ït_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,

281 
ívid_t
 
gue°
, * 
gue°_∑
, 
≥rm
);

283 
	$ã°_ït_m≠
()

285 
Env
 *
§˚nv
, *
d°ív
;

286 
PageInfo
 *
µ
;

287 
ïã_t
 *
ïã
;

288 
r
;

289 
µ_ªf
;

290 
i
;

291 
ïã_t
* 
dú
;

293 i‡((
r
 = 
	`ív_Æloc
(&
§˚nv
, 0)) < 0)

294 
	`∑nic
("FaûedÅÿÆloˇãÉnv (%d)\n", 
r
);

295 i‡(!(
µ
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
)))

296 
	`∑nic
("FaûedÅÿÆloˇãÖagê(%d)\n", 
r
);

297 i‡((
r
 = 
	`∑ge_ö£π
(
§˚nv
->
ív_pml4e
, 
µ
, 
UTEMP
, 0)) < 0)

298 
	`∑nic
("FaûedÅÿö£πÖagê(%d)\n", 
r
);

299 
cuªnv
 = 
§˚nv
;

302 i‡((
r
 = 
	`ív_Æloc
(&
d°ív
, 
§˚nv
->
ív_id
)) < 0)

303 
	`∑nic
("FaûedÅÿÆloˇãÉnv (%d)\n", 
r
);

304 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
, 
d°ív
->ív_id, UTEMP, 
__EPTE_READ
)) < 0)

305 
	`˝rötf
("EPT m≠Åÿn⁄-gue°Énv faûedá†ex≥˘ed (%d).\n", 
r
);

307 
	`∑nic
("sys_ept_map success onÇon-guestÉnv.\n");

311 i‡((
r
 = 
	`ív_gue°_Æloc
(&
d°ív
, 
§˚nv
->
ív_id
)) < 0)

312 
	`∑nic
("FaûedÅÿÆloˇã gue°Énv (%d)\n", 
r
);

313 
d°ív
->
ív_vmxöfo
.
phys_sz
 = (
uöt64_t
)
UTEMP
 + 
PGSIZE
;

316 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, (*)
UTOP
, 
d°ív
->ív_id, 
UTEMP
, 
__EPTE_READ
)) < 0)

317 
	`˝rötf
("EPT m≠ fromábovêUTOPáª®Áûedá†ex≥˘ed (%d).\n", 
r
);

319 
	`∑nic
("sys_ept_map fromábove UTOPárea success\n");

320 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
+1, 
d°ív
->ív_id, UTEMP, 
__EPTE_READ
)) < 0)

321 
	`˝rötf
("EPT m≠ from u«lig√d srcv®Áûedá†ex≥˘ed (%d).\n", 
r
);

323 
	`∑nic
("sys_ept_map from unaligned srcva success\n");

326 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
, 
d°ív
->ív_id, UTEMP + 
PGSIZE
, 
__EPTE_READ
)) < 0)

327 
	`˝rötf
("EPT m≠Åÿout-of-bound¨yáª®Áûedá†ex≥˘ed (%d).\n", 
r
);

329 
	`∑nic
("sys_ept_map success on out-of-boundaryárea\n");

330 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
, 
d°ív
->ív_id, UTEMP-1, 
__EPTE_READ
)) < 0)

331 
	`˝rötf
("EPT m≠Åÿu«lig√d gue°_∑ faûedá†ex≥˘ed (%d).\n", 
r
);

333 
	`∑nic
("sys_ept_map success on unaligned guest_pa\n");

336 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
, 
d°ív
->env_id, UTEMP, 0)) < 0)

337 
	`˝rötf
("EPT m≠ wôhÉm±yÖîmÖ¨amëî faûedá†ex≥˘ed (%d).\n", 
r
);

339 
	`∑nic
("sys_ept_map success onÉmptyÖerm\n");

340 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
, 
d°ív
->ív_id, UTEMP, 
__EPTE_WRITE
)) < 0)

341 
	`˝rötf
("EPT m≠ wôh wrôê≥rmÖ¨amëî faûedá†ex≥˘ed (%d).\n", 
r
);

343 
	`∑nic
("sys_ept_map success on writeÖerm\n");

345 
µ_ªf
 = 
µ
->pp_ref;

347 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
, 
d°ív
->ív_id, UTEMP, 
__EPTE_READ
)) < 0)

348 
	`∑nic
("FaûedÅÿdÿsys_ït_m≠ (%d)\n", 
r
);

350 
	`˝rötf
("sys_ept_map finishedÇormally.\n");

352 i‡(
µ
->
µ_ªf
 !=Öp_ref + 1)

353 
	`∑nic
("Failed on checkingÖp_ref\n");

355 
	`˝rötf
("pp_ref incremented correctly\n");

358 
µ_ªf
 = 
µ
->pp_ref;

359 i‡((
r
 = 
	`_exp‹t_sys_ït_m≠
(
§˚nv
->
ív_id
, 
UTEMP
, 
d°ív
->ív_id, UTEMP, 
__EPTE_READ
)) < 0)

360 
	`˝rötf
("sys_ept_map finishedÇormally.\n");

362 
	`∑nic
("sys_ept_map success onÑemappingÅhe sameÖage\n");

364 i‡(
µ
->
µ_ªf
 ==Öp_ref)

365 
	`˝rötf
("sys_ept_map handledÖp_ref correctly.\n");

367 
	`∑nic
("sys_ept_map failedÅo handleÖp_ref.\n");

370 i‡((
r
 = 
	`ït_lookup_g∑
(
NULL
, 
UTEMP
, 0, &
ïã
)) < 0)

371 
	`˝rötf
("EPTÜookup witháÇullÉptrt failedásÉxpected\n");

373 
	`∑nic
 ("ept_lookup_gpa success onÇullÉptrt\n");

377 i‡((
r
 = 
	`ït_lookup_g∑
(
d°ív
->
ív_pml4e
, 
UTEMP
, 0, &
ïã
)) < 0)

378 
	`∑nic
("Faûed o¿ït_lookup_g∑ (%d)\n", 
r
);

379 i‡(
	`∑ge2∑
(
µ
Ë!(
	`ïã_addr
(*
ïã
)))

380 
	`∑nic
("EPT mappingáddress mismatching (%x vs %x).\n",

381 
	`∑ge2∑
(
µ
), 
	`ïã_addr
(*
ïã
));

383 
	`˝rötf
("EPT mappingáddressÜooks good: %x vs %x.\n",

384 
	`∑ge2∑
(
µ
), 
	`ïã_addr
(*
ïã
));

387 i‡((
r
 = 
	`ït_m≠_hva2g∑
(
d°ív
->
ív_pml4e
, 
	`∑ge2kva
(
µ
), 
UTEMP
, 
__EPTE_READ
, 0)) < 0)

388 
	`˝rötf
("map_hva2gpa handleÇot overwriting correctly\n");

390 
	`∑nic
("map_hva2gpa success on overwriting withÇon-overwriteÖarameter\n");

393 i‡((
r
 = 
	`ït_m≠_hva2g∑
(
d°ív
->
ív_pml4e
, 
	`∑ge2kva
(
µ
), 
UTEMP
, 
__EPTE_READ
, 1)) < 0)

394 
	`∑nic
 ("Failed on mappingáÖage from kvaÅo gpa\n");

396 
	`˝rötf
("map_hva2gpa success on mappingáÖage\n");

399 i‡((
r
 = 
	`ït_lookup_g∑
(
d°ív
->
ív_pml4e
, 
UTEMP
, 0, &
ïã
)) < 0)

400 
	`∑nic
("Faûed o¿ït_lookup_g∑ (%d)\n", 
r
);

401 i‡(((
uöt64_t
)*
ïã
 & (~
EPTE_ADDR
)Ë=(
__EPTE_READ
 | 
	`__EPTE_TYPE
–
EPTE_TYPE_WB
 ) | 
__EPTE_IPAT
))

402 
	`˝rötf
("map_hva2gpa success onÖerm check\n");

404 
	`∑nic
("map_hva2gpa didn't setÖermission correctly\n");

406 
dú
 = 
d°ív
->
ív_pml4e
;

407  
i
 = 
EPT_LEVELS
 - 1; i > 0; --i ) {

408 
idx
 = 
	`ADDR_TO_IDX
(
UTEMP
, 
i
);

409 i‡(!
	`ïã_¥e£¡
(
dú
[
idx
])) {

410 
	`∑nic
("FaûedÅÿfödÖagêèbÀ iãmáàthêimmedüãÜevñ %d.", 
i
);

412 i‡(!(
dú
[
idx
] & 
__EPTE_FULL
)) {

413 
	`∑nic
("Pîmissi⁄ check faûedáàimmedüãÜevñ %d.", 
i
);

415 
dú
 = (
ïã_t
 *Ë
	`ïã_∑ge_vaddr
(dú[
idx
]);

417 
	`˝rötf
("EPT immediate mapping checkÖassed\n");

421 
	`∑nic
("Cheers! sys_ept_map seemsÅo work correctly.\n");

424 
	}
}

	@vmm/ept.h

3 #i‚de‡
JOS_VMX_EPT_H


4 
	#JOS_VMX_EPT_H


	)

6 
	~<öc/mmu.h
>

7 
	~<vmm/vmx.h
>

8 
	~<öc/ït.h
>

10 
uöt64_t
 
	tïã_t
;

12 
ït_m≠_hva2g∑
–
ïã_t
* 
ïåt
, * 
hva
, * 
g∑
, 
≥rm
, 
ovîwrôe
 );

13 
ït_Æloc_°©ic
(
ïã_t
 *
ïåt
, 
VmxGue°Info
 *
göfo
);

14 
‰ì_gue°_mem
(
ïã_t
* 
ïåt
);

15 
ït_g∑2hva
(
ïã_t
* 
ïåt
, *
g∑
, **
hva
);

16 
ït_∑ge_ö£π
(
ïã_t
* 
ïåt
, 
PageInfo
* 
µ
, * 
g∑
, 
≥rm
);

17 
ït_pml4e_wÆk
(
ïã_t
 *
ïåt
, c⁄° *
g∑
, 
¸óã
,É±e_à**
ïã_out
);

18 
ït_pd≥_wÆk
(
ïã_t
 *
pd±_ba£
,c⁄° *
g∑
,
¸óã
,É±e_à**
ïã_out
);

19 
ït_pgdú_wÆk
(
pde_t
 *
pgdú_ba£
, c⁄° *
g∑
, 
¸óã
, 
ïã_t
 **
ïã_out
);

21 
	#EPT_LEVELS
 4

	)

23 
	#VMX_EPT_FAULT_READ
 0x01

	)

24 
	#VMX_EPT_FAULT_WRITE
 0x02

	)

25 
	#VMX_EPT_FAULT_INS
 0x04

	)

28 
	#EPTE_ADDR
 (~(
PGSIZE
 - 1))

	)

29 
	#EPTE_FLAGS
 (
PGSIZE
 - 1)

	)

31 
	#ADDR_TO_IDX
(
∑
, 
n
) \

32 ((((
uöt64_t
Ë(
∑
)Ë>> (12 + 9 * (
n
))Ë& ((1 << 9Ë- 1))

	)

	@vmm/vmexits.c

3 
	~<vmm/vmx.h
>

4 
	~<öc/îr‹.h
>

5 
	~<vmm/vmexôs.h
>

6 
	~<vmm/ït.h
>

7 
	~<öc/x86.h
>

8 
	~<öc/as£π.h
>

9 
	~<kîn/pm≠.h
>

10 
	~<kîn/c⁄sﬁe.h
>

11 
	~<kîn/k˛ock.h
>

12 
	~<kîn/mu…iboŸ.h
>

13 
	~<öc/°rög.h
>

14 
	~<öc/°dio.h
>

15 
	~<kîn/sysˇŒ.h
>

16 
	~<kîn/ív.h
>

17 
	~<kîn/˝u.h
>

20 
	gvmdisk_numbî
 = 0;

22 
	$vmx_gë_vmdisk_numbî
() {

23  
vmdisk_numbî
;

24 
	}
}

27 
	$vmx_ö¸_vmdisk_numbî
() {

28 
vmdisk_numbî
++;

29 
	}
}

30 
boﬁ


31 
	$föd_m§_ö_ªgi⁄
(
uöt32_t
 
m§_idx
, 
uöçå_t
 *
¨ó
, 
¨ó_sz
, 
vmx_m§_íåy
 **
m§_íåy
) {

32 
vmx_m§_íåy
 *
íåy
 = (vmx_m§_íåy *)
¨ó
;

33 
i
;

34 
i
=0; i<
¨ó_sz
; ++i) {

35 if(
íåy
->
m§_ödex
 =
m§_idx
) {

36 *
m§_íåy
 = 
íåy
;

37  
åue
;

40  
Ál£
;

41 
	}
}

44 
boﬁ


45 
	$h™dÀ_öãºu±_wödow
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
, 
uöt32_t
 
ho°_ve˘‹
) {

46 
uöt64_t
 
rÊags
;

47 
uöt32_t
 
¥ocba£d_˘ls_‹
;

49 
¥ocba£d_˘ls_‹
 = 
	`vmcs_ªad32
–
VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS
 );

52 
¥ocba£d_˘ls_‹
 &~(
VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT
);

54 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS
,

55 
¥ocba£d_˘ls_‹
);

57 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO
 , 
ho°_ve˘‹
);

58  
åue
;

59 
	}
}

60 
boﬁ


61 
	$h™dÀ_öãºu±s
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
, 
uöt32_t
 
ho°_ve˘‹
) {

62 
uöt64_t
 
rÊags
;

63 
uöt32_t
 
¥ocba£d_˘ls_‹
;

64 
rÊags
 = 
	`vmcs_ªad64
(
VMCS_GUEST_RFLAGS
);

66 i‡–!(
rÊags
 & (0x1 << 9)) ) {

69 
¥ocba£d_˘ls_‹
 = 
	`vmcs_ªad32
–
VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS
);

72 
¥ocba£d_˘ls_‹
 |
VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT
;

74 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS
,

75 
¥ocba£d_˘ls_‹
);

79 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO
 , 
ho°_ve˘‹
);

84  
åue
;

85 
	}
}

87 
boﬁ


88 
	$h™dÀ_rdm§
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
) {

89 
uöt64_t
 
m§
 = 
tf
->
tf_ªgs
.
ªg_rcx
;

90 if(
m§
 =
EFER_MSR
) {

92 
uöt64_t
 
vÆ
;

93 
vmx_m§_íåy
 *
íåy
;

94 
boﬁ
 
r
 = 
	`föd_m§_ö_ªgi⁄
(
m§
, 
göfo
->
m§_gue°_¨ó
, göfo->
m§_cou¡
, &
íåy
);

95 
	`as£π
(
r
);

96 
vÆ
 = 
íåy
->
m§_vÆue
;

98 
tf
->
tf_ªgs
.
ªg_rdx
 = 
vÆ
 << 32;

99 
tf
->
tf_ªgs
.
ªg_øx
 = 
vÆ
 & 0xFFFFFFFF;

101 
tf
->
tf_rù
 +
	`vmcs_ªad32
(
VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH
);

102  
åue
;

105  
Ál£
;

106 
	}
}

108 
boﬁ


109 
	$h™dÀ_wrm§
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
) {

110 
uöt64_t
 
m§
 = 
tf
->
tf_ªgs
.
ªg_rcx
;

111 if(
m§
 =
EFER_MSR
) {

113 
uöt64_t
 
cur_vÆ
, 
√w_vÆ
;

114 
vmx_m§_íåy
 *
íåy
;

115 
boﬁ
 
r
 =

116 
	`föd_m§_ö_ªgi⁄
(
m§
, 
göfo
->
m§_gue°_¨ó
, göfo->
m§_cou¡
, &
íåy
);

117 
	`as£π
(
r
);

118 
cur_vÆ
 = 
íåy
->
m§_vÆue
;

120 
√w_vÆ
 = (
tf
->
tf_ªgs
.
ªg_rdx
 << 32)|tf->tf_ªgs.
ªg_øx
;

121 if(
	`BIT
(
cur_vÆ
, 
EFER_LME
Ë=0 && BIT(
√w_vÆ
, EFER_LME) == 1) {

123 
uöt32_t
 
íåy_˘ls
 = 
	`vmcs_ªad32
–
VMCS_32BIT_CONTROL_VMENTRY_CONTROLS
 );

124 
íåy_˘ls
 |
VMCS_VMENTRY_x64_GUEST
;

125 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMENTRY_CONTROLS
,

126 
íåy_˘ls
 );

130 
íåy
->
m§_vÆue
 = 
√w_vÆ
;

131 
tf
->
tf_rù
 +
	`vmcs_ªad32
(
VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH
);

132  
åue
;

135  
Ál£
;

136 
	}
}

138 
boﬁ


139 
	$h™dÀ_ïtviﬁ©i⁄
(
uöt64_t
 *
ïåt
, 
VmxGue°Info
 *
göfo
) {

140 
uöt64_t
 
g∑
 = 
	`vmcs_ªad64
(
VMCS_64BIT_GUEST_PHYSICAL_ADDR
);

141 
r
;

143 if(
g∑
 < 0xA0000 || (g∑ >0x100000 && g∑ < 
göfo
->
phys_sz
))

147 
PageInfo
 *
p
 = 
	`∑ge_Æloc
(0);

148 if(!
p
) {

149 
	`˝rötf
("vmm: handle_eptviolation: FailedÅoállocateáÖage for guest---out of memory.\n");

150  
Ál£
;

152 
p
->
µ_ªf
 += 1;

153 
r
 = 
	`ït_m≠_hva2g∑
(
ïåt
,

154 
	`∑ge2kva
(
p
), (*)
	`ROUNDDOWN
(
g∑
, 
PGSIZE
), 
__EPTE_FULL
, 0);

155 
	`as£π
(
r
 >= 0);

158  
åue
;

159 } i‡(
g∑
 >
CGA_BUF
 && g∑ < CGA_BUF + 
PGSIZE
) {

161 
r
 = 
	`ït_m≠_hva2g∑
(
ïåt
,

162 (*)(
KERNBASE
 + 
CGA_BUF
), (*)CGA_BUF, 
__EPTE_FULL
, 0);

163 
	`as£π
(
r
 >= 0);

164  
åue
;

166 
	`˝rötf
("vmm: h™dÀ_ïtviﬁ©i⁄: Ca£ 2, g∑ %x\n", 
g∑
);

167  
Ál£
;

168 
	}
}

170 
boﬁ


171 
	$h™dÀ_ioö°r
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
) {

172 
p‹t_i‹tc
;

174 
uöt64_t
 
quÆifiˇti⁄
 = 
	`vmcs_ªad64
(
VMCS_VMEXIT_QUALIFICATION
);

175 
p‹t_numbî
 = (
quÆifiˇti⁄
 >> 16) & 0xFFFF;

176 
boﬁ
 
is_ö
 = 
	`BIT
(
quÆifiˇti⁄
, 3);

177 
boﬁ
 
h™dÀd
 = 
Ál£
;

180 if(
p‹t_numbî
 =
IO_RTC
) {

181 if(!
is_ö
) {

182 
p‹t_i‹tc
 = 
tf
->
tf_ªgs
.
ªg_øx
;

183 
h™dÀd
 = 
åue
;

185 } i‡(
p‹t_numbî
 =
IO_RTC
 + 1) {

186 if(
is_ö
) {

187 if(
p‹t_i‹tc
 =
NVRAM_BASELO
) {

188 
tf
->
tf_ªgs
.
ªg_øx
 = 640 & 0xFF;

189 
h™dÀd
 = 
åue
;

190 } i‡(
p‹t_i‹tc
 =
NVRAM_BASEHI
) {

191 
tf
->
tf_ªgs
.
ªg_øx
 = (640 >> 8) & 0xFF;

192 
h™dÀd
 = 
åue
;

193 } i‡(
p‹t_i‹tc
 =
NVRAM_EXTLO
) {

194 
tf
->
tf_ªgs
.
ªg_øx
 = ((
göfo
->
phys_sz
 / 1024) - 1024) & 0xFF;

195 
h™dÀd
 = 
åue
;

196 } i‡(
p‹t_i‹tc
 =
NVRAM_EXTHI
) {

197 
tf
->
tf_ªgs
.
ªg_øx
 = (((
göfo
->
phys_sz
 / 1024) - 1024) >> 8) & 0xFF;

198 
h™dÀd
 = 
åue
;

204 if(
h™dÀd
) {

205 
tf
->
tf_rù
 +
	`vmcs_ªad32
(
VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH
);

206  
åue
;

208 
	`˝rötf
("%x %x\n", 
quÆifiˇti⁄
, 
p‹t_i‹tc
);

209  
Ál£
;

211 
	}
}

223 
boﬁ


224 
	$h™dÀ_˝uid
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
)

228 
	`˝rötf
("Handle cpuidÇot implemented\n");

229  
Ál£
;

232 
	}
}

245 
boﬁ


246 
	$h™dÀ_vmˇŒ
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
gInfo
, 
uöt64_t
 *
ïåt
)

248 
boﬁ
 
h™dÀd
 = 
Ál£
;

249 
mu…iboŸ_öfo_t
 
mböfo
;

250 
≥rm
, 
r
;

251 *
g∑_pg
, *
hva_pg
;

252 
ívid_t
 
to_ív
;

253 
uöt32_t
 
vÆ
;

255 
uöt64_t
 
mu…iboŸ_m≠_addr
 = 0x6000;

256 
tf
->
tf_ªgs
.
ªg_øx
) {

257 
VMX_VMCALL_MBMAP
:

269 
	`˝rötf
("e820 map hypercallÇot implemented\n");

270 
h™dÀd
 = 
Ál£
;

273 
VMX_VMCALL_IPCSEND
:

283 
	`˝rötf
("IPC send hypercallÇot implemented\n");

284 
h™dÀd
 = 
Ál£
;

288 
VMX_VMCALL_IPCRECV
:

294 
	`˝rötf
("IPCÑecv hypercallÇot implemented\n");

295 
h™dÀd
 = 
Ál£
;

298 
VMX_VMCALL_LAPICEOI
:

299 
	`œpic_eoi
();

300 
h™dÀd
 = 
åue
;

302 
VMX_VMCALL_BACKTOHOST
:

303 
	`˝rötf
("Now backÅoÅhe host, VM halt inÅhe background,Ñun vmmanagerÅoÑesumeÅhe VM.\n");

304 
cuªnv
->
ív_°©us
 = 
ENV_NOT_RUNNABLE
;

305 
	`ENV_CREATE
(
u£r_sh
, 
ENV_TYPE_USER
);

306 
h™dÀd
 = 
åue
;

308 
VMX_VMCALL_GETDISKIMGNUM
:

309 
tf
->
tf_ªgs
.
ªg_øx
 = 
vmdisk_numbî
;

310 
h™dÀd
 = 
åue
;

314 if(
h™dÀd
) {

322  
h™dÀd
;

323 
	}
}

	@vmm/vmexits.h

3 
	~<öc/å≠.h
>

4 
boﬁ
 
h™dÀ_öãºu±_wödow
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
, 
uöt32_t
 
ho°_ve˘‹
);

5 
boﬁ
 
h™dÀ_öãºu±s
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
, 
uöt32_t
 
ho°_ve˘‹
);

6 
boﬁ
 
h™dÀ_ïtviﬁ©i⁄
(
uöt64_t
 *
ïåt
, 
VmxGue°Info
 *
göfo
);

7 
boﬁ
 
h™dÀ_rdm§
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
);

8 
boﬁ
 
h™dÀ_wrm§
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
);

9 
boﬁ
 
h™dÀ_ioö°r
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
);

10 
boﬁ
 
h™dÀ_˝uid
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
göfo
);

11 
boﬁ
 
h™dÀ_vmˇŒ
(
Tøp‰ame
 *
tf
, 
VmxGue°Info
 *
gInfo
, 
uöt64_t
 *
ïåt
 );

	@vmm/vmx.c

3 
	~<vmm/vmx.h
>

4 
	~<vmm/vmx_asm.h
>

5 
	~<vmm/ït.h
>

6 
	~<vmm/vmexôs.h
>

8 
	~<öc/x86.h
>

9 
	~<öc/îr‹.h
>

10 
	~<öc/as£π.h
>

11 
	~<kîn/pm≠.h
>

12 
	~<öc/°rög.h
>

13 
	~<öc/memœyout.h
>

14 
	~<kîn/sched.h
>

15 
	~<kîn/ív.h
>

16 
	~<kîn/å≠.h
>

17 
	~<kîn/k˛ock.h
>

18 
	~<kîn/c⁄sﬁe.h
>

19 
	~<kîn/•ölock.h
>

22 
	$vmx_li°_vms
() {

24 
i
;

25 
vm_cou¡
 = 0;

26 
i
 = 0; i < 
NENV
; ++i) {

27 i‡(
ívs
[
i
].
ív_ty≥
 =
ENV_TYPE_GUEST
) {

28 i‡(
vm_cou¡
 == 0) {

29 
	`˝rötf
("Running VMs:\n");

31 
vm_cou¡
++;

32 
	`˝rötf
("%d.[%x]vm%d\n", 
vm_cou¡
, 
ívs
[
i
].
ív_id
, vm_count);

35 
	}
}

37 
boﬁ
 
	$vmx_£l_ªsume
(
num
) {

38 
i
;

39 
vm_cou¡
 = 0;

40 
i
 = 0; i < 
NENV
; ++i) {

41 i‡(
ívs
[
i
].
ív_ty≥
 =
ENV_TYPE_GUEST
) {

42 
vm_cou¡
++;

43 i‡(
vm_cou¡
 =
num
) {

44 
	`˝rötf
("Resumêvm.%d\n", 
num
);

45 
ívs
[
i
].
ív_°©us
 = 
ENV_RUNNABLE
;

46  
åue
;

50 
	`˝rötf
("Sñe˘ed VM(No.%d VMËnŸ found.\n", 
num
);

51  
Ál£
;

52 
	}
}

61 
boﬁ
 
	$vmx_check_suµ‹t
() {

62 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

63 
	`˝uid
–1, &
óx
, &
ebx
, &
ecx
, &
edx
 );

65 
	`˝rötf
("bô vÆuê===============%x\n", 
ecx
);

66 i‡(
	`BIT
–
ecx
, 5) == 1)

67  
åue
;

72  
Ál£
;

74 
	}
}

89 
boﬁ
 
	$vmx_check_ït
() {

91 i‡–
	`BIT
–
	`ªad_m§
(
IA32_VMX_PROCBASED_CTLS
), 63Ë=1 && BIT–ªad_m§(
IA32_VMX_PROCBASED_CTLS2
), 33) == 1 )

92  
åue
;

95 
	`∑nic
 ("ept checkÇot implemented\n");

96  
Ál£
;

98 
	}
}

104 
boﬁ
 
	$check_fixed_bôs
–
uöt64_t
 
cuº_vÆ
, uöt64_à
fixed0
, uöt64_à
fixed1
 ) {

106 
i
;

107  
i
 = 0 ; i < –
cuº_vÆ
 ) * 8 ; ++i ) {

108 
bô
 = 
	`BIT
–
cuº_vÆ
, 
i
 );

109 i‡–
bô
 == 1 ) {

111 i‡–
	`BIT
–
fixed1
, 
i
 ) == 0 ) {

112  
Ál£
;

114 } i‡–
bô
 == 0 ) {

116 i‡–
	`BIT
–
fixed0
, 
i
 ) == 1 ) {

117  
Ál£
;

120 
	`as£π
(
Ál£
);

123  
åue
;

124 
	}
}

130 
PageInfo
 * 
	$vmx_öô_vmcs
() {

132 
uöt64_t
 
vmx_basic_m§
 = 
	`ªad_m§
–
IA32_VMX_BASIC
 );

133 
uöt32_t
 
vmcs_ªv_id
 = (uöt32_tË
vmx_basic_m§
;

135 
uöt32_t
 
vmcs_num_byãs
 = ( 
vmx_basic_m§
 >> 32 ) & 0xfff;

136 
	`as£π
–
vmcs_num_byãs
 <= 4096 );

139 
PageInfo
 *
p_vmx⁄_ªgi⁄
 = 
	`∑ge_Æloc
–
ALLOC_ZERO
 );

140 if(!
p_vmx⁄_ªgi⁄
) {

141  
NULL
;

143 
p_vmx⁄_ªgi⁄
->
µ_ªf
 += 1;

145 * 
vmx⁄_ªgi⁄
 = (*Ë
	`∑ge2kva
–
p_vmx⁄_ªgi⁄
 );

146 
	`mem˝y
–
vmx⁄_ªgi⁄
, &
vmcs_ªv_id
, ( vmcs_rev_id ) );

148  
p_vmx⁄_ªgi⁄
;

149 
	}
}

155 
	$vmx_öô_vmx⁄
() {

158 
PageInfo
 *
p_vmx⁄_ªgi⁄
 = 
	`vmx_öô_vmcs
();

159 if(!
p_vmx⁄_ªgi⁄
)

160  -
E_NO_MEM
;

162 
uöt64_t
 
¸0
 = 
	`r¸0
();

163 
uöt64_t
 
¸4
 = 
	`r¸4
();

167 
¸0
 = cr0 | 
CR0_NE
;

168 
	`l¸0
–
¸0
 );

170 
boﬁ
 
ªt
 = 
	`check_fixed_bôs
–
¸0
,

171 
	`ªad_m§
–
IA32_VMX_CR0_FIXED0
 ),

172 
	`ªad_m§
–
IA32_VMX_CR0_FIXED1
 ) );

173 i‡–!
ªt
 ) {

174 
	`∑ge_de¸ef
–
p_vmx⁄_ªgi⁄
 );

175  -
E_VMX_ON
;

178 
¸4
 = cr4 | 
CR4_VMXE
;

179 
	`l¸4
–
¸4
 );

180 
ªt
 = 
	`check_fixed_bôs
–
¸4
,

181 
	`ªad_m§
–
IA32_VMX_CR4_FIXED0
 ),

182 
	`ªad_m§
–
IA32_VMX_CR4_FIXED1
 ) );

183 i‡–!
ªt
 ) {

184 
	`∑ge_de¸ef
–
p_vmx⁄_ªgi⁄
 );

185  -
E_VMX_ON
;

189 
uöt64_t
 
„©uª_c⁄åﬁ
 = 
	`ªad_m§
–
IA32_FEATURE_CONTROL
 );

190 i‡–!
	`BIT
–
„©uª_c⁄åﬁ
, 2 )) {

194 
„©uª_c⁄åﬁ
 |= 0x4;

195 
	`wrôe_m§
–
IA32_FEATURE_CONTROL
, 
„©uª_c⁄åﬁ
 );

197 
„©uª_c⁄åﬁ
 = 
	`ªad_m§
–
IA32_FEATURE_CONTROL
 );

198 i‡–!
	`BIT
–
„©uª_c⁄åﬁ
, 2 )) {

199 
	`∑ge_de¸ef
–
p_vmx⁄_ªgi⁄
 );

201 
	`˝rötf
("UnableÅo start VMM: VMX disabled in BIOS\n");

202  -
E_NO_VMX
;

205 i‡–!
	`BIT
–
„©uª_c⁄åﬁ
, 0 )) {

207 
„©uª_c⁄åﬁ
 |= 0x1;

208 
	`wrôe_m§
–
IA32_FEATURE_CONTROL
, 
„©uª_c⁄åﬁ
 );

211 
uöt8_t
 
îr‹
 = 
	`vmx⁄
–(
phyßddr_t
Ë
	`∑ge2∑
–
p_vmx⁄_ªgi⁄
 ) );

212 i‡–
îr‹
 ) {

213 
	`∑ge_de¸ef
–
p_vmx⁄_ªgi⁄
 );

214  -
E_VMX_ON
;

217 
this˝u
->
is_vmx_roŸ
 = 
åue
;

218 
this˝u
->
vmx⁄_ªgi⁄
 = (
uöçå_t
Ë
	`∑ge2kva
–
p_vmx⁄_ªgi⁄
 );

221 
	}
}

223 
	$vmcs_ho°_öô
() {

224 
	`vmcs_wrôe64
–
VMCS_HOST_CR0
, 
	`r¸0
() );

225 
	`vmcs_wrôe64
–
VMCS_HOST_CR3
, 
	`r¸3
() );

226 
	`vmcs_wrôe64
–
VMCS_HOST_CR4
, 
	`r¸4
() );

228 
	`vmcs_wrôe16
–
VMCS_16BIT_HOST_ES_SELECTOR
, 
GD_KD
 );

229 
	`vmcs_wrôe16
–
VMCS_16BIT_HOST_SS_SELECTOR
, 
GD_KD
 );

230 
	`vmcs_wrôe16
–
VMCS_16BIT_HOST_DS_SELECTOR
, 
GD_KD
 );

231 
	`vmcs_wrôe16
–
VMCS_16BIT_HOST_FS_SELECTOR
, 
GD_KD
 );

232 
	`vmcs_wrôe16
–
VMCS_16BIT_HOST_GS_SELECTOR
, 
GD_KD
 );

233 
	`vmcs_wrôe16
–
VMCS_16BIT_HOST_CS_SELECTOR
, 
GD_KT
 );

235 
gd_tss
 = (
GD_TSS0
 >> 3Ë+ 
this˝u
->
˝u_id
*2;

236 
	`vmcs_wrôe16
–
VMCS_16BIT_HOST_TR_SELECTOR
, 
gd_tss
 << 3 );

238 
uöt16_t
 
xdå_limô
;

239 
uöt64_t
 
xdå_ba£
;

240 
	`ªad_idå
–&
xdå_ba£
, &
xdå_limô
 );

241 
	`vmcs_wrôe64
–
VMCS_HOST_IDTR_BASE
, 
xdå_ba£
 );

243 
	`ªad_gdå
–&
xdå_ba£
, &
xdå_limô
 );

244 
	`vmcs_wrôe64
–
VMCS_HOST_GDTR_BASE
, 
xdå_ba£
 );

246 
	`vmcs_wrôe64
–
VMCS_HOST_FS_BASE
, 0x0 );

247 
	`vmcs_wrôe64
–
VMCS_HOST_GS_BASE
, 0x0 );

248 
	`vmcs_wrôe64
–
VMCS_HOST_TR_BASE
, (
uöt64_t
Ë&
this˝u
->
˝u_ts
 );

250 
uöt64_t
 
tm∂
;

251 
	`asm
("movab†$.Lvmx_ªtu∫, %0" : "Ù"(
tm∂
));

252 
	`vmcs_wrôñ
(
VMCS_HOST_RIP
, 
tm∂
);

253 
	}
}

255 
	$vmcs_gue°_öô
() {

257 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_CS_SELECTOR
, 0x0 );

258 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_ES_SELECTOR
, 0x0 );

259 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_SS_SELECTOR
, 0x0 );

260 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_DS_SELECTOR
, 0x0 );

261 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_FS_SELECTOR
, 0x0 );

262 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_GS_SELECTOR
, 0x0 );

263 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_TR_SELECTOR
, 0x0 );

264 
	`vmcs_wrôe16
–
VMCS_16BIT_GUEST_LDTR_SELECTOR
, 0x0 );

266 
	`vmcs_wrôe64
–
VMCS_GUEST_CS_BASE
, 0x0 );

267 
	`vmcs_wrôe64
–
VMCS_GUEST_ES_BASE
, 0x0 );

268 
	`vmcs_wrôe64
–
VMCS_GUEST_SS_BASE
, 0x0 );

269 
	`vmcs_wrôe64
–
VMCS_GUEST_DS_BASE
, 0x0 );

270 
	`vmcs_wrôe64
–
VMCS_GUEST_FS_BASE
, 0x0 );

271 
	`vmcs_wrôe64
–
VMCS_GUEST_GS_BASE
, 0x0 );

272 
	`vmcs_wrôe64
–
VMCS_GUEST_LDTR_BASE
, 0x0 );

273 
	`vmcs_wrôe64
–
VMCS_GUEST_GDTR_BASE
, 0x0 );

274 
	`vmcs_wrôe64
–
VMCS_GUEST_IDTR_BASE
, 0x0 );

275 
	`vmcs_wrôe64
–
VMCS_GUEST_TR_BASE
, 0x0 );

277 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_CS_LIMIT
, 0x0000FFFF );

278 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_ES_LIMIT
, 0x0000FFFF );

279 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_SS_LIMIT
, 0x0000FFFF );

280 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_DS_LIMIT
, 0x0000FFFF );

281 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_FS_LIMIT
, 0x0000FFFF );

282 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_GS_LIMIT
, 0x0000FFFF );

283 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_LDTR_LIMIT
, 0x0000FFFF );

284 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_TR_LIMIT
, 0xFFFFF );

285 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_GDTR_LIMIT
, 0x30 );

286 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_IDTR_LIMIT
, 0x3FF );

288 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_CS_ACCESS_RIGHTS
, 0x93 );

289 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_ES_ACCESS_RIGHTS
, 0x93 );

290 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_SS_ACCESS_RIGHTS
, 0x93 );

291 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_DS_ACCESS_RIGHTS
, 0x93 );

292 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_FS_ACCESS_RIGHTS
, 0x93 );

293 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_GS_ACCESS_RIGHTS
, 0x93 );

294 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_LDTR_ACCESS_RIGHTS
, 0x82 );

295 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_TR_ACCESS_RIGHTS
, 0x8b );

297 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_ACTIVITY_STATE
, 0 );

298 
	`vmcs_wrôe32
–
VMCS_32BIT_GUEST_INTERRUPTIBILITY_STATE
, 0 );

300 
	`vmcs_wrôe64
–
VMCS_GUEST_CR3
, 0 );

301 
	`vmcs_wrôe64
–
VMCS_GUEST_CR0
, 
CR0_NE
 );

303 
	`vmcs_wrôe64
–
VMCS_GUEST_CR4
, 
CR4_VMXE
 );

305 
	`vmcs_wrôe64
–
VMCS_64BIT_GUEST_LINK_POINTER
, 0xffffffff );

306 
	`vmcs_wrôe64
–
VMCS_64BIT_GUEST_LINK_POINTER_HI
, 0xffffffff );

307 
	`vmcs_wrôe64
–
VMCS_GUEST_DR7
, 0x0 );

308 
	`vmcs_wrôe64
–
VMCS_GUEST_RFLAGS
, 0x2 );

310 
	}
}

312 
	$vmx_ªad_ˇ∑bûôy_m§
–
uöt32_t
 
m§
, uöt32_t* 
hi
, uöt32_t* 
lo
 ) {

313 
uöt64_t
 
m§_vÆ
 = 
	`ªad_m§
–
m§
 );

314 *
hi
 = (
uöt32_t
)–
m§_vÆ
 >> 32 );

315 *
lo
 = (
uöt32_t
)–
m§_vÆ
 );

316 
	}
}

319 
	$vmcs_˘ls_öô
–
Env
* 
e
 ) {

321 
uöt32_t
 
pöba£d_˘ls_‹
, 
pöba£d_˘ls_™d
;

322 
	`vmx_ªad_ˇ∑bûôy_m§
–
IA32_VMX_PINBASED_CTLS
,

323 &
pöba£d_˘ls_™d
, &
pöba£d_˘ls_‹
 );

326 
pöba£d_˘ls_‹
 |
VMCS_PIN_BASED_VMEXEC_CTL_EXINTEXIT
;

327 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_PIN_BASED_EXEC_CONTROLS
,

328 
pöba£d_˘ls_‹
 & 
pöba£d_˘ls_™d
 );

331 
uöt32_t
 
¥ocba£d_˘ls_‹
, 
¥ocba£d_˘ls_™d
;

332 
	`vmx_ªad_ˇ∑bûôy_m§
–
IA32_VMX_PROCBASED_CTLS
,

333 &
¥ocba£d_˘ls_™d
, &
¥ocba£d_˘ls_‹
 );

335 
	`as£π
–
	`BIT
–
¥ocba£d_˘ls_™d
, 31 ) == 0x1 );

337 
¥ocba£d_˘ls_‹
 |
VMCS_PROC_BASED_VMEXEC_CTL_ACTIVESECCTL
;

338 
¥ocba£d_˘ls_‹
 |
VMCS_PROC_BASED_VMEXEC_CTL_HLTEXIT
;

339 
¥ocba£d_˘ls_‹
 |
VMCS_PROC_BASED_VMEXEC_CTL_USEIOBMP
;

342 
¥ocba£d_˘ls_‹
 &~–
VMCS_PROC_BASED_VMEXEC_CTL_CR3LOADEXIT
 |

343 
VMCS_PROC_BASED_VMEXEC_CTL_CR3STOREXIT
 |

344 
VMCS_PROC_BASED_VMEXEC_CTL_INVLPGEXIT
 );

346 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS
,

347 
¥ocba£d_˘ls_‹
 & 
¥ocba£d_˘ls_™d
 );

350 
uöt32_t
 
¥ocba£d_˘ls2_‹
, 
¥ocba£d_˘ls2_™d
;

351 
	`vmx_ªad_ˇ∑bûôy_m§
–
IA32_VMX_PROCBASED_CTLS2
,

352 &
¥ocba£d_˘ls2_™d
, &
¥ocba£d_˘ls2_‹
 );

355 
¥ocba£d_˘ls2_‹
 |
VMCS_SECONDARY_VMEXEC_CTL_ENABLE_EPT
;

356 
¥ocba£d_˘ls2_‹
 |
VMCS_SECONDARY_VMEXEC_CTL_UNRESTRICTED_GUEST
;

357 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_SECONDARY_VMEXEC_CONTROLS
,

358 
¥ocba£d_˘ls2_‹
 & 
¥ocba£d_˘ls2_™d
 );

361 
uöt32_t
 
exô_˘ls_‹
, 
exô_˘ls_™d
;

362 
	`vmx_ªad_ˇ∑bûôy_m§
–
IA32_VMX_EXIT_CTLS
,

363 &
exô_˘ls_™d
, &
exô_˘ls_‹
 );

365 
exô_˘ls_‹
 |
VMCS_VMEXIT_HOST_ADDR_SIZE
;

366 
exô_˘ls_‹
 |
VMCS_VMEXIT_GUEST_ACK_INTR_ON_EXIT
;

367 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMEXIT_CONTROLS
,

368 
exô_˘ls_‹
 & 
exô_˘ls_™d
 );

370 
	`vmcs_wrôe64
–
VMCS_64BIT_CONTROL_VMEXIT_MSR_STORE_ADDR
,

371 
	`PADDR
(
e
->
ív_vmxöfo
.
m§_gue°_¨ó
));

372 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMEXIT_MSR_STORE_COUNT
,

373 
e
->
ív_vmxöfo
.
m§_cou¡
);

374 
	`vmcs_wrôe64
–
VMCS_64BIT_CONTROL_VMEXIT_MSR_LOAD_ADDR
,

375 
	`PADDR
(
e
->
ív_vmxöfo
.
m§_ho°_¨ó
));

376 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMEXIT_MSR_LOAD_COUNT
,

377 
e
->
ív_vmxöfo
.
m§_cou¡
);

380 
uöt32_t
 
íåy_˘ls_‹
, 
íåy_˘ls_™d
;

381 
	`vmx_ªad_ˇ∑bûôy_m§
–
IA32_VMX_ENTRY_CTLS
,

382 &
íåy_˘ls_™d
, &
íåy_˘ls_‹
 );

384 
	`vmcs_wrôe64
–
VMCS_64BIT_CONTROL_VMENTRY_MSR_LOAD_ADDR
,

385 
	`PADDR
(
e
->
ív_vmxöfo
.
m§_gue°_¨ó
));

386 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMENTRY_MSR_LOAD_COUNT
,

387 
e
->
ív_vmxöfo
.
m§_cou¡
);

389 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_VMENTRY_CONTROLS
,

390 
íåy_˘ls_‹
 & 
íåy_˘ls_™d
 );

392 
uöt64_t
 
ït_±r
 = 
e
->
ív_¸3
 | ( ( 
EPT_LEVELS
 - 1 ) << 3 );

393 
	`vmcs_wrôe64
–
VMCS_64BIT_CONTROL_EPTPTR
, 
ït_±r
 );

395 
	`vmcs_wrôe32
–
VMCS_32BIT_CONTROL_EXCEPTION_BITMAP
,

396 
e
->
ív_vmxöfo
.
ex˚±i⁄_bm≠
);

397 
	`vmcs_wrôe64
–
VMCS_64BIT_CONTROL_IO_BITMAP_A
,

398 
	`PADDR
(
e
->
ív_vmxöfo
.
io_bm≠_a
));

399 
	`vmcs_wrôe64
–
VMCS_64BIT_CONTROL_IO_BITMAP_B
,

400 
	`PADDR
(
e
->
ív_vmxöfo
.
io_bm≠_b
));

402 
	}
}

404 
	$vmcs_dump_˝u
() {

405 
uöt64_t
 
Êags
 = 
	`vmcs_ªadl
(
VMCS_GUEST_RFLAGS
);

408 
	`˝rötf
( "vmx: --- Begin VCPU Dump ---\n");

409 
	`˝rötf
( "vmx: RIP 0x%016llx RSP 0x%016llx RFLAGS 0x%016llx\n",

410 
	`vmcs_ªad64
–
VMCS_GUEST_RIP
 ) , vmcs_ªad64–
VMCS_GUEST_RSP
 ), 
Êags
);

411 
	`˝rötf
( "vmx: CR0 0x%016llx CR3 0x%016llx\n",

412 
	`vmcs_ªad64
–
VMCS_GUEST_CR0
 ), vmcs_ªad64–
VMCS_GUEST_CR3
 ) );

413 
	`˝rötf
( "vmx: CR4 0x%016llx \n",

414 
	`vmcs_ªad64
–
VMCS_GUEST_CR4
 ) );

416 
	`˝rötf
( "vmx: --- End VCPU Dump ---\n");

418 
	}
}

420 
	$vmexô
() {

421 
exô_ªas⁄
 = -1;

422 
boﬁ
 
exô_h™dÀd
 = 
Ál£
;

423 
uöt32_t
 
ho°_ve˘‹
;

431 
exô_ªas⁄
 & 
EXIT_REASON_MASK
) {

432 
EXIT_REASON_EXTERNAL_INT
:

433 
ho°_ve˘‹
 = 
	`vmcs_ªad32
(
VMCS_32BIT_VMEXIT_INTERRUPTION_INFO
);

434 
exô_h™dÀd
 = 
	`h™dÀ_öãºu±s
(&
cuªnv
->
ív_tf
, &cuªnv->
ív_vmxöfo
, 
ho°_ve˘‹
);

436 
EXIT_REASON_INTERRUPT_WINDOW
:

437 
exô_h™dÀd
 = 
	`h™dÀ_öãºu±_wödow
(&
cuªnv
->
ív_tf
, &cuªnv->
ív_vmxöfo
, 
ho°_ve˘‹
);

439 
EXIT_REASON_RDMSR
:

440 
exô_h™dÀd
 = 
	`h™dÀ_rdm§
(&
cuªnv
->
ív_tf
, &cuªnv->
ív_vmxöfo
);

442 
EXIT_REASON_WRMSR
:

443 
exô_h™dÀd
 = 
	`h™dÀ_wrm§
(&
cuªnv
->
ív_tf
, &cuªnv->
ív_vmxöfo
);

445 
EXIT_REASON_EPT_VIOLATION
:

446 
exô_h™dÀd
 = 
	`h™dÀ_ïtviﬁ©i⁄
(
cuªnv
->
ív_pml4e
, &cuªnv->
ív_vmxöfo
);

448 
EXIT_REASON_IO_INSTRUCTION
:

449 
exô_h™dÀd
 = 
	`h™dÀ_ioö°r
(&
cuªnv
->
ív_tf
, &cuªnv->
ív_vmxöfo
);

451 
EXIT_REASON_CPUID
:

452 
exô_h™dÀd
 = 
	`h™dÀ_˝uid
(&
cuªnv
->
ív_tf
, &cuªnv->
ív_vmxöfo
);

454 
EXIT_REASON_VMCALL
:

455 
exô_h™dÀd
 = 
	`h™dÀ_vmˇŒ
(&
cuªnv
->
ív_tf
, &cuªnv->
ív_vmxöfo
,

456 
cuªnv
->
ív_pml4e
);

459 
EXIT_REASON_HLT
:

460 
	`˝rötf
("\nHLT in guest,Éxiting guest.\n");

461 
	`ív_de°roy
(
cuªnv
);

462 
exô_h™dÀd
 = 
åue
;

466 if(!
exô_h™dÀd
) {

467 
	`˝rötf
( "Unhandled VMEXIT,áborting guest.\n" );

468 
	`vmcs_dump_˝u
();

469 
	`ív_de°roy
(
cuªnv
);

473 
	`sched_yõld
();

474 
	}
}

476 
	$asm_vmrun
(
Tøp‰ame
 *
tf
) {

481 
tf
->
tf_ds
 = 
cuªnv
->
ív_runs
;

482 
tf
->
tf_es
 = 0;

483 
	`u∆ock_kî√l
();

484 
	`asm
(

547 "" 
ASM_VMX_VMLAUNCH
 "\n\t"

549 "l3: " 
ASM_VMX_VMRESUME
 "\n\t"

585 : : "c"(
tf
), "d"(()
VMCS_HOST_RSP
),

586 [
œunched
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ds
)),

587 [
Áû
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_es
)),

588 [
øx
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_øx
)),

589 [
rbx
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_rbx
)),

590 [
rcx
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_rcx
)),

591 [
rdx
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_rdx
)),

592 [
rsi
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_rsi
)),

593 [
rdi
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_rdi
)),

594 [
rbp
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_rbp
)),

595 [
r8
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r8
)),

596 [
r9
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r9
)),

597 [
r10
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r10
)),

598 [
r11
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r11
)),

599 [
r12
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r12
)),

600 [
r13
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r13
)),

601 [
r14
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r14
)),

602 [
r15
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_ªgs
.
ªg_r15
)),

603 [
¸2
]"i"(
	`off£tof
(
Tøp‰ame
, 
tf_îr
)),

604 [
w‹dsize
]"i"((
uöt64_t
))

609 
	`lock_kî√l
();

610 if(
tf
->
tf_es
) {

611 
	`˝rötf
("Error during VMLAUNCH/VMRESUME\n");

613 
cuªnv
->
ív_tf
.
tf_r•
 = 
	`vmcs_ªad64
(
VMCS_GUEST_RSP
);

614 
cuªnv
->
ív_tf
.
tf_rù
 = 
	`vmcs_ªad64
(
VMCS_GUEST_RIP
);

615 
	`vmexô
();

617 
	}
}

620 
	$m§_£tup
(
VmxGue°Info
 *
göfo
) {

621 
vmx_m§_íåy
 *
íåy
;

622 
uöt32_t
 
idx
[] = { 
EFER_MSR
 };

623 
i
, 
cou¡
 = (
idx
) / (idx[0]);

625 
	`as£π
(
cou¡
 <
MAX_MSR_COUNT
);

626 
göfo
->
m§_cou¡
 = 
cou¡
;

628 
i
=0; i<
cou¡
; ++i) {

629 
íåy
 = ((
vmx_m§_íåy
 *)
göfo
->
m§_ho°_¨ó
Ë+ 
i
;

630 
íåy
->
m§_ödex
 = 
idx
[
i
];

631 
íåy
->
m§_vÆue
 = 
	`ªad_m§
(
idx
[
i
]);

633 
íåy
 = ((
vmx_m§_íåy
 *)
göfo
->
m§_gue°_¨ó
Ë+ 
i
;

634 
íåy
->
m§_ödex
 = 
idx
[
i
];

636 
	}
}

639 
	$bôm≠_£tup
(
VmxGue°Info
 *
göfo
) {

641 
io_p‹ts
[] = { 
IO_RTC
, IO_RTC+1 };

643 
i
, 
cou¡
 = (
io_p‹ts
) / (io_ports[0]);

645 
i
=0; i<
cou¡
; ++i) {

646 
idx
 = 
io_p‹ts
[
i
] / ((
uöt64_t
) * 8);

647 if(
io_p‹ts
[
i
] < 0x7FFF) {

648 
göfo
->
io_bm≠_a
[
idx
] |((0x1uL << (
io_p‹ts
[
i
] & 0x3F)));

649 } i‡(
io_p‹ts
[
i
] < 0xFFFF) {

650 
göfo
->
io_bm≠_b
[
idx
] |((0x1uL << (
io_p‹ts
[
i
] & 0x3F)));

652 
	`as£π
(
Ál£
);

655 
	}
}

660 
	$vmx_vmrun
–
Env
 *
e
 ) {

662 i‡–
e
->
ív_ty≥
 !
ENV_TYPE_GUEST
 ) {

663  -
E_INVAL
;

665 
uöt8_t
 
îr‹
;

667 if–
e
->
ív_runs
 == 1 ) {

668 
phyßddr_t
 
vmcs_phy_addr
 = 
	`PADDR
(
e
->
ív_vmxöfo
.
vmcs
);

671 
îr‹
 = 
	`vm˛ór
(
vmcs_phy_addr
);

673 i‡–
îr‹
 )

674  -
E_VMCS_INIT
;

677 
îr‹
 = 
	`vm±æd
(
vmcs_phy_addr
);

678 i‡–
îr‹
 )

679  -
E_VMCS_INIT
;

681 
	`vmcs_ho°_öô
();

682 
	`vmcs_gue°_öô
();

684 
	`bôm≠_£tup
(&
e
->
ív_vmxöfo
);

686 
	`m§_£tup
(&
e
->
ív_vmxöfo
);

687 
	`vmcs_˘ls_öô
(
e
);

693 
îr‹
 = 
	`vm±æd
(
	`PADDR
(
e
->
ív_vmxöfo
.
vmcs
));

694 i‡–
îr‹
 ) {

695  -
E_VMCS_INIT
;

699 
	`vmcs_wrôe64
–
VMCS_GUEST_RSP
, 
cuªnv
->
ív_tf
.
tf_r•
 );

700 
	`vmcs_wrôe64
–
VMCS_GUEST_RIP
, 
cuªnv
->
ív_tf
.
tf_rù
 );

702 
	`∑nic
 ("asm vmrun incomplete\n");

704 
	`asm_vmrun
–&
e
->
ív_tf
 );

706 
	}
}

	@vmm/vmx.h

3 #i‚de‡
JOS_VMM_VMX_H


4 
	#JOS_VMM_VMX_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/ty≥s.h
>

10 
	~<öc/vmx.h
>

11 
	~<öc/ív.h
>

13 
__ölöe
 
uöt8_t
 
	$vmcs_wrôe16
–
uöt32_t
 
fõld
, 
uöt16_t
 
vÆue
Ë
	`__©åibuã
((
Æways_ölöe
));

14 
__ölöe
 
uöt8_t
 
	$vmcs_wrôe32
–
uöt32_t
 
fõld
, uöt32_à
vÆue
 ) 
	`__©åibuã
((
Æways_ölöe
));

15 
__ölöe
 
uöt8_t
 
	$vmcs_wrôe64
–
uöt32_t
 
fõld
, 
uöt64_t
 
vÆue
 ) 
	`__©åibuã
((
Æways_ölöe
));

16 
__ölöe
 
uöt16_t
 
	$vmcs_ªad16
(
uöt32_t
 
fõld
Ë
	`__©åibuã
((
Æways_ölöe
));

18 
__ölöe
 
uöt32_t
 
	$vmcs_ªad32
(
uöt32_t
 
fõld
Ë
	`__©åibuã
((
Æways_ölöe
));

20 
__ölöe
 
uöt64_t
 
	$vmcs_ªad64
(
uöt32_t
 
fõld
Ë
	`__©åibuã
((
Æways_ölöe
));

23 
	svmx_m§_íåy
 {

24 
uöt32_t
 
m§_ödex
;

25 
uöt32_t
 
ªs
;

26 
uöt64_t
 
m§_vÆue
;

27 } 
	`__©åibuã__
((
__∑cked__
));

29 
boﬁ
 
	`vmx_check_ït
();

30 
boﬁ
 
	`vmx_check_suµ‹t
();

31 
	`vmx_gë_vmdisk_numbî
();

32 
	`vmx_ö¸_vmdisk_numbî
();

33 
	`vmx_öô_vmx⁄
();

34 
	`vmx_vmrun
–
Env
 *
e
 );

35 
	`vmx_li°_vms
();

36 
boﬁ
 
	`vmx_£l_ªsume
(
num
);

37 
PageInfo
 * 
	`vmx_öô_vmcs
();

40 
	#IA32_VMX_BASIC
 0X480

	)

41 
	#IA32_VMX_PINBASED_CTLS
 0X481

	)

42 
	#IA32_VMX_PROCBASED_CTLS
 0X482

	)

43 
	#IA32_VMX_PROCBASED_CTLS2
 0X48B

	)

44 
	#IA32_VMX_EXIT_CTLS
 0X483

	)

45 
	#IA32_VMX_ENTRY_CTLS
 0X484

	)

46 
	#IA32_VMX_MISC
 0x485

	)

47 
	#IA32_VMX_CR0_FIXED0
 0x486

	)

48 
	#IA32_VMX_CR0_FIXED1
 0x487

	)

49 
	#IA32_VMX_CR4_FIXED0
 0x488

	)

50 
	#IA32_VMX_CR4_FIXED1
 0x489

	)

51 
	#IA32_VMX_VMCS_ENUM
 0x48A

	)

52 
	#IA32_VMX_EPT_VPID_CAP
 0x48C

	)

53 
	#IA32_FEATURE_CONTROL
 0x03A

	)

55 
	#BIT
–
vÆ
, 
x
 ) ( ( vÆ >> x ) & 0x1 )

	)

57 
__ölöe
 
uöt8_t
 
	$vmcs_wrôñ
–
uöt32_t
 
fõld
, 
uöt64_t
 
vÆue
) {

58 
uöt8_t
 
îr‹
;

60 
__asm
 
	`__vﬁ©ûe
 ( "clc; vmwrite %%rax, %%rdx; setna %0"

61 : "=q"–
îr‹
 ) : "a"–
vÆue
 ), "d"–
fõld
 ) : "cc");

62  
îr‹
;

63 
	}
}

65 
__ölöe
 
uöt8_t
 
	$vmcs_wrôe16
–
uöt32_t
 
fõld
, 
uöt16_t
 
vÆue
) {

66  
	`vmcs_wrôñ
–
fõld
, 
vÆue
 );

67 
	}
}

69 
__ölöe
 
uöt8_t
 
	$vmcs_wrôe32
–
uöt32_t
 
fõld
, uöt32_à
vÆue
 ) {

70  
	`vmcs_wrôñ
(
fõld
, 
vÆue
);

71 
	}
}

73 
__ölöe
 
uöt8_t
 
	$vmcs_wrôe64
–
uöt32_t
 
fõld
, 
uöt64_t
 
vÆue
 ) {

74  
	`vmcs_wrôñ
–
fõld
, 
vÆue
 );

75 
	}
}

77 
__ölöe
 
uöt64_t
 
	$vmcs_ªadl
(
uöt32_t
 
fõld
)

79 
uöt64_t
 
vÆue
;

81 
__asm
 
	`__vﬁ©ûe
 ( "vmread %%rdx, %%rax;"

82 : "˜"(
vÆue
Ë: "d"(
fõld
) : "cc");

83  
vÆue
;

84 
	}
}

86 
__ölöe
 
uöt16_t
 
	$vmcs_ªad16
(
uöt32_t
 
fõld
)

88  
	`vmcs_ªadl
(
fõld
);

89 
	}
}

91 
__ölöe
 
uöt32_t
 
	$vmcs_ªad32
(
uöt32_t
 
fõld
)

93  
	`vmcs_ªadl
(
fõld
);

94 
	}
}

96 
__ölöe
 
uöt64_t
 
	$vmcs_ªad64
(
uöt32_t
 
fõld
)

98  
	`vmcs_ªadl
(
fõld
);

99 
	}
}

108 
	#VMCS_16BIT_CONTROL_VPID
 0x00000000

	)

109 
	#VMCS_16BIT_CONTROL_POSTED_INTERRUPT_VECTOR
 0x00000002

	)

110 
	#VMCS_16BIT_CONTROL_EPTP_INDEX
 0x00000004

	)

114 
	#VMCS_16BIT_GUEST_ES_SELECTOR
 0x00000800

	)

115 
	#VMCS_16BIT_GUEST_CS_SELECTOR
 0x00000802

	)

116 
	#VMCS_16BIT_GUEST_SS_SELECTOR
 0x00000804

	)

117 
	#VMCS_16BIT_GUEST_DS_SELECTOR
 0x00000806

	)

118 
	#VMCS_16BIT_GUEST_FS_SELECTOR
 0x00000808

	)

119 
	#VMCS_16BIT_GUEST_GS_SELECTOR
 0x0000080A

	)

120 
	#VMCS_16BIT_GUEST_LDTR_SELECTOR
 0x0000080C

	)

121 
	#VMCS_16BIT_GUEST_TR_SELECTOR
 0x0000080E

	)

122 
	#VMCS_16BIT_GUEST_INTERRUPT_STATUS
 0x00000810

	)

126 
	#VMCS_16BIT_HOST_ES_SELECTOR
 0x00000C00

	)

127 
	#VMCS_16BIT_HOST_CS_SELECTOR
 0x00000C02

	)

128 
	#VMCS_16BIT_HOST_SS_SELECTOR
 0x00000C04

	)

129 
	#VMCS_16BIT_HOST_DS_SELECTOR
 0x00000C06

	)

130 
	#VMCS_16BIT_HOST_FS_SELECTOR
 0x00000C08

	)

131 
	#VMCS_16BIT_HOST_GS_SELECTOR
 0x00000C0A

	)

132 
	#VMCS_16BIT_HOST_TR_SELECTOR
 0x00000C0C

	)

136 
	#VMCS_64BIT_CONTROL_IO_BITMAP_A
 0x00002000

	)

137 
	#VMCS_64BIT_CONTROL_IO_BITMAP_A_HI
 0x00002001

	)

138 
	#VMCS_64BIT_CONTROL_IO_BITMAP_B
 0x00002002

	)

139 
	#VMCS_64BIT_CONTROL_IO_BITMAP_B_HI
 0x00002003

	)

140 
	#VMCS_64BIT_CONTROL_MSR_BITMAPS
 0x00002004

	)

141 
	#VMCS_64BIT_CONTROL_MSR_BITMAPS_HI
 0x00002005

	)

142 
	#VMCS_64BIT_CONTROL_VMEXIT_MSR_STORE_ADDR
 0x00002006

	)

143 
	#VMCS_64BIT_CONTROL_VMEXIT_MSR_STORE_ADDR_HI
 0x00002007

	)

144 
	#VMCS_64BIT_CONTROL_VMEXIT_MSR_LOAD_ADDR
 0x00002008

	)

145 
	#VMCS_64BIT_CONTROL_VMEXIT_MSR_LOAD_ADDR_HI
 0x00002009

	)

146 
	#VMCS_64BIT_CONTROL_VMENTRY_MSR_LOAD_ADDR
 0x0000200A

	)

147 
	#VMCS_64BIT_CONTROL_VMENTRY_MSR_LOAD_ADDR_HI
 0x0000200B

	)

148 
	#VMCS_64BIT_CONTROL_EXECUTIVE_VMCS_PTR
 0x0000200C

	)

149 
	#VMCS_64BIT_CONTROL_EXECUTIVE_VMCS_PTR_HI
 0x0000200D

	)

150 
	#VMCS_64BIT_CONTROL_TSC_OFFSET
 0x00002010

	)

151 
	#VMCS_64BIT_CONTROL_TSC_OFFSET_HI
 0x00002011

	)

152 
	#VMCS_64BIT_CONTROL_VIRTUAL_APIC_PAGE_ADDR
 0x00002012

	)

153 
	#VMCS_64BIT_CONTROL_VIRTUAL_APIC_PAGE_ADDR_HI
 0x00002013

	)

154 
	#VMCS_64BIT_CONTROL_APIC_ACCESS_ADDR
 0x00002014

	)

155 
	#VMCS_64BIT_CONTROL_APIC_ACCESS_ADDR_HI
 0x00002015

	)

156 
	#VMCS_64BIT_CONTROL_POSTED_INTERRUPT_DESC_ADDR
 0x00002016

	)

157 
	#VMCS_64BIT_CONTROL_POSTED_INTERRUPT_DESC_ADDR_HI
 0x00002017

	)

158 
	#VMCS_64BIT_CONTROL_VMFUNC_CTRLS
 0x00002018

	)

159 
	#VMCS_64BIT_CONTROL_VMFUNC_CTRLS_HI
 0x00002019

	)

160 
	#VMCS_64BIT_CONTROL_EPTPTR
 0x0000201A

	)

161 
	#VMCS_64BIT_CONTROL_EPTPTR_HI
 0x0000201B

	)

162 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP0
 0x0000201C

	)

163 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP0_HI
 0x0000201D

	)

164 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP1
 0x0000201E

	)

165 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP1_HI
 0x0000201F

	)

166 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP2
 0x00002020

	)

167 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP2_HI
 0x00002021

	)

168 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP3
 0x00002022

	)

169 
	#VMCS_64BIT_CONTROL_EOI_EXIT_BITMAP3_HI
 0x00002023

	)

170 
	#VMCS_64BIT_CONTROL_EPTP_LIST_ADDRESS
 0x00002024

	)

171 
	#VMCS_64BIT_CONTROL_EPTP_LIST_ADDRESS_HI
 0x00002025

	)

172 
	#VMCS_64BIT_CONTROL_VMREAD_BITMAP_ADDR
 0x00002026

	)

173 
	#VMCS_64BIT_CONTROL_VMREAD_BITMAP_ADDR_HI
 0x00002027

	)

174 
	#VMCS_64BIT_CONTROL_VMWRITE_BITMAP_ADDR
 0x00002028

	)

175 
	#VMCS_64BIT_CONTROL_VMWRITE_BITMAP_ADDR_HI
 0x00002029

	)

176 
	#VMCS_64BIT_CONTROL_VE_EXCEPTION_INFO_ADDR
 0x0000202A

	)

177 
	#VMCS_64BIT_CONTROL_VE_EXCEPTION_INFO_ADDR_HI
 0x0000202B

	)

181 
	#VMCS_64BIT_GUEST_PHYSICAL_ADDR
 0x00002400

	)

182 
	#VMCS_64BIT_GUEST_PHYSICAL_ADDR_HI
 0x00002401

	)

186 
	#VMCS_64BIT_GUEST_LINK_POINTER
 0x00002800

	)

187 
	#VMCS_64BIT_GUEST_LINK_POINTER_HI
 0x00002801

	)

188 
	#VMCS_64BIT_GUEST_IA32_DEBUGCTL
 0x00002802

	)

189 
	#VMCS_64BIT_GUEST_IA32_DEBUGCTL_HI
 0x00002803

	)

190 
	#VMCS_64BIT_GUEST_IA32_PAT
 0x00002804

	)

191 
	#VMCS_64BIT_GUEST_IA32_PAT_HI
 0x00002805

	)

192 
	#VMCS_64BIT_GUEST_IA32_EFER
 0x00002806

	)

193 
	#VMCS_64BIT_GUEST_IA32_EFER_HI
 0x00002807

	)

194 
	#VMCS_64BIT_GUEST_IA32_PERF_GLOBAL_CTRL
 0x00002808

	)

195 
	#VMCS_64BIT_GUEST_IA32_PERF_GLOBAL_CTRL_HI
 0x00002809

	)

196 
	#VMCS_64BIT_GUEST_IA32_PDPTE0
 0x0000280A

	)

197 
	#VMCS_64BIT_GUEST_IA32_PDPTE0_HI
 0x0000280B

	)

198 
	#VMCS_64BIT_GUEST_IA32_PDPTE1
 0x0000280C

	)

199 
	#VMCS_64BIT_GUEST_IA32_PDPTE1_HI
 0x0000280D

	)

200 
	#VMCS_64BIT_GUEST_IA32_PDPTE2
 0x0000280E

	)

201 
	#VMCS_64BIT_GUEST_IA32_PDPTE2_HI
 0x0000280F

	)

202 
	#VMCS_64BIT_GUEST_IA32_PDPTE3
 0x00002810

	)

203 
	#VMCS_64BIT_GUEST_IA32_PDPTE3_HI
 0x00002811

	)

207 
	#VMCS_64BIT_HOST_IA32_PAT
 0x00002C00

	)

208 
	#VMCS_64BIT_HOST_IA32_PAT_HI
 0x00002C01

	)

209 
	#VMCS_64BIT_HOST_IA32_EFER
 0x00002C02

	)

210 
	#VMCS_64BIT_HOST_IA32_EFER_HI
 0x00002C03

	)

211 
	#VMCS_64BIT_HOST_IA32_PERF_GLOBAL_CTRL
 0x00002C04

	)

212 
	#VMCS_64BIT_HOST_IA32_PERF_GLOBAL_CTRL_HI
 0x00002C05

	)

216 
	#VMCS_32BIT_CONTROL_PIN_BASED_EXEC_CONTROLS
 0x00004000

	)

217 
	#VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS
 0x00004002

	)

218 
	#VMCS_32BIT_CONTROL_EXCEPTION_BITMAP
 0x00004004

	)

219 
	#VMCS_32BIT_CONTROL_PAGE_FAULT_ERR_CODE_MASK
 0x00004006

	)

220 
	#VMCS_32BIT_CONTROL_PAGE_FAULT_ERR_CODE_MATCH
 0x00004008

	)

221 
	#VMCS_32BIT_CONTROL_CR3_TARGET_COUNT
 0x0000400A

	)

222 
	#VMCS_32BIT_CONTROL_VMEXIT_CONTROLS
 0x0000400C

	)

223 
	#VMCS_32BIT_CONTROL_VMEXIT_MSR_STORE_COUNT
 0x0000400E

	)

224 
	#VMCS_32BIT_CONTROL_VMEXIT_MSR_LOAD_COUNT
 0x00004010

	)

225 
	#VMCS_32BIT_CONTROL_VMENTRY_CONTROLS
 0x00004012

	)

226 
	#VMCS_32BIT_CONTROL_VMENTRY_MSR_LOAD_COUNT
 0x00004014

	)

227 
	#VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO
 0x00004016

	)

228 
	#VMCS_32BIT_CONTROL_VMENTRY_EXCEPTION_ERR_CODE
 0x00004018

	)

229 
	#VMCS_32BIT_CONTROL_VMENTRY_INSTRUCTION_LENGTH
 0x0000401A

	)

230 
	#VMCS_32BIT_CONTROL_TPR_THRESHOLD
 0x0000401C

	)

231 
	#VMCS_32BIT_CONTROL_SECONDARY_VMEXEC_CONTROLS
 0x0000401E

	)

232 
	#VMCS_32BIT_CONTROL_PAUSE_LOOP_EXITING_GAP
 0x00004020

	)

233 
	#VMCS_32BIT_CONTROL_PAUSE_LOOP_EXITING_WINDOW
 0x00004022

	)

237 
	#VMCS_32BIT_INSTRUCTION_ERROR
 0x00004400

	)

238 
	#VMCS_32BIT_VMEXIT_REASON
 0x00004402

	)

239 
	#VMCS_32BIT_VMEXIT_INTERRUPTION_INFO
 0x00004404

	)

240 
	#VMCS_32BIT_VMEXIT_INTERRUPTION_ERR_CODE
 0x00004406

	)

241 
	#VMCS_32BIT_IDT_VECTORING_INFO
 0x00004408

	)

242 
	#VMCS_32BIT_IDT_VECTORING_ERR_CODE
 0x0000440A

	)

243 
	#VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH
 0x0000440C

	)

244 
	#VMCS_32BIT_VMEXIT_INSTRUCTION_INFO
 0x0000440E

	)

248 
	#VMCS_32BIT_GUEST_ES_LIMIT
 0x00004800

	)

249 
	#VMCS_32BIT_GUEST_CS_LIMIT
 0x00004802

	)

250 
	#VMCS_32BIT_GUEST_SS_LIMIT
 0x00004804

	)

251 
	#VMCS_32BIT_GUEST_DS_LIMIT
 0x00004806

	)

252 
	#VMCS_32BIT_GUEST_FS_LIMIT
 0x00004808

	)

253 
	#VMCS_32BIT_GUEST_GS_LIMIT
 0x0000480A

	)

254 
	#VMCS_32BIT_GUEST_LDTR_LIMIT
 0x0000480C

	)

255 
	#VMCS_32BIT_GUEST_TR_LIMIT
 0x0000480E

	)

256 
	#VMCS_32BIT_GUEST_GDTR_LIMIT
 0x00004810

	)

257 
	#VMCS_32BIT_GUEST_IDTR_LIMIT
 0x00004812

	)

258 
	#VMCS_32BIT_GUEST_ES_ACCESS_RIGHTS
 0x00004814

	)

259 
	#VMCS_32BIT_GUEST_CS_ACCESS_RIGHTS
 0x00004816

	)

260 
	#VMCS_32BIT_GUEST_SS_ACCESS_RIGHTS
 0x00004818

	)

261 
	#VMCS_32BIT_GUEST_DS_ACCESS_RIGHTS
 0x0000481A

	)

262 
	#VMCS_32BIT_GUEST_FS_ACCESS_RIGHTS
 0x0000481C

	)

263 
	#VMCS_32BIT_GUEST_GS_ACCESS_RIGHTS
 0x0000481E

	)

264 
	#VMCS_32BIT_GUEST_LDTR_ACCESS_RIGHTS
 0x00004820

	)

265 
	#VMCS_32BIT_GUEST_TR_ACCESS_RIGHTS
 0x00004822

	)

266 
	#VMCS_32BIT_GUEST_INTERRUPTIBILITY_STATE
 0x00004824

	)

267 
	#VMCS_32BIT_GUEST_ACTIVITY_STATE
 0x00004826

	)

268 
	#VMCS_32BIT_GUEST_SMBASE
 0x00004828

	)

269 
	#VMCS_32BIT_GUEST_IA32_SYSENTER_CS_MSR
 0x0000482A

	)

270 
	#VMCS_32BIT_GUEST_PREEMPTION_TIMER_VALUE
 0x0000482E

	)

274 
	#VMCS_32BIT_HOST_IA32_SYSENTER_CS_MSR
 0x00004C00

	)

278 
	#VMCS_CONTROL_CR0_GUEST_HOST_MASK
 0x00006000

	)

279 
	#VMCS_CONTROL_CR4_GUEST_HOST_MASK
 0x00006002

	)

280 
	#VMCS_CONTROL_CR0_READ_SHADOW
 0x00006004

	)

281 
	#VMCS_CONTROL_CR4_READ_SHADOW
 0x00006006

	)

282 
	#VMCS_CR3_TARGET0
 0x00006008

	)

283 
	#VMCS_CR3_TARGET1
 0x0000600A

	)

284 
	#VMCS_CR3_TARGET2
 0x0000600C

	)

285 
	#VMCS_CR3_TARGET3
 0x0000600E

	)

289 
	#VMCS_VMEXIT_QUALIFICATION
 0x00006400

	)

290 
	#VMCS_IO_RCX
 0x00006402

	)

291 
	#VMCS_IO_RSI
 0x00006404

	)

292 
	#VMCS_IO_RDI
 0x00006406

	)

293 
	#VMCS_IO_RIP
 0x00006408

	)

294 
	#VMCS_GUEST_LINEAR_ADDR
 0x0000640A

	)

298 
	#VMCS_GUEST_CR0
 0x00006800

	)

299 
	#VMCS_GUEST_CR3
 0x00006802

	)

300 
	#VMCS_GUEST_CR4
 0x00006804

	)

301 
	#VMCS_GUEST_ES_BASE
 0x00006806

	)

302 
	#VMCS_GUEST_CS_BASE
 0x00006808

	)

303 
	#VMCS_GUEST_SS_BASE
 0x0000680A

	)

304 
	#VMCS_GUEST_DS_BASE
 0x0000680C

	)

305 
	#VMCS_GUEST_FS_BASE
 0x0000680E

	)

306 
	#VMCS_GUEST_GS_BASE
 0x00006810

	)

307 
	#VMCS_GUEST_LDTR_BASE
 0x00006812

	)

308 
	#VMCS_GUEST_TR_BASE
 0x00006814

	)

309 
	#VMCS_GUEST_GDTR_BASE
 0x00006816

	)

310 
	#VMCS_GUEST_IDTR_BASE
 0x00006818

	)

311 
	#VMCS_GUEST_DR7
 0x0000681A

	)

312 
	#VMCS_GUEST_RSP
 0x0000681C

	)

313 
	#VMCS_GUEST_RIP
 0x0000681E

	)

314 
	#VMCS_GUEST_RFLAGS
 0x00006820

	)

315 
	#VMCS_GUEST_PENDING_DBG_EXCEPTIONS
 0x00006822

	)

316 
	#VMCS_GUEST_IA32_SYSENTER_ESP_MSR
 0x00006824

	)

317 
	#VMCS_GUEST_IA32_SYSENTER_EIP_MSR
 0x00006826

	)

321 
	#VMCS_HOST_CR0
 0x00006C00

	)

322 
	#VMCS_HOST_CR3
 0x00006C02

	)

323 
	#VMCS_HOST_CR4
 0x00006C04

	)

324 
	#VMCS_HOST_FS_BASE
 0x00006C06

	)

325 
	#VMCS_HOST_GS_BASE
 0x00006C08

	)

326 
	#VMCS_HOST_TR_BASE
 0x00006C0A

	)

327 
	#VMCS_HOST_GDTR_BASE
 0x00006C0C

	)

328 
	#VMCS_HOST_IDTR_BASE
 0x00006C0E

	)

329 
	#VMCS_HOST_IA32_SYSENTER_ESP_MSR
 0x00006C10

	)

330 
	#VMCS_HOST_IA32_SYSENTER_EIP_MSR
 0x00006C12

	)

331 
	#VMCS_HOST_RSP
 0x00006C14

	)

332 
	#VMCS_HOST_RIP
 0x00006C16

	)

336 
	#VMCS_PIN_BASED_VMEXEC_CTL_EXINTEXIT
 0x1

	)

337 
	#VMCS_PIN_BASED_VMEXEC_CTL_NMIEXIT
 0x8

	)

338 
	#VMCS_PIN_BASED_VMEXEC_CTL_VIRTNMIS
 0x20

	)

340 
	#VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT
 0x4

	)

341 
	#VMCS_PROC_BASED_VMEXEC_CTL_USETSCOFF
 0x8

	)

342 
	#VMCS_PROC_BASED_VMEXEC_CTL_HLTEXIT
 0x80

	)

343 
	#VMCS_PROC_BASED_VMEXEC_CTL_INVLPGEXIT
 0x200

	)

344 
	#VMCS_PROC_BASED_VMEXEC_CTL_MWAITEXIT
 0x400

	)

345 
	#VMCS_PROC_BASED_VMEXEC_CTL_RDPMCEXIT
 0x800

	)

346 
	#VMCS_PROC_BASED_VMEXEC_CTL_RDTSCEXIT
 0x1000

	)

347 
	#VMCS_PROC_BASED_VMEXEC_CTL_CR3LOADEXIT
 0x8000

	)

348 
	#VMCS_PROC_BASED_VMEXEC_CTL_CR3STOREXIT
 0x10000

	)

349 
	#VMCS_PROC_BASED_VMEXEC_CTL_CR8LOADEXIT
 0x80000

	)

350 
	#VMCS_PROC_BASED_VMEXEC_CTL_CR8STOREEXIT
 0x100000

	)

351 
	#VMCS_PROC_BASED_VMEXEC_CTL_USETPRSHADOW
 0x200000

	)

352 
	#VMCS_PROC_BASED_VMEXEC_CTL_NMIWINEXIT
 0x400000

	)

353 
	#VMCS_PROC_BASED_VMEXEC_CTL_MOVDREXIT
 0x800000

	)

354 
	#VMCS_PROC_BASED_VMEXEC_CTL_UNCONDIOEXIT
 0x1000000

	)

355 
	#VMCS_PROC_BASED_VMEXEC_CTL_USEIOBMP
 0x2000000

	)

356 
	#VMCS_PROC_BASED_VMEXEC_CTL_MTF
 0x8000000

	)

357 
	#VMCS_PROC_BASED_VMEXEC_CTL_USEMSRBMP
 0x10000000

	)

358 
	#VMCS_PROC_BASED_VMEXEC_CTL_MONITOREXIT
 0x20000000

	)

359 
	#VMCS_PROC_BASED_VMEXEC_CTL_PAUSEEXIT
 0x40000000

	)

360 
	#VMCS_PROC_BASED_VMEXEC_CTL_ACTIVESECCTL
 0x80000000

	)

362 
	#VMCS_SECONDARY_VMEXEC_CTL_ENABLE_EPT
 0x2

	)

363 
	#VMCS_SECONDARY_VMEXEC_CTL_UNRESTRICTED_GUEST
 0x80

	)

365 
	#VMCS_VMEXIT_HOST_ADDR_SIZE
 ( 0x1 << 9 )

	)

366 
	#VMCS_VMEXIT_GUEST_ACK_INTR_ON_EXIT
 ( 0x1 << 15 )

	)

368 
	#VMCS_VMENTRY_x64_GUEST
 ( 0x1 << 9 )

	)

371 
	#EXIT_REASON_MASK
 0xFFFF

	)

373 
	#EXIT_REASON_EXCEPTION_OR_NMI
 0x0

	)

374 
	#EXIT_REASON_EXTERNAL_INT
 0x1

	)

375 
	#EXIT_REASON_TRIPLE_FAULT
 0x2

	)

376 
	#EXIT_REASON_INIT_SIGNAL
 0x3

	)

377 
	#EXIT_REASON_STARTUP_IPI
 0x4

	)

378 
	#EXIT_REASON_IO_SMI
 0x5

	)

379 
	#EXIT_REASON_OTHER_SMI
 0x6

	)

380 
	#EXIT_REASON_INTERRUPT_WINDOW
 0x7

	)

381 
	#EXIT_REASON_TASK_SWITCH
 0x9

	)

382 
	#EXIT_REASON_CPUID
 0xA

	)

383 
	#EXIT_REASON_HLT
 0xC

	)

384 
	#EXIT_REASON_INVD
 0xD

	)

385 
	#EXIT_REASON_INVLPG
 0xE

	)

386 
	#EXIT_REASON_RDPMC
 0xF

	)

387 
	#EXIT_REASON_RDTSC
 0x10

	)

388 
	#EXIT_REASON_RSM
 0x11

	)

389 
	#EXIT_REASON_VMCALL
 0x12

	)

390 
	#EXIT_REASON_VMCLEAR
 0x13

	)

391 
	#EXIT_REASON_VMLAUNCH
 0x14

	)

392 
	#EXIT_REASON_VMPTRLD
 0x15

	)

393 
	#EXIT_REASON_VMPTRST
 0x16

	)

394 
	#EXIT_REASON_VMREAD
 0x17

	)

395 
	#EXIT_REASON_VMRESUME
 0x18

	)

396 
	#EXIT_REASON_VMWRITE
 0x19

	)

397 
	#EXIT_REASON_VMXOFF
 0x1A

	)

398 
	#EXIT_REASON_VMXON
 0x1B

	)

399 
	#EXIT_REASON_MOV_CR
 0x1C

	)

400 
	#EXIT_REASON_MOV_DR
 0x1D

	)

401 
	#EXIT_REASON_IO_INSTRUCTION
 0x1E

	)

402 
	#EXIT_REASON_RDMSR
 0x1F

	)

403 
	#EXIT_REASON_WRMSR
 0x20

	)

404 
	#EXIT_REASON_ENTFAIL_GUEST_STATE
 0x21

	)

405 
	#EXIT_REASON_ENTFAIL_MSR_LOADING
 0x22

	)

406 
	#EXIT_REASON_MWAIT
 0x24

	)

407 
	#EXIT_REASON_MTF
 0x25

	)

408 
	#EXIT_REASON_MONITOR
 0x27

	)

409 
	#EXIT_REASON_PAUSE
 0x28

	)

410 
	#EXIT_REASON_ENTFAIL_MACHINE_CHK
 0x29

	)

411 
	#EXIT_REASON_TPR_BELOW_THRESHOLD
 0x2B

	)

412 
	#EXIT_REASON_VMEXIT_FROM_VMX_ROOT_OPERATION_BIT
 0x20000000

	)

413 
	#EXIT_REASON_VMENTRY_FAILURE_BIT
 0x80000000

	)

414 
	#EXIT_REASON_APIC_ACCESS
 0x2C

	)

415 
	#EXIT_REASON_ACCESS_GDTR_OR_IDTR
 0x2E

	)

416 
	#EXIT_REASON_ACCESS_LDTR_OR_TR
 0x2F

	)

417 
	#EXIT_REASON_EPT_VIOLATION
 0x30

	)

418 
	#EXIT_REASON_EPT_MISCONFIG
 0x31

	)

419 
	#EXIT_REASON_INVEPT
 0x32

	)

420 
	#EXIT_REASON_RDTSCP
 0x33

	)

421 
	#EXIT_REASON_VMX_PREEMPT_TIMER
 0x34

	)

422 
	#EXIT_REASON_INVVPID
 0x35

	)

423 
	#EXIT_REASON_WBINVD
 0x36

	)

424 
	#EXIT_REASON_XSETBV
 0x37

	)

426 
	#VMEXIT_CR0_READ
 0x0

	)

427 
	#VMEXIT_CR1_READ
 0x1

	)

428 
	#VMEXIT_CR2_READ
 0x2

	)

429 
	#VMEXIT_CR3_READ
 0x3

	)

430 
	#VMEXIT_CR4_READ
 0x4

	)

431 
	#VMEXIT_CR5_READ
 0x5

	)

432 
	#VMEXIT_CR6_READ
 0x6

	)

433 
	#VMEXIT_CR7_READ
 0x7

	)

434 
	#VMEXIT_CR8_READ
 0x8

	)

435 
	#VMEXIT_CR9_READ
 0x9

	)

436 
	#VMEXIT_CR10_READ
 0xA

	)

437 
	#VMEXIT_CR11_READ
 0xB

	)

438 
	#VMEXIT_CR12_READ
 0xC

	)

439 
	#VMEXIT_CR13_READ
 0xD

	)

440 
	#VMEXIT_CR14_READ
 0xE

	)

441 
	#VMEXIT_CR15_READ
 0xF

	)

442 
	#VMEXIT_CR0_WRITE
 0x10

	)

443 
	#VMEXIT_CR1_WRITE
 0x11

	)

444 
	#VMEXIT_CR2_WRITE
 0x12

	)

445 
	#VMEXIT_CR3_WRITE
 0x13

	)

446 
	#VMEXIT_CR4_WRITE
 0x14

	)

447 
	#VMEXIT_CR5_WRITE
 0x15

	)

448 
	#VMEXIT_CR6_WRITE
 0x16

	)

449 
	#VMEXIT_CR7_WRITE
 0x17

	)

450 
	#VMEXIT_CR8_WRITE
 0x18

	)

451 
	#VMEXIT_CR9_WRITE
 0x19

	)

452 
	#VMEXIT_CR10_WRITE
 0x1A

	)

453 
	#VMEXIT_CR11_WRITE
 0x1B

	)

454 
	#VMEXIT_CR12_WRITE
 0x1C

	)

455 
	#VMEXIT_CR13_WRITE
 0x1D

	)

456 
	#VMEXIT_CR14_WRITE
 0x1E

	)

457 
	#VMEXIT_CR15_WRITE
 0x1F

	)

458 
	#VMEXIT_DR0_READ
 0x20

	)

459 
	#VMEXIT_DR1_READ
 0x21

	)

460 
	#VMEXIT_DR2_READ
 0x22

	)

461 
	#VMEXIT_DR3_READ
 0x23

	)

462 
	#VMEXIT_DR4_READ
 0x24

	)

463 
	#VMEXIT_DR5_READ
 0x25

	)

464 
	#VMEXIT_DR6_READ
 0x26

	)

465 
	#VMEXIT_DR7_READ
 0x27

	)

466 
	#VMEXIT_DR8_READ
 0x28

	)

467 
	#VMEXIT_DR9_READ
 0x29

	)

468 
	#VMEXIT_DR10_READ
 0x2A

	)

469 
	#VMEXIT_DR11_READ
 0x2B

	)

470 
	#VMEXIT_DR12_READ
 0x2C

	)

471 
	#VMEXIT_DR13_READ
 0x2D

	)

472 
	#VMEXIT_DR14_READ
 0x2E

	)

473 
	#VMEXIT_DR15_READ
 0x2F

	)

474 
	#VMEXIT_DR0_WRITE
 0x30

	)

475 
	#VMEXIT_DR1_WRITE
 0x31

	)

476 
	#VMEXIT_DR2_WRITE
 0x32

	)

477 
	#VMEXIT_DR3_WRITE
 0x33

	)

478 
	#VMEXIT_DR4_WRITE
 0x34

	)

479 
	#VMEXIT_DR5_WRITE
 0x35

	)

480 
	#VMEXIT_DR6_WRITE
 0x36

	)

481 
	#VMEXIT_DR7_WRITE
 0x37

	)

482 
	#VMEXIT_DR8_WRITE
 0x38

	)

483 
	#VMEXIT_DR9_WRITE
 0x39

	)

484 
	#VMEXIT_DR10_WRITE
 0x3A

	)

485 
	#VMEXIT_DR11_WRITE
 0x3B

	)

486 
	#VMEXIT_DR12_WRITE
 0x3C

	)

487 
	#VMEXIT_DR13_WRITE
 0x3D

	)

488 
	#VMEXIT_DR14_WRITE
 0x3E

	)

489 
	#VMEXIT_DR15_WRITE
 0x3F

	)

490 
	#VMEXIT_EXCP0
 0x40

	)

491 
	#VMEXIT_EXCP1
 0x41

	)

492 
	#VMEXIT_EXCP2
 0x42

	)

493 
	#VMEXIT_EXCP3
 0x43

	)

494 
	#VMEXIT_EXCP4
 0x44

	)

495 
	#VMEXIT_EXCP5
 0x45

	)

496 
	#VMEXIT_EXCP6
 0x46

	)

497 
	#VMEXIT_EXCP7
 0x47

	)

498 
	#VMEXIT_EXCP8
 0x48

	)

499 
	#VMEXIT_EXCP9
 0x49

	)

500 
	#VMEXIT_EXCP10
 0x4A

	)

501 
	#VMEXIT_EXCP11
 0x4B

	)

502 
	#VMEXIT_EXCP12
 0x4C

	)

503 
	#VMEXIT_EXCP13
 0x4D

	)

504 
	#VMEXIT_EXCP14
 0x4E

	)

505 
	#VMEXIT_EXCP15
 0x4F

	)

506 
	#VMEXIT_EXCP16
 0x50

	)

507 
	#VMEXIT_EXCP17
 0x51

	)

508 
	#VMEXIT_EXCP18
 0x52

	)

509 
	#VMEXIT_EXCP19
 0x53

	)

510 
	#VMEXIT_EXCP20
 0x54

	)

511 
	#VMEXIT_EXCP21
 0x55

	)

512 
	#VMEXIT_EXCP22
 0x56

	)

513 
	#VMEXIT_EXCP23
 0x57

	)

514 
	#VMEXIT_EXCP24
 0x58

	)

515 
	#VMEXIT_EXCP25
 0x59

	)

516 
	#VMEXIT_EXCP26
 0x5A

	)

517 
	#VMEXIT_EXCP27
 0x5B

	)

518 
	#VMEXIT_EXCP28
 0x5C

	)

519 
	#VMEXIT_EXCP29
 0x5D

	)

520 
	#VMEXIT_EXCP30
 0x5E

	)

521 
	#VMEXIT_EXCP31
 0x5F

	)

522 
	#VMEXIT_INTR
 0x60

	)

523 
	#VMEXIT_NMI
 0x61

	)

524 
	#VMEXIT_SMI
 0x62

	)

525 
	#VMEXIT_INIT
 0x63

	)

526 
	#VMEXIT_VINTR
 0x64

	)

527 
	#VMEXIT_CR0_SEL_WRITE
 0x65

	)

528 
	#VMEXIT_IDTR_READ
 0x66

	)

529 
	#VMEXIT_GDTR_READ
 0x67

	)

530 
	#VMEXIT_LDTR_READ
 0x68

	)

531 
	#VMEXIT_TR_READ
 0x69

	)

532 
	#VMEXIT_IDTR_WRITE
 0x6A

	)

533 
	#VMEXIT_GDTR_WRITE
 0x6B

	)

534 
	#VMEXIT_LDTR_WRITE
 0x6C

	)

535 
	#VMEXIT_TR_WRITE
 0x6D

	)

536 
	#VMEXIT_RDTSC
 0x6E

	)

537 
	#VMEXIT_RDPMC
 0x6F

	)

538 
	#VMEXIT_PUSHF
 0x70

	)

539 
	#VMEXIT_POPF
 0x71

	)

540 
	#VMEXIT_CPUID
 0x72

	)

541 
	#VMEXIT_RSM
 0x73

	)

542 
	#VMEXIT_IRET
 0x74

	)

543 
	#VMEXIT_SWINT
 0x75

	)

544 
	#VMEXIT_INVD
 0x76

	)

545 
	#VMEXIT_PAUSE
 0x77

	)

546 
	#VMEXIT_HLT
 0x78

	)

547 
	#VMEXIT_INVLPG
 0x79

	)

548 
	#VMEXIT_INVLPGA
 0x7A

	)

549 
	#VMEXIT_IOIO
 0x7B

	)

550 
	#VMEXIT_MSR
 0x7C

	)

551 
	#VMEXIT_TASK_SWITCH
 0x7D

	)

552 
	#VMEXIT_FERR_FREEZE
 0x7E

	)

553 
	#VMEXIT_SHUTDOWN
 0x7F

	)

554 
	#VMEXIT_VMRUN
 0x80

	)

555 
	#VMEXIT_VMMCALL
 0x81

	)

556 
	#VMEXIT_VMLOAD
 0x82

	)

557 
	#VMEXIT_VMSAVE
 0x83

	)

558 
	#VMEXIT_STGI
 0x84

	)

559 
	#VMEXIT_CLGI
 0x85

	)

560 
	#VMEXIT_SKINIT
 0x86

	)

561 
	#VMEXIT_RDTSCP
 0x87

	)

562 
	#VMEXIT_ICEBP
 0x88

	)

563 
	#VMEXIT_WBINVD
 0x89

	)

564 
	#VMEXIT_MONITOR
 0x8A

	)

565 
	#VMEXIT_MWAIT
 0x8B

	)

566 
	#VMEXIT_MWAIT_CONDITIONAL
 0x8C

	)

567 
	#VMEXIT_NPF
 0x400

	)

568 
	#VMEXIT_INVALID
 -1

	)

	@vmm/vmx_asm.h

2 #i‚de‡
JOS_VMM_ASM_H


3 
	#JOS_VMM_ASM_H


	)

4 #i‚de‡
JOS_KERNEL


8 
	~<öc/ty≥s.h
>

10 
	#ASM_VMX_VMLAUNCH
 ".byã 0x0f, 0x01, 0xc2"

	)

11 
	#ASM_VMX_VMRESUME
 ".byã 0x0f, 0x01, 0xc3"

	)

14 
__ölöe
 
uöt8_t
 
	$vmx⁄
–
phyßddr_t
 
vmx⁄_ªgi⁄
 ) 
	`__©åibuã
((
Æways_ölöe
));

15 
__ölöe
 
uöt8_t
 
	$vm˛ór
–
phyßddr_t
 
vmcs_ªgi⁄
 ) 
	`__©åibuã
((
Æways_ölöe
));

16 
__ölöe
 
uöt8_t
 
	$vm±æd
–
phyßddr_t
 
vmcs_ªgi⁄
 ) 
	`__©åibuã
((
Æways_ölöe
));

19 
__ölöe
 
uöt8_t


20 
	$vmx⁄
–
phyßddr_t
 
vmx⁄_ªgi⁄
 ) {

21 
uöt8_t
 
îr‹
 = 0;

23 
__asm
 
	`__vﬁ©ûe
("clc; vmxon %1; setna %0"

24 : "=q"–
îr‹
 ) : "m" ( 
vmx⁄_ªgi⁄
 ): "cc" );

25  
îr‹
;

26 
	}
}

28 
__ölöe
 
uöt8_t


29 
	$vm˛ór
–
phyßddr_t
 
vmcs_ªgi⁄
 ) {

30 
uöt8_t
 
îr‹
 = 0;

32 
__asm
 
	`__vﬁ©ûe
("clc; vmclear %1; setna %0"

33 : "=q"–
îr‹
 ) : "m" ( 
vmcs_ªgi⁄
 ) : "cc");

34  
îr‹
;

35 
	}
}

37 
__ölöe
 
uöt8_t


38 
	$vm±æd
–
phyßddr_t
 
vmcs_ªgi⁄
 ) {

39 
uöt8_t
 
îr‹
 = 0;

41 
__asm
 
	`__vﬁ©ûe
("clc; vmptrld %1; setna %0"

42 : "=q"–
îr‹
 ) : "m" ( 
vmcs_ªgi⁄
 ) : "cc");

43  
îr‹
;

44 
	}
}

46 
__ölöe
 
uöt8_t


47 
	$vmœunch
() {

48 
uöt8_t
 
îr‹
 = 0;

50 
__asm
 
	`__vﬁ©ûe
("clc; vmlaunch; setna %0"

51 : "=q"–
îr‹
 ) :: "cc");

52  
îr‹
;

53 
	}
}

	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 
__BEGIN_DECLS


68 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

69 
__löe
, c⁄° *
__fun˘i⁄
)

70 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

73 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

74 
__löe
, c⁄° *
__fun˘i⁄
)

75 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

80 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

81 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
__END_DECLS


86 
	#as£π
(
ex¥
) \

87 ((
ex¥
) \

88 ? 
	`__ASSERT_VOID_CAST
 (0) \

89 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

91 #ifdef 
__USE_GNU


92 
	#as£π_≥º‹
(
î∫um
) \

93 (!(
î∫um
) \

94 ? 
	`__ASSERT_VOID_CAST
 (0) \

95 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

103 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

104 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

106 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

107 
	#__ASSERT_FUNCTION
 
__func__


	)

109 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

116 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


118 #unde‡
°©ic_as£π


119 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

141 #ifde‡
__USE_ATFILE


142 
	#AT_FDCWD
 -100

	)

145 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

146 
	#AT_REMOVEDIR
 0x200

	)

148 
	#AT_SYMLINK_FOLLOW
 0x400

	)

149 #ifde‡
__USE_GNU


150 
	#AT_NO_AUTOMOUNT
 0x800

	)

152 
	#AT_EMPTY_PATH
 0x1000

	)

154 
	#AT_EACCESS
 0x200

	)

163 
f˙é
 (
__fd
, 
__cmd
, ...);

172 #i‚de‡
__USE_FILE_OFFSET64


173 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

175 #ifde‡
__REDIRECT


176 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

177 
	`__n⁄nuŒ
 ((1));

179 
	#›í
 
›í64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

186 #ifde‡
__USE_ATFILE


196 #i‚de‡
__USE_FILE_OFFSET64


197 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

198 
	`__n⁄nuŒ
 ((2));

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

202 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

204 
	#›í©
 
›í©64


	)

207 #ifde‡
__USE_LARGEFILE64


208 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

209 
	`__n⁄nuŒ
 ((2));

218 #i‚de‡
__USE_FILE_OFFSET64


219 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__REDIRECT


222 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

223 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

225 
	#¸ót
 
¸ót64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

232 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

233 && !
deföed
 
__USE_POSIX
))

242 
	#F_ULOCK
 0

	)

243 
	#F_LOCK
 1

	)

244 
	#F_TLOCK
 2

	)

245 
	#F_TEST
 3

	)

247 #i‚de‡
__USE_FILE_OFFSET64


248 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

250 #ifde‡
__REDIRECT


251 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

253 
	#lockf
 
lockf64


	)

256 #ifde‡
__USE_LARGEFILE64


257 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

261 #ifde‡
__USE_XOPEN2K


264 #i‚de‡
__USE_FILE_OFFSET64


265 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

266 
__advi£
Ë
__THROW
;

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

270 
__off64_t
 
__Àn
, 
__advi£
),

271 
posix_Ádvi£64
);

273 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

278 
__advi£
Ë
__THROW
;

286 #i‚de‡
__USE_FILE_OFFSET64


287 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
),

292 
posix_ÁŒoˇã64
);

294 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

297 #ifde‡
__USE_LARGEFILE64


298 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

304 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

305 && 
deföed
 
__va_¨g_∑ck_Àn


306 
	~<bôs/f˙é2.h
>

309 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__PRI64_PREFIX
 "l"

	)

46 
	#__PRIPTR_PREFIX
 "l"

	)

48 
	#__PRI64_PREFIX
 "Œ"

	)

49 
	#__PRIPTR_PREFIX


	)

55 
	#PRId8
 "d"

	)

56 
	#PRId16
 "d"

	)

57 
	#PRId32
 "d"

	)

58 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

60 
	#PRIdLEAST8
 "d"

	)

61 
	#PRIdLEAST16
 "d"

	)

62 
	#PRIdLEAST32
 "d"

	)

63 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdFAST8
 "d"

	)

66 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

68 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

71 
	#PRIi8
 "i"

	)

72 
	#PRIi16
 "i"

	)

73 
	#PRIi32
 "i"

	)

74 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

76 
	#PRIiLEAST8
 "i"

	)

77 
	#PRIiLEAST16
 "i"

	)

78 
	#PRIiLEAST32
 "i"

	)

79 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiFAST8
 "i"

	)

82 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

84 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

87 
	#PRIo8
 "o"

	)

88 
	#PRIo16
 "o"

	)

89 
	#PRIo32
 "o"

	)

90 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

92 
	#PRIoLEAST8
 "o"

	)

93 
	#PRIoLEAST16
 "o"

	)

94 
	#PRIoLEAST32
 "o"

	)

95 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoFAST8
 "o"

	)

98 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

100 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

103 
	#PRIu8
 "u"

	)

104 
	#PRIu16
 "u"

	)

105 
	#PRIu32
 "u"

	)

106 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

108 
	#PRIuLEAST8
 "u"

	)

109 
	#PRIuLEAST16
 "u"

	)

110 
	#PRIuLEAST32
 "u"

	)

111 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuFAST8
 "u"

	)

114 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

116 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

119 
	#PRIx8
 "x"

	)

120 
	#PRIx16
 "x"

	)

121 
	#PRIx32
 "x"

	)

122 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

124 
	#PRIxLEAST8
 "x"

	)

125 
	#PRIxLEAST16
 "x"

	)

126 
	#PRIxLEAST32
 "x"

	)

127 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxFAST8
 "x"

	)

130 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

132 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

135 
	#PRIX8
 "X"

	)

136 
	#PRIX16
 "X"

	)

137 
	#PRIX32
 "X"

	)

138 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

140 
	#PRIXLEAST8
 "X"

	)

141 
	#PRIXLEAST16
 "X"

	)

142 
	#PRIXLEAST32
 "X"

	)

143 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXFAST8
 "X"

	)

146 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

148 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

152 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

153 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

154 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

155 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

156 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

157 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

161 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

162 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

163 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

164 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

165 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

166 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

172 
	#SCNd8
 "hhd"

	)

173 
	#SCNd16
 "hd"

	)

174 
	#SCNd32
 "d"

	)

175 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

177 
	#SCNdLEAST8
 "hhd"

	)

178 
	#SCNdLEAST16
 "hd"

	)

179 
	#SCNdLEAST32
 "d"

	)

180 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdFAST8
 "hhd"

	)

183 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

185 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

188 
	#SCNi8
 "hhi"

	)

189 
	#SCNi16
 "hi"

	)

190 
	#SCNi32
 "i"

	)

191 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

193 
	#SCNiLEAST8
 "hhi"

	)

194 
	#SCNiLEAST16
 "hi"

	)

195 
	#SCNiLEAST32
 "i"

	)

196 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiFAST8
 "hhi"

	)

199 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

201 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

204 
	#SCNu8
 "hhu"

	)

205 
	#SCNu16
 "hu"

	)

206 
	#SCNu32
 "u"

	)

207 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

209 
	#SCNuLEAST8
 "hhu"

	)

210 
	#SCNuLEAST16
 "hu"

	)

211 
	#SCNuLEAST32
 "u"

	)

212 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuFAST8
 "hhu"

	)

215 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

217 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

220 
	#SCNo8
 "hho"

	)

221 
	#SCNo16
 "ho"

	)

222 
	#SCNo32
 "o"

	)

223 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

225 
	#SCNoLEAST8
 "hho"

	)

226 
	#SCNoLEAST16
 "ho"

	)

227 
	#SCNoLEAST32
 "o"

	)

228 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoFAST8
 "hho"

	)

231 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

233 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

236 
	#SCNx8
 "hhx"

	)

237 
	#SCNx16
 "hx"

	)

238 
	#SCNx32
 "x"

	)

239 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

241 
	#SCNxLEAST8
 "hhx"

	)

242 
	#SCNxLEAST16
 "hx"

	)

243 
	#SCNxLEAST32
 "x"

	)

244 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxFAST8
 "hhx"

	)

247 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

249 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

253 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

254 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

255 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

256 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

257 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

260 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

261 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

262 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

263 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

264 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

267 
	g__BEGIN_DECLS


269 #i‡
__WORDSIZE
 == 64

274 
	mquŸ
;

275 
	mªm
;

276 } 
	timaxdiv_t
;

283 
	mquŸ
;

284 
	mªm
;

285 } 
	timaxdiv_t
;

291 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

294 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

295 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

299 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

302 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

303 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

306 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

307 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

308 
__THROW
;

311 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

312 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

313 
__THROW
;

315 #ifde‡
__USE_EXTERN_INLINES


317 #i‡
__WORDSIZE
 == 64

319 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

320 **
__ª°ri˘
 
__íd±r
,

321 
__ba£
, 
__group
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

324 
__exã∫_ölöe
 
ötmax_t


325 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

326 
ba£
))

328  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

329 
	}
}

331 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 ** 
__ª°ri˘
 
__íd±r
,

333 
__ba£
, 
__group
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

336 
__exã∫_ölöe
 
uötmax_t


337 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

338 
ba£
))

340  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

341 
	}
}

343 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

344 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

345 
__ba£
, 
__group
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

348 
__exã∫_ölöe
 
ötmax_t


349 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

350 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

352  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

353 
	}
}

355 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

356 
__ª°ri˘
 
__≈å
,

357 
__gwch¨_t
 **

358 
__ª°ri˘
 
__íd±r
,

359 
__ba£
, 
__group
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
__exã∫_ölöe
 
uötmax_t


363 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

364 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

366  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

367 
	}
}

371 
__exãnsi⁄__


372 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

373 **
__ª°ri˘
 
__íd±r
,

374 
__ba£
, 
__group
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

377 
__exã∫_ölöe
 
ötmax_t


378 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

379 
ba£
))

381  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

382 
	}
}

384 
__exãnsi⁄__


385 
	$__°πouŒ_öã∫Æ
 (const *

386 
__ª°ri˘
 
__≈å
,

388 
__ª°ri˘
 
__íd±r
,

389 
__ba£
,

390 
__group
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 
__exã∫_ölöe
 
uötmax_t


394 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

395 
ba£
))

397  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

398 
	}
}

400 
__exãnsi⁄__


401 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

402 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

403 
__ba£
, 
__group
)

404 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

406 
__exã∫_ölöe
 
ötmax_t


407 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

408 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

410  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

411 
	}
}

414 
__exãnsi⁄__


415 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

416 
__ª°ri˘
 
__≈å
,

417 
__gwch¨_t
 **

418 
__ª°ri˘
 
__íd±r
,

419 
__ba£
,

420 
__group
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

423 
__exã∫_ölöe
 
uötmax_t


424 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

425 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

427  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

428 
	}
}

433 
	g__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__a
;

422 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

423 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

424 
	$î™d48_r
 (
__xsubi
[3],

425 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

426 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

430 *
__ª°ri˘
 
__ªsu…
)

431 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

432 
	$ƒ™d48_r
 (
__xsubi
[3],

433 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

434 *
__ª°ri˘
 
__ªsu…
)

435 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

441 
	$jønd48_r
 (
__xsubi
[3],

442 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

443 *
__ª°ri˘
 
__ªsu…
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 
	$£ed48_r
 (
__£ed16v
[3],

451 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$lc⁄g48_r
 (
__∑øm
[7],

454 
dønd48_d©a
 *
__buf„r
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

461 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


462 
	#__mÆloc_™d_ˇŒoc_deföed


	)

463 
__BEGIN_NAMESPACE_STD


465 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

467 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

468 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

469 
__END_NAMESPACE_STD


472 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


473 
__BEGIN_NAMESPACE_STD


479 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

480 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

482 
	$‰ì
 (*
__±r
Ë
__THROW
;

483 
__END_NAMESPACE_STD


485 #ifdef 
__USE_MISC


487 
	$c‰ì
 (*
__±r
Ë
__THROW
;

490 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


491 
	~<Æloˇ.h
>

494 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

495 || 
deföed
 
__USE_BSD


497 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

500 #ifde‡
__USE_XOPEN2K


502 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

503 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

506 #ifde‡
__USE_ISOC11


508 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


522 #ifde‡
__˝lu•lus


523 "C++" 
	`©_quick_exô
 ((*
__func
) ())

524 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

526 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

529 
__END_NAMESPACE_STD


531 #ifdef 
__USE_MISC


534 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

535 
__THROW
 
	`__n⁄nuŒ
 ((1));

538 
__BEGIN_NAMESPACE_STD


542 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

544 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


548 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

550 
__END_NAMESPACE_STD


552 #ifde‡
__USE_ISOC99


553 
__BEGIN_NAMESPACE_C99


556 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

557 
__END_NAMESPACE_C99


561 
__BEGIN_NAMESPACE_STD


563 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

564 
__END_NAMESPACE_STD


566 #ifde‡
__USE_GNU


569 *
	$£cuª_gëív
 (c⁄° *
__«me
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

573 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


577 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

580 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


583 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

584 
__THROW
 
	`__n⁄nuŒ
 ((2));

587 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 #ifdef 
__USE_MISC


594 
	$˛óªnv
 (Ë
__THROW
;

598 #i‡
deföed
 
__USE_MISC
 \

599 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

605 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

609 || 
deföed
 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

760 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

761 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

762 #ifde‡
__USE_GNU


763 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

765 
	`__n⁄nuŒ
 ((1, 4));

770 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

771 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
__END_NAMESPACE_STD


774 #ifde‡
__USE_ISOC99


775 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

776 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

780 
__BEGIN_NAMESPACE_STD


784 
div_t
 
	$div
 (
__numî
, 
__díom
)

785 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

787 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_ISOC99


791 
__BEGIN_NAMESPACE_C99


792 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

793 
__díom
)

794 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__END_NAMESPACE_C99


799 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

800 || 
deföed
 
__USE_SVID


807 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

808 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

813 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

814 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

819 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

820 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

823 #ifde‡
__USE_MISC


825 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

826 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

828 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

838 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

839 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

840 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

845 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

846 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

847 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

856 
__BEGIN_NAMESPACE_STD


859 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

862 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

863 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

866 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

870 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

871 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

874 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

875 
__THROW
;

876 
__END_NAMESPACE_STD


879 #ifde‡
__USE_SVID


884 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

888 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


895 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

896 *c⁄° *
__ª°ri˘
 
__tokís
,

897 **
__ª°ri˘
 
__vÆuï
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

902 #ifde‡
__USE_XOPEN


904 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2KXSI


912 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

915 #ifde‡
__USE_XOPEN


920 
	$gø¡±
 (
__fd
Ë
__THROW
;

924 
	$u∆ock±
 (
__fd
Ë
__THROW
;

929 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

932 #ifde‡
__USE_GNU


936 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

937 
__THROW
 
	`__n⁄nuŒ
 ((2));

940 
	`gë±
 ();

943 #ifde‡
__USE_BSD


947 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

951 
	~<bôs/°dlib-Êﬂt.h
>

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

31 || 
deföed
 
	g__USE_ATFILE


32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

35 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


36 
	#__√ed_time•ec


	)

38 
	~<time.h
>

41 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


44 #i‚de‡
__dev_t_deföed


45 
__dev_t
 
	tdev_t
;

46 
	#__dev_t_deföed


	)

49 #i‚de‡
__gid_t_deföed


50 
__gid_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

54 #i‚de‡
__öo_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__öo_t
 
	töo_t
;

58 
__öo64_t
 
	töo_t
;

60 
	#__öo_t_deföed


	)

63 #i‚de‡
__mode_t_deföed


64 
__mode_t
 
	tmode_t
;

65 
	#__mode_t_deföed


	)

68 #i‚de‡
__∆ök_t_deföed


69 
__∆ök_t
 
	t∆ök_t
;

70 
	#__∆ök_t_deföed


	)

73 #i‚de‡
__off_t_deföed


74 #i‚de‡
__USE_FILE_OFFSET64


75 
__off_t
 
	toff_t
;

77 
__off64_t
 
	toff_t
;

79 
	#__off_t_deföed


	)

82 #i‚de‡
__uid_t_deföed


83 
__uid_t
 
	tuid_t
;

84 
	#__uid_t_deföed


	)

88 #ifde‡
__USE_UNIX98


89 #i‚de‡
__blk˙t_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__blk˙t_t
 
	tblk˙t_t
;

93 
__blk˙t64_t
 
	tblk˙t_t
;

95 
	#__blk˙t_t_deföed


	)

98 #i‚de‡
__blksize_t_deföed


99 
__blksize_t
 
	tblksize_t
;

100 
	#__blksize_t_deföed


	)

104 
	g__BEGIN_DECLS


106 
	~<bôs/°©.h
>

108 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


109 
	#S_IFMT
 
__S_IFMT


	)

110 
	#S_IFDIR
 
__S_IFDIR


	)

111 
	#S_IFCHR
 
__S_IFCHR


	)

112 
	#S_IFBLK
 
__S_IFBLK


	)

113 
	#S_IFREG
 
__S_IFREG


	)

114 #ifde‡
__S_IFIFO


115 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifde‡
__S_IFLNK


118 
	#S_IFLNK
 
__S_IFLNK


	)

120 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

121 && 
deföed
 
	g__S_IFSOCK


122 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

130 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifde‡
__S_IFIFO


135 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifde‡
__S_IFLNK


138 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

145 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

146 && 
deföed
 
	g__S_IFSOCK


147 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #ñi‡
deföed
 
__USE_XOPEN2K


149 
	#S_ISSOCK
(
mode
Ë0

	)

156 #ifdef 
__USE_POSIX199309


157 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

158 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

159 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

165 
	#S_ISUID
 
__S_ISUID


	)

166 
	#S_ISGID
 
__S_ISGID


	)

168 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


170 
	#S_ISVTX
 
__S_ISVTX


	)

173 
	#S_IRUSR
 
__S_IREAD


	)

174 
	#S_IWUSR
 
__S_IWRITE


	)

175 
	#S_IXUSR
 
__S_IEXEC


	)

177 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


180 
	#S_IREAD
 
S_IRUSR


	)

181 
	#S_IWRITE
 
S_IWUSR


	)

182 
	#S_IEXEC
 
S_IXUSR


	)

185 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

186 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

187 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

189 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

192 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

193 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

195 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

201 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 
	#S_BLKSIZE
 512

	)

208 #i‚de‡
__USE_FILE_OFFSET64


210 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

211 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

215 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

219 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

220 
	`__n⁄nuŒ
 ((1, 2));

221 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

222 
	`__n⁄nuŒ
 ((2));

224 
	#°©
 
°©64


	)

225 
	#f°©
 
f°©64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

230 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

231 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

234 #ifde‡
__USE_ATFILE


238 #i‚de‡
__USE_FILE_OFFSET64


239 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

243 #ifde‡
__REDIRECT_NTH


244 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

245 
°©
 *
__ª°ri˘
 
__buf
,

246 
__Êag
),

247 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

249 
	#f°©©
 
f°©©64


	)

253 #ifde‡
__USE_LARGEFILE64


254 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

255 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

256 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

260 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


261 #i‚de‡
__USE_FILE_OFFSET64


264 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

267 #ifde‡
__REDIRECT_NTH


268 
	`__REDIRECT_NTH
 (
l°©
,

269 (c⁄° *
__ª°ri˘
 
__fûe
,

270 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 
	#l°©
 
l°©64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

278 
°©64
 *
__ª°ri˘
 
__buf
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

285 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1));

288 #ifde‡
__USE_BSD


292 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


298 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

301 #ifde‡
__USE_ATFILE


304 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

305 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

315 #ifdef 
__USE_GNU


318 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

322 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

325 #ifde‡
__USE_ATFILE


329 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__n⁄nuŒ
 ((2));

336 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


337 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 #ifde‡
__USE_ATFILE


344 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

351 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 #ifde‡
__USE_ATFILE


358 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2));

362 #ifde‡
__USE_ATFILE


365 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

366 c⁄° 
time•ec
 
__times
[2],

367 
__Êags
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #ifde‡
__USE_XOPEN2K8


373 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

391 #i‚de‡
_STAT_VER


392 
	#_STAT_VER
 0

	)

394 #i‚de‡
_MKNOD_VER


395 
	#_MKNOD_VER
 0

	)

399 #i‚de‡
__USE_FILE_OFFSET64


400 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

401 
__THROW
 
	`__n⁄nuŒ
 ((3));

402 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

406 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

407 
°©
 *
__°©_buf
, 
__Êag
)

408 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

410 #ifde‡
__REDIRECT_NTH


411 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

412 
°©
 *
__°©_buf
), 
__fx°©64
)

413 
	`__n⁄nuŒ
 ((3));

414 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__x°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

418 
°©
 *
__°©_buf
), 
__lx°©64
)

419 
	`__n⁄nuŒ
 ((2, 3));

420 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

421 c⁄° *
__fûíame
,

422 
°©
 *
__°©_buf
, 
__Êag
),

423 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

426 
	#__fx°©
 
__fx°©64


	)

427 
	#__x°©
 
__x°©64


	)

428 
	#__lx°©
 
__lx°©64


	)

432 #ifde‡
__USE_LARGEFILE64


433 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

439 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

440 
°©64
 *
__°©_buf
, 
__Êag
)

441 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

443 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

450 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


453 
__exã∫_ölöe
 

454 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

456  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

457 
	}
}

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


460 
__exã∫_ölöe
 

461 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

463  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

464 
	}
}

467 
__exã∫_ölöe
 

468 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

470  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

471 
	}
}

473 #ifde‡
__USE_ATFILE


474 
__exã∫_ölöe
 

475 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

476 
__Êag
))

478  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

479 
	}
}

482 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


483 
__exã∫_ölöe
 

484 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifde‡
__USE_ATFILE


491 
__exã∫_ölöe
 

492 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

496 
	}
}

499 #i‡
deföed
 
__USE_LARGEFILE64
 \

500 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

501 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

502 
__exã∫_ölöe
 

503 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

505  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

506 
	}
}

508 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


509 
__exã∫_ölöe
 

510 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

512  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

513 
	}
}

516 
__exã∫_ölöe
 

517 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

519  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

520 
	}
}

522 #ifde‡
__USE_ATFILE


523 
__exã∫_ölöe
 

524 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

525 
__Êag
))

527  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 
	#MAP_ANONYMOUS
 0x20

	)

53 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

54 
	#MAP_32BIT
 0x40

	)

58 #ifde‡
__USE_MISC


59 
	#MAP_GROWSDOWN
 0x00100

	)

60 
	#MAP_DENYWRITE
 0x00800

	)

61 
	#MAP_EXECUTABLE
 0x01000

	)

62 
	#MAP_LOCKED
 0x02000

	)

63 
	#MAP_NORESERVE
 0x04000

	)

64 
	#MAP_POPULATE
 0x08000

	)

65 
	#MAP_NONBLOCK
 0x10000

	)

66 
	#MAP_STACK
 0x20000

	)

67 
	#MAP_HUGETLB
 0x40000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HUGEPAGE
 14

	)

99 
	#MADV_NOHUGEPAGE
 15

	)

100 
	#MADV_DONTDUMP
 16

	)

102 
	#MADV_DODUMP
 17

	)

103 
	#MADV_HWPOISON
 100

	)

107 #ifde‡
__USE_XOPEN2K


108 
	#POSIX_MADV_NORMAL
 0

	)

109 
	#POSIX_MADV_RANDOM
 1

	)

110 
	#POSIX_MADV_SEQUENTIAL
 2

	)

111 
	#POSIX_MADV_WILLNEED
 3

	)

112 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

118 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	m__ñisi⁄_d©a
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

201 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 17

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_Âos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

36 
	#_IO_size_t
 
size_t


	)

37 
	#_IO_ssize_t
 
__ssize_t


	)

38 
	#_IO_off_t
 
__off_t


	)

39 
	#_IO_off64_t
 
__off64_t


	)

40 
	#_IO_pid_t
 
__pid_t


	)

41 
	#_IO_uid_t
 
__uid_t


	)

42 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

43 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 
	#_IO_va_li°
 
_G_va_li°


	)

46 
	#_IO_wöt_t
 
wöt_t


	)

49 
	#__√ed___va_li°


	)

50 
	~<°d¨g.h
>

51 #ifde‡
__GNUC_VA_LIST


52 #unde‡
_IO_va_li°


53 
	#_IO_va_li°
 
__gnuc_va_li°


	)

56 #i‚de‡
__P


57 
	~<sys/cdefs.h
>

60 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #i‚de‡
EOF


63 
	#EOF
 (-1)

	)

65 #i‚de‡
NULL


66 #i‡
deföed
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

68 
	#NULL
 (
__nuŒ
)

	)

70 #i‡!
deföed
(
__˝lu•lus
)

71 
	#NULL
 ((*)0)

	)

73 
	#NULL
 (0)

	)

78 
	#_IOS_INPUT
 1

	)

79 
	#_IOS_OUTPUT
 2

	)

80 
	#_IOS_ATEND
 4

	)

81 
	#_IOS_APPEND
 8

	)

82 
	#_IOS_TRUNC
 16

	)

83 
	#_IOS_NOCREATE
 32

	)

84 
	#_IOS_NOREPLACE
 64

	)

85 
	#_IOS_BIN
 128

	)

93 
	#_IO_MAGIC
 0xFBAD0000

	)

94 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 
	#_IO_USER_BUF
 1

	)

97 
	#_IO_UNBUFFERED
 2

	)

98 
	#_IO_NO_READS
 4

	)

99 
	#_IO_NO_WRITES
 8

	)

100 
	#_IO_EOF_SEEN
 0x10

	)

101 
	#_IO_ERR_SEEN
 0x20

	)

102 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 
	#_IO_LINKED
 0x80

	)

104 
	#_IO_IN_BACKUP
 0x100

	)

105 
	#_IO_LINE_BUF
 0x200

	)

106 
	#_IO_TIED_PUT_GET
 0x400

	)

107 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 
	#_IO_IS_APPENDING
 0x1000

	)

109 
	#_IO_IS_FILEBUF
 0x2000

	)

110 
	#_IO_BAD_SEEN
 0x4000

	)

111 
	#_IO_USER_LOCK
 0x8000

	)

113 
	#_IO_FLAGS2_MMAP
 1

	)

114 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifde‡
_LIBC


116 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifde‡
_LIBC


120 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 
	#_IO_SKIPWS
 01

	)

127 
	#_IO_LEFT
 02

	)

128 
	#_IO_RIGHT
 04

	)

129 
	#_IO_INTERNAL
 010

	)

130 
	#_IO_DEC
 020

	)

131 
	#_IO_OCT
 040

	)

132 
	#_IO_HEX
 0100

	)

133 
	#_IO_SHOWBASE
 0200

	)

134 
	#_IO_SHOWPOINT
 0400

	)

135 
	#_IO_UPPERCASE
 01000

	)

136 
	#_IO_SHOWPOS
 02000

	)

137 
	#_IO_SCIENTIFIC
 04000

	)

138 
	#_IO_FIXED
 010000

	)

139 
	#_IO_UNITBUF
 020000

	)

140 
	#_IO_STDIO
 040000

	)

141 
	#_IO_DONT_CLOSE
 0100000

	)

142 
	#_IO_BOOLALPHA
 0200000

	)

145 
_IO_jump_t
; 
	g_IO_FILE
;

148 #ifde‡
_IO_MTSAFE_IO


149 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

150 
	~<bôs/°dio-lock.h
>

155 
	t_IO_lock_t
;

161 
	s_IO_m¨kî
 {

162 
_IO_m¨kî
 *
	m_√xt
;

163 
_IO_FILE
 *
	m_sbuf
;

167 
	m_pos
;

169 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

170 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

171 
	mpublic
:

172 
°ªamm¨kî
(
°ªambuf
 *
sb
);

173 ~
°ªamm¨kî
();

174 
ßvög
(Ë{  
	m_•os
 == -2; }

175 
dñè
(
°ªamm¨kî
&);

176 
dñè
();

181 
	e__codecvt_ªsu…


183 
	m__codecvt_ok
,

184 
	m__codecvt_∑πül
,

185 
	m__codecvt_îr‹
,

186 
	m__codecvt_noc⁄v


189 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


192 
	s_IO_codecvt


194 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

195 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

196 
	m__mb°©e_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 *,

199 c⁄° 
	mwch¨_t
 **, *,

201 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

202 
	m__mb°©e_t
 *, *,

204 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

205 
	m__mb°©e_t
 *,

207 c⁄° **, 
	mwch¨_t
 *,

208 
	mwch¨_t
 *, wchar_t **);

209 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

211 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

212 c⁄° *, c⁄° *, 
	m_IO_size_t
);

213 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

215 
_IO_ic⁄v_t
 
	m__cd_ö
;

216 
_IO_ic⁄v_t
 
	m__cd_out
;

220 
	s_IO_wide_d©a


222 
wch¨_t
 *
	m_IO_ªad_±r
;

223 
wch¨_t
 *
	m_IO_ªad_íd
;

224 
wch¨_t
 *
	m_IO_ªad_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_ba£
;

226 
wch¨_t
 *
	m_IO_wrôe_±r
;

227 
wch¨_t
 *
	m_IO_wrôe_íd
;

228 
wch¨_t
 *
	m_IO_buf_ba£
;

229 
wch¨_t
 *
	m_IO_buf_íd
;

231 
wch¨_t
 *
	m_IO_ßve_ba£
;

232 
wch¨_t
 *
	m_IO_backup_ba£
;

234 
wch¨_t
 *
	m_IO_ßve_íd
;

236 
__mb°©e_t
 
	m_IO_°©e
;

237 
__mb°©e_t
 
	m_IO_œ°_°©e
;

238 
_IO_codecvt
 
	m_codecvt
;

240 
wch¨_t
 
	m_sh‹tbuf
[1];

242 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

246 
	s_IO_FILE
 {

247 
	m_Êags
;

248 
	#_IO_fûe_Êags
 
_Êags


	)

252 * 
	m_IO_ªad_±r
;

253 * 
	m_IO_ªad_íd
;

254 * 
	m_IO_ªad_ba£
;

255 * 
	m_IO_wrôe_ba£
;

256 * 
	m_IO_wrôe_±r
;

257 * 
	m_IO_wrôe_íd
;

258 * 
	m_IO_buf_ba£
;

259 * 
	m_IO_buf_íd
;

261 *
	m_IO_ßve_ba£
;

262 *
	m_IO_backup_ba£
;

263 *
	m_IO_ßve_íd
;

265 
_IO_m¨kî
 *
	m_m¨kîs
;

267 
_IO_FILE
 *
	m_chaö
;

269 
	m_fûío
;

271 
	m_blksize
;

273 
	m_Êags2
;

275 
_IO_off_t
 
	m_ﬁd_off£t
;

277 
	#__HAVE_COLUMN


	)

279 
	m_cur_cﬁumn
;

280 sig√d 
	m_vèbÀ_off£t
;

281 
	m_sh‹tbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifde‡
_IO_USE_OLD_IO_FILE


289 
	s_IO_FILE_com∂ëe


291 
_IO_FILE
 
	m_fûe
;

293 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_off£t
;

295 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


297 
_IO_codecvt
 *
	m_codecvt
;

298 
_IO_wide_d©a
 *
	m_wide_d©a
;

299 
_IO_FILE
 *
	m_‰ìªs_li°
;

300 *
	m_‰ìªs_buf
;

301 
size_t
 
	m_‰ìªs_size
;

303 *
	m__∑d1
;

304 *
	m__∑d2
;

305 *
	m__∑d3
;

306 *
	m__∑d4
;

307 
size_t
 
	m__∑d5
;

309 
	m_mode
;

311 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

315 #i‚de‡
__˝lu•lus


316 
_IO_FILE
 
	t_IO_FILE
;

319 
	g_IO_FILE_∂us
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

323 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

324 #i‚de‡
_LIBC


325 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

326 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

327 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

329 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

331 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

339 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

347 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

359 
	t__io_˛o£_‚
 (*
	t__cookõ
);

362 #ifde‡
_GNU_SOURCE


364 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

365 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

366 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

367 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

372 
__io_ªad_‚
 *
	mªad
;

373 
__io_wrôe_‚
 *
	mwrôe
;

374 
__io_£ek_‚
 *
	m£ek
;

375 
__io_˛o£_‚
 *
	m˛o£
;

376 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

377 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

379 
	g_IO_cookõ_fûe
;

382 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

383 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

387 #ifde‡
__˝lu•lus


391 
__undîÊow
 (
_IO_FILE
 *);

392 
__uÊow
 (
_IO_FILE
 *);

393 
__ovîÊow
 (
_IO_FILE
 *, );

394 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


395 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

397 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

400 #i‡ 
__GNUC__
 >= 3

401 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

403 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

406 
	#_IO_gëc_u∆ocked
(
_Â
) \

407 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

408 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

409 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

410 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

411 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

412 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

413 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

415 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

416 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

418 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


419 
	#_IO_gëwc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

421 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

422 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

423 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

424 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

425 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

426 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

427 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

428 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

429 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

432 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

433 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

435 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

436 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

437 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

440 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

443 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

444 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

446 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

450 #ifde‡
_IO_MTSAFE_IO


451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
) \

453 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

454 
	#_IO_fu∆ockfûe
(
_Â
) \

455 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

457 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

458 
	#_IO_Êockfûe
(
_Â
Ë

	)

459 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

460 
	#_IO_·rylockfûe
(
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

462 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

465 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

466 
_IO_va_li°
, *
__ª°ri˘
);

467 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

468 
_IO_va_li°
);

469 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

470 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

472 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

473 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

475 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

477 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


478 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

479 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

480 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

481 #i‡
__GNUC__
 >= 2

484 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


485 
	~<shlib-com∑t.h
>

486 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

488 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

489 c⁄° 
_IO_°dö_u£d
;

490 
wók_exã∫
 (
_IO_°dö_u£d
);

493 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


494 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

498 
	#_IO_fwide
(
__Â
, 
__mode
) \

499 ({ 
__ªsu…
 = (
__mode
); \

500 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

502 i‡((
__Â
)->
_mode
 == 0) \

504 (
__Â
)->
_mode
 = -1; \

505 
__ªsu…
 = (
__Â
)->
_mode
; \

507 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

508 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

510 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

511 
__ªsu…
; })

	)

514 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

515 
_IO_va_li°
, *
__ª°ri˘
);

516 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

517 
_IO_va_li°
);

518 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

519 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

522 #ifde‡
__LDBL_COMPAT


523 
	~<bôs/libio-ldbl.h
>

526 #ifde‡
__˝lu•lus


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

283 
	#INT8_C
(
c
Ë
	)
c

284 
	#INT16_C
(
c
Ë
	)
c

285 
	#INT32_C
(
c
Ë
	)
c

286 #i‡
__WORDSIZE
 == 64

287 
	#INT64_C
(
c
Ë¯## 
L


	)

289 
	#INT64_C
(
c
Ë¯## 
LL


	)

293 
	#UINT8_C
(
c
Ë
	)
c

294 
	#UINT16_C
(
c
Ë
	)
c

295 
	#UINT32_C
(
c
Ë¯## 
U


	)

296 #i‡
__WORDSIZE
 == 64

297 
	#UINT64_C
(
c
Ë¯## 
UL


	)

299 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#INTMAX_C
(
c
Ë¯## 
L


	)

305 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

307 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

308 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

139 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


140 
	#O_DSYNC
 
__O_DSYNC


	)

141 #i‡
deföed
 
__O_RSYNC


142 
	#O_RSYNC
 
__O_RSYNC


	)

144 
	#O_RSYNC
 
O_SYNC


	)

149 
	#F_DUPFD
 0

	)

150 
	#F_GETFD
 1

	)

151 
	#F_SETFD
 2

	)

152 
	#F_GETFL
 3

	)

153 
	#F_SETFL
 4

	)

155 #i‚de‡
__F_SETOWN


156 
	#__F_SETOWN
 8

	)

157 
	#__F_GETOWN
 9

	)

160 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


161 
	#F_SETOWN
 
__F_SETOWN


	)

162 
	#F_GETOWN
 
__F_GETOWN


	)

165 #i‚de‡
__F_SETSIG


166 
	#__F_SETSIG
 10

	)

167 
	#__F_GETSIG
 11

	)

169 #i‚de‡
__F_SETOWN_EX


170 
	#__F_SETOWN_EX
 15

	)

171 
	#__F_GETOWN_EX
 16

	)

174 #ifde‡
__USE_GNU


175 
	#F_SETSIG
 
__F_SETSIG


	)

176 
	#F_GETSIG
 
__F_GETSIG


	)

177 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

178 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

181 #ifde‡
__USE_GNU


182 
	#F_SETLEASE
 1024

	)

183 
	#F_GETLEASE
 1025

	)

184 
	#F_NOTIFY
 1026

	)

185 
	#F_SETPIPE_SZ
 1031

	)

186 
	#F_GETPIPE_SZ
 1032

	)

188 #ifde‡
__USE_XOPEN2K8


189 
	#F_DUPFD_CLOEXEC
 1030

	)

194 
	#FD_CLOEXEC
 1

	)

196 #i‚de‡
F_RDLCK


198 
	#F_RDLCK
 0

	)

199 
	#F_WRLCK
 1

	)

200 
	#F_UNLCK
 2

	)

205 #i‚de‡
F_EXLCK


206 
	#F_EXLCK
 4

	)

207 
	#F_SHLCK
 8

	)

210 #ifde‡
__USE_BSD


212 
	#LOCK_SH
 1

	)

213 
	#LOCK_EX
 2

	)

214 
	#LOCK_NB
 4

	)

216 
	#LOCK_UN
 8

	)

219 #ifde‡
__USE_GNU


220 
	#LOCK_MAND
 32

	)

221 
	#LOCK_READ
 64

	)

222 
	#LOCK_WRITE
 128

	)

223 
	#LOCK_RW
 192

	)

226 #ifde‡
__USE_GNU


228 
	#DN_ACCESS
 0x00000001

	)

229 
	#DN_MODIFY
 0x00000002

	)

230 
	#DN_CREATE
 0x00000004

	)

231 
	#DN_DELETE
 0x00000008

	)

232 
	#DN_RENAME
 0x00000010

	)

233 
	#DN_ATTRIB
 0x00000020

	)

234 
	#DN_MULTISHOT
 0x80000000

	)

238 #ifde‡
__USE_GNU


240 
	e__pid_ty≥


242 
	mF_OWNER_TID
 = 0,

243 
	mF_OWNER_PID
,

244 
	mF_OWNER_PGRP
,

245 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


249 
	sf_ow√r_ex


251 
__pid_ty≥
 
	mty≥
;

252 
__pid_t
 
	mpid
;

258 #ifdef 
__USE_BSD


259 
	#FAPPEND
 
O_APPEND


	)

260 
	#FFSYNC
 
O_FSYNC


	)

261 
	#FASYNC
 
O_ASYNC


	)

262 
	#FNONBLOCK
 
O_NONBLOCK


	)

263 
	#FNDELAY
 
O_NDELAY


	)

266 #i‚de‡
__POSIX_FADV_DONTNEED


267 
	#__POSIX_FADV_DONTNEED
 4

	)

268 
	#__POSIX_FADV_NOREUSE
 5

	)

271 #ifde‡
__USE_XOPEN2K


272 
	#POSIX_FADV_NORMAL
 0

	)

273 
	#POSIX_FADV_RANDOM
 1

	)

274 
	#POSIX_FADV_SEQUENTIAL
 2

	)

275 
	#POSIX_FADV_WILLNEED
 3

	)

276 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

277 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

281 #ifde‡
__USE_GNU


283 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

286 
	#SYNC_FILE_RANGE_WRITE
 2

	)

289 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

294 
	#SPLICE_F_MOVE
 1

	)

295 
	#SPLICE_F_NONBLOCK
 2

	)

298 
	#SPLICE_F_MORE
 4

	)

299 
	#SPLICE_F_GIFT
 8

	)

303 
	sfûe_h™dÀ


305 
	mh™dÀ_byãs
;

306 
	mh™dÀ_ty≥
;

308 
	mf_h™dÀ
[0];

312 
	#MAX_HANDLE_SZ
 128

	)

315 
	g__BEGIN_DECLS


317 #ifde‡
__USE_GNU


320 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

321 
__THROW
;

328 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

329 
__Êags
);

336 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

337 
size_t
 
__cou¡
, 
__Êags
);

343 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

344 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

345 
__Êags
);

351 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

352 
__Êags
);

358 #i‚de‡
__USE_FILE_OFFSET64


359 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

361 #ifde‡
__REDIRECT


362 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

363 
__off64_t
 
__Àn
),

364 
ÁŒoˇã64
);

366 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

371 
__off64_t
 
__Àn
);

376 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

377 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

378 
__Êags
Ë
__THROW
;

384 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

385 
__Êags
);

389 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && 
	tIS_IN
 (
	tlibc
)

48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

144 #i‡
__GNUC_PREREQ
 (4,3)

145 
	#__w¨nde˛
(
«me
, 
msg
) \

146 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

147 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

148 
	#__îr‹de˛
(
«me
, 
msg
) \

149 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

151 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

152 
	#__w¨«âr
(
msg
)

	)

153 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 #i‡
__GNUC_PREREQ
 (2,97)

159 
	#__Êex¨r
 []

	)

161 #ifde‡
__GNUC__


162 
	#__Êex¨r
 [0]

	)

164 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

165 
	#__Êex¨r
 []

	)

168 
	#__Êex¨r
 [1]

	)

184 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

186 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

187 #ifde‡
__˝lu•lus


188 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

189 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

190 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

191 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

198 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

199 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

212 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

213 
	#__©åibuã__
(
xyz
Ë

	)

219 #i‡
__GNUC_PREREQ
 (2,96)

220 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

222 
	#__©åibuã_mÆloc__


	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 
	~<bôs/w‹dsize.h
>

394 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


395 
	#__LDBL_COMPAT
 1

	)

396 #ifde‡
__REDIRECT


397 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

398 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

399 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

400 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

401 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

402 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

403 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

404 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

405 
	#__LDBL_REDIR_DECL
(
«me
) \

406 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

407 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

409 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

410 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

413 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


414 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

415 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

416 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

417 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

418 
	#__LDBL_REDIR_DECL
(
«me
)

	)

419 #ifde‡
__REDIRECT


420 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

422 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

423 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

424 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

433 c⁄° 
sched_∑øm
 *
__∑øm
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

437 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

438 *
__ª°ri˘
 
__pﬁicy
,

439 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

440 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

443 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

444 
__THROW
;

447 #ifde‡
__USE_GNU


449 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

450 
size_t
 
__buÊí
)

451 
__THROW
 
	`__n⁄nuŒ
 ((2));

454 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

455 
__THROW
 
	`__n⁄nuŒ
 ((2));

459 #ifde‡
__USE_UNIX98


461 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

464 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

467 #ifde‡
__USE_GNU


472 
	$±hªad_yõld
 (Ë
__THROW
;

477 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

478 c⁄° 
˝u_£t_t
 *
__˝u£t
)

479 
__THROW
 
	`__n⁄nuŒ
 ((3));

482 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

483 
˝u_£t_t
 *
__˝u£t
)

484 
__THROW
 
	`__n⁄nuŒ
 ((3));

497 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

498 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

509 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

513 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

516 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

521 
	`±hªad_ã°ˇn˚l
 ();

530 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

531 
__mask_was_ßved
;

532 } 
__ˇn˚l_jmp_buf
[1];

533 *
__∑d
[4];

534 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

537 #i‚de‡
__˛ónup_f˘_©åibuã


538 
	#__˛ónup_f˘_©åibuã


	)

543 
	s__±hªad_˛ónup_‰ame


545 (*
__ˇn˚l_routöe
) (*);

546 *
__ˇn˚l_¨g
;

547 
__do_ô
;

548 
__ˇn˚l_ty≥
;

551 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


552 #ifde‡
__˝lu•lus


554 ˛as†
	c__±hªad_˛ónup_˛ass


556 (*
__ˇn˚l_routöe
) (*);

557 *
__ˇn˚l_¨g
;

558 
__do_ô
;

559 
__ˇn˚l_ty≥
;

561 
public
:

562 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

563 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

564 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

565 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

566 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

567 &
__ˇn˚l_ty≥
); 
	}
}

568 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

578 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

580 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

584 
	#±hªad_˛ónup_p›
(
execuã
) \

585 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

586 } 0)

	)

588 #ifde‡
__USE_GNU


592 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

594 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

595 
__˛‰ame
.
	`__de„r
 ()

	)

600 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

601 
__˛‰ame
.
	`__ª°‹e
 (); \

602 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

603 } 0)

	)

610 
__exã∫_ölöe
 

611 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

613 i‡(
__‰ame
->
__do_ô
)

614 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

615 
	}
}

624 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

626 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

627 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

628 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

629 .
__do_ô
 = 1 };

	)

633 
	#±hªad_˛ónup_p›
(
execuã
) \

634 
__˛‰ame
.
__do_ô
 = (
execuã
); \

635 } 0)

	)

637 #ifde‡
__USE_GNU


641 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

643 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

644 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

645 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

646 .
__do_ô
 = 1 }; \

647 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

648 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

653 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

654 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

655 
__˛‰ame
.
__do_ô
 = (
execuã
); \

656 } 0)

	)

667 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

669 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

670 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

671 *
__ˇn˚l_¨g
 = (
¨g
); \

672 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

673 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

674 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

676 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

677 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

681 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

682 dÿ{

	)

683 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

684 
__˛ónup_f˘_©åibuã
;

688 
	#±hªad_˛ónup_p›
(
execuã
) \

691 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

692 i‡(
execuã
) \

693 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

694 } 0)

	)

695 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

696 
__˛ónup_f˘_©åibuã
;

698 #ifde‡
__USE_GNU


702 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

704 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

705 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

706 *
__ˇn˚l_¨g
 = (
¨g
); \

707 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

708 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

709 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

711 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

712 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

716 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

717 dÿ{

	)

718 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

719 
__˛ónup_f˘_©åibuã
;

724 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

727 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

728 i‡(
execuã
) \

729 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

730 
	}
} 0)

	)

731 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

732 
__˛ónup_f˘_©åibuã
;

736 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

737 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

738 #i‚de‡
SHARED


739 
	`__©åibuã__
 ((
__wók__
))

745 
__jmp_buf_èg
;

746 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

752 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

753 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

754 
__THROW
 
	`__n⁄nuŒ
 ((1));

757 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

761 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

762 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

768 #ifde‡
__USE_XOPEN2K


770 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

771 c⁄° 
time•ec
 *
__ª°ri˘


772 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

776 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

777 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

781 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

782 
__ª°ri˘
 
__muãx
,

783 *
__ª°ri˘
 
__¥io˚ûög
)

784 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

788 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

789 
__¥io˚ûög
,

790 *
__ª°ri˘
 
__ﬁd_˚ûög
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

794 #ifde‡
__USE_XOPEN2K8


796 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 #ifde‡
__USE_GNU


799 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

800 
__THROW
 
	`__n⁄nuŒ
 ((1));

809 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

818 
__ª°ri˘
 
__©å
,

819 *
__ª°ri˘
 
__psh¨ed
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

823 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

824 
__psh¨ed
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


829 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


830 
__©å
, *
__ª°ri˘
 
__köd
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

836 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

842 
__ª°ri˘
 
__©å
,

843 *
__ª°ri˘
 
__¥Ÿocﬁ
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__¥Ÿocﬁ
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

853 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

854 
__ª°ri˘
 
__©å
,

855 *
__ª°ri˘
 
__¥io˚ûög
)

856 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

859 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

860 
__¥io˚ûög
)

861 
__THROW
 
	`__n⁄nuŒ
 ((1));

863 #ifde‡
__USE_XOPEN2K


865 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

866 *
__robu°√ss
)

867 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

868 #ifde‡
__USE_GNU


869 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

870 *
__robu°√ss
)

871 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

875 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

876 
__robu°√ss
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

878 #ifde‡
__USE_GNU


879 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

880 
__robu°√ss
)

881 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


891 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

892 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


893 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

896 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

907 #ifde‡
__USE_XOPEN2K


909 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

910 c⁄° 
time•ec
 *
__ª°ri˘


911 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

915 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

916 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

920 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

922 #ifde‡
__USE_XOPEN2K


924 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

925 c⁄° 
time•ec
 *
__ª°ri˘


926 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

930 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

931 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

946 
__ª°ri˘
 
__©å
,

947 *
__ª°ri˘
 
__psh¨ed
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

951 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

952 
__psh¨ed
)

953 
__THROW
 
	`__n⁄nuŒ
 ((1));

956 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

957 
__ª°ri˘
 
__©å
,

958 *
__ª°ri˘
 
__¥ef
)

959 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

962 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

963 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

971 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

972 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

977 
__THROW
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

981 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

993 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

994 
	`__n⁄nuŒ
 ((1, 2));

1003 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1004 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1005 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1006 
	`__n⁄nuŒ
 ((1, 2, 3));

1011 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1012 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1));

1019 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1020 
__ª°ri˘
 
__©å
,

1021 *
__ª°ri˘
 
__psh¨ed
)

1022 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1025 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1026 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 #ifde‡
__USE_XOPEN2K


1030 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1031 
__ª°ri˘
 
__©å
,

1032 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1036 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1037 
__˛ockid_t
 
__˛ock_id
)

1038 
__THROW
 
	`__n⁄nuŒ
 ((1));

1042 #ifde‡
__USE_XOPEN2K


1047 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1048 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1052 
__THROW
 
	`__n⁄nuŒ
 ((1));

1055 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1056 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1072 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1073 
__©å
, 
__cou¡
)

1074 
__THROW
 
	`__n⁄nuŒ
 ((1));

1077 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1));

1081 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1082 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((1));

1090 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1091 
__THROW
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1095 
__ª°ri˘
 
__©å
,

1096 *
__ª°ri˘
 
__psh¨ed
)

1097 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1100 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1101 
__psh¨ed
)

1102 
__THROW
 
	`__n⁄nuŒ
 ((1));

1114 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1115 (*
__de°r_fun˘i⁄
) (*))

1116 
__THROW
 
	`__n⁄nuŒ
 ((1));

1119 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1125 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1126 c⁄° *
__poöãr
Ë
__THROW
 ;

1129 #ifde‡
__USE_XOPEN2K


1131 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1132 
__˛ockid_t
 *
__˛ock_id
)

1133 
__THROW
 
	`__n⁄nuŒ
 ((2));

1148 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1149 (*
__∑ª¡
) (),

1150 (*
__chûd
Ë()Ë
__THROW
;

1153 #ifde‡
__USE_EXTERN_INLINES


1155 
__exã∫_ölöe
 

1156 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1158  
__thªad1
 =
__thªad2
;

1159 
	}
}

1162 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@
1
.
1
/usr/include
389
8237
boot/main.c
fs/bc.c
fs/fs.c
fs/fs.h
fs/fsformat.c
fs/ide.c
fs/serv.c
fs/test.c
fs/vmx_host.c
inc/args.h
inc/assert.h
inc/elf.h
inc/env.h
inc/ept.h
inc/error.h
inc/fd.h
inc/fs.h
inc/kbdreg.h
inc/lib.h
inc/malloc.h
inc/memlayout.h
inc/mmu.h
inc/ns.h
inc/queue.h
inc/stab.h
inc/stdarg.h
inc/stdio.h
inc/string.h
inc/syscall.h
inc/trap.h
inc/types.h
inc/vmx.h
inc/x86.h
kern/console.c
kern/console.h
kern/cpu.h
kern/dwarf.h
kern/dwarf_api.h
kern/dwarf_define.h
kern/dwarf_elf.h
kern/dwarf_error.h
kern/dwarf_lineno.h
kern/e1000.c
kern/e1000.h
kern/elf_rw.c
kern/env.c
kern/env.h
kern/init.c
kern/kclock.c
kern/kclock.h
kern/kdebug.c
kern/kdebug.h
kern/lapic.c
kern/libdwarf_frame.c
kern/libdwarf_lineno.c
kern/libdwarf_rw.c
kern/macro.h
kern/monitor.c
kern/monitor.h
kern/mpconfig.c
kern/multiboot.h
kern/pci.c
kern/pci.h
kern/pcireg.h
kern/picirq.c
kern/picirq.h
kern/pmap.c
kern/pmap.h
kern/printf.c
kern/sched.c
kern/sched.h
kern/spinlock.c
kern/spinlock.h
kern/syscall.c
kern/syscall.h
kern/time.c
kern/time.h
kern/trap.c
kern/trap.h
lib/args.c
lib/console.c
lib/exit.c
lib/fd.c
lib/file.c
lib/fork.c
lib/fprintf.c
lib/ipc.c
lib/libmain.c
lib/malloc.c
lib/nsipc.c
lib/pageref.c
lib/panic.c
lib/pgfault.c
lib/pipe.c
lib/printf.c
lib/printfmt.c
lib/readline.c
lib/sockets.c
lib/spawn.c
lib/string.c
lib/syscall.c
lib/wait.c
net/input.c
net/lwip/api/api_lib.c
net/lwip/api/api_msg.c
net/lwip/api/err.c
net/lwip/api/netbuf.c
net/lwip/api/netdb.c
net/lwip/api/netifapi.c
net/lwip/api/sockets.c
net/lwip/api/tcpip.c
net/lwip/core/dhcp.c
net/lwip/core/dns.c
net/lwip/core/init.c
net/lwip/core/ipv4/autoip.c
net/lwip/core/ipv4/icmp.c
net/lwip/core/ipv4/igmp.c
net/lwip/core/ipv4/inet.c
net/lwip/core/ipv4/inet_chksum.c
net/lwip/core/ipv4/ip.c
net/lwip/core/ipv4/ip_addr.c
net/lwip/core/ipv4/ip_frag.c
net/lwip/core/ipv6/icmp6.c
net/lwip/core/ipv6/inet6.c
net/lwip/core/ipv6/ip6.c
net/lwip/core/ipv6/ip6_addr.c
net/lwip/core/mem.c
net/lwip/core/memp.c
net/lwip/core/netif.c
net/lwip/core/pbuf.c
net/lwip/core/raw.c
net/lwip/core/snmp/asn1_dec.c
net/lwip/core/snmp/asn1_enc.c
net/lwip/core/snmp/mib2.c
net/lwip/core/snmp/mib_structs.c
net/lwip/core/snmp/msg_in.c
net/lwip/core/snmp/msg_out.c
net/lwip/core/stats.c
net/lwip/core/sys.c
net/lwip/core/tcp.c
net/lwip/core/tcp_in.c
net/lwip/core/tcp_out.c
net/lwip/core/udp.c
net/lwip/include/ipv4/lwip/autoip.h
net/lwip/include/ipv4/lwip/icmp.h
net/lwip/include/ipv4/lwip/igmp.h
net/lwip/include/ipv4/lwip/inet.h
net/lwip/include/ipv4/lwip/inet_chksum.h
net/lwip/include/ipv4/lwip/ip.h
net/lwip/include/ipv4/lwip/ip_addr.h
net/lwip/include/ipv4/lwip/ip_frag.h
net/lwip/include/ipv6/lwip/icmp.h
net/lwip/include/ipv6/lwip/inet.h
net/lwip/include/ipv6/lwip/ip.h
net/lwip/include/ipv6/lwip/ip_addr.h
net/lwip/include/lwip/api.h
net/lwip/include/lwip/api_msg.h
net/lwip/include/lwip/arch.h
net/lwip/include/lwip/debug.h
net/lwip/include/lwip/def.h
net/lwip/include/lwip/dhcp.h
net/lwip/include/lwip/dns.h
net/lwip/include/lwip/err.h
net/lwip/include/lwip/init.h
net/lwip/include/lwip/mem.h
net/lwip/include/lwip/memp.h
net/lwip/include/lwip/memp_std.h
net/lwip/include/lwip/netbuf.h
net/lwip/include/lwip/netdb.h
net/lwip/include/lwip/netif.h
net/lwip/include/lwip/netifapi.h
net/lwip/include/lwip/opt.h
net/lwip/include/lwip/pbuf.h
net/lwip/include/lwip/raw.h
net/lwip/include/lwip/sio.h
net/lwip/include/lwip/snmp.h
net/lwip/include/lwip/snmp_asn1.h
net/lwip/include/lwip/snmp_msg.h
net/lwip/include/lwip/snmp_structs.h
net/lwip/include/lwip/sockets.h
net/lwip/include/lwip/stats.h
net/lwip/include/lwip/sys.h
net/lwip/include/lwip/tcp.h
net/lwip/include/lwip/tcpip.h
net/lwip/include/lwip/udp.h
net/lwip/include/netif/etharp.h
net/lwip/include/netif/loopif.h
net/lwip/include/netif/ppp_oe.h
net/lwip/include/netif/slipif.h
net/lwip/jos/arch/cc.h
net/lwip/jos/arch/i386/setjmp.h
net/lwip/jos/arch/perf.h
net/lwip/jos/arch/perror.c
net/lwip/jos/arch/perror.h
net/lwip/jos/arch/queue.h
net/lwip/jos/arch/setjmp.h
net/lwip/jos/arch/sys_arch.c
net/lwip/jos/arch/sys_arch.h
net/lwip/jos/arch/thread.c
net/lwip/jos/arch/thread.h
net/lwip/jos/arch/threadq.h
net/lwip/jos/jif/jif.c
net/lwip/jos/jif/jif.h
net/lwip/jos/lwipopts.h
net/lwip/netif/etharp.c
net/lwip/netif/ethernetif.c
net/lwip/netif/loopif.c
net/lwip/netif/ppp/auth.c
net/lwip/netif/ppp/auth.h
net/lwip/netif/ppp/chap.c
net/lwip/netif/ppp/chap.h
net/lwip/netif/ppp/chpms.c
net/lwip/netif/ppp/chpms.h
net/lwip/netif/ppp/fsm.c
net/lwip/netif/ppp/fsm.h
net/lwip/netif/ppp/ipcp.c
net/lwip/netif/ppp/ipcp.h
net/lwip/netif/ppp/lcp.c
net/lwip/netif/ppp/lcp.h
net/lwip/netif/ppp/magic.c
net/lwip/netif/ppp/magic.h
net/lwip/netif/ppp/md5.c
net/lwip/netif/ppp/md5.h
net/lwip/netif/ppp/pap.c
net/lwip/netif/ppp/pap.h
net/lwip/netif/ppp/ppp.c
net/lwip/netif/ppp/ppp.h
net/lwip/netif/ppp/ppp_oe.c
net/lwip/netif/ppp/pppdebug.h
net/lwip/netif/ppp/randm.c
net/lwip/netif/ppp/randm.h
net/lwip/netif/ppp/vj.c
net/lwip/netif/ppp/vj.h
net/lwip/netif/ppp/vjbsdhdr.h
net/lwip/netif/slipif.c
net/ns.h
net/output.c
net/serv.c
net/testinput.c
net/testoutput.c
net/timer.c
user/badsegment.c
user/breakpoint.c
user/buggyhello.c
user/buggyhello2.c
user/cat.c
user/divzero.c
user/dumbfork.c
user/echo.c
user/echosrv.c
user/echotest.c
user/evilhello.c
user/fairness.c
user/faultalloc.c
user/faultallocbad.c
user/faultbadhandler.c
user/faultdie.c
user/faultevilhandler.c
user/faultnostack.c
user/faultread.c
user/faultreadkernel.c
user/faultregs.c
user/faultwrite.c
user/faultwritekernel.c
user/forktree.c
user/hello.c
user/httpd.c
user/icode.c
user/idle.c
user/init.c
user/initsh.c
user/ls.c
user/lsfd.c
user/num.c
user/pingpong.c
user/pingpongs.c
user/primes.c
user/primespipe.c
user/sendpage.c
user/sh.c
user/softint.c
user/spawnhello.c
user/spawninit.c
user/spin.c
user/stresssched.c
user/testbss.c
user/testfdsharing.c
user/testfile.c
user/testfilero.c
user/testkbd.c
user/testmalloc.c
user/testpipe.c
user/testpiperace.c
user/testpiperace2.c
user/testptelibrary.c
user/testpteshare.c
user/testshell.c
user/testtime.c
user/vmm.c
user/vmmanager.c
user/writemotd.c
user/yield.c
vmm/ept.c
vmm/ept.h
vmm/vmexits.c
vmm/vmexits.h
vmm/vmx.c
vmm/vmx.h
vmm/vmx_asm.h
/usr/include/assert.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/mman.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/stdint.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/timex.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
