
vmm/guest/obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
_head64:

# Save multiboot_info addr passed by bootloader
#ifdef VMM_GUEST
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
  100000:	b8 01 00 00 00       	mov    $0x1,%eax
    vmcall
  100005:	0f 01 c1             	vmcall 
#endif
	
    movl $multiboot_info, %eax
  100008:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  10000d:	89 18                	mov    %ebx,(%rax)
#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  10000f:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100014:	e8 cc 00 00 00       	callq  1000e5 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
  100019:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif
    movl %eax,%cr4
  10001e:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100021:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100026:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100028:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002d:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  10002f:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100034:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  100039:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  10003f:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100041:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100046:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  100049:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004c:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  10004f:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100054:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  100059:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  10005f:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100061:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100066:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006b:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006e:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100071:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100073:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100078:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007d:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100082:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100088:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008d:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  10008f:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100091:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100094:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100097:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009c:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  10009f:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a2:	75 e9                	jne    10008d <_head64+0x8d>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a4:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000a9:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ac:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b1:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b3:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b7:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000b9:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bc:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000bf:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c4:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000c9:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000ce:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d1:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d4:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000d9:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dc:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000de:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e3:	50                   	push   %rax

00000000001000e4 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e4:	cb                   	lret   

00000000001000e5 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e5:	9c                   	pushfq 
    popl %eax
  1000e6:	58                   	pop    %rax
    movl %eax,%ecx
  1000e7:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000e9:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ee:	50                   	push   %rax
    popfl
  1000ef:	9d                   	popfq  
    pushfl
  1000f0:	9c                   	pushfq 
    popl %eax
  1000f1:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f2:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f4:	74 1c                	je     100112 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f6:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fb:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fd:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100100:	72 10                	jb     100112 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100102:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100107:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  100109:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  10010f:	74 01                	je     100112 <verify_cpu_no_longmode>

    ret
  100111:	c3                   	retq   

0000000000100112 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100112:	eb fe                	jmp    100112 <verify_cpu_no_longmode>
  100114:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011b:	00 00 00 
  10011e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100125:	00 00 00 
  100128:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10012f:	00 00 00 
  100132:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100139:	00 00 00 
  10013c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100143:	00 00 00 
  100146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014d:	00 00 00 
  100150:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100157:	00 00 00 
  10015a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100161:	00 00 00 
  100164:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016b:	00 00 00 
  10016e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100175:	00 00 00 
  100178:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10017f:	00 00 00 
  100182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100189:	00 00 00 
  10018c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100193:	00 00 00 
  100196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019d:	00 00 00 
  1001a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a7:	00 00 00 
  1001aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b1:	00 00 00 
  1001b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bb:	00 00 00 
  1001be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c5:	00 00 00 
  1001c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001cf:	00 00 00 
  1001d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d9:	00 00 00 
  1001dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e3:	00 00 00 
  1001e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ed:	00 00 00 
  1001f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f7:	00 00 00 
  1001fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100201:	00 00 00 
  100204:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020b:	00 00 00 
  10020e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100215:	00 00 00 
  100218:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10021f:	00 00 00 
  100222:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100229:	00 00 00 
  10022c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100233:	00 00 00 
  100236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023d:	00 00 00 
  100240:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100247:	00 00 00 
  10024a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100251:	00 00 00 
  100254:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025b:	00 00 00 
  10025e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100265:	00 00 00 
  100268:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10026f:	00 00 00 
  100272:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100279:	00 00 00 
  10027c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100283:	00 00 00 
  100286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028d:	00 00 00 
  100290:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100297:	00 00 00 
  10029a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a1:	00 00 00 
  1002a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ab:	00 00 00 
  1002ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b5:	00 00 00 
  1002b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002bf:	00 00 00 
  1002c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c9:	00 00 00 
  1002cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d3:	00 00 00 
  1002d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002dd:	00 00 00 
  1002e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e7:	00 00 00 
  1002ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f1:	00 00 00 
  1002f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fb:	00 00 00 
  1002fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100305:	00 00 00 
  100308:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10030f:	00 00 00 
  100312:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100319:	00 00 00 
  10031c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100323:	00 00 00 
  100326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032d:	00 00 00 
  100330:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100337:	00 00 00 
  10033a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100341:	00 00 00 
  100344:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034b:	00 00 00 
  10034e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100355:	00 00 00 
  100358:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10035f:	00 00 00 
  100362:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100369:	00 00 00 
  10036c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100373:	00 00 00 
  100376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037d:	00 00 00 
  100380:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100387:	00 00 00 
  10038a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100391:	00 00 00 
  100394:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039b:	00 00 00 
  10039e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a5:	00 00 00 
  1003a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003af:	00 00 00 
  1003b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b9:	00 00 00 
  1003bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c3:	00 00 00 
  1003c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003cd:	00 00 00 
  1003d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d7:	00 00 00 
  1003da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e1:	00 00 00 
  1003e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003eb:	00 00 00 
  1003ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f5:	00 00 00 
  1003f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ff:	00 00 00 
  100402:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100409:	00 00 00 
  10040c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100413:	00 00 00 
  100416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041d:	00 00 00 
  100420:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100427:	00 00 00 
  10042a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100431:	00 00 00 
  100434:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043b:	00 00 00 
  10043e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100445:	00 00 00 
  100448:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10044f:	00 00 00 
  100452:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100459:	00 00 00 
  10045c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100463:	00 00 00 
  100466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046d:	00 00 00 
  100470:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100477:	00 00 00 
  10047a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100481:	00 00 00 
  100484:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048b:	00 00 00 
  10048e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100495:	00 00 00 
  100498:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10049f:	00 00 00 
  1004a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a9:	00 00 00 
  1004ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b3:	00 00 00 
  1004b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004bd:	00 00 00 
  1004c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c7:	00 00 00 
  1004ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d1:	00 00 00 
  1004d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004db:	00 00 00 
  1004de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e5:	00 00 00 
  1004e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004ef:	00 00 00 
  1004f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f9:	00 00 00 
  1004fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100503:	00 00 00 
  100506:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050d:	00 00 00 
  100510:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100517:	00 00 00 
  10051a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100521:	00 00 00 
  100524:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052b:	00 00 00 
  10052e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100535:	00 00 00 
  100538:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10053f:	00 00 00 
  100542:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100549:	00 00 00 
  10054c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100553:	00 00 00 
  100556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055d:	00 00 00 
  100560:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100567:	00 00 00 
  10056a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100571:	00 00 00 
  100574:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057b:	00 00 00 
  10057e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100585:	00 00 00 
  100588:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10058f:	00 00 00 
  100592:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100599:	00 00 00 
  10059c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a3:	00 00 00 
  1005a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ad:	00 00 00 
  1005b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b7:	00 00 00 
  1005ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c1:	00 00 00 
  1005c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cb:	00 00 00 
  1005ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d5:	00 00 00 
  1005d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005df:	00 00 00 
  1005e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e9:	00 00 00 
  1005ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f3:	00 00 00 
  1005f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fd:	00 00 00 
  100600:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100607:	00 00 00 
  10060a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100611:	00 00 00 
  100614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061b:	00 00 00 
  10061e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100625:	00 00 00 
  100628:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10062f:	00 00 00 
  100632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100639:	00 00 00 
  10063c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100643:	00 00 00 
  100646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064d:	00 00 00 
  100650:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100657:	00 00 00 
  10065a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100661:	00 00 00 
  100664:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066b:	00 00 00 
  10066e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100675:	00 00 00 
  100678:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10067f:	00 00 00 
  100682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100689:	00 00 00 
  10068c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100693:	00 00 00 
  100696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069d:	00 00 00 
  1006a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a7:	00 00 00 
  1006aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b1:	00 00 00 
  1006b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bb:	00 00 00 
  1006be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c5:	00 00 00 
  1006c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006cf:	00 00 00 
  1006d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d9:	00 00 00 
  1006dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e3:	00 00 00 
  1006e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ed:	00 00 00 
  1006f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f7:	00 00 00 
  1006fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100701:	00 00 00 
  100704:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070b:	00 00 00 
  10070e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100715:	00 00 00 
  100718:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10071f:	00 00 00 
  100722:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100729:	00 00 00 
  10072c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100733:	00 00 00 
  100736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073d:	00 00 00 
  100740:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100747:	00 00 00 
  10074a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100751:	00 00 00 
  100754:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075b:	00 00 00 
  10075e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100765:	00 00 00 
  100768:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10076f:	00 00 00 
  100772:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100779:	00 00 00 
  10077c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100783:	00 00 00 
  100786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078d:	00 00 00 
  100790:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100797:	00 00 00 
  10079a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a1:	00 00 00 
  1007a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ab:	00 00 00 
  1007ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b5:	00 00 00 
  1007b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007bf:	00 00 00 
  1007c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c9:	00 00 00 
  1007cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d3:	00 00 00 
  1007d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007dd:	00 00 00 
  1007e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e7:	00 00 00 
  1007ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f1:	00 00 00 
  1007f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fb:	00 00 00 
  1007fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100805:	00 00 00 
  100808:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10080f:	00 00 00 
  100812:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100819:	00 00 00 
  10081c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100823:	00 00 00 
  100826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082d:	00 00 00 
  100830:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100837:	00 00 00 
  10083a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100841:	00 00 00 
  100844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084b:	00 00 00 
  10084e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100855:	00 00 00 
  100858:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10085f:	00 00 00 
  100862:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100869:	00 00 00 
  10086c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100873:	00 00 00 
  100876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087d:	00 00 00 
  100880:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100887:	00 00 00 
  10088a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100891:	00 00 00 
  100894:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089b:	00 00 00 
  10089e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a5:	00 00 00 
  1008a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008af:	00 00 00 
  1008b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b9:	00 00 00 
  1008bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c3:	00 00 00 
  1008c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008cd:	00 00 00 
  1008d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d7:	00 00 00 
  1008da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e1:	00 00 00 
  1008e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008eb:	00 00 00 
  1008ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f5:	00 00 00 
  1008f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ff:	00 00 00 
  100902:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100909:	00 00 00 
  10090c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100913:	00 00 00 
  100916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091d:	00 00 00 
  100920:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100927:	00 00 00 
  10092a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100931:	00 00 00 
  100934:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093b:	00 00 00 
  10093e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100945:	00 00 00 
  100948:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10094f:	00 00 00 
  100952:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100959:	00 00 00 
  10095c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100963:	00 00 00 
  100966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096d:	00 00 00 
  100970:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100977:	00 00 00 
  10097a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100981:	00 00 00 
  100984:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098b:	00 00 00 
  10098e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100995:	00 00 00 
  100998:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10099f:	00 00 00 
  1009a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a9:	00 00 00 
  1009ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b3:	00 00 00 
  1009b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009bd:	00 00 00 
  1009c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c7:	00 00 00 
  1009ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d1:	00 00 00 
  1009d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009db:	00 00 00 
  1009de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e5:	00 00 00 
  1009e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009ef:	00 00 00 
  1009f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f9:	00 00 00 
  1009fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a03:	00 00 00 
  100a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0d:	00 00 00 
  100a10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a17:	00 00 00 
  100a1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a21:	00 00 00 
  100a24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2b:	00 00 00 
  100a2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a35:	00 00 00 
  100a38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a3f:	00 00 00 
  100a42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a49:	00 00 00 
  100a4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a53:	00 00 00 
  100a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5d:	00 00 00 
  100a60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a67:	00 00 00 
  100a6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a71:	00 00 00 
  100a74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7b:	00 00 00 
  100a7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a85:	00 00 00 
  100a88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a8f:	00 00 00 
  100a92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a99:	00 00 00 
  100a9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa3:	00 00 00 
  100aa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aad:	00 00 00 
  100ab0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab7:	00 00 00 
  100aba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac1:	00 00 00 
  100ac4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acb:	00 00 00 
  100ace:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad5:	00 00 00 
  100ad8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100adf:	00 00 00 
  100ae2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae9:	00 00 00 
  100aec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af3:	00 00 00 
  100af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afd:	00 00 00 
  100b00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b07:	00 00 00 
  100b0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b11:	00 00 00 
  100b14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1b:	00 00 00 
  100b1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b25:	00 00 00 
  100b28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b2f:	00 00 00 
  100b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b39:	00 00 00 
  100b3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b43:	00 00 00 
  100b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4d:	00 00 00 
  100b50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b57:	00 00 00 
  100b5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b61:	00 00 00 
  100b64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6b:	00 00 00 
  100b6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b75:	00 00 00 
  100b78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b7f:	00 00 00 
  100b82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b89:	00 00 00 
  100b8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b93:	00 00 00 
  100b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9d:	00 00 00 
  100ba0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba7:	00 00 00 
  100baa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb1:	00 00 00 
  100bb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbb:	00 00 00 
  100bbe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc5:	00 00 00 
  100bc8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bcf:	00 00 00 
  100bd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd9:	00 00 00 
  100bdc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be3:	00 00 00 
  100be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bed:	00 00 00 
  100bf0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf7:	00 00 00 
  100bfa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c01:	00 00 00 
  100c04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0b:	00 00 00 
  100c0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c15:	00 00 00 
  100c18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c1f:	00 00 00 
  100c22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c29:	00 00 00 
  100c2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c33:	00 00 00 
  100c36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3d:	00 00 00 
  100c40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c47:	00 00 00 
  100c4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c51:	00 00 00 
  100c54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5b:	00 00 00 
  100c5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c65:	00 00 00 
  100c68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c6f:	00 00 00 
  100c72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c79:	00 00 00 
  100c7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c83:	00 00 00 
  100c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8d:	00 00 00 
  100c90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c97:	00 00 00 
  100c9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca1:	00 00 00 
  100ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cab:	00 00 00 
  100cae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb5:	00 00 00 
  100cb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cbf:	00 00 00 
  100cc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc9:	00 00 00 
  100ccc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd3:	00 00 00 
  100cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cdd:	00 00 00 
  100ce0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce7:	00 00 00 
  100cea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf1:	00 00 00 
  100cf4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfb:	00 00 00 
  100cfe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d05:	00 00 00 
  100d08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d0f:	00 00 00 
  100d12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d19:	00 00 00 
  100d1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d23:	00 00 00 
  100d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2d:	00 00 00 
  100d30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d37:	00 00 00 
  100d3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d41:	00 00 00 
  100d44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4b:	00 00 00 
  100d4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d55:	00 00 00 
  100d58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d5f:	00 00 00 
  100d62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d69:	00 00 00 
  100d6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d73:	00 00 00 
  100d76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7d:	00 00 00 
  100d80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d87:	00 00 00 
  100d8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d91:	00 00 00 
  100d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9b:	00 00 00 
  100d9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da5:	00 00 00 
  100da8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100daf:	00 00 00 
  100db2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db9:	00 00 00 
  100dbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc3:	00 00 00 
  100dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dcd:	00 00 00 
  100dd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd7:	00 00 00 
  100dda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de1:	00 00 00 
  100de4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100deb:	00 00 00 
  100dee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df5:	00 00 00 
  100df8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dff:	00 00 00 
  100e02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e09:	00 00 00 
  100e0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e13:	00 00 00 
  100e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1d:	00 00 00 
  100e20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e27:	00 00 00 
  100e2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e31:	00 00 00 
  100e34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3b:	00 00 00 
  100e3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e45:	00 00 00 
  100e48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e4f:	00 00 00 
  100e52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e59:	00 00 00 
  100e5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e63:	00 00 00 
  100e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6d:	00 00 00 
  100e70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e77:	00 00 00 
  100e7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e81:	00 00 00 
  100e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8b:	00 00 00 
  100e8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e95:	00 00 00 
  100e98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e9f:	00 00 00 
  100ea2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea9:	00 00 00 
  100eac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb3:	00 00 00 
  100eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebd:	00 00 00 
  100ec0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec7:	00 00 00 
  100eca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed1:	00 00 00 
  100ed4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edb:	00 00 00 
  100ede:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee5:	00 00 00 
  100ee8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eef:	00 00 00 
  100ef2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef9:	00 00 00 
  100efc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f03:	00 00 00 
  100f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0d:	00 00 00 
  100f10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f17:	00 00 00 
  100f1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f21:	00 00 00 
  100f24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2b:	00 00 00 
  100f2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f35:	00 00 00 
  100f38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f3f:	00 00 00 
  100f42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f49:	00 00 00 
  100f4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f53:	00 00 00 
  100f56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5d:	00 00 00 
  100f60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f67:	00 00 00 
  100f6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f71:	00 00 00 
  100f74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7b:	00 00 00 
  100f7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f85:	00 00 00 
  100f88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f8f:	00 00 00 
  100f92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f99:	00 00 00 
  100f9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa3:	00 00 00 
  100fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fad:	00 00 00 
  100fb0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb7:	00 00 00 
  100fba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc1:	00 00 00 
  100fc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcb:	00 00 00 
  100fce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd5:	00 00 00 
  100fd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fdf:	00 00 00 
  100fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe9:	00 00 00 
  100fec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff3:	00 00 00 
  100ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ffd:	00 00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 c0 22 04 80 	movabs $0x800422c038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 c0 22 04 80 	movabs $0x800422c000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 9e 01 20 04 80 	movabs $0x800420019e,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	53                   	push   %rbx
  800420005d:	48 83 ec 38          	sub    $0x38,%rsp
  8004200061:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  8004200064:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004200068:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800420006c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200070:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  8004200074:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200077:	0f a2                	cpuid  
  8004200079:	89 de                	mov    %ebx,%esi
  800420007b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420007e:	89 75 f0             	mov    %esi,-0x10(%rbp)
  8004200081:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  8004200084:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  8004200087:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420008c:	74 09                	je     8004200097 <cpuid+0x3f>
		*eaxp = eax;
  800420008e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200092:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200095:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  8004200097:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420009c:	74 09                	je     80042000a7 <cpuid+0x4f>
		*ebxp = ebx;
  800420009e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042000a2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042000a5:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  80042000a7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042000ac:	74 09                	je     80042000b7 <cpuid+0x5f>
		*ecxp = ecx;
  80042000ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042000b2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042000b5:	89 10                	mov    %edx,(%rax)
	if (edxp)
  80042000b7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042000bc:	74 09                	je     80042000c7 <cpuid+0x6f>
		*edxp = edx;
  80042000be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042000c2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042000c5:	89 10                	mov    %edx,(%rax)
}
  80042000c7:	48 83 c4 38          	add    $0x38,%rsp
  80042000cb:	5b                   	pop    %rbx
  80042000cc:	5d                   	pop    %rbp
  80042000cd:	c3                   	retq   

00000080042000ce <xchg>:

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042000ce:	55                   	push   %rbp
  80042000cf:	48 89 e5             	mov    %rsp,%rbp
  80042000d2:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042000d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042000da:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042000dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042000e1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042000e4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042000e8:	f0 87 02             	lock xchg %eax,(%rdx)
  80042000eb:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042000ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042000f1:	c9                   	leaveq 
  80042000f2:	c3                   	retq   

00000080042000f3 <lock_kernel>:
  80042000f3:	55                   	push   %rbp
  80042000f4:	48 89 e5             	mov    %rsp,%rbp
  80042000f7:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  80042000fe:	00 00 00 
  8004200101:	48 b8 0d 77 21 04 80 	movabs $0x800421770d,%rax
  8004200108:	00 00 00 
  800420010b:	ff d0                	callq  *%rax
  800420010d:	5d                   	pop    %rbp
  800420010e:	c3                   	retq   

000000800420010f <vmcall>:
  800420010f:	55                   	push   %rbp
  8004200110:	48 89 e5             	mov    %rsp,%rbp
  8004200113:	53                   	push   %rbx
  8004200114:	48 83 ec 48          	sub    $0x48,%rsp
  8004200118:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420011b:	89 75 d8             	mov    %esi,-0x28(%rbp)
  800420011e:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004200122:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200126:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  800420012a:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  800420012e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200131:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004200135:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004200139:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  800420013d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004200141:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004200145:	4c 89 c3             	mov    %r8,%rbx
  8004200148:	0f 01 c1             	vmcall 
  800420014b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420014f:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004200153:	74 3e                	je     8004200193 <vmcall+0x84>
  8004200155:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420015a:	7e 37                	jle    8004200193 <vmcall+0x84>
  800420015c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004200160:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200163:	49 89 d0             	mov    %rdx,%r8
  8004200166:	89 c1                	mov    %eax,%ecx
  8004200168:	48 ba 60 8c 21 04 80 	movabs $0x8004218c60,%rdx
  800420016f:	00 00 00 
  8004200172:	be 35 00 00 00       	mov    $0x35,%esi
  8004200177:	48 bf 7c 8c 21 04 80 	movabs $0x8004218c7c,%rdi
  800420017e:	00 00 00 
  8004200181:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200186:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  800420018d:	00 00 00 
  8004200190:	41 ff d1             	callq  *%r9
  8004200193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004200197:	48 83 c4 48          	add    $0x48,%rsp
  800420019b:	5b                   	pop    %rbx
  800420019c:	5d                   	pop    %rbp
  800420019d:	c3                   	retq   

000000800420019e <i386_init>:
  800420019e:	55                   	push   %rbp
  800420019f:	48 89 e5             	mov    %rsp,%rbp
  80042001a2:	48 83 ec 10          	sub    $0x10,%rsp
  80042001a6:	48 ba 10 00 6e 04 80 	movabs $0x80046e0010,%rdx
  80042001ad:	00 00 00 
  80042001b0:	48 b8 c0 d5 49 04 80 	movabs $0x800449d5c0,%rax
  80042001b7:	00 00 00 
  80042001ba:	48 29 c2             	sub    %rax,%rdx
  80042001bd:	48 89 d0             	mov    %rdx,%rax
  80042001c0:	48 89 c2             	mov    %rax,%rdx
  80042001c3:	be 00 00 00 00       	mov    $0x0,%esi
  80042001c8:	48 bf c0 d5 49 04 80 	movabs $0x800449d5c0,%rdi
  80042001cf:	00 00 00 
  80042001d2:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042001d9:	00 00 00 
  80042001dc:	ff d0                	callq  *%rax
  80042001de:	48 b8 e1 12 20 04 80 	movabs $0x80042012e1,%rax
  80042001e5:	00 00 00 
  80042001e8:	ff d0                	callq  *%rax
  80042001ea:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042001ef:	48 bf 8b 8c 21 04 80 	movabs $0x8004218c8b,%rdi
  80042001f6:	00 00 00 
  80042001f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042001fe:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004200205:	00 00 00 
  8004200208:	ff d2                	callq  *%rdx
  800420020a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200211:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004200215:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420021b:	48 89 c1             	mov    %rax,%rcx
  800420021e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004200223:	be 00 00 00 00       	mov    $0x0,%esi
  8004200228:	bf 01 00 00 00       	mov    $0x1,%edi
  800420022d:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  8004200234:	00 00 00 
  8004200237:	ff d0                	callq  *%rax
  8004200239:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420023c:	83 e0 20             	and    $0x20,%eax
  800420023f:	85 c0                	test   %eax,%eax
  8004200241:	74 2a                	je     800420026d <i386_init+0xcf>
  8004200243:	48 ba a8 8c 21 04 80 	movabs $0x8004218ca8,%rdx
  800420024a:	00 00 00 
  800420024d:	be 68 00 00 00       	mov    $0x68,%esi
  8004200252:	48 bf 7c 8c 21 04 80 	movabs $0x8004218c7c,%rdi
  8004200259:	00 00 00 
  800420025c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200261:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004200268:	00 00 00 
  800420026b:	ff d1                	callq  *%rcx
  800420026d:	48 bf d0 8c 21 04 80 	movabs $0x8004218cd0,%rdi
  8004200274:	00 00 00 
  8004200277:	b8 00 00 00 00       	mov    $0x0,%eax
  800420027c:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004200283:	00 00 00 
  8004200286:	ff d2                	callq  *%rdx
  8004200288:	b8 00 00 00 00       	mov    $0x0,%eax
  800420028d:	48 ba 76 27 20 04 80 	movabs $0x8004202776,%rdx
  8004200294:	00 00 00 
  8004200297:	ff d2                	callq  *%rdx
  8004200299:	48 b8 a6 80 20 04 80 	movabs $0x80042080a6,%rax
  80042002a0:	00 00 00 
  80042002a3:	ff d0                	callq  *%rax
  80042002a5:	48 b8 08 97 20 04 80 	movabs $0x8004209708,%rax
  80042002ac:	00 00 00 
  80042002af:	ff d0                	callq  *%rax
  80042002b1:	48 b8 90 92 20 04 80 	movabs $0x8004209290,%rax
  80042002b8:	00 00 00 
  80042002bb:	ff d0                	callq  *%rax
  80042002bd:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042002c4:	00 00 00 
  80042002c7:	ff d0                	callq  *%rax
  80042002c9:	be 01 00 00 00       	mov    $0x1,%esi
  80042002ce:	48 bf 40 5b 2b 04 80 	movabs $0x80042b5b40,%rdi
  80042002d5:	00 00 00 
  80042002d8:	48 b8 44 89 20 04 80 	movabs $0x8004208944,%rax
  80042002df:	00 00 00 
  80042002e2:	ff d0                	callq  *%rax
  80042002e4:	be 00 00 00 00       	mov    $0x0,%esi
  80042002e9:	48 bf 00 da 29 04 80 	movabs $0x800429da00,%rdi
  80042002f0:	00 00 00 
  80042002f3:	48 b8 44 89 20 04 80 	movabs $0x8004208944,%rax
  80042002fa:	00 00 00 
  80042002fd:	ff d0                	callq  *%rax
  80042002ff:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004200306:	00 00 00 
  8004200309:	ff d0                	callq  *%rax
  800420030b:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  8004200312:	00 00 00 
  8004200315:	ff d0                	callq  *%rax

0000008004200317 <boot_aps>:
  8004200317:	55                   	push   %rbp
  8004200318:	48 89 e5             	mov    %rsp,%rbp
  800420031b:	48 83 ec 30          	sub    $0x30,%rsp
  800420031f:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  8004200326:	00 
  8004200327:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420032b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420032f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200332:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200335:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420033c:	00 00 00 
  800420033f:	48 8b 00             	mov    (%rax),%rax
  8004200342:	48 39 c2             	cmp    %rax,%rdx
  8004200345:	72 32                	jb     8004200379 <boot_aps+0x62>
  8004200347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420034b:	48 89 c1             	mov    %rax,%rcx
  800420034e:	48 ba f8 8c 21 04 80 	movabs $0x8004218cf8,%rdx
  8004200355:	00 00 00 
  8004200358:	be 01 01 00 00       	mov    $0x101,%esi
  800420035d:	48 bf 7c 8c 21 04 80 	movabs $0x8004218c7c,%rdi
  8004200364:	00 00 00 
  8004200367:	b8 00 00 00 00       	mov    $0x0,%eax
  800420036c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004200373:	00 00 00 
  8004200376:	41 ff d0             	callq  *%r8
  8004200379:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200380:	00 00 00 
  8004200383:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200387:	48 01 d0             	add    %rdx,%rax
  800420038a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420038e:	48 ba 56 68 21 04 80 	movabs $0x8004216856,%rdx
  8004200395:	00 00 00 
  8004200398:	48 b8 70 67 21 04 80 	movabs $0x8004216770,%rax
  800420039f:	00 00 00 
  80042003a2:	48 29 c2             	sub    %rax,%rdx
  80042003a5:	48 89 d0             	mov    %rdx,%rax
  80042003a8:	48 89 c2             	mov    %rax,%rdx
  80042003ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042003af:	48 be 70 67 21 04 80 	movabs $0x8004216770,%rsi
  80042003b6:	00 00 00 
  80042003b9:	48 89 c7             	mov    %rax,%rdi
  80042003bc:	48 b8 0f 04 21 04 80 	movabs $0x800421040f,%rax
  80042003c3:	00 00 00 
  80042003c6:	ff d0                	callq  *%rax
  80042003c8:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  80042003cf:	00 00 00 
  80042003d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042003d6:	e9 0e 01 00 00       	jmpq   80042004e9 <boot_aps+0x1d2>
  80042003db:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  80042003e2:	00 00 00 
  80042003e5:	ff d0                	callq  *%rax
  80042003e7:	48 98                	cltq   
  80042003e9:	48 c1 e0 03          	shl    $0x3,%rax
  80042003ed:	48 89 c2             	mov    %rax,%rdx
  80042003f0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003f4:	48 01 c2             	add    %rax,%rdx
  80042003f7:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  80042003fe:	00 00 00 
  8004200401:	48 01 d0             	add    %rdx,%rax
  8004200404:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200408:	75 05                	jne    800420040f <boot_aps+0xf8>
  800420040a:	e9 d2 00 00 00       	jmpq   80042004e1 <boot_aps+0x1ca>
  800420040f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200413:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420041a:	00 00 00 
  800420041d:	48 29 c2             	sub    %rax,%rdx
  8004200420:	48 89 d0             	mov    %rdx,%rax
  8004200423:	48 c1 f8 03          	sar    $0x3,%rax
  8004200427:	48 89 c2             	mov    %rax,%rdx
  800420042a:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200431:	f0 f0 f0 
  8004200434:	48 0f af c2          	imul   %rdx,%rax
  8004200438:	48 83 c0 01          	add    $0x1,%rax
  800420043c:	48 c1 e0 10          	shl    $0x10,%rax
  8004200440:	48 89 c2             	mov    %rax,%rdx
  8004200443:	48 b8 00 00 6a 04 80 	movabs $0x80046a0000,%rax
  800420044a:	00 00 00 
  800420044d:	48 01 c2             	add    %rax,%rdx
  8004200450:	48 b8 d8 d5 69 04 80 	movabs $0x800469d5d8,%rax
  8004200457:	00 00 00 
  800420045a:	48 89 10             	mov    %rdx,(%rax)
  800420045d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200461:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004200465:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420046c:	00 00 00 
  800420046f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200473:	77 32                	ja     80042004a7 <boot_aps+0x190>
  8004200475:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200479:	48 89 c1             	mov    %rax,%rcx
  800420047c:	48 ba 20 8d 21 04 80 	movabs $0x8004218d20,%rdx
  8004200483:	00 00 00 
  8004200486:	be 0b 01 00 00       	mov    $0x10b,%esi
  800420048b:	48 bf 7c 8c 21 04 80 	movabs $0x8004218c7c,%rdi
  8004200492:	00 00 00 
  8004200495:	b8 00 00 00 00       	mov    $0x0,%eax
  800420049a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042004a1:	00 00 00 
  80042004a4:	41 ff d0             	callq  *%r8
  80042004a7:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042004ae:	ff ff ff 
  80042004b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042004b5:	48 01 d0             	add    %rdx,%rax
  80042004b8:	89 c2                	mov    %eax,%edx
  80042004ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004be:	0f b6 00             	movzbl (%rax),%eax
  80042004c1:	0f b6 c0             	movzbl %al,%eax
  80042004c4:	89 d6                	mov    %edx,%esi
  80042004c6:	89 c7                	mov    %eax,%edi
  80042004c8:	48 b8 f2 73 21 04 80 	movabs $0x80042173f2,%rax
  80042004cf:	00 00 00 
  80042004d2:	ff d0                	callq  *%rax
  80042004d4:	90                   	nop
  80042004d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004d9:	8b 40 04             	mov    0x4(%rax),%eax
  80042004dc:	83 f8 01             	cmp    $0x1,%eax
  80042004df:	75 f4                	jne    80042004d5 <boot_aps+0x1be>
  80042004e1:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042004e8:	00 
  80042004e9:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  80042004f0:	00 00 00 
  80042004f3:	8b 00                	mov    (%rax),%eax
  80042004f5:	48 98                	cltq   
  80042004f7:	48 c1 e0 03          	shl    $0x3,%rax
  80042004fb:	48 89 c2             	mov    %rax,%rdx
  80042004fe:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200502:	48 01 c2             	add    %rax,%rdx
  8004200505:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420050c:	00 00 00 
  800420050f:	48 01 d0             	add    %rdx,%rax
  8004200512:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200516:	0f 87 bf fe ff ff    	ja     80042003db <boot_aps+0xc4>
  800420051c:	c9                   	leaveq 
  800420051d:	c3                   	retq   

000000800420051e <mp_main>:
  800420051e:	55                   	push   %rbp
  800420051f:	48 89 e5             	mov    %rsp,%rbp
  8004200522:	48 83 ec 10          	sub    $0x10,%rsp
  8004200526:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  800420052d:	00 00 00 
  8004200530:	48 8b 00             	mov    (%rax),%rax
  8004200533:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004200537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420053b:	0f 22 d8             	mov    %rax,%cr3
  800420053e:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004200545:	00 00 00 
  8004200548:	ff d0                	callq  *%rax
  800420054a:	89 c6                	mov    %eax,%esi
  800420054c:	48 bf 44 8d 21 04 80 	movabs $0x8004218d44,%rdi
  8004200553:	00 00 00 
  8004200556:	b8 00 00 00 00       	mov    $0x0,%eax
  800420055b:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004200562:	00 00 00 
  8004200565:	ff d2                	callq  *%rdx
  8004200567:	48 b8 8b 71 21 04 80 	movabs $0x800421718b,%rax
  800420056e:	00 00 00 
  8004200571:	ff d0                	callq  *%rax
  8004200573:	48 b8 73 81 20 04 80 	movabs $0x8004208173,%rax
  800420057a:	00 00 00 
  800420057d:	ff d0                	callq  *%rax
  800420057f:	48 b8 0b be 20 04 80 	movabs $0x800420be0b,%rax
  8004200586:	00 00 00 
  8004200589:	ff d0                	callq  *%rax
  800420058b:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004200592:	00 00 00 
  8004200595:	ff d0                	callq  *%rax
  8004200597:	48 98                	cltq   
  8004200599:	48 c1 e0 03          	shl    $0x3,%rax
  800420059d:	48 89 c2             	mov    %rax,%rdx
  80042005a0:	48 c1 e2 04          	shl    $0x4,%rdx
  80042005a4:	48 01 d0             	add    %rdx,%rax
  80042005a7:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042005ae:	00 00 00 
  80042005b1:	48 01 d0             	add    %rdx,%rax
  80042005b4:	48 83 c0 04          	add    $0x4,%rax
  80042005b8:	be 01 00 00 00       	mov    $0x1,%esi
  80042005bd:	48 89 c7             	mov    %rax,%rdi
  80042005c0:	48 b8 ce 00 20 04 80 	movabs $0x80042000ce,%rax
  80042005c7:	00 00 00 
  80042005ca:	ff d0                	callq  *%rax
  80042005cc:	48 b8 f3 00 20 04 80 	movabs $0x80042000f3,%rax
  80042005d3:	00 00 00 
  80042005d6:	ff d0                	callq  *%rax
  80042005d8:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  80042005df:	00 00 00 
  80042005e2:	ff d0                	callq  *%rax

00000080042005e4 <_panic>:
  80042005e4:	55                   	push   %rbp
  80042005e5:	48 89 e5             	mov    %rsp,%rbp
  80042005e8:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042005ef:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042005f6:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042005fc:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004200603:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420060a:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200611:	84 c0                	test   %al,%al
  8004200613:	74 20                	je     8004200635 <_panic+0x51>
  8004200615:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200619:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420061d:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200621:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200625:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200629:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420062d:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200631:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200635:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420063c:	48 b8 d0 d5 69 04 80 	movabs $0x800469d5d0,%rax
  8004200643:	00 00 00 
  8004200646:	48 8b 00             	mov    (%rax),%rax
  8004200649:	48 85 c0             	test   %rax,%rax
  800420064c:	74 05                	je     8004200653 <_panic+0x6f>
  800420064e:	e9 b5 00 00 00       	jmpq   8004200708 <_panic+0x124>
  8004200653:	48 b8 d0 d5 69 04 80 	movabs $0x800469d5d0,%rax
  800420065a:	00 00 00 
  800420065d:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200664:	48 89 10             	mov    %rdx,(%rax)
  8004200667:	fa                   	cli    
  8004200668:	fc                   	cld    
  8004200669:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200670:	00 00 00 
  8004200673:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420067a:	00 00 00 
  800420067d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200681:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200688:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420068f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200696:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420069d:	00 00 00 
  80042006a0:	ff d0                	callq  *%rax
  80042006a2:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  80042006a8:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042006af:	89 c6                	mov    %eax,%esi
  80042006b1:	48 bf 60 8d 21 04 80 	movabs $0x8004218d60,%rdi
  80042006b8:	00 00 00 
  80042006bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006c0:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  80042006c7:	00 00 00 
  80042006ca:	41 ff d0             	callq  *%r8
  80042006cd:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006d4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006db:	48 89 d6             	mov    %rdx,%rsi
  80042006de:	48 89 c7             	mov    %rax,%rdi
  80042006e1:	48 b8 31 95 20 04 80 	movabs $0x8004209531,%rax
  80042006e8:	00 00 00 
  80042006eb:	ff d0                	callq  *%rax
  80042006ed:	48 bf 82 8d 21 04 80 	movabs $0x8004218d82,%rdi
  80042006f4:	00 00 00 
  80042006f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006fc:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004200703:	00 00 00 
  8004200706:	ff d2                	callq  *%rdx
  8004200708:	bf 00 00 00 00       	mov    $0x0,%edi
  800420070d:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  8004200714:	00 00 00 
  8004200717:	ff d0                	callq  *%rax
  8004200719:	eb ed                	jmp    8004200708 <_panic+0x124>

000000800420071b <_warn>:
  800420071b:	55                   	push   %rbp
  800420071c:	48 89 e5             	mov    %rsp,%rbp
  800420071f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200726:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420072d:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200733:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420073a:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200741:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200748:	84 c0                	test   %al,%al
  800420074a:	74 20                	je     800420076c <_warn+0x51>
  800420074c:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200750:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200754:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200758:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420075c:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200760:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200764:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200768:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420076c:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200773:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420077a:	00 00 00 
  800420077d:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200784:	00 00 00 
  8004200787:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420078b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200792:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200799:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042007a0:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  80042007a6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042007ad:	48 89 c6             	mov    %rax,%rsi
  80042007b0:	48 bf 84 8d 21 04 80 	movabs $0x8004218d84,%rdi
  80042007b7:	00 00 00 
  80042007ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007bf:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  80042007c6:	00 00 00 
  80042007c9:	ff d1                	callq  *%rcx
  80042007cb:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042007d2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042007d9:	48 89 d6             	mov    %rdx,%rsi
  80042007dc:	48 89 c7             	mov    %rax,%rdi
  80042007df:	48 b8 31 95 20 04 80 	movabs $0x8004209531,%rax
  80042007e6:	00 00 00 
  80042007e9:	ff d0                	callq  *%rax
  80042007eb:	48 bf 82 8d 21 04 80 	movabs $0x8004218d82,%rdi
  80042007f2:	00 00 00 
  80042007f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007fa:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004200801:	00 00 00 
  8004200804:	ff d2                	callq  *%rdx
  8004200806:	c9                   	leaveq 
  8004200807:	c3                   	retq   

0000008004200808 <delay>:
  8004200808:	55                   	push   %rbp
  8004200809:	48 89 e5             	mov    %rsp,%rbp
  800420080c:	48 83 ec 20          	sub    $0x20,%rsp
  8004200810:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200817:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420081a:	89 c2                	mov    %eax,%edx
  800420081c:	ec                   	in     (%dx),%al
  800420081d:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200820:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200827:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420082a:	89 c2                	mov    %eax,%edx
  800420082c:	ec                   	in     (%dx),%al
  800420082d:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200830:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  8004200837:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420083a:	89 c2                	mov    %eax,%edx
  800420083c:	ec                   	in     (%dx),%al
  800420083d:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200840:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  8004200847:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420084a:	89 c2                	mov    %eax,%edx
  800420084c:	ec                   	in     (%dx),%al
  800420084d:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200850:	c9                   	leaveq 
  8004200851:	c3                   	retq   

0000008004200852 <serial_proc_data>:
  8004200852:	55                   	push   %rbp
  8004200853:	48 89 e5             	mov    %rsp,%rbp
  8004200856:	48 83 ec 10          	sub    $0x10,%rsp
  800420085a:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200861:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200864:	89 c2                	mov    %eax,%edx
  8004200866:	ec                   	in     (%dx),%al
  8004200867:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420086a:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420086e:	0f b6 c0             	movzbl %al,%eax
  8004200871:	83 e0 01             	and    $0x1,%eax
  8004200874:	85 c0                	test   %eax,%eax
  8004200876:	75 07                	jne    800420087f <serial_proc_data+0x2d>
  8004200878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420087d:	eb 17                	jmp    8004200896 <serial_proc_data+0x44>
  800420087f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200886:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200889:	89 c2                	mov    %eax,%edx
  800420088b:	ec                   	in     (%dx),%al
  800420088c:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420088f:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200893:	0f b6 c0             	movzbl %al,%eax
  8004200896:	c9                   	leaveq 
  8004200897:	c3                   	retq   

0000008004200898 <serial_intr>:
  8004200898:	55                   	push   %rbp
  8004200899:	48 89 e5             	mov    %rsp,%rbp
  800420089c:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  80042008a3:	00 00 00 
  80042008a6:	0f b6 00             	movzbl (%rax),%eax
  80042008a9:	84 c0                	test   %al,%al
  80042008ab:	74 16                	je     80042008c3 <serial_intr+0x2b>
  80042008ad:	48 bf 52 08 20 04 80 	movabs $0x8004200852,%rdi
  80042008b4:	00 00 00 
  80042008b7:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  80042008be:	00 00 00 
  80042008c1:	ff d0                	callq  *%rax
  80042008c3:	5d                   	pop    %rbp
  80042008c4:	c3                   	retq   

00000080042008c5 <serial_putc>:
  80042008c5:	55                   	push   %rbp
  80042008c6:	48 89 e5             	mov    %rsp,%rbp
  80042008c9:	48 83 ec 28          	sub    $0x28,%rsp
  80042008cd:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042008d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042008d7:	eb 10                	jmp    80042008e9 <serial_putc+0x24>
  80042008d9:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  80042008e0:	00 00 00 
  80042008e3:	ff d0                	callq  *%rax
  80042008e5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042008e9:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008f0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042008f3:	89 c2                	mov    %eax,%edx
  80042008f5:	ec                   	in     (%dx),%al
  80042008f6:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042008f9:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042008fd:	0f b6 c0             	movzbl %al,%eax
  8004200900:	83 e0 20             	and    $0x20,%eax
  8004200903:	85 c0                	test   %eax,%eax
  8004200905:	75 09                	jne    8004200910 <serial_putc+0x4b>
  8004200907:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420090e:	7e c9                	jle    80042008d9 <serial_putc+0x14>
  8004200910:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200913:	0f b6 c0             	movzbl %al,%eax
  8004200916:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  800420091d:	88 45 ef             	mov    %al,-0x11(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200920:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200924:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200927:	ee                   	out    %al,(%dx)
  8004200928:	c9                   	leaveq 
  8004200929:	c3                   	retq   

000000800420092a <serial_init>:
  800420092a:	55                   	push   %rbp
  800420092b:	48 89 e5             	mov    %rsp,%rbp
  800420092e:	48 83 ec 50          	sub    $0x50,%rsp
  8004200932:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  8004200939:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  800420093d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200941:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200944:	ee                   	out    %al,(%dx)
  8004200945:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  800420094c:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200950:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200954:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200957:	ee                   	out    %al,(%dx)
  8004200958:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  800420095f:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200963:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200967:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420096a:	ee                   	out    %al,(%dx)
  800420096b:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200972:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  8004200976:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420097a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420097d:	ee                   	out    %al,(%dx)
  800420097e:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  8004200985:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  8004200989:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800420098d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200990:	ee                   	out    %al,(%dx)
  8004200991:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  8004200998:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  800420099c:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042009a0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042009a3:	ee                   	out    %al,(%dx)
  80042009a4:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  80042009ab:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  80042009af:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042009b3:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042009b6:	ee                   	out    %al,(%dx)
  80042009b7:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009be:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042009c1:	89 c2                	mov    %eax,%edx
  80042009c3:	ec                   	in     (%dx),%al
  80042009c4:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042009c7:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042009cb:	3c ff                	cmp    $0xff,%al
  80042009cd:	0f 95 c2             	setne  %dl
  80042009d0:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  80042009d7:	00 00 00 
  80042009da:	88 10                	mov    %dl,(%rax)
  80042009dc:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009e3:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042009e6:	89 c2                	mov    %eax,%edx
  80042009e8:	ec                   	in     (%dx),%al
  80042009e9:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042009ec:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042009f3:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042009f6:	89 c2                	mov    %eax,%edx
  80042009f8:	ec                   	in     (%dx),%al
  80042009f9:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042009fc:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  8004200a03:	00 00 00 
  8004200a06:	0f b6 00             	movzbl (%rax),%eax
  8004200a09:	84 c0                	test   %al,%al
  8004200a0b:	74 23                	je     8004200a30 <serial_init+0x106>
  8004200a0d:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004200a14:	00 00 00 
  8004200a17:	0f b7 00             	movzwl (%rax),%eax
  8004200a1a:	0f b7 c0             	movzwl %ax,%eax
  8004200a1d:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200a22:	89 c7                	mov    %eax,%edi
  8004200a24:	48 b8 e2 93 20 04 80 	movabs $0x80042093e2,%rax
  8004200a2b:	00 00 00 
  8004200a2e:	ff d0                	callq  *%rax
  8004200a30:	c9                   	leaveq 
  8004200a31:	c3                   	retq   

0000008004200a32 <lpt_putc>:
  8004200a32:	55                   	push   %rbp
  8004200a33:	48 89 e5             	mov    %rsp,%rbp
  8004200a36:	48 83 ec 38          	sub    $0x38,%rsp
  8004200a3a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200a3d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200a44:	eb 10                	jmp    8004200a56 <lpt_putc+0x24>
  8004200a46:	48 b8 08 08 20 04 80 	movabs $0x8004200808,%rax
  8004200a4d:	00 00 00 
  8004200a50:	ff d0                	callq  *%rax
  8004200a52:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200a56:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200a5d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200a60:	89 c2                	mov    %eax,%edx
  8004200a62:	ec                   	in     (%dx),%al
  8004200a63:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200a66:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200a6a:	84 c0                	test   %al,%al
  8004200a6c:	78 09                	js     8004200a77 <lpt_putc+0x45>
  8004200a6e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  8004200a75:	7e cf                	jle    8004200a46 <lpt_putc+0x14>
  8004200a77:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200a7a:	0f b6 c0             	movzbl %al,%eax
  8004200a7d:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200a84:	88 45 ef             	mov    %al,-0x11(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a87:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200a8b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200a8e:	ee                   	out    %al,(%dx)
  8004200a8f:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  8004200a96:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  8004200a9a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200a9e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200aa1:	ee                   	out    %al,(%dx)
  8004200aa2:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  8004200aa9:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200aad:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200ab1:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200ab4:	ee                   	out    %al,(%dx)
  8004200ab5:	c9                   	leaveq 
  8004200ab6:	c3                   	retq   

0000008004200ab7 <cga_init>:
  8004200ab7:	55                   	push   %rbp
  8004200ab8:	48 89 e5             	mov    %rsp,%rbp
  8004200abb:	48 83 ec 30          	sub    $0x30,%rsp
  8004200abf:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  8004200ac6:	00 00 00 
  8004200ac9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ad1:	0f b7 00             	movzwl (%rax),%eax
  8004200ad4:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004200ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200adc:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  8004200ae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ae5:	0f b7 00             	movzwl (%rax),%eax
  8004200ae8:	66 3d 5a a5          	cmp    $0xa55a,%ax
  8004200aec:	74 20                	je     8004200b0e <cga_init+0x57>
  8004200aee:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  8004200af5:	00 00 00 
  8004200af8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200afc:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b03:	00 00 00 
  8004200b06:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  8004200b0c:	eb 1b                	jmp    8004200b29 <cga_init+0x72>
  8004200b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200b12:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200b16:	66 89 10             	mov    %dx,(%rax)
  8004200b19:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b20:	00 00 00 
  8004200b23:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200b29:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b30:	00 00 00 
  8004200b33:	8b 00                	mov    (%rax),%eax
  8004200b35:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200b38:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200b3c:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200b40:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200b43:	ee                   	out    %al,(%dx)
  8004200b44:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b4b:	00 00 00 
  8004200b4e:	8b 00                	mov    (%rax),%eax
  8004200b50:	83 c0 01             	add    $0x1,%eax
  8004200b53:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b56:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200b59:	89 c2                	mov    %eax,%edx
  8004200b5b:	ec                   	in     (%dx),%al
  8004200b5c:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200b5f:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200b63:	0f b6 c0             	movzbl %al,%eax
  8004200b66:	c1 e0 08             	shl    $0x8,%eax
  8004200b69:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200b6c:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b73:	00 00 00 
  8004200b76:	8b 00                	mov    (%rax),%eax
  8004200b78:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200b7b:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200b7f:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200b83:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200b86:	ee                   	out    %al,(%dx)
  8004200b87:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b8e:	00 00 00 
  8004200b91:	8b 00                	mov    (%rax),%eax
  8004200b93:	83 c0 01             	add    $0x1,%eax
  8004200b96:	89 45 d4             	mov    %eax,-0x2c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b99:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200b9c:	89 c2                	mov    %eax,%edx
  8004200b9e:	ec                   	in     (%dx),%al
  8004200b9f:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200ba2:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200ba6:	0f b6 c0             	movzbl %al,%eax
  8004200ba9:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200bac:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200bb3:	00 00 00 
  8004200bb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200bba:	48 89 10             	mov    %rdx,(%rax)
  8004200bbd:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200bc0:	89 c2                	mov    %eax,%edx
  8004200bc2:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200bc9:	00 00 00 
  8004200bcc:	66 89 10             	mov    %dx,(%rax)
  8004200bcf:	c9                   	leaveq 
  8004200bd0:	c3                   	retq   

0000008004200bd1 <cga_putc>:
  8004200bd1:	55                   	push   %rbp
  8004200bd2:	48 89 e5             	mov    %rsp,%rbp
  8004200bd5:	48 83 ec 40          	sub    $0x40,%rsp
  8004200bd9:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200bdc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bdf:	b0 00                	mov    $0x0,%al
  8004200be1:	85 c0                	test   %eax,%eax
  8004200be3:	75 07                	jne    8004200bec <cga_putc+0x1b>
  8004200be5:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200bec:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200bef:	0f b6 c0             	movzbl %al,%eax
  8004200bf2:	83 f8 09             	cmp    $0x9,%eax
  8004200bf5:	0f 84 f6 00 00 00    	je     8004200cf1 <cga_putc+0x120>
  8004200bfb:	83 f8 09             	cmp    $0x9,%eax
  8004200bfe:	7f 0a                	jg     8004200c0a <cga_putc+0x39>
  8004200c00:	83 f8 08             	cmp    $0x8,%eax
  8004200c03:	74 18                	je     8004200c1d <cga_putc+0x4c>
  8004200c05:	e9 3e 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c0a:	83 f8 0a             	cmp    $0xa,%eax
  8004200c0d:	74 75                	je     8004200c84 <cga_putc+0xb3>
  8004200c0f:	83 f8 0d             	cmp    $0xd,%eax
  8004200c12:	0f 84 89 00 00 00    	je     8004200ca1 <cga_putc+0xd0>
  8004200c18:	e9 2b 01 00 00       	jmpq   8004200d48 <cga_putc+0x177>
  8004200c1d:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c24:	00 00 00 
  8004200c27:	0f b7 00             	movzwl (%rax),%eax
  8004200c2a:	66 85 c0             	test   %ax,%ax
  8004200c2d:	74 50                	je     8004200c7f <cga_putc+0xae>
  8004200c2f:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c36:	00 00 00 
  8004200c39:	0f b7 00             	movzwl (%rax),%eax
  8004200c3c:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200c3f:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c46:	00 00 00 
  8004200c49:	66 89 10             	mov    %dx,(%rax)
  8004200c4c:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200c53:	00 00 00 
  8004200c56:	48 8b 10             	mov    (%rax),%rdx
  8004200c59:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c60:	00 00 00 
  8004200c63:	0f b7 00             	movzwl (%rax),%eax
  8004200c66:	0f b7 c0             	movzwl %ax,%eax
  8004200c69:	48 01 c0             	add    %rax,%rax
  8004200c6c:	48 01 c2             	add    %rax,%rdx
  8004200c6f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c72:	b0 00                	mov    $0x0,%al
  8004200c74:	83 c8 20             	or     $0x20,%eax
  8004200c77:	66 89 02             	mov    %ax,(%rdx)
  8004200c7a:	e9 04 01 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c7f:	e9 ff 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200c84:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c8b:	00 00 00 
  8004200c8e:	0f b7 00             	movzwl (%rax),%eax
  8004200c91:	8d 50 50             	lea    0x50(%rax),%edx
  8004200c94:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c9b:	00 00 00 
  8004200c9e:	66 89 10             	mov    %dx,(%rax)
  8004200ca1:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200ca8:	00 00 00 
  8004200cab:	0f b7 30             	movzwl (%rax),%esi
  8004200cae:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200cb5:	00 00 00 
  8004200cb8:	0f b7 08             	movzwl (%rax),%ecx
  8004200cbb:	0f b7 c1             	movzwl %cx,%eax
  8004200cbe:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200cc4:	c1 e8 10             	shr    $0x10,%eax
  8004200cc7:	89 c2                	mov    %eax,%edx
  8004200cc9:	66 c1 ea 06          	shr    $0x6,%dx
  8004200ccd:	89 d0                	mov    %edx,%eax
  8004200ccf:	c1 e0 02             	shl    $0x2,%eax
  8004200cd2:	01 d0                	add    %edx,%eax
  8004200cd4:	c1 e0 04             	shl    $0x4,%eax
  8004200cd7:	29 c1                	sub    %eax,%ecx
  8004200cd9:	89 ca                	mov    %ecx,%edx
  8004200cdb:	29 d6                	sub    %edx,%esi
  8004200cdd:	89 f2                	mov    %esi,%edx
  8004200cdf:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200ce6:	00 00 00 
  8004200ce9:	66 89 10             	mov    %dx,(%rax)
  8004200cec:	e9 92 00 00 00       	jmpq   8004200d83 <cga_putc+0x1b2>
  8004200cf1:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200cf6:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200cfd:	00 00 00 
  8004200d00:	ff d0                	callq  *%rax
  8004200d02:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d07:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d0e:	00 00 00 
  8004200d11:	ff d0                	callq  *%rax
  8004200d13:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d18:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d1f:	00 00 00 
  8004200d22:	ff d0                	callq  *%rax
  8004200d24:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d29:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d30:	00 00 00 
  8004200d33:	ff d0                	callq  *%rax
  8004200d35:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d3a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004200d41:	00 00 00 
  8004200d44:	ff d0                	callq  *%rax
  8004200d46:	eb 3b                	jmp    8004200d83 <cga_putc+0x1b2>
  8004200d48:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200d4f:	00 00 00 
  8004200d52:	48 8b 30             	mov    (%rax),%rsi
  8004200d55:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200d5c:	00 00 00 
  8004200d5f:	0f b7 00             	movzwl (%rax),%eax
  8004200d62:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200d65:	48 ba 10 e0 49 04 80 	movabs $0x800449e010,%rdx
  8004200d6c:	00 00 00 
  8004200d6f:	66 89 0a             	mov    %cx,(%rdx)
  8004200d72:	0f b7 c0             	movzwl %ax,%eax
  8004200d75:	48 01 c0             	add    %rax,%rax
  8004200d78:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200d7c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200d7f:	66 89 02             	mov    %ax,(%rdx)
  8004200d82:	90                   	nop
  8004200d83:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200d8a:	00 00 00 
  8004200d8d:	0f b7 00             	movzwl (%rax),%eax
  8004200d90:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200d94:	0f 86 89 00 00 00    	jbe    8004200e23 <cga_putc+0x252>
  8004200d9a:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200da1:	00 00 00 
  8004200da4:	48 8b 00             	mov    (%rax),%rax
  8004200da7:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200dae:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200db5:	00 00 00 
  8004200db8:	48 8b 00             	mov    (%rax),%rax
  8004200dbb:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200dc0:	48 89 ce             	mov    %rcx,%rsi
  8004200dc3:	48 89 c7             	mov    %rax,%rdi
  8004200dc6:	48 b8 0f 04 21 04 80 	movabs $0x800421040f,%rax
  8004200dcd:	00 00 00 
  8004200dd0:	ff d0                	callq  *%rax
  8004200dd2:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200dd9:	eb 22                	jmp    8004200dfd <cga_putc+0x22c>
  8004200ddb:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200de2:	00 00 00 
  8004200de5:	48 8b 00             	mov    (%rax),%rax
  8004200de8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200deb:	48 63 d2             	movslq %edx,%rdx
  8004200dee:	48 01 d2             	add    %rdx,%rdx
  8004200df1:	48 01 d0             	add    %rdx,%rax
  8004200df4:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200df9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200dfd:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200e04:	7e d5                	jle    8004200ddb <cga_putc+0x20a>
  8004200e06:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200e0d:	00 00 00 
  8004200e10:	0f b7 00             	movzwl (%rax),%eax
  8004200e13:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200e16:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200e1d:	00 00 00 
  8004200e20:	66 89 10             	mov    %dx,(%rax)
  8004200e23:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200e2a:	00 00 00 
  8004200e2d:	8b 00                	mov    (%rax),%eax
  8004200e2f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200e32:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200e36:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200e3a:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200e3d:	ee                   	out    %al,(%dx)
  8004200e3e:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200e45:	00 00 00 
  8004200e48:	0f b7 00             	movzwl (%rax),%eax
  8004200e4b:	66 c1 e8 08          	shr    $0x8,%ax
  8004200e4f:	0f b6 c0             	movzbl %al,%eax
  8004200e52:	48 ba 04 e0 49 04 80 	movabs $0x800449e004,%rdx
  8004200e59:	00 00 00 
  8004200e5c:	8b 12                	mov    (%rdx),%edx
  8004200e5e:	83 c2 01             	add    $0x1,%edx
  8004200e61:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200e64:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200e67:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200e6b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200e6e:	ee                   	out    %al,(%dx)
  8004200e6f:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200e76:	00 00 00 
  8004200e79:	8b 00                	mov    (%rax),%eax
  8004200e7b:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200e7e:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200e82:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200e86:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200e89:	ee                   	out    %al,(%dx)
  8004200e8a:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200e91:	00 00 00 
  8004200e94:	0f b7 00             	movzwl (%rax),%eax
  8004200e97:	0f b6 c0             	movzbl %al,%eax
  8004200e9a:	48 ba 04 e0 49 04 80 	movabs $0x800449e004,%rdx
  8004200ea1:	00 00 00 
  8004200ea4:	8b 12                	mov    (%rdx),%edx
  8004200ea6:	83 c2 01             	add    $0x1,%edx
  8004200ea9:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200eac:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200eaf:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200eb3:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200eb6:	ee                   	out    %al,(%dx)
  8004200eb7:	c9                   	leaveq 
  8004200eb8:	c3                   	retq   

0000008004200eb9 <kbd_proc_data>:
  8004200eb9:	55                   	push   %rbp
  8004200eba:	48 89 e5             	mov    %rsp,%rbp
  8004200ebd:	48 83 ec 30          	sub    $0x30,%rsp
  8004200ec1:	c7 45 f0 64 00 00 00 	movl   $0x64,-0x10(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ec8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200ecb:	89 c2                	mov    %eax,%edx
  8004200ecd:	ec                   	in     (%dx),%al
  8004200ece:	88 45 ef             	mov    %al,-0x11(%rbp)
	return data;
  8004200ed1:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200ed5:	0f b6 c0             	movzbl %al,%eax
  8004200ed8:	83 e0 01             	and    $0x1,%eax
  8004200edb:	85 c0                	test   %eax,%eax
  8004200edd:	75 0a                	jne    8004200ee9 <kbd_proc_data+0x30>
  8004200edf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200ee4:	e9 28 02 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200ee9:	c7 45 e8 60 00 00 00 	movl   $0x60,-0x18(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200ef0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004200ef3:	89 c2                	mov    %eax,%edx
  8004200ef5:	ec                   	in     (%dx),%al
  8004200ef6:	88 45 e7             	mov    %al,-0x19(%rbp)
	return data;
  8004200ef9:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200efd:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f00:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200f04:	75 27                	jne    8004200f2d <kbd_proc_data+0x74>
  8004200f06:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f0d:	00 00 00 
  8004200f10:	8b 00                	mov    (%rax),%eax
  8004200f12:	83 c8 40             	or     $0x40,%eax
  8004200f15:	89 c2                	mov    %eax,%edx
  8004200f17:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f1e:	00 00 00 
  8004200f21:	89 10                	mov    %edx,(%rax)
  8004200f23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f28:	e9 e4 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f31:	84 c0                	test   %al,%al
  8004200f33:	79 65                	jns    8004200f9a <kbd_proc_data+0xe1>
  8004200f35:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f3c:	00 00 00 
  8004200f3f:	8b 00                	mov    (%rax),%eax
  8004200f41:	83 e0 40             	and    $0x40,%eax
  8004200f44:	85 c0                	test   %eax,%eax
  8004200f46:	75 09                	jne    8004200f51 <kbd_proc_data+0x98>
  8004200f48:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f4c:	83 e0 7f             	and    $0x7f,%eax
  8004200f4f:	eb 04                	jmp    8004200f55 <kbd_proc_data+0x9c>
  8004200f51:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f55:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f58:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f5c:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200f63:	00 00 00 
  8004200f66:	48 98                	cltq   
  8004200f68:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200f6c:	83 c8 40             	or     $0x40,%eax
  8004200f6f:	0f b6 c0             	movzbl %al,%eax
  8004200f72:	f7 d0                	not    %eax
  8004200f74:	89 c2                	mov    %eax,%edx
  8004200f76:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f7d:	00 00 00 
  8004200f80:	8b 00                	mov    (%rax),%eax
  8004200f82:	21 c2                	and    %eax,%edx
  8004200f84:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f8b:	00 00 00 
  8004200f8e:	89 10                	mov    %edx,(%rax)
  8004200f90:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f95:	e9 77 01 00 00       	jmpq   8004201111 <kbd_proc_data+0x258>
  8004200f9a:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fa1:	00 00 00 
  8004200fa4:	8b 00                	mov    (%rax),%eax
  8004200fa6:	83 e0 40             	and    $0x40,%eax
  8004200fa9:	85 c0                	test   %eax,%eax
  8004200fab:	74 21                	je     8004200fce <kbd_proc_data+0x115>
  8004200fad:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200fb1:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fb8:	00 00 00 
  8004200fbb:	8b 00                	mov    (%rax),%eax
  8004200fbd:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200fc0:	89 c2                	mov    %eax,%edx
  8004200fc2:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fc9:	00 00 00 
  8004200fcc:	89 10                	mov    %edx,(%rax)
  8004200fce:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200fd2:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200fd9:	00 00 00 
  8004200fdc:	48 98                	cltq   
  8004200fde:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200fe2:	0f b6 d0             	movzbl %al,%edx
  8004200fe5:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fec:	00 00 00 
  8004200fef:	8b 00                	mov    (%rax),%eax
  8004200ff1:	09 c2                	or     %eax,%edx
  8004200ff3:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200ffa:	00 00 00 
  8004200ffd:	89 10                	mov    %edx,(%rax)
  8004200fff:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201003:	48 ba 60 c1 22 04 80 	movabs $0x800422c160,%rdx
  800420100a:	00 00 00 
  800420100d:	48 98                	cltq   
  800420100f:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201013:	0f b6 d0             	movzbl %al,%edx
  8004201016:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  800420101d:	00 00 00 
  8004201020:	8b 00                	mov    (%rax),%eax
  8004201022:	31 c2                	xor    %eax,%edx
  8004201024:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  800420102b:	00 00 00 
  800420102e:	89 10                	mov    %edx,(%rax)
  8004201030:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004201037:	00 00 00 
  800420103a:	8b 00                	mov    (%rax),%eax
  800420103c:	83 e0 03             	and    $0x3,%eax
  800420103f:	89 c2                	mov    %eax,%edx
  8004201041:	48 b8 60 c5 22 04 80 	movabs $0x800422c560,%rax
  8004201048:	00 00 00 
  800420104b:	89 d2                	mov    %edx,%edx
  800420104d:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004201051:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201055:	48 01 d0             	add    %rdx,%rax
  8004201058:	0f b6 00             	movzbl (%rax),%eax
  800420105b:	0f b6 c0             	movzbl %al,%eax
  800420105e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201061:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004201068:	00 00 00 
  800420106b:	8b 00                	mov    (%rax),%eax
  800420106d:	83 e0 08             	and    $0x8,%eax
  8004201070:	85 c0                	test   %eax,%eax
  8004201072:	74 22                	je     8004201096 <kbd_proc_data+0x1dd>
  8004201074:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004201078:	7e 0c                	jle    8004201086 <kbd_proc_data+0x1cd>
  800420107a:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  800420107e:	7f 06                	jg     8004201086 <kbd_proc_data+0x1cd>
  8004201080:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004201084:	eb 10                	jmp    8004201096 <kbd_proc_data+0x1dd>
  8004201086:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  800420108a:	7e 0a                	jle    8004201096 <kbd_proc_data+0x1dd>
  800420108c:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004201090:	7f 04                	jg     8004201096 <kbd_proc_data+0x1dd>
  8004201092:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004201096:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  800420109d:	00 00 00 
  80042010a0:	8b 00                	mov    (%rax),%eax
  80042010a2:	f7 d0                	not    %eax
  80042010a4:	83 e0 06             	and    $0x6,%eax
  80042010a7:	85 c0                	test   %eax,%eax
  80042010a9:	75 37                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010ab:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  80042010b2:	75 2e                	jne    80042010e2 <kbd_proc_data+0x229>
  80042010b4:	48 bf 9e 8d 21 04 80 	movabs $0x8004218d9e,%rdi
  80042010bb:	00 00 00 
  80042010be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010c3:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  80042010ca:	00 00 00 
  80042010cd:	ff d2                	callq  *%rdx
  80042010cf:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%rbp)
  80042010d6:	c6 45 df 03          	movb   $0x3,-0x21(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042010da:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042010de:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042010e1:	ee                   	out    %al,(%dx)
  80042010e2:	83 7d fc 1b          	cmpl   $0x1b,-0x4(%rbp)
  80042010e6:	75 26                	jne    800420110e <kbd_proc_data+0x255>
  80042010e8:	48 bf aa 8d 21 04 80 	movabs $0x8004218daa,%rdi
  80042010ef:	00 00 00 
  80042010f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010f7:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  80042010fe:	00 00 00 
  8004201101:	ff d2                	callq  *%rdx
  8004201103:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201108:	0f 01 c1             	vmcall 
  800420110b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420110e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201111:	c9                   	leaveq 
  8004201112:	c3                   	retq   

0000008004201113 <kbd_intr>:
  8004201113:	55                   	push   %rbp
  8004201114:	48 89 e5             	mov    %rsp,%rbp
  8004201117:	48 bf b9 0e 20 04 80 	movabs $0x8004200eb9,%rdi
  800420111e:	00 00 00 
  8004201121:	48 b8 64 11 20 04 80 	movabs $0x8004201164,%rax
  8004201128:	00 00 00 
  800420112b:	ff d0                	callq  *%rax
  800420112d:	5d                   	pop    %rbp
  800420112e:	c3                   	retq   

000000800420112f <kbd_init>:
  800420112f:	55                   	push   %rbp
  8004201130:	48 89 e5             	mov    %rsp,%rbp
  8004201133:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420113a:	00 00 00 
  800420113d:	ff d0                	callq  *%rax
  800420113f:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004201146:	00 00 00 
  8004201149:	0f b7 00             	movzwl (%rax),%eax
  800420114c:	0f b7 c0             	movzwl %ax,%eax
  800420114f:	25 fd ff 00 00       	and    $0xfffd,%eax
  8004201154:	89 c7                	mov    %eax,%edi
  8004201156:	48 b8 e2 93 20 04 80 	movabs $0x80042093e2,%rax
  800420115d:	00 00 00 
  8004201160:	ff d0                	callq  *%rax
  8004201162:	5d                   	pop    %rbp
  8004201163:	c3                   	retq   

0000008004201164 <cons_intr>:
  8004201164:	55                   	push   %rbp
  8004201165:	48 89 e5             	mov    %rsp,%rbp
  8004201168:	48 83 ec 20          	sub    $0x20,%rsp
  800420116c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201170:	eb 6a                	jmp    80042011dc <cons_intr+0x78>
  8004201172:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201176:	75 02                	jne    800420117a <cons_intr+0x16>
  8004201178:	eb 62                	jmp    80042011dc <cons_intr+0x78>
  800420117a:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201181:	00 00 00 
  8004201184:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420118a:	8d 48 01             	lea    0x1(%rax),%ecx
  800420118d:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  8004201194:	00 00 00 
  8004201197:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  800420119d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042011a0:	89 d1                	mov    %edx,%ecx
  80042011a2:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  80042011a9:	00 00 00 
  80042011ac:	89 c0                	mov    %eax,%eax
  80042011ae:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  80042011b1:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  80042011b8:	00 00 00 
  80042011bb:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042011c1:	3d 00 02 00 00       	cmp    $0x200,%eax
  80042011c6:	75 14                	jne    80042011dc <cons_intr+0x78>
  80042011c8:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  80042011cf:	00 00 00 
  80042011d2:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  80042011d9:	00 00 00 
  80042011dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042011e0:	ff d0                	callq  *%rax
  80042011e2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042011e5:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042011e9:	75 87                	jne    8004201172 <cons_intr+0xe>
  80042011eb:	c9                   	leaveq 
  80042011ec:	c3                   	retq   

00000080042011ed <cons_getc>:
  80042011ed:	55                   	push   %rbp
  80042011ee:	48 89 e5             	mov    %rsp,%rbp
  80042011f1:	48 83 ec 10          	sub    $0x10,%rsp
  80042011f5:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  80042011fc:	00 00 00 
  80042011ff:	ff d0                	callq  *%rax
  8004201201:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  8004201208:	00 00 00 
  800420120b:	ff d0                	callq  *%rax
  800420120d:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201214:	00 00 00 
  8004201217:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  800420121d:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201224:	00 00 00 
  8004201227:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420122d:	39 c2                	cmp    %eax,%edx
  800420122f:	74 69                	je     800420129a <cons_getc+0xad>
  8004201231:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201238:	00 00 00 
  800420123b:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201241:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201244:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  800420124b:	00 00 00 
  800420124e:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  8004201254:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  800420125b:	00 00 00 
  800420125e:	89 c0                	mov    %eax,%eax
  8004201260:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201264:	0f b6 c0             	movzbl %al,%eax
  8004201267:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420126a:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201271:	00 00 00 
  8004201274:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  800420127a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420127f:	75 14                	jne    8004201295 <cons_getc+0xa8>
  8004201281:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201288:	00 00 00 
  800420128b:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  8004201292:	00 00 00 
  8004201295:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201298:	eb 05                	jmp    800420129f <cons_getc+0xb2>
  800420129a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420129f:	c9                   	leaveq 
  80042012a0:	c3                   	retq   

00000080042012a1 <cons_putc>:
  80042012a1:	55                   	push   %rbp
  80042012a2:	48 89 e5             	mov    %rsp,%rbp
  80042012a5:	48 83 ec 10          	sub    $0x10,%rsp
  80042012a9:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042012ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012af:	89 c7                	mov    %eax,%edi
  80042012b1:	48 b8 c5 08 20 04 80 	movabs $0x80042008c5,%rax
  80042012b8:	00 00 00 
  80042012bb:	ff d0                	callq  *%rax
  80042012bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012c0:	89 c7                	mov    %eax,%edi
  80042012c2:	48 b8 32 0a 20 04 80 	movabs $0x8004200a32,%rax
  80042012c9:	00 00 00 
  80042012cc:	ff d0                	callq  *%rax
  80042012ce:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d1:	89 c7                	mov    %eax,%edi
  80042012d3:	48 b8 d1 0b 20 04 80 	movabs $0x8004200bd1,%rax
  80042012da:	00 00 00 
  80042012dd:	ff d0                	callq  *%rax
  80042012df:	c9                   	leaveq 
  80042012e0:	c3                   	retq   

00000080042012e1 <cons_init>:
  80042012e1:	55                   	push   %rbp
  80042012e2:	48 89 e5             	mov    %rsp,%rbp
  80042012e5:	48 b8 b7 0a 20 04 80 	movabs $0x8004200ab7,%rax
  80042012ec:	00 00 00 
  80042012ef:	ff d0                	callq  *%rax
  80042012f1:	48 b8 2f 11 20 04 80 	movabs $0x800420112f,%rax
  80042012f8:	00 00 00 
  80042012fb:	ff d0                	callq  *%rax
  80042012fd:	48 b8 2a 09 20 04 80 	movabs $0x800420092a,%rax
  8004201304:	00 00 00 
  8004201307:	ff d0                	callq  *%rax
  8004201309:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  8004201310:	00 00 00 
  8004201313:	0f b6 00             	movzbl (%rax),%eax
  8004201316:	83 f0 01             	xor    $0x1,%eax
  8004201319:	84 c0                	test   %al,%al
  800420131b:	74 1b                	je     8004201338 <cons_init+0x57>
  800420131d:	48 bf b7 8d 21 04 80 	movabs $0x8004218db7,%rdi
  8004201324:	00 00 00 
  8004201327:	b8 00 00 00 00       	mov    $0x0,%eax
  800420132c:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201333:	00 00 00 
  8004201336:	ff d2                	callq  *%rdx
  8004201338:	5d                   	pop    %rbp
  8004201339:	c3                   	retq   

000000800420133a <cputchar>:
  800420133a:	55                   	push   %rbp
  800420133b:	48 89 e5             	mov    %rsp,%rbp
  800420133e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201342:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201345:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201348:	89 c7                	mov    %eax,%edi
  800420134a:	48 b8 a1 12 20 04 80 	movabs $0x80042012a1,%rax
  8004201351:	00 00 00 
  8004201354:	ff d0                	callq  *%rax
  8004201356:	c9                   	leaveq 
  8004201357:	c3                   	retq   

0000008004201358 <getchar>:
  8004201358:	55                   	push   %rbp
  8004201359:	48 89 e5             	mov    %rsp,%rbp
  800420135c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201360:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  8004201367:	00 00 00 
  800420136a:	ff d0                	callq  *%rax
  800420136c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420136f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201373:	74 eb                	je     8004201360 <getchar+0x8>
  8004201375:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201378:	c9                   	leaveq 
  8004201379:	c3                   	retq   

000000800420137a <iscons>:
  800420137a:	55                   	push   %rbp
  800420137b:	48 89 e5             	mov    %rsp,%rbp
  800420137e:	48 83 ec 04          	sub    $0x4,%rsp
  8004201382:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201385:	b8 01 00 00 00       	mov    $0x1,%eax
  800420138a:	c9                   	leaveq 
  800420138b:	c3                   	retq   

000000800420138c <mon_help>:
  800420138c:	55                   	push   %rbp
  800420138d:	48 89 e5             	mov    %rsp,%rbp
  8004201390:	48 83 ec 30          	sub    $0x30,%rsp
  8004201394:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201397:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420139b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420139f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042013a6:	eb 6c                	jmp    8004201414 <mon_help+0x88>
  80042013a8:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  80042013af:	00 00 00 
  80042013b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013b5:	48 63 d0             	movslq %eax,%rdx
  80042013b8:	48 89 d0             	mov    %rdx,%rax
  80042013bb:	48 01 c0             	add    %rax,%rax
  80042013be:	48 01 d0             	add    %rdx,%rax
  80042013c1:	48 c1 e0 03          	shl    $0x3,%rax
  80042013c5:	48 01 c8             	add    %rcx,%rax
  80042013c8:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042013cc:	48 be 80 c5 22 04 80 	movabs $0x800422c580,%rsi
  80042013d3:	00 00 00 
  80042013d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013d9:	48 63 d0             	movslq %eax,%rdx
  80042013dc:	48 89 d0             	mov    %rdx,%rax
  80042013df:	48 01 c0             	add    %rax,%rax
  80042013e2:	48 01 d0             	add    %rdx,%rax
  80042013e5:	48 c1 e0 03          	shl    $0x3,%rax
  80042013e9:	48 01 f0             	add    %rsi,%rax
  80042013ec:	48 8b 00             	mov    (%rax),%rax
  80042013ef:	48 89 ca             	mov    %rcx,%rdx
  80042013f2:	48 89 c6             	mov    %rax,%rsi
  80042013f5:	48 bf 65 8e 21 04 80 	movabs $0x8004218e65,%rdi
  80042013fc:	00 00 00 
  80042013ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201404:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420140b:	00 00 00 
  800420140e:	ff d1                	callq  *%rcx
  8004201410:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201414:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201417:	83 f8 03             	cmp    $0x3,%eax
  800420141a:	76 8c                	jbe    80042013a8 <mon_help+0x1c>
  800420141c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201421:	c9                   	leaveq 
  8004201422:	c3                   	retq   

0000008004201423 <mon_kerninfo>:
  8004201423:	55                   	push   %rbp
  8004201424:	48 89 e5             	mov    %rsp,%rbp
  8004201427:	48 83 ec 30          	sub    $0x30,%rsp
  800420142b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420142e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201432:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201436:	48 bf 6e 8e 21 04 80 	movabs $0x8004218e6e,%rdi
  800420143d:	00 00 00 
  8004201440:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201445:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420144c:	00 00 00 
  800420144f:	ff d2                	callq  *%rdx
  8004201451:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201458:	00 00 00 
  800420145b:	48 bf 88 8e 21 04 80 	movabs $0x8004218e88,%rdi
  8004201462:	00 00 00 
  8004201465:	b8 00 00 00 00       	mov    $0x0,%eax
  800420146a:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201471:	00 00 00 
  8004201474:	ff d2                	callq  *%rdx
  8004201476:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  800420147d:	00 00 00 
  8004201480:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201487:	00 00 00 
  800420148a:	48 bf b0 8e 21 04 80 	movabs $0x8004218eb0,%rdi
  8004201491:	00 00 00 
  8004201494:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201499:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  80042014a0:	00 00 00 
  80042014a3:	ff d1                	callq  *%rcx
  80042014a5:	48 ba 4b 8c 21 00 00 	movabs $0x218c4b,%rdx
  80042014ac:	00 00 00 
  80042014af:	48 be 4b 8c 21 04 80 	movabs $0x8004218c4b,%rsi
  80042014b6:	00 00 00 
  80042014b9:	48 bf d8 8e 21 04 80 	movabs $0x8004218ed8,%rdi
  80042014c0:	00 00 00 
  80042014c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014c8:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  80042014cf:	00 00 00 
  80042014d2:	ff d1                	callq  *%rcx
  80042014d4:	48 ba c0 d5 49 00 00 	movabs $0x49d5c0,%rdx
  80042014db:	00 00 00 
  80042014de:	48 be c0 d5 49 04 80 	movabs $0x800449d5c0,%rsi
  80042014e5:	00 00 00 
  80042014e8:	48 bf 00 8f 21 04 80 	movabs $0x8004218f00,%rdi
  80042014ef:	00 00 00 
  80042014f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014f7:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  80042014fe:	00 00 00 
  8004201501:	ff d1                	callq  *%rcx
  8004201503:	48 ba 10 00 6e 00 00 	movabs $0x6e0010,%rdx
  800420150a:	00 00 00 
  800420150d:	48 be 10 00 6e 04 80 	movabs $0x80046e0010,%rsi
  8004201514:	00 00 00 
  8004201517:	48 bf 28 8f 21 04 80 	movabs $0x8004218f28,%rdi
  800420151e:	00 00 00 
  8004201521:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201526:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420152d:	00 00 00 
  8004201530:	ff d1                	callq  *%rcx
  8004201532:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004201539:	00 
  800420153a:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  8004201541:	00 00 00 
  8004201544:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201548:	48 29 c2             	sub    %rax,%rdx
  800420154b:	48 b8 10 00 6e 04 80 	movabs $0x80046e0010,%rax
  8004201552:	00 00 00 
  8004201555:	48 83 e8 01          	sub    $0x1,%rax
  8004201559:	48 01 d0             	add    %rdx,%rax
  800420155c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201564:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201569:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420156d:	48 89 d0             	mov    %rdx,%rax
  8004201570:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201574:	48 29 c2             	sub    %rax,%rdx
  8004201577:	48 89 d0             	mov    %rdx,%rax
  800420157a:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  8004201581:	48 85 c0             	test   %rax,%rax
  8004201584:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201588:	48 c1 f8 0a          	sar    $0xa,%rax
  800420158c:	48 89 c6             	mov    %rax,%rsi
  800420158f:	48 bf 50 8f 21 04 80 	movabs $0x8004218f50,%rdi
  8004201596:	00 00 00 
  8004201599:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159e:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  80042015a5:	00 00 00 
  80042015a8:	ff d2                	callq  *%rdx
  80042015aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015af:	c9                   	leaveq 
  80042015b0:	c3                   	retq   

00000080042015b1 <mon_backtrace>:
  80042015b1:	55                   	push   %rbp
  80042015b2:	48 89 e5             	mov    %rsp,%rbp
  80042015b5:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  80042015bc:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  80042015c2:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  80042015c9:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042015d0:	48 89 e8             	mov    %rbp,%rax
  80042015d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  80042015d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042015db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  80042015df:	48 89 e0             	mov    %rsp,%rax
  80042015e2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  80042015e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042015ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042015ee:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042015f5:	00 
  80042015f6:	74 21                	je     8004201619 <mon_backtrace+0x68>
  80042015f8:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042015ff:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004201603:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201607:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  800420160e:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  8004201615:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201619:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8004201620 <mon_backtrace+0x6f>
  8004201620:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201624:	48 bf 7a 8f 21 04 80 	movabs $0x8004218f7a,%rdi
  800420162b:	00 00 00 
  800420162e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201633:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420163a:	00 00 00 
  800420163d:	ff d2                	callq  *%rdx
  800420163f:	e9 17 03 00 00       	jmpq   800420195b <mon_backtrace+0x3aa>
  8004201644:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201648:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420164c:	48 89 c6             	mov    %rax,%rsi
  800420164f:	48 bf 8c 8f 21 04 80 	movabs $0x8004218f8c,%rdi
  8004201656:	00 00 00 
  8004201659:	b8 00 00 00 00       	mov    $0x0,%eax
  800420165e:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  8004201665:	00 00 00 
  8004201668:	ff d1                	callq  *%rcx
  800420166a:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  8004201671:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201675:	48 89 d6             	mov    %rdx,%rsi
  8004201678:	48 89 c7             	mov    %rax,%rdi
  800420167b:	48 b8 f0 ef 20 04 80 	movabs $0x800420eff0,%rax
  8004201682:	00 00 00 
  8004201685:	ff d0                	callq  *%rax
  8004201687:	85 c0                	test   %eax,%eax
  8004201689:	0f 88 9a 02 00 00    	js     8004201929 <mon_backtrace+0x378>
  800420168f:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  8004201696:	48 05 a8 00 00 00    	add    $0xa8,%rax
  800420169c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042016a0:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  80042016a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042016ab:	48 89 d7             	mov    %rdx,%rdi
  80042016ae:	48 29 c7             	sub    %rax,%rdi
  80042016b1:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  80042016b8:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  80042016be:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  80042016c4:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  80042016cb:	49 89 f9             	mov    %rdi,%r9
  80042016ce:	49 89 f0             	mov    %rsi,%r8
  80042016d1:	48 89 c6             	mov    %rax,%rsi
  80042016d4:	48 bf a8 8f 21 04 80 	movabs $0x8004218fa8,%rdi
  80042016db:	00 00 00 
  80042016de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042016e3:	49 ba 90 95 20 04 80 	movabs $0x8004209590,%r10
  80042016ea:	00 00 00 
  80042016ed:	41 ff d2             	callq  *%r10
  80042016f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042016f4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042016f8:	66 83 f8 06          	cmp    $0x6,%ax
  80042016fc:	75 15                	jne    8004201713 <mon_backtrace+0x162>
  80042016fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201702:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420170a:	48 01 d0             	add    %rdx,%rax
  800420170d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201711:	eb 28                	jmp    800420173b <mon_backtrace+0x18a>
  8004201713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201717:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420171b:	66 83 f8 07          	cmp    $0x7,%ax
  800420171f:	75 15                	jne    8004201736 <mon_backtrace+0x185>
  8004201721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201725:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201729:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420172d:	48 01 d0             	add    %rdx,%rax
  8004201730:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201734:	eb 05                	jmp    800420173b <mon_backtrace+0x18a>
  8004201736:	e9 ee 01 00 00       	jmpq   8004201929 <mon_backtrace+0x378>
  800420173b:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201741:	89 c6                	mov    %eax,%esi
  8004201743:	48 bf c3 8f 21 04 80 	movabs $0x8004218fc3,%rdi
  800420174a:	00 00 00 
  800420174d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201752:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201759:	00 00 00 
  800420175c:	ff d2                	callq  *%rdx
  800420175e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201765:	e9 f2 00 00 00       	jmpq   800420185c <mon_backtrace+0x2ab>
  800420176a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420176d:	48 98                	cltq   
  800420176f:	48 83 c0 0a          	add    $0xa,%rax
  8004201773:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  800420177a:	ff 
  800420177b:	48 85 c0             	test   %rax,%rax
  800420177e:	75 35                	jne    80042017b5 <mon_backtrace+0x204>
  8004201780:	48 b9 ce 8f 21 04 80 	movabs $0x8004218fce,%rcx
  8004201787:	00 00 00 
  800420178a:	48 ba e4 8f 21 04 80 	movabs $0x8004218fe4,%rdx
  8004201791:	00 00 00 
  8004201794:	be 78 00 00 00       	mov    $0x78,%esi
  8004201799:	48 bf f9 8f 21 04 80 	movabs $0x8004218ff9,%rdi
  80042017a0:	00 00 00 
  80042017a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017a8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042017af:	00 00 00 
  80042017b2:	41 ff d0             	callq  *%r8
  80042017b5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017b8:	48 98                	cltq   
  80042017ba:	48 83 c0 0a          	add    $0xa,%rax
  80042017be:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  80042017c5:	ff 
  80042017c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017ca:	48 01 d0             	add    %rdx,%rax
  80042017cd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042017d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017d4:	48 98                	cltq   
  80042017d6:	48 83 c0 08          	add    $0x8,%rax
  80042017da:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  80042017e1:	83 f8 02             	cmp    $0x2,%eax
  80042017e4:	74 31                	je     8004201817 <mon_backtrace+0x266>
  80042017e6:	83 f8 02             	cmp    $0x2,%eax
  80042017e9:	7f 07                	jg     80042017f2 <mon_backtrace+0x241>
  80042017eb:	83 f8 01             	cmp    $0x1,%eax
  80042017ee:	74 37                	je     8004201827 <mon_backtrace+0x276>
  80042017f0:	eb 44                	jmp    8004201836 <mon_backtrace+0x285>
  80042017f2:	83 f8 04             	cmp    $0x4,%eax
  80042017f5:	74 12                	je     8004201809 <mon_backtrace+0x258>
  80042017f7:	83 f8 08             	cmp    $0x8,%eax
  80042017fa:	75 3a                	jne    8004201836 <mon_backtrace+0x285>
  80042017fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201800:	48 8b 00             	mov    (%rax),%rax
  8004201803:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201807:	eb 2d                	jmp    8004201836 <mon_backtrace+0x285>
  8004201809:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420180d:	8b 00                	mov    (%rax),%eax
  800420180f:	89 c0                	mov    %eax,%eax
  8004201811:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201815:	eb 1f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201817:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420181b:	0f b7 00             	movzwl (%rax),%eax
  800420181e:	0f b7 c0             	movzwl %ax,%eax
  8004201821:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201825:	eb 0f                	jmp    8004201836 <mon_backtrace+0x285>
  8004201827:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420182b:	0f b6 00             	movzbl (%rax),%eax
  800420182e:	0f b6 c0             	movzbl %al,%eax
  8004201831:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201835:	90                   	nop
  8004201836:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420183a:	48 89 c6             	mov    %rax,%rsi
  800420183d:	48 bf 0b 90 21 04 80 	movabs $0x800421900b,%rdi
  8004201844:	00 00 00 
  8004201847:	b8 00 00 00 00       	mov    $0x0,%eax
  800420184c:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201853:	00 00 00 
  8004201856:	ff d2                	callq  *%rdx
  8004201858:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420185c:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201862:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004201865:	0f 8f ff fe ff ff    	jg     800420176a <mon_backtrace+0x1b9>
  800420186b:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  8004201872:	0f b7 c0             	movzwl %ax,%eax
  8004201875:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420187a:	74 48                	je     80042018c4 <mon_backtrace+0x313>
  800420187c:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201881:	75 17                	jne    800420189a <mon_backtrace+0x2e9>
  8004201883:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  800420188a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420188e:	48 01 d0             	add    %rdx,%rax
  8004201891:	48 8b 00             	mov    (%rax),%rax
  8004201894:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201898:	eb 2b                	jmp    80042018c5 <mon_backtrace+0x314>
  800420189a:	48 ba 12 90 21 04 80 	movabs $0x8004219012,%rdx
  80042018a1:	00 00 00 
  80042018a4:	be 92 00 00 00       	mov    $0x92,%esi
  80042018a9:	48 bf f9 8f 21 04 80 	movabs $0x8004218ff9,%rdi
  80042018b0:	00 00 00 
  80042018b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042018b8:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042018bf:	00 00 00 
  80042018c2:	ff d1                	callq  *%rcx
  80042018c4:	90                   	nop
  80042018c5:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  80042018cc:	0f b7 c0             	movzwl %ax,%eax
  80042018cf:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  80042018d4:	74 48                	je     800420191e <mon_backtrace+0x36d>
  80042018d6:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042018db:	75 17                	jne    80042018f4 <mon_backtrace+0x343>
  80042018dd:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  80042018e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042018e8:	48 01 d0             	add    %rdx,%rax
  80042018eb:	48 8b 00             	mov    (%rax),%rax
  80042018ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042018f2:	eb 2b                	jmp    800420191f <mon_backtrace+0x36e>
  80042018f4:	48 ba 12 90 21 04 80 	movabs $0x8004219012,%rdx
  80042018fb:	00 00 00 
  80042018fe:	be 9d 00 00 00       	mov    $0x9d,%esi
  8004201903:	48 bf f9 8f 21 04 80 	movabs $0x8004218ff9,%rdi
  800420190a:	00 00 00 
  800420190d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201912:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201919:	00 00 00 
  800420191c:	ff d1                	callq  *%rcx
  800420191e:	90                   	nop
  800420191f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201923:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201927:	eb 17                	jmp    8004201940 <mon_backtrace+0x38f>
  8004201929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420192d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004201931:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201935:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201939:	48 8b 00             	mov    (%rax),%rax
  800420193c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201940:	48 bf 23 90 21 04 80 	movabs $0x8004219023,%rdi
  8004201947:	00 00 00 
  800420194a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420194f:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201956:	00 00 00 
  8004201959:	ff d2                	callq  *%rdx
  800420195b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201960:	0f 85 de fc ff ff    	jne    8004201644 <mon_backtrace+0x93>
  8004201966:	b8 00 00 00 00       	mov    $0x0,%eax
  800420196b:	c9                   	leaveq 
  800420196c:	c3                   	retq   

000000800420196d <mon_exit>:
  800420196d:	55                   	push   %rbp
  800420196e:	48 89 e5             	mov    %rsp,%rbp
  8004201971:	48 83 ec 18          	sub    $0x18,%rsp
  8004201975:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420197c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201980:	f4                   	hlt    
  8004201981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004201986:	c9                   	leaveq 
  8004201987:	c3                   	retq   

0000008004201988 <runcmd>:
  8004201988:	55                   	push   %rbp
  8004201989:	48 89 e5             	mov    %rsp,%rbp
  800420198c:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004201993:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420199a:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042019a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042019a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042019ab:	48 98                	cltq   
  80042019ad:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042019b4:	ff 00 00 00 00 
  80042019b9:	eb 15                	jmp    80042019d0 <runcmd+0x48>
  80042019bb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019c2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042019c6:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  80042019cd:	c6 00 00             	movb   $0x0,(%rax)
  80042019d0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019d7:	0f b6 00             	movzbl (%rax),%eax
  80042019da:	84 c0                	test   %al,%al
  80042019dc:	74 2a                	je     8004201a08 <runcmd+0x80>
  80042019de:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019e5:	0f b6 00             	movzbl (%rax),%eax
  80042019e8:	0f be c0             	movsbl %al,%eax
  80042019eb:	89 c6                	mov    %eax,%esi
  80042019ed:	48 bf 25 90 21 04 80 	movabs $0x8004219025,%rdi
  80042019f4:	00 00 00 
  80042019f7:	48 b8 11 03 21 04 80 	movabs $0x8004210311,%rax
  80042019fe:	00 00 00 
  8004201a01:	ff d0                	callq  *%rax
  8004201a03:	48 85 c0             	test   %rax,%rax
  8004201a06:	75 b3                	jne    80042019bb <runcmd+0x33>
  8004201a08:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a0f:	0f b6 00             	movzbl (%rax),%eax
  8004201a12:	84 c0                	test   %al,%al
  8004201a14:	75 21                	jne    8004201a37 <runcmd+0xaf>
  8004201a16:	90                   	nop
  8004201a17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a1a:	48 98                	cltq   
  8004201a1c:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201a23:	ff 00 00 00 00 
  8004201a28:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201a2c:	0f 85 a1 00 00 00    	jne    8004201ad3 <runcmd+0x14b>
  8004201a32:	e9 92 00 00 00       	jmpq   8004201ac9 <runcmd+0x141>
  8004201a37:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004201a3b:	75 2a                	jne    8004201a67 <runcmd+0xdf>
  8004201a3d:	be 10 00 00 00       	mov    $0x10,%esi
  8004201a42:	48 bf 2a 90 21 04 80 	movabs $0x800421902a,%rdi
  8004201a49:	00 00 00 
  8004201a4c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a51:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201a58:	00 00 00 
  8004201a5b:	ff d2                	callq  *%rdx
  8004201a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a62:	e9 30 01 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201a67:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a6a:	8d 50 01             	lea    0x1(%rax),%edx
  8004201a6d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201a70:	48 98                	cltq   
  8004201a72:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201a79:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201a80:	ff 
  8004201a81:	eb 08                	jmp    8004201a8b <runcmd+0x103>
  8004201a83:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201a8a:	01 
  8004201a8b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a92:	0f b6 00             	movzbl (%rax),%eax
  8004201a95:	84 c0                	test   %al,%al
  8004201a97:	74 2a                	je     8004201ac3 <runcmd+0x13b>
  8004201a99:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201aa0:	0f b6 00             	movzbl (%rax),%eax
  8004201aa3:	0f be c0             	movsbl %al,%eax
  8004201aa6:	89 c6                	mov    %eax,%esi
  8004201aa8:	48 bf 25 90 21 04 80 	movabs $0x8004219025,%rdi
  8004201aaf:	00 00 00 
  8004201ab2:	48 b8 11 03 21 04 80 	movabs $0x8004210311,%rax
  8004201ab9:	00 00 00 
  8004201abc:	ff d0                	callq  *%rax
  8004201abe:	48 85 c0             	test   %rax,%rax
  8004201ac1:	74 c0                	je     8004201a83 <runcmd+0xfb>
  8004201ac3:	90                   	nop
  8004201ac4:	e9 07 ff ff ff       	jmpq   80042019d0 <runcmd+0x48>
  8004201ac9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ace:	e9 c4 00 00 00       	jmpq   8004201b97 <runcmd+0x20f>
  8004201ad3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201ada:	e9 82 00 00 00       	jmpq   8004201b61 <runcmd+0x1d9>
  8004201adf:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201ae6:	00 00 00 
  8004201ae9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201aec:	48 63 d0             	movslq %eax,%rdx
  8004201aef:	48 89 d0             	mov    %rdx,%rax
  8004201af2:	48 01 c0             	add    %rax,%rax
  8004201af5:	48 01 d0             	add    %rdx,%rax
  8004201af8:	48 c1 e0 03          	shl    $0x3,%rax
  8004201afc:	48 01 c8             	add    %rcx,%rax
  8004201aff:	48 8b 10             	mov    (%rax),%rdx
  8004201b02:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b09:	48 89 d6             	mov    %rdx,%rsi
  8004201b0c:	48 89 c7             	mov    %rax,%rdi
  8004201b0f:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004201b16:	00 00 00 
  8004201b19:	ff d0                	callq  *%rax
  8004201b1b:	85 c0                	test   %eax,%eax
  8004201b1d:	75 3e                	jne    8004201b5d <runcmd+0x1d5>
  8004201b1f:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201b26:	00 00 00 
  8004201b29:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b2c:	48 63 d0             	movslq %eax,%rdx
  8004201b2f:	48 89 d0             	mov    %rdx,%rax
  8004201b32:	48 01 c0             	add    %rax,%rax
  8004201b35:	48 01 d0             	add    %rdx,%rax
  8004201b38:	48 c1 e0 03          	shl    $0x3,%rax
  8004201b3c:	48 01 c8             	add    %rcx,%rax
  8004201b3f:	48 83 c0 10          	add    $0x10,%rax
  8004201b43:	48 8b 00             	mov    (%rax),%rax
  8004201b46:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201b4d:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201b54:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201b57:	89 cf                	mov    %ecx,%edi
  8004201b59:	ff d0                	callq  *%rax
  8004201b5b:	eb 3a                	jmp    8004201b97 <runcmd+0x20f>
  8004201b5d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201b61:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b64:	83 f8 03             	cmp    $0x3,%eax
  8004201b67:	0f 86 72 ff ff ff    	jbe    8004201adf <runcmd+0x157>
  8004201b6d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b74:	48 89 c6             	mov    %rax,%rsi
  8004201b77:	48 bf 47 90 21 04 80 	movabs $0x8004219047,%rdi
  8004201b7e:	00 00 00 
  8004201b81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b86:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201b8d:	00 00 00 
  8004201b90:	ff d2                	callq  *%rdx
  8004201b92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b97:	c9                   	leaveq 
  8004201b98:	c3                   	retq   

0000008004201b99 <monitor>:
  8004201b99:	55                   	push   %rbp
  8004201b9a:	48 89 e5             	mov    %rsp,%rbp
  8004201b9d:	48 83 ec 20          	sub    $0x20,%rsp
  8004201ba1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201ba5:	48 bf 60 90 21 04 80 	movabs $0x8004219060,%rdi
  8004201bac:	00 00 00 
  8004201baf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bb4:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201bbb:	00 00 00 
  8004201bbe:	ff d2                	callq  *%rdx
  8004201bc0:	48 bf 88 90 21 04 80 	movabs $0x8004219088,%rdi
  8004201bc7:	00 00 00 
  8004201bca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bcf:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201bd6:	00 00 00 
  8004201bd9:	ff d2                	callq  *%rdx
  8004201bdb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201be0:	74 13                	je     8004201bf5 <monitor+0x5c>
  8004201be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201be6:	48 89 c7             	mov    %rax,%rdi
  8004201be9:	48 b8 87 c2 20 04 80 	movabs $0x800420c287,%rax
  8004201bf0:	00 00 00 
  8004201bf3:	ff d0                	callq  *%rax
  8004201bf5:	48 bf ad 90 21 04 80 	movabs $0x80042190ad,%rdi
  8004201bfc:	00 00 00 
  8004201bff:	48 b8 2a ff 20 04 80 	movabs $0x800420ff2a,%rax
  8004201c06:	00 00 00 
  8004201c09:	ff d0                	callq  *%rax
  8004201c0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201c0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201c14:	74 20                	je     8004201c36 <monitor+0x9d>
  8004201c16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c1e:	48 89 d6             	mov    %rdx,%rsi
  8004201c21:	48 89 c7             	mov    %rax,%rdi
  8004201c24:	48 b8 88 19 20 04 80 	movabs $0x8004201988,%rax
  8004201c2b:	00 00 00 
  8004201c2e:	ff d0                	callq  *%rax
  8004201c30:	85 c0                	test   %eax,%eax
  8004201c32:	79 02                	jns    8004201c36 <monitor+0x9d>
  8004201c34:	eb 02                	jmp    8004201c38 <monitor+0x9f>
  8004201c36:	eb bd                	jmp    8004201bf5 <monitor+0x5c>
  8004201c38:	c9                   	leaveq 
  8004201c39:	c3                   	retq   

0000008004201c3a <page2ppn>:
  8004201c3a:	55                   	push   %rbp
  8004201c3b:	48 89 e5             	mov    %rsp,%rbp
  8004201c3e:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201c4a:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004201c51:	00 00 00 
  8004201c54:	48 8b 00             	mov    (%rax),%rax
  8004201c57:	48 29 c2             	sub    %rax,%rdx
  8004201c5a:	48 89 d0             	mov    %rdx,%rax
  8004201c5d:	48 c1 f8 04          	sar    $0x4,%rax
  8004201c61:	c9                   	leaveq 
  8004201c62:	c3                   	retq   

0000008004201c63 <page2pa>:
  8004201c63:	55                   	push   %rbp
  8004201c64:	48 89 e5             	mov    %rsp,%rbp
  8004201c67:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c73:	48 89 c7             	mov    %rax,%rdi
  8004201c76:	48 b8 3a 1c 20 04 80 	movabs $0x8004201c3a,%rax
  8004201c7d:	00 00 00 
  8004201c80:	ff d0                	callq  *%rax
  8004201c82:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201c86:	c9                   	leaveq 
  8004201c87:	c3                   	retq   

0000008004201c88 <pa2page>:
  8004201c88:	55                   	push   %rbp
  8004201c89:	48 89 e5             	mov    %rsp,%rbp
  8004201c8c:	48 83 ec 10          	sub    $0x10,%rsp
  8004201c90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c98:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201c9c:	48 89 c2             	mov    %rax,%rdx
  8004201c9f:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004201ca6:	00 00 00 
  8004201ca9:	48 8b 00             	mov    (%rax),%rax
  8004201cac:	48 39 c2             	cmp    %rax,%rdx
  8004201caf:	72 2a                	jb     8004201cdb <pa2page+0x53>
  8004201cb1:	48 ba b8 90 21 04 80 	movabs $0x80042190b8,%rdx
  8004201cb8:	00 00 00 
  8004201cbb:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201cc0:	48 bf d7 90 21 04 80 	movabs $0x80042190d7,%rdi
  8004201cc7:	00 00 00 
  8004201cca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ccf:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004201cd6:	00 00 00 
  8004201cd9:	ff d1                	callq  *%rcx
  8004201cdb:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004201ce2:	00 00 00 
  8004201ce5:	48 8b 00             	mov    (%rax),%rax
  8004201ce8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201cec:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201cf0:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201cf4:	48 01 d0             	add    %rdx,%rax
  8004201cf7:	c9                   	leaveq 
  8004201cf8:	c3                   	retq   

0000008004201cf9 <page2kva>:
  8004201cf9:	55                   	push   %rbp
  8004201cfa:	48 89 e5             	mov    %rsp,%rbp
  8004201cfd:	48 83 ec 20          	sub    $0x20,%rsp
  8004201d01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201d09:	48 89 c7             	mov    %rax,%rdi
  8004201d0c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004201d13:	00 00 00 
  8004201d16:	ff d0                	callq  *%rax
  8004201d18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201d1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d20:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201d24:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201d27:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201d2a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004201d31:	00 00 00 
  8004201d34:	48 8b 00             	mov    (%rax),%rax
  8004201d37:	48 39 c2             	cmp    %rax,%rdx
  8004201d3a:	72 32                	jb     8004201d6e <page2kva+0x75>
  8004201d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d40:	48 89 c1             	mov    %rax,%rcx
  8004201d43:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004201d4a:	00 00 00 
  8004201d4d:	be 62 00 00 00       	mov    $0x62,%esi
  8004201d52:	48 bf d7 90 21 04 80 	movabs $0x80042190d7,%rdi
  8004201d59:	00 00 00 
  8004201d5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d61:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004201d68:	00 00 00 
  8004201d6b:	41 ff d0             	callq  *%r8
  8004201d6e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201d75:	00 00 00 
  8004201d78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d7c:	48 01 d0             	add    %rdx,%rax
  8004201d7f:	c9                   	leaveq 
  8004201d80:	c3                   	retq   

0000008004201d81 <restrictive_type>:
  8004201d81:	55                   	push   %rbp
  8004201d82:	48 89 e5             	mov    %rsp,%rbp
  8004201d85:	48 83 ec 08          	sub    $0x8,%rsp
  8004201d89:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201d8c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201d8f:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201d93:	74 06                	je     8004201d9b <restrictive_type+0x1a>
  8004201d95:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201d99:	75 07                	jne    8004201da2 <restrictive_type+0x21>
  8004201d9b:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201da0:	eb 3e                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201da2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201da6:	74 06                	je     8004201dae <restrictive_type+0x2d>
  8004201da8:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201dac:	75 07                	jne    8004201db5 <restrictive_type+0x34>
  8004201dae:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201db3:	eb 2b                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201db5:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201db9:	74 06                	je     8004201dc1 <restrictive_type+0x40>
  8004201dbb:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201dbf:	75 07                	jne    8004201dc8 <restrictive_type+0x47>
  8004201dc1:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201dc6:	eb 18                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201dc8:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201dcc:	74 06                	je     8004201dd4 <restrictive_type+0x53>
  8004201dce:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201dd2:	75 07                	jne    8004201ddb <restrictive_type+0x5a>
  8004201dd4:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201dd9:	eb 05                	jmp    8004201de0 <restrictive_type+0x5f>
  8004201ddb:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201de0:	c9                   	leaveq 
  8004201de1:	c3                   	retq   

0000008004201de2 <nvram_read>:
  8004201de2:	55                   	push   %rbp
  8004201de3:	48 89 e5             	mov    %rsp,%rbp
  8004201de6:	53                   	push   %rbx
  8004201de7:	48 83 ec 18          	sub    $0x18,%rsp
  8004201deb:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201dee:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201df1:	89 c7                	mov    %eax,%edi
  8004201df3:	48 b8 14 92 20 04 80 	movabs $0x8004209214,%rax
  8004201dfa:	00 00 00 
  8004201dfd:	ff d0                	callq  *%rax
  8004201dff:	89 c3                	mov    %eax,%ebx
  8004201e01:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201e04:	83 c0 01             	add    $0x1,%eax
  8004201e07:	89 c7                	mov    %eax,%edi
  8004201e09:	48 b8 14 92 20 04 80 	movabs $0x8004209214,%rax
  8004201e10:	00 00 00 
  8004201e13:	ff d0                	callq  *%rax
  8004201e15:	c1 e0 08             	shl    $0x8,%eax
  8004201e18:	09 d8                	or     %ebx,%eax
  8004201e1a:	48 83 c4 18          	add    $0x18,%rsp
  8004201e1e:	5b                   	pop    %rbx
  8004201e1f:	5d                   	pop    %rbp
  8004201e20:	c3                   	retq   

0000008004201e21 <multiboot_read>:
  8004201e21:	55                   	push   %rbp
  8004201e22:	48 89 e5             	mov    %rsp,%rbp
  8004201e25:	41 54                	push   %r12
  8004201e27:	53                   	push   %rbx
  8004201e28:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201e2f:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201e36:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201e3d:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201e44:	48 89 e0             	mov    %rsp,%rax
  8004201e47:	49 89 c4             	mov    %rax,%r12
  8004201e4a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e51:	8b 40 30             	mov    0x30(%rax),%eax
  8004201e54:	89 c0                	mov    %eax,%eax
  8004201e56:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201e5a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e61:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201e64:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201e69:	f7 e2                	mul    %edx
  8004201e6b:	89 d0                	mov    %edx,%eax
  8004201e6d:	c1 e8 04             	shr    $0x4,%eax
  8004201e70:	89 c0                	mov    %eax,%eax
  8004201e72:	48 89 c2             	mov    %rax,%rdx
  8004201e75:	48 83 ea 01          	sub    $0x1,%rdx
  8004201e79:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201e7d:	49 89 c0             	mov    %rax,%r8
  8004201e80:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201e86:	48 89 c1             	mov    %rax,%rcx
  8004201e89:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201e8e:	48 c1 e0 03          	shl    $0x3,%rax
  8004201e92:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201e96:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201e9b:	48 83 e8 01          	sub    $0x1,%rax
  8004201e9f:	48 01 d0             	add    %rdx,%rax
  8004201ea2:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201ea7:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201eac:	48 f7 f3             	div    %rbx
  8004201eaf:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201eb3:	48 29 c4             	sub    %rax,%rsp
  8004201eb6:	48 89 e0             	mov    %rsp,%rax
  8004201eb9:	48 83 c0 07          	add    $0x7,%rax
  8004201ebd:	48 c1 e8 03          	shr    $0x3,%rax
  8004201ec1:	48 c1 e0 03          	shl    $0x3,%rax
  8004201ec5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201ec9:	48 bf 0b 91 21 04 80 	movabs $0x800421910b,%rdi
  8004201ed0:	00 00 00 
  8004201ed3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ed8:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004201edf:	00 00 00 
  8004201ee2:	ff d2                	callq  *%rdx
  8004201ee4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201eeb:	e9 6c 01 00 00       	jmpq   800420205c <multiboot_read+0x23b>
  8004201ef0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ef3:	48 63 d0             	movslq %eax,%rdx
  8004201ef6:	48 89 d0             	mov    %rdx,%rax
  8004201ef9:	48 01 c0             	add    %rax,%rax
  8004201efc:	48 01 d0             	add    %rdx,%rax
  8004201eff:	48 c1 e0 03          	shl    $0x3,%rax
  8004201f03:	48 89 c2             	mov    %rax,%rdx
  8004201f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201f0a:	48 01 d0             	add    %rdx,%rax
  8004201f0d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201f11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f15:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f18:	89 c0                	mov    %eax,%eax
  8004201f1a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f1e:	48 89 c2             	mov    %rax,%rdx
  8004201f21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f25:	8b 40 04             	mov    0x4(%rax),%eax
  8004201f28:	89 c0                	mov    %eax,%eax
  8004201f2a:	48 01 d0             	add    %rdx,%rax
  8004201f2d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201f31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f35:	8b 40 10             	mov    0x10(%rax),%eax
  8004201f38:	89 c0                	mov    %eax,%eax
  8004201f3a:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f3e:	48 89 c2             	mov    %rax,%rdx
  8004201f41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f45:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201f48:	89 c0                	mov    %eax,%eax
  8004201f4a:	48 01 d0             	add    %rdx,%rax
  8004201f4d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201f51:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f55:	8b 70 14             	mov    0x14(%rax),%esi
  8004201f58:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f5c:	8b 00                	mov    (%rax),%eax
  8004201f5e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201f62:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201f66:	41 89 f0             	mov    %esi,%r8d
  8004201f69:	89 c6                	mov    %eax,%esi
  8004201f6b:	48 bf 20 91 21 04 80 	movabs $0x8004219120,%rdi
  8004201f72:	00 00 00 
  8004201f75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f7a:	49 b9 90 95 20 04 80 	movabs $0x8004209590,%r9
  8004201f81:	00 00 00 
  8004201f84:	41 ff d1             	callq  *%r9
  8004201f87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f8b:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f8e:	83 f8 05             	cmp    $0x5,%eax
  8004201f91:	77 0b                	ja     8004201f9e <multiboot_read+0x17d>
  8004201f93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f97:	8b 40 14             	mov    0x14(%rax),%eax
  8004201f9a:	85 c0                	test   %eax,%eax
  8004201f9c:	75 0b                	jne    8004201fa9 <multiboot_read+0x188>
  8004201f9e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201fa2:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201fa9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201fb0:	e9 85 00 00 00       	jmpq   800420203a <multiboot_read+0x219>
  8004201fb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201fb9:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201fbc:	48 63 d2             	movslq %edx,%rdx
  8004201fbf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201fc3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201fc7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fcb:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fce:	89 c0                	mov    %eax,%eax
  8004201fd0:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd4:	48 89 c2             	mov    %rax,%rdx
  8004201fd7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fdb:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fde:	89 c0                	mov    %eax,%eax
  8004201fe0:	48 01 d0             	add    %rdx,%rax
  8004201fe3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201fe7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201feb:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201fef:	76 45                	jbe    8004202036 <multiboot_read+0x215>
  8004201ff1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ff4:	83 c0 01             	add    $0x1,%eax
  8004201ff7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201ffa:	eb 30                	jmp    800420202c <multiboot_read+0x20b>
  8004201ffc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202000:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004202003:	48 63 d2             	movslq %edx,%rdx
  8004202006:	48 c1 e2 03          	shl    $0x3,%rdx
  800420200a:	48 01 c2             	add    %rax,%rdx
  800420200d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202011:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004202014:	48 63 c9             	movslq %ecx,%rcx
  8004202017:	48 c1 e1 03          	shl    $0x3,%rcx
  800420201b:	48 83 e9 08          	sub    $0x8,%rcx
  800420201f:	48 01 c8             	add    %rcx,%rax
  8004202022:	48 8b 00             	mov    (%rax),%rax
  8004202025:	48 89 02             	mov    %rax,(%rdx)
  8004202028:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  800420202c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420202f:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004202032:	75 c8                	jne    8004201ffc <multiboot_read+0x1db>
  8004202034:	eb 10                	jmp    8004202046 <multiboot_read+0x225>
  8004202036:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420203a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420203d:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004202040:	0f 8c 6f ff ff ff    	jl     8004201fb5 <multiboot_read+0x194>
  8004202046:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420204a:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420204d:	48 63 d2             	movslq %edx,%rdx
  8004202050:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004202054:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004202058:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420205c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420205f:	48 63 c8             	movslq %eax,%rcx
  8004202062:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202069:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420206c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202071:	f7 e2                	mul    %edx
  8004202073:	89 d0                	mov    %edx,%eax
  8004202075:	c1 e8 04             	shr    $0x4,%eax
  8004202078:	89 c0                	mov    %eax,%eax
  800420207a:	48 39 c1             	cmp    %rax,%rcx
  800420207d:	0f 82 6d fe ff ff    	jb     8004201ef0 <multiboot_read+0xcf>
  8004202083:	48 bf 57 91 21 04 80 	movabs $0x8004219157,%rdi
  800420208a:	00 00 00 
  800420208d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202092:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004202099:	00 00 00 
  800420209c:	ff d2                	callq  *%rdx
  800420209e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  80042020a5:	e9 93 01 00 00       	jmpq   800420223d <multiboot_read+0x41c>
  80042020aa:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020ad:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042020b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020b4:	48 63 d2             	movslq %edx,%rdx
  80042020b7:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020bb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042020bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020c3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042020c6:	48 63 d2             	movslq %edx,%rdx
  80042020c9:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020cd:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042020d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020d5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020d8:	89 c0                	mov    %eax,%eax
  80042020da:	48 c1 e0 20          	shl    $0x20,%rax
  80042020de:	48 89 c2             	mov    %rax,%rdx
  80042020e1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e5:	8b 40 04             	mov    0x4(%rax),%eax
  80042020e8:	89 c0                	mov    %eax,%eax
  80042020ea:	48 01 d0             	add    %rdx,%rax
  80042020ed:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042020f1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020f5:	8b 40 08             	mov    0x8(%rax),%eax
  80042020f8:	89 c0                	mov    %eax,%eax
  80042020fa:	48 c1 e0 20          	shl    $0x20,%rax
  80042020fe:	48 89 c2             	mov    %rax,%rdx
  8004202101:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202105:	8b 40 04             	mov    0x4(%rax),%eax
  8004202108:	89 c0                	mov    %eax,%eax
  800420210a:	48 01 d0             	add    %rdx,%rax
  800420210d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004202111:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202115:	8b 40 10             	mov    0x10(%rax),%eax
  8004202118:	89 c0                	mov    %eax,%eax
  800420211a:	48 c1 e0 20          	shl    $0x20,%rax
  800420211e:	48 89 c2             	mov    %rax,%rdx
  8004202121:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202125:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202128:	89 c0                	mov    %eax,%eax
  800420212a:	48 01 d0             	add    %rdx,%rax
  800420212d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004202134:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202138:	8b 40 10             	mov    0x10(%rax),%eax
  800420213b:	89 c0                	mov    %eax,%eax
  800420213d:	48 c1 e0 20          	shl    $0x20,%rax
  8004202141:	48 89 c2             	mov    %rax,%rdx
  8004202144:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202148:	8b 40 0c             	mov    0xc(%rax),%eax
  800420214b:	89 c0                	mov    %eax,%eax
  800420214d:	48 01 d0             	add    %rdx,%rax
  8004202150:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004202157:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420215e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004202162:	48 01 d0             	add    %rdx,%rax
  8004202165:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202169:	75 7c                	jne    80042021e7 <multiboot_read+0x3c6>
  800420216b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420216f:	8b 50 14             	mov    0x14(%rax),%edx
  8004202172:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202176:	8b 40 14             	mov    0x14(%rax),%eax
  8004202179:	39 c2                	cmp    %eax,%edx
  800420217b:	75 6a                	jne    80042021e7 <multiboot_read+0x3c6>
  800420217d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202184:	89 c2                	mov    %eax,%edx
  8004202186:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420218d:	01 c2                	add    %eax,%edx
  800420218f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202193:	89 50 0c             	mov    %edx,0xc(%rax)
  8004202196:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420219d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042021a4:	48 01 d0             	add    %rdx,%rax
  80042021a7:	48 c1 e8 20          	shr    $0x20,%rax
  80042021ab:	89 c2                	mov    %eax,%edx
  80042021ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021b1:	89 50 10             	mov    %edx,0x10(%rax)
  80042021b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021b8:	8b 50 04             	mov    0x4(%rax),%edx
  80042021bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021bf:	89 50 04             	mov    %edx,0x4(%rax)
  80042021c2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021c6:	8b 50 08             	mov    0x8(%rax),%edx
  80042021c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021cd:	89 50 08             	mov    %edx,0x8(%rax)
  80042021d0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042021d3:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042021d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042021da:	48 63 d2             	movslq %edx,%rdx
  80042021dd:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  80042021e4:	00 
  80042021e5:	eb 52                	jmp    8004202239 <multiboot_read+0x418>
  80042021e7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042021ee:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042021f2:	48 01 d0             	add    %rdx,%rax
  80042021f5:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042021f9:	76 3e                	jbe    8004202239 <multiboot_read+0x418>
  80042021fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021ff:	8b 50 14             	mov    0x14(%rax),%edx
  8004202202:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202206:	8b 40 14             	mov    0x14(%rax),%eax
  8004202209:	89 d6                	mov    %edx,%esi
  800420220b:	89 c7                	mov    %eax,%edi
  800420220d:	48 b8 81 1d 20 04 80 	movabs $0x8004201d81,%rax
  8004202214:	00 00 00 
  8004202217:	ff d0                	callq  *%rax
  8004202219:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  800420221f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202223:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202229:	89 50 14             	mov    %edx,0x14(%rax)
  800420222c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202230:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202236:	89 50 14             	mov    %edx,0x14(%rax)
  8004202239:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420223d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202240:	48 63 c8             	movslq %eax,%rcx
  8004202243:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420224a:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420224d:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202252:	f7 e2                	mul    %edx
  8004202254:	89 d0                	mov    %edx,%eax
  8004202256:	c1 e8 04             	shr    $0x4,%eax
  8004202259:	89 c0                	mov    %eax,%eax
  800420225b:	48 39 c1             	cmp    %rax,%rcx
  800420225e:	0f 82 46 fe ff ff    	jb     80042020aa <multiboot_read+0x289>
  8004202264:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420226b:	e9 dc 00 00 00       	jmpq   800420234c <multiboot_read+0x52b>
  8004202270:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202274:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004202277:	48 63 d2             	movslq %edx,%rdx
  800420227a:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800420227e:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004202285:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  800420228c:	00 
  800420228d:	0f 84 b5 00 00 00    	je     8004202348 <multiboot_read+0x527>
  8004202293:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420229a:	8b 40 14             	mov    0x14(%rax),%eax
  800420229d:	83 f8 01             	cmp    $0x1,%eax
  80042022a0:	74 13                	je     80042022b5 <multiboot_read+0x494>
  80042022a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022a9:	8b 40 14             	mov    0x14(%rax),%eax
  80042022ac:	83 f8 03             	cmp    $0x3,%eax
  80042022af:	0f 85 93 00 00 00    	jne    8004202348 <multiboot_read+0x527>
  80042022b5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022bc:	8b 40 04             	mov    0x4(%rax),%eax
  80042022bf:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  80042022c4:	77 49                	ja     800420230f <multiboot_read+0x4ee>
  80042022c6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022cd:	8b 40 08             	mov    0x8(%rax),%eax
  80042022d0:	85 c0                	test   %eax,%eax
  80042022d2:	75 3b                	jne    800420230f <multiboot_read+0x4ee>
  80042022d4:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042022db:	48 8b 10             	mov    (%rax),%rdx
  80042022de:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022e5:	8b 40 10             	mov    0x10(%rax),%eax
  80042022e8:	89 c0                	mov    %eax,%eax
  80042022ea:	48 c1 e0 20          	shl    $0x20,%rax
  80042022ee:	48 89 c1             	mov    %rax,%rcx
  80042022f1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022f8:	8b 40 0c             	mov    0xc(%rax),%eax
  80042022fb:	89 c0                	mov    %eax,%eax
  80042022fd:	48 01 c8             	add    %rcx,%rax
  8004202300:	48 01 c2             	add    %rax,%rdx
  8004202303:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420230a:	48 89 10             	mov    %rdx,(%rax)
  800420230d:	eb 39                	jmp    8004202348 <multiboot_read+0x527>
  800420230f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202316:	48 8b 10             	mov    (%rax),%rdx
  8004202319:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202320:	8b 40 10             	mov    0x10(%rax),%eax
  8004202323:	89 c0                	mov    %eax,%eax
  8004202325:	48 c1 e0 20          	shl    $0x20,%rax
  8004202329:	48 89 c1             	mov    %rax,%rcx
  800420232c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202333:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202336:	89 c0                	mov    %eax,%eax
  8004202338:	48 01 c8             	add    %rcx,%rax
  800420233b:	48 01 c2             	add    %rax,%rdx
  800420233e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202345:	48 89 10             	mov    %rdx,(%rax)
  8004202348:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420234c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420234f:	48 63 c8             	movslq %eax,%rcx
  8004202352:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202359:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420235c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202361:	f7 e2                	mul    %edx
  8004202363:	89 d0                	mov    %edx,%eax
  8004202365:	c1 e8 04             	shr    $0x4,%eax
  8004202368:	89 c0                	mov    %eax,%eax
  800420236a:	48 39 c1             	cmp    %rax,%rcx
  800420236d:	0f 82 fd fe ff ff    	jb     8004202270 <multiboot_read+0x44f>
  8004202373:	4c 89 e4             	mov    %r12,%rsp
  8004202376:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  800420237a:	5b                   	pop    %rbx
  800420237b:	41 5c                	pop    %r12
  800420237d:	5d                   	pop    %rbp
  800420237e:	c3                   	retq   

000000800420237f <i386_detect_memory>:
  800420237f:	55                   	push   %rbp
  8004202380:	48 89 e5             	mov    %rsp,%rbp
  8004202383:	48 83 ec 50          	sub    $0x50,%rsp
  8004202387:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420238e:	00 
  800420238f:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004202396:	00 
  8004202397:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  800420239e:	00 00 00 
  80042023a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042023a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042023a9:	48 8b 00             	mov    (%rax),%rax
  80042023ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042023b0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042023b5:	74 2d                	je     80042023e4 <i386_detect_memory+0x65>
  80042023b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023bb:	8b 00                	mov    (%rax),%eax
  80042023bd:	83 e0 40             	and    $0x40,%eax
  80042023c0:	85 c0                	test   %eax,%eax
  80042023c2:	74 20                	je     80042023e4 <i386_detect_memory+0x65>
  80042023c4:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  80042023c8:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  80042023cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023d0:	48 89 ce             	mov    %rcx,%rsi
  80042023d3:	48 89 c7             	mov    %rax,%rdi
  80042023d6:	48 b8 21 1e 20 04 80 	movabs $0x8004201e21,%rax
  80042023dd:	00 00 00 
  80042023e0:	ff d0                	callq  *%rax
  80042023e2:	eb 34                	jmp    8004202418 <i386_detect_memory+0x99>
  80042023e4:	bf 15 00 00 00       	mov    $0x15,%edi
  80042023e9:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  80042023f0:	00 00 00 
  80042023f3:	ff d0                	callq  *%rax
  80042023f5:	c1 e0 0a             	shl    $0xa,%eax
  80042023f8:	48 98                	cltq   
  80042023fa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042023fe:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202403:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420240a:	00 00 00 
  800420240d:	ff d0                	callq  *%rax
  800420240f:	c1 e0 0a             	shl    $0xa,%eax
  8004202412:	48 98                	cltq   
  8004202414:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202418:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420241c:	48 85 c0             	test   %rax,%rax
  800420241f:	75 35                	jne    8004202456 <i386_detect_memory+0xd7>
  8004202421:	48 b9 59 91 21 04 80 	movabs $0x8004219159,%rcx
  8004202428:	00 00 00 
  800420242b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004202432:	00 00 00 
  8004202435:	be 8b 00 00 00       	mov    $0x8b,%esi
  800420243a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202441:	00 00 00 
  8004202444:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202449:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202450:	00 00 00 
  8004202453:	41 ff d0             	callq  *%r8
  8004202456:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420245a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420245e:	48 89 c2             	mov    %rax,%rdx
  8004202461:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  8004202468:	00 00 00 
  800420246b:	48 89 10             	mov    %rdx,(%rax)
  800420246e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202472:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202476:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420247a:	bf 17 00 00 00       	mov    $0x17,%edi
  800420247f:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  8004202486:	00 00 00 
  8004202489:	ff d0                	callq  *%rax
  800420248b:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202490:	75 2c                	jne    80042024be <i386_detect_memory+0x13f>
  8004202492:	bf 34 00 00 00       	mov    $0x34,%edi
  8004202497:	48 b8 e2 1d 20 04 80 	movabs $0x8004201de2,%rax
  800420249e:	00 00 00 
  80042024a1:	ff d0                	callq  *%rax
  80042024a3:	c1 e0 10             	shl    $0x10,%eax
  80042024a6:	48 98                	cltq   
  80042024a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042024ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042024b0:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  80042024b6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042024ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042024be:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042024c3:	74 1a                	je     80042024df <i386_detect_memory+0x160>
  80042024c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042024c9:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  80042024d0:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042024d7:	00 00 00 
  80042024da:	48 89 10             	mov    %rdx,(%rax)
  80042024dd:	eb 1a                	jmp    80042024f9 <i386_detect_memory+0x17a>
  80042024df:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  80042024e6:	00 00 00 
  80042024e9:	48 8b 10             	mov    (%rax),%rdx
  80042024ec:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042024f3:	00 00 00 
  80042024f6:	48 89 10             	mov    %rdx,(%rax)
  80042024f9:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202500:	00 00 00 
  8004202503:	48 8b 30             	mov    (%rax),%rsi
  8004202506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420250a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420250e:	48 c1 e8 0a          	shr    $0xa,%rax
  8004202512:	48 89 c1             	mov    %rax,%rcx
  8004202515:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  800420251c:	00 00 00 
  800420251f:	48 8b 00             	mov    (%rax),%rax
  8004202522:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202526:	48 c1 e8 0a          	shr    $0xa,%rax
  800420252a:	48 89 c2             	mov    %rax,%rdx
  800420252d:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202534:	00 00 00 
  8004202537:	48 8b 00             	mov    (%rax),%rax
  800420253a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420253e:	48 c1 e8 14          	shr    $0x14,%rax
  8004202542:	49 89 f0             	mov    %rsi,%r8
  8004202545:	48 89 c6             	mov    %rax,%rsi
  8004202548:	48 bf 88 91 21 04 80 	movabs $0x8004219188,%rdi
  800420254f:	00 00 00 
  8004202552:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202557:	49 b9 90 95 20 04 80 	movabs $0x8004209590,%r9
  800420255e:	00 00 00 
  8004202561:	41 ff d1             	callq  *%r9
  8004202564:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  800420256b:	00 
  800420256c:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004202573:	07 
  8004202574:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202578:	48 c1 e0 0c          	shl    $0xc,%rax
  800420257c:	48 c1 e8 14          	shr    $0x14,%rax
  8004202580:	48 89 c1             	mov    %rax,%rcx
  8004202583:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202587:	48 c1 e0 0c          	shl    $0xc,%rax
  800420258b:	48 c1 e8 14          	shr    $0x14,%rax
  800420258f:	48 89 c6             	mov    %rax,%rsi
  8004202592:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004202596:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420259a:	49 89 c8             	mov    %rcx,%r8
  800420259d:	48 89 d1             	mov    %rdx,%rcx
  80042025a0:	48 89 f2             	mov    %rsi,%rdx
  80042025a3:	48 89 c6             	mov    %rax,%rsi
  80042025a6:	48 bf d8 91 21 04 80 	movabs $0x80042191d8,%rdi
  80042025ad:	00 00 00 
  80042025b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b5:	49 b9 90 95 20 04 80 	movabs $0x8004209590,%r9
  80042025bc:	00 00 00 
  80042025bf:	41 ff d1             	callq  *%r9
  80042025c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042025c6:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042025ca:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  80042025cf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042025d3:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042025da:	00 00 00 
  80042025dd:	48 8b 00             	mov    (%rax),%rax
  80042025e0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042025e4:	76 3a                	jbe    8004202620 <i386_detect_memory+0x2a1>
  80042025e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042025ea:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042025f1:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042025f8:	00 00 00 
  80042025fb:	48 89 10             	mov    %rdx,(%rax)
  80042025fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202602:	48 89 c6             	mov    %rax,%rsi
  8004202605:	48 bf 40 92 21 04 80 	movabs $0x8004219240,%rdi
  800420260c:	00 00 00 
  800420260f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202614:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420261b:	00 00 00 
  800420261e:	ff d2                	callq  *%rdx
  8004202620:	c9                   	leaveq 
  8004202621:	c3                   	retq   

0000008004202622 <boot_alloc>:
  8004202622:	55                   	push   %rbp
  8004202623:	48 89 e5             	mov    %rsp,%rbp
  8004202626:	48 83 ec 40          	sub    $0x40,%rsp
  800420262a:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420262d:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  8004202634:	00 00 00 
  8004202637:	48 8b 00             	mov    (%rax),%rax
  800420263a:	48 85 c0             	test   %rax,%rax
  800420263d:	75 4b                	jne    800420268a <boot_alloc+0x68>
  800420263f:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  8004202646:	00 
  8004202647:	48 b8 10 00 6e 04 80 	movabs $0x80046e0010,%rax
  800420264e:	00 00 00 
  8004202651:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004202655:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202659:	48 01 d0             	add    %rdx,%rax
  800420265c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202664:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202669:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420266d:	48 89 d0             	mov    %rdx,%rax
  8004202670:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004202674:	48 29 c2             	sub    %rax,%rdx
  8004202677:	48 89 d0             	mov    %rdx,%rax
  800420267a:	48 89 c2             	mov    %rax,%rdx
  800420267d:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  8004202684:	00 00 00 
  8004202687:	48 89 10             	mov    %rdx,(%rax)
  800420268a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420268d:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  8004202694:	00 00 00 
  8004202697:	48 8b 00             	mov    (%rax),%rax
  800420269a:	48 01 c2             	add    %rax,%rdx
  800420269d:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  80042026a4:	00 00 00 
  80042026a7:	48 8b 00             	mov    (%rax),%rax
  80042026aa:	48 39 c2             	cmp    %rax,%rdx
  80042026ad:	72 2f                	jb     80042026de <boot_alloc+0xbc>
  80042026af:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  80042026b6:	00 00 00 
  80042026b9:	48 8b 10             	mov    (%rax),%rdx
  80042026bc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042026bf:	48 01 c2             	add    %rax,%rdx
  80042026c2:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042026c9:	00 00 00 
  80042026cc:	48 8b 00             	mov    (%rax),%rax
  80042026cf:	48 05 00 40 00 08    	add    $0x8004000,%rax
  80042026d5:	48 c1 e0 0c          	shl    $0xc,%rax
  80042026d9:	48 39 c2             	cmp    %rax,%rdx
  80042026dc:	76 2a                	jbe    8004202708 <boot_alloc+0xe6>
  80042026de:	48 ba 70 92 21 04 80 	movabs $0x8004219270,%rdx
  80042026e5:	00 00 00 
  80042026e8:	be f3 00 00 00       	mov    $0xf3,%esi
  80042026ed:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042026f4:	00 00 00 
  80042026f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026fc:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004202703:	00 00 00 
  8004202706:	ff d1                	callq  *%rcx
  8004202708:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  800420270f:	00 00 00 
  8004202712:	48 8b 00             	mov    (%rax),%rax
  8004202715:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202719:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004202720:	00 
  8004202721:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  8004202728:	00 00 00 
  800420272b:	48 8b 10             	mov    (%rax),%rdx
  800420272e:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202731:	48 01 d0             	add    %rdx,%rax
  8004202734:	48 89 c2             	mov    %rax,%rdx
  8004202737:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420273b:	48 01 d0             	add    %rdx,%rax
  800420273e:	48 83 e8 01          	sub    $0x1,%rax
  8004202742:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420274a:	ba 00 00 00 00       	mov    $0x0,%edx
  800420274f:	48 f7 75 e0          	divq   -0x20(%rbp)
  8004202753:	48 89 d0             	mov    %rdx,%rax
  8004202756:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420275a:	48 29 c2             	sub    %rax,%rdx
  800420275d:	48 89 d0             	mov    %rdx,%rax
  8004202760:	48 89 c2             	mov    %rax,%rdx
  8004202763:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  800420276a:	00 00 00 
  800420276d:	48 89 10             	mov    %rdx,(%rax)
  8004202770:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202774:	c9                   	leaveq 
  8004202775:	c3                   	retq   

0000008004202776 <x64_vm_init>:
  8004202776:	55                   	push   %rbp
  8004202777:	48 89 e5             	mov    %rsp,%rbp
  800420277a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420277e:	48 b8 7f 23 20 04 80 	movabs $0x800420237f,%rax
  8004202785:	00 00 00 
  8004202788:	ff d0                	callq  *%rax
  800420278a:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420278f:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202796:	00 00 00 
  8004202799:	ff d0                	callq  *%rax
  800420279b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420279f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027a3:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042027a8:	be 00 00 00 00       	mov    $0x0,%esi
  80042027ad:	48 89 c7             	mov    %rax,%rdi
  80042027b0:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042027b7:	00 00 00 
  80042027ba:	ff d0                	callq  *%rax
  80042027bc:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042027c3:	00 00 00 
  80042027c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042027ca:	48 89 10             	mov    %rdx,(%rax)
  80042027cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042027d5:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027dc:	00 00 00 
  80042027df:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042027e3:	77 32                	ja     8004202817 <x64_vm_init+0xa1>
  80042027e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042027e9:	48 89 c1             	mov    %rax,%rcx
  80042027ec:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  80042027f3:	00 00 00 
  80042027f6:	be 18 01 00 00       	mov    $0x118,%esi
  80042027fb:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202802:	00 00 00 
  8004202805:	b8 00 00 00 00       	mov    $0x0,%eax
  800420280a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202811:	00 00 00 
  8004202814:	41 ff d0             	callq  *%r8
  8004202817:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420281e:	ff ff ff 
  8004202821:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202825:	48 01 c2             	add    %rax,%rdx
  8004202828:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  800420282f:	00 00 00 
  8004202832:	48 89 10             	mov    %rdx,(%rax)
  8004202835:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420283c:	00 00 00 
  800420283f:	48 8b 00             	mov    (%rax),%rax
  8004202842:	48 c1 e0 04          	shl    $0x4,%rax
  8004202846:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420284a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420284e:	89 c7                	mov    %eax,%edi
  8004202850:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202857:	00 00 00 
  800420285a:	ff d0                	callq  *%rax
  800420285c:	48 ba f8 d5 69 04 80 	movabs $0x800469d5f8,%rdx
  8004202863:	00 00 00 
  8004202866:	48 89 02             	mov    %rax,(%rdx)
  8004202869:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202870:	00 00 00 
  8004202873:	48 8b 00             	mov    (%rax),%rax
  8004202876:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420287a:	be 00 00 00 00       	mov    $0x0,%esi
  800420287f:	48 89 c7             	mov    %rax,%rdi
  8004202882:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  8004202889:	00 00 00 
  800420288c:	ff d0                	callq  *%rax
  800420288e:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  8004202893:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  800420289a:	00 00 00 
  800420289d:	ff d0                	callq  *%rax
  800420289f:	48 ba 58 e2 49 04 80 	movabs $0x800449e258,%rdx
  80042028a6:	00 00 00 
  80042028a9:	48 89 02             	mov    %rax,(%rdx)
  80042028ac:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042028b3:	00 00 00 
  80042028b6:	48 8b 00             	mov    (%rax),%rax
  80042028b9:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  80042028be:	be 00 00 00 00       	mov    $0x0,%esi
  80042028c3:	48 89 c7             	mov    %rax,%rdi
  80042028c6:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042028cd:	00 00 00 
  80042028d0:	ff d0                	callq  *%rax
  80042028d2:	48 b8 30 2d 20 04 80 	movabs $0x8004202d30,%rax
  80042028d9:	00 00 00 
  80042028dc:	ff d0                	callq  *%rax
  80042028de:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042028e5:	00 00 00 
  80042028e8:	48 8b 00             	mov    (%rax),%rax
  80042028eb:	48 c1 e0 04          	shl    $0x4,%rax
  80042028ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042028f3:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  80042028fa:	00 00 00 
  80042028fd:	48 8b 00             	mov    (%rax),%rax
  8004202900:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202904:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420290b:	00 00 00 
  800420290e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004202912:	77 32                	ja     8004202946 <x64_vm_init+0x1d0>
  8004202914:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202918:	48 89 c1             	mov    %rax,%rcx
  800420291b:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  8004202922:	00 00 00 
  8004202925:	be 43 01 00 00       	mov    $0x143,%esi
  800420292a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202931:	00 00 00 
  8004202934:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202939:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202940:	00 00 00 
  8004202943:	41 ff d0             	callq  *%r8
  8004202946:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420294d:	ff ff ff 
  8004202950:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202954:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202958:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420295f:	00 00 00 
  8004202962:	48 8b 00             	mov    (%rax),%rax
  8004202965:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202969:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420296f:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202976:	00 00 00 
  8004202979:	48 89 c7             	mov    %rax,%rdi
  800420297c:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202983:	00 00 00 
  8004202986:	ff d0                	callq  *%rax
  8004202988:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420298f:	00 
  8004202990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202994:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420299a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420299e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042029a2:	ba 00 00 00 00       	mov    $0x0,%edx
  80042029a7:	48 f7 75 d8          	divq   -0x28(%rbp)
  80042029ab:	48 89 d0             	mov    %rdx,%rax
  80042029ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042029b2:	48 29 c2             	sub    %rax,%rdx
  80042029b5:	48 89 d0             	mov    %rdx,%rax
  80042029b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042029bc:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042029c3:	00 00 00 
  80042029c6:	48 8b 00             	mov    (%rax),%rax
  80042029c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042029cd:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042029d4:	00 00 00 
  80042029d7:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042029db:	77 32                	ja     8004202a0f <x64_vm_init+0x299>
  80042029dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042029e1:	48 89 c1             	mov    %rax,%rcx
  80042029e4:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  80042029eb:	00 00 00 
  80042029ee:	be 51 01 00 00       	mov    $0x151,%esi
  80042029f3:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042029fa:	00 00 00 
  80042029fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a02:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a09:	00 00 00 
  8004202a0c:	41 ff d0             	callq  *%r8
  8004202a0f:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202a16:	ff ff ff 
  8004202a19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202a1d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202a21:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202a28:	00 00 00 
  8004202a2b:	48 8b 00             	mov    (%rax),%rax
  8004202a2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202a32:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  8004202a38:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004202a3f:	00 00 00 
  8004202a42:	48 89 c7             	mov    %rax,%rdi
  8004202a45:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202a4c:	00 00 00 
  8004202a4f:	ff d0                	callq  *%rax
  8004202a51:	48 b8 00 c0 21 04 80 	movabs $0x800421c000,%rax
  8004202a58:	00 00 00 
  8004202a5b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202a5f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202a66:	00 00 00 
  8004202a69:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202a6d:	77 32                	ja     8004202aa1 <x64_vm_init+0x32b>
  8004202a6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202a73:	48 89 c1             	mov    %rax,%rcx
  8004202a76:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  8004202a7d:	00 00 00 
  8004202a80:	be 62 01 00 00       	mov    $0x162,%esi
  8004202a85:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202a8c:	00 00 00 
  8004202a8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a94:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202a9b:	00 00 00 
  8004202a9e:	41 ff d0             	callq  *%r8
  8004202aa1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202aa8:	ff ff ff 
  8004202aab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202aaf:	48 01 c2             	add    %rax,%rdx
  8004202ab2:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202ab9:	00 00 00 
  8004202abc:	48 8b 00             	mov    (%rax),%rax
  8004202abf:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202ac5:	48 89 d1             	mov    %rdx,%rcx
  8004202ac8:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202acd:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  8004202ad4:	00 00 00 
  8004202ad7:	48 89 c7             	mov    %rax,%rdi
  8004202ada:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202ae1:	00 00 00 
  8004202ae4:	ff d0                	callq  *%rax
  8004202ae6:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202af7:	48 89 c2             	mov    %rax,%rdx
  8004202afa:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202b01:	00 00 00 
  8004202b04:	48 8b 00             	mov    (%rax),%rax
  8004202b07:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202b0d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004202b12:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  8004202b19:	00 00 00 
  8004202b1c:	48 89 c7             	mov    %rax,%rdi
  8004202b1f:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202b26:	00 00 00 
  8004202b29:	ff d0                	callq  *%rax
  8004202b2b:	48 b8 45 2c 20 04 80 	movabs $0x8004202c45,%rax
  8004202b32:	00 00 00 
  8004202b35:	ff d0                	callq  *%rax
  8004202b37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202b3b:	48 83 c0 08          	add    $0x8,%rax
  8004202b3f:	48 8b 00             	mov    (%rax),%rax
  8004202b42:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202b48:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202b4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202b54:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202b57:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202b5a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202b61:	00 00 00 
  8004202b64:	48 8b 00             	mov    (%rax),%rax
  8004202b67:	48 39 c2             	cmp    %rax,%rdx
  8004202b6a:	72 32                	jb     8004202b9e <x64_vm_init+0x428>
  8004202b6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b70:	48 89 c1             	mov    %rax,%rcx
  8004202b73:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004202b7a:	00 00 00 
  8004202b7d:	be 82 01 00 00       	mov    $0x182,%esi
  8004202b82:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202b89:	00 00 00 
  8004202b8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b91:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202b98:	00 00 00 
  8004202b9b:	41 ff d0             	callq  *%r8
  8004202b9e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ba5:	00 00 00 
  8004202ba8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202bac:	48 01 d0             	add    %rdx,%rax
  8004202baf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202bb3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202bb7:	48 8b 00             	mov    (%rax),%rax
  8004202bba:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202bc0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202bc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202bc8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202bcc:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202bcf:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202bd2:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202bd9:	00 00 00 
  8004202bdc:	48 8b 00             	mov    (%rax),%rax
  8004202bdf:	48 39 c2             	cmp    %rax,%rdx
  8004202be2:	72 32                	jb     8004202c16 <x64_vm_init+0x4a0>
  8004202be4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202be8:	48 89 c1             	mov    %rax,%rcx
  8004202beb:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004202bf2:	00 00 00 
  8004202bf5:	be 83 01 00 00       	mov    $0x183,%esi
  8004202bfa:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202c01:	00 00 00 
  8004202c04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202c10:	00 00 00 
  8004202c13:	41 ff d0             	callq  *%r8
  8004202c16:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c1d:	00 00 00 
  8004202c20:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202c24:	48 01 d0             	add    %rdx,%rax
  8004202c27:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202c2b:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202c3c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202c40:	0f 22 d8             	mov    %rax,%cr3
  8004202c43:	c9                   	leaveq 
  8004202c44:	c3                   	retq   

0000008004202c45 <mem_init_mp>:
  8004202c45:	55                   	push   %rbp
  8004202c46:	48 89 e5             	mov    %rsp,%rbp
  8004202c49:	48 83 ec 20          	sub    $0x20,%rsp
  8004202c4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202c54:	e9 cb 00 00 00       	jmpq   8004202d24 <mem_init_mp+0xdf>
  8004202c59:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202c5c:	89 d0                	mov    %edx,%eax
  8004202c5e:	01 c0                	add    %eax,%eax
  8004202c60:	01 d0                	add    %edx,%eax
  8004202c62:	c1 e0 0f             	shl    $0xf,%eax
  8004202c65:	48 98                	cltq   
  8004202c67:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c6e:	00 00 00 
  8004202c71:	48 29 c2             	sub    %rax,%rdx
  8004202c74:	48 89 d0             	mov    %rdx,%rax
  8004202c77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202c7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202c7e:	48 98                	cltq   
  8004202c80:	48 c1 e0 10          	shl    $0x10,%rax
  8004202c84:	48 89 c2             	mov    %rax,%rdx
  8004202c87:	48 b8 00 00 6a 04 80 	movabs $0x80046a0000,%rax
  8004202c8e:	00 00 00 
  8004202c91:	48 01 d0             	add    %rdx,%rax
  8004202c94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202c98:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c9f:	00 00 00 
  8004202ca2:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202ca6:	77 32                	ja     8004202cda <mem_init_mp+0x95>
  8004202ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cac:	48 89 c1             	mov    %rax,%rcx
  8004202caf:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  8004202cb6:	00 00 00 
  8004202cb9:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202cbe:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202cc5:	00 00 00 
  8004202cc8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ccd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202cd4:	00 00 00 
  8004202cd7:	41 ff d0             	callq  *%r8
  8004202cda:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ce1:	ff ff ff 
  8004202ce4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ce8:	48 01 c2             	add    %rax,%rdx
  8004202ceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202cef:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202cf6:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202cfd:	00 00 00 
  8004202d00:	48 8b 00             	mov    (%rax),%rax
  8004202d03:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202d09:	48 89 d1             	mov    %rdx,%rcx
  8004202d0c:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202d11:	48 89 c7             	mov    %rax,%rdi
  8004202d14:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004202d1b:	00 00 00 
  8004202d1e:	ff d0                	callq  *%rax
  8004202d20:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202d24:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202d28:	0f 8e 2b ff ff ff    	jle    8004202c59 <mem_init_mp+0x14>
  8004202d2e:	c9                   	leaveq 
  8004202d2f:	c3                   	retq   

0000008004202d30 <page_init>:
  8004202d30:	55                   	push   %rbp
  8004202d31:	48 89 e5             	mov    %rsp,%rbp
  8004202d34:	48 83 ec 50          	sub    $0x50,%rsp
  8004202d38:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202d3d:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  8004202d44:	00 00 00 
  8004202d47:	ff d0                	callq  *%rax
  8004202d49:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202d4d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202d54:	00 
  8004202d55:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202d5c:	00 
  8004202d5d:	e9 65 02 00 00       	jmpq   8004202fc7 <page_init+0x297>
  8004202d62:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d69:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202d6e:	74 1a                	je     8004202d8a <page_init+0x5a>
  8004202d70:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  8004202d77:	00 00 00 
  8004202d7a:	48 8b 00             	mov    (%rax),%rax
  8004202d7d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202d81:	73 07                	jae    8004202d8a <page_init+0x5a>
  8004202d83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202d8a:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202d8f:	75 07                	jne    8004202d98 <page_init+0x68>
  8004202d91:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202d9c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202da0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202da7:	00 00 00 
  8004202daa:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202dae:	77 32                	ja     8004202de2 <page_init+0xb2>
  8004202db0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202db4:	48 89 c1             	mov    %rax,%rcx
  8004202db7:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  8004202dbe:	00 00 00 
  8004202dc1:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202dc6:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202dcd:	00 00 00 
  8004202dd0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202dd5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ddc:	00 00 00 
  8004202ddf:	41 ff d0             	callq  *%r8
  8004202de2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202de9:	ff ff ff 
  8004202dec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202df0:	48 01 d0             	add    %rdx,%rax
  8004202df3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202df7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202dfb:	77 07                	ja     8004202e04 <page_init+0xd4>
  8004202dfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202e08:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202e0e:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202e12:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202e16:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e1d:	00 00 00 
  8004202e20:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202e24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e28:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202e2c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202e2f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202e32:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202e39:	00 00 00 
  8004202e3c:	48 8b 00             	mov    (%rax),%rax
  8004202e3f:	48 39 c2             	cmp    %rax,%rdx
  8004202e42:	72 32                	jb     8004202e76 <page_init+0x146>
  8004202e44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e48:	48 89 c1             	mov    %rax,%rcx
  8004202e4b:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004202e52:	00 00 00 
  8004202e55:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202e5a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202e61:	00 00 00 
  8004202e64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202e69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202e70:	00 00 00 
  8004202e73:	41 ff d0             	callq  *%r8
  8004202e76:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202e7d:	00 00 00 
  8004202e80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e84:	48 01 d0             	add    %rdx,%rax
  8004202e87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202e8b:	0f 87 84 00 00 00    	ja     8004202f15 <page_init+0x1e5>
  8004202e91:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e98:	00 00 00 
  8004202e9b:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202ea1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202ea5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ea9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ead:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202eb0:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202eb3:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202eba:	00 00 00 
  8004202ebd:	48 8b 00             	mov    (%rax),%rax
  8004202ec0:	48 39 c2             	cmp    %rax,%rdx
  8004202ec3:	72 32                	jb     8004202ef7 <page_init+0x1c7>
  8004202ec5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ec9:	48 89 c1             	mov    %rax,%rcx
  8004202ecc:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004202ed3:	00 00 00 
  8004202ed6:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202edb:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004202ee2:	00 00 00 
  8004202ee5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202eea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004202ef1:	00 00 00 
  8004202ef4:	41 ff d0             	callq  *%r8
  8004202ef7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202efe:	00 00 00 
  8004202f01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202f05:	48 01 d0             	add    %rdx,%rax
  8004202f08:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202f0c:	76 07                	jbe    8004202f15 <page_init+0x1e5>
  8004202f0e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202f15:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f1c:	00 00 00 
  8004202f1f:	48 8b 00             	mov    (%rax),%rax
  8004202f22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f26:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f2a:	48 01 c2             	add    %rax,%rdx
  8004202f2d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202f30:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202f34:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f3b:	00 00 00 
  8004202f3e:	48 8b 00             	mov    (%rax),%rax
  8004202f41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f45:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f49:	48 01 d0             	add    %rdx,%rax
  8004202f4c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202f53:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202f57:	75 69                	jne    8004202fc2 <page_init+0x292>
  8004202f59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202f5e:	74 21                	je     8004202f81 <page_init+0x251>
  8004202f60:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f67:	00 00 00 
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f71:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f75:	48 01 c2             	add    %rax,%rdx
  8004202f78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202f7c:	48 89 10             	mov    %rdx,(%rax)
  8004202f7f:	eb 25                	jmp    8004202fa6 <page_init+0x276>
  8004202f81:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f88:	00 00 00 
  8004202f8b:	48 8b 00             	mov    (%rax),%rax
  8004202f8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f92:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f96:	48 01 c2             	add    %rax,%rdx
  8004202f99:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004202fa0:	00 00 00 
  8004202fa3:	48 89 10             	mov    %rdx,(%rax)
  8004202fa6:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202fad:	00 00 00 
  8004202fb0:	48 8b 00             	mov    (%rax),%rax
  8004202fb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fb7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202fbb:	48 01 d0             	add    %rdx,%rax
  8004202fbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202fc2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202fc7:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202fce:	00 00 00 
  8004202fd1:	48 8b 00             	mov    (%rax),%rax
  8004202fd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202fd8:	0f 82 84 fd ff ff    	jb     8004202d62 <page_init+0x32>
  8004202fde:	c9                   	leaveq 
  8004202fdf:	c3                   	retq   

0000008004202fe0 <page_alloc>:
  8004202fe0:	55                   	push   %rbp
  8004202fe1:	48 89 e5             	mov    %rsp,%rbp
  8004202fe4:	48 83 ec 20          	sub    $0x20,%rsp
  8004202fe8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202feb:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004202ff2:	00 00 00 
  8004202ff5:	48 8b 00             	mov    (%rax),%rax
  8004202ff8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202ffc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203001:	74 5e                	je     8004203061 <page_alloc+0x81>
  8004203003:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  800420300a:	00 00 00 
  800420300d:	48 8b 00             	mov    (%rax),%rax
  8004203010:	48 8b 10             	mov    (%rax),%rdx
  8004203013:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  800420301a:	00 00 00 
  800420301d:	48 89 10             	mov    %rdx,(%rax)
  8004203020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203024:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420302b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420302e:	83 e0 01             	and    $0x1,%eax
  8004203031:	85 c0                	test   %eax,%eax
  8004203033:	74 2c                	je     8004203061 <page_alloc+0x81>
  8004203035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203039:	48 89 c7             	mov    %rax,%rdi
  800420303c:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004203043:	00 00 00 
  8004203046:	ff d0                	callq  *%rax
  8004203048:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420304d:	be 00 00 00 00       	mov    $0x0,%esi
  8004203052:	48 89 c7             	mov    %rax,%rdi
  8004203055:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  800420305c:	00 00 00 
  800420305f:	ff d0                	callq  *%rax
  8004203061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203065:	c9                   	leaveq 
  8004203066:	c3                   	retq   

0000008004203067 <page_initpp>:
  8004203067:	55                   	push   %rbp
  8004203068:	48 89 e5             	mov    %rsp,%rbp
  800420306b:	48 83 ec 10          	sub    $0x10,%rsp
  800420306f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203077:	ba 10 00 00 00       	mov    $0x10,%edx
  800420307c:	be 00 00 00 00       	mov    $0x0,%esi
  8004203081:	48 89 c7             	mov    %rax,%rdi
  8004203084:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  800420308b:	00 00 00 
  800420308e:	ff d0                	callq  *%rax
  8004203090:	c9                   	leaveq 
  8004203091:	c3                   	retq   

0000008004203092 <page_free>:
  8004203092:	55                   	push   %rbp
  8004203093:	48 89 e5             	mov    %rsp,%rbp
  8004203096:	48 83 ec 10          	sub    $0x10,%rsp
  800420309a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420309e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030a2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042030a6:	66 85 c0             	test   %ax,%ax
  80042030a9:	75 0c                	jne    80042030b7 <page_free+0x25>
  80042030ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030af:	48 8b 00             	mov    (%rax),%rax
  80042030b2:	48 85 c0             	test   %rax,%rax
  80042030b5:	74 2c                	je     80042030e3 <page_free+0x51>
  80042030b7:	48 ba c0 92 21 04 80 	movabs $0x80042192c0,%rdx
  80042030be:	00 00 00 
  80042030c1:	be 3d 02 00 00       	mov    $0x23d,%esi
  80042030c6:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042030cd:	00 00 00 
  80042030d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042030d5:	48 b9 1b 07 20 04 80 	movabs $0x800420071b,%rcx
  80042030dc:	00 00 00 
  80042030df:	ff d1                	callq  *%rcx
  80042030e1:	eb 2f                	jmp    8004203112 <page_free+0x80>
  80042030e3:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042030ea:	00 00 00 
  80042030ed:	48 8b 10             	mov    (%rax),%rdx
  80042030f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030f4:	48 89 10             	mov    %rdx,(%rax)
  80042030f7:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042030fe:	00 00 00 
  8004203101:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203105:	48 89 10             	mov    %rdx,(%rax)
  8004203108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420310c:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004203112:	c9                   	leaveq 
  8004203113:	c3                   	retq   

0000008004203114 <page_decref>:
  8004203114:	55                   	push   %rbp
  8004203115:	48 89 e5             	mov    %rsp,%rbp
  8004203118:	48 83 ec 10          	sub    $0x10,%rsp
  800420311c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203124:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203128:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420312b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420312f:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203137:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420313b:	66 85 c0             	test   %ax,%ax
  800420313e:	75 13                	jne    8004203153 <page_decref+0x3f>
  8004203140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203144:	48 89 c7             	mov    %rax,%rdi
  8004203147:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420314e:	00 00 00 
  8004203151:	ff d0                	callq  *%rax
  8004203153:	c9                   	leaveq 
  8004203154:	c3                   	retq   

0000008004203155 <pml4e_walk>:
  8004203155:	55                   	push   %rbp
  8004203156:	48 89 e5             	mov    %rsp,%rbp
  8004203159:	53                   	push   %rbx
  800420315a:	48 83 ec 68          	sub    $0x68,%rsp
  800420315e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203162:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203166:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203169:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  800420316e:	0f 84 4e 02 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203174:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203178:	48 c1 e8 27          	shr    $0x27,%rax
  800420317c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203181:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203188:	00 
  8004203189:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420318d:	48 01 d0             	add    %rdx,%rax
  8004203190:	48 8b 00             	mov    (%rax),%rax
  8004203193:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420319b:	83 e0 01             	and    $0x1,%eax
  800420319e:	48 85 c0             	test   %rax,%rax
  80042031a1:	0f 85 7f 01 00 00    	jne    8004203326 <pml4e_walk+0x1d1>
  80042031a7:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042031ab:	0f 84 75 01 00 00    	je     8004203326 <pml4e_walk+0x1d1>
  80042031b1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042031b8:	00 
  80042031b9:	bf 01 00 00 00       	mov    $0x1,%edi
  80042031be:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042031c5:	00 00 00 
  80042031c8:	ff d0                	callq  *%rax
  80042031ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042031ce:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042031d3:	0f 84 43 01 00 00    	je     800420331c <pml4e_walk+0x1c7>
  80042031d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031dd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042031e1:	8d 50 01             	lea    0x1(%rax),%edx
  80042031e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031e8:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042031ec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042031f0:	48 c1 e8 27          	shr    $0x27,%rax
  80042031f4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203200:	00 
  8004203201:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203205:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203209:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420320d:	48 89 c7             	mov    %rax,%rdi
  8004203210:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203217:	00 00 00 
  800420321a:	ff d0                	callq  *%rax
  800420321c:	48 83 c8 07          	or     $0x7,%rax
  8004203220:	48 89 03             	mov    %rax,(%rbx)
  8004203223:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203227:	48 c1 e8 27          	shr    $0x27,%rax
  800420322b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203230:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203237:	00 
  8004203238:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420323c:	48 01 d0             	add    %rdx,%rax
  800420323f:	48 8b 00             	mov    (%rax),%rax
  8004203242:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203248:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420324c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203250:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203254:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203257:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420325a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203261:	00 00 00 
  8004203264:	48 8b 00             	mov    (%rax),%rax
  8004203267:	48 39 c2             	cmp    %rax,%rdx
  800420326a:	72 32                	jb     800420329e <pml4e_walk+0x149>
  800420326c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203270:	48 89 c1             	mov    %rax,%rcx
  8004203273:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  800420327a:	00 00 00 
  800420327d:	be 79 02 00 00       	mov    $0x279,%esi
  8004203282:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203289:	00 00 00 
  800420328c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203291:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203298:	00 00 00 
  800420329b:	41 ff d0             	callq  *%r8
  800420329e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042032a5:	00 00 00 
  80042032a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042032ac:	48 01 d0             	add    %rdx,%rax
  80042032af:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042032b2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042032b6:	48 89 ce             	mov    %rcx,%rsi
  80042032b9:	48 89 c7             	mov    %rax,%rdi
  80042032bc:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042032c3:	00 00 00 
  80042032c6:	ff d0                	callq  *%rax
  80042032c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042032cc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042032d1:	74 09                	je     80042032dc <pml4e_walk+0x187>
  80042032d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042032d7:	e9 eb 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  80042032dc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032e0:	48 c1 e8 27          	shr    $0x27,%rax
  80042032e4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032e9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032f0:	00 
  80042032f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032f5:	48 01 d0             	add    %rdx,%rax
  80042032f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042032ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203303:	48 89 c7             	mov    %rax,%rdi
  8004203306:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420330d:	00 00 00 
  8004203310:	ff d0                	callq  *%rax
  8004203312:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203317:	e9 ab 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  800420331c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203321:	e9 a1 00 00 00       	jmpq   80042033c7 <pml4e_walk+0x272>
  8004203326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420332a:	83 e0 01             	and    $0x1,%eax
  800420332d:	48 85 c0             	test   %rax,%rax
  8004203330:	0f 84 8c 00 00 00    	je     80042033c2 <pml4e_walk+0x26d>
  8004203336:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420333a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203340:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203344:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203348:	48 c1 e8 0c          	shr    $0xc,%rax
  800420334c:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420334f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203352:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203359:	00 00 00 
  800420335c:	48 8b 00             	mov    (%rax),%rax
  800420335f:	48 39 c2             	cmp    %rax,%rdx
  8004203362:	72 32                	jb     8004203396 <pml4e_walk+0x241>
  8004203364:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203368:	48 89 c1             	mov    %rax,%rcx
  800420336b:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004203372:	00 00 00 
  8004203375:	be 83 02 00 00       	mov    $0x283,%esi
  800420337a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203381:	00 00 00 
  8004203384:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203389:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203390:	00 00 00 
  8004203393:	41 ff d0             	callq  *%r8
  8004203396:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420339d:	00 00 00 
  80042033a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042033a4:	48 01 d0             	add    %rdx,%rax
  80042033a7:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033aa:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ae:	48 89 ce             	mov    %rcx,%rsi
  80042033b1:	48 89 c7             	mov    %rax,%rdi
  80042033b4:	48 b8 ce 33 20 04 80 	movabs $0x80042033ce,%rax
  80042033bb:	00 00 00 
  80042033be:	ff d0                	callq  *%rax
  80042033c0:	eb 05                	jmp    80042033c7 <pml4e_walk+0x272>
  80042033c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c7:	48 83 c4 68          	add    $0x68,%rsp
  80042033cb:	5b                   	pop    %rbx
  80042033cc:	5d                   	pop    %rbp
  80042033cd:	c3                   	retq   

00000080042033ce <pdpe_walk>:
  80042033ce:	55                   	push   %rbp
  80042033cf:	48 89 e5             	mov    %rsp,%rbp
  80042033d2:	53                   	push   %rbx
  80042033d3:	48 83 ec 68          	sub    $0x68,%rsp
  80042033d7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042033db:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042033df:	89 55 9c             	mov    %edx,-0x64(%rbp)
  80042033e2:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042033e7:	0f 84 4e 02 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042033ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042033f1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042033f5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042033fa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203401:	00 
  8004203402:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203406:	48 01 d0             	add    %rdx,%rax
  8004203409:	48 8b 00             	mov    (%rax),%rax
  800420340c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203414:	83 e0 01             	and    $0x1,%eax
  8004203417:	48 85 c0             	test   %rax,%rax
  800420341a:	0f 85 7f 01 00 00    	jne    800420359f <pdpe_walk+0x1d1>
  8004203420:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203424:	0f 84 75 01 00 00    	je     800420359f <pdpe_walk+0x1d1>
  800420342a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203431:	00 
  8004203432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203437:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420343e:	00 00 00 
  8004203441:	ff d0                	callq  *%rax
  8004203443:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203447:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420344c:	0f 84 43 01 00 00    	je     8004203595 <pdpe_walk+0x1c7>
  8004203452:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203456:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420345a:	8d 50 01             	lea    0x1(%rax),%edx
  800420345d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203461:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203465:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203469:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420346d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203472:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203479:	00 
  800420347a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420347e:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203482:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203486:	48 89 c7             	mov    %rax,%rdi
  8004203489:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203490:	00 00 00 
  8004203493:	ff d0                	callq  *%rax
  8004203495:	48 83 c8 07          	or     $0x7,%rax
  8004203499:	48 89 03             	mov    %rax,(%rbx)
  800420349c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042034a0:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042034a4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042034a9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042034b0:	00 
  80042034b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042034b5:	48 01 d0             	add    %rdx,%rax
  80042034b8:	48 8b 00             	mov    (%rax),%rax
  80042034bb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042034c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042034c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034c9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042034cd:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  80042034d0:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042034d3:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042034da:	00 00 00 
  80042034dd:	48 8b 00             	mov    (%rax),%rax
  80042034e0:	48 39 c2             	cmp    %rax,%rdx
  80042034e3:	72 32                	jb     8004203517 <pdpe_walk+0x149>
  80042034e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034e9:	48 89 c1             	mov    %rax,%rcx
  80042034ec:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  80042034f3:	00 00 00 
  80042034f6:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042034fb:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203502:	00 00 00 
  8004203505:	b8 00 00 00 00       	mov    $0x0,%eax
  800420350a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203511:	00 00 00 
  8004203514:	41 ff d0             	callq  *%r8
  8004203517:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420351e:	00 00 00 
  8004203521:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203525:	48 01 d0             	add    %rdx,%rax
  8004203528:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420352b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420352f:	48 89 ce             	mov    %rcx,%rsi
  8004203532:	48 89 c7             	mov    %rax,%rdi
  8004203535:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  800420353c:	00 00 00 
  800420353f:	ff d0                	callq  *%rax
  8004203541:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203545:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420354a:	74 09                	je     8004203555 <pdpe_walk+0x187>
  800420354c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203550:	e9 eb 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203555:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203559:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420355d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203562:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203569:	00 
  800420356a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420356e:	48 01 d0             	add    %rdx,%rax
  8004203571:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203578:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420357c:	48 89 c7             	mov    %rax,%rdi
  800420357f:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203586:	00 00 00 
  8004203589:	ff d0                	callq  *%rax
  800420358b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203590:	e9 ab 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  8004203595:	b8 00 00 00 00       	mov    $0x0,%eax
  800420359a:	e9 a1 00 00 00       	jmpq   8004203640 <pdpe_walk+0x272>
  800420359f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035a3:	83 e0 01             	and    $0x1,%eax
  80042035a6:	48 85 c0             	test   %rax,%rax
  80042035a9:	0f 84 8c 00 00 00    	je     800420363b <pdpe_walk+0x26d>
  80042035af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035b3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042035b9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042035bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035c1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035c5:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042035c8:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042035cb:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042035d2:	00 00 00 
  80042035d5:	48 8b 00             	mov    (%rax),%rax
  80042035d8:	48 39 c2             	cmp    %rax,%rdx
  80042035db:	72 32                	jb     800420360f <pdpe_walk+0x241>
  80042035dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035e1:	48 89 c1             	mov    %rax,%rcx
  80042035e4:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  80042035eb:	00 00 00 
  80042035ee:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042035f3:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042035fa:	00 00 00 
  80042035fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203602:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203609:	00 00 00 
  800420360c:	41 ff d0             	callq  *%r8
  800420360f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203616:	00 00 00 
  8004203619:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420361d:	48 01 d0             	add    %rdx,%rax
  8004203620:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203623:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203627:	48 89 ce             	mov    %rcx,%rsi
  800420362a:	48 89 c7             	mov    %rax,%rdi
  800420362d:	48 b8 47 36 20 04 80 	movabs $0x8004203647,%rax
  8004203634:	00 00 00 
  8004203637:	ff d0                	callq  *%rax
  8004203639:	eb 05                	jmp    8004203640 <pdpe_walk+0x272>
  800420363b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203640:	48 83 c4 68          	add    $0x68,%rsp
  8004203644:	5b                   	pop    %rbx
  8004203645:	5d                   	pop    %rbp
  8004203646:	c3                   	retq   

0000008004203647 <pgdir_walk>:
  8004203647:	55                   	push   %rbp
  8004203648:	48 89 e5             	mov    %rsp,%rbp
  800420364b:	53                   	push   %rbx
  800420364c:	48 83 ec 58          	sub    $0x58,%rsp
  8004203650:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203654:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203658:	89 55 ac             	mov    %edx,-0x54(%rbp)
  800420365b:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203660:	0f 84 fd 01 00 00    	je     8004203863 <pgdir_walk+0x21c>
  8004203666:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420366a:	48 c1 e8 15          	shr    $0x15,%rax
  800420366e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203673:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420367a:	00 
  800420367b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420367f:	48 01 d0             	add    %rdx,%rax
  8004203682:	48 8b 00             	mov    (%rax),%rax
  8004203685:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420368d:	83 e0 01             	and    $0x1,%eax
  8004203690:	48 85 c0             	test   %rax,%rax
  8004203693:	0f 85 2f 01 00 00    	jne    80042037c8 <pgdir_walk+0x181>
  8004203699:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800420369d:	0f 84 25 01 00 00    	je     80042037c8 <pgdir_walk+0x181>
  80042036a3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042036aa:	00 
  80042036ab:	bf 01 00 00 00       	mov    $0x1,%edi
  80042036b0:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042036b7:	00 00 00 
  80042036ba:	ff d0                	callq  *%rax
  80042036bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042036c0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042036c5:	0f 84 f3 00 00 00    	je     80042037be <pgdir_walk+0x177>
  80042036cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036cf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042036d3:	8d 50 01             	lea    0x1(%rax),%edx
  80042036d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036da:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042036de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042036e2:	48 c1 e8 15          	shr    $0x15,%rax
  80042036e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036f2:	00 
  80042036f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042036f7:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042036fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036ff:	48 89 c7             	mov    %rax,%rdi
  8004203702:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203709:	00 00 00 
  800420370c:	ff d0                	callq  *%rax
  800420370e:	48 83 c8 07          	or     $0x7,%rax
  8004203712:	48 89 03             	mov    %rax,(%rbx)
  8004203715:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203719:	48 c1 e8 0c          	shr    $0xc,%rax
  800420371d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203722:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203729:	00 
  800420372a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420372e:	48 c1 e8 15          	shr    $0x15,%rax
  8004203732:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203737:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  800420373e:	00 
  800420373f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203743:	48 01 c8             	add    %rcx,%rax
  8004203746:	48 8b 00             	mov    (%rax),%rax
  8004203749:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420374f:	48 01 d0             	add    %rdx,%rax
  8004203752:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420375a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420375e:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203761:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203764:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420376b:	00 00 00 
  800420376e:	48 8b 00             	mov    (%rax),%rax
  8004203771:	48 39 c2             	cmp    %rax,%rdx
  8004203774:	72 32                	jb     80042037a8 <pgdir_walk+0x161>
  8004203776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420377a:	48 89 c1             	mov    %rax,%rcx
  800420377d:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004203784:	00 00 00 
  8004203787:	be c1 02 00 00       	mov    $0x2c1,%esi
  800420378c:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203793:	00 00 00 
  8004203796:	b8 00 00 00 00       	mov    $0x0,%eax
  800420379b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042037a2:	00 00 00 
  80042037a5:	41 ff d0             	callq  *%r8
  80042037a8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042037af:	00 00 00 
  80042037b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042037b6:	48 01 d0             	add    %rdx,%rax
  80042037b9:	e9 aa 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042037c3:	e9 a0 00 00 00       	jmpq   8004203868 <pgdir_walk+0x221>
  80042037c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037cc:	83 e0 01             	and    $0x1,%eax
  80042037cf:	48 85 c0             	test   %rax,%rax
  80042037d2:	0f 84 8b 00 00 00    	je     8004203863 <pgdir_walk+0x21c>
  80042037d8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042037dc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042037e0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037e5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037ec:	00 
  80042037ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037f1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037f7:	48 01 d0             	add    %rdx,%rax
  80042037fa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042037fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203802:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203806:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203809:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420380c:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203813:	00 00 00 
  8004203816:	48 8b 00             	mov    (%rax),%rax
  8004203819:	48 39 c2             	cmp    %rax,%rdx
  800420381c:	72 32                	jb     8004203850 <pgdir_walk+0x209>
  800420381e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203822:	48 89 c1             	mov    %rax,%rcx
  8004203825:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  800420382c:	00 00 00 
  800420382f:	be c6 02 00 00       	mov    $0x2c6,%esi
  8004203834:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420383b:	00 00 00 
  800420383e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203843:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420384a:	00 00 00 
  800420384d:	41 ff d0             	callq  *%r8
  8004203850:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203857:	00 00 00 
  800420385a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420385e:	48 01 d0             	add    %rdx,%rax
  8004203861:	eb 05                	jmp    8004203868 <pgdir_walk+0x221>
  8004203863:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203868:	48 83 c4 58          	add    $0x58,%rsp
  800420386c:	5b                   	pop    %rbx
  800420386d:	5d                   	pop    %rbp
  800420386e:	c3                   	retq   

000000800420386f <boot_map_region>:
  800420386f:	55                   	push   %rbp
  8004203870:	48 89 e5             	mov    %rsp,%rbp
  8004203873:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203877:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420387b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420387f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004203883:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203887:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  800420388b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004203892:	00 
  8004203893:	e9 aa 02 00 00       	jmpq   8004203b42 <boot_map_region+0x2d3>
  8004203898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420389c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038a0:	48 01 d0             	add    %rdx,%rax
  80042038a3:	48 89 c1             	mov    %rax,%rcx
  80042038a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042038aa:	ba 01 00 00 00       	mov    $0x1,%edx
  80042038af:	48 89 ce             	mov    %rcx,%rsi
  80042038b2:	48 89 c7             	mov    %rax,%rdi
  80042038b5:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042038bc:	00 00 00 
  80042038bf:	ff d0                	callq  *%rax
  80042038c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042038c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038c9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042038cd:	48 01 d0             	add    %rdx,%rax
  80042038d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042038d4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042038d9:	74 23                	je     80042038fe <boot_map_region+0x8f>
  80042038db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042038df:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042038e5:	48 89 c2             	mov    %rax,%rdx
  80042038e8:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042038eb:	48 98                	cltq   
  80042038ed:	48 09 d0             	or     %rdx,%rax
  80042038f0:	48 83 c8 01          	or     $0x1,%rax
  80042038f4:	48 89 c2             	mov    %rax,%rdx
  80042038f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042038fb:	48 89 10             	mov    %rdx,(%rax)
  80042038fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203902:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203906:	48 01 d0             	add    %rdx,%rax
  8004203909:	48 c1 e8 27          	shr    $0x27,%rax
  800420390d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203919:	00 
  800420391a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420391e:	48 01 d0             	add    %rdx,%rax
  8004203921:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203925:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203929:	48 01 ca             	add    %rcx,%rdx
  800420392c:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203930:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203936:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  800420393d:	00 
  800420393e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203942:	48 01 ca             	add    %rcx,%rdx
  8004203945:	48 8b 0a             	mov    (%rdx),%rcx
  8004203948:	8b 55 8c             	mov    -0x74(%rbp),%edx
  800420394b:	48 63 d2             	movslq %edx,%rdx
  800420394e:	48 09 ca             	or     %rcx,%rdx
  8004203951:	48 83 ca 01          	or     $0x1,%rdx
  8004203955:	48 89 10             	mov    %rdx,(%rax)
  8004203958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420395c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203960:	48 01 d0             	add    %rdx,%rax
  8004203963:	48 c1 e8 27          	shr    $0x27,%rax
  8004203967:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420396c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203973:	00 
  8004203974:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203978:	48 01 d0             	add    %rdx,%rax
  800420397b:	48 8b 00             	mov    (%rax),%rax
  800420397e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203984:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203988:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420398c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203990:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004203993:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203996:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420399d:	00 00 00 
  80042039a0:	48 8b 00             	mov    (%rax),%rax
  80042039a3:	48 39 c2             	cmp    %rax,%rdx
  80042039a6:	72 32                	jb     80042039da <boot_map_region+0x16b>
  80042039a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039ac:	48 89 c1             	mov    %rax,%rcx
  80042039af:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  80042039b6:	00 00 00 
  80042039b9:	be e9 02 00 00       	mov    $0x2e9,%esi
  80042039be:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042039c5:	00 00 00 
  80042039c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042039cd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042039d4:	00 00 00 
  80042039d7:	41 ff d0             	callq  *%r8
  80042039da:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042039e1:	00 00 00 
  80042039e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039e8:	48 01 d0             	add    %rdx,%rax
  80042039eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042039ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042039f3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039f7:	48 01 d0             	add    %rdx,%rax
  80042039fa:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042039fe:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a03:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a0a:	00 
  8004203a0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a0f:	48 01 d0             	add    %rdx,%rax
  8004203a12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203a16:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203a1a:	48 01 ca             	add    %rcx,%rdx
  8004203a1d:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203a21:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a27:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a2e:	00 
  8004203a2f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203a33:	48 01 ca             	add    %rcx,%rdx
  8004203a36:	48 8b 0a             	mov    (%rdx),%rcx
  8004203a39:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203a3c:	48 63 d2             	movslq %edx,%rdx
  8004203a3f:	48 09 ca             	or     %rcx,%rdx
  8004203a42:	48 83 ca 01          	or     $0x1,%rdx
  8004203a46:	48 89 10             	mov    %rdx,(%rax)
  8004203a49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a4d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203a51:	48 01 d0             	add    %rdx,%rax
  8004203a54:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203a58:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a5d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a64:	00 
  8004203a65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a69:	48 01 d0             	add    %rdx,%rax
  8004203a6c:	48 8b 00             	mov    (%rax),%rax
  8004203a6f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203a75:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203a79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a7d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203a81:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203a84:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203a87:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203a8e:	00 00 00 
  8004203a91:	48 8b 00             	mov    (%rax),%rax
  8004203a94:	48 39 c2             	cmp    %rax,%rdx
  8004203a97:	72 32                	jb     8004203acb <boot_map_region+0x25c>
  8004203a99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203a9d:	48 89 c1             	mov    %rax,%rcx
  8004203aa0:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004203aa7:	00 00 00 
  8004203aaa:	be eb 02 00 00       	mov    $0x2eb,%esi
  8004203aaf:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203ab6:	00 00 00 
  8004203ab9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203abe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203ac5:	00 00 00 
  8004203ac8:	41 ff d0             	callq  *%r8
  8004203acb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203ad2:	00 00 00 
  8004203ad5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203ad9:	48 01 d0             	add    %rdx,%rax
  8004203adc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004203ae0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ae4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203ae8:	48 01 d0             	add    %rdx,%rax
  8004203aeb:	48 c1 e8 15          	shr    $0x15,%rax
  8004203aef:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203af4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203afb:	00 
  8004203afc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b00:	48 01 d0             	add    %rdx,%rax
  8004203b03:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203b07:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203b0b:	48 01 ca             	add    %rcx,%rdx
  8004203b0e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203b12:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b18:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b1f:	00 
  8004203b20:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203b24:	48 01 ca             	add    %rcx,%rdx
  8004203b27:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b2a:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203b2d:	48 63 d2             	movslq %edx,%rdx
  8004203b30:	48 09 ca             	or     %rcx,%rdx
  8004203b33:	48 83 ca 01          	or     $0x1,%rdx
  8004203b37:	48 89 10             	mov    %rdx,(%rax)
  8004203b3a:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004203b41:	00 
  8004203b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203b46:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203b4a:	0f 82 48 fd ff ff    	jb     8004203898 <boot_map_region+0x29>
  8004203b50:	c9                   	leaveq 
  8004203b51:	c3                   	retq   

0000008004203b52 <page_insert>:
  8004203b52:	55                   	push   %rbp
  8004203b53:	48 89 e5             	mov    %rsp,%rbp
  8004203b56:	48 83 ec 60          	sub    $0x60,%rsp
  8004203b5a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203b5e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203b62:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203b66:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203b69:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203b6e:	0f 84 47 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b74:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203b79:	0f 84 3c 03 00 00    	je     8004203ebb <page_insert+0x369>
  8004203b7f:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203b83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b87:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203b8c:	48 89 ce             	mov    %rcx,%rsi
  8004203b8f:	48 89 c7             	mov    %rax,%rdi
  8004203b92:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203b99:	00 00 00 
  8004203b9c:	ff d0                	callq  *%rax
  8004203b9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203ba2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203ba7:	0f 84 07 03 00 00    	je     8004203eb4 <page_insert+0x362>
  8004203bad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bb1:	48 c1 e8 27          	shr    $0x27,%rax
  8004203bb5:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203bba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203bc1:	00 
  8004203bc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203bc6:	48 01 d0             	add    %rdx,%rax
  8004203bc9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203bcd:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203bd1:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203bd7:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203bde:	00 
  8004203bdf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203be3:	48 01 ca             	add    %rcx,%rdx
  8004203be6:	48 8b 0a             	mov    (%rdx),%rcx
  8004203be9:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203bec:	80 e6 f1             	and    $0xf1,%dh
  8004203bef:	48 63 d2             	movslq %edx,%rdx
  8004203bf2:	48 09 ca             	or     %rcx,%rdx
  8004203bf5:	48 89 10             	mov    %rdx,(%rax)
  8004203bf8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bfc:	48 c1 e8 27          	shr    $0x27,%rax
  8004203c00:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c05:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c0c:	00 
  8004203c0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203c11:	48 01 d0             	add    %rdx,%rax
  8004203c14:	48 8b 00             	mov    (%rax),%rax
  8004203c17:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203c1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c25:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203c29:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203c2c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203c2f:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203c36:	00 00 00 
  8004203c39:	48 8b 00             	mov    (%rax),%rax
  8004203c3c:	48 39 c2             	cmp    %rax,%rdx
  8004203c3f:	72 32                	jb     8004203c73 <page_insert+0x121>
  8004203c41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c45:	48 89 c1             	mov    %rax,%rcx
  8004203c48:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004203c4f:	00 00 00 
  8004203c52:	be 16 03 00 00       	mov    $0x316,%esi
  8004203c57:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203c5e:	00 00 00 
  8004203c61:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c66:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203c6d:	00 00 00 
  8004203c70:	41 ff d0             	callq  *%r8
  8004203c73:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c7a:	00 00 00 
  8004203c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c81:	48 01 d0             	add    %rdx,%rax
  8004203c84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203c88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c8c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203c90:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c95:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c9c:	00 
  8004203c9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ca1:	48 01 d0             	add    %rdx,%rax
  8004203ca4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203ca8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203cac:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203cb2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203cb9:	00 
  8004203cba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203cbe:	48 01 ca             	add    %rcx,%rdx
  8004203cc1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203cc4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203cc7:	80 e6 f1             	and    $0xf1,%dh
  8004203cca:	48 63 d2             	movslq %edx,%rdx
  8004203ccd:	48 09 ca             	or     %rcx,%rdx
  8004203cd0:	48 89 10             	mov    %rdx,(%rax)
  8004203cd3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203cd7:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203cdb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ce0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ce7:	00 
  8004203ce8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203cec:	48 01 d0             	add    %rdx,%rax
  8004203cef:	48 8b 00             	mov    (%rax),%rax
  8004203cf2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cf8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203cfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d00:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203d04:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203d07:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203d0a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203d11:	00 00 00 
  8004203d14:	48 8b 00             	mov    (%rax),%rax
  8004203d17:	48 39 c2             	cmp    %rax,%rdx
  8004203d1a:	72 32                	jb     8004203d4e <page_insert+0x1fc>
  8004203d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d20:	48 89 c1             	mov    %rax,%rcx
  8004203d23:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004203d2a:	00 00 00 
  8004203d2d:	be 18 03 00 00       	mov    $0x318,%esi
  8004203d32:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203d39:	00 00 00 
  8004203d3c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d41:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004203d48:	00 00 00 
  8004203d4b:	41 ff d0             	callq  *%r8
  8004203d4e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203d55:	00 00 00 
  8004203d58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d5c:	48 01 d0             	add    %rdx,%rax
  8004203d5f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203d63:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203d67:	48 c1 e8 15          	shr    $0x15,%rax
  8004203d6b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203d70:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203d77:	00 
  8004203d78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203d7c:	48 01 d0             	add    %rdx,%rax
  8004203d7f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d83:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203d87:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203d8d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203d94:	00 
  8004203d95:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203d99:	48 01 ca             	add    %rcx,%rdx
  8004203d9c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203d9f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203da2:	80 e6 f1             	and    $0xf1,%dh
  8004203da5:	48 63 d2             	movslq %edx,%rdx
  8004203da8:	48 09 ca             	or     %rcx,%rdx
  8004203dab:	48 89 10             	mov    %rdx,(%rax)
  8004203dae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203db2:	48 8b 00             	mov    (%rax),%rax
  8004203db5:	83 e0 01             	and    $0x1,%eax
  8004203db8:	48 85 c0             	test   %rax,%rax
  8004203dbb:	74 70                	je     8004203e2d <page_insert+0x2db>
  8004203dbd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203dc1:	48 89 c7             	mov    %rax,%rdi
  8004203dc4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203dcb:	00 00 00 
  8004203dce:	ff d0                	callq  *%rax
  8004203dd0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203dd4:	48 8b 12             	mov    (%rdx),%rdx
  8004203dd7:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203dde:	48 39 d0             	cmp    %rdx,%rax
  8004203de1:	75 4a                	jne    8004203e2d <page_insert+0x2db>
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c2             	mov    %rax,%rdx
  8004203df3:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203df6:	48 98                	cltq   
  8004203df8:	48 09 d0             	or     %rdx,%rax
  8004203dfb:	48 83 c8 01          	or     $0x1,%rax
  8004203dff:	48 89 c2             	mov    %rax,%rdx
  8004203e02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e06:	48 89 10             	mov    %rdx,(%rax)
  8004203e09:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e11:	48 89 d6             	mov    %rdx,%rsi
  8004203e14:	48 89 c7             	mov    %rax,%rdi
  8004203e17:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203e1e:	00 00 00 
  8004203e21:	ff d0                	callq  *%rax
  8004203e23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e28:	e9 93 00 00 00       	jmpq   8004203ec0 <page_insert+0x36e>
  8004203e2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e31:	48 8b 00             	mov    (%rax),%rax
  8004203e34:	83 e0 01             	and    $0x1,%eax
  8004203e37:	48 85 c0             	test   %rax,%rax
  8004203e3a:	74 1a                	je     8004203e56 <page_insert+0x304>
  8004203e3c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e44:	48 89 d6             	mov    %rdx,%rsi
  8004203e47:	48 89 c7             	mov    %rax,%rdi
  8004203e4a:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004203e51:	00 00 00 
  8004203e54:	ff d0                	callq  *%rax
  8004203e56:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e5a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203e5e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203e61:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e65:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203e69:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e6d:	48 89 c7             	mov    %rax,%rdi
  8004203e70:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004203e77:	00 00 00 
  8004203e7a:	ff d0                	callq  *%rax
  8004203e7c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203e7f:	48 63 d2             	movslq %edx,%rdx
  8004203e82:	48 09 d0             	or     %rdx,%rax
  8004203e85:	48 83 c8 01          	or     $0x1,%rax
  8004203e89:	48 89 c2             	mov    %rax,%rdx
  8004203e8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e90:	48 89 10             	mov    %rdx,(%rax)
  8004203e93:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e9b:	48 89 d6             	mov    %rdx,%rsi
  8004203e9e:	48 89 c7             	mov    %rax,%rdi
  8004203ea1:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203ea8:	00 00 00 
  8004203eab:	ff d0                	callq  *%rax
  8004203ead:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eb2:	eb 0c                	jmp    8004203ec0 <page_insert+0x36e>
  8004203eb4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203eb9:	eb 05                	jmp    8004203ec0 <page_insert+0x36e>
  8004203ebb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203ec0:	c9                   	leaveq 
  8004203ec1:	c3                   	retq   

0000008004203ec2 <page_lookup>:
  8004203ec2:	55                   	push   %rbp
  8004203ec3:	48 89 e5             	mov    %rsp,%rbp
  8004203ec6:	48 83 ec 30          	sub    $0x30,%rsp
  8004203eca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203ece:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203ed2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203ed6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203edb:	74 69                	je     8004203f46 <page_lookup+0x84>
  8004203edd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203ee1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203ee5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203eea:	48 89 ce             	mov    %rcx,%rsi
  8004203eed:	48 89 c7             	mov    %rax,%rdi
  8004203ef0:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004203ef7:	00 00 00 
  8004203efa:	ff d0                	callq  *%rax
  8004203efc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f00:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f05:	74 3f                	je     8004203f46 <page_lookup+0x84>
  8004203f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f0b:	48 8b 00             	mov    (%rax),%rax
  8004203f0e:	83 e0 01             	and    $0x1,%eax
  8004203f11:	48 85 c0             	test   %rax,%rax
  8004203f14:	74 30                	je     8004203f46 <page_lookup+0x84>
  8004203f16:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203f1b:	74 0b                	je     8004203f28 <page_lookup+0x66>
  8004203f1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203f21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203f25:	48 89 10             	mov    %rdx,(%rax)
  8004203f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f2c:	48 8b 00             	mov    (%rax),%rax
  8004203f2f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203f35:	48 89 c7             	mov    %rax,%rdi
  8004203f38:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  8004203f3f:	00 00 00 
  8004203f42:	ff d0                	callq  *%rax
  8004203f44:	eb 05                	jmp    8004203f4b <page_lookup+0x89>
  8004203f46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203f4b:	c9                   	leaveq 
  8004203f4c:	c3                   	retq   

0000008004203f4d <page_remove>:
  8004203f4d:	55                   	push   %rbp
  8004203f4e:	48 89 e5             	mov    %rsp,%rbp
  8004203f51:	48 83 ec 20          	sub    $0x20,%rsp
  8004203f55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203f59:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203f5d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203f61:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203f65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f69:	48 89 ce             	mov    %rcx,%rsi
  8004203f6c:	48 89 c7             	mov    %rax,%rdi
  8004203f6f:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  8004203f76:	00 00 00 
  8004203f79:	ff d0                	callq  *%rax
  8004203f7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f7f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f84:	74 38                	je     8004203fbe <page_remove+0x71>
  8004203f86:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8e:	48 89 d6             	mov    %rdx,%rsi
  8004203f91:	48 89 c7             	mov    %rax,%rdi
  8004203f94:	48 b8 c0 3f 20 04 80 	movabs $0x8004203fc0,%rax
  8004203f9b:	00 00 00 
  8004203f9e:	ff d0                	callq  *%rax
  8004203fa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203fa4:	48 89 c7             	mov    %rax,%rdi
  8004203fa7:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004203fae:	00 00 00 
  8004203fb1:	ff d0                	callq  *%rax
  8004203fb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203fb7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203fbe:	c9                   	leaveq 
  8004203fbf:	c3                   	retq   

0000008004203fc0 <tlb_invalidate>:
  8004203fc0:	55                   	push   %rbp
  8004203fc1:	48 89 e5             	mov    %rsp,%rbp
  8004203fc4:	48 83 ec 20          	sub    $0x20,%rsp
  8004203fc8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203fcc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203fd0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203fd5:	75 35                	jne    800420400c <tlb_invalidate+0x4c>
  8004203fd7:	48 b9 e7 92 21 04 80 	movabs $0x80042192e7,%rcx
  8004203fde:	00 00 00 
  8004203fe1:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be 75 03 00 00       	mov    $0x375,%esi
  8004203ff0:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204006:	00 00 00 
  8004204009:	41 ff d0             	callq  *%r8
  800420400c:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004204013:	00 00 00 
  8004204016:	ff d0                	callq  *%rax
  8004204018:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420401f:	00 00 00 
  8004204022:	48 98                	cltq   
  8004204024:	48 c1 e0 03          	shl    $0x3,%rax
  8004204028:	48 89 c1             	mov    %rax,%rcx
  800420402b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420402f:	48 01 c8             	add    %rcx,%rax
  8004204032:	48 01 d0             	add    %rdx,%rax
  8004204035:	48 83 c0 08          	add    $0x8,%rax
  8004204039:	48 8b 00             	mov    (%rax),%rax
  800420403c:	48 85 c0             	test   %rax,%rax
  800420403f:	74 3d                	je     800420407e <tlb_invalidate+0xbe>
  8004204041:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004204048:	00 00 00 
  800420404b:	ff d0                	callq  *%rax
  800420404d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004204054:	00 00 00 
  8004204057:	48 98                	cltq   
  8004204059:	48 c1 e0 03          	shl    $0x3,%rax
  800420405d:	48 89 c1             	mov    %rax,%rcx
  8004204060:	48 c1 e1 04          	shl    $0x4,%rcx
  8004204064:	48 01 c8             	add    %rcx,%rax
  8004204067:	48 01 d0             	add    %rdx,%rax
  800420406a:	48 83 c0 08          	add    $0x8,%rax
  800420406e:	48 8b 00             	mov    (%rax),%rax
  8004204071:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004204078:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420407c:	75 0f                	jne    800420408d <tlb_invalidate+0xcd>
  800420407e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204082:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004204086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420408a:	0f 01 38             	invlpg (%rax)
  800420408d:	c9                   	leaveq 
  800420408e:	c3                   	retq   

000000800420408f <mmio_map_region>:
  800420408f:	55                   	push   %rbp
  8004204090:	48 89 e5             	mov    %rsp,%rbp
  8004204093:	48 83 ec 30          	sub    $0x30,%rsp
  8004204097:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420409b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420409f:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040a6:	00 00 00 
  80042040a9:	48 8b 00             	mov    (%rax),%rax
  80042040ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042040b0:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  80042040b7:	00 
  80042040b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040c0:	48 01 d0             	add    %rdx,%rax
  80042040c3:	48 83 e8 01          	sub    $0x1,%rax
  80042040c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042040cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042040cf:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040d4:	48 f7 75 f0          	divq   -0x10(%rbp)
  80042040d8:	48 89 d0             	mov    %rdx,%rax
  80042040db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042040df:	48 29 c2             	sub    %rax,%rdx
  80042040e2:	48 89 d0             	mov    %rdx,%rax
  80042040e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042040e9:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040f0:	00 00 00 
  80042040f3:	48 8b 10             	mov    (%rax),%rdx
  80042040f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042040fa:	48 01 c2             	add    %rax,%rdx
  80042040fd:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204104:	00 00 00 
  8004204107:	48 89 10             	mov    %rdx,(%rax)
  800420410a:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204111:	00 00 00 
  8004204114:	48 8b 10             	mov    (%rax),%rdx
  8004204117:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420411e:	00 00 00 
  8004204121:	48 39 c2             	cmp    %rax,%rdx
  8004204124:	76 2a                	jbe    8004204150 <mmio_map_region+0xc1>
  8004204126:	48 ba f8 92 21 04 80 	movabs $0x80042192f8,%rdx
  800420412d:	00 00 00 
  8004204130:	be a5 03 00 00       	mov    $0x3a5,%esi
  8004204135:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420413c:	00 00 00 
  800420413f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204144:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420414b:	00 00 00 
  800420414e:	ff d1                	callq  *%rcx
  8004204150:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004204157:	00 00 00 
  800420415a:	48 8b 00             	mov    (%rax),%rax
  800420415d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004204161:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204165:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204169:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420416f:	48 89 c7             	mov    %rax,%rdi
  8004204172:	48 b8 6f 38 20 04 80 	movabs $0x800420386f,%rax
  8004204179:	00 00 00 
  800420417c:	ff d0                	callq  *%rax
  800420417e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204182:	c9                   	leaveq 
  8004204183:	c3                   	retq   

0000008004204184 <user_mem_check>:
  8004204184:	55                   	push   %rbp
  8004204185:	48 89 e5             	mov    %rsp,%rbp
  8004204188:	48 83 ec 40          	sub    $0x40,%rsp
  800420418c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004204190:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004204194:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204198:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  800420419b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420419f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042041a3:	48 01 d0             	add    %rdx,%rax
  80042041a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042041aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042041ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042041b5:	00 00 00 
  80042041b8:	48 39 c2             	cmp    %rax,%rdx
  80042041bb:	77 0a                	ja     80042041c7 <user_mem_check+0x43>
  80042041bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042041c1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042041c5:	76 1b                	jbe    80042041e2 <user_mem_check+0x5e>
  80042041c7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042041cb:	48 b8 40 e2 49 04 80 	movabs $0x800449e240,%rax
  80042041d2:	00 00 00 
  80042041d5:	48 89 10             	mov    %rdx,(%rax)
  80042041d8:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  80042041dd:	e9 c0 00 00 00       	jmpq   80042042a2 <user_mem_check+0x11e>
  80042041e2:	e9 a8 00 00 00       	jmpq   800420428f <user_mem_check+0x10b>
  80042041e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042041eb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042041f2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042041f6:	ba 00 00 00 00       	mov    $0x0,%edx
  80042041fb:	48 89 ce             	mov    %rcx,%rsi
  80042041fe:	48 89 c7             	mov    %rax,%rdi
  8004204201:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004204208:	00 00 00 
  800420420b:	ff d0                	callq  *%rax
  800420420d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004204211:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004204216:	74 1f                	je     8004204237 <user_mem_check+0xb3>
  8004204218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420421c:	48 8b 10             	mov    (%rax),%rdx
  800420421f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004204222:	83 c8 01             	or     $0x1,%eax
  8004204225:	48 98                	cltq   
  8004204227:	48 21 c2             	and    %rax,%rdx
  800420422a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420422d:	83 c8 01             	or     $0x1,%eax
  8004204230:	48 98                	cltq   
  8004204232:	48 39 c2             	cmp    %rax,%rdx
  8004204235:	74 18                	je     800420424f <user_mem_check+0xcb>
  8004204237:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420423b:	48 b8 40 e2 49 04 80 	movabs $0x800449e240,%rax
  8004204242:	00 00 00 
  8004204245:	48 89 10             	mov    %rdx,(%rax)
  8004204248:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  800420424d:	eb 53                	jmp    80042042a2 <user_mem_check+0x11e>
  800420424f:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204256:	00 
  8004204257:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420425b:	48 83 c0 01          	add    $0x1,%rax
  800420425f:	48 89 c2             	mov    %rax,%rdx
  8004204262:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204266:	48 01 d0             	add    %rdx,%rax
  8004204269:	48 83 e8 01          	sub    $0x1,%rax
  800420426d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204271:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204275:	ba 00 00 00 00       	mov    $0x0,%edx
  800420427a:	48 f7 75 e8          	divq   -0x18(%rbp)
  800420427e:	48 89 d0             	mov    %rdx,%rax
  8004204281:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204285:	48 29 c2             	sub    %rax,%rdx
  8004204288:	48 89 d0             	mov    %rdx,%rax
  800420428b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420428f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204293:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204297:	0f 82 4a ff ff ff    	jb     80042041e7 <user_mem_check+0x63>
  800420429d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042042a2:	c9                   	leaveq 
  80042042a3:	c3                   	retq   

00000080042042a4 <user_mem_assert>:
  80042042a4:	55                   	push   %rbp
  80042042a5:	48 89 e5             	mov    %rsp,%rbp
  80042042a8:	48 83 ec 20          	sub    $0x20,%rsp
  80042042ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042042b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042042b4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042042b8:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042042bb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042be:	83 c8 04             	or     $0x4,%eax
  80042042c1:	89 c1                	mov    %eax,%ecx
  80042042c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042042c7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042042cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042cf:	48 89 c7             	mov    %rax,%rdi
  80042042d2:	48 b8 84 41 20 04 80 	movabs $0x8004204184,%rax
  80042042d9:	00 00 00 
  80042042dc:	ff d0                	callq  *%rax
  80042042de:	85 c0                	test   %eax,%eax
  80042042e0:	79 47                	jns    8004204329 <user_mem_assert+0x85>
  80042042e2:	48 b8 40 e2 49 04 80 	movabs $0x800449e240,%rax
  80042042e9:	00 00 00 
  80042042ec:	48 8b 10             	mov    (%rax),%rdx
  80042042ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042f3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042042f9:	89 c6                	mov    %eax,%esi
  80042042fb:	48 bf 18 93 21 04 80 	movabs $0x8004219318,%rdi
  8004204302:	00 00 00 
  8004204305:	b8 00 00 00 00       	mov    $0x0,%eax
  800420430a:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  8004204311:	00 00 00 
  8004204314:	ff d1                	callq  *%rcx
  8004204316:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431a:	48 89 c7             	mov    %rax,%rdi
  800420431d:	48 b8 78 8e 20 04 80 	movabs $0x8004208e78,%rax
  8004204324:	00 00 00 
  8004204327:	ff d0                	callq  *%rax
  8004204329:	c9                   	leaveq 
  800420432a:	c3                   	retq   

000000800420432b <check_page_free_list>:
  800420432b:	55                   	push   %rbp
  800420432c:	48 89 e5             	mov    %rsp,%rbp
  800420432f:	48 83 ec 60          	sub    $0x60,%rsp
  8004204333:	89 f8                	mov    %edi,%eax
  8004204335:	88 45 ac             	mov    %al,-0x54(%rbp)
  8004204338:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420433c:	74 07                	je     8004204345 <check_page_free_list+0x1a>
  800420433e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004204343:	eb 05                	jmp    800420434a <check_page_free_list+0x1f>
  8004204345:	b8 00 02 00 00       	mov    $0x200,%eax
  800420434a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420434d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004204354:	00 
  8004204355:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420435c:	00 
  800420435d:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204364:	00 00 00 
  8004204367:	48 8b 00             	mov    (%rax),%rax
  800420436a:	48 85 c0             	test   %rax,%rax
  800420436d:	75 2a                	jne    8004204399 <check_page_free_list+0x6e>
  800420436f:	48 ba 50 93 21 04 80 	movabs $0x8004219350,%rdx
  8004204376:	00 00 00 
  8004204379:	be 00 04 00 00       	mov    $0x400,%esi
  800420437e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204385:	00 00 00 
  8004204388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420438d:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004204394:	00 00 00 
  8004204397:	ff d1                	callq  *%rcx
  8004204399:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420439d:	0f 84 a9 00 00 00    	je     800420444c <check_page_free_list+0x121>
  80042043a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  80042043a7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042043ab:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  80042043af:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042043b3:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042043ba:	00 00 00 
  80042043bd:	48 8b 00             	mov    (%rax),%rax
  80042043c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043c4:	eb 58                	jmp    800420441e <check_page_free_list+0xf3>
  80042043c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042043ca:	48 89 c7             	mov    %rax,%rdi
  80042043cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042043d4:	00 00 00 
  80042043d7:	ff d0                	callq  *%rax
  80042043d9:	48 c1 e8 15          	shr    $0x15,%rax
  80042043dd:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042043e2:	48 89 c2             	mov    %rax,%rdx
  80042043e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042043e8:	48 39 c2             	cmp    %rax,%rdx
  80042043eb:	0f 93 c0             	setae  %al
  80042043ee:	0f b6 c0             	movzbl %al,%eax
  80042043f1:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042043f4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042043f7:	48 98                	cltq   
  80042043f9:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042043fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204402:	48 89 10             	mov    %rdx,(%rax)
  8004204405:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204409:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420440c:	48 98                	cltq   
  800420440e:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  8004204413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204417:	48 8b 00             	mov    (%rax),%rax
  800420441a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420441e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204423:	75 a1                	jne    80042043c6 <check_page_free_list+0x9b>
  8004204425:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204429:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204430:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004204434:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004204438:	48 89 10             	mov    %rdx,(%rax)
  800420443b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420443f:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204446:	00 00 00 
  8004204449:	48 89 10             	mov    %rdx,(%rax)
  800420444c:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204453:	00 00 00 
  8004204456:	48 8b 00             	mov    (%rax),%rax
  8004204459:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420445d:	eb 5e                	jmp    80042044bd <check_page_free_list+0x192>
  800420445f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204463:	48 89 c7             	mov    %rax,%rdi
  8004204466:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420446d:	00 00 00 
  8004204470:	ff d0                	callq  *%rax
  8004204472:	48 c1 e8 15          	shr    $0x15,%rax
  8004204476:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420447b:	48 89 c2             	mov    %rax,%rdx
  800420447e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204481:	48 39 c2             	cmp    %rax,%rdx
  8004204484:	73 2c                	jae    80042044b2 <check_page_free_list+0x187>
  8004204486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420448a:	48 89 c7             	mov    %rax,%rdi
  800420448d:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204494:	00 00 00 
  8004204497:	ff d0                	callq  *%rax
  8004204499:	ba 80 00 00 00       	mov    $0x80,%edx
  800420449e:	be 97 00 00 00       	mov    $0x97,%esi
  80042044a3:	48 89 c7             	mov    %rax,%rdi
  80042044a6:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042044ad:	00 00 00 
  80042044b0:	ff d0                	callq  *%rax
  80042044b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044b6:	48 8b 00             	mov    (%rax),%rax
  80042044b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044bd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042044c2:	75 9b                	jne    800420445f <check_page_free_list+0x134>
  80042044c4:	bf 00 00 00 00       	mov    $0x0,%edi
  80042044c9:	48 b8 22 26 20 04 80 	movabs $0x8004202622,%rax
  80042044d0:	00 00 00 
  80042044d3:	ff d0                	callq  *%rax
  80042044d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042044d9:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042044e0:	00 00 00 
  80042044e3:	48 8b 00             	mov    (%rax),%rax
  80042044e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044ea:	e9 20 03 00 00       	jmpq   800420480f <check_page_free_list+0x4e4>
  80042044ef:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  80042044f6:	00 00 00 
  80042044f9:	48 8b 00             	mov    (%rax),%rax
  80042044fc:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004204500:	73 35                	jae    8004204537 <check_page_free_list+0x20c>
  8004204502:	48 b9 74 93 21 04 80 	movabs $0x8004219374,%rcx
  8004204509:	00 00 00 
  800420450c:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204513:	00 00 00 
  8004204516:	be 1a 04 00 00       	mov    $0x41a,%esi
  800420451b:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204522:	00 00 00 
  8004204525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420452a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204531:	00 00 00 
  8004204534:	41 ff d0             	callq  *%r8
  8004204537:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  800420453e:	00 00 00 
  8004204541:	48 8b 10             	mov    (%rax),%rdx
  8004204544:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420454b:	00 00 00 
  800420454e:	48 8b 00             	mov    (%rax),%rax
  8004204551:	48 c1 e0 04          	shl    $0x4,%rax
  8004204555:	48 01 d0             	add    %rdx,%rax
  8004204558:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420455c:	77 35                	ja     8004204593 <check_page_free_list+0x268>
  800420455e:	48 b9 80 93 21 04 80 	movabs $0x8004219380,%rcx
  8004204565:	00 00 00 
  8004204568:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420456f:	00 00 00 
  8004204572:	be 1b 04 00 00       	mov    $0x41b,%esi
  8004204577:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420457e:	00 00 00 
  8004204581:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204586:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420458d:	00 00 00 
  8004204590:	41 ff d0             	callq  *%r8
  8004204593:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204597:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  800420459e:	00 00 00 
  80042045a1:	48 8b 00             	mov    (%rax),%rax
  80042045a4:	48 29 c2             	sub    %rax,%rdx
  80042045a7:	48 89 d0             	mov    %rdx,%rax
  80042045aa:	83 e0 0f             	and    $0xf,%eax
  80042045ad:	48 85 c0             	test   %rax,%rax
  80042045b0:	74 35                	je     80042045e7 <check_page_free_list+0x2bc>
  80042045b2:	48 b9 98 93 21 04 80 	movabs $0x8004219398,%rcx
  80042045b9:	00 00 00 
  80042045bc:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042045c3:	00 00 00 
  80042045c6:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042045cb:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042045d2:	00 00 00 
  80042045d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045da:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042045e1:	00 00 00 
  80042045e4:	41 ff d0             	callq  *%r8
  80042045e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045eb:	48 89 c7             	mov    %rax,%rdi
  80042045ee:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042045f5:	00 00 00 
  80042045f8:	ff d0                	callq  *%rax
  80042045fa:	48 85 c0             	test   %rax,%rax
  80042045fd:	75 35                	jne    8004204634 <check_page_free_list+0x309>
  80042045ff:	48 b9 ca 93 21 04 80 	movabs $0x80042193ca,%rcx
  8004204606:	00 00 00 
  8004204609:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204610:	00 00 00 
  8004204613:	be 1f 04 00 00       	mov    $0x41f,%esi
  8004204618:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420461f:	00 00 00 
  8004204622:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204627:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420462e:	00 00 00 
  8004204631:	41 ff d0             	callq  *%r8
  8004204634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204638:	48 89 c7             	mov    %rax,%rdi
  800420463b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204642:	00 00 00 
  8004204645:	ff d0                	callq  *%rax
  8004204647:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420464d:	75 35                	jne    8004204684 <check_page_free_list+0x359>
  800420464f:	48 b9 db 93 21 04 80 	movabs $0x80042193db,%rcx
  8004204656:	00 00 00 
  8004204659:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204660:	00 00 00 
  8004204663:	be 20 04 00 00       	mov    $0x420,%esi
  8004204668:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420466f:	00 00 00 
  8004204672:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204677:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420467e:	00 00 00 
  8004204681:	41 ff d0             	callq  *%r8
  8004204684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204688:	48 89 c7             	mov    %rax,%rdi
  800420468b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204692:	00 00 00 
  8004204695:	ff d0                	callq  *%rax
  8004204697:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  800420469d:	75 35                	jne    80042046d4 <check_page_free_list+0x3a9>
  800420469f:	48 b9 f8 93 21 04 80 	movabs $0x80042193f8,%rcx
  80042046a6:	00 00 00 
  80042046a9:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042046b0:	00 00 00 
  80042046b3:	be 21 04 00 00       	mov    $0x421,%esi
  80042046b8:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042046bf:	00 00 00 
  80042046c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042046c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042046ce:	00 00 00 
  80042046d1:	41 ff d0             	callq  *%r8
  80042046d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046d8:	48 89 c7             	mov    %rax,%rdi
  80042046db:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042046e2:	00 00 00 
  80042046e5:	ff d0                	callq  *%rax
  80042046e7:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042046ed:	75 35                	jne    8004204724 <check_page_free_list+0x3f9>
  80042046ef:	48 b9 1b 94 21 04 80 	movabs $0x800421941b,%rcx
  80042046f6:	00 00 00 
  80042046f9:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204700:	00 00 00 
  8004204703:	be 22 04 00 00       	mov    $0x422,%esi
  8004204708:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420470f:	00 00 00 
  8004204712:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204717:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420471e:	00 00 00 
  8004204721:	41 ff d0             	callq  *%r8
  8004204724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204728:	48 89 c7             	mov    %rax,%rdi
  800420472b:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204732:	00 00 00 
  8004204735:	ff d0                	callq  *%rax
  8004204737:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  800420473d:	76 4e                	jbe    800420478d <check_page_free_list+0x462>
  800420473f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204743:	48 89 c7             	mov    %rax,%rdi
  8004204746:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420474d:	00 00 00 
  8004204750:	ff d0                	callq  *%rax
  8004204752:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204756:	73 35                	jae    800420478d <check_page_free_list+0x462>
  8004204758:	48 b9 38 94 21 04 80 	movabs $0x8004219438,%rcx
  800420475f:	00 00 00 
  8004204762:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204769:	00 00 00 
  800420476c:	be 23 04 00 00       	mov    $0x423,%esi
  8004204771:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204778:	00 00 00 
  800420477b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204780:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204787:	00 00 00 
  800420478a:	41 ff d0             	callq  *%r8
  800420478d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204791:	48 89 c7             	mov    %rax,%rdi
  8004204794:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420479b:	00 00 00 
  800420479e:	ff d0                	callq  *%rax
  80042047a0:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  80042047a6:	75 35                	jne    80042047dd <check_page_free_list+0x4b2>
  80042047a8:	48 b9 74 94 21 04 80 	movabs $0x8004219474,%rcx
  80042047af:	00 00 00 
  80042047b2:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042047b9:	00 00 00 
  80042047bc:	be 26 04 00 00       	mov    $0x426,%esi
  80042047c1:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042047c8:	00 00 00 
  80042047cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042047d7:	00 00 00 
  80042047da:	41 ff d0             	callq  *%r8
  80042047dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042047e1:	48 89 c7             	mov    %rax,%rdi
  80042047e4:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042047eb:	00 00 00 
  80042047ee:	ff d0                	callq  *%rax
  80042047f0:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042047f6:	77 07                	ja     80042047ff <check_page_free_list+0x4d4>
  80042047f8:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042047fd:	eb 05                	jmp    8004204804 <check_page_free_list+0x4d9>
  80042047ff:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004204804:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204808:	48 8b 00             	mov    (%rax),%rax
  800420480b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420480f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204814:	0f 85 d5 fc ff ff    	jne    80042044ef <check_page_free_list+0x1c4>
  800420481a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420481f:	75 35                	jne    8004204856 <check_page_free_list+0x52b>
  8004204821:	48 b9 91 94 21 04 80 	movabs $0x8004219491,%rcx
  8004204828:	00 00 00 
  800420482b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204832:	00 00 00 
  8004204835:	be 2f 04 00 00       	mov    $0x42f,%esi
  800420483a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204841:	00 00 00 
  8004204844:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204849:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204850:	00 00 00 
  8004204853:	41 ff d0             	callq  *%r8
  8004204856:	c9                   	leaveq 
  8004204857:	c3                   	retq   

0000008004204858 <check_page_alloc>:
  8004204858:	55                   	push   %rbp
  8004204859:	48 89 e5             	mov    %rsp,%rbp
  800420485c:	48 83 ec 40          	sub    $0x40,%rsp
  8004204860:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204867:	00 00 00 
  800420486a:	48 8b 00             	mov    (%rax),%rax
  800420486d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204871:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204878:	eb 37                	jmp    80042048b1 <check_page_alloc+0x59>
  800420487a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420487e:	48 89 c7             	mov    %rax,%rdi
  8004204881:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004204888:	00 00 00 
  800420488b:	ff d0                	callq  *%rax
  800420488d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204892:	be 97 00 00 00       	mov    $0x97,%esi
  8004204897:	48 89 c7             	mov    %rax,%rdi
  800420489a:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042048a1:	00 00 00 
  80042048a4:	ff d0                	callq  *%rax
  80042048a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048aa:	48 8b 00             	mov    (%rax),%rax
  80042048ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048b1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042048b6:	75 c2                	jne    800420487a <check_page_alloc+0x22>
  80042048b8:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042048bf:	00 00 00 
  80042048c2:	48 8b 00             	mov    (%rax),%rax
  80042048c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  80042048d0:	e9 ec 01 00 00       	jmpq   8004204ac1 <check_page_alloc+0x269>
  80042048d5:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  80042048dc:	00 00 00 
  80042048df:	48 8b 00             	mov    (%rax),%rax
  80042048e2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042048e6:	73 35                	jae    800420491d <check_page_alloc+0xc5>
  80042048e8:	48 b9 a2 94 21 04 80 	movabs $0x80042194a2,%rcx
  80042048ef:	00 00 00 
  80042048f2:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042048f9:	00 00 00 
  80042048fc:	be 49 04 00 00       	mov    $0x449,%esi
  8004204901:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204908:	00 00 00 
  800420490b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204910:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204917:	00 00 00 
  800420491a:	41 ff d0             	callq  *%r8
  800420491d:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004204924:	00 00 00 
  8004204927:	48 8b 10             	mov    (%rax),%rdx
  800420492a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004204931:	00 00 00 
  8004204934:	48 8b 00             	mov    (%rax),%rax
  8004204937:	48 c1 e0 04          	shl    $0x4,%rax
  800420493b:	48 01 d0             	add    %rdx,%rax
  800420493e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204942:	77 35                	ja     8004204979 <check_page_alloc+0x121>
  8004204944:	48 b9 af 94 21 04 80 	movabs $0x80042194af,%rcx
  800420494b:	00 00 00 
  800420494e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204955:	00 00 00 
  8004204958:	be 4a 04 00 00       	mov    $0x44a,%esi
  800420495d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204964:	00 00 00 
  8004204967:	b8 00 00 00 00       	mov    $0x0,%eax
  800420496c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204973:	00 00 00 
  8004204976:	41 ff d0             	callq  *%r8
  8004204979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420497d:	48 89 c7             	mov    %rax,%rdi
  8004204980:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204987:	00 00 00 
  800420498a:	ff d0                	callq  *%rax
  800420498c:	48 85 c0             	test   %rax,%rax
  800420498f:	75 35                	jne    80042049c6 <check_page_alloc+0x16e>
  8004204991:	48 b9 c4 94 21 04 80 	movabs $0x80042194c4,%rcx
  8004204998:	00 00 00 
  800420499b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042049a2:	00 00 00 
  80042049a5:	be 4d 04 00 00       	mov    $0x44d,%esi
  80042049aa:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042049b1:	00 00 00 
  80042049b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042049c0:	00 00 00 
  80042049c3:	41 ff d0             	callq  *%r8
  80042049c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042049ca:	48 89 c7             	mov    %rax,%rdi
  80042049cd:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042049d4:	00 00 00 
  80042049d7:	ff d0                	callq  *%rax
  80042049d9:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  80042049df:	75 35                	jne    8004204a16 <check_page_alloc+0x1be>
  80042049e1:	48 b9 d6 94 21 04 80 	movabs $0x80042194d6,%rcx
  80042049e8:	00 00 00 
  80042049eb:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042049f2:	00 00 00 
  80042049f5:	be 4e 04 00 00       	mov    $0x44e,%esi
  80042049fa:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204a01:	00 00 00 
  8004204a04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a09:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a10:	00 00 00 
  8004204a13:	41 ff d0             	callq  *%r8
  8004204a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a1a:	48 89 c7             	mov    %rax,%rdi
  8004204a1d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a24:	00 00 00 
  8004204a27:	ff d0                	callq  *%rax
  8004204a29:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204a2f:	75 35                	jne    8004204a66 <check_page_alloc+0x20e>
  8004204a31:	48 b9 f0 94 21 04 80 	movabs $0x80042194f0,%rcx
  8004204a38:	00 00 00 
  8004204a3b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204a42:	00 00 00 
  8004204a45:	be 4f 04 00 00       	mov    $0x44f,%esi
  8004204a4a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204a51:	00 00 00 
  8004204a54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a59:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204a60:	00 00 00 
  8004204a63:	41 ff d0             	callq  *%r8
  8004204a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a6a:	48 89 c7             	mov    %rax,%rdi
  8004204a6d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204a74:	00 00 00 
  8004204a77:	ff d0                	callq  *%rax
  8004204a79:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004204a7f:	75 35                	jne    8004204ab6 <check_page_alloc+0x25e>
  8004204a81:	48 b9 14 95 21 04 80 	movabs $0x8004219514,%rcx
  8004204a88:	00 00 00 
  8004204a8b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204a92:	00 00 00 
  8004204a95:	be 50 04 00 00       	mov    $0x450,%esi
  8004204a9a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204aa1:	00 00 00 
  8004204aa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204aa9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ab0:	00 00 00 
  8004204ab3:	41 ff d0             	callq  *%r8
  8004204ab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204aba:	48 8b 00             	mov    (%rax),%rax
  8004204abd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ac1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204ac6:	0f 85 09 fe ff ff    	jne    80042048d5 <check_page_alloc+0x7d>
  8004204acc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204ad3:	00 
  8004204ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ad8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204adc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ae0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ae4:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ae9:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204af0:	00 00 00 
  8004204af3:	ff d0                	callq  *%rax
  8004204af5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204af9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204afe:	75 35                	jne    8004204b35 <check_page_alloc+0x2dd>
  8004204b00:	48 b9 2f 95 21 04 80 	movabs $0x800421952f,%rcx
  8004204b07:	00 00 00 
  8004204b0a:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204b11:	00 00 00 
  8004204b14:	be 54 04 00 00       	mov    $0x454,%esi
  8004204b19:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204b20:	00 00 00 
  8004204b23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b2f:	00 00 00 
  8004204b32:	41 ff d0             	callq  *%r8
  8004204b35:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b3a:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b41:	00 00 00 
  8004204b44:	ff d0                	callq  *%rax
  8004204b46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204b4a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204b4f:	75 35                	jne    8004204b86 <check_page_alloc+0x32e>
  8004204b51:	48 b9 45 95 21 04 80 	movabs $0x8004219545,%rcx
  8004204b58:	00 00 00 
  8004204b5b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204b62:	00 00 00 
  8004204b65:	be 55 04 00 00       	mov    $0x455,%esi
  8004204b6a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204b71:	00 00 00 
  8004204b74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b79:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204b80:	00 00 00 
  8004204b83:	41 ff d0             	callq  *%r8
  8004204b86:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b8b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204b92:	00 00 00 
  8004204b95:	ff d0                	callq  *%rax
  8004204b97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204b9b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ba0:	75 35                	jne    8004204bd7 <check_page_alloc+0x37f>
  8004204ba2:	48 b9 5b 95 21 04 80 	movabs $0x800421955b,%rcx
  8004204ba9:	00 00 00 
  8004204bac:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204bb3:	00 00 00 
  8004204bb6:	be 56 04 00 00       	mov    $0x456,%esi
  8004204bbb:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204bc2:	00 00 00 
  8004204bc5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bca:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204bd1:	00 00 00 
  8004204bd4:	41 ff d0             	callq  *%r8
  8004204bd7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204bdc:	75 35                	jne    8004204c13 <check_page_alloc+0x3bb>
  8004204bde:	48 b9 71 95 21 04 80 	movabs $0x8004219571,%rcx
  8004204be5:	00 00 00 
  8004204be8:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204bef:	00 00 00 
  8004204bf2:	be 57 04 00 00       	mov    $0x457,%esi
  8004204bf7:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204bfe:	00 00 00 
  8004204c01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c0d:	00 00 00 
  8004204c10:	41 ff d0             	callq  *%r8
  8004204c13:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204c18:	74 0a                	je     8004204c24 <check_page_alloc+0x3cc>
  8004204c1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c1e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c22:	75 35                	jne    8004204c59 <check_page_alloc+0x401>
  8004204c24:	48 b9 75 95 21 04 80 	movabs $0x8004219575,%rcx
  8004204c2b:	00 00 00 
  8004204c2e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204c35:	00 00 00 
  8004204c38:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c3d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204c44:	00 00 00 
  8004204c47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c4c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204c53:	00 00 00 
  8004204c56:	41 ff d0             	callq  *%r8
  8004204c59:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204c5e:	74 14                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c64:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204c68:	74 0a                	je     8004204c74 <check_page_alloc+0x41c>
  8004204c6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c6e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c72:	75 35                	jne    8004204ca9 <check_page_alloc+0x451>
  8004204c74:	48 b9 88 95 21 04 80 	movabs $0x8004219588,%rcx
  8004204c7b:	00 00 00 
  8004204c7e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204c85:	00 00 00 
  8004204c88:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c8d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204c94:	00 00 00 
  8004204c97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c9c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ca3:	00 00 00 
  8004204ca6:	41 ff d0             	callq  *%r8
  8004204ca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cad:	48 89 c7             	mov    %rax,%rdi
  8004204cb0:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204cb7:	00 00 00 
  8004204cba:	ff d0                	callq  *%rax
  8004204cbc:	48 ba f0 d5 69 04 80 	movabs $0x800469d5f0,%rdx
  8004204cc3:	00 00 00 
  8004204cc6:	48 8b 12             	mov    (%rdx),%rdx
  8004204cc9:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204ccd:	48 39 d0             	cmp    %rdx,%rax
  8004204cd0:	72 35                	jb     8004204d07 <check_page_alloc+0x4af>
  8004204cd2:	48 b9 a8 95 21 04 80 	movabs $0x80042195a8,%rcx
  8004204cd9:	00 00 00 
  8004204cdc:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204ce3:	00 00 00 
  8004204ce6:	be 5a 04 00 00       	mov    $0x45a,%esi
  8004204ceb:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204cf2:	00 00 00 
  8004204cf5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cfa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d01:	00 00 00 
  8004204d04:	41 ff d0             	callq  *%r8
  8004204d07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d0b:	48 89 c7             	mov    %rax,%rdi
  8004204d0e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d15:	00 00 00 
  8004204d18:	ff d0                	callq  *%rax
  8004204d1a:	48 ba f0 d5 69 04 80 	movabs $0x800469d5f0,%rdx
  8004204d21:	00 00 00 
  8004204d24:	48 8b 12             	mov    (%rdx),%rdx
  8004204d27:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d2b:	48 39 d0             	cmp    %rdx,%rax
  8004204d2e:	72 35                	jb     8004204d65 <check_page_alloc+0x50d>
  8004204d30:	48 b9 c5 95 21 04 80 	movabs $0x80042195c5,%rcx
  8004204d37:	00 00 00 
  8004204d3a:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204d41:	00 00 00 
  8004204d44:	be 5b 04 00 00       	mov    $0x45b,%esi
  8004204d49:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204d50:	00 00 00 
  8004204d53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d58:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204d5f:	00 00 00 
  8004204d62:	41 ff d0             	callq  *%r8
  8004204d65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d69:	48 89 c7             	mov    %rax,%rdi
  8004204d6c:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004204d73:	00 00 00 
  8004204d76:	ff d0                	callq  *%rax
  8004204d78:	48 ba f0 d5 69 04 80 	movabs $0x800469d5f0,%rdx
  8004204d7f:	00 00 00 
  8004204d82:	48 8b 12             	mov    (%rdx),%rdx
  8004204d85:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204d89:	48 39 d0             	cmp    %rdx,%rax
  8004204d8c:	72 35                	jb     8004204dc3 <check_page_alloc+0x56b>
  8004204d8e:	48 b9 e2 95 21 04 80 	movabs $0x80042195e2,%rcx
  8004204d95:	00 00 00 
  8004204d98:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204d9f:	00 00 00 
  8004204da2:	be 5c 04 00 00       	mov    $0x45c,%esi
  8004204da7:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204dae:	00 00 00 
  8004204db1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204db6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204dbd:	00 00 00 
  8004204dc0:	41 ff d0             	callq  *%r8
  8004204dc3:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204dca:	00 00 00 
  8004204dcd:	48 8b 00             	mov    (%rax),%rax
  8004204dd0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204dd4:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204ddb:	00 00 00 
  8004204dde:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204de5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204dea:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204df1:	00 00 00 
  8004204df4:	ff d0                	callq  *%rax
  8004204df6:	48 85 c0             	test   %rax,%rax
  8004204df9:	74 35                	je     8004204e30 <check_page_alloc+0x5d8>
  8004204dfb:	48 b9 ff 95 21 04 80 	movabs $0x80042195ff,%rcx
  8004204e02:	00 00 00 
  8004204e05:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204e0c:	00 00 00 
  8004204e0f:	be 63 04 00 00       	mov    $0x463,%esi
  8004204e14:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204e1b:	00 00 00 
  8004204e1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e23:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204e2a:	00 00 00 
  8004204e2d:	41 ff d0             	callq  *%r8
  8004204e30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204e34:	48 89 c7             	mov    %rax,%rdi
  8004204e37:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e3e:	00 00 00 
  8004204e41:	ff d0                	callq  *%rax
  8004204e43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e47:	48 89 c7             	mov    %rax,%rdi
  8004204e4a:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e51:	00 00 00 
  8004204e54:	ff d0                	callq  *%rax
  8004204e56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e5a:	48 89 c7             	mov    %rax,%rdi
  8004204e5d:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004204e64:	00 00 00 
  8004204e67:	ff d0                	callq  *%rax
  8004204e69:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204e70:	00 
  8004204e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e81:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204e86:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204e8d:	00 00 00 
  8004204e90:	ff d0                	callq  *%rax
  8004204e92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204e96:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e9b:	75 35                	jne    8004204ed2 <check_page_alloc+0x67a>
  8004204e9d:	48 b9 2f 95 21 04 80 	movabs $0x800421952f,%rcx
  8004204ea4:	00 00 00 
  8004204ea7:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204eae:	00 00 00 
  8004204eb1:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204eb6:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204ebd:	00 00 00 
  8004204ec0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ec5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ecc:	00 00 00 
  8004204ecf:	41 ff d0             	callq  *%r8
  8004204ed2:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ed7:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204ede:	00 00 00 
  8004204ee1:	ff d0                	callq  *%rax
  8004204ee3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204ee7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204eec:	75 35                	jne    8004204f23 <check_page_alloc+0x6cb>
  8004204eee:	48 b9 45 95 21 04 80 	movabs $0x8004219545,%rcx
  8004204ef5:	00 00 00 
  8004204ef8:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204eff:	00 00 00 
  8004204f02:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204f07:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204f0e:	00 00 00 
  8004204f11:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f16:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f1d:	00 00 00 
  8004204f20:	41 ff d0             	callq  *%r8
  8004204f23:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f28:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004204f2f:	00 00 00 
  8004204f32:	ff d0                	callq  *%rax
  8004204f34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204f38:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204f3d:	75 35                	jne    8004204f74 <check_page_alloc+0x71c>
  8004204f3f:	48 b9 5b 95 21 04 80 	movabs $0x800421955b,%rcx
  8004204f46:	00 00 00 
  8004204f49:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204f50:	00 00 00 
  8004204f53:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204f58:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204f5f:	00 00 00 
  8004204f62:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f67:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204f6e:	00 00 00 
  8004204f71:	41 ff d0             	callq  *%r8
  8004204f74:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204f79:	75 35                	jne    8004204fb0 <check_page_alloc+0x758>
  8004204f7b:	48 b9 71 95 21 04 80 	movabs $0x8004219571,%rcx
  8004204f82:	00 00 00 
  8004204f85:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204f8c:	00 00 00 
  8004204f8f:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f94:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204f9b:	00 00 00 
  8004204f9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fa3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204faa:	00 00 00 
  8004204fad:	41 ff d0             	callq  *%r8
  8004204fb0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204fb5:	74 0a                	je     8004204fc1 <check_page_alloc+0x769>
  8004204fb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204fbb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204fbf:	75 35                	jne    8004204ff6 <check_page_alloc+0x79e>
  8004204fc1:	48 b9 75 95 21 04 80 	movabs $0x8004219575,%rcx
  8004204fc8:	00 00 00 
  8004204fcb:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004204fd2:	00 00 00 
  8004204fd5:	be 6e 04 00 00       	mov    $0x46e,%esi
  8004204fda:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004204fe1:	00 00 00 
  8004204fe4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fe9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004204ff0:	00 00 00 
  8004204ff3:	41 ff d0             	callq  *%r8
  8004204ff6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ffb:	74 14                	je     8004205011 <check_page_alloc+0x7b9>
  8004204ffd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205001:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004205005:	74 0a                	je     8004205011 <check_page_alloc+0x7b9>
  8004205007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420500b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420500f:	75 35                	jne    8004205046 <check_page_alloc+0x7ee>
  8004205011:	48 b9 88 95 21 04 80 	movabs $0x8004219588,%rcx
  8004205018:	00 00 00 
  800420501b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205022:	00 00 00 
  8004205025:	be 6f 04 00 00       	mov    $0x46f,%esi
  800420502a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205031:	00 00 00 
  8004205034:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205039:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205040:	00 00 00 
  8004205043:	41 ff d0             	callq  *%r8
  8004205046:	bf 00 00 00 00       	mov    $0x0,%edi
  800420504b:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205052:	00 00 00 
  8004205055:	ff d0                	callq  *%rax
  8004205057:	48 85 c0             	test   %rax,%rax
  800420505a:	74 35                	je     8004205091 <check_page_alloc+0x839>
  800420505c:	48 b9 ff 95 21 04 80 	movabs $0x80042195ff,%rcx
  8004205063:	00 00 00 
  8004205066:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420506d:	00 00 00 
  8004205070:	be 70 04 00 00       	mov    $0x470,%esi
  8004205075:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420507c:	00 00 00 
  800420507f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205084:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420508b:	00 00 00 
  800420508e:	41 ff d0             	callq  *%r8
  8004205091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205095:	48 89 c7             	mov    %rax,%rdi
  8004205098:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  800420509f:	00 00 00 
  80042050a2:	ff d0                	callq  *%rax
  80042050a4:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042050a9:	be 01 00 00 00       	mov    $0x1,%esi
  80042050ae:	48 89 c7             	mov    %rax,%rdi
  80042050b1:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042050b8:	00 00 00 
  80042050bb:	ff d0                	callq  *%rax
  80042050bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050c1:	48 89 c7             	mov    %rax,%rdi
  80042050c4:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042050cb:	00 00 00 
  80042050ce:	ff d0                	callq  *%rax
  80042050d0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042050d5:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042050dc:	00 00 00 
  80042050df:	ff d0                	callq  *%rax
  80042050e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042050e5:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042050ea:	75 35                	jne    8004205121 <check_page_alloc+0x8c9>
  80042050ec:	48 b9 0e 96 21 04 80 	movabs $0x800421960e,%rcx
  80042050f3:	00 00 00 
  80042050f6:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042050fd:	00 00 00 
  8004205100:	be 75 04 00 00       	mov    $0x475,%esi
  8004205105:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420510c:	00 00 00 
  800420510f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205114:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420511b:	00 00 00 
  800420511e:	41 ff d0             	callq  *%r8
  8004205121:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205126:	74 0a                	je     8004205132 <check_page_alloc+0x8da>
  8004205128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420512c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205130:	74 35                	je     8004205167 <check_page_alloc+0x90f>
  8004205132:	48 b9 2c 96 21 04 80 	movabs $0x800421962c,%rcx
  8004205139:	00 00 00 
  800420513c:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205143:	00 00 00 
  8004205146:	be 76 04 00 00       	mov    $0x476,%esi
  800420514b:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205152:	00 00 00 
  8004205155:	b8 00 00 00 00       	mov    $0x0,%eax
  800420515a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205161:	00 00 00 
  8004205164:	41 ff d0             	callq  *%r8
  8004205167:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420516b:	48 89 c7             	mov    %rax,%rdi
  800420516e:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  8004205175:	00 00 00 
  8004205178:	ff d0                	callq  *%rax
  800420517a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420517e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205185:	eb 4d                	jmp    80042051d4 <check_page_alloc+0x97c>
  8004205187:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420518a:	48 63 d0             	movslq %eax,%rdx
  800420518d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205191:	48 01 d0             	add    %rdx,%rax
  8004205194:	0f b6 00             	movzbl (%rax),%eax
  8004205197:	84 c0                	test   %al,%al
  8004205199:	74 35                	je     80042051d0 <check_page_alloc+0x978>
  800420519b:	48 b9 3c 96 21 04 80 	movabs $0x800421963c,%rcx
  80042051a2:	00 00 00 
  80042051a5:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042051ac:	00 00 00 
  80042051af:	be 79 04 00 00       	mov    $0x479,%esi
  80042051b4:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042051bb:	00 00 00 
  80042051be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051c3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042051ca:	00 00 00 
  80042051cd:	41 ff d0             	callq  *%r8
  80042051d0:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042051d4:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  80042051db:	7e aa                	jle    8004205187 <check_page_alloc+0x92f>
  80042051dd:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042051e4:	00 00 00 
  80042051e7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042051eb:	48 89 10             	mov    %rdx,(%rax)
  80042051ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042051f2:	48 89 c7             	mov    %rax,%rdi
  80042051f5:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042051fc:	00 00 00 
  80042051ff:	ff d0                	callq  *%rax
  8004205201:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205205:	48 89 c7             	mov    %rax,%rdi
  8004205208:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420520f:	00 00 00 
  8004205212:	ff d0                	callq  *%rax
  8004205214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205218:	48 89 c7             	mov    %rax,%rdi
  800420521b:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  8004205222:	00 00 00 
  8004205225:	ff d0                	callq  *%rax
  8004205227:	48 bf 48 96 21 04 80 	movabs $0x8004219648,%rdi
  800420522e:	00 00 00 
  8004205231:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205236:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420523d:	00 00 00 
  8004205240:	ff d2                	callq  *%rdx
  8004205242:	c9                   	leaveq 
  8004205243:	c3                   	retq   

0000008004205244 <check_boot_pml4e>:
  8004205244:	55                   	push   %rbp
  8004205245:	48 89 e5             	mov    %rsp,%rbp
  8004205248:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420524f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205256:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420525d:	00 00 00 
  8004205260:	48 8b 00             	mov    (%rax),%rax
  8004205263:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205267:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  800420526e:	00 
  800420526f:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004205276:	00 00 00 
  8004205279:	48 8b 00             	mov    (%rax),%rax
  800420527c:	48 c1 e0 04          	shl    $0x4,%rax
  8004205280:	48 89 c2             	mov    %rax,%rdx
  8004205283:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205287:	48 01 d0             	add    %rdx,%rax
  800420528a:	48 83 e8 01          	sub    $0x1,%rax
  800420528e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205292:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205296:	ba 00 00 00 00       	mov    $0x0,%edx
  800420529b:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420529f:	48 89 d0             	mov    %rdx,%rax
  80042052a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042052a6:	48 29 c2             	sub    %rax,%rdx
  80042052a9:	48 89 d0             	mov    %rdx,%rax
  80042052ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042052b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042052b7:	00 
  80042052b8:	e9 d4 00 00 00       	jmpq   8004205391 <check_boot_pml4e+0x14d>
  80042052bd:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  80042052c4:	00 00 00 
  80042052c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052cb:	48 01 c2             	add    %rax,%rdx
  80042052ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052d2:	48 89 d6             	mov    %rdx,%rsi
  80042052d5:	48 89 c7             	mov    %rax,%rdi
  80042052d8:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042052df:	00 00 00 
  80042052e2:	ff d0                	callq  *%rax
  80042052e4:	48 ba f8 d5 69 04 80 	movabs $0x800469d5f8,%rdx
  80042052eb:	00 00 00 
  80042052ee:	48 8b 12             	mov    (%rdx),%rdx
  80042052f1:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042052f5:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052fc:	00 00 00 
  80042052ff:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  8004205303:	77 32                	ja     8004205337 <check_boot_pml4e+0xf3>
  8004205305:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205309:	48 89 c1             	mov    %rax,%rcx
  800420530c:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  8004205313:	00 00 00 
  8004205316:	be 99 04 00 00       	mov    $0x499,%esi
  800420531b:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205322:	00 00 00 
  8004205325:	b8 00 00 00 00       	mov    $0x0,%eax
  800420532a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205331:	00 00 00 
  8004205334:	41 ff d0             	callq  *%r8
  8004205337:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420533e:	ff ff ff 
  8004205341:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205345:	48 01 d1             	add    %rdx,%rcx
  8004205348:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420534c:	48 01 ca             	add    %rcx,%rdx
  800420534f:	48 39 d0             	cmp    %rdx,%rax
  8004205352:	74 35                	je     8004205389 <check_boot_pml4e+0x145>
  8004205354:	48 b9 68 96 21 04 80 	movabs $0x8004219668,%rcx
  800420535b:	00 00 00 
  800420535e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205365:	00 00 00 
  8004205368:	be 99 04 00 00       	mov    $0x499,%esi
  800420536d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205374:	00 00 00 
  8004205377:	b8 00 00 00 00       	mov    $0x0,%eax
  800420537c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205383:	00 00 00 
  8004205386:	41 ff d0             	callq  *%r8
  8004205389:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205390:	00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205399:	0f 82 1e ff ff ff    	jb     80042052bd <check_boot_pml4e+0x79>
  800420539f:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  80042053a6:	00 
  80042053a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042053ab:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  80042053b1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042053b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042053b9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042053be:	48 f7 75 c8          	divq   -0x38(%rbp)
  80042053c2:	48 89 d0             	mov    %rdx,%rax
  80042053c5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042053c9:	48 29 c2             	sub    %rax,%rdx
  80042053cc:	48 89 d0             	mov    %rdx,%rax
  80042053cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042053d3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042053da:	00 
  80042053db:	e9 d4 00 00 00       	jmpq   80042054b4 <check_boot_pml4e+0x270>
  80042053e0:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042053e7:	00 00 00 
  80042053ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042053ee:	48 01 c2             	add    %rax,%rdx
  80042053f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042053f5:	48 89 d6             	mov    %rdx,%rsi
  80042053f8:	48 89 c7             	mov    %rax,%rdi
  80042053fb:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004205402:	00 00 00 
  8004205405:	ff d0                	callq  *%rax
  8004205407:	48 ba 58 e2 49 04 80 	movabs $0x800449e258,%rdx
  800420540e:	00 00 00 
  8004205411:	48 8b 12             	mov    (%rdx),%rdx
  8004205414:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004205418:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420541f:	00 00 00 
  8004205422:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  8004205426:	77 32                	ja     800420545a <check_boot_pml4e+0x216>
  8004205428:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420542c:	48 89 c1             	mov    %rax,%rcx
  800420542f:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  8004205436:	00 00 00 
  8004205439:	be a0 04 00 00       	mov    $0x4a0,%esi
  800420543e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205445:	00 00 00 
  8004205448:	b8 00 00 00 00       	mov    $0x0,%eax
  800420544d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205454:	00 00 00 
  8004205457:	41 ff d0             	callq  *%r8
  800420545a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205461:	ff ff ff 
  8004205464:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205468:	48 01 d1             	add    %rdx,%rcx
  800420546b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420546f:	48 01 ca             	add    %rcx,%rdx
  8004205472:	48 39 d0             	cmp    %rdx,%rax
  8004205475:	74 35                	je     80042054ac <check_boot_pml4e+0x268>
  8004205477:	48 b9 a0 96 21 04 80 	movabs $0x80042196a0,%rcx
  800420547e:	00 00 00 
  8004205481:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205488:	00 00 00 
  800420548b:	be a0 04 00 00       	mov    $0x4a0,%esi
  8004205490:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205497:	00 00 00 
  800420549a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420549f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042054a6:	00 00 00 
  80042054a9:	41 ff d0             	callq  *%r8
  80042054ac:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042054b3:	00 
  80042054b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054b8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042054bc:	0f 82 1e ff ff ff    	jb     80042053e0 <check_boot_pml4e+0x19c>
  80042054c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042054c9:	00 
  80042054ca:	eb 6a                	jmp    8004205536 <check_boot_pml4e+0x2f2>
  80042054cc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042054d3:	00 00 00 
  80042054d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054da:	48 01 c2             	add    %rax,%rdx
  80042054dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042054e1:	48 89 d6             	mov    %rdx,%rsi
  80042054e4:	48 89 c7             	mov    %rax,%rdi
  80042054e7:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042054ee:	00 00 00 
  80042054f1:	ff d0                	callq  *%rax
  80042054f3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042054f7:	74 35                	je     800420552e <check_boot_pml4e+0x2ea>
  80042054f9:	48 b9 d8 96 21 04 80 	movabs $0x80042196d8,%rcx
  8004205500:	00 00 00 
  8004205503:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420550a:	00 00 00 
  800420550d:	be a5 04 00 00       	mov    $0x4a5,%esi
  8004205512:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205519:	00 00 00 
  800420551c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205521:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205528:	00 00 00 
  800420552b:	41 ff d0             	callq  *%r8
  800420552e:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205535:	00 
  8004205536:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420553d:	00 00 00 
  8004205540:	48 8b 00             	mov    (%rax),%rax
  8004205543:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205547:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420554b:	0f 87 7b ff ff ff    	ja     80042054cc <check_boot_pml4e+0x288>
  8004205551:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205558:	00 
  8004205559:	e9 a1 01 00 00       	jmpq   80042056ff <check_boot_pml4e+0x4bb>
  800420555e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004205562:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205566:	48 89 d0             	mov    %rdx,%rax
  8004205569:	48 01 c0             	add    %rax,%rax
  800420556c:	48 01 d0             	add    %rdx,%rax
  800420556f:	48 c1 e0 0f          	shl    $0xf,%rax
  8004205573:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420557a:	00 00 00 
  800420557d:	48 29 c2             	sub    %rax,%rdx
  8004205580:	48 89 d0             	mov    %rdx,%rax
  8004205583:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205587:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420558e:	00 
  800420558f:	e9 e0 00 00 00       	jmpq   8004205674 <check_boot_pml4e+0x430>
  8004205594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205598:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420559c:	48 01 d0             	add    %rdx,%rax
  800420559f:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  80042055a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042055aa:	48 89 d6             	mov    %rdx,%rsi
  80042055ad:	48 89 c7             	mov    %rax,%rdi
  80042055b0:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042055b7:	00 00 00 
  80042055ba:	ff d0                	callq  *%rax
  80042055bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042055c0:	48 89 d1             	mov    %rdx,%rcx
  80042055c3:	48 c1 e1 10          	shl    $0x10,%rcx
  80042055c7:	48 ba 00 00 6a 04 80 	movabs $0x80046a0000,%rdx
  80042055ce:	00 00 00 
  80042055d1:	48 01 ca             	add    %rcx,%rdx
  80042055d4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  80042055d8:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042055df:	00 00 00 
  80042055e2:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042055e6:	77 32                	ja     800420561a <check_boot_pml4e+0x3d6>
  80042055e8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042055ec:	48 89 c1             	mov    %rax,%rcx
  80042055ef:	48 ba 98 92 21 04 80 	movabs $0x8004219298,%rdx
  80042055f6:	00 00 00 
  80042055f9:	be ae 04 00 00       	mov    $0x4ae,%esi
  80042055fe:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205605:	00 00 00 
  8004205608:	b8 00 00 00 00       	mov    $0x0,%eax
  800420560d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205614:	00 00 00 
  8004205617:	41 ff d0             	callq  *%r8
  800420561a:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205621:	ff ff ff 
  8004205624:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004205628:	48 01 d1             	add    %rdx,%rcx
  800420562b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420562f:	48 01 ca             	add    %rcx,%rdx
  8004205632:	48 39 d0             	cmp    %rdx,%rax
  8004205635:	74 35                	je     800420566c <check_boot_pml4e+0x428>
  8004205637:	48 b9 00 97 21 04 80 	movabs $0x8004219700,%rcx
  800420563e:	00 00 00 
  8004205641:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205648:	00 00 00 
  800420564b:	be ae 04 00 00       	mov    $0x4ae,%esi
  8004205650:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205657:	00 00 00 
  800420565a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420565f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205666:	00 00 00 
  8004205669:	41 ff d0             	callq  *%r8
  800420566c:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205673:	00 
  8004205674:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  800420567b:	00 
  800420567c:	0f 86 12 ff ff ff    	jbe    8004205594 <check_boot_pml4e+0x350>
  8004205682:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205689:	00 
  800420568a:	eb 64                	jmp    80042056f0 <check_boot_pml4e+0x4ac>
  800420568c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205690:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205694:	48 01 c2             	add    %rax,%rdx
  8004205697:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420569b:	48 89 d6             	mov    %rdx,%rsi
  800420569e:	48 89 c7             	mov    %rax,%rdi
  80042056a1:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042056a8:	00 00 00 
  80042056ab:	ff d0                	callq  *%rax
  80042056ad:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042056b1:	74 35                	je     80042056e8 <check_boot_pml4e+0x4a4>
  80042056b3:	48 b9 48 97 21 04 80 	movabs $0x8004219748,%rcx
  80042056ba:	00 00 00 
  80042056bd:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042056c4:	00 00 00 
  80042056c7:	be b0 04 00 00       	mov    $0x4b0,%esi
  80042056cc:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042056d3:	00 00 00 
  80042056d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056db:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042056e2:	00 00 00 
  80042056e5:	41 ff d0             	callq  *%r8
  80042056e8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042056ef:	00 
  80042056f0:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042056f7:	00 
  80042056f8:	76 92                	jbe    800420568c <check_boot_pml4e+0x448>
  80042056fa:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042056ff:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  8004205704:	0f 86 54 fe ff ff    	jbe    800420555e <check_boot_pml4e+0x31a>
  800420570a:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004205711:	00 00 00 
  8004205714:	48 8b 00             	mov    (%rax),%rax
  8004205717:	48 83 c0 08          	add    $0x8,%rax
  800420571b:	48 8b 00             	mov    (%rax),%rax
  800420571e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205724:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004205728:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420572c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205730:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004205733:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004205736:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420573d:	00 00 00 
  8004205740:	48 8b 00             	mov    (%rax),%rax
  8004205743:	48 39 c2             	cmp    %rax,%rdx
  8004205746:	72 32                	jb     800420577a <check_boot_pml4e+0x536>
  8004205748:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420574c:	48 89 c1             	mov    %rax,%rcx
  800420574f:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004205756:	00 00 00 
  8004205759:	be ba 04 00 00       	mov    $0x4ba,%esi
  800420575e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205765:	00 00 00 
  8004205768:	b8 00 00 00 00       	mov    $0x0,%eax
  800420576d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205774:	00 00 00 
  8004205777:	41 ff d0             	callq  *%r8
  800420577a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205781:	00 00 00 
  8004205784:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205788:	48 01 d0             	add    %rdx,%rax
  800420578b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420578f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004205793:	48 8b 00             	mov    (%rax),%rax
  8004205796:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420579c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042057a0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057a4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042057a8:	89 45 84             	mov    %eax,-0x7c(%rbp)
  80042057ab:	8b 55 84             	mov    -0x7c(%rbp),%edx
  80042057ae:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042057b5:	00 00 00 
  80042057b8:	48 8b 00             	mov    (%rax),%rax
  80042057bb:	48 39 c2             	cmp    %rax,%rdx
  80042057be:	72 32                	jb     80042057f2 <check_boot_pml4e+0x5ae>
  80042057c0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042057c4:	48 89 c1             	mov    %rax,%rcx
  80042057c7:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  80042057ce:	00 00 00 
  80042057d1:	be bb 04 00 00       	mov    $0x4bb,%esi
  80042057d6:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042057dd:	00 00 00 
  80042057e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057e5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042057ec:	00 00 00 
  80042057ef:	41 ff d0             	callq  *%r8
  80042057f2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042057f9:	00 00 00 
  80042057fc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004205800:	48 01 d0             	add    %rdx,%rax
  8004205803:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800420580a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205811:	00 
  8004205812:	e9 50 01 00 00       	jmpq   8004205967 <check_boot_pml4e+0x723>
  8004205817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420581b:	48 83 f8 04          	cmp    $0x4,%rax
  800420581f:	72 67                	jb     8004205888 <check_boot_pml4e+0x644>
  8004205821:	48 83 f8 05          	cmp    $0x5,%rax
  8004205825:	76 06                	jbe    800420582d <check_boot_pml4e+0x5e9>
  8004205827:	48 83 f8 1f          	cmp    $0x1f,%rax
  800420582b:	75 5b                	jne    8004205888 <check_boot_pml4e+0x644>
  800420582d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205831:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205838:	00 
  8004205839:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205840:	48 01 d0             	add    %rdx,%rax
  8004205843:	48 8b 00             	mov    (%rax),%rax
  8004205846:	83 e0 01             	and    $0x1,%eax
  8004205849:	48 85 c0             	test   %rax,%rax
  800420584c:	75 35                	jne    8004205883 <check_boot_pml4e+0x63f>
  800420584e:	48 b9 6b 97 21 04 80 	movabs $0x800421976b,%rcx
  8004205855:	00 00 00 
  8004205858:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420585f:	00 00 00 
  8004205862:	be c5 04 00 00       	mov    $0x4c5,%esi
  8004205867:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420586e:	00 00 00 
  8004205871:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205876:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420587d:	00 00 00 
  8004205880:	41 ff d0             	callq  *%r8
  8004205883:	e9 da 00 00 00       	jmpq   8004205962 <check_boot_pml4e+0x71e>
  8004205888:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  800420588d:	0f 86 ce 00 00 00    	jbe    8004205961 <check_boot_pml4e+0x71d>
  8004205893:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205897:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420589e:	00 
  800420589f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058a6:	48 01 d0             	add    %rdx,%rax
  80042058a9:	48 8b 00             	mov    (%rax),%rax
  80042058ac:	83 e0 01             	and    $0x1,%eax
  80042058af:	48 85 c0             	test   %rax,%rax
  80042058b2:	74 5a                	je     800420590e <check_boot_pml4e+0x6ca>
  80042058b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058b8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042058bf:	00 
  80042058c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042058c7:	48 01 d0             	add    %rdx,%rax
  80042058ca:	48 8b 00             	mov    (%rax),%rax
  80042058cd:	83 e0 02             	and    $0x2,%eax
  80042058d0:	48 85 c0             	test   %rax,%rax
  80042058d3:	0f 85 88 00 00 00    	jne    8004205961 <check_boot_pml4e+0x71d>
  80042058d9:	48 b9 7c 97 21 04 80 	movabs $0x800421977c,%rcx
  80042058e0:	00 00 00 
  80042058e3:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042058ea:	00 00 00 
  80042058ed:	be ca 04 00 00       	mov    $0x4ca,%esi
  80042058f2:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042058f9:	00 00 00 
  80042058fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205901:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205908:	00 00 00 
  800420590b:	41 ff d0             	callq  *%r8
  800420590e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205921:	48 01 d0             	add    %rdx,%rax
  8004205924:	48 8b 00             	mov    (%rax),%rax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	74 35                	je     8004205961 <check_boot_pml4e+0x71d>
  800420592c:	48 b9 8d 97 21 04 80 	movabs $0x800421978d,%rcx
  8004205933:	00 00 00 
  8004205936:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420593d:	00 00 00 
  8004205940:	be cc 04 00 00       	mov    $0x4cc,%esi
  8004205945:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420594c:	00 00 00 
  800420594f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205954:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420595b:	00 00 00 
  800420595e:	41 ff d0             	callq  *%r8
  8004205961:	90                   	nop
  8004205962:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205967:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  800420596e:	00 
  800420596f:	0f 86 a2 fe ff ff    	jbe    8004205817 <check_boot_pml4e+0x5d3>
  8004205975:	48 bf a0 97 21 04 80 	movabs $0x80042197a0,%rdi
  800420597c:	00 00 00 
  800420597f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205984:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420598b:	00 00 00 
  800420598e:	ff d2                	callq  *%rdx
  8004205990:	c9                   	leaveq 
  8004205991:	c3                   	retq   

0000008004205992 <check_va2pa>:
  8004205992:	55                   	push   %rbp
  8004205993:	48 89 e5             	mov    %rsp,%rbp
  8004205996:	48 83 ec 60          	sub    $0x60,%rsp
  800420599a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420599e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042059a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059a6:	48 c1 e8 27          	shr    $0x27,%rax
  80042059aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059af:	48 c1 e0 03          	shl    $0x3,%rax
  80042059b3:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  80042059b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059bb:	48 8b 00             	mov    (%rax),%rax
  80042059be:	83 e0 01             	and    $0x1,%eax
  80042059c1:	48 85 c0             	test   %rax,%rax
  80042059c4:	75 0c                	jne    80042059d2 <check_va2pa+0x40>
  80042059c6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059cd:	e9 38 02 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  80042059d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059d6:	48 8b 00             	mov    (%rax),%rax
  80042059d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042059df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042059e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042059e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042059eb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042059ee:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042059f1:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042059f8:	00 00 00 
  80042059fb:	48 8b 00             	mov    (%rax),%rax
  80042059fe:	48 39 c2             	cmp    %rax,%rdx
  8004205a01:	72 32                	jb     8004205a35 <check_va2pa+0xa3>
  8004205a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a07:	48 89 c1             	mov    %rax,%rcx
  8004205a0a:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004205a11:	00 00 00 
  8004205a14:	be e4 04 00 00       	mov    $0x4e4,%esi
  8004205a19:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205a20:	00 00 00 
  8004205a23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a28:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205a2f:	00 00 00 
  8004205a32:	41 ff d0             	callq  *%r8
  8004205a35:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a3c:	00 00 00 
  8004205a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a43:	48 01 d0             	add    %rdx,%rax
  8004205a46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205a4a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a4e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a52:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a57:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a5e:	00 
  8004205a5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a63:	48 01 d0             	add    %rdx,%rax
  8004205a66:	48 8b 00             	mov    (%rax),%rax
  8004205a69:	83 e0 01             	and    $0x1,%eax
  8004205a6c:	48 85 c0             	test   %rax,%rax
  8004205a6f:	75 0c                	jne    8004205a7d <check_va2pa+0xeb>
  8004205a71:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a78:	e9 8d 01 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205a7d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a81:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a85:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a8a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a91:	00 
  8004205a92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a96:	48 01 d0             	add    %rdx,%rax
  8004205a99:	48 8b 00             	mov    (%rax),%rax
  8004205a9c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205aa2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205aa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aaa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aae:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004205ab1:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004205ab4:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004205abb:	00 00 00 
  8004205abe:	48 8b 00             	mov    (%rax),%rax
  8004205ac1:	48 39 c2             	cmp    %rax,%rdx
  8004205ac4:	72 32                	jb     8004205af8 <check_va2pa+0x166>
  8004205ac6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aca:	48 89 c1             	mov    %rax,%rcx
  8004205acd:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004205ad4:	00 00 00 
  8004205ad7:	be e8 04 00 00       	mov    $0x4e8,%esi
  8004205adc:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205ae3:	00 00 00 
  8004205ae6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205aeb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205af2:	00 00 00 
  8004205af5:	41 ff d0             	callq  *%r8
  8004205af8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205aff:	00 00 00 
  8004205b02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205b06:	48 01 d0             	add    %rdx,%rax
  8004205b09:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205b0d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205b11:	48 c1 e8 15          	shr    $0x15,%rax
  8004205b15:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205b1a:	48 c1 e0 03          	shl    $0x3,%rax
  8004205b1e:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  8004205b22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b26:	48 8b 00             	mov    (%rax),%rax
  8004205b29:	83 e0 01             	and    $0x1,%eax
  8004205b2c:	48 85 c0             	test   %rax,%rax
  8004205b2f:	75 0c                	jne    8004205b3d <check_va2pa+0x1ab>
  8004205b31:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205b38:	e9 cd 00 00 00       	jmpq   8004205c0a <check_va2pa+0x278>
  8004205b3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b41:	48 8b 00             	mov    (%rax),%rax
  8004205b44:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205b4a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205b4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b52:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205b56:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205b59:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205b5c:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004205b63:	00 00 00 
  8004205b66:	48 8b 00             	mov    (%rax),%rax
  8004205b69:	48 39 c2             	cmp    %rax,%rdx
  8004205b6c:	72 32                	jb     8004205ba0 <check_va2pa+0x20e>
  8004205b6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b72:	48 89 c1             	mov    %rax,%rcx
  8004205b75:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004205b7c:	00 00 00 
  8004205b7f:	be ed 04 00 00       	mov    $0x4ed,%esi
  8004205b84:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205b8b:	00 00 00 
  8004205b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b93:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205b9a:	00 00 00 
  8004205b9d:	41 ff d0             	callq  *%r8
  8004205ba0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205ba7:	00 00 00 
  8004205baa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205bae:	48 01 d0             	add    %rdx,%rax
  8004205bb1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205bb5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205bb9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bbd:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bc2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bc9:	00 
  8004205bca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bce:	48 01 d0             	add    %rdx,%rax
  8004205bd1:	48 8b 00             	mov    (%rax),%rax
  8004205bd4:	83 e0 01             	and    $0x1,%eax
  8004205bd7:	48 85 c0             	test   %rax,%rax
  8004205bda:	75 09                	jne    8004205be5 <check_va2pa+0x253>
  8004205bdc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205be3:	eb 25                	jmp    8004205c0a <check_va2pa+0x278>
  8004205be5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205be9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205bed:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bf2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bf9:	00 
  8004205bfa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bfe:	48 01 d0             	add    %rdx,%rax
  8004205c01:	48 8b 00             	mov    (%rax),%rax
  8004205c04:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205c0a:	c9                   	leaveq 
  8004205c0b:	c3                   	retq   

0000008004205c0c <page_check>:
  8004205c0c:	55                   	push   %rbp
  8004205c0d:	48 89 e5             	mov    %rsp,%rbp
  8004205c10:	53                   	push   %rbx
  8004205c11:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205c18:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205c1f:	00 
  8004205c20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205c24:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205c2c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205c34:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205c38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205c3c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205c40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205c44:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c48:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4d:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205c54:	00 00 00 
  8004205c57:	ff d0                	callq  *%rax
  8004205c59:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c5d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205c62:	75 35                	jne    8004205c99 <page_check+0x8d>
  8004205c64:	48 b9 bf 97 21 04 80 	movabs $0x80042197bf,%rcx
  8004205c6b:	00 00 00 
  8004205c6e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205c75:	00 00 00 
  8004205c78:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c7d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205c84:	00 00 00 
  8004205c87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205c93:	00 00 00 
  8004205c96:	41 ff d0             	callq  *%r8
  8004205c99:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9e:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205ca5:	00 00 00 
  8004205ca8:	ff d0                	callq  *%rax
  8004205caa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205cae:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205cb3:	75 35                	jne    8004205cea <page_check+0xde>
  8004205cb5:	48 b9 d3 97 21 04 80 	movabs $0x80042197d3,%rcx
  8004205cbc:	00 00 00 
  8004205cbf:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205cc6:	00 00 00 
  8004205cc9:	be 06 05 00 00       	mov    $0x506,%esi
  8004205cce:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205cd5:	00 00 00 
  8004205cd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205ce4:	00 00 00 
  8004205ce7:	41 ff d0             	callq  *%r8
  8004205cea:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205cef:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205cf6:	00 00 00 
  8004205cf9:	ff d0                	callq  *%rax
  8004205cfb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205cff:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d04:	75 35                	jne    8004205d3b <page_check+0x12f>
  8004205d06:	48 b9 e7 97 21 04 80 	movabs $0x80042197e7,%rcx
  8004205d0d:	00 00 00 
  8004205d10:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205d17:	00 00 00 
  8004205d1a:	be 07 05 00 00       	mov    $0x507,%esi
  8004205d1f:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205d26:	00 00 00 
  8004205d29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d2e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d35:	00 00 00 
  8004205d38:	41 ff d0             	callq  *%r8
  8004205d3b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d40:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d47:	00 00 00 
  8004205d4a:	ff d0                	callq  *%rax
  8004205d4c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205d50:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205d55:	75 35                	jne    8004205d8c <page_check+0x180>
  8004205d57:	48 b9 fb 97 21 04 80 	movabs $0x80042197fb,%rcx
  8004205d5e:	00 00 00 
  8004205d61:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205d68:	00 00 00 
  8004205d6b:	be 08 05 00 00       	mov    $0x508,%esi
  8004205d70:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205d77:	00 00 00 
  8004205d7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d7f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205d86:	00 00 00 
  8004205d89:	41 ff d0             	callq  *%r8
  8004205d8c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d91:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205d98:	00 00 00 
  8004205d9b:	ff d0                	callq  *%rax
  8004205d9d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205da1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205da6:	75 35                	jne    8004205ddd <page_check+0x1d1>
  8004205da8:	48 b9 0f 98 21 04 80 	movabs $0x800421980f,%rcx
  8004205daf:	00 00 00 
  8004205db2:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205db9:	00 00 00 
  8004205dbc:	be 09 05 00 00       	mov    $0x509,%esi
  8004205dc1:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205dc8:	00 00 00 
  8004205dcb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dd0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205dd7:	00 00 00 
  8004205dda:	41 ff d0             	callq  *%r8
  8004205ddd:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205de2:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004205de9:	00 00 00 
  8004205dec:	ff d0                	callq  *%rax
  8004205dee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205df2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205df7:	75 35                	jne    8004205e2e <page_check+0x222>
  8004205df9:	48 b9 23 98 21 04 80 	movabs $0x8004219823,%rcx
  8004205e00:	00 00 00 
  8004205e03:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205e0a:	00 00 00 
  8004205e0d:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205e12:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205e19:	00 00 00 
  8004205e1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e21:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e28:	00 00 00 
  8004205e2b:	41 ff d0             	callq  *%r8
  8004205e2e:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205e33:	75 35                	jne    8004205e6a <page_check+0x25e>
  8004205e35:	48 b9 71 95 21 04 80 	movabs $0x8004219571,%rcx
  8004205e3c:	00 00 00 
  8004205e3f:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205e46:	00 00 00 
  8004205e49:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205e4e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205e55:	00 00 00 
  8004205e58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205e64:	00 00 00 
  8004205e67:	41 ff d0             	callq  *%r8
  8004205e6a:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205e6f:	74 0a                	je     8004205e7b <page_check+0x26f>
  8004205e71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205e75:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e79:	75 35                	jne    8004205eb0 <page_check+0x2a4>
  8004205e7b:	48 b9 75 95 21 04 80 	movabs $0x8004219575,%rcx
  8004205e82:	00 00 00 
  8004205e85:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205e8c:	00 00 00 
  8004205e8f:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e94:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205e9b:	00 00 00 
  8004205e9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ea3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205eaa:	00 00 00 
  8004205ead:	41 ff d0             	callq  *%r8
  8004205eb0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205eb5:	74 14                	je     8004205ecb <page_check+0x2bf>
  8004205eb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ebb:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ebf:	74 0a                	je     8004205ecb <page_check+0x2bf>
  8004205ec1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ec5:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ec9:	75 35                	jne    8004205f00 <page_check+0x2f4>
  8004205ecb:	48 b9 88 95 21 04 80 	movabs $0x8004219588,%rcx
  8004205ed2:	00 00 00 
  8004205ed5:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205edc:	00 00 00 
  8004205edf:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ee4:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205eeb:	00 00 00 
  8004205eee:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ef3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205efa:	00 00 00 
  8004205efd:	41 ff d0             	callq  *%r8
  8004205f00:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205f05:	74 1e                	je     8004205f25 <page_check+0x319>
  8004205f07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f0b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f0f:	74 14                	je     8004205f25 <page_check+0x319>
  8004205f11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f15:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f19:	74 0a                	je     8004205f25 <page_check+0x319>
  8004205f1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f1f:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f23:	75 35                	jne    8004205f5a <page_check+0x34e>
  8004205f25:	48 b9 38 98 21 04 80 	movabs $0x8004219838,%rcx
  8004205f2c:	00 00 00 
  8004205f2f:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205f36:	00 00 00 
  8004205f39:	be 0f 05 00 00       	mov    $0x50f,%esi
  8004205f3e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205f45:	00 00 00 
  8004205f48:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f4d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205f54:	00 00 00 
  8004205f57:	41 ff d0             	callq  *%r8
  8004205f5a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205f5f:	74 28                	je     8004205f89 <page_check+0x37d>
  8004205f61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f65:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205f69:	74 1e                	je     8004205f89 <page_check+0x37d>
  8004205f6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f6f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f73:	74 14                	je     8004205f89 <page_check+0x37d>
  8004205f75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f79:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f7d:	74 0a                	je     8004205f89 <page_check+0x37d>
  8004205f7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f83:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f87:	75 35                	jne    8004205fbe <page_check+0x3b2>
  8004205f89:	48 b9 68 98 21 04 80 	movabs $0x8004219868,%rcx
  8004205f90:	00 00 00 
  8004205f93:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004205f9a:	00 00 00 
  8004205f9d:	be 10 05 00 00       	mov    $0x510,%esi
  8004205fa2:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004205fa9:	00 00 00 
  8004205fac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fb1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004205fb8:	00 00 00 
  8004205fbb:	41 ff d0             	callq  *%r8
  8004205fbe:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205fc3:	74 32                	je     8004205ff7 <page_check+0x3eb>
  8004205fc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fc9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205fcd:	74 28                	je     8004205ff7 <page_check+0x3eb>
  8004205fcf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fd3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205fd7:	74 1e                	je     8004205ff7 <page_check+0x3eb>
  8004205fd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fdd:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205fe1:	74 14                	je     8004205ff7 <page_check+0x3eb>
  8004205fe3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fe7:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205feb:	74 0a                	je     8004205ff7 <page_check+0x3eb>
  8004205fed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ff1:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ff5:	75 35                	jne    800420602c <page_check+0x420>
  8004205ff7:	48 b9 a8 98 21 04 80 	movabs $0x80042198a8,%rcx
  8004205ffe:	00 00 00 
  8004206001:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206008:	00 00 00 
  800420600b:	be 11 05 00 00       	mov    $0x511,%esi
  8004206010:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206017:	00 00 00 
  800420601a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420601f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206026:	00 00 00 
  8004206029:	41 ff d0             	callq  *%r8
  800420602c:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420603d:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004206044:	00 00 00 
  8004206047:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420604e:	bf 00 00 00 00       	mov    $0x0,%edi
  8004206053:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420605a:	00 00 00 
  800420605d:	ff d0                	callq  *%rax
  800420605f:	48 85 c0             	test   %rax,%rax
  8004206062:	74 35                	je     8004206099 <page_check+0x48d>
  8004206064:	48 b9 ff 95 21 04 80 	movabs $0x80042195ff,%rcx
  800420606b:	00 00 00 
  800420606e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206075:	00 00 00 
  8004206078:	be 18 05 00 00       	mov    $0x518,%esi
  800420607d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206084:	00 00 00 
  8004206087:	b8 00 00 00 00       	mov    $0x0,%eax
  800420608c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206093:	00 00 00 
  8004206096:	41 ff d0             	callq  *%r8
  8004206099:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042060a0:	00 00 00 
  80042060a3:	48 8b 00             	mov    (%rax),%rax
  80042060a6:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  80042060ad:	be 00 00 00 00       	mov    $0x0,%esi
  80042060b2:	48 89 c7             	mov    %rax,%rdi
  80042060b5:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  80042060bc:	00 00 00 
  80042060bf:	ff d0                	callq  *%rax
  80042060c1:	48 85 c0             	test   %rax,%rax
  80042060c4:	74 35                	je     80042060fb <page_check+0x4ef>
  80042060c6:	48 b9 f8 98 21 04 80 	movabs $0x80042198f8,%rcx
  80042060cd:	00 00 00 
  80042060d0:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042060d7:	00 00 00 
  80042060da:	be 1b 05 00 00       	mov    $0x51b,%esi
  80042060df:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042060e6:	00 00 00 
  80042060e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042060ee:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042060f5:	00 00 00 
  80042060f8:	41 ff d0             	callq  *%r8
  80042060fb:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206102:	00 00 00 
  8004206105:	48 8b 00             	mov    (%rax),%rax
  8004206108:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420610c:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206111:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206116:	48 89 c7             	mov    %rax,%rdi
  8004206119:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206120:	00 00 00 
  8004206123:	ff d0                	callq  *%rax
  8004206125:	85 c0                	test   %eax,%eax
  8004206127:	78 35                	js     800420615e <page_check+0x552>
  8004206129:	48 b9 30 99 21 04 80 	movabs $0x8004219930,%rcx
  8004206130:	00 00 00 
  8004206133:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420613a:	00 00 00 
  800420613d:	be 1e 05 00 00       	mov    $0x51e,%esi
  8004206142:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206149:	00 00 00 
  800420614c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206151:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206158:	00 00 00 
  800420615b:	41 ff d0             	callq  *%r8
  800420615e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206162:	48 89 c7             	mov    %rax,%rdi
  8004206165:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420616c:	00 00 00 
  800420616f:	ff d0                	callq  *%rax
  8004206171:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206178:	00 00 00 
  800420617b:	48 8b 00             	mov    (%rax),%rax
  800420617e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206182:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206187:	ba 00 00 00 00       	mov    $0x0,%edx
  800420618c:	48 89 c7             	mov    %rax,%rdi
  800420618f:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206196:	00 00 00 
  8004206199:	ff d0                	callq  *%rax
  800420619b:	85 c0                	test   %eax,%eax
  800420619d:	78 35                	js     80042061d4 <page_check+0x5c8>
  800420619f:	48 b9 30 99 21 04 80 	movabs $0x8004219930,%rcx
  80042061a6:	00 00 00 
  80042061a9:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042061b0:	00 00 00 
  80042061b3:	be 22 05 00 00       	mov    $0x522,%esi
  80042061b8:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042061bf:	00 00 00 
  80042061c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061c7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042061ce:	00 00 00 
  80042061d1:	41 ff d0             	callq  *%r8
  80042061d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042061d8:	48 89 c7             	mov    %rax,%rdi
  80042061db:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061e2:	00 00 00 
  80042061e5:	ff d0                	callq  *%rax
  80042061e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042061eb:	48 89 c7             	mov    %rax,%rdi
  80042061ee:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  80042061f5:	00 00 00 
  80042061f8:	ff d0                	callq  *%rax
  80042061fa:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206201:	00 00 00 
  8004206204:	48 8b 00             	mov    (%rax),%rax
  8004206207:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420620b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206210:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206215:	48 89 c7             	mov    %rax,%rdi
  8004206218:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420621f:	00 00 00 
  8004206222:	ff d0                	callq  *%rax
  8004206224:	85 c0                	test   %eax,%eax
  8004206226:	74 35                	je     800420625d <page_check+0x651>
  8004206228:	48 b9 60 99 21 04 80 	movabs $0x8004219960,%rcx
  800420622f:	00 00 00 
  8004206232:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206239:	00 00 00 
  800420623c:	be 28 05 00 00       	mov    $0x528,%esi
  8004206241:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206248:	00 00 00 
  800420624b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206250:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206257:	00 00 00 
  800420625a:	41 ff d0             	callq  *%r8
  800420625d:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206264:	00 00 00 
  8004206267:	48 8b 00             	mov    (%rax),%rax
  800420626a:	48 8b 00             	mov    (%rax),%rax
  800420626d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206273:	48 89 c3             	mov    %rax,%rbx
  8004206276:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420627a:	48 89 c7             	mov    %rax,%rdi
  800420627d:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206284:	00 00 00 
  8004206287:	ff d0                	callq  *%rax
  8004206289:	48 39 c3             	cmp    %rax,%rbx
  800420628c:	0f 84 97 00 00 00    	je     8004206329 <page_check+0x71d>
  8004206292:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206299:	00 00 00 
  800420629c:	48 8b 00             	mov    (%rax),%rax
  800420629f:	48 8b 00             	mov    (%rax),%rax
  80042062a2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062a8:	48 89 c3             	mov    %rax,%rbx
  80042062ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062af:	48 89 c7             	mov    %rax,%rdi
  80042062b2:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062b9:	00 00 00 
  80042062bc:	ff d0                	callq  *%rax
  80042062be:	48 39 c3             	cmp    %rax,%rbx
  80042062c1:	74 66                	je     8004206329 <page_check+0x71d>
  80042062c3:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042062ca:	00 00 00 
  80042062cd:	48 8b 00             	mov    (%rax),%rax
  80042062d0:	48 8b 00             	mov    (%rax),%rax
  80042062d3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062d9:	48 89 c3             	mov    %rax,%rbx
  80042062dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042062e0:	48 89 c7             	mov    %rax,%rdi
  80042062e3:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042062ea:	00 00 00 
  80042062ed:	ff d0                	callq  *%rax
  80042062ef:	48 39 c3             	cmp    %rax,%rbx
  80042062f2:	74 35                	je     8004206329 <page_check+0x71d>
  80042062f4:	48 b9 90 99 21 04 80 	movabs $0x8004219990,%rcx
  80042062fb:	00 00 00 
  80042062fe:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206305:	00 00 00 
  8004206308:	be 29 05 00 00       	mov    $0x529,%esi
  800420630d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206314:	00 00 00 
  8004206317:	b8 00 00 00 00       	mov    $0x0,%eax
  800420631c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206323:	00 00 00 
  8004206326:	41 ff d0             	callq  *%r8
  8004206329:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206330:	00 00 00 
  8004206333:	48 8b 00             	mov    (%rax),%rax
  8004206336:	be 00 00 00 00       	mov    $0x0,%esi
  800420633b:	48 89 c7             	mov    %rax,%rdi
  800420633e:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206345:	00 00 00 
  8004206348:	ff d0                	callq  *%rax
  800420634a:	48 89 c3             	mov    %rax,%rbx
  800420634d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206351:	48 89 c7             	mov    %rax,%rdi
  8004206354:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420635b:	00 00 00 
  800420635e:	ff d0                	callq  *%rax
  8004206360:	48 39 c3             	cmp    %rax,%rbx
  8004206363:	74 35                	je     800420639a <page_check+0x78e>
  8004206365:	48 b9 18 9a 21 04 80 	movabs $0x8004219a18,%rcx
  800420636c:	00 00 00 
  800420636f:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206376:	00 00 00 
  8004206379:	be 2a 05 00 00       	mov    $0x52a,%esi
  800420637e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206385:	00 00 00 
  8004206388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420638d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206394:	00 00 00 
  8004206397:	41 ff d0             	callq  *%r8
  800420639a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420639e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063a2:	66 83 f8 01          	cmp    $0x1,%ax
  80042063a6:	74 35                	je     80042063dd <page_check+0x7d1>
  80042063a8:	48 b9 45 9a 21 04 80 	movabs $0x8004219a45,%rcx
  80042063af:	00 00 00 
  80042063b2:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042063b9:	00 00 00 
  80042063bc:	be 2b 05 00 00       	mov    $0x52b,%esi
  80042063c1:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042063c8:	00 00 00 
  80042063cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063d0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042063d7:	00 00 00 
  80042063da:	41 ff d0             	callq  *%r8
  80042063dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042063e1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063e5:	66 83 f8 01          	cmp    $0x1,%ax
  80042063e9:	74 35                	je     8004206420 <page_check+0x814>
  80042063eb:	48 b9 56 9a 21 04 80 	movabs $0x8004219a56,%rcx
  80042063f2:	00 00 00 
  80042063f5:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042063fc:	00 00 00 
  80042063ff:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206404:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420640b:	00 00 00 
  800420640e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206413:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420641a:	00 00 00 
  800420641d:	41 ff d0             	callq  *%r8
  8004206420:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206424:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206428:	66 83 f8 01          	cmp    $0x1,%ax
  800420642c:	74 35                	je     8004206463 <page_check+0x857>
  800420642e:	48 b9 67 9a 21 04 80 	movabs $0x8004219a67,%rcx
  8004206435:	00 00 00 
  8004206438:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420643f:	00 00 00 
  8004206442:	be 2d 05 00 00       	mov    $0x52d,%esi
  8004206447:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420644e:	00 00 00 
  8004206451:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206456:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420645d:	00 00 00 
  8004206460:	41 ff d0             	callq  *%r8
  8004206463:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420646a:	00 00 00 
  800420646d:	48 8b 00             	mov    (%rax),%rax
  8004206470:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206474:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206479:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420647e:	48 89 c7             	mov    %rax,%rdi
  8004206481:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206488:	00 00 00 
  800420648b:	ff d0                	callq  *%rax
  800420648d:	85 c0                	test   %eax,%eax
  800420648f:	74 35                	je     80042064c6 <page_check+0x8ba>
  8004206491:	48 b9 78 9a 21 04 80 	movabs $0x8004219a78,%rcx
  8004206498:	00 00 00 
  800420649b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042064a2:	00 00 00 
  80042064a5:	be 2f 05 00 00       	mov    $0x52f,%esi
  80042064aa:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042064b1:	00 00 00 
  80042064b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064b9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042064c0:	00 00 00 
  80042064c3:	41 ff d0             	callq  *%r8
  80042064c6:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042064cd:	00 00 00 
  80042064d0:	48 8b 00             	mov    (%rax),%rax
  80042064d3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064d8:	48 89 c7             	mov    %rax,%rdi
  80042064db:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  80042064e2:	00 00 00 
  80042064e5:	ff d0                	callq  *%rax
  80042064e7:	48 89 c3             	mov    %rax,%rbx
  80042064ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042064ee:	48 89 c7             	mov    %rax,%rdi
  80042064f1:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042064f8:	00 00 00 
  80042064fb:	ff d0                	callq  *%rax
  80042064fd:	48 39 c3             	cmp    %rax,%rbx
  8004206500:	74 35                	je     8004206537 <page_check+0x92b>
  8004206502:	48 b9 b0 9a 21 04 80 	movabs $0x8004219ab0,%rcx
  8004206509:	00 00 00 
  800420650c:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206513:	00 00 00 
  8004206516:	be 30 05 00 00       	mov    $0x530,%esi
  800420651b:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206522:	00 00 00 
  8004206525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420652a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206531:	00 00 00 
  8004206534:	41 ff d0             	callq  *%r8
  8004206537:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420653b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420653f:	66 83 f8 02          	cmp    $0x2,%ax
  8004206543:	74 35                	je     800420657a <page_check+0x96e>
  8004206545:	48 b9 e0 9a 21 04 80 	movabs $0x8004219ae0,%rcx
  800420654c:	00 00 00 
  800420654f:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206556:	00 00 00 
  8004206559:	be 31 05 00 00       	mov    $0x531,%esi
  800420655e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206565:	00 00 00 
  8004206568:	b8 00 00 00 00       	mov    $0x0,%eax
  800420656d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206574:	00 00 00 
  8004206577:	41 ff d0             	callq  *%r8
  800420657a:	bf 00 00 00 00       	mov    $0x0,%edi
  800420657f:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  8004206586:	00 00 00 
  8004206589:	ff d0                	callq  *%rax
  800420658b:	48 85 c0             	test   %rax,%rax
  800420658e:	74 35                	je     80042065c5 <page_check+0x9b9>
  8004206590:	48 b9 ff 95 21 04 80 	movabs $0x80042195ff,%rcx
  8004206597:	00 00 00 
  800420659a:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042065a1:	00 00 00 
  80042065a4:	be 34 05 00 00       	mov    $0x534,%esi
  80042065a9:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042065b0:	00 00 00 
  80042065b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042065bf:	00 00 00 
  80042065c2:	41 ff d0             	callq  *%r8
  80042065c5:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042065cc:	00 00 00 
  80042065cf:	48 8b 00             	mov    (%rax),%rax
  80042065d2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042065d6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042065db:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042065e0:	48 89 c7             	mov    %rax,%rdi
  80042065e3:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  80042065ea:	00 00 00 
  80042065ed:	ff d0                	callq  *%rax
  80042065ef:	85 c0                	test   %eax,%eax
  80042065f1:	74 35                	je     8004206628 <page_check+0xa1c>
  80042065f3:	48 b9 78 9a 21 04 80 	movabs $0x8004219a78,%rcx
  80042065fa:	00 00 00 
  80042065fd:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206604:	00 00 00 
  8004206607:	be 37 05 00 00       	mov    $0x537,%esi
  800420660c:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206613:	00 00 00 
  8004206616:	b8 00 00 00 00       	mov    $0x0,%eax
  800420661b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206622:	00 00 00 
  8004206625:	41 ff d0             	callq  *%r8
  8004206628:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420662f:	00 00 00 
  8004206632:	48 8b 00             	mov    (%rax),%rax
  8004206635:	be 00 10 00 00       	mov    $0x1000,%esi
  800420663a:	48 89 c7             	mov    %rax,%rdi
  800420663d:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206644:	00 00 00 
  8004206647:	ff d0                	callq  *%rax
  8004206649:	48 89 c3             	mov    %rax,%rbx
  800420664c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206650:	48 89 c7             	mov    %rax,%rdi
  8004206653:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  800420665a:	00 00 00 
  800420665d:	ff d0                	callq  *%rax
  800420665f:	48 39 c3             	cmp    %rax,%rbx
  8004206662:	74 35                	je     8004206699 <page_check+0xa8d>
  8004206664:	48 b9 b0 9a 21 04 80 	movabs $0x8004219ab0,%rcx
  800420666b:	00 00 00 
  800420666e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206675:	00 00 00 
  8004206678:	be 38 05 00 00       	mov    $0x538,%esi
  800420667d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206684:	00 00 00 
  8004206687:	b8 00 00 00 00       	mov    $0x0,%eax
  800420668c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206693:	00 00 00 
  8004206696:	41 ff d0             	callq  *%r8
  8004206699:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420669d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042066a1:	66 83 f8 02          	cmp    $0x2,%ax
  80042066a5:	74 35                	je     80042066dc <page_check+0xad0>
  80042066a7:	48 b9 e0 9a 21 04 80 	movabs $0x8004219ae0,%rcx
  80042066ae:	00 00 00 
  80042066b1:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042066b8:	00 00 00 
  80042066bb:	be 39 05 00 00       	mov    $0x539,%esi
  80042066c0:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042066c7:	00 00 00 
  80042066ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066cf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042066d6:	00 00 00 
  80042066d9:	41 ff d0             	callq  *%r8
  80042066dc:	bf 00 00 00 00       	mov    $0x0,%edi
  80042066e1:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042066e8:	00 00 00 
  80042066eb:	ff d0                	callq  *%rax
  80042066ed:	48 85 c0             	test   %rax,%rax
  80042066f0:	74 35                	je     8004206727 <page_check+0xb1b>
  80042066f2:	48 b9 ff 95 21 04 80 	movabs $0x80042195ff,%rcx
  80042066f9:	00 00 00 
  80042066fc:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206703:	00 00 00 
  8004206706:	be 3d 05 00 00       	mov    $0x53d,%esi
  800420670b:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206712:	00 00 00 
  8004206715:	b8 00 00 00 00       	mov    $0x0,%eax
  800420671a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206721:	00 00 00 
  8004206724:	41 ff d0             	callq  *%r8
  8004206727:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420672e:	00 00 00 
  8004206731:	48 8b 00             	mov    (%rax),%rax
  8004206734:	48 8b 00             	mov    (%rax),%rax
  8004206737:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420673d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004206741:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206745:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206749:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  800420674c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420674f:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004206756:	00 00 00 
  8004206759:	48 8b 00             	mov    (%rax),%rax
  800420675c:	48 39 c2             	cmp    %rax,%rdx
  800420675f:	72 32                	jb     8004206793 <page_check+0xb87>
  8004206761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206765:	48 89 c1             	mov    %rax,%rcx
  8004206768:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  800420676f:	00 00 00 
  8004206772:	be 3f 05 00 00       	mov    $0x53f,%esi
  8004206777:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420677e:	00 00 00 
  8004206781:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206786:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420678d:	00 00 00 
  8004206790:	41 ff d0             	callq  *%r8
  8004206793:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420679a:	00 00 00 
  800420679d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042067a1:	48 01 d0             	add    %rdx,%rax
  80042067a4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042067a8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042067ac:	48 8b 00             	mov    (%rax),%rax
  80042067af:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042067b5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042067b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042067c1:	89 45 8c             	mov    %eax,-0x74(%rbp)
  80042067c4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042067c7:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042067ce:	00 00 00 
  80042067d1:	48 8b 00             	mov    (%rax),%rax
  80042067d4:	48 39 c2             	cmp    %rax,%rdx
  80042067d7:	72 32                	jb     800420680b <page_check+0xbff>
  80042067d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067dd:	48 89 c1             	mov    %rax,%rcx
  80042067e0:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  80042067e7:	00 00 00 
  80042067ea:	be 40 05 00 00       	mov    $0x540,%esi
  80042067ef:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042067f6:	00 00 00 
  80042067f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067fe:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206805:	00 00 00 
  8004206808:	41 ff d0             	callq  *%r8
  800420680b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206812:	00 00 00 
  8004206815:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206819:	48 01 d0             	add    %rdx,%rax
  800420681c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004206820:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004206824:	48 8b 00             	mov    (%rax),%rax
  8004206827:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420682d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004206834:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420683b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420683f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206845:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  800420684b:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004206852:	00 00 00 
  8004206855:	48 8b 00             	mov    (%rax),%rax
  8004206858:	48 39 c2             	cmp    %rax,%rdx
  800420685b:	72 35                	jb     8004206892 <page_check+0xc86>
  800420685d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206864:	48 89 c1             	mov    %rax,%rcx
  8004206867:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  800420686e:	00 00 00 
  8004206871:	be 41 05 00 00       	mov    $0x541,%esi
  8004206876:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420687d:	00 00 00 
  8004206880:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206885:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420688c:	00 00 00 
  800420688f:	41 ff d0             	callq  *%r8
  8004206892:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206899:	00 00 00 
  800420689c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042068a3:	48 01 d0             	add    %rdx,%rax
  80042068a6:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042068ad:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042068b4:	00 00 00 
  80042068b7:	48 8b 00             	mov    (%rax),%rax
  80042068ba:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068bf:	be 00 10 00 00       	mov    $0x1000,%esi
  80042068c4:	48 89 c7             	mov    %rax,%rdi
  80042068c7:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  80042068ce:	00 00 00 
  80042068d1:	ff d0                	callq  *%rax
  80042068d3:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  80042068da:	48 83 c2 08          	add    $0x8,%rdx
  80042068de:	48 39 d0             	cmp    %rdx,%rax
  80042068e1:	74 35                	je     8004206918 <page_check+0xd0c>
  80042068e3:	48 b9 f8 9a 21 04 80 	movabs $0x8004219af8,%rcx
  80042068ea:	00 00 00 
  80042068ed:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042068f4:	00 00 00 
  80042068f7:	be 42 05 00 00       	mov    $0x542,%esi
  80042068fc:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206903:	00 00 00 
  8004206906:	b8 00 00 00 00       	mov    $0x0,%eax
  800420690b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206912:	00 00 00 
  8004206915:	41 ff d0             	callq  *%r8
  8004206918:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420691f:	00 00 00 
  8004206922:	48 8b 00             	mov    (%rax),%rax
  8004206925:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206929:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420692e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206933:	48 89 c7             	mov    %rax,%rdi
  8004206936:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420693d:	00 00 00 
  8004206940:	ff d0                	callq  *%rax
  8004206942:	85 c0                	test   %eax,%eax
  8004206944:	74 35                	je     800420697b <page_check+0xd6f>
  8004206946:	48 b9 38 9b 21 04 80 	movabs $0x8004219b38,%rcx
  800420694d:	00 00 00 
  8004206950:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206957:	00 00 00 
  800420695a:	be 45 05 00 00       	mov    $0x545,%esi
  800420695f:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206966:	00 00 00 
  8004206969:	b8 00 00 00 00       	mov    $0x0,%eax
  800420696e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206975:	00 00 00 
  8004206978:	41 ff d0             	callq  *%r8
  800420697b:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206982:	00 00 00 
  8004206985:	48 8b 00             	mov    (%rax),%rax
  8004206988:	be 00 10 00 00       	mov    $0x1000,%esi
  800420698d:	48 89 c7             	mov    %rax,%rdi
  8004206990:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206997:	00 00 00 
  800420699a:	ff d0                	callq  *%rax
  800420699c:	48 89 c3             	mov    %rax,%rbx
  800420699f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069a3:	48 89 c7             	mov    %rax,%rdi
  80042069a6:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  80042069ad:	00 00 00 
  80042069b0:	ff d0                	callq  *%rax
  80042069b2:	48 39 c3             	cmp    %rax,%rbx
  80042069b5:	74 35                	je     80042069ec <page_check+0xde0>
  80042069b7:	48 b9 b0 9a 21 04 80 	movabs $0x8004219ab0,%rcx
  80042069be:	00 00 00 
  80042069c1:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042069c8:	00 00 00 
  80042069cb:	be 46 05 00 00       	mov    $0x546,%esi
  80042069d0:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042069d7:	00 00 00 
  80042069da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069df:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042069e6:	00 00 00 
  80042069e9:	41 ff d0             	callq  *%r8
  80042069ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069f0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042069f4:	66 83 f8 02          	cmp    $0x2,%ax
  80042069f8:	74 35                	je     8004206a2f <page_check+0xe23>
  80042069fa:	48 b9 e0 9a 21 04 80 	movabs $0x8004219ae0,%rcx
  8004206a01:	00 00 00 
  8004206a04:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206a0b:	00 00 00 
  8004206a0e:	be 47 05 00 00       	mov    $0x547,%esi
  8004206a13:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206a1a:	00 00 00 
  8004206a1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a22:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a29:	00 00 00 
  8004206a2c:	41 ff d0             	callq  *%r8
  8004206a2f:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206a36:	00 00 00 
  8004206a39:	48 8b 00             	mov    (%rax),%rax
  8004206a3c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a41:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a46:	48 89 c7             	mov    %rax,%rdi
  8004206a49:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206a50:	00 00 00 
  8004206a53:	ff d0                	callq  *%rax
  8004206a55:	48 8b 00             	mov    (%rax),%rax
  8004206a58:	83 e0 04             	and    $0x4,%eax
  8004206a5b:	48 85 c0             	test   %rax,%rax
  8004206a5e:	75 35                	jne    8004206a95 <page_check+0xe89>
  8004206a60:	48 b9 78 9b 21 04 80 	movabs $0x8004219b78,%rcx
  8004206a67:	00 00 00 
  8004206a6a:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206a71:	00 00 00 
  8004206a74:	be 48 05 00 00       	mov    $0x548,%esi
  8004206a79:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206a80:	00 00 00 
  8004206a83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a88:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206a8f:	00 00 00 
  8004206a92:	41 ff d0             	callq  *%r8
  8004206a95:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206a9c:	00 00 00 
  8004206a9f:	48 8b 00             	mov    (%rax),%rax
  8004206aa2:	48 8b 00             	mov    (%rax),%rax
  8004206aa5:	83 e0 04             	and    $0x4,%eax
  8004206aa8:	48 85 c0             	test   %rax,%rax
  8004206aab:	75 35                	jne    8004206ae2 <page_check+0xed6>
  8004206aad:	48 b9 ab 9b 21 04 80 	movabs $0x8004219bab,%rcx
  8004206ab4:	00 00 00 
  8004206ab7:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206abe:	00 00 00 
  8004206ac1:	be 49 05 00 00       	mov    $0x549,%esi
  8004206ac6:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206acd:	00 00 00 
  8004206ad0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ad5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206adc:	00 00 00 
  8004206adf:	41 ff d0             	callq  *%r8
  8004206ae2:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206ae9:	00 00 00 
  8004206aec:	48 8b 00             	mov    (%rax),%rax
  8004206aef:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004206af3:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206af8:	ba 00 00 20 00       	mov    $0x200000,%edx
  8004206afd:	48 89 c7             	mov    %rax,%rdi
  8004206b00:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b07:	00 00 00 
  8004206b0a:	ff d0                	callq  *%rax
  8004206b0c:	85 c0                	test   %eax,%eax
  8004206b0e:	78 35                	js     8004206b45 <page_check+0xf39>
  8004206b10:	48 b9 c8 9b 21 04 80 	movabs $0x8004219bc8,%rcx
  8004206b17:	00 00 00 
  8004206b1a:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206b21:	00 00 00 
  8004206b24:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206b29:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206b30:	00 00 00 
  8004206b33:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b38:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206b3f:	00 00 00 
  8004206b42:	41 ff d0             	callq  *%r8
  8004206b45:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206b4c:	00 00 00 
  8004206b4f:	48 8b 00             	mov    (%rax),%rax
  8004206b52:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206b56:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206b5b:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206b60:	48 89 c7             	mov    %rax,%rdi
  8004206b63:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206b6a:	00 00 00 
  8004206b6d:	ff d0                	callq  *%rax
  8004206b6f:	85 c0                	test   %eax,%eax
  8004206b71:	74 35                	je     8004206ba8 <page_check+0xf9c>
  8004206b73:	48 b9 00 9c 21 04 80 	movabs $0x8004219c00,%rcx
  8004206b7a:	00 00 00 
  8004206b7d:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206b84:	00 00 00 
  8004206b87:	be 50 05 00 00       	mov    $0x550,%esi
  8004206b8c:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206b93:	00 00 00 
  8004206b96:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ba2:	00 00 00 
  8004206ba5:	41 ff d0             	callq  *%r8
  8004206ba8:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206baf:	00 00 00 
  8004206bb2:	48 8b 00             	mov    (%rax),%rax
  8004206bb5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206bba:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206bbf:	48 89 c7             	mov    %rax,%rdi
  8004206bc2:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004206bc9:	00 00 00 
  8004206bcc:	ff d0                	callq  *%rax
  8004206bce:	48 8b 00             	mov    (%rax),%rax
  8004206bd1:	83 e0 04             	and    $0x4,%eax
  8004206bd4:	48 85 c0             	test   %rax,%rax
  8004206bd7:	74 35                	je     8004206c0e <page_check+0x1002>
  8004206bd9:	48 b9 38 9c 21 04 80 	movabs $0x8004219c38,%rcx
  8004206be0:	00 00 00 
  8004206be3:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206bea:	00 00 00 
  8004206bed:	be 51 05 00 00       	mov    $0x551,%esi
  8004206bf2:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206bf9:	00 00 00 
  8004206bfc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c01:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c08:	00 00 00 
  8004206c0b:	41 ff d0             	callq  *%r8
  8004206c0e:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206c15:	00 00 00 
  8004206c18:	48 8b 00             	mov    (%rax),%rax
  8004206c1b:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c20:	48 89 c7             	mov    %rax,%rdi
  8004206c23:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c2a:	00 00 00 
  8004206c2d:	ff d0                	callq  *%rax
  8004206c2f:	48 89 c3             	mov    %rax,%rbx
  8004206c32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206c36:	48 89 c7             	mov    %rax,%rdi
  8004206c39:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206c40:	00 00 00 
  8004206c43:	ff d0                	callq  *%rax
  8004206c45:	48 39 c3             	cmp    %rax,%rbx
  8004206c48:	74 35                	je     8004206c7f <page_check+0x1073>
  8004206c4a:	48 b9 70 9c 21 04 80 	movabs $0x8004219c70,%rcx
  8004206c51:	00 00 00 
  8004206c54:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206c5b:	00 00 00 
  8004206c5e:	be 54 05 00 00       	mov    $0x554,%esi
  8004206c63:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206c6a:	00 00 00 
  8004206c6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206c79:	00 00 00 
  8004206c7c:	41 ff d0             	callq  *%r8
  8004206c7f:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206c86:	00 00 00 
  8004206c89:	48 8b 00             	mov    (%rax),%rax
  8004206c8c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206c91:	48 89 c7             	mov    %rax,%rdi
  8004206c94:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206c9b:	00 00 00 
  8004206c9e:	ff d0                	callq  *%rax
  8004206ca0:	48 89 c3             	mov    %rax,%rbx
  8004206ca3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206ca7:	48 89 c7             	mov    %rax,%rdi
  8004206caa:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206cb1:	00 00 00 
  8004206cb4:	ff d0                	callq  *%rax
  8004206cb6:	48 39 c3             	cmp    %rax,%rbx
  8004206cb9:	74 35                	je     8004206cf0 <page_check+0x10e4>
  8004206cbb:	48 b9 a0 9c 21 04 80 	movabs $0x8004219ca0,%rcx
  8004206cc2:	00 00 00 
  8004206cc5:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206ccc:	00 00 00 
  8004206ccf:	be 55 05 00 00       	mov    $0x555,%esi
  8004206cd4:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206cdb:	00 00 00 
  8004206cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ce3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206cea:	00 00 00 
  8004206ced:	41 ff d0             	callq  *%r8
  8004206cf0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cf4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206cf8:	66 83 f8 02          	cmp    $0x2,%ax
  8004206cfc:	74 35                	je     8004206d33 <page_check+0x1127>
  8004206cfe:	48 b9 d0 9c 21 04 80 	movabs $0x8004219cd0,%rcx
  8004206d05:	00 00 00 
  8004206d08:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206d0f:	00 00 00 
  8004206d12:	be 57 05 00 00       	mov    $0x557,%esi
  8004206d17:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206d1e:	00 00 00 
  8004206d21:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d26:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d2d:	00 00 00 
  8004206d30:	41 ff d0             	callq  *%r8
  8004206d33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d37:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d3b:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d3f:	74 35                	je     8004206d76 <page_check+0x116a>
  8004206d41:	48 b9 e1 9c 21 04 80 	movabs $0x8004219ce1,%rcx
  8004206d48:	00 00 00 
  8004206d4b:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206d52:	00 00 00 
  8004206d55:	be 58 05 00 00       	mov    $0x558,%esi
  8004206d5a:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206d61:	00 00 00 
  8004206d64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d69:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206d70:	00 00 00 
  8004206d73:	41 ff d0             	callq  *%r8
  8004206d76:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206d7d:	00 00 00 
  8004206d80:	48 8b 00             	mov    (%rax),%rax
  8004206d83:	be 00 00 00 00       	mov    $0x0,%esi
  8004206d88:	48 89 c7             	mov    %rax,%rdi
  8004206d8b:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206d92:	00 00 00 
  8004206d95:	ff d0                	callq  *%rax
  8004206d97:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206d9e:	00 00 00 
  8004206da1:	48 8b 00             	mov    (%rax),%rax
  8004206da4:	be 00 00 00 00       	mov    $0x0,%esi
  8004206da9:	48 89 c7             	mov    %rax,%rdi
  8004206dac:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206db3:	00 00 00 
  8004206db6:	ff d0                	callq  *%rax
  8004206db8:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206dbc:	74 35                	je     8004206df3 <page_check+0x11e7>
  8004206dbe:	48 b9 f8 9c 21 04 80 	movabs $0x8004219cf8,%rcx
  8004206dc5:	00 00 00 
  8004206dc8:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206dcf:	00 00 00 
  8004206dd2:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206dd7:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206dde:	00 00 00 
  8004206de1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206de6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ded:	00 00 00 
  8004206df0:	41 ff d0             	callq  *%r8
  8004206df3:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206dfa:	00 00 00 
  8004206dfd:	48 8b 00             	mov    (%rax),%rax
  8004206e00:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e05:	48 89 c7             	mov    %rax,%rdi
  8004206e08:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004206e0f:	00 00 00 
  8004206e12:	ff d0                	callq  *%rax
  8004206e14:	48 89 c3             	mov    %rax,%rbx
  8004206e17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e1b:	48 89 c7             	mov    %rax,%rdi
  8004206e1e:	48 b8 63 1c 20 04 80 	movabs $0x8004201c63,%rax
  8004206e25:	00 00 00 
  8004206e28:	ff d0                	callq  *%rax
  8004206e2a:	48 39 c3             	cmp    %rax,%rbx
  8004206e2d:	74 35                	je     8004206e64 <page_check+0x1258>
  8004206e2f:	48 b9 a0 9c 21 04 80 	movabs $0x8004219ca0,%rcx
  8004206e36:	00 00 00 
  8004206e39:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206e40:	00 00 00 
  8004206e43:	be 5e 05 00 00       	mov    $0x55e,%esi
  8004206e48:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206e4f:	00 00 00 
  8004206e52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e57:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206e5e:	00 00 00 
  8004206e61:	41 ff d0             	callq  *%r8
  8004206e64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e6c:	66 83 f8 01          	cmp    $0x1,%ax
  8004206e70:	74 35                	je     8004206ea7 <page_check+0x129b>
  8004206e72:	48 b9 45 9a 21 04 80 	movabs $0x8004219a45,%rcx
  8004206e79:	00 00 00 
  8004206e7c:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206e83:	00 00 00 
  8004206e86:	be 5f 05 00 00       	mov    $0x55f,%esi
  8004206e8b:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206e92:	00 00 00 
  8004206e95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e9a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ea1:	00 00 00 
  8004206ea4:	41 ff d0             	callq  *%r8
  8004206ea7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206eab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206eaf:	66 83 f8 01          	cmp    $0x1,%ax
  8004206eb3:	74 35                	je     8004206eea <page_check+0x12de>
  8004206eb5:	48 b9 e1 9c 21 04 80 	movabs $0x8004219ce1,%rcx
  8004206ebc:	00 00 00 
  8004206ebf:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206ec6:	00 00 00 
  8004206ec9:	be 60 05 00 00       	mov    $0x560,%esi
  8004206ece:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206ed5:	00 00 00 
  8004206ed8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206edd:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206ee4:	00 00 00 
  8004206ee7:	41 ff d0             	callq  *%r8
  8004206eea:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206ef1:	00 00 00 
  8004206ef4:	48 8b 00             	mov    (%rax),%rax
  8004206ef7:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206efb:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206f00:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206f05:	48 89 c7             	mov    %rax,%rdi
  8004206f08:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004206f0f:	00 00 00 
  8004206f12:	ff d0                	callq  *%rax
  8004206f14:	85 c0                	test   %eax,%eax
  8004206f16:	74 35                	je     8004206f4d <page_check+0x1341>
  8004206f18:	48 b9 00 9c 21 04 80 	movabs $0x8004219c00,%rcx
  8004206f1f:	00 00 00 
  8004206f22:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206f29:	00 00 00 
  8004206f2c:	be 64 05 00 00       	mov    $0x564,%esi
  8004206f31:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206f38:	00 00 00 
  8004206f3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f40:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f47:	00 00 00 
  8004206f4a:	41 ff d0             	callq  *%r8
  8004206f4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f51:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f55:	66 85 c0             	test   %ax,%ax
  8004206f58:	75 35                	jne    8004206f8f <page_check+0x1383>
  8004206f5a:	48 b9 1b 9d 21 04 80 	movabs $0x8004219d1b,%rcx
  8004206f61:	00 00 00 
  8004206f64:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206f6b:	00 00 00 
  8004206f6e:	be 65 05 00 00       	mov    $0x565,%esi
  8004206f73:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206f7a:	00 00 00 
  8004206f7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f82:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206f89:	00 00 00 
  8004206f8c:	41 ff d0             	callq  *%r8
  8004206f8f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f93:	48 8b 00             	mov    (%rax),%rax
  8004206f96:	48 85 c0             	test   %rax,%rax
  8004206f99:	74 35                	je     8004206fd0 <page_check+0x13c4>
  8004206f9b:	48 b9 27 9d 21 04 80 	movabs $0x8004219d27,%rcx
  8004206fa2:	00 00 00 
  8004206fa5:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004206fac:	00 00 00 
  8004206faf:	be 66 05 00 00       	mov    $0x566,%esi
  8004206fb4:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004206fbb:	00 00 00 
  8004206fbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fc3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004206fca:	00 00 00 
  8004206fcd:	41 ff d0             	callq  *%r8
  8004206fd0:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206fd7:	00 00 00 
  8004206fda:	48 8b 00             	mov    (%rax),%rax
  8004206fdd:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206fe2:	48 89 c7             	mov    %rax,%rdi
  8004206fe5:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004206fec:	00 00 00 
  8004206fef:	ff d0                	callq  *%rax
  8004206ff1:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206ff8:	00 00 00 
  8004206ffb:	48 8b 00             	mov    (%rax),%rax
  8004206ffe:	be 00 00 00 00       	mov    $0x0,%esi
  8004207003:	48 89 c7             	mov    %rax,%rdi
  8004207006:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  800420700d:	00 00 00 
  8004207010:	ff d0                	callq  *%rax
  8004207012:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207016:	74 35                	je     800420704d <page_check+0x1441>
  8004207018:	48 b9 f8 9c 21 04 80 	movabs $0x8004219cf8,%rcx
  800420701f:	00 00 00 
  8004207022:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207029:	00 00 00 
  800420702c:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004207031:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207038:	00 00 00 
  800420703b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207040:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207047:	00 00 00 
  800420704a:	41 ff d0             	callq  *%r8
  800420704d:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207054:	00 00 00 
  8004207057:	48 8b 00             	mov    (%rax),%rax
  800420705a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420705f:	48 89 c7             	mov    %rax,%rdi
  8004207062:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207069:	00 00 00 
  800420706c:	ff d0                	callq  *%rax
  800420706e:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207072:	74 35                	je     80042070a9 <page_check+0x149d>
  8004207074:	48 b9 40 9d 21 04 80 	movabs $0x8004219d40,%rcx
  800420707b:	00 00 00 
  800420707e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207085:	00 00 00 
  8004207088:	be 6b 05 00 00       	mov    $0x56b,%esi
  800420708d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207094:	00 00 00 
  8004207097:	b8 00 00 00 00       	mov    $0x0,%eax
  800420709c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070a3:	00 00 00 
  80042070a6:	41 ff d0             	callq  *%r8
  80042070a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042070ad:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070b1:	66 85 c0             	test   %ax,%ax
  80042070b4:	74 35                	je     80042070eb <page_check+0x14df>
  80042070b6:	48 b9 66 9d 21 04 80 	movabs $0x8004219d66,%rcx
  80042070bd:	00 00 00 
  80042070c0:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042070c7:	00 00 00 
  80042070ca:	be 6c 05 00 00       	mov    $0x56c,%esi
  80042070cf:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042070d6:	00 00 00 
  80042070d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042070de:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042070e5:	00 00 00 
  80042070e8:	41 ff d0             	callq  *%r8
  80042070eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042070ef:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070f3:	66 83 f8 01          	cmp    $0x1,%ax
  80042070f7:	74 35                	je     800420712e <page_check+0x1522>
  80042070f9:	48 b9 e1 9c 21 04 80 	movabs $0x8004219ce1,%rcx
  8004207100:	00 00 00 
  8004207103:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420710a:	00 00 00 
  800420710d:	be 6d 05 00 00       	mov    $0x56d,%esi
  8004207112:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207119:	00 00 00 
  800420711c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207121:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207128:	00 00 00 
  800420712b:	41 ff d0             	callq  *%r8
  800420712e:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207135:	00 00 00 
  8004207138:	48 8b 00             	mov    (%rax),%rax
  800420713b:	48 8b 00             	mov    (%rax),%rax
  800420713e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207144:	48 89 c7             	mov    %rax,%rdi
  8004207147:	48 b8 88 1c 20 04 80 	movabs $0x8004201c88,%rax
  800420714e:	00 00 00 
  8004207151:	ff d0                	callq  *%rax
  8004207153:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800420715a:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207161:	00 00 00 
  8004207164:	48 8b 00             	mov    (%rax),%rax
  8004207167:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420716e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207172:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207176:	66 83 f8 01          	cmp    $0x1,%ax
  800420717a:	74 35                	je     80042071b1 <page_check+0x15a5>
  800420717c:	48 b9 e1 9c 21 04 80 	movabs $0x8004219ce1,%rcx
  8004207183:	00 00 00 
  8004207186:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420718d:	00 00 00 
  8004207190:	be 83 05 00 00       	mov    $0x583,%esi
  8004207195:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420719c:	00 00 00 
  800420719f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a4:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042071ab:	00 00 00 
  80042071ae:	41 ff d0             	callq  *%r8
  80042071b1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071b8:	48 89 c7             	mov    %rax,%rdi
  80042071bb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071c2:	00 00 00 
  80042071c5:	ff d0                	callq  *%rax
  80042071c7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ce:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042071d2:	74 13                	je     80042071e7 <page_check+0x15db>
  80042071d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042071d8:	48 89 c7             	mov    %rax,%rdi
  80042071db:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  80042071e2:	00 00 00 
  80042071e5:	ff d0                	callq  *%rax
  80042071e7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071ee:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042071f2:	74 13                	je     8004207207 <page_check+0x15fb>
  80042071f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042071f8:	48 89 c7             	mov    %rax,%rdi
  80042071fb:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207202:	00 00 00 
  8004207205:	ff d0                	callq  *%rax
  8004207207:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420720e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004207212:	74 13                	je     8004207227 <page_check+0x161b>
  8004207214:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207218:	48 89 c7             	mov    %rax,%rdi
  800420721b:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207222:	00 00 00 
  8004207225:	ff d0                	callq  *%rax
  8004207227:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  800420722e:	00 40 06 00 
  8004207232:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207239:	00 00 00 
  800420723c:	48 8b 00             	mov    (%rax),%rax
  800420723f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207246:	ba 01 00 00 00       	mov    $0x1,%edx
  800420724b:	48 89 ce             	mov    %rcx,%rsi
  800420724e:	48 89 c7             	mov    %rax,%rdi
  8004207251:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207258:	00 00 00 
  800420725b:	ff d0                	callq  *%rax
  800420725d:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207264:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420726b:	00 00 00 
  800420726e:	48 8b 00             	mov    (%rax),%rax
  8004207271:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207278:	48 c1 ea 27          	shr    $0x27,%rdx
  800420727c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004207282:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207286:	48 01 d0             	add    %rdx,%rax
  8004207289:	48 8b 00             	mov    (%rax),%rax
  800420728c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207292:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207299:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072a0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  80042072aa:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  80042072b0:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042072b7:	00 00 00 
  80042072ba:	48 8b 00             	mov    (%rax),%rax
  80042072bd:	48 39 c2             	cmp    %rax,%rdx
  80042072c0:	72 35                	jb     80042072f7 <page_check+0x16eb>
  80042072c2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072c9:	48 89 c1             	mov    %rax,%rcx
  80042072cc:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  80042072d3:	00 00 00 
  80042072d6:	be 8b 05 00 00       	mov    $0x58b,%esi
  80042072db:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042072e2:	00 00 00 
  80042072e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042072f1:	00 00 00 
  80042072f4:	41 ff d0             	callq  *%r8
  80042072f7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042072fe:	00 00 00 
  8004207301:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207308:	48 01 d0             	add    %rdx,%rax
  800420730b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420730f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207316:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420731a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420731f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207326:	00 
  8004207327:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420732b:	48 01 d0             	add    %rdx,%rax
  800420732e:	48 8b 00             	mov    (%rax),%rax
  8004207331:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207337:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420733e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207345:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207349:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420734f:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207355:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420735c:	00 00 00 
  800420735f:	48 8b 00             	mov    (%rax),%rax
  8004207362:	48 39 c2             	cmp    %rax,%rdx
  8004207365:	72 35                	jb     800420739c <page_check+0x1790>
  8004207367:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420736e:	48 89 c1             	mov    %rax,%rcx
  8004207371:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004207378:	00 00 00 
  800420737b:	be 8c 05 00 00       	mov    $0x58c,%esi
  8004207380:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207387:	00 00 00 
  800420738a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420738f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207396:	00 00 00 
  8004207399:	41 ff d0             	callq  *%r8
  800420739c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042073a3:	00 00 00 
  80042073a6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042073ad:	48 01 d0             	add    %rdx,%rax
  80042073b0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042073b4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042073bb:	48 c1 e8 15          	shr    $0x15,%rax
  80042073bf:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042073c4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042073cb:	00 
  80042073cc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042073d0:	48 01 d0             	add    %rdx,%rax
  80042073d3:	48 8b 00             	mov    (%rax),%rax
  80042073d6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073dc:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042073e3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042073ea:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073ee:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042073f4:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042073fa:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207401:	00 00 00 
  8004207404:	48 8b 00             	mov    (%rax),%rax
  8004207407:	48 39 c2             	cmp    %rax,%rdx
  800420740a:	72 35                	jb     8004207441 <page_check+0x1835>
  800420740c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207413:	48 89 c1             	mov    %rax,%rcx
  8004207416:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  800420741d:	00 00 00 
  8004207420:	be 8d 05 00 00       	mov    $0x58d,%esi
  8004207425:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420742c:	00 00 00 
  800420742f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207434:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420743b:	00 00 00 
  800420743e:	41 ff d0             	callq  *%r8
  8004207441:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207448:	00 00 00 
  800420744b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207452:	48 01 d0             	add    %rdx,%rax
  8004207455:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800420745c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207463:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207467:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420746c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207473:	00 
  8004207474:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420747b:	48 01 c2             	add    %rax,%rdx
  800420747e:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207485:	48 39 c2             	cmp    %rax,%rdx
  8004207488:	74 35                	je     80042074bf <page_check+0x18b3>
  800420748a:	48 b9 77 9d 21 04 80 	movabs $0x8004219d77,%rcx
  8004207491:	00 00 00 
  8004207494:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420749b:	00 00 00 
  800420749e:	be 8e 05 00 00       	mov    $0x58e,%esi
  80042074a3:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042074aa:	00 00 00 
  80042074ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074b2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042074b9:	00 00 00 
  80042074bc:	41 ff d0             	callq  *%r8
  80042074bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042074c3:	48 89 c7             	mov    %rax,%rdi
  80042074c6:	48 b8 f9 1c 20 04 80 	movabs $0x8004201cf9,%rax
  80042074cd:	00 00 00 
  80042074d0:	ff d0                	callq  *%rax
  80042074d2:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042074d7:	be ff 00 00 00       	mov    $0xff,%esi
  80042074dc:	48 89 c7             	mov    %rax,%rdi
  80042074df:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042074e6:	00 00 00 
  80042074e9:	ff d0                	callq  *%rax
  80042074eb:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042074f2:	00 00 00 
  80042074f5:	48 8b 00             	mov    (%rax),%rax
  80042074f8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042074fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004207502:	48 89 c7             	mov    %rax,%rdi
  8004207505:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  800420750c:	00 00 00 
  800420750f:	ff d0                	callq  *%rax
  8004207511:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207518:	00 00 00 
  800420751b:	48 8b 00             	mov    (%rax),%rax
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207527:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  800420752e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207535:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207539:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800420753f:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207545:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420754c:	00 00 00 
  800420754f:	48 8b 00             	mov    (%rax),%rax
  8004207552:	48 39 c2             	cmp    %rax,%rdx
  8004207555:	72 35                	jb     800420758c <page_check+0x1980>
  8004207557:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420755e:	48 89 c1             	mov    %rax,%rcx
  8004207561:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  8004207568:	00 00 00 
  800420756b:	be 93 05 00 00       	mov    $0x593,%esi
  8004207570:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207577:	00 00 00 
  800420757a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420757f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207586:	00 00 00 
  8004207589:	41 ff d0             	callq  *%r8
  800420758c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207593:	00 00 00 
  8004207596:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420759d:	48 01 d0             	add    %rdx,%rax
  80042075a0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042075a4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042075a8:	48 8b 00             	mov    (%rax),%rax
  80042075ab:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042075b1:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042075b8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075bf:	48 c1 e8 0c          	shr    $0xc,%rax
  80042075c3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042075c9:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042075cf:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042075d6:	00 00 00 
  80042075d9:	48 8b 00             	mov    (%rax),%rax
  80042075dc:	48 39 c2             	cmp    %rax,%rdx
  80042075df:	72 35                	jb     8004207616 <page_check+0x1a0a>
  80042075e1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075e8:	48 89 c1             	mov    %rax,%rcx
  80042075eb:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  80042075f2:	00 00 00 
  80042075f5:	be 94 05 00 00       	mov    $0x594,%esi
  80042075fa:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207601:	00 00 00 
  8004207604:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207609:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207610:	00 00 00 
  8004207613:	41 ff d0             	callq  *%r8
  8004207616:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420761d:	00 00 00 
  8004207620:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207627:	48 01 d0             	add    %rdx,%rax
  800420762a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420762e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004207632:	48 8b 00             	mov    (%rax),%rax
  8004207635:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420763b:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004207642:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207649:	48 c1 e8 0c          	shr    $0xc,%rax
  800420764d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  8004207653:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207659:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207660:	00 00 00 
  8004207663:	48 8b 00             	mov    (%rax),%rax
  8004207666:	48 39 c2             	cmp    %rax,%rdx
  8004207669:	72 35                	jb     80042076a0 <page_check+0x1a94>
  800420766b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207672:	48 89 c1             	mov    %rax,%rcx
  8004207675:	48 ba e8 90 21 04 80 	movabs $0x80042190e8,%rdx
  800420767c:	00 00 00 
  800420767f:	be 95 05 00 00       	mov    $0x595,%esi
  8004207684:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  800420768b:	00 00 00 
  800420768e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207693:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420769a:	00 00 00 
  800420769d:	41 ff d0             	callq  *%r8
  80042076a0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042076a7:	00 00 00 
  80042076aa:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042076b1:	48 01 d0             	add    %rdx,%rax
  80042076b4:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042076bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042076c2:	eb 58                	jmp    800420771c <page_check+0x1b10>
  80042076c4:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  80042076cb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042076ce:	48 63 d2             	movslq %edx,%rdx
  80042076d1:	48 c1 e2 03          	shl    $0x3,%rdx
  80042076d5:	48 01 d0             	add    %rdx,%rax
  80042076d8:	48 8b 00             	mov    (%rax),%rax
  80042076db:	83 e0 01             	and    $0x1,%eax
  80042076de:	48 85 c0             	test   %rax,%rax
  80042076e1:	74 35                	je     8004207718 <page_check+0x1b0c>
  80042076e3:	48 b9 8f 9d 21 04 80 	movabs $0x8004219d8f,%rcx
  80042076ea:	00 00 00 
  80042076ed:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042076f4:	00 00 00 
  80042076f7:	be 97 05 00 00       	mov    $0x597,%esi
  80042076fc:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207703:	00 00 00 
  8004207706:	b8 00 00 00 00       	mov    $0x0,%eax
  800420770b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207712:	00 00 00 
  8004207715:	41 ff d0             	callq  *%r8
  8004207718:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420771c:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  8004207723:	7e 9f                	jle    80042076c4 <page_check+0x1ab8>
  8004207725:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420772c:	00 00 00 
  800420772f:	48 8b 00             	mov    (%rax),%rax
  8004207732:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207739:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004207740:	00 00 00 
  8004207743:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207747:	48 89 10             	mov    %rdx,(%rax)
  800420774a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420774e:	48 89 c7             	mov    %rax,%rdi
  8004207751:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004207758:	00 00 00 
  800420775b:	ff d0                	callq  *%rax
  800420775d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207761:	48 89 c7             	mov    %rax,%rdi
  8004207764:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420776b:	00 00 00 
  800420776e:	ff d0                	callq  *%rax
  8004207770:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207774:	48 89 c7             	mov    %rax,%rdi
  8004207777:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  800420777e:	00 00 00 
  8004207781:	ff d0                	callq  *%rax
  8004207783:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207787:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420778b:	66 85 c0             	test   %ax,%ax
  800420778e:	74 35                	je     80042077c5 <page_check+0x1bb9>
  8004207790:	48 b9 a6 9d 21 04 80 	movabs $0x8004219da6,%rcx
  8004207797:	00 00 00 
  800420779a:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042077a1:	00 00 00 
  80042077a4:	be a3 05 00 00       	mov    $0x5a3,%esi
  80042077a9:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042077b0:	00 00 00 
  80042077b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077b8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042077bf:	00 00 00 
  80042077c2:	41 ff d0             	callq  *%r8
  80042077c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042077c9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042077cd:	66 85 c0             	test   %ax,%ax
  80042077d0:	74 35                	je     8004207807 <page_check+0x1bfb>
  80042077d2:	48 b9 66 9d 21 04 80 	movabs $0x8004219d66,%rcx
  80042077d9:	00 00 00 
  80042077dc:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042077e3:	00 00 00 
  80042077e6:	be a4 05 00 00       	mov    $0x5a4,%esi
  80042077eb:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042077f2:	00 00 00 
  80042077f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077fa:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207801:	00 00 00 
  8004207804:	41 ff d0             	callq  *%r8
  8004207807:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420780b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420780f:	66 85 c0             	test   %ax,%ax
  8004207812:	74 35                	je     8004207849 <page_check+0x1c3d>
  8004207814:	48 b9 b7 9d 21 04 80 	movabs $0x8004219db7,%rcx
  800420781b:	00 00 00 
  800420781e:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207825:	00 00 00 
  8004207828:	be a5 05 00 00       	mov    $0x5a5,%esi
  800420782d:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207834:	00 00 00 
  8004207837:	b8 00 00 00 00       	mov    $0x0,%eax
  800420783c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207843:	00 00 00 
  8004207846:	41 ff d0             	callq  *%r8
  8004207849:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420784d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207851:	66 85 c0             	test   %ax,%ax
  8004207854:	74 35                	je     800420788b <page_check+0x1c7f>
  8004207856:	48 b9 c8 9d 21 04 80 	movabs $0x8004219dc8,%rcx
  800420785d:	00 00 00 
  8004207860:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207867:	00 00 00 
  800420786a:	be a6 05 00 00       	mov    $0x5a6,%esi
  800420786f:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207876:	00 00 00 
  8004207879:	b8 00 00 00 00       	mov    $0x0,%eax
  800420787e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207885:	00 00 00 
  8004207888:	41 ff d0             	callq  *%r8
  800420788b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420788f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207893:	66 85 c0             	test   %ax,%ax
  8004207896:	74 35                	je     80042078cd <page_check+0x1cc1>
  8004207898:	48 b9 d9 9d 21 04 80 	movabs $0x8004219dd9,%rcx
  800420789f:	00 00 00 
  80042078a2:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042078a9:	00 00 00 
  80042078ac:	be a7 05 00 00       	mov    $0x5a7,%esi
  80042078b1:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042078b8:	00 00 00 
  80042078bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c0:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042078c7:	00 00 00 
  80042078ca:	41 ff d0             	callq  *%r8
  80042078cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042078d1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042078d5:	66 85 c0             	test   %ax,%ax
  80042078d8:	74 35                	je     800420790f <page_check+0x1d03>
  80042078da:	48 b9 ea 9d 21 04 80 	movabs $0x8004219dea,%rcx
  80042078e1:	00 00 00 
  80042078e4:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042078eb:	00 00 00 
  80042078ee:	be a8 05 00 00       	mov    $0x5a8,%esi
  80042078f3:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042078fa:	00 00 00 
  80042078fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207902:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207909:	00 00 00 
  800420790c:	41 ff d0             	callq  *%r8
  800420790f:	be 01 10 00 00       	mov    $0x1001,%esi
  8004207914:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207919:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004207920:	00 00 00 
  8004207923:	ff d0                	callq  *%rax
  8004207925:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  800420792c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004207931:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207936:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  800420793d:	00 00 00 
  8004207940:	ff d0                	callq  *%rax
  8004207942:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207949:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207950:	00 00 00 
  8004207953:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  800420795a:	76 1d                	jbe    8004207979 <page_check+0x1d6d>
  800420795c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207963:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420796a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207971:	00 00 00 
  8004207974:	48 39 c2             	cmp    %rax,%rdx
  8004207977:	76 35                	jbe    80042079ae <page_check+0x1da2>
  8004207979:	48 b9 00 9e 21 04 80 	movabs $0x8004219e00,%rcx
  8004207980:	00 00 00 
  8004207983:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  800420798a:	00 00 00 
  800420798d:	be af 05 00 00       	mov    $0x5af,%esi
  8004207992:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207999:	00 00 00 
  800420799c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079a1:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042079a8:	00 00 00 
  80042079ab:	41 ff d0             	callq  *%r8
  80042079ae:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042079b5:	00 00 00 
  80042079b8:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  80042079bf:	76 1d                	jbe    80042079de <page_check+0x1dd2>
  80042079c1:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042079c8:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  80042079cf:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  80042079d6:	00 00 00 
  80042079d9:	48 39 c2             	cmp    %rax,%rdx
  80042079dc:	76 35                	jbe    8004207a13 <page_check+0x1e07>
  80042079de:	48 b9 28 9e 21 04 80 	movabs $0x8004219e28,%rcx
  80042079e5:	00 00 00 
  80042079e8:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  80042079ef:	00 00 00 
  80042079f2:	be b0 05 00 00       	mov    $0x5b0,%esi
  80042079f7:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  80042079fe:	00 00 00 
  8004207a01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a06:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a0d:	00 00 00 
  8004207a10:	41 ff d0             	callq  *%r8
  8004207a13:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a1a:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a1f:	48 85 c0             	test   %rax,%rax
  8004207a22:	75 11                	jne    8004207a35 <page_check+0x1e29>
  8004207a24:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207a2b:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a30:	48 85 c0             	test   %rax,%rax
  8004207a33:	74 35                	je     8004207a6a <page_check+0x1e5e>
  8004207a35:	48 b9 50 9e 21 04 80 	movabs $0x8004219e50,%rcx
  8004207a3c:	00 00 00 
  8004207a3f:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207a46:	00 00 00 
  8004207a49:	be b2 05 00 00       	mov    $0x5b2,%esi
  8004207a4e:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207a55:	00 00 00 
  8004207a58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a5d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207a64:	00 00 00 
  8004207a67:	41 ff d0             	callq  *%r8
  8004207a6a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a71:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207a77:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207a7e:	76 35                	jbe    8004207ab5 <page_check+0x1ea9>
  8004207a80:	48 b9 77 9e 21 04 80 	movabs $0x8004219e77,%rcx
  8004207a87:	00 00 00 
  8004207a8a:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207a91:	00 00 00 
  8004207a94:	be b4 05 00 00       	mov    $0x5b4,%esi
  8004207a99:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207aa0:	00 00 00 
  8004207aa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207aa8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207aaf:	00 00 00 
  8004207ab2:	41 ff d0             	callq  *%r8
  8004207ab5:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207abc:	00 00 00 
  8004207abf:	48 8b 00             	mov    (%rax),%rax
  8004207ac2:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207ac9:	48 89 d6             	mov    %rdx,%rsi
  8004207acc:	48 89 c7             	mov    %rax,%rdi
  8004207acf:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ad6:	00 00 00 
  8004207ad9:	ff d0                	callq  *%rax
  8004207adb:	48 85 c0             	test   %rax,%rax
  8004207ade:	74 35                	je     8004207b15 <page_check+0x1f09>
  8004207ae0:	48 b9 90 9e 21 04 80 	movabs $0x8004219e90,%rcx
  8004207ae7:	00 00 00 
  8004207aea:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207af1:	00 00 00 
  8004207af4:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207af9:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207b00:	00 00 00 
  8004207b03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b0f:	00 00 00 
  8004207b12:	41 ff d0             	callq  *%r8
  8004207b15:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207b1c:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207b23:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207b2a:	00 00 00 
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	48 89 d6             	mov    %rdx,%rsi
  8004207b33:	48 89 c7             	mov    %rax,%rdi
  8004207b36:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207b3d:	00 00 00 
  8004207b40:	ff d0                	callq  *%rax
  8004207b42:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207b48:	74 35                	je     8004207b7f <page_check+0x1f73>
  8004207b4a:	48 b9 b8 9e 21 04 80 	movabs $0x8004219eb8,%rcx
  8004207b51:	00 00 00 
  8004207b54:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207b5b:	00 00 00 
  8004207b5e:	be b8 05 00 00       	mov    $0x5b8,%esi
  8004207b63:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207b6a:	00 00 00 
  8004207b6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b72:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207b79:	00 00 00 
  8004207b7c:	41 ff d0             	callq  *%r8
  8004207b7f:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207b86:	00 00 00 
  8004207b89:	48 8b 00             	mov    (%rax),%rax
  8004207b8c:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207b93:	48 89 d6             	mov    %rdx,%rsi
  8004207b96:	48 89 c7             	mov    %rax,%rdi
  8004207b99:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207ba0:	00 00 00 
  8004207ba3:	ff d0                	callq  *%rax
  8004207ba5:	48 85 c0             	test   %rax,%rax
  8004207ba8:	74 35                	je     8004207bdf <page_check+0x1fd3>
  8004207baa:	48 b9 e8 9e 21 04 80 	movabs $0x8004219ee8,%rcx
  8004207bb1:	00 00 00 
  8004207bb4:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207bbb:	00 00 00 
  8004207bbe:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207bc3:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207bca:	00 00 00 
  8004207bcd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bd2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207bd9:	00 00 00 
  8004207bdc:	41 ff d0             	callq  *%r8
  8004207bdf:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207be6:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207bed:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207bf4:	00 00 00 
  8004207bf7:	48 8b 00             	mov    (%rax),%rax
  8004207bfa:	48 89 d6             	mov    %rdx,%rsi
  8004207bfd:	48 89 c7             	mov    %rax,%rdi
  8004207c00:	48 b8 92 59 20 04 80 	movabs $0x8004205992,%rax
  8004207c07:	00 00 00 
  8004207c0a:	ff d0                	callq  *%rax
  8004207c0c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207c10:	74 35                	je     8004207c47 <page_check+0x203b>
  8004207c12:	48 b9 10 9f 21 04 80 	movabs $0x8004219f10,%rcx
  8004207c19:	00 00 00 
  8004207c1c:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207c23:	00 00 00 
  8004207c26:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207c2b:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207c32:	00 00 00 
  8004207c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c3a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207c41:	00 00 00 
  8004207c44:	41 ff d0             	callq  *%r8
  8004207c47:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207c4e:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207c55:	00 00 00 
  8004207c58:	48 8b 00             	mov    (%rax),%rax
  8004207c5b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c60:	48 89 ce             	mov    %rcx,%rsi
  8004207c63:	48 89 c7             	mov    %rax,%rdi
  8004207c66:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207c6d:	00 00 00 
  8004207c70:	ff d0                	callq  *%rax
  8004207c72:	48 8b 00             	mov    (%rax),%rax
  8004207c75:	83 e0 1a             	and    $0x1a,%eax
  8004207c78:	48 85 c0             	test   %rax,%rax
  8004207c7b:	75 35                	jne    8004207cb2 <page_check+0x20a6>
  8004207c7d:	48 b9 40 9f 21 04 80 	movabs $0x8004219f40,%rcx
  8004207c84:	00 00 00 
  8004207c87:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207c8e:	00 00 00 
  8004207c91:	be bc 05 00 00       	mov    $0x5bc,%esi
  8004207c96:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207c9d:	00 00 00 
  8004207ca0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207ca5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207cac:	00 00 00 
  8004207caf:	41 ff d0             	callq  *%r8
  8004207cb2:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207cb9:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207cc0:	00 00 00 
  8004207cc3:	48 8b 00             	mov    (%rax),%rax
  8004207cc6:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207ccb:	48 89 ce             	mov    %rcx,%rsi
  8004207cce:	48 89 c7             	mov    %rax,%rdi
  8004207cd1:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207cd8:	00 00 00 
  8004207cdb:	ff d0                	callq  *%rax
  8004207cdd:	48 8b 00             	mov    (%rax),%rax
  8004207ce0:	83 e0 04             	and    $0x4,%eax
  8004207ce3:	48 85 c0             	test   %rax,%rax
  8004207ce6:	74 35                	je     8004207d1d <page_check+0x2111>
  8004207ce8:	48 b9 88 9f 21 04 80 	movabs $0x8004219f88,%rcx
  8004207cef:	00 00 00 
  8004207cf2:	48 ba 61 91 21 04 80 	movabs $0x8004219161,%rdx
  8004207cf9:	00 00 00 
  8004207cfc:	be bd 05 00 00       	mov    $0x5bd,%esi
  8004207d01:	48 bf 76 91 21 04 80 	movabs $0x8004219176,%rdi
  8004207d08:	00 00 00 
  8004207d0b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d10:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207d17:	00 00 00 
  8004207d1a:	41 ff d0             	callq  *%r8
  8004207d1d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207d24:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207d2b:	00 00 00 
  8004207d2e:	48 8b 00             	mov    (%rax),%rax
  8004207d31:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d36:	48 89 ce             	mov    %rcx,%rsi
  8004207d39:	48 89 c7             	mov    %rax,%rdi
  8004207d3c:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d43:	00 00 00 
  8004207d46:	ff d0                	callq  *%rax
  8004207d48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d4f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207d56:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207d5c:	48 89 c1             	mov    %rax,%rcx
  8004207d5f:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207d66:	00 00 00 
  8004207d69:	48 8b 00             	mov    (%rax),%rax
  8004207d6c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d71:	48 89 ce             	mov    %rcx,%rsi
  8004207d74:	48 89 c7             	mov    %rax,%rdi
  8004207d77:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207d7e:	00 00 00 
  8004207d81:	ff d0                	callq  *%rax
  8004207d83:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d8a:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207d91:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207d98:	00 00 00 
  8004207d9b:	48 8b 00             	mov    (%rax),%rax
  8004207d9e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207da3:	48 89 ce             	mov    %rcx,%rsi
  8004207da6:	48 89 c7             	mov    %rax,%rdi
  8004207da9:	48 b8 55 31 20 04 80 	movabs $0x8004203155,%rax
  8004207db0:	00 00 00 
  8004207db3:	ff d0                	callq  *%rax
  8004207db5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207dbc:	48 bf bb 9f 21 04 80 	movabs $0x8004219fbb,%rdi
  8004207dc3:	00 00 00 
  8004207dc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dcb:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004207dd2:	00 00 00 
  8004207dd5:	ff d2                	callq  *%rdx
  8004207dd7:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207dde:	5b                   	pop    %rbx
  8004207ddf:	5d                   	pop    %rbp
  8004207de0:	c3                   	retq   

0000008004207de1 <page2ppn>:
  8004207de1:	55                   	push   %rbp
  8004207de2:	48 89 e5             	mov    %rsp,%rbp
  8004207de5:	48 83 ec 08          	sub    $0x8,%rsp
  8004207de9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ded:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207df1:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004207df8:	00 00 00 
  8004207dfb:	48 8b 00             	mov    (%rax),%rax
  8004207dfe:	48 29 c2             	sub    %rax,%rdx
  8004207e01:	48 89 d0             	mov    %rdx,%rax
  8004207e04:	48 c1 f8 04          	sar    $0x4,%rax
  8004207e08:	c9                   	leaveq 
  8004207e09:	c3                   	retq   

0000008004207e0a <page2pa>:
  8004207e0a:	55                   	push   %rbp
  8004207e0b:	48 89 e5             	mov    %rsp,%rbp
  8004207e0e:	48 83 ec 08          	sub    $0x8,%rsp
  8004207e12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e1a:	48 89 c7             	mov    %rax,%rdi
  8004207e1d:	48 b8 e1 7d 20 04 80 	movabs $0x8004207de1,%rax
  8004207e24:	00 00 00 
  8004207e27:	ff d0                	callq  *%rax
  8004207e29:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207e2d:	c9                   	leaveq 
  8004207e2e:	c3                   	retq   

0000008004207e2f <pa2page>:
  8004207e2f:	55                   	push   %rbp
  8004207e30:	48 89 e5             	mov    %rsp,%rbp
  8004207e33:	48 83 ec 10          	sub    $0x10,%rsp
  8004207e37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e3f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207e43:	48 89 c2             	mov    %rax,%rdx
  8004207e46:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207e4d:	00 00 00 
  8004207e50:	48 8b 00             	mov    (%rax),%rax
  8004207e53:	48 39 c2             	cmp    %rax,%rdx
  8004207e56:	72 2a                	jb     8004207e82 <pa2page+0x53>
  8004207e58:	48 ba d8 9f 21 04 80 	movabs $0x8004219fd8,%rdx
  8004207e5f:	00 00 00 
  8004207e62:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207e67:	48 bf f7 9f 21 04 80 	movabs $0x8004219ff7,%rdi
  8004207e6e:	00 00 00 
  8004207e71:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e76:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004207e7d:	00 00 00 
  8004207e80:	ff d1                	callq  *%rcx
  8004207e82:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004207e89:	00 00 00 
  8004207e8c:	48 8b 00             	mov    (%rax),%rax
  8004207e8f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207e93:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207e97:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207e9b:	48 01 d0             	add    %rdx,%rax
  8004207e9e:	c9                   	leaveq 
  8004207e9f:	c3                   	retq   

0000008004207ea0 <page2kva>:
  8004207ea0:	55                   	push   %rbp
  8004207ea1:	48 89 e5             	mov    %rsp,%rbp
  8004207ea4:	48 83 ec 20          	sub    $0x20,%rsp
  8004207ea8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207eb0:	48 89 c7             	mov    %rax,%rdi
  8004207eb3:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  8004207eba:	00 00 00 
  8004207ebd:	ff d0                	callq  *%rax
  8004207ebf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207ec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ec7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207ecb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207ece:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207ed1:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207ed8:	00 00 00 
  8004207edb:	48 8b 00             	mov    (%rax),%rax
  8004207ede:	48 39 c2             	cmp    %rax,%rdx
  8004207ee1:	72 32                	jb     8004207f15 <page2kva+0x75>
  8004207ee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ee7:	48 89 c1             	mov    %rax,%rcx
  8004207eea:	48 ba 08 a0 21 04 80 	movabs $0x800421a008,%rdx
  8004207ef1:	00 00 00 
  8004207ef4:	be 62 00 00 00       	mov    $0x62,%esi
  8004207ef9:	48 bf f7 9f 21 04 80 	movabs $0x8004219ff7,%rdi
  8004207f00:	00 00 00 
  8004207f03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f08:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004207f0f:	00 00 00 
  8004207f12:	41 ff d0             	callq  *%r8
  8004207f15:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207f1c:	00 00 00 
  8004207f1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207f23:	48 01 d0             	add    %rdx,%rax
  8004207f26:	c9                   	leaveq 
  8004207f27:	c3                   	retq   

0000008004207f28 <unlock_kernel>:
  8004207f28:	55                   	push   %rbp
  8004207f29:	48 89 e5             	mov    %rsp,%rbp
  8004207f2c:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  8004207f33:	00 00 00 
  8004207f36:	48 b8 e4 77 21 04 80 	movabs $0x80042177e4,%rax
  8004207f3d:	00 00 00 
  8004207f40:	ff d0                	callq  *%rax
  8004207f42:	f3 90                	pause  
  8004207f44:	5d                   	pop    %rbp
  8004207f45:	c3                   	retq   

0000008004207f46 <envid2env>:
  8004207f46:	55                   	push   %rbp
  8004207f47:	48 89 e5             	mov    %rsp,%rbp
  8004207f4a:	53                   	push   %rbx
  8004207f4b:	48 83 ec 28          	sub    $0x28,%rsp
  8004207f4f:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207f52:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207f56:	89 d0                	mov    %edx,%eax
  8004207f58:	88 45 d8             	mov    %al,-0x28(%rbp)
  8004207f5b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207f5f:	75 41                	jne    8004207fa2 <envid2env+0x5c>
  8004207f61:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004207f68:	00 00 00 
  8004207f6b:	ff d0                	callq  *%rax
  8004207f6d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004207f74:	00 00 00 
  8004207f77:	48 98                	cltq   
  8004207f79:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f7d:	48 89 c1             	mov    %rax,%rcx
  8004207f80:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f84:	48 01 c8             	add    %rcx,%rax
  8004207f87:	48 01 d0             	add    %rdx,%rax
  8004207f8a:	48 83 c0 08          	add    $0x8,%rax
  8004207f8e:	48 8b 10             	mov    (%rax),%rdx
  8004207f91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f95:	48 89 10             	mov    %rdx,(%rax)
  8004207f98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f9d:	e9 fd 00 00 00       	jmpq   800420809f <envid2env+0x159>
  8004207fa2:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004207fa9:	00 00 00 
  8004207fac:	48 8b 10             	mov    (%rax),%rdx
  8004207faf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207fb2:	48 98                	cltq   
  8004207fb4:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207fb9:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fc0:	48 01 d0             	add    %rdx,%rax
  8004207fc3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004207fc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207fcb:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207fd1:	85 c0                	test   %eax,%eax
  8004207fd3:	74 0f                	je     8004207fe4 <envid2env+0x9e>
  8004207fd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207fd9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207fdf:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207fe2:	74 15                	je     8004207ff9 <envid2env+0xb3>
  8004207fe4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207fe8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207fef:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207ff4:	e9 a6 00 00 00       	jmpq   800420809f <envid2env+0x159>
  8004207ff9:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207ffd:	0f 84 8c 00 00 00    	je     800420808f <envid2env+0x149>
  8004208003:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420800a:	00 00 00 
  800420800d:	ff d0                	callq  *%rax
  800420800f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208016:	00 00 00 
  8004208019:	48 98                	cltq   
  800420801b:	48 c1 e0 03          	shl    $0x3,%rax
  800420801f:	48 89 c1             	mov    %rax,%rcx
  8004208022:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208026:	48 01 c8             	add    %rcx,%rax
  8004208029:	48 01 d0             	add    %rdx,%rax
  800420802c:	48 83 c0 08          	add    $0x8,%rax
  8004208030:	48 8b 00             	mov    (%rax),%rax
  8004208033:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004208037:	74 56                	je     800420808f <envid2env+0x149>
  8004208039:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420803d:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004208043:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420804a:	00 00 00 
  800420804d:	ff d0                	callq  *%rax
  800420804f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208056:	00 00 00 
  8004208059:	48 98                	cltq   
  800420805b:	48 c1 e0 03          	shl    $0x3,%rax
  800420805f:	48 89 c1             	mov    %rax,%rcx
  8004208062:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208066:	48 01 c8             	add    %rcx,%rax
  8004208069:	48 01 d0             	add    %rdx,%rax
  800420806c:	48 83 c0 08          	add    $0x8,%rax
  8004208070:	48 8b 00             	mov    (%rax),%rax
  8004208073:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208079:	39 c3                	cmp    %eax,%ebx
  800420807b:	74 12                	je     800420808f <envid2env+0x149>
  800420807d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208081:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004208088:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  800420808d:	eb 10                	jmp    800420809f <envid2env+0x159>
  800420808f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208093:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208097:	48 89 10             	mov    %rdx,(%rax)
  800420809a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420809f:	48 83 c4 28          	add    $0x28,%rsp
  80042080a3:	5b                   	pop    %rbx
  80042080a4:	5d                   	pop    %rbp
  80042080a5:	c3                   	retq   

00000080042080a6 <env_init>:
  80042080a6:	55                   	push   %rbp
  80042080a7:	48 89 e5             	mov    %rsp,%rbp
  80042080aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042080ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042080b5:	eb 6d                	jmp    8004208124 <env_init+0x7e>
  80042080b7:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042080be:	00 00 00 
  80042080c1:	48 8b 10             	mov    (%rax),%rdx
  80042080c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042080c7:	48 98                	cltq   
  80042080c9:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  80042080d0:	48 01 d0             	add    %rdx,%rax
  80042080d3:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042080da:	00 00 00 
  80042080dd:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042080e4:	00 00 00 
  80042080e7:	48 8b 10             	mov    (%rax),%rdx
  80042080ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042080ed:	48 98                	cltq   
  80042080ef:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  80042080f6:	48 01 c2             	add    %rax,%rdx
  80042080f9:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208100:	00 00 00 
  8004208103:	48 8b 08             	mov    (%rax),%rcx
  8004208106:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208109:	48 98                	cltq   
  800420810b:	48 83 c0 01          	add    $0x1,%rax
  800420810f:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208116:	48 01 c8             	add    %rcx,%rax
  8004208119:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
  8004208120:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004208124:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420812b:	7e 8a                	jle    80042080b7 <env_init+0x11>
  800420812d:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208134:	00 00 00 
  8004208137:	48 8b 00             	mov    (%rax),%rax
  800420813a:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004208140:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208147:	00 00 00 00 
  800420814b:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208152:	00 00 00 
  8004208155:	48 8b 10             	mov    (%rax),%rdx
  8004208158:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  800420815f:	00 00 00 
  8004208162:	48 89 10             	mov    %rdx,(%rax)
  8004208165:	48 b8 73 81 20 04 80 	movabs $0x8004208173,%rax
  800420816c:	00 00 00 
  800420816f:	ff d0                	callq  *%rax
  8004208171:	c9                   	leaveq 
  8004208172:	c3                   	retq   

0000008004208173 <env_init_percpu>:
  8004208173:	55                   	push   %rbp
  8004208174:	48 89 e5             	mov    %rsp,%rbp
  8004208177:	53                   	push   %rbx
  8004208178:	48 83 ec 10          	sub    $0x10,%rsp
  800420817c:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  8004208183:	00 00 00 
  8004208186:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
  800420818a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420818e:	0f 01 10             	lgdt   (%rax)
  8004208191:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208196:	8e e8                	mov    %eax,%gs
  8004208198:	b8 23 00 00 00       	mov    $0x23,%eax
  800420819d:	8e e0                	mov    %eax,%fs
  800420819f:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081a4:	8e c0                	mov    %eax,%es
  80042081a6:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081ab:	8e d8                	mov    %eax,%ds
  80042081ad:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081b2:	8e d0                	mov    %eax,%ss
  80042081b4:	b8 08 00 00 00       	mov    $0x8,%eax
  80042081b9:	89 c3                	mov    %eax,%ebx
  80042081bb:	53                   	push   %rbx
  80042081bc:	48 b8 c9 81 20 04 80 	movabs $0x80042081c9,%rax
  80042081c3:	00 00 00 
  80042081c6:	50                   	push   %rax
  80042081c7:	48 cb                	lretq  
  80042081c9:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
	__asm __volatile("lldt %0" : : "r" (sel));
  80042081cf:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  80042081d3:	0f 00 d0             	lldt   %ax
  80042081d6:	48 83 c4 10          	add    $0x10,%rsp
  80042081da:	5b                   	pop    %rbx
  80042081db:	5d                   	pop    %rbp
  80042081dc:	c3                   	retq   

00000080042081dd <env_setup_vm>:
  80042081dd:	55                   	push   %rbp
  80042081de:	48 89 e5             	mov    %rsp,%rbp
  80042081e1:	48 83 ec 20          	sub    $0x20,%rsp
  80042081e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042081e9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042081f0:	00 
  80042081f1:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081f6:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042081fd:	00 00 00 
  8004208200:	ff d0                	callq  *%rax
  8004208202:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004208206:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420820b:	75 0a                	jne    8004208217 <env_setup_vm+0x3a>
  800420820d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208212:	e9 bc 00 00 00       	jmpq   80042082d3 <env_setup_vm+0xf6>
  8004208217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420821b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420821f:	8d 50 01             	lea    0x1(%rax),%edx
  8004208222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208226:	66 89 50 08          	mov    %dx,0x8(%rax)
  800420822a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420822e:	48 89 c7             	mov    %rax,%rdi
  8004208231:	48 b8 a0 7e 20 04 80 	movabs $0x8004207ea0,%rax
  8004208238:	00 00 00 
  800420823b:	ff d0                	callq  *%rax
  800420823d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208241:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
  8004208248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420824c:	48 89 c7             	mov    %rax,%rdi
  800420824f:	48 b8 0a 7e 20 04 80 	movabs $0x8004207e0a,%rax
  8004208256:	00 00 00 
  8004208259:	ff d0                	callq  *%rax
  800420825b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420825f:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)
  8004208266:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420826a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208271:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208276:	be 00 00 00 00       	mov    $0x0,%esi
  800420827b:	48 89 c7             	mov    %rax,%rdi
  800420827e:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  8004208285:	00 00 00 
  8004208288:	ff d0                	callq  *%rax
  800420828a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420828e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208295:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208299:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042082a0:	00 00 00 
  80042082a3:	48 8b 00             	mov    (%rax),%rax
  80042082a6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042082aa:	48 89 02             	mov    %rax,(%rdx)
  80042082ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082b1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082b8:	48 8d 50 10          	lea    0x10(%rax),%rdx
  80042082bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082c0:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042082c7:	48 83 c8 05          	or     $0x5,%rax
  80042082cb:	48 89 02             	mov    %rax,(%rdx)
  80042082ce:	b8 00 00 00 00       	mov    $0x0,%eax
  80042082d3:	c9                   	leaveq 
  80042082d4:	c3                   	retq   

00000080042082d5 <env_alloc>:
  80042082d5:	55                   	push   %rbp
  80042082d6:	48 89 e5             	mov    %rsp,%rbp
  80042082d9:	48 83 ec 30          	sub    $0x30,%rsp
  80042082dd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042082e1:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  80042082e4:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  80042082eb:	00 00 00 
  80042082ee:	48 8b 00             	mov    (%rax),%rax
  80042082f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042082f5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042082fa:	75 0a                	jne    8004208306 <env_alloc+0x31>
  80042082fc:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004208301:	e9 69 01 00 00       	jmpq   800420846f <env_alloc+0x19a>
  8004208306:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420830a:	48 89 c7             	mov    %rax,%rdi
  800420830d:	48 b8 dd 81 20 04 80 	movabs $0x80042081dd,%rax
  8004208314:	00 00 00 
  8004208317:	ff d0                	callq  *%rax
  8004208319:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420831c:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208320:	79 08                	jns    800420832a <env_alloc+0x55>
  8004208322:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208325:	e9 45 01 00 00       	jmpq   800420846f <env_alloc+0x19a>
  800420832a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420832e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208334:	05 00 10 00 00       	add    $0x1000,%eax
  8004208339:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  800420833e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208341:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208345:	7f 07                	jg     800420834e <env_alloc+0x79>
  8004208347:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
  800420834e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208352:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208359:	00 00 00 
  800420835c:	48 8b 00             	mov    (%rax),%rax
  800420835f:	48 29 c2             	sub    %rax,%rdx
  8004208362:	48 89 d0             	mov    %rdx,%rax
  8004208365:	48 c1 f8 03          	sar    $0x3,%rax
  8004208369:	48 89 c2             	mov    %rax,%rdx
  800420836c:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  8004208373:	fa a4 4f 
  8004208376:	48 0f af c2          	imul   %rdx,%rax
  800420837a:	0b 45 fc             	or     -0x4(%rbp),%eax
  800420837d:	89 c2                	mov    %eax,%edx
  800420837f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208383:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  8004208389:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420838d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208390:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
  8004208396:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420839a:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  80042083a1:	00 00 00 
  80042083a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083a8:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042083af:	00 00 00 
  80042083b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083b6:	c7 80 d8 00 00 00 00 	movl   $0x0,0xd8(%rax)
  80042083bd:	00 00 00 
  80042083c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083c4:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042083c9:	be 00 00 00 00       	mov    $0x0,%esi
  80042083ce:	48 89 c7             	mov    %rax,%rdi
  80042083d1:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042083d8:	00 00 00 
  80042083db:	ff d0                	callq  *%rax
  80042083dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083e1:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  80042083e8:	23 00 
  80042083ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083ee:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
  80042083f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083f8:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  80042083ff:	23 00 
  8004208401:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208405:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  800420840a:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
  8004208411:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208415:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  800420841c:	1b 00 
  800420841e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208422:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208429:	00 02 00 00 
  800420842d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208431:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208438:	00 00 00 00 
  800420843c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208440:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
  8004208447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420844b:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208452:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208459:	00 00 00 
  800420845c:	48 89 10             	mov    %rdx,(%rax)
  800420845f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208463:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208467:	48 89 10             	mov    %rdx,(%rax)
  800420846a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420846f:	c9                   	leaveq 
  8004208470:	c3                   	retq   

0000008004208471 <region_alloc>:
  8004208471:	55                   	push   %rbp
  8004208472:	48 89 e5             	mov    %rsp,%rbp
  8004208475:	48 83 ec 40          	sub    $0x40,%rsp
  8004208479:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420847d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208481:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004208485:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208489:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420848d:	48 01 d0             	add    %rdx,%rax
  8004208490:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004208494:	e9 c8 00 00 00       	jmpq   8004208561 <region_alloc+0xf0>
  8004208499:	bf 00 00 00 00       	mov    $0x0,%edi
  800420849e:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  80042084a5:	00 00 00 
  80042084a8:	ff d0                	callq  *%rax
  80042084aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042084ae:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042084b3:	75 30                	jne    80042084e5 <region_alloc+0x74>
  80042084b5:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  80042084ba:	48 ba 30 a0 21 04 80 	movabs $0x800421a030,%rdx
  80042084c1:	00 00 00 
  80042084c4:	be c9 01 00 00       	mov    $0x1c9,%esi
  80042084c9:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  80042084d0:	00 00 00 
  80042084d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042084d8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042084df:	00 00 00 
  80042084e2:	41 ff d0             	callq  *%r8
  80042084e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042084e9:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042084f0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042084f4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042084f8:	b9 07 00 00 00       	mov    $0x7,%ecx
  80042084fd:	48 89 c7             	mov    %rax,%rdi
  8004208500:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  8004208507:	00 00 00 
  800420850a:	ff d0                	callq  *%rax
  800420850c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420850f:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208513:	79 30                	jns    8004208545 <region_alloc+0xd4>
  8004208515:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208518:	89 c1                	mov    %eax,%ecx
  800420851a:	48 ba 68 a0 21 04 80 	movabs $0x800421a068,%rdx
  8004208521:	00 00 00 
  8004208524:	be cd 01 00 00       	mov    $0x1cd,%esi
  8004208529:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  8004208530:	00 00 00 
  8004208533:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208538:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420853f:	00 00 00 
  8004208542:	41 ff d0             	callq  *%r8
  8004208545:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208549:	48 05 00 10 00 00    	add    $0x1000,%rax
  800420854f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208553:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208557:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420855d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004208561:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208565:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208569:	0f 82 2a ff ff ff    	jb     8004208499 <region_alloc+0x28>
  800420856f:	c9                   	leaveq 
  8004208570:	c3                   	retq   

0000008004208571 <load_icode>:
  8004208571:	55                   	push   %rbp
  8004208572:	48 89 e5             	mov    %rsp,%rbp
  8004208575:	53                   	push   %rbx
  8004208576:	48 83 ec 78          	sub    $0x78,%rsp
  800420857a:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  800420857e:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004208582:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208586:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420858a:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420858f:	0f 84 6f 03 00 00    	je     8004208904 <load_icode+0x393>
  8004208595:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208599:	8b 00                	mov    (%rax),%eax
  800420859b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  80042085a0:	0f 85 5e 03 00 00    	jne    8004208904 <load_icode+0x393>
  80042085a6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042085aa:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042085b1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042085b5:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042085bc:	00 00 00 
  80042085bf:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042085c3:	77 32                	ja     80042085f7 <load_icode+0x86>
  80042085c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042085c9:	48 89 c1             	mov    %rax,%rcx
  80042085cc:	48 ba 90 a0 21 04 80 	movabs $0x800421a090,%rdx
  80042085d3:	00 00 00 
  80042085d6:	be f9 01 00 00       	mov    $0x1f9,%esi
  80042085db:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  80042085e2:	00 00 00 
  80042085e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042085ea:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042085f1:	00 00 00 
  80042085f4:	41 ff d0             	callq  *%r8
  80042085f7:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042085fe:	ff ff ff 
  8004208601:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208605:	48 01 d0             	add    %rdx,%rax
  8004208608:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420860c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208610:	0f 22 d8             	mov    %rax,%cr3
  8004208613:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208617:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800420861b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420861f:	48 01 d0             	add    %rdx,%rax
  8004208622:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208626:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420862a:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  800420862e:	0f b7 c0             	movzwl %ax,%eax
  8004208631:	48 c1 e0 03          	shl    $0x3,%rax
  8004208635:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420863c:	00 
  800420863d:	48 29 c2             	sub    %rax,%rdx
  8004208640:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208644:	48 01 d0             	add    %rdx,%rax
  8004208647:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420864b:	e9 bd 00 00 00       	jmpq   800420870d <load_icode+0x19c>
  8004208650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208654:	8b 00                	mov    (%rax),%eax
  8004208656:	83 f8 01             	cmp    $0x1,%eax
  8004208659:	0f 85 a9 00 00 00    	jne    8004208708 <load_icode+0x197>
  800420865f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208663:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420866b:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420866f:	48 89 c1             	mov    %rax,%rcx
  8004208672:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208676:	48 89 ce             	mov    %rcx,%rsi
  8004208679:	48 89 c7             	mov    %rax,%rdi
  800420867c:	48 b8 71 84 20 04 80 	movabs $0x8004208471,%rax
  8004208683:	00 00 00 
  8004208686:	ff d0                	callq  *%rax
  8004208688:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420868c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208690:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208694:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208698:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420869c:	48 01 c1             	add    %rax,%rcx
  800420869f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086a3:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042086a7:	48 89 ce             	mov    %rcx,%rsi
  80042086aa:	48 89 c7             	mov    %rax,%rdi
  80042086ad:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  80042086b4:	00 00 00 
  80042086b7:	ff d0                	callq  *%rax
  80042086b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086bd:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042086c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086c5:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042086c9:	48 39 c2             	cmp    %rax,%rdx
  80042086cc:	73 3a                	jae    8004208708 <load_icode+0x197>
  80042086ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086d2:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042086d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086da:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042086de:	48 29 c2             	sub    %rax,%rdx
  80042086e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086e5:	48 8b 48 10          	mov    0x10(%rax),%rcx
  80042086e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042086ed:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042086f1:	48 01 c8             	add    %rcx,%rax
  80042086f4:	be 00 00 00 00       	mov    $0x0,%esi
  80042086f9:	48 89 c7             	mov    %rax,%rdi
  80042086fc:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  8004208703:	00 00 00 
  8004208706:	ff d0                	callq  *%rax
  8004208708:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  800420870d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208711:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208715:	0f 82 35 ff ff ff    	jb     8004208650 <load_icode+0xdf>
  800420871b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420871f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208724:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208729:	48 89 c7             	mov    %rax,%rdi
  800420872c:	48 b8 71 84 20 04 80 	movabs $0x8004208471,%rax
  8004208733:	00 00 00 
  8004208736:	ff d0                	callq  *%rax
  8004208738:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420873c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208740:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208744:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420874b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420874f:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208754:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)
  800420875b:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208762:	00 
  8004208763:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208767:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420876b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420876f:	48 01 d0             	add    %rdx,%rax
  8004208772:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208776:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420877a:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  800420877e:	0f b7 c0             	movzwl %ax,%eax
  8004208781:	48 c1 e0 06          	shl    $0x6,%rax
  8004208785:	48 89 c2             	mov    %rax,%rdx
  8004208788:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420878c:	48 01 d0             	add    %rdx,%rax
  800420878f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004208793:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208797:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  800420879b:	0f b7 c0             	movzwl %ax,%eax
  800420879e:	48 c1 e0 06          	shl    $0x6,%rax
  80042087a2:	48 89 c2             	mov    %rax,%rdx
  80042087a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042087a9:	48 01 d0             	add    %rdx,%rax
  80042087ac:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042087b0:	e9 27 01 00 00       	jmpq   80042088dc <load_icode+0x36b>
  80042087b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042087b9:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042087bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042087c1:	8b 00                	mov    (%rax),%eax
  80042087c3:	89 c0                	mov    %eax,%eax
  80042087c5:	48 01 c2             	add    %rax,%rdx
  80042087c8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087cc:	48 01 d0             	add    %rdx,%rax
  80042087cf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042087d3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042087d7:	48 be b4 a0 21 04 80 	movabs $0x800421a0b4,%rsi
  80042087de:	00 00 00 
  80042087e1:	48 89 c7             	mov    %rax,%rdi
  80042087e4:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  80042087eb:	00 00 00 
  80042087ee:	ff d0                	callq  *%rax
  80042087f0:	85 c0                	test   %eax,%eax
  80042087f2:	0f 84 84 00 00 00    	je     800420887c <load_icode+0x30b>
  80042087f8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042087fc:	48 be c0 a0 21 04 80 	movabs $0x800421a0c0,%rsi
  8004208803:	00 00 00 
  8004208806:	48 89 c7             	mov    %rax,%rdi
  8004208809:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004208810:	00 00 00 
  8004208813:	ff d0                	callq  *%rax
  8004208815:	85 c0                	test   %eax,%eax
  8004208817:	74 63                	je     800420887c <load_icode+0x30b>
  8004208819:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420881d:	48 be ce a0 21 04 80 	movabs $0x800421a0ce,%rsi
  8004208824:	00 00 00 
  8004208827:	48 89 c7             	mov    %rax,%rdi
  800420882a:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004208831:	00 00 00 
  8004208834:	ff d0                	callq  *%rax
  8004208836:	85 c0                	test   %eax,%eax
  8004208838:	74 42                	je     800420887c <load_icode+0x30b>
  800420883a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420883e:	48 be da a0 21 04 80 	movabs $0x800421a0da,%rsi
  8004208845:	00 00 00 
  8004208848:	48 89 c7             	mov    %rax,%rdi
  800420884b:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004208852:	00 00 00 
  8004208855:	ff d0                	callq  *%rax
  8004208857:	85 c0                	test   %eax,%eax
  8004208859:	74 21                	je     800420887c <load_icode+0x30b>
  800420885b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420885f:	48 be e4 a0 21 04 80 	movabs $0x800421a0e4,%rsi
  8004208866:	00 00 00 
  8004208869:	48 89 c7             	mov    %rax,%rdi
  800420886c:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004208873:	00 00 00 
  8004208876:	ff d0                	callq  *%rax
  8004208878:	85 c0                	test   %eax,%eax
  800420887a:	75 5b                	jne    80042088d7 <load_icode+0x366>
  800420887c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208880:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208884:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208888:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420888c:	48 89 ce             	mov    %rcx,%rsi
  800420888f:	48 89 c7             	mov    %rax,%rdi
  8004208892:	48 b8 71 84 20 04 80 	movabs $0x8004208471,%rax
  8004208899:	00 00 00 
  800420889c:	ff d0                	callq  *%rax
  800420889e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088a2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042088a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088aa:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042088ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042088b2:	48 01 c1             	add    %rax,%rcx
  80042088b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042088b9:	48 89 ce             	mov    %rcx,%rsi
  80042088bc:	48 89 c7             	mov    %rax,%rdi
  80042088bf:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  80042088c6:	00 00 00 
  80042088c9:	ff d0                	callq  *%rax
  80042088cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088cf:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042088d3:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  80042088d7:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  80042088dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042088e0:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  80042088e4:	0f 82 cb fe ff ff    	jb     80042087b5 <load_icode+0x244>
  80042088ea:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  80042088f1:	00 00 00 
  80042088f4:	48 8b 00             	mov    (%rax),%rax
  80042088f7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042088fb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042088ff:	0f 22 d8             	mov    %rax,%cr3
  8004208902:	eb 2a                	jmp    800420892e <load_icode+0x3bd>
  8004208904:	48 ba ef a0 21 04 80 	movabs $0x800421a0ef,%rdx
  800420890b:	00 00 00 
  800420890e:	be 1a 02 00 00       	mov    $0x21a,%esi
  8004208913:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  800420891a:	00 00 00 
  800420891d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208922:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004208929:	00 00 00 
  800420892c:	ff d1                	callq  *%rcx
  800420892e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208932:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208936:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
  800420893d:	48 83 c4 78          	add    $0x78,%rsp
  8004208941:	5b                   	pop    %rbx
  8004208942:	5d                   	pop    %rbp
  8004208943:	c3                   	retq   

0000008004208944 <env_create>:
  8004208944:	55                   	push   %rbp
  8004208945:	48 89 e5             	mov    %rsp,%rbp
  8004208948:	48 83 ec 20          	sub    $0x20,%rsp
  800420894c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208950:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004208953:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208957:	be 00 00 00 00       	mov    $0x0,%esi
  800420895c:	48 89 c7             	mov    %rax,%rdi
  800420895f:	48 b8 d5 82 20 04 80 	movabs $0x80042082d5,%rax
  8004208966:	00 00 00 
  8004208969:	ff d0                	callq  *%rax
  800420896b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420896e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208972:	79 30                	jns    80042089a4 <env_create+0x60>
  8004208974:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208977:	89 c1                	mov    %eax,%ecx
  8004208979:	48 ba 00 a1 21 04 80 	movabs $0x800421a100,%rdx
  8004208980:	00 00 00 
  8004208983:	be 54 02 00 00       	mov    $0x254,%esi
  8004208988:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  800420898f:	00 00 00 
  8004208992:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208997:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420899e:	00 00 00 
  80042089a1:	41 ff d0             	callq  *%r8
  80042089a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089a8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042089ac:	48 89 d6             	mov    %rdx,%rsi
  80042089af:	48 89 c7             	mov    %rax,%rdi
  80042089b2:	48 b8 71 85 20 04 80 	movabs $0x8004208571,%rax
  80042089b9:	00 00 00 
  80042089bc:	ff d0                	callq  *%rax
  80042089be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089c2:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042089c5:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)
  80042089cb:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  80042089cf:	75 19                	jne    80042089ea <env_create+0xa6>
  80042089d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089d5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089d9:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  80042089e0:	80 ce 30             	or     $0x30,%dh
  80042089e3:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
  80042089ea:	c9                   	leaveq 
  80042089eb:	c3                   	retq   

00000080042089ec <env_free>:
  80042089ec:	55                   	push   %rbp
  80042089ed:	48 89 e5             	mov    %rsp,%rbp
  80042089f0:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  80042089f7:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  80042089fe:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004208a05:	00 00 00 
  8004208a08:	ff d0                	callq  *%rax
  8004208a0a:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208a11:	00 00 00 
  8004208a14:	48 98                	cltq   
  8004208a16:	48 c1 e0 03          	shl    $0x3,%rax
  8004208a1a:	48 89 c1             	mov    %rax,%rcx
  8004208a1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208a21:	48 01 c8             	add    %rcx,%rax
  8004208a24:	48 01 d0             	add    %rdx,%rax
  8004208a27:	48 83 c0 08          	add    $0x8,%rax
  8004208a2b:	48 8b 00             	mov    (%rax),%rax
  8004208a2e:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  8004208a35:	75 18                	jne    8004208a4f <env_free+0x63>
  8004208a37:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  8004208a3e:	00 00 00 
  8004208a41:	48 8b 00             	mov    (%rax),%rax
  8004208a44:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004208a48:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208a4c:	0f 22 d8             	mov    %rax,%cr3
  8004208a4f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208a56:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208a5d:	48 8b 00             	mov    (%rax),%rax
  8004208a60:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208a66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208a6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208a6e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208a72:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004208a75:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004208a78:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004208a7f:	00 00 00 
  8004208a82:	48 8b 00             	mov    (%rax),%rax
  8004208a85:	48 39 c2             	cmp    %rax,%rdx
  8004208a88:	72 32                	jb     8004208abc <env_free+0xd0>
  8004208a8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208a8e:	48 89 c1             	mov    %rax,%rcx
  8004208a91:	48 ba 08 a0 21 04 80 	movabs $0x800421a008,%rdx
  8004208a98:	00 00 00 
  8004208a9b:	be 84 02 00 00       	mov    $0x284,%esi
  8004208aa0:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  8004208aa7:	00 00 00 
  8004208aaa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208aaf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208ab6:	00 00 00 
  8004208ab9:	41 ff d0             	callq  *%r8
  8004208abc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208ac3:	00 00 00 
  8004208ac6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208aca:	48 01 d0             	add    %rdx,%rax
  8004208acd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004208ad1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004208ad8:	00 
  8004208ad9:	e9 ab 02 00 00       	jmpq   8004208d89 <env_free+0x39d>
  8004208ade:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ae2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208ae9:	00 
  8004208aea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208aee:	48 01 d0             	add    %rdx,%rax
  8004208af1:	48 8b 00             	mov    (%rax),%rax
  8004208af4:	83 e0 01             	and    $0x1,%eax
  8004208af7:	48 85 c0             	test   %rax,%rax
  8004208afa:	75 05                	jne    8004208b01 <env_free+0x115>
  8004208afc:	e9 83 02 00 00       	jmpq   8004208d84 <env_free+0x398>
  8004208b01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208b05:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208b0c:	00 
  8004208b0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b11:	48 01 d0             	add    %rdx,%rax
  8004208b14:	48 8b 00             	mov    (%rax),%rax
  8004208b17:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208b1d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208b21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b25:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208b29:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004208b2c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004208b2f:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004208b36:	00 00 00 
  8004208b39:	48 8b 00             	mov    (%rax),%rax
  8004208b3c:	48 39 c2             	cmp    %rax,%rdx
  8004208b3f:	72 32                	jb     8004208b73 <env_free+0x187>
  8004208b41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b45:	48 89 c1             	mov    %rax,%rcx
  8004208b48:	48 ba 08 a0 21 04 80 	movabs $0x800421a008,%rdx
  8004208b4f:	00 00 00 
  8004208b52:	be 8c 02 00 00       	mov    $0x28c,%esi
  8004208b57:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  8004208b5e:	00 00 00 
  8004208b61:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b66:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208b6d:	00 00 00 
  8004208b70:	41 ff d0             	callq  *%r8
  8004208b73:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208b7a:	00 00 00 
  8004208b7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b81:	48 01 d0             	add    %rdx,%rax
  8004208b84:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004208b88:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208b8d:	75 07                	jne    8004208b96 <env_free+0x1aa>
  8004208b8f:	b8 04 00 00 00       	mov    $0x4,%eax
  8004208b94:	eb 05                	jmp    8004208b9b <env_free+0x1af>
  8004208b96:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004208b9b:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004208b9e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004208ba5:	00 
  8004208ba6:	e9 6e 01 00 00       	jmpq   8004208d19 <env_free+0x32d>
  8004208bab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208baf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208bb6:	00 
  8004208bb7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208bbb:	48 01 d0             	add    %rdx,%rax
  8004208bbe:	48 8b 00             	mov    (%rax),%rax
  8004208bc1:	83 e0 01             	and    $0x1,%eax
  8004208bc4:	48 85 c0             	test   %rax,%rax
  8004208bc7:	75 05                	jne    8004208bce <env_free+0x1e2>
  8004208bc9:	e9 46 01 00 00       	jmpq   8004208d14 <env_free+0x328>
  8004208bce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208bd2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208bd9:	00 
  8004208bda:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208bde:	48 01 d0             	add    %rdx,%rax
  8004208be1:	48 8b 00             	mov    (%rax),%rax
  8004208be4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bea:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004208bee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208bf2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004208bf6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208bfa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208bfe:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004208c01:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004208c04:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004208c0b:	00 00 00 
  8004208c0e:	48 8b 00             	mov    (%rax),%rax
  8004208c11:	48 39 c2             	cmp    %rax,%rdx
  8004208c14:	72 32                	jb     8004208c48 <env_free+0x25c>
  8004208c16:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c1a:	48 89 c1             	mov    %rax,%rcx
  8004208c1d:	48 ba 08 a0 21 04 80 	movabs $0x800421a008,%rdx
  8004208c24:	00 00 00 
  8004208c27:	be 96 02 00 00       	mov    $0x296,%esi
  8004208c2c:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  8004208c33:	00 00 00 
  8004208c36:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c3b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004208c42:	00 00 00 
  8004208c45:	41 ff d0             	callq  *%r8
  8004208c48:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208c4f:	00 00 00 
  8004208c52:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c56:	48 01 d0             	add    %rdx,%rax
  8004208c59:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004208c5d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004208c64:	00 
  8004208c65:	eb 67                	jmp    8004208cce <env_free+0x2e2>
  8004208c67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208c6b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208c72:	00 
  8004208c73:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004208c77:	48 01 d0             	add    %rdx,%rax
  8004208c7a:	48 8b 00             	mov    (%rax),%rax
  8004208c7d:	83 e0 01             	and    $0x1,%eax
  8004208c80:	48 85 c0             	test   %rax,%rax
  8004208c83:	74 44                	je     8004208cc9 <env_free+0x2dd>
  8004208c85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208c89:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004208c8d:	48 89 c2             	mov    %rax,%rdx
  8004208c90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208c94:	48 c1 e0 15          	shl    $0x15,%rax
  8004208c98:	48 09 c2             	or     %rax,%rdx
  8004208c9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208c9f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004208ca3:	48 09 d0             	or     %rdx,%rax
  8004208ca6:	48 89 c2             	mov    %rax,%rdx
  8004208ca9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208cb0:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208cb7:	48 89 d6             	mov    %rdx,%rsi
  8004208cba:	48 89 c7             	mov    %rax,%rdi
  8004208cbd:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  8004208cc4:	00 00 00 
  8004208cc7:	ff d0                	callq  *%rax
  8004208cc9:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004208cce:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004208cd5:	00 
  8004208cd6:	76 8f                	jbe    8004208c67 <env_free+0x27b>
  8004208cd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208cdc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208ce3:	00 
  8004208ce4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208ce8:	48 01 d0             	add    %rdx,%rax
  8004208ceb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004208cf2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208cf6:	48 89 c7             	mov    %rax,%rdi
  8004208cf9:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208d00:	00 00 00 
  8004208d03:	ff d0                	callq  *%rax
  8004208d05:	48 89 c7             	mov    %rax,%rdi
  8004208d08:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208d0f:	00 00 00 
  8004208d12:	ff d0                	callq  *%rax
  8004208d14:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004208d19:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004208d1c:	48 98                	cltq   
  8004208d1e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208d22:	0f 87 83 fe ff ff    	ja     8004208bab <env_free+0x1bf>
  8004208d28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d2c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d33:	00 
  8004208d34:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d38:	48 01 d0             	add    %rdx,%rax
  8004208d3b:	48 8b 00             	mov    (%rax),%rax
  8004208d3e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208d44:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004208d48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d4c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d53:	00 
  8004208d54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d58:	48 01 d0             	add    %rdx,%rax
  8004208d5b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004208d62:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208d66:	48 89 c7             	mov    %rax,%rdi
  8004208d69:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208d70:	00 00 00 
  8004208d73:	ff d0                	callq  *%rax
  8004208d75:	48 89 c7             	mov    %rax,%rdi
  8004208d78:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208d7f:	00 00 00 
  8004208d82:	ff d0                	callq  *%rax
  8004208d84:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004208d89:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208d8e:	0f 86 4a fd ff ff    	jbe    8004208ade <env_free+0xf2>
  8004208d94:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208d9b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208da2:	48 8b 00             	mov    (%rax),%rax
  8004208da5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208dab:	48 89 c7             	mov    %rax,%rdi
  8004208dae:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208db5:	00 00 00 
  8004208db8:	ff d0                	callq  *%rax
  8004208dba:	48 89 c7             	mov    %rax,%rdi
  8004208dbd:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208dc4:	00 00 00 
  8004208dc7:	ff d0                	callq  *%rax
  8004208dc9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208dd0:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208dd7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004208dde:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208de5:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208dec:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004208df0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208df7:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208dfe:	00 00 00 00 
  8004208e02:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e09:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208e10:	00 00 00 00 
  8004208e14:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e18:	48 89 c7             	mov    %rax,%rdi
  8004208e1b:	48 b8 2f 7e 20 04 80 	movabs $0x8004207e2f,%rax
  8004208e22:	00 00 00 
  8004208e25:	ff d0                	callq  *%rax
  8004208e27:	48 89 c7             	mov    %rax,%rdi
  8004208e2a:	48 b8 14 31 20 04 80 	movabs $0x8004203114,%rax
  8004208e31:	00 00 00 
  8004208e34:	ff d0                	callq  *%rax
  8004208e36:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e3d:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208e44:	00 00 00 
  8004208e47:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208e4e:	00 00 00 
  8004208e51:	48 8b 10             	mov    (%rax),%rdx
  8004208e54:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e5b:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
  8004208e62:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208e69:	00 00 00 
  8004208e6c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004208e73:	48 89 10             	mov    %rdx,(%rax)
  8004208e76:	c9                   	leaveq 
  8004208e77:	c3                   	retq   

0000008004208e78 <env_destroy>:
  8004208e78:	55                   	push   %rbp
  8004208e79:	48 89 e5             	mov    %rsp,%rbp
  8004208e7c:	48 83 ec 10          	sub    $0x10,%rsp
  8004208e80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004208e84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208e88:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004208e8e:	83 f8 03             	cmp    $0x3,%eax
  8004208e91:	75 49                	jne    8004208edc <env_destroy+0x64>
  8004208e93:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004208e9a:	00 00 00 
  8004208e9d:	ff d0                	callq  *%rax
  8004208e9f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208ea6:	00 00 00 
  8004208ea9:	48 98                	cltq   
  8004208eab:	48 c1 e0 03          	shl    $0x3,%rax
  8004208eaf:	48 89 c1             	mov    %rax,%rcx
  8004208eb2:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208eb6:	48 01 c8             	add    %rcx,%rax
  8004208eb9:	48 01 d0             	add    %rdx,%rax
  8004208ebc:	48 83 c0 08          	add    $0x8,%rax
  8004208ec0:	48 8b 00             	mov    (%rax),%rax
  8004208ec3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208ec7:	74 13                	je     8004208edc <env_destroy+0x64>
  8004208ec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ecd:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  8004208ed4:	00 00 00 
  8004208ed7:	e9 89 00 00 00       	jmpq   8004208f65 <env_destroy+0xed>
  8004208edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ee0:	48 89 c7             	mov    %rax,%rdi
  8004208ee3:	48 b8 ec 89 20 04 80 	movabs $0x80042089ec,%rax
  8004208eea:	00 00 00 
  8004208eed:	ff d0                	callq  *%rax
  8004208eef:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004208ef6:	00 00 00 
  8004208ef9:	ff d0                	callq  *%rax
  8004208efb:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208f02:	00 00 00 
  8004208f05:	48 98                	cltq   
  8004208f07:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f0b:	48 89 c1             	mov    %rax,%rcx
  8004208f0e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f12:	48 01 c8             	add    %rcx,%rax
  8004208f15:	48 01 d0             	add    %rdx,%rax
  8004208f18:	48 83 c0 08          	add    $0x8,%rax
  8004208f1c:	48 8b 00             	mov    (%rax),%rax
  8004208f1f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208f23:	75 40                	jne    8004208f65 <env_destroy+0xed>
  8004208f25:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004208f2c:	00 00 00 
  8004208f2f:	ff d0                	callq  *%rax
  8004208f31:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208f38:	00 00 00 
  8004208f3b:	48 98                	cltq   
  8004208f3d:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f41:	48 89 c1             	mov    %rax,%rcx
  8004208f44:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f48:	48 01 c8             	add    %rcx,%rax
  8004208f4b:	48 01 d0             	add    %rdx,%rax
  8004208f4e:	48 83 c0 08          	add    $0x8,%rax
  8004208f52:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004208f59:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  8004208f60:	00 00 00 
  8004208f63:	ff d0                	callq  *%rax
  8004208f65:	c9                   	leaveq 
  8004208f66:	c3                   	retq   

0000008004208f67 <env_pop_tf>:
  8004208f67:	55                   	push   %rbp
  8004208f68:	48 89 e5             	mov    %rsp,%rbp
  8004208f6b:	53                   	push   %rbx
  8004208f6c:	48 83 ec 18          	sub    $0x18,%rsp
  8004208f70:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208f74:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004208f7b:	00 00 00 
  8004208f7e:	ff d0                	callq  *%rax
  8004208f80:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208f87:	00 00 00 
  8004208f8a:	48 98                	cltq   
  8004208f8c:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f90:	48 89 c1             	mov    %rax,%rcx
  8004208f93:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f97:	48 01 c8             	add    %rcx,%rax
  8004208f9a:	48 01 d0             	add    %rdx,%rax
  8004208f9d:	48 83 c0 08          	add    $0x8,%rax
  8004208fa1:	48 8b 18             	mov    (%rax),%rbx
  8004208fa4:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004208fab:	00 00 00 
  8004208fae:	ff d0                	callq  *%rax
  8004208fb0:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
  8004208fb6:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004208fba:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004208fbe:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  8004208fc3:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004208fc8:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004208fcd:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004208fd2:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004208fd7:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004208fdc:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004208fe1:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004208fe6:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004208feb:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  8004208ff0:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004208ff5:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004208ffa:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  8004208fff:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  8004209004:	48 83 c4 78          	add    $0x78,%rsp
  8004209008:	8e 04 24             	mov    (%rsp),%es
  800420900b:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  800420900f:	48 83 c4 10          	add    $0x10,%rsp
  8004209013:	48 83 c4 10          	add    $0x10,%rsp
  8004209017:	48 cf                	iretq  
  8004209019:	48 ba 28 a1 21 04 80 	movabs $0x800421a128,%rdx
  8004209020:	00 00 00 
  8004209023:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004209028:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  800420902f:	00 00 00 
  8004209032:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209037:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420903e:	00 00 00 
  8004209041:	ff d1                	callq  *%rcx

0000008004209043 <env_run>:
  8004209043:	55                   	push   %rbp
  8004209044:	48 89 e5             	mov    %rsp,%rbp
  8004209047:	48 83 ec 20          	sub    $0x20,%rsp
  800420904b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420904f:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004209056:	00 00 00 
  8004209059:	ff d0                	callq  *%rax
  800420905b:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004209062:	00 00 00 
  8004209065:	48 98                	cltq   
  8004209067:	48 c1 e0 03          	shl    $0x3,%rax
  800420906b:	48 89 c1             	mov    %rax,%rcx
  800420906e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209072:	48 01 c8             	add    %rcx,%rax
  8004209075:	48 01 d0             	add    %rdx,%rax
  8004209078:	48 83 c0 08          	add    $0x8,%rax
  800420907c:	48 8b 00             	mov    (%rax),%rax
  800420907f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004209083:	0f 84 28 01 00 00    	je     80042091b1 <env_run+0x16e>
  8004209089:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004209090:	00 00 00 
  8004209093:	ff d0                	callq  *%rax
  8004209095:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420909c:	00 00 00 
  800420909f:	48 98                	cltq   
  80042090a1:	48 c1 e0 03          	shl    $0x3,%rax
  80042090a5:	48 89 c1             	mov    %rax,%rcx
  80042090a8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090ac:	48 01 c8             	add    %rcx,%rax
  80042090af:	48 01 d0             	add    %rdx,%rax
  80042090b2:	48 83 c0 08          	add    $0x8,%rax
  80042090b6:	48 8b 00             	mov    (%rax),%rax
  80042090b9:	48 85 c0             	test   %rax,%rax
  80042090bc:	74 75                	je     8004209133 <env_run+0xf0>
  80042090be:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  80042090c5:	00 00 00 
  80042090c8:	ff d0                	callq  *%rax
  80042090ca:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042090d1:	00 00 00 
  80042090d4:	48 98                	cltq   
  80042090d6:	48 c1 e0 03          	shl    $0x3,%rax
  80042090da:	48 89 c1             	mov    %rax,%rcx
  80042090dd:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090e1:	48 01 c8             	add    %rcx,%rax
  80042090e4:	48 01 d0             	add    %rdx,%rax
  80042090e7:	48 83 c0 08          	add    $0x8,%rax
  80042090eb:	48 8b 00             	mov    (%rax),%rax
  80042090ee:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042090f4:	83 f8 03             	cmp    $0x3,%eax
  80042090f7:	75 3a                	jne    8004209133 <env_run+0xf0>
  80042090f9:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004209100:	00 00 00 
  8004209103:	ff d0                	callq  *%rax
  8004209105:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420910c:	00 00 00 
  800420910f:	48 98                	cltq   
  8004209111:	48 c1 e0 03          	shl    $0x3,%rax
  8004209115:	48 89 c1             	mov    %rax,%rcx
  8004209118:	48 c1 e1 04          	shl    $0x4,%rcx
  800420911c:	48 01 c8             	add    %rcx,%rax
  800420911f:	48 01 d0             	add    %rdx,%rax
  8004209122:	48 83 c0 08          	add    $0x8,%rax
  8004209126:	48 8b 00             	mov    (%rax),%rax
  8004209129:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004209130:	00 00 00 
  8004209133:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420913a:	00 00 00 
  800420913d:	ff d0                	callq  *%rax
  800420913f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004209146:	00 00 00 
  8004209149:	48 98                	cltq   
  800420914b:	48 c1 e0 03          	shl    $0x3,%rax
  800420914f:	48 89 c1             	mov    %rax,%rcx
  8004209152:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209156:	48 01 c8             	add    %rcx,%rax
  8004209159:	48 01 d0             	add    %rdx,%rax
  800420915c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004209160:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209164:	48 89 02             	mov    %rax,(%rdx)
  8004209167:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420916b:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  8004209172:	00 00 00 
  8004209175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209179:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800420917f:	8d 50 01             	lea    0x1(%rax),%edx
  8004209182:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209186:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420918c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209190:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209196:	83 f8 03             	cmp    $0x3,%eax
  8004209199:	74 16                	je     80042091b1 <env_run+0x16e>
  800420919b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420919f:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042091a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042091aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042091ae:	0f 22 d8             	mov    %rax,%cr3
  80042091b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091b5:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042091bb:	83 f8 03             	cmp    $0x3,%eax
  80042091be:	74 35                	je     80042091f5 <env_run+0x1b2>
  80042091c0:	48 b9 34 a1 21 04 80 	movabs $0x800421a134,%rcx
  80042091c7:	00 00 00 
  80042091ca:	48 ba 51 a1 21 04 80 	movabs $0x800421a151,%rdx
  80042091d1:	00 00 00 
  80042091d4:	be 12 03 00 00       	mov    $0x312,%esi
  80042091d9:	48 bf 57 a0 21 04 80 	movabs $0x800421a057,%rdi
  80042091e0:	00 00 00 
  80042091e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042091e8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042091ef:	00 00 00 
  80042091f2:	41 ff d0             	callq  *%r8
  80042091f5:	48 b8 28 7f 20 04 80 	movabs $0x8004207f28,%rax
  80042091fc:	00 00 00 
  80042091ff:	ff d0                	callq  *%rax
  8004209201:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209205:	48 89 c7             	mov    %rax,%rdi
  8004209208:	48 b8 67 8f 20 04 80 	movabs $0x8004208f67,%rax
  800420920f:	00 00 00 
  8004209212:	ff d0                	callq  *%rax

0000008004209214 <mc146818_read>:
  8004209214:	55                   	push   %rbp
  8004209215:	48 89 e5             	mov    %rsp,%rbp
  8004209218:	48 83 ec 14          	sub    $0x14,%rsp
  800420921c:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420921f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209222:	0f b6 c0             	movzbl %al,%eax
  8004209225:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420922c:	88 45 fb             	mov    %al,-0x5(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420922f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209233:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209236:	ee                   	out    %al,(%dx)
  8004209237:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420923e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209241:	89 c2                	mov    %eax,%edx
  8004209243:	ec                   	in     (%dx),%al
  8004209244:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004209247:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420924b:	0f b6 c0             	movzbl %al,%eax
  800420924e:	c9                   	leaveq 
  800420924f:	c3                   	retq   

0000008004209250 <mc146818_write>:
  8004209250:	55                   	push   %rbp
  8004209251:	48 89 e5             	mov    %rsp,%rbp
  8004209254:	48 83 ec 18          	sub    $0x18,%rsp
  8004209258:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420925b:	89 75 e8             	mov    %esi,-0x18(%rbp)
  800420925e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209261:	0f b6 c0             	movzbl %al,%eax
  8004209264:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420926b:	88 45 fb             	mov    %al,-0x5(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420926e:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209272:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209275:	ee                   	out    %al,(%dx)
  8004209276:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004209279:	0f b6 c0             	movzbl %al,%eax
  800420927c:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  8004209283:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004209286:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420928a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420928d:	ee                   	out    %al,(%dx)
  800420928e:	c9                   	leaveq 
  800420928f:	c3                   	retq   

0000008004209290 <pic_init>:
  8004209290:	55                   	push   %rbp
  8004209291:	48 89 e5             	mov    %rsp,%rbp
  8004209294:	48 83 ec 70          	sub    $0x70,%rsp
  8004209298:	48 b8 68 e2 49 04 80 	movabs $0x800449e268,%rax
  800420929f:	00 00 00 
  80042092a2:	c6 00 01             	movb   $0x1,(%rax)
  80042092a5:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  80042092ac:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  80042092b0:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042092b4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042092b7:	ee                   	out    %al,(%dx)
  80042092b8:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042092bf:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042092c3:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042092c7:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042092ca:	ee                   	out    %al,(%dx)
  80042092cb:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042092d2:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042092d6:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042092da:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042092dd:	ee                   	out    %al,(%dx)
  80042092de:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042092e5:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042092e9:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042092ed:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042092f0:	ee                   	out    %al,(%dx)
  80042092f1:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042092f8:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042092fc:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004209300:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209303:	ee                   	out    %al,(%dx)
  8004209304:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  800420930b:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  800420930f:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004209313:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004209316:	ee                   	out    %al,(%dx)
  8004209317:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  800420931e:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209322:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209326:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209329:	ee                   	out    %al,(%dx)
  800420932a:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209331:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209335:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209339:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420933c:	ee                   	out    %al,(%dx)
  800420933d:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209344:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209348:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  800420934c:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420934f:	ee                   	out    %al,(%dx)
  8004209350:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209357:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  800420935b:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  800420935f:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209362:	ee                   	out    %al,(%dx)
  8004209363:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  800420936a:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  800420936e:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209372:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209375:	ee                   	out    %al,(%dx)
  8004209376:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  800420937d:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209381:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209385:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209388:	ee                   	out    %al,(%dx)
  8004209389:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209390:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209394:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209398:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420939b:	ee                   	out    %al,(%dx)
  800420939c:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  80042093a3:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  80042093a7:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  80042093ab:	8b 55 94             	mov    -0x6c(%rbp),%edx
  80042093ae:	ee                   	out    %al,(%dx)
  80042093af:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093b6:	00 00 00 
  80042093b9:	0f b7 00             	movzwl (%rax),%eax
  80042093bc:	66 83 f8 ff          	cmp    $0xffff,%ax
  80042093c0:	74 1e                	je     80042093e0 <pic_init+0x150>
  80042093c2:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093c9:	00 00 00 
  80042093cc:	0f b7 00             	movzwl (%rax),%eax
  80042093cf:	0f b7 c0             	movzwl %ax,%eax
  80042093d2:	89 c7                	mov    %eax,%edi
  80042093d4:	48 b8 e2 93 20 04 80 	movabs $0x80042093e2,%rax
  80042093db:	00 00 00 
  80042093de:	ff d0                	callq  *%rax
  80042093e0:	c9                   	leaveq 
  80042093e1:	c3                   	retq   

00000080042093e2 <irq_setmask_8259A>:
  80042093e2:	55                   	push   %rbp
  80042093e3:	48 89 e5             	mov    %rsp,%rbp
  80042093e6:	48 83 ec 30          	sub    $0x30,%rsp
  80042093ea:	89 f8                	mov    %edi,%eax
  80042093ec:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  80042093f0:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093f7:	00 00 00 
  80042093fa:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  80042093fe:	66 89 10             	mov    %dx,(%rax)
  8004209401:	48 b8 68 e2 49 04 80 	movabs $0x800449e268,%rax
  8004209408:	00 00 00 
  800420940b:	0f b6 00             	movzbl (%rax),%eax
  800420940e:	83 f0 01             	xor    $0x1,%eax
  8004209411:	84 c0                	test   %al,%al
  8004209413:	74 05                	je     800420941a <irq_setmask_8259A+0x38>
  8004209415:	e9 b7 00 00 00       	jmpq   80042094d1 <irq_setmask_8259A+0xef>
  800420941a:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  800420941e:	0f b6 c0             	movzbl %al,%eax
  8004209421:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209428:	88 45 f7             	mov    %al,-0x9(%rbp)
  800420942b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420942f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209432:	ee                   	out    %al,(%dx)
  8004209433:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209437:	66 c1 e8 08          	shr    $0x8,%ax
  800420943b:	0f b6 c0             	movzbl %al,%eax
  800420943e:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209445:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209448:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800420944c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420944f:	ee                   	out    %al,(%dx)
  8004209450:	48 bf 66 a1 21 04 80 	movabs $0x800421a166,%rdi
  8004209457:	00 00 00 
  800420945a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420945f:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004209466:	00 00 00 
  8004209469:	ff d2                	callq  *%rdx
  800420946b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209472:	eb 3c                	jmp    80042094b0 <irq_setmask_8259A+0xce>
  8004209474:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209478:	f7 d0                	not    %eax
  800420947a:	89 c2                	mov    %eax,%edx
  800420947c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420947f:	89 c1                	mov    %eax,%ecx
  8004209481:	d3 fa                	sar    %cl,%edx
  8004209483:	89 d0                	mov    %edx,%eax
  8004209485:	83 e0 01             	and    $0x1,%eax
  8004209488:	85 c0                	test   %eax,%eax
  800420948a:	74 20                	je     80042094ac <irq_setmask_8259A+0xca>
  800420948c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420948f:	89 c6                	mov    %eax,%esi
  8004209491:	48 bf 7a a1 21 04 80 	movabs $0x800421a17a,%rdi
  8004209498:	00 00 00 
  800420949b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042094a0:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  80042094a7:	00 00 00 
  80042094aa:	ff d2                	callq  *%rdx
  80042094ac:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042094b0:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042094b4:	7e be                	jle    8004209474 <irq_setmask_8259A+0x92>
  80042094b6:	48 bf 7e a1 21 04 80 	movabs $0x800421a17e,%rdi
  80042094bd:	00 00 00 
  80042094c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042094c5:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  80042094cc:	00 00 00 
  80042094cf:	ff d2                	callq  *%rdx
  80042094d1:	c9                   	leaveq 
  80042094d2:	c3                   	retq   

00000080042094d3 <irq_eoi>:
  80042094d3:	55                   	push   %rbp
  80042094d4:	48 89 e5             	mov    %rsp,%rbp
  80042094d7:	48 83 ec 10          	sub    $0x10,%rsp
  80042094db:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  80042094e2:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  80042094e6:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042094ea:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042094ed:	ee                   	out    %al,(%dx)
  80042094ee:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  80042094f5:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  80042094f9:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042094fd:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209500:	ee                   	out    %al,(%dx)
  8004209501:	c9                   	leaveq 
  8004209502:	c3                   	retq   

0000008004209503 <putch>:
  8004209503:	55                   	push   %rbp
  8004209504:	48 89 e5             	mov    %rsp,%rbp
  8004209507:	48 83 ec 10          	sub    $0x10,%rsp
  800420950b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420950e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209512:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209515:	89 c7                	mov    %eax,%edi
  8004209517:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420951e:	00 00 00 
  8004209521:	ff d0                	callq  *%rax
  8004209523:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209527:	48 83 c0 04          	add    $0x4,%rax
  800420952b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420952f:	c9                   	leaveq 
  8004209530:	c3                   	retq   

0000008004209531 <vcprintf>:
  8004209531:	55                   	push   %rbp
  8004209532:	48 89 e5             	mov    %rsp,%rbp
  8004209535:	48 83 ec 30          	sub    $0x30,%rsp
  8004209539:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420953d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209541:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209548:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420954c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209550:	48 8b 0a             	mov    (%rdx),%rcx
  8004209553:	48 89 08             	mov    %rcx,(%rax)
  8004209556:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420955a:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420955e:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209562:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209566:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  800420956a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420956e:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209572:	48 89 c6             	mov    %rax,%rsi
  8004209575:	48 bf 03 95 20 04 80 	movabs $0x8004209503,%rdi
  800420957c:	00 00 00 
  800420957f:	48 b8 94 f7 20 04 80 	movabs $0x800420f794,%rax
  8004209586:	00 00 00 
  8004209589:	ff d0                	callq  *%rax
  800420958b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420958e:	c9                   	leaveq 
  800420958f:	c3                   	retq   

0000008004209590 <cprintf>:
  8004209590:	55                   	push   %rbp
  8004209591:	48 89 e5             	mov    %rsp,%rbp
  8004209594:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  800420959b:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  80042095a2:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  80042095a9:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042095b0:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042095b7:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042095be:	84 c0                	test   %al,%al
  80042095c0:	74 20                	je     80042095e2 <cprintf+0x52>
  80042095c2:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042095c6:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042095ca:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042095ce:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042095d2:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042095d6:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042095da:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042095de:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042095e2:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  80042095e9:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  80042095f0:	00 00 00 
  80042095f3:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  80042095fa:	00 00 00 
  80042095fd:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209601:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209608:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420960f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209616:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420961d:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209624:	48 8b 0a             	mov    (%rdx),%rcx
  8004209627:	48 89 08             	mov    %rcx,(%rax)
  800420962a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420962e:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209632:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209636:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420963a:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209641:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209648:	48 89 d6             	mov    %rdx,%rsi
  800420964b:	48 89 c7             	mov    %rax,%rdi
  800420964e:	48 b8 31 95 20 04 80 	movabs $0x8004209531,%rax
  8004209655:	00 00 00 
  8004209658:	ff d0                	callq  *%rax
  800420965a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209660:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209666:	c9                   	leaveq 
  8004209667:	c3                   	retq   

0000008004209668 <xchg>:
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209668:	55                   	push   %rbp
  8004209669:	48 89 e5             	mov    %rsp,%rbp
  800420966c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209670:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209674:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	__asm __volatile("lock; xchgl %0, %1":
  8004209677:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420967b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420967e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209682:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209685:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return result;
  8004209688:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420968b:	c9                   	leaveq 
  800420968c:	c3                   	retq   

000000800420968d <lock_kernel>:
  800420968d:	55                   	push   %rbp
  800420968e:	48 89 e5             	mov    %rsp,%rbp
  8004209691:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  8004209698:	00 00 00 
  800420969b:	48 b8 0d 77 21 04 80 	movabs $0x800421770d,%rax
  80042096a2:	00 00 00 
  80042096a5:	ff d0                	callq  *%rax
  80042096a7:	5d                   	pop    %rbp
  80042096a8:	c3                   	retq   

00000080042096a9 <trapname>:
  80042096a9:	55                   	push   %rbp
  80042096aa:	48 89 e5             	mov    %rsp,%rbp
  80042096ad:	48 83 ec 04          	sub    $0x4,%rsp
  80042096b1:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042096b4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042096b7:	83 f8 13             	cmp    $0x13,%eax
  80042096ba:	77 16                	ja     80042096d2 <trapname+0x29>
  80042096bc:	48 b8 80 a5 21 04 80 	movabs $0x800421a580,%rax
  80042096c3:	00 00 00 
  80042096c6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042096c9:	48 63 d2             	movslq %edx,%rdx
  80042096cc:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042096d0:	eb 34                	jmp    8004209706 <trapname+0x5d>
  80042096d2:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  80042096d6:	75 0c                	jne    80042096e4 <trapname+0x3b>
  80042096d8:	48 b8 80 a1 21 04 80 	movabs $0x800421a180,%rax
  80042096df:	00 00 00 
  80042096e2:	eb 22                	jmp    8004209706 <trapname+0x5d>
  80042096e4:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  80042096e8:	7e 12                	jle    80042096fc <trapname+0x53>
  80042096ea:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  80042096ee:	7f 0c                	jg     80042096fc <trapname+0x53>
  80042096f0:	48 b8 8c a1 21 04 80 	movabs $0x800421a18c,%rax
  80042096f7:	00 00 00 
  80042096fa:	eb 0a                	jmp    8004209706 <trapname+0x5d>
  80042096fc:	48 b8 9f a1 21 04 80 	movabs $0x800421a19f,%rax
  8004209703:	00 00 00 
  8004209706:	c9                   	leaveq 
  8004209707:	c3                   	retq   

0000008004209708 <trap_init>:
  8004209708:	55                   	push   %rbp
  8004209709:	48 89 e5             	mov    %rsp,%rbp
  800420970c:	48 83 ec 10          	sub    $0x10,%rsp
  8004209710:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209717:	e9 7d 01 00 00       	jmpq   8004209899 <trap_init+0x191>
  800420971c:	48 b8 c6 d1 20 04 80 	movabs $0x800420d1c6,%rax
  8004209723:	00 00 00 
  8004209726:	48 ba 80 e2 49 04 80 	movabs $0x800449e280,%rdx
  800420972d:	00 00 00 
  8004209730:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209733:	48 63 c9             	movslq %ecx,%rcx
  8004209736:	48 c1 e1 04          	shl    $0x4,%rcx
  800420973a:	48 01 ca             	add    %rcx,%rdx
  800420973d:	66 89 02             	mov    %ax,(%rdx)
  8004209740:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209747:	00 00 00 
  800420974a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420974d:	48 63 d2             	movslq %edx,%rdx
  8004209750:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209754:	48 01 d0             	add    %rdx,%rax
  8004209757:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  800420975d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209764:	00 00 00 
  8004209767:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420976a:	48 63 d2             	movslq %edx,%rdx
  800420976d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209771:	48 01 d0             	add    %rdx,%rax
  8004209774:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209778:	83 e2 f8             	and    $0xfffffff8,%edx
  800420977b:	88 50 04             	mov    %dl,0x4(%rax)
  800420977e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209785:	00 00 00 
  8004209788:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420978b:	48 63 d2             	movslq %edx,%rdx
  800420978e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209792:	48 01 d0             	add    %rdx,%rax
  8004209795:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209799:	83 e2 07             	and    $0x7,%edx
  800420979c:	88 50 04             	mov    %dl,0x4(%rax)
  800420979f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042097a6:	00 00 00 
  80042097a9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097ac:	48 63 d2             	movslq %edx,%rdx
  80042097af:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097b3:	48 01 d0             	add    %rdx,%rax
  80042097b6:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097ba:	83 e2 f0             	and    $0xfffffff0,%edx
  80042097bd:	83 ca 0e             	or     $0xe,%edx
  80042097c0:	88 50 05             	mov    %dl,0x5(%rax)
  80042097c3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042097ca:	00 00 00 
  80042097cd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097d0:	48 63 d2             	movslq %edx,%rdx
  80042097d3:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097d7:	48 01 d0             	add    %rdx,%rax
  80042097da:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097de:	83 e2 ef             	and    $0xffffffef,%edx
  80042097e1:	88 50 05             	mov    %dl,0x5(%rax)
  80042097e4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042097eb:	00 00 00 
  80042097ee:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097f1:	48 63 d2             	movslq %edx,%rdx
  80042097f4:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097f8:	48 01 d0             	add    %rdx,%rax
  80042097fb:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042097ff:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209802:	88 50 05             	mov    %dl,0x5(%rax)
  8004209805:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420980c:	00 00 00 
  800420980f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209812:	48 63 d2             	movslq %edx,%rdx
  8004209815:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209819:	48 01 d0             	add    %rdx,%rax
  800420981c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209820:	83 ca 80             	or     $0xffffff80,%edx
  8004209823:	88 50 05             	mov    %dl,0x5(%rax)
  8004209826:	48 b8 c6 d1 20 04 80 	movabs $0x800420d1c6,%rax
  800420982d:	00 00 00 
  8004209830:	48 c1 e8 10          	shr    $0x10,%rax
  8004209834:	48 ba 80 e2 49 04 80 	movabs $0x800449e280,%rdx
  800420983b:	00 00 00 
  800420983e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209841:	48 63 c9             	movslq %ecx,%rcx
  8004209844:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209848:	48 01 ca             	add    %rcx,%rdx
  800420984b:	66 89 42 06          	mov    %ax,0x6(%rdx)
  800420984f:	48 b8 c6 d1 20 04 80 	movabs $0x800420d1c6,%rax
  8004209856:	00 00 00 
  8004209859:	48 c1 e8 20          	shr    $0x20,%rax
  800420985d:	48 ba 80 e2 49 04 80 	movabs $0x800449e280,%rdx
  8004209864:	00 00 00 
  8004209867:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420986a:	48 63 c9             	movslq %ecx,%rcx
  800420986d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209871:	48 01 ca             	add    %rcx,%rdx
  8004209874:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209877:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420987e:	00 00 00 
  8004209881:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209884:	48 63 d2             	movslq %edx,%rdx
  8004209887:	48 c1 e2 04          	shl    $0x4,%rdx
  800420988b:	48 01 d0             	add    %rdx,%rax
  800420988e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209895:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209899:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420989c:	3d ff 00 00 00       	cmp    $0xff,%eax
  80042098a1:	0f 86 75 fe ff ff    	jbe    800420971c <trap_init+0x14>
  80042098a7:	48 b8 d0 d0 20 04 80 	movabs $0x800420d0d0,%rax
  80042098ae:	00 00 00 
  80042098b1:	89 c2                	mov    %eax,%edx
  80042098b3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042098ba:	00 00 00 
  80042098bd:	66 89 10             	mov    %dx,(%rax)
  80042098c0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042098c7:	00 00 00 
  80042098ca:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  80042098d0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042098d7:	00 00 00 
  80042098da:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042098de:	83 e2 f8             	and    $0xfffffff8,%edx
  80042098e1:	88 50 04             	mov    %dl,0x4(%rax)
  80042098e4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042098eb:	00 00 00 
  80042098ee:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042098f2:	83 e2 07             	and    $0x7,%edx
  80042098f5:	88 50 04             	mov    %dl,0x4(%rax)
  80042098f8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042098ff:	00 00 00 
  8004209902:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209906:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209909:	83 ca 0e             	or     $0xe,%edx
  800420990c:	88 50 05             	mov    %dl,0x5(%rax)
  800420990f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209916:	00 00 00 
  8004209919:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420991d:	83 e2 ef             	and    $0xffffffef,%edx
  8004209920:	88 50 05             	mov    %dl,0x5(%rax)
  8004209923:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420992a:	00 00 00 
  800420992d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209931:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209934:	88 50 05             	mov    %dl,0x5(%rax)
  8004209937:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420993e:	00 00 00 
  8004209941:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209945:	83 ca 80             	or     $0xffffff80,%edx
  8004209948:	88 50 05             	mov    %dl,0x5(%rax)
  800420994b:	48 b8 d0 d0 20 04 80 	movabs $0x800420d0d0,%rax
  8004209952:	00 00 00 
  8004209955:	48 c1 e8 10          	shr    $0x10,%rax
  8004209959:	89 c2                	mov    %eax,%edx
  800420995b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209962:	00 00 00 
  8004209965:	66 89 50 06          	mov    %dx,0x6(%rax)
  8004209969:	48 b8 d0 d0 20 04 80 	movabs $0x800420d0d0,%rax
  8004209970:	00 00 00 
  8004209973:	48 c1 e8 20          	shr    $0x20,%rax
  8004209977:	89 c2                	mov    %eax,%edx
  8004209979:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209980:	00 00 00 
  8004209983:	89 50 08             	mov    %edx,0x8(%rax)
  8004209986:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420998d:	00 00 00 
  8004209990:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209997:	48 b8 da d0 20 04 80 	movabs $0x800420d0da,%rax
  800420999e:	00 00 00 
  80042099a1:	89 c2                	mov    %eax,%edx
  80042099a3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099aa:	00 00 00 
  80042099ad:	66 89 50 10          	mov    %dx,0x10(%rax)
  80042099b1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099b8:	00 00 00 
  80042099bb:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  80042099c1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099c8:	00 00 00 
  80042099cb:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  80042099cf:	83 e2 f8             	and    $0xfffffff8,%edx
  80042099d2:	88 50 14             	mov    %dl,0x14(%rax)
  80042099d5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099dc:	00 00 00 
  80042099df:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  80042099e3:	83 e2 07             	and    $0x7,%edx
  80042099e6:	88 50 14             	mov    %dl,0x14(%rax)
  80042099e9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099f0:	00 00 00 
  80042099f3:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  80042099f7:	83 e2 f0             	and    $0xfffffff0,%edx
  80042099fa:	83 ca 0e             	or     $0xe,%edx
  80042099fd:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a00:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a07:	00 00 00 
  8004209a0a:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a0e:	83 e2 ef             	and    $0xffffffef,%edx
  8004209a11:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a14:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a1b:	00 00 00 
  8004209a1e:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a22:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209a25:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a28:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a2f:	00 00 00 
  8004209a32:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a36:	83 ca 80             	or     $0xffffff80,%edx
  8004209a39:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a3c:	48 b8 da d0 20 04 80 	movabs $0x800420d0da,%rax
  8004209a43:	00 00 00 
  8004209a46:	48 c1 e8 10          	shr    $0x10,%rax
  8004209a4a:	89 c2                	mov    %eax,%edx
  8004209a4c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a53:	00 00 00 
  8004209a56:	66 89 50 16          	mov    %dx,0x16(%rax)
  8004209a5a:	48 b8 da d0 20 04 80 	movabs $0x800420d0da,%rax
  8004209a61:	00 00 00 
  8004209a64:	48 c1 e8 20          	shr    $0x20,%rax
  8004209a68:	89 c2                	mov    %eax,%edx
  8004209a6a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a71:	00 00 00 
  8004209a74:	89 50 18             	mov    %edx,0x18(%rax)
  8004209a77:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a7e:	00 00 00 
  8004209a81:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  8004209a88:	48 b8 e4 d0 20 04 80 	movabs $0x800420d0e4,%rax
  8004209a8f:	00 00 00 
  8004209a92:	89 c2                	mov    %eax,%edx
  8004209a94:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a9b:	00 00 00 
  8004209a9e:	66 89 50 20          	mov    %dx,0x20(%rax)
  8004209aa2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209aa9:	00 00 00 
  8004209aac:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  8004209ab2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ab9:	00 00 00 
  8004209abc:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209ac0:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209ac3:	88 50 24             	mov    %dl,0x24(%rax)
  8004209ac6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209acd:	00 00 00 
  8004209ad0:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209ad4:	83 e2 07             	and    $0x7,%edx
  8004209ad7:	88 50 24             	mov    %dl,0x24(%rax)
  8004209ada:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ae1:	00 00 00 
  8004209ae4:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209ae8:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209aeb:	83 ca 0e             	or     $0xe,%edx
  8004209aee:	88 50 25             	mov    %dl,0x25(%rax)
  8004209af1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209af8:	00 00 00 
  8004209afb:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209aff:	83 e2 ef             	and    $0xffffffef,%edx
  8004209b02:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b05:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b0c:	00 00 00 
  8004209b0f:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b13:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209b16:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b19:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b20:	00 00 00 
  8004209b23:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b27:	83 ca 80             	or     $0xffffff80,%edx
  8004209b2a:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b2d:	48 b8 e4 d0 20 04 80 	movabs $0x800420d0e4,%rax
  8004209b34:	00 00 00 
  8004209b37:	48 c1 e8 10          	shr    $0x10,%rax
  8004209b3b:	89 c2                	mov    %eax,%edx
  8004209b3d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b44:	00 00 00 
  8004209b47:	66 89 50 26          	mov    %dx,0x26(%rax)
  8004209b4b:	48 b8 e4 d0 20 04 80 	movabs $0x800420d0e4,%rax
  8004209b52:	00 00 00 
  8004209b55:	48 c1 e8 20          	shr    $0x20,%rax
  8004209b59:	89 c2                	mov    %eax,%edx
  8004209b5b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b62:	00 00 00 
  8004209b65:	89 50 28             	mov    %edx,0x28(%rax)
  8004209b68:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b6f:	00 00 00 
  8004209b72:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  8004209b79:	48 b8 ee d0 20 04 80 	movabs $0x800420d0ee,%rax
  8004209b80:	00 00 00 
  8004209b83:	89 c2                	mov    %eax,%edx
  8004209b85:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b8c:	00 00 00 
  8004209b8f:	66 89 50 30          	mov    %dx,0x30(%rax)
  8004209b93:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b9a:	00 00 00 
  8004209b9d:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  8004209ba3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209baa:	00 00 00 
  8004209bad:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209bb1:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209bb4:	88 50 34             	mov    %dl,0x34(%rax)
  8004209bb7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209bbe:	00 00 00 
  8004209bc1:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209bc5:	83 e2 07             	and    $0x7,%edx
  8004209bc8:	88 50 34             	mov    %dl,0x34(%rax)
  8004209bcb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209bd2:	00 00 00 
  8004209bd5:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209bd9:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209bdc:	83 ca 0e             	or     $0xe,%edx
  8004209bdf:	88 50 35             	mov    %dl,0x35(%rax)
  8004209be2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209be9:	00 00 00 
  8004209bec:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209bf0:	83 e2 ef             	and    $0xffffffef,%edx
  8004209bf3:	88 50 35             	mov    %dl,0x35(%rax)
  8004209bf6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209bfd:	00 00 00 
  8004209c00:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c04:	83 ca 60             	or     $0x60,%edx
  8004209c07:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c0a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c11:	00 00 00 
  8004209c14:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c18:	83 ca 80             	or     $0xffffff80,%edx
  8004209c1b:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c1e:	48 b8 ee d0 20 04 80 	movabs $0x800420d0ee,%rax
  8004209c25:	00 00 00 
  8004209c28:	48 c1 e8 10          	shr    $0x10,%rax
  8004209c2c:	89 c2                	mov    %eax,%edx
  8004209c2e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c35:	00 00 00 
  8004209c38:	66 89 50 36          	mov    %dx,0x36(%rax)
  8004209c3c:	48 b8 ee d0 20 04 80 	movabs $0x800420d0ee,%rax
  8004209c43:	00 00 00 
  8004209c46:	48 c1 e8 20          	shr    $0x20,%rax
  8004209c4a:	89 c2                	mov    %eax,%edx
  8004209c4c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c53:	00 00 00 
  8004209c56:	89 50 38             	mov    %edx,0x38(%rax)
  8004209c59:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c60:	00 00 00 
  8004209c63:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  8004209c6a:	48 b8 f8 d0 20 04 80 	movabs $0x800420d0f8,%rax
  8004209c71:	00 00 00 
  8004209c74:	89 c2                	mov    %eax,%edx
  8004209c76:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c7d:	00 00 00 
  8004209c80:	66 89 50 40          	mov    %dx,0x40(%rax)
  8004209c84:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c8b:	00 00 00 
  8004209c8e:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  8004209c94:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c9b:	00 00 00 
  8004209c9e:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209ca2:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209ca5:	88 50 44             	mov    %dl,0x44(%rax)
  8004209ca8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209caf:	00 00 00 
  8004209cb2:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209cb6:	83 e2 07             	and    $0x7,%edx
  8004209cb9:	88 50 44             	mov    %dl,0x44(%rax)
  8004209cbc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209cc3:	00 00 00 
  8004209cc6:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209cca:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ccd:	83 ca 0e             	or     $0xe,%edx
  8004209cd0:	88 50 45             	mov    %dl,0x45(%rax)
  8004209cd3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209cda:	00 00 00 
  8004209cdd:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209ce1:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ce4:	88 50 45             	mov    %dl,0x45(%rax)
  8004209ce7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209cee:	00 00 00 
  8004209cf1:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209cf5:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209cf8:	88 50 45             	mov    %dl,0x45(%rax)
  8004209cfb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d02:	00 00 00 
  8004209d05:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d09:	83 ca 80             	or     $0xffffff80,%edx
  8004209d0c:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d0f:	48 b8 f8 d0 20 04 80 	movabs $0x800420d0f8,%rax
  8004209d16:	00 00 00 
  8004209d19:	48 c1 e8 10          	shr    $0x10,%rax
  8004209d1d:	89 c2                	mov    %eax,%edx
  8004209d1f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d26:	00 00 00 
  8004209d29:	66 89 50 46          	mov    %dx,0x46(%rax)
  8004209d2d:	48 b8 f8 d0 20 04 80 	movabs $0x800420d0f8,%rax
  8004209d34:	00 00 00 
  8004209d37:	48 c1 e8 20          	shr    $0x20,%rax
  8004209d3b:	89 c2                	mov    %eax,%edx
  8004209d3d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d44:	00 00 00 
  8004209d47:	89 50 48             	mov    %edx,0x48(%rax)
  8004209d4a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d51:	00 00 00 
  8004209d54:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  8004209d5b:	48 b8 02 d1 20 04 80 	movabs $0x800420d102,%rax
  8004209d62:	00 00 00 
  8004209d65:	89 c2                	mov    %eax,%edx
  8004209d67:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d6e:	00 00 00 
  8004209d71:	66 89 50 50          	mov    %dx,0x50(%rax)
  8004209d75:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d7c:	00 00 00 
  8004209d7f:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  8004209d85:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d8c:	00 00 00 
  8004209d8f:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209d93:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209d96:	88 50 54             	mov    %dl,0x54(%rax)
  8004209d99:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209da0:	00 00 00 
  8004209da3:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209da7:	83 e2 07             	and    $0x7,%edx
  8004209daa:	88 50 54             	mov    %dl,0x54(%rax)
  8004209dad:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209db4:	00 00 00 
  8004209db7:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dbb:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209dbe:	83 ca 0e             	or     $0xe,%edx
  8004209dc1:	88 50 55             	mov    %dl,0x55(%rax)
  8004209dc4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209dcb:	00 00 00 
  8004209dce:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dd2:	83 e2 ef             	and    $0xffffffef,%edx
  8004209dd5:	88 50 55             	mov    %dl,0x55(%rax)
  8004209dd8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ddf:	00 00 00 
  8004209de2:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209de6:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209de9:	88 50 55             	mov    %dl,0x55(%rax)
  8004209dec:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209df3:	00 00 00 
  8004209df6:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209dfa:	83 ca 80             	or     $0xffffff80,%edx
  8004209dfd:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e00:	48 b8 02 d1 20 04 80 	movabs $0x800420d102,%rax
  8004209e07:	00 00 00 
  8004209e0a:	48 c1 e8 10          	shr    $0x10,%rax
  8004209e0e:	89 c2                	mov    %eax,%edx
  8004209e10:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e17:	00 00 00 
  8004209e1a:	66 89 50 56          	mov    %dx,0x56(%rax)
  8004209e1e:	48 b8 02 d1 20 04 80 	movabs $0x800420d102,%rax
  8004209e25:	00 00 00 
  8004209e28:	48 c1 e8 20          	shr    $0x20,%rax
  8004209e2c:	89 c2                	mov    %eax,%edx
  8004209e2e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e35:	00 00 00 
  8004209e38:	89 50 58             	mov    %edx,0x58(%rax)
  8004209e3b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e42:	00 00 00 
  8004209e45:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  8004209e4c:	48 b8 0c d1 20 04 80 	movabs $0x800420d10c,%rax
  8004209e53:	00 00 00 
  8004209e56:	89 c2                	mov    %eax,%edx
  8004209e58:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e5f:	00 00 00 
  8004209e62:	66 89 50 60          	mov    %dx,0x60(%rax)
  8004209e66:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e6d:	00 00 00 
  8004209e70:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  8004209e76:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e7d:	00 00 00 
  8004209e80:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209e84:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e87:	88 50 64             	mov    %dl,0x64(%rax)
  8004209e8a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e91:	00 00 00 
  8004209e94:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209e98:	83 e2 07             	and    $0x7,%edx
  8004209e9b:	88 50 64             	mov    %dl,0x64(%rax)
  8004209e9e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ea5:	00 00 00 
  8004209ea8:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209eac:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209eaf:	83 ca 0e             	or     $0xe,%edx
  8004209eb2:	88 50 65             	mov    %dl,0x65(%rax)
  8004209eb5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ebc:	00 00 00 
  8004209ebf:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209ec3:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ec6:	88 50 65             	mov    %dl,0x65(%rax)
  8004209ec9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ed0:	00 00 00 
  8004209ed3:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209ed7:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209eda:	88 50 65             	mov    %dl,0x65(%rax)
  8004209edd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ee4:	00 00 00 
  8004209ee7:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209eeb:	83 ca 80             	or     $0xffffff80,%edx
  8004209eee:	88 50 65             	mov    %dl,0x65(%rax)
  8004209ef1:	48 b8 0c d1 20 04 80 	movabs $0x800420d10c,%rax
  8004209ef8:	00 00 00 
  8004209efb:	48 c1 e8 10          	shr    $0x10,%rax
  8004209eff:	89 c2                	mov    %eax,%edx
  8004209f01:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f08:	00 00 00 
  8004209f0b:	66 89 50 66          	mov    %dx,0x66(%rax)
  8004209f0f:	48 b8 0c d1 20 04 80 	movabs $0x800420d10c,%rax
  8004209f16:	00 00 00 
  8004209f19:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f1d:	89 c2                	mov    %eax,%edx
  8004209f1f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f26:	00 00 00 
  8004209f29:	89 50 68             	mov    %edx,0x68(%rax)
  8004209f2c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f33:	00 00 00 
  8004209f36:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  8004209f3d:	48 b8 16 d1 20 04 80 	movabs $0x800420d116,%rax
  8004209f44:	00 00 00 
  8004209f47:	89 c2                	mov    %eax,%edx
  8004209f49:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f50:	00 00 00 
  8004209f53:	66 89 50 70          	mov    %dx,0x70(%rax)
  8004209f57:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f5e:	00 00 00 
  8004209f61:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  8004209f67:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f6e:	00 00 00 
  8004209f71:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209f75:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209f78:	88 50 74             	mov    %dl,0x74(%rax)
  8004209f7b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f82:	00 00 00 
  8004209f85:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209f89:	83 e2 07             	and    $0x7,%edx
  8004209f8c:	88 50 74             	mov    %dl,0x74(%rax)
  8004209f8f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f96:	00 00 00 
  8004209f99:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209f9d:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209fa0:	83 ca 0e             	or     $0xe,%edx
  8004209fa3:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fa6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fad:	00 00 00 
  8004209fb0:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fb4:	83 e2 ef             	and    $0xffffffef,%edx
  8004209fb7:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fba:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fc1:	00 00 00 
  8004209fc4:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fc8:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209fcb:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fce:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fd5:	00 00 00 
  8004209fd8:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209fdc:	83 ca 80             	or     $0xffffff80,%edx
  8004209fdf:	88 50 75             	mov    %dl,0x75(%rax)
  8004209fe2:	48 b8 16 d1 20 04 80 	movabs $0x800420d116,%rax
  8004209fe9:	00 00 00 
  8004209fec:	48 c1 e8 10          	shr    $0x10,%rax
  8004209ff0:	89 c2                	mov    %eax,%edx
  8004209ff2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ff9:	00 00 00 
  8004209ffc:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a000:	48 b8 16 d1 20 04 80 	movabs $0x800420d116,%rax
  800420a007:	00 00 00 
  800420a00a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a00e:	89 c2                	mov    %eax,%edx
  800420a010:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a017:	00 00 00 
  800420a01a:	89 50 78             	mov    %edx,0x78(%rax)
  800420a01d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a024:	00 00 00 
  800420a027:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a02e:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420a035:	00 00 00 
  800420a038:	89 c2                	mov    %eax,%edx
  800420a03a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a041:	00 00 00 
  800420a044:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a04b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a052:	00 00 00 
  800420a055:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a05c:	08 00 
  800420a05e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a065:	00 00 00 
  800420a068:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a06f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a072:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a078:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a07f:	00 00 00 
  800420a082:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a089:	83 e2 07             	and    $0x7,%edx
  800420a08c:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a092:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a099:	00 00 00 
  800420a09c:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0a3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0a6:	83 ca 0e             	or     $0xe,%edx
  800420a0a9:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0af:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a0b6:	00 00 00 
  800420a0b9:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0c0:	83 e2 ef             	and    $0xffffffef,%edx
  800420a0c3:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0c9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a0d0:	00 00 00 
  800420a0d3:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0da:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a0dd:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0e3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a0ea:	00 00 00 
  800420a0ed:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0f4:	83 ca 80             	or     $0xffffff80,%edx
  800420a0f7:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a0fd:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420a104:	00 00 00 
  800420a107:	48 c1 e8 10          	shr    $0x10,%rax
  800420a10b:	89 c2                	mov    %eax,%edx
  800420a10d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a114:	00 00 00 
  800420a117:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a11e:	48 b8 20 d1 20 04 80 	movabs $0x800420d120,%rax
  800420a125:	00 00 00 
  800420a128:	48 c1 e8 20          	shr    $0x20,%rax
  800420a12c:	89 c2                	mov    %eax,%edx
  800420a12e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a135:	00 00 00 
  800420a138:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a13e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a145:	00 00 00 
  800420a148:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a14f:	00 00 00 
  800420a152:	48 b8 28 d1 20 04 80 	movabs $0x800420d128,%rax
  800420a159:	00 00 00 
  800420a15c:	89 c2                	mov    %eax,%edx
  800420a15e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a165:	00 00 00 
  800420a168:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a16f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a176:	00 00 00 
  800420a179:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a180:	08 00 
  800420a182:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a189:	00 00 00 
  800420a18c:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a193:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a196:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a19c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1a3:	00 00 00 
  800420a1a6:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a1ad:	83 e2 07             	and    $0x7,%edx
  800420a1b0:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a1b6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1bd:	00 00 00 
  800420a1c0:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1c7:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1ca:	83 ca 0e             	or     $0xe,%edx
  800420a1cd:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a1d3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1da:	00 00 00 
  800420a1dd:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1e4:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1e7:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a1ed:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1f4:	00 00 00 
  800420a1f7:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a1fe:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a201:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a207:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a20e:	00 00 00 
  800420a211:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a218:	83 ca 80             	or     $0xffffff80,%edx
  800420a21b:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a221:	48 b8 28 d1 20 04 80 	movabs $0x800420d128,%rax
  800420a228:	00 00 00 
  800420a22b:	48 c1 e8 10          	shr    $0x10,%rax
  800420a22f:	89 c2                	mov    %eax,%edx
  800420a231:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a238:	00 00 00 
  800420a23b:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a242:	48 b8 28 d1 20 04 80 	movabs $0x800420d128,%rax
  800420a249:	00 00 00 
  800420a24c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a250:	89 c2                	mov    %eax,%edx
  800420a252:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a259:	00 00 00 
  800420a25c:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a262:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a269:	00 00 00 
  800420a26c:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a273:	00 00 00 
  800420a276:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  800420a27d:	00 00 00 
  800420a280:	89 c2                	mov    %eax,%edx
  800420a282:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a289:	00 00 00 
  800420a28c:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a293:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a29a:	00 00 00 
  800420a29d:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a2a4:	08 00 
  800420a2a6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2ad:	00 00 00 
  800420a2b0:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a2b7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a2ba:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a2c0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2c7:	00 00 00 
  800420a2ca:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a2d1:	83 e2 07             	and    $0x7,%edx
  800420a2d4:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a2da:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2e1:	00 00 00 
  800420a2e4:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a2eb:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2ee:	83 ca 0e             	or     $0xe,%edx
  800420a2f1:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a2f7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2fe:	00 00 00 
  800420a301:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a308:	83 e2 ef             	and    $0xffffffef,%edx
  800420a30b:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a311:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a318:	00 00 00 
  800420a31b:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a322:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a325:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a32b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a332:	00 00 00 
  800420a335:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a33c:	83 ca 80             	or     $0xffffff80,%edx
  800420a33f:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a345:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  800420a34c:	00 00 00 
  800420a34f:	48 c1 e8 10          	shr    $0x10,%rax
  800420a353:	89 c2                	mov    %eax,%edx
  800420a355:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a35c:	00 00 00 
  800420a35f:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420a366:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  800420a36d:	00 00 00 
  800420a370:	48 c1 e8 20          	shr    $0x20,%rax
  800420a374:	89 c2                	mov    %eax,%edx
  800420a376:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a37d:	00 00 00 
  800420a380:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420a386:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a38d:	00 00 00 
  800420a390:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420a397:	00 00 00 
  800420a39a:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420a3a1:	00 00 00 
  800420a3a4:	89 c2                	mov    %eax,%edx
  800420a3a6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a3ad:	00 00 00 
  800420a3b0:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420a3b7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a3be:	00 00 00 
  800420a3c1:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420a3c8:	08 00 
  800420a3ca:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a3d1:	00 00 00 
  800420a3d4:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a3db:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a3de:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a3e4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a3eb:	00 00 00 
  800420a3ee:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a3f5:	83 e2 07             	and    $0x7,%edx
  800420a3f8:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a3fe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a405:	00 00 00 
  800420a408:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a40f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a412:	83 ca 0e             	or     $0xe,%edx
  800420a415:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a41b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a422:	00 00 00 
  800420a425:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a42c:	83 e2 ef             	and    $0xffffffef,%edx
  800420a42f:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a435:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a43c:	00 00 00 
  800420a43f:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a446:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a449:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a44f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a456:	00 00 00 
  800420a459:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a460:	83 ca 80             	or     $0xffffff80,%edx
  800420a463:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a469:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420a470:	00 00 00 
  800420a473:	48 c1 e8 10          	shr    $0x10,%rax
  800420a477:	89 c2                	mov    %eax,%edx
  800420a479:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a480:	00 00 00 
  800420a483:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420a48a:	48 b8 38 d1 20 04 80 	movabs $0x800420d138,%rax
  800420a491:	00 00 00 
  800420a494:	48 c1 e8 20          	shr    $0x20,%rax
  800420a498:	89 c2                	mov    %eax,%edx
  800420a49a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4a1:	00 00 00 
  800420a4a4:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420a4aa:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4b1:	00 00 00 
  800420a4b4:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420a4bb:	00 00 00 
  800420a4be:	48 b8 40 d1 20 04 80 	movabs $0x800420d140,%rax
  800420a4c5:	00 00 00 
  800420a4c8:	89 c2                	mov    %eax,%edx
  800420a4ca:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4d1:	00 00 00 
  800420a4d4:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420a4db:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4e2:	00 00 00 
  800420a4e5:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420a4ec:	08 00 
  800420a4ee:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4f5:	00 00 00 
  800420a4f8:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a4ff:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a502:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a508:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a50f:	00 00 00 
  800420a512:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a519:	83 e2 07             	and    $0x7,%edx
  800420a51c:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a522:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a529:	00 00 00 
  800420a52c:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a533:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a536:	83 ca 0e             	or     $0xe,%edx
  800420a539:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a53f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a546:	00 00 00 
  800420a549:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a550:	83 e2 ef             	and    $0xffffffef,%edx
  800420a553:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a559:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a560:	00 00 00 
  800420a563:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a56a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a56d:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a573:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a57a:	00 00 00 
  800420a57d:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a584:	83 ca 80             	or     $0xffffff80,%edx
  800420a587:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a58d:	48 b8 40 d1 20 04 80 	movabs $0x800420d140,%rax
  800420a594:	00 00 00 
  800420a597:	48 c1 e8 10          	shr    $0x10,%rax
  800420a59b:	89 c2                	mov    %eax,%edx
  800420a59d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a5a4:	00 00 00 
  800420a5a7:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420a5ae:	48 b8 40 d1 20 04 80 	movabs $0x800420d140,%rax
  800420a5b5:	00 00 00 
  800420a5b8:	48 c1 e8 20          	shr    $0x20,%rax
  800420a5bc:	89 c2                	mov    %eax,%edx
  800420a5be:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a5c5:	00 00 00 
  800420a5c8:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420a5ce:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a5d5:	00 00 00 
  800420a5d8:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420a5df:	00 00 00 
  800420a5e2:	48 b8 48 d1 20 04 80 	movabs $0x800420d148,%rax
  800420a5e9:	00 00 00 
  800420a5ec:	89 c2                	mov    %eax,%edx
  800420a5ee:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a5f5:	00 00 00 
  800420a5f8:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420a5ff:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a606:	00 00 00 
  800420a609:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420a610:	08 00 
  800420a612:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a619:	00 00 00 
  800420a61c:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a623:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a626:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a62c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a633:	00 00 00 
  800420a636:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a63d:	83 e2 07             	and    $0x7,%edx
  800420a640:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a646:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a64d:	00 00 00 
  800420a650:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a657:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a65a:	83 ca 0e             	or     $0xe,%edx
  800420a65d:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a663:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a66a:	00 00 00 
  800420a66d:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a674:	83 e2 ef             	and    $0xffffffef,%edx
  800420a677:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a67d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a684:	00 00 00 
  800420a687:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a68e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a691:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a697:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a69e:	00 00 00 
  800420a6a1:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6a8:	83 ca 80             	or     $0xffffff80,%edx
  800420a6ab:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6b1:	48 b8 48 d1 20 04 80 	movabs $0x800420d148,%rax
  800420a6b8:	00 00 00 
  800420a6bb:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6bf:	89 c2                	mov    %eax,%edx
  800420a6c1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a6c8:	00 00 00 
  800420a6cb:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420a6d2:	48 b8 48 d1 20 04 80 	movabs $0x800420d148,%rax
  800420a6d9:	00 00 00 
  800420a6dc:	48 c1 e8 20          	shr    $0x20,%rax
  800420a6e0:	89 c2                	mov    %eax,%edx
  800420a6e2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a6e9:	00 00 00 
  800420a6ec:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420a6f2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a6f9:	00 00 00 
  800420a6fc:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420a703:	00 00 00 
  800420a706:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420a70d:	00 00 00 
  800420a710:	89 c2                	mov    %eax,%edx
  800420a712:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a719:	00 00 00 
  800420a71c:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420a723:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a72a:	00 00 00 
  800420a72d:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420a734:	08 00 
  800420a736:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a73d:	00 00 00 
  800420a740:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a747:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a74a:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a750:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a757:	00 00 00 
  800420a75a:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a761:	83 e2 07             	and    $0x7,%edx
  800420a764:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a76a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a771:	00 00 00 
  800420a774:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a77b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a77e:	83 ca 0e             	or     $0xe,%edx
  800420a781:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a787:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a78e:	00 00 00 
  800420a791:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a798:	83 e2 ef             	and    $0xffffffef,%edx
  800420a79b:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7a1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a7a8:	00 00 00 
  800420a7ab:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7b2:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7b5:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7bb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a7c2:	00 00 00 
  800420a7c5:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7cc:	83 ca 80             	or     $0xffffff80,%edx
  800420a7cf:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7d5:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420a7dc:	00 00 00 
  800420a7df:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7e3:	89 c2                	mov    %eax,%edx
  800420a7e5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a7ec:	00 00 00 
  800420a7ef:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420a7f6:	48 b8 50 d1 20 04 80 	movabs $0x800420d150,%rax
  800420a7fd:	00 00 00 
  800420a800:	48 c1 e8 20          	shr    $0x20,%rax
  800420a804:	89 c2                	mov    %eax,%edx
  800420a806:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a80d:	00 00 00 
  800420a810:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420a816:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a81d:	00 00 00 
  800420a820:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420a827:	00 00 00 
  800420a82a:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420a831:	00 00 00 
  800420a834:	89 c2                	mov    %eax,%edx
  800420a836:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a83d:	00 00 00 
  800420a840:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420a847:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a84e:	00 00 00 
  800420a851:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420a858:	08 00 
  800420a85a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a861:	00 00 00 
  800420a864:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a86b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a86e:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a874:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a87b:	00 00 00 
  800420a87e:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a885:	83 e2 07             	and    $0x7,%edx
  800420a888:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a88e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a895:	00 00 00 
  800420a898:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a89f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8a2:	83 ca 0e             	or     $0xe,%edx
  800420a8a5:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8ab:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a8b2:	00 00 00 
  800420a8b5:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8bc:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8bf:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8c5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a8cc:	00 00 00 
  800420a8cf:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8d6:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8d9:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8df:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a8e6:	00 00 00 
  800420a8e9:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8f0:	83 ca 80             	or     $0xffffff80,%edx
  800420a8f3:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a8f9:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420a900:	00 00 00 
  800420a903:	48 c1 e8 10          	shr    $0x10,%rax
  800420a907:	89 c2                	mov    %eax,%edx
  800420a909:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a910:	00 00 00 
  800420a913:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420a91a:	48 b8 56 d1 20 04 80 	movabs $0x800420d156,%rax
  800420a921:	00 00 00 
  800420a924:	48 c1 e8 20          	shr    $0x20,%rax
  800420a928:	89 c2                	mov    %eax,%edx
  800420a92a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a931:	00 00 00 
  800420a934:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420a93a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a941:	00 00 00 
  800420a944:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420a94b:	00 00 00 
  800420a94e:	48 b8 5a d1 20 04 80 	movabs $0x800420d15a,%rax
  800420a955:	00 00 00 
  800420a958:	89 c2                	mov    %eax,%edx
  800420a95a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a961:	00 00 00 
  800420a964:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420a96b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a972:	00 00 00 
  800420a975:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420a97c:	08 00 
  800420a97e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a985:	00 00 00 
  800420a988:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a98f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a992:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a998:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a99f:	00 00 00 
  800420a9a2:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a9a9:	83 e2 07             	and    $0x7,%edx
  800420a9ac:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a9b2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a9b9:	00 00 00 
  800420a9bc:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9c3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9c6:	83 ca 0e             	or     $0xe,%edx
  800420a9c9:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a9cf:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a9d6:	00 00 00 
  800420a9d9:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9e0:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9e3:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420a9e9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a9f0:	00 00 00 
  800420a9f3:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420a9fa:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a9fd:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa03:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa0a:	00 00 00 
  800420aa0d:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa14:	83 ca 80             	or     $0xffffff80,%edx
  800420aa17:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa1d:	48 b8 5a d1 20 04 80 	movabs $0x800420d15a,%rax
  800420aa24:	00 00 00 
  800420aa27:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa2b:	89 c2                	mov    %eax,%edx
  800420aa2d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa34:	00 00 00 
  800420aa37:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420aa3e:	48 b8 5a d1 20 04 80 	movabs $0x800420d15a,%rax
  800420aa45:	00 00 00 
  800420aa48:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa4c:	89 c2                	mov    %eax,%edx
  800420aa4e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa55:	00 00 00 
  800420aa58:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420aa5e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa65:	00 00 00 
  800420aa68:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420aa6f:	00 00 00 
  800420aa72:	48 b8 60 d1 20 04 80 	movabs $0x800420d160,%rax
  800420aa79:	00 00 00 
  800420aa7c:	89 c2                	mov    %eax,%edx
  800420aa7e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa85:	00 00 00 
  800420aa88:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420aa8f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa96:	00 00 00 
  800420aa99:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420aaa0:	08 00 
  800420aaa2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aaa9:	00 00 00 
  800420aaac:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420aab3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aab6:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420aabc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aac3:	00 00 00 
  800420aac6:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420aacd:	83 e2 07             	and    $0x7,%edx
  800420aad0:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420aad6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aadd:	00 00 00 
  800420aae0:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420aae7:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aaea:	83 ca 0e             	or     $0xe,%edx
  800420aaed:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420aaf3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aafa:	00 00 00 
  800420aafd:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab04:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab07:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab0d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab14:	00 00 00 
  800420ab17:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab1e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab21:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab27:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab2e:	00 00 00 
  800420ab31:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab38:	83 ca 80             	or     $0xffffff80,%edx
  800420ab3b:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab41:	48 b8 60 d1 20 04 80 	movabs $0x800420d160,%rax
  800420ab48:	00 00 00 
  800420ab4b:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab4f:	89 c2                	mov    %eax,%edx
  800420ab51:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab58:	00 00 00 
  800420ab5b:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420ab62:	48 b8 60 d1 20 04 80 	movabs $0x800420d160,%rax
  800420ab69:	00 00 00 
  800420ab6c:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab70:	89 c2                	mov    %eax,%edx
  800420ab72:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab79:	00 00 00 
  800420ab7c:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420ab82:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab89:	00 00 00 
  800420ab8c:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420ab93:	00 00 00 
  800420ab96:	48 b8 66 d1 20 04 80 	movabs $0x800420d166,%rax
  800420ab9d:	00 00 00 
  800420aba0:	89 c2                	mov    %eax,%edx
  800420aba2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aba9:	00 00 00 
  800420abac:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420abb3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420abba:	00 00 00 
  800420abbd:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420abc4:	08 00 
  800420abc6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420abcd:	00 00 00 
  800420abd0:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420abd7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abda:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420abe0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420abe7:	00 00 00 
  800420abea:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420abf1:	83 e2 07             	and    $0x7,%edx
  800420abf4:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420abfa:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac01:	00 00 00 
  800420ac04:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac0b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac0e:	83 ca 0e             	or     $0xe,%edx
  800420ac11:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac17:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac1e:	00 00 00 
  800420ac21:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac28:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac2b:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac31:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac38:	00 00 00 
  800420ac3b:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac42:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac45:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac4b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac52:	00 00 00 
  800420ac55:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac5c:	83 ca 80             	or     $0xffffff80,%edx
  800420ac5f:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac65:	48 b8 66 d1 20 04 80 	movabs $0x800420d166,%rax
  800420ac6c:	00 00 00 
  800420ac6f:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac73:	89 c2                	mov    %eax,%edx
  800420ac75:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac7c:	00 00 00 
  800420ac7f:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420ac86:	48 b8 66 d1 20 04 80 	movabs $0x800420d166,%rax
  800420ac8d:	00 00 00 
  800420ac90:	48 c1 e8 20          	shr    $0x20,%rax
  800420ac94:	89 c2                	mov    %eax,%edx
  800420ac96:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac9d:	00 00 00 
  800420aca0:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420aca6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420acad:	00 00 00 
  800420acb0:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420acb7:	00 00 00 
  800420acba:	48 b8 6c d1 20 04 80 	movabs $0x800420d16c,%rax
  800420acc1:	00 00 00 
  800420acc4:	89 c2                	mov    %eax,%edx
  800420acc6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420accd:	00 00 00 
  800420acd0:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420acd7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420acde:	00 00 00 
  800420ace1:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420ace8:	08 00 
  800420acea:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420acf1:	00 00 00 
  800420acf4:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420acfb:	83 e2 f8             	and    $0xfffffff8,%edx
  800420acfe:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ad04:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad0b:	00 00 00 
  800420ad0e:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420ad15:	83 e2 07             	and    $0x7,%edx
  800420ad18:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ad1e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad25:	00 00 00 
  800420ad28:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad2f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad32:	83 ca 0e             	or     $0xe,%edx
  800420ad35:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad3b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad42:	00 00 00 
  800420ad45:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad4c:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad4f:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad55:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad5c:	00 00 00 
  800420ad5f:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad66:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad69:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad6f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad76:	00 00 00 
  800420ad79:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad80:	83 ca 80             	or     $0xffffff80,%edx
  800420ad83:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad89:	48 b8 6c d1 20 04 80 	movabs $0x800420d16c,%rax
  800420ad90:	00 00 00 
  800420ad93:	48 c1 e8 10          	shr    $0x10,%rax
  800420ad97:	89 c2                	mov    %eax,%edx
  800420ad99:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ada0:	00 00 00 
  800420ada3:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420adaa:	48 b8 6c d1 20 04 80 	movabs $0x800420d16c,%rax
  800420adb1:	00 00 00 
  800420adb4:	48 c1 e8 20          	shr    $0x20,%rax
  800420adb8:	89 c2                	mov    %eax,%edx
  800420adba:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420adc1:	00 00 00 
  800420adc4:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420adca:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420add1:	00 00 00 
  800420add4:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420addb:	00 00 00 
  800420adde:	48 b8 72 d1 20 04 80 	movabs $0x800420d172,%rax
  800420ade5:	00 00 00 
  800420ade8:	89 c2                	mov    %eax,%edx
  800420adea:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420adf1:	00 00 00 
  800420adf4:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420adfb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae02:	00 00 00 
  800420ae05:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420ae0c:	08 00 
  800420ae0e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae15:	00 00 00 
  800420ae18:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae1f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae22:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae28:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae2f:	00 00 00 
  800420ae32:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae39:	83 e2 07             	and    $0x7,%edx
  800420ae3c:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae42:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae49:	00 00 00 
  800420ae4c:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae53:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae56:	83 ca 0e             	or     $0xe,%edx
  800420ae59:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae5f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae66:	00 00 00 
  800420ae69:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae70:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae73:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae79:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae80:	00 00 00 
  800420ae83:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420ae8a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae8d:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420ae93:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae9a:	00 00 00 
  800420ae9d:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aea4:	83 ca 80             	or     $0xffffff80,%edx
  800420aea7:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420aead:	48 b8 72 d1 20 04 80 	movabs $0x800420d172,%rax
  800420aeb4:	00 00 00 
  800420aeb7:	48 c1 e8 10          	shr    $0x10,%rax
  800420aebb:	89 c2                	mov    %eax,%edx
  800420aebd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aec4:	00 00 00 
  800420aec7:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420aece:	48 b8 72 d1 20 04 80 	movabs $0x800420d172,%rax
  800420aed5:	00 00 00 
  800420aed8:	48 c1 e8 20          	shr    $0x20,%rax
  800420aedc:	89 c2                	mov    %eax,%edx
  800420aede:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aee5:	00 00 00 
  800420aee8:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420aeee:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aef5:	00 00 00 
  800420aef8:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420aeff:	00 00 00 
  800420af02:	48 b8 78 d1 20 04 80 	movabs $0x800420d178,%rax
  800420af09:	00 00 00 
  800420af0c:	89 c2                	mov    %eax,%edx
  800420af0e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af15:	00 00 00 
  800420af18:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420af1f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af26:	00 00 00 
  800420af29:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420af30:	08 00 
  800420af32:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af39:	00 00 00 
  800420af3c:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420af43:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af46:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420af4c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af53:	00 00 00 
  800420af56:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420af5d:	83 e2 07             	and    $0x7,%edx
  800420af60:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420af66:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af6d:	00 00 00 
  800420af70:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af77:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af7a:	83 ca 0e             	or     $0xe,%edx
  800420af7d:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af83:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af8a:	00 00 00 
  800420af8d:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420af94:	83 e2 ef             	and    $0xffffffef,%edx
  800420af97:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420af9d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420afa4:	00 00 00 
  800420afa7:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afae:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afb1:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afb7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420afbe:	00 00 00 
  800420afc1:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afc8:	83 ca 80             	or     $0xffffff80,%edx
  800420afcb:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afd1:	48 b8 78 d1 20 04 80 	movabs $0x800420d178,%rax
  800420afd8:	00 00 00 
  800420afdb:	48 c1 e8 10          	shr    $0x10,%rax
  800420afdf:	89 c2                	mov    %eax,%edx
  800420afe1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420afe8:	00 00 00 
  800420afeb:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420aff2:	48 b8 78 d1 20 04 80 	movabs $0x800420d178,%rax
  800420aff9:	00 00 00 
  800420affc:	48 c1 e8 20          	shr    $0x20,%rax
  800420b000:	89 c2                	mov    %eax,%edx
  800420b002:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b009:	00 00 00 
  800420b00c:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b012:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b019:	00 00 00 
  800420b01c:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b023:	00 00 00 
  800420b026:	48 b8 7e d1 20 04 80 	movabs $0x800420d17e,%rax
  800420b02d:	00 00 00 
  800420b030:	89 c2                	mov    %eax,%edx
  800420b032:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b039:	00 00 00 
  800420b03c:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b043:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b04a:	00 00 00 
  800420b04d:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b054:	08 00 
  800420b056:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b05d:	00 00 00 
  800420b060:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b067:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b06a:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b070:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b077:	00 00 00 
  800420b07a:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b081:	83 e2 07             	and    $0x7,%edx
  800420b084:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b08a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b091:	00 00 00 
  800420b094:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b09b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b09e:	83 ca 0e             	or     $0xe,%edx
  800420b0a1:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0a7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b0ae:	00 00 00 
  800420b0b1:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0b8:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0bb:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0c1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b0c8:	00 00 00 
  800420b0cb:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0d2:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0d5:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0db:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b0e2:	00 00 00 
  800420b0e5:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0ec:	83 ca 80             	or     $0xffffff80,%edx
  800420b0ef:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0f5:	48 b8 7e d1 20 04 80 	movabs $0x800420d17e,%rax
  800420b0fc:	00 00 00 
  800420b0ff:	48 c1 e8 10          	shr    $0x10,%rax
  800420b103:	89 c2                	mov    %eax,%edx
  800420b105:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b10c:	00 00 00 
  800420b10f:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b116:	48 b8 7e d1 20 04 80 	movabs $0x800420d17e,%rax
  800420b11d:	00 00 00 
  800420b120:	48 c1 e8 20          	shr    $0x20,%rax
  800420b124:	89 c2                	mov    %eax,%edx
  800420b126:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b12d:	00 00 00 
  800420b130:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b136:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b13d:	00 00 00 
  800420b140:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b147:	00 00 00 
  800420b14a:	48 b8 84 d1 20 04 80 	movabs $0x800420d184,%rax
  800420b151:	00 00 00 
  800420b154:	89 c2                	mov    %eax,%edx
  800420b156:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b15d:	00 00 00 
  800420b160:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b167:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b16e:	00 00 00 
  800420b171:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b178:	08 00 
  800420b17a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b181:	00 00 00 
  800420b184:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b18b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b18e:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b194:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b19b:	00 00 00 
  800420b19e:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b1a5:	83 e2 07             	and    $0x7,%edx
  800420b1a8:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b1ae:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b1b5:	00 00 00 
  800420b1b8:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b1bf:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1c2:	83 ca 0e             	or     $0xe,%edx
  800420b1c5:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1cb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b1d2:	00 00 00 
  800420b1d5:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b1dc:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1df:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1e5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b1ec:	00 00 00 
  800420b1ef:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b1f6:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b1f9:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b1ff:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b206:	00 00 00 
  800420b209:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b210:	83 ca 80             	or     $0xffffff80,%edx
  800420b213:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b219:	48 b8 84 d1 20 04 80 	movabs $0x800420d184,%rax
  800420b220:	00 00 00 
  800420b223:	48 c1 e8 10          	shr    $0x10,%rax
  800420b227:	89 c2                	mov    %eax,%edx
  800420b229:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b230:	00 00 00 
  800420b233:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b23a:	48 b8 84 d1 20 04 80 	movabs $0x800420d184,%rax
  800420b241:	00 00 00 
  800420b244:	48 c1 e8 20          	shr    $0x20,%rax
  800420b248:	89 c2                	mov    %eax,%edx
  800420b24a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b251:	00 00 00 
  800420b254:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b25a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b261:	00 00 00 
  800420b264:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b26b:	00 00 00 
  800420b26e:	48 b8 8a d1 20 04 80 	movabs $0x800420d18a,%rax
  800420b275:	00 00 00 
  800420b278:	89 c2                	mov    %eax,%edx
  800420b27a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b281:	00 00 00 
  800420b284:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b28b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b292:	00 00 00 
  800420b295:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b29c:	08 00 
  800420b29e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2a5:	00 00 00 
  800420b2a8:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b2af:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2b2:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b2b8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2bf:	00 00 00 
  800420b2c2:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b2c9:	83 e2 07             	and    $0x7,%edx
  800420b2cc:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b2d2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2d9:	00 00 00 
  800420b2dc:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b2e3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b2e6:	83 ca 0e             	or     $0xe,%edx
  800420b2e9:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b2ef:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2f6:	00 00 00 
  800420b2f9:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b300:	83 e2 ef             	and    $0xffffffef,%edx
  800420b303:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b309:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b310:	00 00 00 
  800420b313:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b31a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b31d:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b323:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b32a:	00 00 00 
  800420b32d:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b334:	83 ca 80             	or     $0xffffff80,%edx
  800420b337:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b33d:	48 b8 8a d1 20 04 80 	movabs $0x800420d18a,%rax
  800420b344:	00 00 00 
  800420b347:	48 c1 e8 10          	shr    $0x10,%rax
  800420b34b:	89 c2                	mov    %eax,%edx
  800420b34d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b354:	00 00 00 
  800420b357:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420b35e:	48 b8 8a d1 20 04 80 	movabs $0x800420d18a,%rax
  800420b365:	00 00 00 
  800420b368:	48 c1 e8 20          	shr    $0x20,%rax
  800420b36c:	89 c2                	mov    %eax,%edx
  800420b36e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b375:	00 00 00 
  800420b378:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420b37e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b385:	00 00 00 
  800420b388:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420b38f:	00 00 00 
  800420b392:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420b399:	00 00 00 
  800420b39c:	89 c2                	mov    %eax,%edx
  800420b39e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3a5:	00 00 00 
  800420b3a8:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420b3af:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3b6:	00 00 00 
  800420b3b9:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420b3c0:	08 00 
  800420b3c2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3c9:	00 00 00 
  800420b3cc:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b3d3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3d6:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b3dc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3e3:	00 00 00 
  800420b3e6:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b3ed:	83 e2 07             	and    $0x7,%edx
  800420b3f0:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b3f6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3fd:	00 00 00 
  800420b400:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b407:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b40a:	83 ca 0e             	or     $0xe,%edx
  800420b40d:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b413:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b41a:	00 00 00 
  800420b41d:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b424:	83 e2 ef             	and    $0xffffffef,%edx
  800420b427:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b42d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b434:	00 00 00 
  800420b437:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b43e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b441:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b447:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b44e:	00 00 00 
  800420b451:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b458:	83 ca 80             	or     $0xffffff80,%edx
  800420b45b:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b461:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420b468:	00 00 00 
  800420b46b:	48 c1 e8 10          	shr    $0x10,%rax
  800420b46f:	89 c2                	mov    %eax,%edx
  800420b471:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b478:	00 00 00 
  800420b47b:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420b482:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420b489:	00 00 00 
  800420b48c:	48 c1 e8 20          	shr    $0x20,%rax
  800420b490:	89 c2                	mov    %eax,%edx
  800420b492:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b499:	00 00 00 
  800420b49c:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420b4a2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b4a9:	00 00 00 
  800420b4ac:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420b4b3:	00 00 00 
  800420b4b6:	48 b8 96 d1 20 04 80 	movabs $0x800420d196,%rax
  800420b4bd:	00 00 00 
  800420b4c0:	89 c2                	mov    %eax,%edx
  800420b4c2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b4c9:	00 00 00 
  800420b4cc:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420b4d3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b4da:	00 00 00 
  800420b4dd:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420b4e4:	08 00 
  800420b4e6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b4ed:	00 00 00 
  800420b4f0:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b4f7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b4fa:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b500:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b507:	00 00 00 
  800420b50a:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b511:	83 e2 07             	and    $0x7,%edx
  800420b514:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b51a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b521:	00 00 00 
  800420b524:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b52b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b52e:	83 ca 0e             	or     $0xe,%edx
  800420b531:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b537:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b53e:	00 00 00 
  800420b541:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b548:	83 e2 ef             	and    $0xffffffef,%edx
  800420b54b:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b551:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b558:	00 00 00 
  800420b55b:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b562:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b565:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b56b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b572:	00 00 00 
  800420b575:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b57c:	83 ca 80             	or     $0xffffff80,%edx
  800420b57f:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b585:	48 b8 96 d1 20 04 80 	movabs $0x800420d196,%rax
  800420b58c:	00 00 00 
  800420b58f:	48 c1 e8 10          	shr    $0x10,%rax
  800420b593:	89 c2                	mov    %eax,%edx
  800420b595:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b59c:	00 00 00 
  800420b59f:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420b5a6:	48 b8 96 d1 20 04 80 	movabs $0x800420d196,%rax
  800420b5ad:	00 00 00 
  800420b5b0:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5b4:	89 c2                	mov    %eax,%edx
  800420b5b6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b5bd:	00 00 00 
  800420b5c0:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420b5c6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b5cd:	00 00 00 
  800420b5d0:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420b5d7:	00 00 00 
  800420b5da:	48 b8 9c d1 20 04 80 	movabs $0x800420d19c,%rax
  800420b5e1:	00 00 00 
  800420b5e4:	89 c2                	mov    %eax,%edx
  800420b5e6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b5ed:	00 00 00 
  800420b5f0:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420b5f7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b5fe:	00 00 00 
  800420b601:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420b608:	08 00 
  800420b60a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b611:	00 00 00 
  800420b614:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b61b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b61e:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b624:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b62b:	00 00 00 
  800420b62e:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b635:	83 e2 07             	and    $0x7,%edx
  800420b638:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b63e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b645:	00 00 00 
  800420b648:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b64f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b652:	83 ca 0e             	or     $0xe,%edx
  800420b655:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b65b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b662:	00 00 00 
  800420b665:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b66c:	83 e2 ef             	and    $0xffffffef,%edx
  800420b66f:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b675:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b67c:	00 00 00 
  800420b67f:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b686:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b689:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b68f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b696:	00 00 00 
  800420b699:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b6a0:	83 ca 80             	or     $0xffffff80,%edx
  800420b6a3:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b6a9:	48 b8 9c d1 20 04 80 	movabs $0x800420d19c,%rax
  800420b6b0:	00 00 00 
  800420b6b3:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6b7:	89 c2                	mov    %eax,%edx
  800420b6b9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b6c0:	00 00 00 
  800420b6c3:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420b6ca:	48 b8 9c d1 20 04 80 	movabs $0x800420d19c,%rax
  800420b6d1:	00 00 00 
  800420b6d4:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6d8:	89 c2                	mov    %eax,%edx
  800420b6da:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b6e1:	00 00 00 
  800420b6e4:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420b6ea:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b6f1:	00 00 00 
  800420b6f4:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420b6fb:	00 00 00 
  800420b6fe:	48 b8 a2 d1 20 04 80 	movabs $0x800420d1a2,%rax
  800420b705:	00 00 00 
  800420b708:	89 c2                	mov    %eax,%edx
  800420b70a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b711:	00 00 00 
  800420b714:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420b71b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b722:	00 00 00 
  800420b725:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420b72c:	08 00 
  800420b72e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b735:	00 00 00 
  800420b738:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b73f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b742:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b748:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b74f:	00 00 00 
  800420b752:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b759:	83 e2 07             	and    $0x7,%edx
  800420b75c:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b762:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b769:	00 00 00 
  800420b76c:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b773:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b776:	83 ca 0e             	or     $0xe,%edx
  800420b779:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b77f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b786:	00 00 00 
  800420b789:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b790:	83 e2 ef             	and    $0xffffffef,%edx
  800420b793:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b799:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b7a0:	00 00 00 
  800420b7a3:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7aa:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7ad:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7b3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b7ba:	00 00 00 
  800420b7bd:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7c4:	83 ca 80             	or     $0xffffff80,%edx
  800420b7c7:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7cd:	48 b8 a2 d1 20 04 80 	movabs $0x800420d1a2,%rax
  800420b7d4:	00 00 00 
  800420b7d7:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7db:	89 c2                	mov    %eax,%edx
  800420b7dd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b7e4:	00 00 00 
  800420b7e7:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420b7ee:	48 b8 a2 d1 20 04 80 	movabs $0x800420d1a2,%rax
  800420b7f5:	00 00 00 
  800420b7f8:	48 c1 e8 20          	shr    $0x20,%rax
  800420b7fc:	89 c2                	mov    %eax,%edx
  800420b7fe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b805:	00 00 00 
  800420b808:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420b80e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b815:	00 00 00 
  800420b818:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420b81f:	00 00 00 
  800420b822:	48 b8 a8 d1 20 04 80 	movabs $0x800420d1a8,%rax
  800420b829:	00 00 00 
  800420b82c:	89 c2                	mov    %eax,%edx
  800420b82e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b835:	00 00 00 
  800420b838:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420b83f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b846:	00 00 00 
  800420b849:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420b850:	08 00 
  800420b852:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b859:	00 00 00 
  800420b85c:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b863:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b866:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b86c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b873:	00 00 00 
  800420b876:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b87d:	83 e2 07             	and    $0x7,%edx
  800420b880:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b886:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b88d:	00 00 00 
  800420b890:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b897:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b89a:	83 ca 0e             	or     $0xe,%edx
  800420b89d:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8a3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b8aa:	00 00 00 
  800420b8ad:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8b4:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8b7:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8bd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b8c4:	00 00 00 
  800420b8c7:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8ce:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8d1:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8d7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b8de:	00 00 00 
  800420b8e1:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8e8:	83 ca 80             	or     $0xffffff80,%edx
  800420b8eb:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8f1:	48 b8 a8 d1 20 04 80 	movabs $0x800420d1a8,%rax
  800420b8f8:	00 00 00 
  800420b8fb:	48 c1 e8 10          	shr    $0x10,%rax
  800420b8ff:	89 c2                	mov    %eax,%edx
  800420b901:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b908:	00 00 00 
  800420b90b:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420b912:	48 b8 a8 d1 20 04 80 	movabs $0x800420d1a8,%rax
  800420b919:	00 00 00 
  800420b91c:	48 c1 e8 20          	shr    $0x20,%rax
  800420b920:	89 c2                	mov    %eax,%edx
  800420b922:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b929:	00 00 00 
  800420b92c:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420b932:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b939:	00 00 00 
  800420b93c:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420b943:	00 00 00 
  800420b946:	48 b8 ae d1 20 04 80 	movabs $0x800420d1ae,%rax
  800420b94d:	00 00 00 
  800420b950:	89 c2                	mov    %eax,%edx
  800420b952:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b959:	00 00 00 
  800420b95c:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420b963:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b96a:	00 00 00 
  800420b96d:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420b974:	08 00 
  800420b976:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b97d:	00 00 00 
  800420b980:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b987:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b98a:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b990:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b997:	00 00 00 
  800420b99a:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b9a1:	83 e2 07             	and    $0x7,%edx
  800420b9a4:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b9aa:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b9b1:	00 00 00 
  800420b9b4:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9bb:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9be:	83 ca 0e             	or     $0xe,%edx
  800420b9c1:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9c7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b9ce:	00 00 00 
  800420b9d1:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9d8:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9db:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9e1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b9e8:	00 00 00 
  800420b9eb:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420b9f2:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b9f5:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420b9fb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba02:	00 00 00 
  800420ba05:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba0c:	83 ca 80             	or     $0xffffff80,%edx
  800420ba0f:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba15:	48 b8 ae d1 20 04 80 	movabs $0x800420d1ae,%rax
  800420ba1c:	00 00 00 
  800420ba1f:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba23:	89 c2                	mov    %eax,%edx
  800420ba25:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba2c:	00 00 00 
  800420ba2f:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420ba36:	48 b8 ae d1 20 04 80 	movabs $0x800420d1ae,%rax
  800420ba3d:	00 00 00 
  800420ba40:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba44:	89 c2                	mov    %eax,%edx
  800420ba46:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba4d:	00 00 00 
  800420ba50:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420ba56:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba5d:	00 00 00 
  800420ba60:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420ba67:	00 00 00 
  800420ba6a:	48 b8 b4 d1 20 04 80 	movabs $0x800420d1b4,%rax
  800420ba71:	00 00 00 
  800420ba74:	89 c2                	mov    %eax,%edx
  800420ba76:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba7d:	00 00 00 
  800420ba80:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420ba87:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba8e:	00 00 00 
  800420ba91:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420ba98:	08 00 
  800420ba9a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420baa1:	00 00 00 
  800420baa4:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420baab:	83 e2 f8             	and    $0xfffffff8,%edx
  800420baae:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420bab4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420babb:	00 00 00 
  800420babe:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420bac5:	83 e2 07             	and    $0x7,%edx
  800420bac8:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420bace:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bad5:	00 00 00 
  800420bad8:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420badf:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bae2:	83 ca 0e             	or     $0xe,%edx
  800420bae5:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420baeb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420baf2:	00 00 00 
  800420baf5:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bafc:	83 e2 ef             	and    $0xffffffef,%edx
  800420baff:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb05:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb0c:	00 00 00 
  800420bb0f:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb16:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb19:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb1f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb26:	00 00 00 
  800420bb29:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb30:	83 ca 80             	or     $0xffffff80,%edx
  800420bb33:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb39:	48 b8 b4 d1 20 04 80 	movabs $0x800420d1b4,%rax
  800420bb40:	00 00 00 
  800420bb43:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb47:	89 c2                	mov    %eax,%edx
  800420bb49:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb50:	00 00 00 
  800420bb53:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420bb5a:	48 b8 b4 d1 20 04 80 	movabs $0x800420d1b4,%rax
  800420bb61:	00 00 00 
  800420bb64:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb68:	89 c2                	mov    %eax,%edx
  800420bb6a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb71:	00 00 00 
  800420bb74:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420bb7a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb81:	00 00 00 
  800420bb84:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420bb8b:	00 00 00 
  800420bb8e:	48 b8 ba d1 20 04 80 	movabs $0x800420d1ba,%rax
  800420bb95:	00 00 00 
  800420bb98:	89 c2                	mov    %eax,%edx
  800420bb9a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bba1:	00 00 00 
  800420bba4:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420bbab:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bbb2:	00 00 00 
  800420bbb5:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420bbbc:	08 00 
  800420bbbe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bbc5:	00 00 00 
  800420bbc8:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bbcf:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbd2:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bbd8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bbdf:	00 00 00 
  800420bbe2:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bbe9:	83 e2 07             	and    $0x7,%edx
  800420bbec:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bbf2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bbf9:	00 00 00 
  800420bbfc:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc03:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc06:	83 ca 0e             	or     $0xe,%edx
  800420bc09:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc0f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc16:	00 00 00 
  800420bc19:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc20:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc23:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc29:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc30:	00 00 00 
  800420bc33:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc3a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc3d:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc43:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc4a:	00 00 00 
  800420bc4d:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc54:	83 ca 80             	or     $0xffffff80,%edx
  800420bc57:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc5d:	48 b8 ba d1 20 04 80 	movabs $0x800420d1ba,%rax
  800420bc64:	00 00 00 
  800420bc67:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc6b:	89 c2                	mov    %eax,%edx
  800420bc6d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc74:	00 00 00 
  800420bc77:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420bc7e:	48 b8 ba d1 20 04 80 	movabs $0x800420d1ba,%rax
  800420bc85:	00 00 00 
  800420bc88:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc8c:	89 c2                	mov    %eax,%edx
  800420bc8e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc95:	00 00 00 
  800420bc98:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420bc9e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bca5:	00 00 00 
  800420bca8:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420bcaf:	00 00 00 
  800420bcb2:	48 b8 c0 d1 20 04 80 	movabs $0x800420d1c0,%rax
  800420bcb9:	00 00 00 
  800420bcbc:	89 c2                	mov    %eax,%edx
  800420bcbe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bcc5:	00 00 00 
  800420bcc8:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420bccf:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bcd6:	00 00 00 
  800420bcd9:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420bce0:	08 00 
  800420bce2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bce9:	00 00 00 
  800420bcec:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bcf3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bcf6:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bcfc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd03:	00 00 00 
  800420bd06:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bd0d:	83 e2 07             	and    $0x7,%edx
  800420bd10:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bd16:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd1d:	00 00 00 
  800420bd20:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd27:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd2a:	83 ca 0e             	or     $0xe,%edx
  800420bd2d:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd33:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd3a:	00 00 00 
  800420bd3d:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd44:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd47:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd4d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd54:	00 00 00 
  800420bd57:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd5e:	83 ca 60             	or     $0x60,%edx
  800420bd61:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd67:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd6e:	00 00 00 
  800420bd71:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd78:	83 ca 80             	or     $0xffffff80,%edx
  800420bd7b:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd81:	48 b8 c0 d1 20 04 80 	movabs $0x800420d1c0,%rax
  800420bd88:	00 00 00 
  800420bd8b:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd8f:	89 c2                	mov    %eax,%edx
  800420bd91:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd98:	00 00 00 
  800420bd9b:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420bda2:	48 b8 c0 d1 20 04 80 	movabs $0x800420d1c0,%rax
  800420bda9:	00 00 00 
  800420bdac:	48 c1 e8 20          	shr    $0x20,%rax
  800420bdb0:	89 c2                	mov    %eax,%edx
  800420bdb2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bdb9:	00 00 00 
  800420bdbc:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420bdc2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bdc9:	00 00 00 
  800420bdcc:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420bdd3:	00 00 00 
  800420bdd6:	48 b8 80 f2 49 04 80 	movabs $0x800449f280,%rax
  800420bddd:	00 00 00 
  800420bde0:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420bde5:	48 ba 80 e2 49 04 80 	movabs $0x800449e280,%rdx
  800420bdec:	00 00 00 
  800420bdef:	48 b8 80 f2 49 04 80 	movabs $0x800449f280,%rax
  800420bdf6:	00 00 00 
  800420bdf9:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420bdfd:	48 b8 0b be 20 04 80 	movabs $0x800420be0b,%rax
  800420be04:	00 00 00 
  800420be07:	ff d0                	callq  *%rax
  800420be09:	c9                   	leaveq 
  800420be0a:	c3                   	retq   

000000800420be0b <trap_init_percpu>:
  800420be0b:	55                   	push   %rbp
  800420be0c:	48 89 e5             	mov    %rsp,%rbp
  800420be0f:	53                   	push   %rbx
  800420be10:	48 83 ec 18          	sub    $0x18,%rsp
  800420be14:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420be1b:	00 00 00 
  800420be1e:	ff d0                	callq  *%rax
  800420be20:	01 c0                	add    %eax,%eax
  800420be22:	83 c0 05             	add    $0x5,%eax
  800420be25:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420be28:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420be2f:	00 00 00 
  800420be32:	ff d0                	callq  *%rax
  800420be34:	89 c3                	mov    %eax,%ebx
  800420be36:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420be3d:	00 00 00 
  800420be40:	ff d0                	callq  *%rax
  800420be42:	89 c2                	mov    %eax,%edx
  800420be44:	89 d0                	mov    %edx,%eax
  800420be46:	01 c0                	add    %eax,%eax
  800420be48:	01 d0                	add    %edx,%eax
  800420be4a:	c1 e0 0f             	shl    $0xf,%eax
  800420be4d:	48 98                	cltq   
  800420be4f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420be56:	00 00 00 
  800420be59:	48 29 c2             	sub    %rax,%rdx
  800420be5c:	48 89 d0             	mov    %rdx,%rax
  800420be5f:	48 89 c2             	mov    %rax,%rdx
  800420be62:	48 b9 20 f0 69 04 80 	movabs $0x800469f020,%rcx
  800420be69:	00 00 00 
  800420be6c:	48 63 c3             	movslq %ebx,%rax
  800420be6f:	48 c1 e0 03          	shl    $0x3,%rax
  800420be73:	48 89 c6             	mov    %rax,%rsi
  800420be76:	48 c1 e6 04          	shl    $0x4,%rsi
  800420be7a:	48 01 f0             	add    %rsi,%rax
  800420be7d:	48 01 c8             	add    %rcx,%rax
  800420be80:	48 83 c0 10          	add    $0x10,%rax
  800420be84:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420be88:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420be8f:	00 00 00 
  800420be92:	48 8b 00             	mov    (%rax),%rax
  800420be95:	48 c1 f8 10          	sar    $0x10,%rax
  800420be99:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420be9d:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bea4:	00 00 00 
  800420bea7:	ff d0                	callq  *%rax
  800420bea9:	c1 e0 04             	shl    $0x4,%eax
  800420beac:	48 98                	cltq   
  800420beae:	48 01 d8             	add    %rbx,%rax
  800420beb1:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420beb6:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bebd:	00 00 00 
  800420bec0:	48 8b 00             	mov    (%rax),%rax
  800420bec3:	48 c1 f8 10          	sar    $0x10,%rax
  800420bec7:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420becb:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bed2:	00 00 00 
  800420bed5:	ff d0                	callq  *%rax
  800420bed7:	c1 e0 04             	shl    $0x4,%eax
  800420beda:	48 98                	cltq   
  800420bedc:	48 01 d8             	add    %rbx,%rax
  800420bedf:	48 89 c3             	mov    %rax,%rbx
  800420bee2:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bee9:	00 00 00 
  800420beec:	ff d0                	callq  *%rax
  800420beee:	48 98                	cltq   
  800420bef0:	48 c1 e0 03          	shl    $0x3,%rax
  800420bef4:	48 89 c2             	mov    %rax,%rdx
  800420bef7:	48 c1 e2 04          	shl    $0x4,%rdx
  800420befb:	48 01 d0             	add    %rdx,%rax
  800420befe:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bf02:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420bf09:	00 00 00 
  800420bf0c:	48 01 d0             	add    %rdx,%rax
  800420bf0f:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420bf13:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf1a:	00 00 00 
  800420bf1d:	48 8b 00             	mov    (%rax),%rax
  800420bf20:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf24:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf28:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bf2f:	00 00 00 
  800420bf32:	ff d0                	callq  *%rax
  800420bf34:	c1 e0 04             	shl    $0x4,%eax
  800420bf37:	48 98                	cltq   
  800420bf39:	48 01 d8             	add    %rbx,%rax
  800420bf3c:	48 89 c3             	mov    %rax,%rbx
  800420bf3f:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bf46:	00 00 00 
  800420bf49:	ff d0                	callq  *%rax
  800420bf4b:	48 98                	cltq   
  800420bf4d:	48 c1 e0 03          	shl    $0x3,%rax
  800420bf51:	48 89 c2             	mov    %rax,%rdx
  800420bf54:	48 c1 e2 04          	shl    $0x4,%rdx
  800420bf58:	48 01 d0             	add    %rdx,%rax
  800420bf5b:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bf5f:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420bf66:	00 00 00 
  800420bf69:	48 01 d0             	add    %rdx,%rax
  800420bf6c:	48 c1 e8 10          	shr    $0x10,%rax
  800420bf70:	88 43 04             	mov    %al,0x4(%rbx)
  800420bf73:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf7a:	00 00 00 
  800420bf7d:	48 8b 00             	mov    (%rax),%rax
  800420bf80:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf84:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf88:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bf8f:	00 00 00 
  800420bf92:	ff d0                	callq  *%rax
  800420bf94:	c1 e0 04             	shl    $0x4,%eax
  800420bf97:	48 98                	cltq   
  800420bf99:	48 01 d8             	add    %rbx,%rax
  800420bf9c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bfa0:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bfa3:	83 ca 09             	or     $0x9,%edx
  800420bfa6:	88 50 05             	mov    %dl,0x5(%rax)
  800420bfa9:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfb0:	00 00 00 
  800420bfb3:	48 8b 00             	mov    (%rax),%rax
  800420bfb6:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfba:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bfbe:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bfc5:	00 00 00 
  800420bfc8:	ff d0                	callq  *%rax
  800420bfca:	c1 e0 04             	shl    $0x4,%eax
  800420bfcd:	48 98                	cltq   
  800420bfcf:	48 01 d8             	add    %rbx,%rax
  800420bfd2:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bfd6:	83 e2 ef             	and    $0xffffffef,%edx
  800420bfd9:	88 50 05             	mov    %dl,0x5(%rax)
  800420bfdc:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfe3:	00 00 00 
  800420bfe6:	48 8b 00             	mov    (%rax),%rax
  800420bfe9:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfed:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bff1:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420bff8:	00 00 00 
  800420bffb:	ff d0                	callq  *%rax
  800420bffd:	c1 e0 04             	shl    $0x4,%eax
  800420c000:	48 98                	cltq   
  800420c002:	48 01 d8             	add    %rbx,%rax
  800420c005:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c009:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c00c:	88 50 05             	mov    %dl,0x5(%rax)
  800420c00f:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c016:	00 00 00 
  800420c019:	48 8b 00             	mov    (%rax),%rax
  800420c01c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c020:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c024:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c02b:	00 00 00 
  800420c02e:	ff d0                	callq  *%rax
  800420c030:	c1 e0 04             	shl    $0x4,%eax
  800420c033:	48 98                	cltq   
  800420c035:	48 01 d8             	add    %rbx,%rax
  800420c038:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c03c:	83 ca 80             	or     $0xffffff80,%edx
  800420c03f:	88 50 05             	mov    %dl,0x5(%rax)
  800420c042:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c049:	00 00 00 
  800420c04c:	48 8b 00             	mov    (%rax),%rax
  800420c04f:	48 c1 f8 10          	sar    $0x10,%rax
  800420c053:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c057:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c05e:	00 00 00 
  800420c061:	ff d0                	callq  *%rax
  800420c063:	c1 e0 04             	shl    $0x4,%eax
  800420c066:	48 98                	cltq   
  800420c068:	48 01 d8             	add    %rbx,%rax
  800420c06b:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c06f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c072:	88 50 06             	mov    %dl,0x6(%rax)
  800420c075:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c07c:	00 00 00 
  800420c07f:	48 8b 00             	mov    (%rax),%rax
  800420c082:	48 c1 f8 10          	sar    $0x10,%rax
  800420c086:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c08a:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c091:	00 00 00 
  800420c094:	ff d0                	callq  *%rax
  800420c096:	c1 e0 04             	shl    $0x4,%eax
  800420c099:	48 98                	cltq   
  800420c09b:	48 01 d8             	add    %rbx,%rax
  800420c09e:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0a2:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0a5:	88 50 06             	mov    %dl,0x6(%rax)
  800420c0a8:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0af:	00 00 00 
  800420c0b2:	48 8b 00             	mov    (%rax),%rax
  800420c0b5:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0b9:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0bd:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c0c4:	00 00 00 
  800420c0c7:	ff d0                	callq  *%rax
  800420c0c9:	c1 e0 04             	shl    $0x4,%eax
  800420c0cc:	48 98                	cltq   
  800420c0ce:	48 01 d8             	add    %rbx,%rax
  800420c0d1:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0d5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0d8:	88 50 06             	mov    %dl,0x6(%rax)
  800420c0db:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0e2:	00 00 00 
  800420c0e5:	48 8b 00             	mov    (%rax),%rax
  800420c0e8:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0ec:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0f0:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c0f7:	00 00 00 
  800420c0fa:	ff d0                	callq  *%rax
  800420c0fc:	c1 e0 04             	shl    $0x4,%eax
  800420c0ff:	48 98                	cltq   
  800420c101:	48 01 d8             	add    %rbx,%rax
  800420c104:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c108:	83 e2 7f             	and    $0x7f,%edx
  800420c10b:	88 50 06             	mov    %dl,0x6(%rax)
  800420c10e:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c115:	00 00 00 
  800420c118:	48 8b 00             	mov    (%rax),%rax
  800420c11b:	48 c1 f8 10          	sar    $0x10,%rax
  800420c11f:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c123:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c12a:	00 00 00 
  800420c12d:	ff d0                	callq  *%rax
  800420c12f:	c1 e0 04             	shl    $0x4,%eax
  800420c132:	48 98                	cltq   
  800420c134:	48 01 d8             	add    %rbx,%rax
  800420c137:	48 89 c3             	mov    %rax,%rbx
  800420c13a:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c141:	00 00 00 
  800420c144:	ff d0                	callq  *%rax
  800420c146:	48 98                	cltq   
  800420c148:	48 c1 e0 03          	shl    $0x3,%rax
  800420c14c:	48 89 c2             	mov    %rax,%rdx
  800420c14f:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c153:	48 01 d0             	add    %rdx,%rax
  800420c156:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c15a:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420c161:	00 00 00 
  800420c164:	48 01 d0             	add    %rdx,%rax
  800420c167:	48 c1 e8 18          	shr    $0x18,%rax
  800420c16b:	88 43 07             	mov    %al,0x7(%rbx)
  800420c16e:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c175:	00 00 00 
  800420c178:	48 8b 00             	mov    (%rax),%rax
  800420c17b:	48 c1 f8 10          	sar    $0x10,%rax
  800420c17f:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c183:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c18a:	00 00 00 
  800420c18d:	ff d0                	callq  *%rax
  800420c18f:	c1 e0 04             	shl    $0x4,%eax
  800420c192:	48 98                	cltq   
  800420c194:	48 01 d8             	add    %rbx,%rax
  800420c197:	48 89 c3             	mov    %rax,%rbx
  800420c19a:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c1a1:	00 00 00 
  800420c1a4:	ff d0                	callq  *%rax
  800420c1a6:	48 98                	cltq   
  800420c1a8:	48 c1 e0 03          	shl    $0x3,%rax
  800420c1ac:	48 89 c2             	mov    %rax,%rdx
  800420c1af:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c1b3:	48 01 d0             	add    %rdx,%rax
  800420c1b6:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c1ba:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420c1c1:	00 00 00 
  800420c1c4:	48 01 d0             	add    %rdx,%rax
  800420c1c7:	48 c1 e8 20          	shr    $0x20,%rax
  800420c1cb:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c1ce:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c1d5:	00 00 00 
  800420c1d8:	48 8b 00             	mov    (%rax),%rax
  800420c1db:	48 c1 f8 10          	sar    $0x10,%rax
  800420c1df:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c1e3:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c1ea:	00 00 00 
  800420c1ed:	ff d0                	callq  *%rax
  800420c1ef:	c1 e0 04             	shl    $0x4,%eax
  800420c1f2:	48 98                	cltq   
  800420c1f4:	48 01 d8             	add    %rbx,%rax
  800420c1f7:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c1fb:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c202:	00 00 00 
  800420c205:	48 8b 00             	mov    (%rax),%rax
  800420c208:	48 c1 f8 10          	sar    $0x10,%rax
  800420c20c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c210:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c217:	00 00 00 
  800420c21a:	ff d0                	callq  *%rax
  800420c21c:	c1 e0 04             	shl    $0x4,%eax
  800420c21f:	48 98                	cltq   
  800420c221:	48 01 d8             	add    %rbx,%rax
  800420c224:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c228:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c22f:	00 00 00 
  800420c232:	48 8b 00             	mov    (%rax),%rax
  800420c235:	48 c1 f8 10          	sar    $0x10,%rax
  800420c239:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c23d:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c244:	00 00 00 
  800420c247:	ff d0                	callq  *%rax
  800420c249:	c1 e0 04             	shl    $0x4,%eax
  800420c24c:	48 98                	cltq   
  800420c24e:	48 01 d8             	add    %rbx,%rax
  800420c251:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c257:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c25a:	c1 e0 03             	shl    $0x3,%eax
  800420c25d:	0f b7 c0             	movzwl %ax,%eax
  800420c260:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c264:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c268:	0f 00 d8             	ltr    %ax
  800420c26b:	48 b8 80 f2 49 04 80 	movabs $0x800449f280,%rax
  800420c272:	00 00 00 
  800420c275:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c279:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c27d:	0f 01 18             	lidt   (%rax)
  800420c280:	48 83 c4 18          	add    $0x18,%rsp
  800420c284:	5b                   	pop    %rbx
  800420c285:	5d                   	pop    %rbp
  800420c286:	c3                   	retq   

000000800420c287 <print_trapframe>:
  800420c287:	55                   	push   %rbp
  800420c288:	48 89 e5             	mov    %rsp,%rbp
  800420c28b:	48 83 ec 20          	sub    $0x20,%rsp
  800420c28f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c293:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c29a:	00 00 00 
  800420c29d:	ff d0                	callq  *%rax
  800420c29f:	89 c2                	mov    %eax,%edx
  800420c2a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2a5:	48 89 c6             	mov    %rax,%rsi
  800420c2a8:	48 bf ae a1 21 04 80 	movabs $0x800421a1ae,%rdi
  800420c2af:	00 00 00 
  800420c2b2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2b7:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420c2be:	00 00 00 
  800420c2c1:	ff d1                	callq  *%rcx
  800420c2c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2c7:	48 89 c7             	mov    %rax,%rdi
  800420c2ca:	48 b8 98 c5 20 04 80 	movabs $0x800420c598,%rax
  800420c2d1:	00 00 00 
  800420c2d4:	ff d0                	callq  *%rax
  800420c2d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2da:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c2de:	0f b7 c0             	movzwl %ax,%eax
  800420c2e1:	89 c6                	mov    %eax,%esi
  800420c2e3:	48 bf cc a1 21 04 80 	movabs $0x800421a1cc,%rdi
  800420c2ea:	00 00 00 
  800420c2ed:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2f2:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c2f9:	00 00 00 
  800420c2fc:	ff d2                	callq  *%rdx
  800420c2fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c302:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c309:	0f b7 c0             	movzwl %ax,%eax
  800420c30c:	89 c6                	mov    %eax,%esi
  800420c30e:	48 bf df a1 21 04 80 	movabs $0x800421a1df,%rdi
  800420c315:	00 00 00 
  800420c318:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c31d:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c324:	00 00 00 
  800420c327:	ff d2                	callq  *%rdx
  800420c329:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c32d:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c334:	89 c7                	mov    %eax,%edi
  800420c336:	48 b8 a9 96 20 04 80 	movabs $0x80042096a9,%rax
  800420c33d:	00 00 00 
  800420c340:	ff d0                	callq  *%rax
  800420c342:	48 89 c2             	mov    %rax,%rdx
  800420c345:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c349:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c350:	48 89 c6             	mov    %rax,%rsi
  800420c353:	48 bf f2 a1 21 04 80 	movabs $0x800421a1f2,%rdi
  800420c35a:	00 00 00 
  800420c35d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c362:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420c369:	00 00 00 
  800420c36c:	ff d1                	callq  *%rcx
  800420c36e:	48 b8 90 f2 49 04 80 	movabs $0x800449f290,%rax
  800420c375:	00 00 00 
  800420c378:	48 8b 00             	mov    (%rax),%rax
  800420c37b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420c37f:	75 3a                	jne    800420c3bb <print_trapframe+0x134>
  800420c381:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c385:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c38c:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c390:	75 29                	jne    800420c3bb <print_trapframe+0x134>
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420c392:	0f 20 d0             	mov    %cr2,%rax
  800420c395:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420c399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c39d:	48 89 c6             	mov    %rax,%rsi
  800420c3a0:	48 bf 04 a2 21 04 80 	movabs $0x800421a204,%rdi
  800420c3a7:	00 00 00 
  800420c3aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c3af:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c3b6:	00 00 00 
  800420c3b9:	ff d2                	callq  *%rdx
  800420c3bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3bf:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c3c6:	48 89 c6             	mov    %rax,%rsi
  800420c3c9:	48 bf 13 a2 21 04 80 	movabs $0x800421a213,%rdi
  800420c3d0:	00 00 00 
  800420c3d3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c3d8:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c3df:	00 00 00 
  800420c3e2:	ff d2                	callq  *%rdx
  800420c3e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3e8:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c3ef:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c3f3:	0f 85 9c 00 00 00    	jne    800420c495 <print_trapframe+0x20e>
  800420c3f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3fd:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c404:	83 e0 01             	and    $0x1,%eax
  800420c407:	48 85 c0             	test   %rax,%rax
  800420c40a:	74 0c                	je     800420c418 <print_trapframe+0x191>
  800420c40c:	48 b9 21 a2 21 04 80 	movabs $0x800421a221,%rcx
  800420c413:	00 00 00 
  800420c416:	eb 0a                	jmp    800420c422 <print_trapframe+0x19b>
  800420c418:	48 b9 2c a2 21 04 80 	movabs $0x800421a22c,%rcx
  800420c41f:	00 00 00 
  800420c422:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c426:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c42d:	83 e0 02             	and    $0x2,%eax
  800420c430:	48 85 c0             	test   %rax,%rax
  800420c433:	74 0c                	je     800420c441 <print_trapframe+0x1ba>
  800420c435:	48 ba 38 a2 21 04 80 	movabs $0x800421a238,%rdx
  800420c43c:	00 00 00 
  800420c43f:	eb 0a                	jmp    800420c44b <print_trapframe+0x1c4>
  800420c441:	48 ba 3e a2 21 04 80 	movabs $0x800421a23e,%rdx
  800420c448:	00 00 00 
  800420c44b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c44f:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c456:	83 e0 04             	and    $0x4,%eax
  800420c459:	48 85 c0             	test   %rax,%rax
  800420c45c:	74 0c                	je     800420c46a <print_trapframe+0x1e3>
  800420c45e:	48 b8 43 a2 21 04 80 	movabs $0x800421a243,%rax
  800420c465:	00 00 00 
  800420c468:	eb 0a                	jmp    800420c474 <print_trapframe+0x1ed>
  800420c46a:	48 b8 48 a2 21 04 80 	movabs $0x800421a248,%rax
  800420c471:	00 00 00 
  800420c474:	48 89 c6             	mov    %rax,%rsi
  800420c477:	48 bf 4f a2 21 04 80 	movabs $0x800421a24f,%rdi
  800420c47e:	00 00 00 
  800420c481:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c486:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  800420c48d:	00 00 00 
  800420c490:	41 ff d0             	callq  *%r8
  800420c493:	eb 1b                	jmp    800420c4b0 <print_trapframe+0x229>
  800420c495:	48 bf 5e a2 21 04 80 	movabs $0x800421a25e,%rdi
  800420c49c:	00 00 00 
  800420c49f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4a4:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c4ab:	00 00 00 
  800420c4ae:	ff d2                	callq  *%rdx
  800420c4b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4b4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420c4bb:	48 89 c6             	mov    %rax,%rsi
  800420c4be:	48 bf 60 a2 21 04 80 	movabs $0x800421a260,%rdi
  800420c4c5:	00 00 00 
  800420c4c8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4cd:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c4d4:	00 00 00 
  800420c4d7:	ff d2                	callq  *%rdx
  800420c4d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4dd:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c4e4:	0f b7 c0             	movzwl %ax,%eax
  800420c4e7:	89 c6                	mov    %eax,%esi
  800420c4e9:	48 bf 6f a2 21 04 80 	movabs $0x800421a26f,%rdi
  800420c4f0:	00 00 00 
  800420c4f3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4f8:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c4ff:	00 00 00 
  800420c502:	ff d2                	callq  *%rdx
  800420c504:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c508:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420c50f:	48 89 c6             	mov    %rax,%rsi
  800420c512:	48 bf 82 a2 21 04 80 	movabs $0x800421a282,%rdi
  800420c519:	00 00 00 
  800420c51c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c521:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c528:	00 00 00 
  800420c52b:	ff d2                	callq  *%rdx
  800420c52d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c531:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c538:	0f b7 c0             	movzwl %ax,%eax
  800420c53b:	83 e0 03             	and    $0x3,%eax
  800420c53e:	85 c0                	test   %eax,%eax
  800420c540:	74 54                	je     800420c596 <print_trapframe+0x30f>
  800420c542:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c546:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420c54d:	48 89 c6             	mov    %rax,%rsi
  800420c550:	48 bf 91 a2 21 04 80 	movabs $0x800421a291,%rdi
  800420c557:	00 00 00 
  800420c55a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c55f:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c566:	00 00 00 
  800420c569:	ff d2                	callq  *%rdx
  800420c56b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c56f:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420c576:	0f b7 c0             	movzwl %ax,%eax
  800420c579:	89 c6                	mov    %eax,%esi
  800420c57b:	48 bf a0 a2 21 04 80 	movabs $0x800421a2a0,%rdi
  800420c582:	00 00 00 
  800420c585:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c58a:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c591:	00 00 00 
  800420c594:	ff d2                	callq  *%rdx
  800420c596:	c9                   	leaveq 
  800420c597:	c3                   	retq   

000000800420c598 <print_regs>:
  800420c598:	55                   	push   %rbp
  800420c599:	48 89 e5             	mov    %rsp,%rbp
  800420c59c:	48 83 ec 10          	sub    $0x10,%rsp
  800420c5a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420c5a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5a8:	48 8b 00             	mov    (%rax),%rax
  800420c5ab:	48 89 c6             	mov    %rax,%rsi
  800420c5ae:	48 bf b3 a2 21 04 80 	movabs $0x800421a2b3,%rdi
  800420c5b5:	00 00 00 
  800420c5b8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5bd:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c5c4:	00 00 00 
  800420c5c7:	ff d2                	callq  *%rdx
  800420c5c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5cd:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420c5d1:	48 89 c6             	mov    %rax,%rsi
  800420c5d4:	48 bf c2 a2 21 04 80 	movabs $0x800421a2c2,%rdi
  800420c5db:	00 00 00 
  800420c5de:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5e3:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c5ea:	00 00 00 
  800420c5ed:	ff d2                	callq  *%rdx
  800420c5ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c5f3:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420c5f7:	48 89 c6             	mov    %rax,%rsi
  800420c5fa:	48 bf d1 a2 21 04 80 	movabs $0x800421a2d1,%rdi
  800420c601:	00 00 00 
  800420c604:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c609:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c610:	00 00 00 
  800420c613:	ff d2                	callq  *%rdx
  800420c615:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c619:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c61d:	48 89 c6             	mov    %rax,%rsi
  800420c620:	48 bf e0 a2 21 04 80 	movabs $0x800421a2e0,%rdi
  800420c627:	00 00 00 
  800420c62a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c62f:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c636:	00 00 00 
  800420c639:	ff d2                	callq  *%rdx
  800420c63b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c63f:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420c643:	48 89 c6             	mov    %rax,%rsi
  800420c646:	48 bf ef a2 21 04 80 	movabs $0x800421a2ef,%rdi
  800420c64d:	00 00 00 
  800420c650:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c655:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c65c:	00 00 00 
  800420c65f:	ff d2                	callq  *%rdx
  800420c661:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c665:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420c669:	48 89 c6             	mov    %rax,%rsi
  800420c66c:	48 bf fe a2 21 04 80 	movabs $0x800421a2fe,%rdi
  800420c673:	00 00 00 
  800420c676:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c67b:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c682:	00 00 00 
  800420c685:	ff d2                	callq  *%rdx
  800420c687:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c68b:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420c68f:	48 89 c6             	mov    %rax,%rsi
  800420c692:	48 bf 0d a3 21 04 80 	movabs $0x800421a30d,%rdi
  800420c699:	00 00 00 
  800420c69c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6a1:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c6a8:	00 00 00 
  800420c6ab:	ff d2                	callq  *%rdx
  800420c6ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6b1:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420c6b5:	48 89 c6             	mov    %rax,%rsi
  800420c6b8:	48 bf 1b a3 21 04 80 	movabs $0x800421a31b,%rdi
  800420c6bf:	00 00 00 
  800420c6c2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6c7:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c6ce:	00 00 00 
  800420c6d1:	ff d2                	callq  *%rdx
  800420c6d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6d7:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420c6db:	48 89 c6             	mov    %rax,%rsi
  800420c6de:	48 bf 29 a3 21 04 80 	movabs $0x800421a329,%rdi
  800420c6e5:	00 00 00 
  800420c6e8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6ed:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c6f4:	00 00 00 
  800420c6f7:	ff d2                	callq  *%rdx
  800420c6f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6fd:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420c701:	48 89 c6             	mov    %rax,%rsi
  800420c704:	48 bf 38 a3 21 04 80 	movabs $0x800421a338,%rdi
  800420c70b:	00 00 00 
  800420c70e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c713:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c71a:	00 00 00 
  800420c71d:	ff d2                	callq  *%rdx
  800420c71f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c723:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420c727:	48 89 c6             	mov    %rax,%rsi
  800420c72a:	48 bf 47 a3 21 04 80 	movabs $0x800421a347,%rdi
  800420c731:	00 00 00 
  800420c734:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c739:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c740:	00 00 00 
  800420c743:	ff d2                	callq  *%rdx
  800420c745:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c749:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420c74d:	48 89 c6             	mov    %rax,%rsi
  800420c750:	48 bf 56 a3 21 04 80 	movabs $0x800421a356,%rdi
  800420c757:	00 00 00 
  800420c75a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c75f:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c766:	00 00 00 
  800420c769:	ff d2                	callq  *%rdx
  800420c76b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c76f:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420c773:	48 89 c6             	mov    %rax,%rsi
  800420c776:	48 bf 65 a3 21 04 80 	movabs $0x800421a365,%rdi
  800420c77d:	00 00 00 
  800420c780:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c785:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c78c:	00 00 00 
  800420c78f:	ff d2                	callq  *%rdx
  800420c791:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c795:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420c799:	48 89 c6             	mov    %rax,%rsi
  800420c79c:	48 bf 74 a3 21 04 80 	movabs $0x800421a374,%rdi
  800420c7a3:	00 00 00 
  800420c7a6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c7ab:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c7b2:	00 00 00 
  800420c7b5:	ff d2                	callq  *%rdx
  800420c7b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7bb:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c7bf:	48 89 c6             	mov    %rax,%rsi
  800420c7c2:	48 bf 83 a3 21 04 80 	movabs $0x800421a383,%rdi
  800420c7c9:	00 00 00 
  800420c7cc:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c7d1:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c7d8:	00 00 00 
  800420c7db:	ff d2                	callq  *%rdx
  800420c7dd:	c9                   	leaveq 
  800420c7de:	c3                   	retq   

000000800420c7df <trap_dispatch>:
  800420c7df:	55                   	push   %rbp
  800420c7e0:	48 89 e5             	mov    %rsp,%rbp
  800420c7e3:	48 83 ec 10          	sub    $0x10,%rsp
  800420c7e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420c7eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7ef:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c7f6:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c7fa:	75 18                	jne    800420c814 <trap_dispatch+0x35>
  800420c7fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c800:	48 89 c7             	mov    %rax,%rdi
  800420c803:	48 b8 5d cd 20 04 80 	movabs $0x800420cd5d,%rax
  800420c80a:	00 00 00 
  800420c80d:	ff d0                	callq  *%rax
  800420c80f:	e9 ea 01 00 00       	jmpq   800420c9fe <trap_dispatch+0x21f>
  800420c814:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c818:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c81f:	48 83 f8 30          	cmp    $0x30,%rax
  800420c823:	75 55                	jne    800420c87a <trap_dispatch+0x9b>
  800420c825:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c829:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420c82d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c831:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420c835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c839:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420c83d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c841:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420c845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c849:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420c84d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c851:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c855:	4d 89 c1             	mov    %r8,%r9
  800420c858:	49 89 f8             	mov    %rdi,%r8
  800420c85b:	48 89 c7             	mov    %rax,%rdi
  800420c85e:	48 b8 49 e6 20 04 80 	movabs $0x800420e649,%rax
  800420c865:	00 00 00 
  800420c868:	ff d0                	callq  *%rax
  800420c86a:	48 89 c2             	mov    %rax,%rdx
  800420c86d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c871:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420c875:	e9 84 01 00 00       	jmpq   800420c9fe <trap_dispatch+0x21f>
  800420c87a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c87e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c885:	48 83 f8 03          	cmp    $0x3,%rax
  800420c889:	75 18                	jne    800420c8a3 <trap_dispatch+0xc4>
  800420c88b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c88f:	48 89 c7             	mov    %rax,%rdi
  800420c892:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420c899:	00 00 00 
  800420c89c:	ff d0                	callq  *%rax
  800420c89e:	e9 5b 01 00 00       	jmpq   800420c9fe <trap_dispatch+0x21f>
  800420c8a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c8a7:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8ae:	48 83 f8 27          	cmp    $0x27,%rax
  800420c8b2:	75 33                	jne    800420c8e7 <trap_dispatch+0x108>
  800420c8b4:	48 bf 92 a3 21 04 80 	movabs $0x800421a392,%rdi
  800420c8bb:	00 00 00 
  800420c8be:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c8c3:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420c8ca:	00 00 00 
  800420c8cd:	ff d2                	callq  *%rdx
  800420c8cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c8d3:	48 89 c7             	mov    %rax,%rdi
  800420c8d6:	48 b8 87 c2 20 04 80 	movabs $0x800420c287,%rax
  800420c8dd:	00 00 00 
  800420c8e0:	ff d0                	callq  *%rax
  800420c8e2:	e9 17 01 00 00       	jmpq   800420c9fe <trap_dispatch+0x21f>
  800420c8e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c8eb:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8f2:	48 83 f8 20          	cmp    $0x20,%rax
  800420c8f6:	75 34                	jne    800420c92c <trap_dispatch+0x14d>
  800420c8f8:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c8ff:	00 00 00 
  800420c902:	ff d0                	callq  *%rax
  800420c904:	85 c0                	test   %eax,%eax
  800420c906:	75 0c                	jne    800420c914 <trap_dispatch+0x135>
  800420c908:	48 b8 be 8b 21 04 80 	movabs $0x8004218bbe,%rax
  800420c90f:	00 00 00 
  800420c912:	ff d0                	callq  *%rax
  800420c914:	48 b8 b7 73 21 04 80 	movabs $0x80042173b7,%rax
  800420c91b:	00 00 00 
  800420c91e:	ff d0                	callq  *%rax
  800420c920:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  800420c927:	00 00 00 
  800420c92a:	ff d0                	callq  *%rax
  800420c92c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c930:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c937:	48 83 f8 21          	cmp    $0x21,%rax
  800420c93b:	75 11                	jne    800420c94e <trap_dispatch+0x16f>
  800420c93d:	48 b8 13 11 20 04 80 	movabs $0x8004201113,%rax
  800420c944:	00 00 00 
  800420c947:	ff d0                	callq  *%rax
  800420c949:	e9 b0 00 00 00       	jmpq   800420c9fe <trap_dispatch+0x21f>
  800420c94e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c952:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c959:	48 83 f8 24          	cmp    $0x24,%rax
  800420c95d:	75 11                	jne    800420c970 <trap_dispatch+0x191>
  800420c95f:	48 b8 98 08 20 04 80 	movabs $0x8004200898,%rax
  800420c966:	00 00 00 
  800420c969:	ff d0                	callq  *%rax
  800420c96b:	e9 8e 00 00 00       	jmpq   800420c9fe <trap_dispatch+0x21f>
  800420c970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c974:	48 89 c7             	mov    %rax,%rdi
  800420c977:	48 b8 87 c2 20 04 80 	movabs $0x800420c287,%rax
  800420c97e:	00 00 00 
  800420c981:	ff d0                	callq  *%rax
  800420c983:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c987:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c98e:	66 83 f8 08          	cmp    $0x8,%ax
  800420c992:	75 2a                	jne    800420c9be <trap_dispatch+0x1df>
  800420c994:	48 ba af a3 21 04 80 	movabs $0x800421a3af,%rdx
  800420c99b:	00 00 00 
  800420c99e:	be 77 01 00 00       	mov    $0x177,%esi
  800420c9a3:	48 bf c8 a3 21 04 80 	movabs $0x800421a3c8,%rdi
  800420c9aa:	00 00 00 
  800420c9ad:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9b2:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420c9b9:	00 00 00 
  800420c9bc:	ff d1                	callq  *%rcx
  800420c9be:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420c9c5:	00 00 00 
  800420c9c8:	ff d0                	callq  *%rax
  800420c9ca:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420c9d1:	00 00 00 
  800420c9d4:	48 98                	cltq   
  800420c9d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420c9da:	48 89 c1             	mov    %rax,%rcx
  800420c9dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420c9e1:	48 01 c8             	add    %rcx,%rax
  800420c9e4:	48 01 d0             	add    %rdx,%rax
  800420c9e7:	48 83 c0 08          	add    $0x8,%rax
  800420c9eb:	48 8b 00             	mov    (%rax),%rax
  800420c9ee:	48 89 c7             	mov    %rax,%rdi
  800420c9f1:	48 b8 78 8e 20 04 80 	movabs $0x8004208e78,%rax
  800420c9f8:	00 00 00 
  800420c9fb:	ff d0                	callq  *%rax
  800420c9fd:	90                   	nop
  800420c9fe:	c9                   	leaveq 
  800420c9ff:	c3                   	retq   

000000800420ca00 <trap>:
  800420ca00:	55                   	push   %rbp
  800420ca01:	48 89 e5             	mov    %rsp,%rbp
  800420ca04:	48 83 ec 20          	sub    $0x20,%rsp
  800420ca08:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ca0c:	fc                   	cld    
  800420ca0d:	48 b8 d0 d5 69 04 80 	movabs $0x800469d5d0,%rax
  800420ca14:	00 00 00 
  800420ca17:	48 8b 00             	mov    (%rax),%rax
  800420ca1a:	48 85 c0             	test   %rax,%rax
  800420ca1d:	74 01                	je     800420ca20 <trap+0x20>
  800420ca1f:	f4                   	hlt    
  800420ca20:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420ca27:	00 00 00 
  800420ca2a:	ff d0                	callq  *%rax
  800420ca2c:	48 98                	cltq   
  800420ca2e:	48 c1 e0 03          	shl    $0x3,%rax
  800420ca32:	48 89 c2             	mov    %rax,%rdx
  800420ca35:	48 c1 e2 04          	shl    $0x4,%rdx
  800420ca39:	48 01 d0             	add    %rdx,%rax
  800420ca3c:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ca43:	00 00 00 
  800420ca46:	48 01 d0             	add    %rdx,%rax
  800420ca49:	48 83 c0 04          	add    $0x4,%rax
  800420ca4d:	be 01 00 00 00       	mov    $0x1,%esi
  800420ca52:	48 89 c7             	mov    %rax,%rdi
  800420ca55:	48 b8 68 96 20 04 80 	movabs $0x8004209668,%rax
  800420ca5c:	00 00 00 
  800420ca5f:	ff d0                	callq  *%rax
  800420ca61:	83 f8 02             	cmp    $0x2,%eax
  800420ca64:	75 0c                	jne    800420ca72 <trap+0x72>
  800420ca66:	48 b8 8d 96 20 04 80 	movabs $0x800420968d,%rax
  800420ca6d:	00 00 00 
  800420ca70:	ff d0                	callq  *%rax
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420ca72:	9c                   	pushfq 
  800420ca73:	58                   	pop    %rax
  800420ca74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420ca78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca7c:	25 00 02 00 00       	and    $0x200,%eax
  800420ca81:	48 85 c0             	test   %rax,%rax
  800420ca84:	74 35                	je     800420cabb <trap+0xbb>
  800420ca86:	48 b9 d7 a3 21 04 80 	movabs $0x800421a3d7,%rcx
  800420ca8d:	00 00 00 
  800420ca90:	48 ba f0 a3 21 04 80 	movabs $0x800421a3f0,%rdx
  800420ca97:	00 00 00 
  800420ca9a:	be 94 01 00 00       	mov    $0x194,%esi
  800420ca9f:	48 bf c8 a3 21 04 80 	movabs $0x800421a3c8,%rdi
  800420caa6:	00 00 00 
  800420caa9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420caae:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420cab5:	00 00 00 
  800420cab8:	41 ff d0             	callq  *%r8
  800420cabb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cabf:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cac6:	0f b7 c0             	movzwl %ax,%eax
  800420cac9:	83 e0 03             	and    $0x3,%eax
  800420cacc:	83 f8 03             	cmp    $0x3,%eax
  800420cacf:	0f 85 a9 01 00 00    	jne    800420cc7e <trap+0x27e>
  800420cad5:	48 b8 8d 96 20 04 80 	movabs $0x800420968d,%rax
  800420cadc:	00 00 00 
  800420cadf:	ff d0                	callq  *%rax
  800420cae1:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cae8:	00 00 00 
  800420caeb:	ff d0                	callq  *%rax
  800420caed:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420caf4:	00 00 00 
  800420caf7:	48 98                	cltq   
  800420caf9:	48 c1 e0 03          	shl    $0x3,%rax
  800420cafd:	48 89 c1             	mov    %rax,%rcx
  800420cb00:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb04:	48 01 c8             	add    %rcx,%rax
  800420cb07:	48 01 d0             	add    %rdx,%rax
  800420cb0a:	48 83 c0 08          	add    $0x8,%rax
  800420cb0e:	48 8b 00             	mov    (%rax),%rax
  800420cb11:	48 85 c0             	test   %rax,%rax
  800420cb14:	75 35                	jne    800420cb4b <trap+0x14b>
  800420cb16:	48 b9 05 a4 21 04 80 	movabs $0x800421a405,%rcx
  800420cb1d:	00 00 00 
  800420cb20:	48 ba f0 a3 21 04 80 	movabs $0x800421a3f0,%rdx
  800420cb27:	00 00 00 
  800420cb2a:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420cb2f:	48 bf c8 a3 21 04 80 	movabs $0x800421a3c8,%rdi
  800420cb36:	00 00 00 
  800420cb39:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb3e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420cb45:	00 00 00 
  800420cb48:	41 ff d0             	callq  *%r8
  800420cb4b:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cb52:	00 00 00 
  800420cb55:	ff d0                	callq  *%rax
  800420cb57:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cb5e:	00 00 00 
  800420cb61:	48 98                	cltq   
  800420cb63:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb67:	48 89 c1             	mov    %rax,%rcx
  800420cb6a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb6e:	48 01 c8             	add    %rcx,%rax
  800420cb71:	48 01 d0             	add    %rdx,%rax
  800420cb74:	48 83 c0 08          	add    $0x8,%rax
  800420cb78:	48 8b 00             	mov    (%rax),%rax
  800420cb7b:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cb81:	83 f8 01             	cmp    $0x1,%eax
  800420cb84:	75 7f                	jne    800420cc05 <trap+0x205>
  800420cb86:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cb8d:	00 00 00 
  800420cb90:	ff d0                	callq  *%rax
  800420cb92:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cb99:	00 00 00 
  800420cb9c:	48 98                	cltq   
  800420cb9e:	48 c1 e0 03          	shl    $0x3,%rax
  800420cba2:	48 89 c1             	mov    %rax,%rcx
  800420cba5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cba9:	48 01 c8             	add    %rcx,%rax
  800420cbac:	48 01 d0             	add    %rdx,%rax
  800420cbaf:	48 83 c0 08          	add    $0x8,%rax
  800420cbb3:	48 8b 00             	mov    (%rax),%rax
  800420cbb6:	48 89 c7             	mov    %rax,%rdi
  800420cbb9:	48 b8 ec 89 20 04 80 	movabs $0x80042089ec,%rax
  800420cbc0:	00 00 00 
  800420cbc3:	ff d0                	callq  *%rax
  800420cbc5:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cbcc:	00 00 00 
  800420cbcf:	ff d0                	callq  *%rax
  800420cbd1:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cbd8:	00 00 00 
  800420cbdb:	48 98                	cltq   
  800420cbdd:	48 c1 e0 03          	shl    $0x3,%rax
  800420cbe1:	48 89 c1             	mov    %rax,%rcx
  800420cbe4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cbe8:	48 01 c8             	add    %rcx,%rax
  800420cbeb:	48 01 d0             	add    %rdx,%rax
  800420cbee:	48 83 c0 08          	add    $0x8,%rax
  800420cbf2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420cbf9:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  800420cc00:	00 00 00 
  800420cc03:	ff d0                	callq  *%rax
  800420cc05:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cc0c:	00 00 00 
  800420cc0f:	ff d0                	callq  *%rax
  800420cc11:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cc18:	00 00 00 
  800420cc1b:	48 98                	cltq   
  800420cc1d:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc21:	48 89 c1             	mov    %rax,%rcx
  800420cc24:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc28:	48 01 c8             	add    %rcx,%rax
  800420cc2b:	48 01 d0             	add    %rdx,%rax
  800420cc2e:	48 83 c0 08          	add    $0x8,%rax
  800420cc32:	48 8b 10             	mov    (%rax),%rdx
  800420cc35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc39:	48 89 c6             	mov    %rax,%rsi
  800420cc3c:	b8 18 00 00 00       	mov    $0x18,%eax
  800420cc41:	48 89 d7             	mov    %rdx,%rdi
  800420cc44:	48 89 c1             	mov    %rax,%rcx
  800420cc47:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420cc4a:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cc51:	00 00 00 
  800420cc54:	ff d0                	callq  *%rax
  800420cc56:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cc5d:	00 00 00 
  800420cc60:	48 98                	cltq   
  800420cc62:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc66:	48 89 c1             	mov    %rax,%rcx
  800420cc69:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc6d:	48 01 c8             	add    %rcx,%rax
  800420cc70:	48 01 d0             	add    %rdx,%rax
  800420cc73:	48 83 c0 08          	add    $0x8,%rax
  800420cc77:	48 8b 00             	mov    (%rax),%rax
  800420cc7a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cc7e:	48 b8 90 f2 49 04 80 	movabs $0x800449f290,%rax
  800420cc85:	00 00 00 
  800420cc88:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420cc8c:	48 89 10             	mov    %rdx,(%rax)
  800420cc8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc93:	48 89 c7             	mov    %rax,%rdi
  800420cc96:	48 b8 df c7 20 04 80 	movabs $0x800420c7df,%rax
  800420cc9d:	00 00 00 
  800420cca0:	ff d0                	callq  *%rax
  800420cca2:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cca9:	00 00 00 
  800420ccac:	ff d0                	callq  *%rax
  800420ccae:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ccb5:	00 00 00 
  800420ccb8:	48 98                	cltq   
  800420ccba:	48 c1 e0 03          	shl    $0x3,%rax
  800420ccbe:	48 89 c1             	mov    %rax,%rcx
  800420ccc1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ccc5:	48 01 c8             	add    %rcx,%rax
  800420ccc8:	48 01 d0             	add    %rdx,%rax
  800420cccb:	48 83 c0 08          	add    $0x8,%rax
  800420cccf:	48 8b 00             	mov    (%rax),%rax
  800420ccd2:	48 85 c0             	test   %rax,%rax
  800420ccd5:	74 7a                	je     800420cd51 <trap+0x351>
  800420ccd7:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420ccde:	00 00 00 
  800420cce1:	ff d0                	callq  *%rax
  800420cce3:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ccea:	00 00 00 
  800420cced:	48 98                	cltq   
  800420ccef:	48 c1 e0 03          	shl    $0x3,%rax
  800420ccf3:	48 89 c1             	mov    %rax,%rcx
  800420ccf6:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ccfa:	48 01 c8             	add    %rcx,%rax
  800420ccfd:	48 01 d0             	add    %rdx,%rax
  800420cd00:	48 83 c0 08          	add    $0x8,%rax
  800420cd04:	48 8b 00             	mov    (%rax),%rax
  800420cd07:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cd0d:	83 f8 03             	cmp    $0x3,%eax
  800420cd10:	75 3f                	jne    800420cd51 <trap+0x351>
  800420cd12:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cd19:	00 00 00 
  800420cd1c:	ff d0                	callq  *%rax
  800420cd1e:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cd25:	00 00 00 
  800420cd28:	48 98                	cltq   
  800420cd2a:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd2e:	48 89 c1             	mov    %rax,%rcx
  800420cd31:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd35:	48 01 c8             	add    %rcx,%rax
  800420cd38:	48 01 d0             	add    %rdx,%rax
  800420cd3b:	48 83 c0 08          	add    $0x8,%rax
  800420cd3f:	48 8b 00             	mov    (%rax),%rax
  800420cd42:	48 89 c7             	mov    %rax,%rdi
  800420cd45:	48 b8 43 90 20 04 80 	movabs $0x8004209043,%rax
  800420cd4c:	00 00 00 
  800420cd4f:	ff d0                	callq  *%rax
  800420cd51:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  800420cd58:	00 00 00 
  800420cd5b:	ff d0                	callq  *%rax

000000800420cd5d <page_fault_handler>:
  800420cd5d:	55                   	push   %rbp
  800420cd5e:	48 89 e5             	mov    %rsp,%rbp
  800420cd61:	53                   	push   %rbx
  800420cd62:	48 83 ec 38          	sub    $0x38,%rsp
  800420cd66:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420cd6a:	0f 20 d0             	mov    %cr2,%rax
  800420cd6d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420cd71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420cd75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420cd79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cd7d:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cd84:	0f b7 c0             	movzwl %ax,%eax
  800420cd87:	83 e0 03             	and    $0x3,%eax
  800420cd8a:	85 c0                	test   %eax,%eax
  800420cd8c:	75 3d                	jne    800420cdcb <page_fault_handler+0x6e>
  800420cd8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cd92:	48 89 c7             	mov    %rax,%rdi
  800420cd95:	48 b8 87 c2 20 04 80 	movabs $0x800420c287,%rax
  800420cd9c:	00 00 00 
  800420cd9f:	ff d0                	callq  *%rax
  800420cda1:	48 ba 0c a4 21 04 80 	movabs $0x800421a40c,%rdx
  800420cda8:	00 00 00 
  800420cdab:	be de 01 00 00       	mov    $0x1de,%esi
  800420cdb0:	48 bf c8 a3 21 04 80 	movabs $0x800421a3c8,%rdi
  800420cdb7:	00 00 00 
  800420cdba:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdbf:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420cdc6:	00 00 00 
  800420cdc9:	ff d1                	callq  *%rcx
  800420cdcb:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cdd2:	00 00 00 
  800420cdd5:	ff d0                	callq  *%rax
  800420cdd7:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cdde:	00 00 00 
  800420cde1:	48 98                	cltq   
  800420cde3:	48 c1 e0 03          	shl    $0x3,%rax
  800420cde7:	48 89 c1             	mov    %rax,%rcx
  800420cdea:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cdee:	48 01 c8             	add    %rcx,%rax
  800420cdf1:	48 01 d0             	add    %rdx,%rax
  800420cdf4:	48 83 c0 08          	add    $0x8,%rax
  800420cdf8:	48 8b 00             	mov    (%rax),%rax
  800420cdfb:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420ce02:	48 85 c0             	test   %rax,%rax
  800420ce05:	0f 85 b8 00 00 00    	jne    800420cec3 <page_fault_handler+0x166>
  800420ce0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce0f:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420ce16:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420ce1d:	00 00 00 
  800420ce20:	ff d0                	callq  *%rax
  800420ce22:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ce29:	00 00 00 
  800420ce2c:	48 98                	cltq   
  800420ce2e:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce32:	48 89 c1             	mov    %rax,%rcx
  800420ce35:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce39:	48 01 c8             	add    %rcx,%rax
  800420ce3c:	48 01 d0             	add    %rdx,%rax
  800420ce3f:	48 83 c0 08          	add    $0x8,%rax
  800420ce43:	48 8b 00             	mov    (%rax),%rax
  800420ce46:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ce4c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ce50:	48 89 d9             	mov    %rbx,%rcx
  800420ce53:	89 c6                	mov    %eax,%esi
  800420ce55:	48 bf 18 a4 21 04 80 	movabs $0x800421a418,%rdi
  800420ce5c:	00 00 00 
  800420ce5f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce64:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  800420ce6b:	00 00 00 
  800420ce6e:	41 ff d0             	callq  *%r8
  800420ce71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce75:	48 89 c7             	mov    %rax,%rdi
  800420ce78:	48 b8 87 c2 20 04 80 	movabs $0x800420c287,%rax
  800420ce7f:	00 00 00 
  800420ce82:	ff d0                	callq  *%rax
  800420ce84:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420ce8b:	00 00 00 
  800420ce8e:	ff d0                	callq  *%rax
  800420ce90:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ce97:	00 00 00 
  800420ce9a:	48 98                	cltq   
  800420ce9c:	48 c1 e0 03          	shl    $0x3,%rax
  800420cea0:	48 89 c1             	mov    %rax,%rcx
  800420cea3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cea7:	48 01 c8             	add    %rcx,%rax
  800420ceaa:	48 01 d0             	add    %rdx,%rax
  800420cead:	48 83 c0 08          	add    $0x8,%rax
  800420ceb1:	48 8b 00             	mov    (%rax),%rax
  800420ceb4:	48 89 c7             	mov    %rax,%rdi
  800420ceb7:	48 b8 78 8e 20 04 80 	movabs $0x8004208e78,%rax
  800420cebe:	00 00 00 
  800420cec1:	ff d0                	callq  *%rax
  800420cec3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cec7:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cece:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420ced3:	48 39 c2             	cmp    %rax,%rdx
  800420ced6:	76 2c                	jbe    800420cf04 <page_fault_handler+0x1a7>
  800420ced8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cedc:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cee3:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420cee8:	48 39 c2             	cmp    %rax,%rdx
  800420ceeb:	77 17                	ja     800420cf04 <page_fault_handler+0x1a7>
  800420ceed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cef1:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cef8:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420cefe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cf02:	eb 09                	jmp    800420cf0d <page_fault_handler+0x1b0>
  800420cf04:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420cf09:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cf0d:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420cf14:	00 00 00 
  800420cf17:	ff d0                	callq  *%rax
  800420cf19:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cf20:	00 00 00 
  800420cf23:	48 98                	cltq   
  800420cf25:	48 c1 e0 03          	shl    $0x3,%rax
  800420cf29:	48 89 c1             	mov    %rax,%rcx
  800420cf2c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cf30:	48 01 c8             	add    %rcx,%rax
  800420cf33:	48 01 d0             	add    %rdx,%rax
  800420cf36:	48 83 c0 08          	add    $0x8,%rax
  800420cf3a:	48 8b 00             	mov    (%rax),%rax
  800420cf3d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420cf41:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420cf46:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420cf4b:	48 89 c7             	mov    %rax,%rdi
  800420cf4e:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420cf55:	00 00 00 
  800420cf58:	ff d0                	callq  *%rax
  800420cf5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf5e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420cf62:	48 89 10             	mov    %rdx,(%rax)
  800420cf65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf69:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420cf70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf74:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420cf78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cf7c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420cf80:	48 8b 0a             	mov    (%rdx),%rcx
  800420cf83:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420cf87:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420cf8b:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420cf8f:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420cf93:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420cf97:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420cf9b:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420cf9f:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420cfa3:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420cfa7:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420cfab:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420cfaf:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420cfb3:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420cfb7:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420cfbb:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420cfbf:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420cfc3:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420cfc7:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420cfcb:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420cfcf:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420cfd3:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420cfd7:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420cfdb:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420cfdf:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420cfe3:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420cfe7:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420cfeb:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420cfef:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420cff3:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420cffa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cffe:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d005:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d009:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d010:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d014:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d01b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d01f:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d026:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d02a:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d031:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d035:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d03c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d040:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d044:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d04b:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d052:	00 00 00 
  800420d055:	ff d0                	callq  *%rax
  800420d057:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d05e:	00 00 00 
  800420d061:	48 98                	cltq   
  800420d063:	48 c1 e0 03          	shl    $0x3,%rax
  800420d067:	48 89 c1             	mov    %rax,%rcx
  800420d06a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d06e:	48 01 c8             	add    %rcx,%rax
  800420d071:	48 01 d0             	add    %rdx,%rax
  800420d074:	48 83 c0 08          	add    $0x8,%rax
  800420d078:	48 8b 00             	mov    (%rax),%rax
  800420d07b:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d082:	48 89 c2             	mov    %rax,%rdx
  800420d085:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d089:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d090:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d097:	00 00 00 
  800420d09a:	ff d0                	callq  *%rax
  800420d09c:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d0a3:	00 00 00 
  800420d0a6:	48 98                	cltq   
  800420d0a8:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0ac:	48 89 c1             	mov    %rax,%rcx
  800420d0af:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0b3:	48 01 c8             	add    %rcx,%rax
  800420d0b6:	48 01 d0             	add    %rdx,%rax
  800420d0b9:	48 83 c0 08          	add    $0x8,%rax
  800420d0bd:	48 8b 00             	mov    (%rax),%rax
  800420d0c0:	48 89 c7             	mov    %rax,%rdi
  800420d0c3:	48 b8 43 90 20 04 80 	movabs $0x8004209043,%rax
  800420d0ca:	00 00 00 
  800420d0cd:	ff d0                	callq  *%rax
  800420d0cf:	90                   	nop

000000800420d0d0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d0d0:	6a 00                	pushq  $0x0
  800420d0d2:	6a 00                	pushq  $0x0
  800420d0d4:	e9 f7 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d0d9:	90                   	nop

000000800420d0da <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d0da:	6a 00                	pushq  $0x0
  800420d0dc:	6a 01                	pushq  $0x1
  800420d0de:	e9 ed 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d0e3:	90                   	nop

000000800420d0e4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d0e4:	6a 00                	pushq  $0x0
  800420d0e6:	6a 02                	pushq  $0x2
  800420d0e8:	e9 e3 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d0ed:	90                   	nop

000000800420d0ee <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d0ee:	6a 00                	pushq  $0x0
  800420d0f0:	6a 03                	pushq  $0x3
  800420d0f2:	e9 d9 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d0f7:	90                   	nop

000000800420d0f8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d0f8:	6a 00                	pushq  $0x0
  800420d0fa:	6a 04                	pushq  $0x4
  800420d0fc:	e9 cf 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d101:	90                   	nop

000000800420d102 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d102:	6a 00                	pushq  $0x0
  800420d104:	6a 05                	pushq  $0x5
  800420d106:	e9 c5 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d10b:	90                   	nop

000000800420d10c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d10c:	6a 00                	pushq  $0x0
  800420d10e:	6a 06                	pushq  $0x6
  800420d110:	e9 bb 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d115:	90                   	nop

000000800420d116 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d116:	6a 00                	pushq  $0x0
  800420d118:	6a 07                	pushq  $0x7
  800420d11a:	e9 b1 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d11f:	90                   	nop

000000800420d120 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d120:	6a 08                	pushq  $0x8
  800420d122:	e9 a9 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d127:	90                   	nop

000000800420d128 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d128:	6a 0a                	pushq  $0xa
  800420d12a:	e9 a1 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d12f:	90                   	nop

000000800420d130 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d130:	6a 0b                	pushq  $0xb
  800420d132:	e9 99 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d137:	90                   	nop

000000800420d138 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d138:	6a 0c                	pushq  $0xc
  800420d13a:	e9 91 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d13f:	90                   	nop

000000800420d140 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d140:	6a 0d                	pushq  $0xd
  800420d142:	e9 89 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d147:	90                   	nop

000000800420d148 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d148:	6a 0e                	pushq  $0xe
  800420d14a:	e9 81 00 00 00       	jmpq   800420d1d0 <_alltraps>
  800420d14f:	90                   	nop

000000800420d150 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d150:	6a 00                	pushq  $0x0
  800420d152:	6a 10                	pushq  $0x10
  800420d154:	eb 7a                	jmp    800420d1d0 <_alltraps>

000000800420d156 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d156:	6a 11                	pushq  $0x11
  800420d158:	eb 76                	jmp    800420d1d0 <_alltraps>

000000800420d15a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d15a:	6a 00                	pushq  $0x0
  800420d15c:	6a 12                	pushq  $0x12
  800420d15e:	eb 70                	jmp    800420d1d0 <_alltraps>

000000800420d160 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d160:	6a 00                	pushq  $0x0
  800420d162:	6a 20                	pushq  $0x20
  800420d164:	eb 6a                	jmp    800420d1d0 <_alltraps>

000000800420d166 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d166:	6a 00                	pushq  $0x0
  800420d168:	6a 21                	pushq  $0x21
  800420d16a:	eb 64                	jmp    800420d1d0 <_alltraps>

000000800420d16c <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d16c:	6a 00                	pushq  $0x0
  800420d16e:	6a 22                	pushq  $0x22
  800420d170:	eb 5e                	jmp    800420d1d0 <_alltraps>

000000800420d172 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d172:	6a 00                	pushq  $0x0
  800420d174:	6a 23                	pushq  $0x23
  800420d176:	eb 58                	jmp    800420d1d0 <_alltraps>

000000800420d178 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d178:	6a 00                	pushq  $0x0
  800420d17a:	6a 24                	pushq  $0x24
  800420d17c:	eb 52                	jmp    800420d1d0 <_alltraps>

000000800420d17e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d17e:	6a 00                	pushq  $0x0
  800420d180:	6a 25                	pushq  $0x25
  800420d182:	eb 4c                	jmp    800420d1d0 <_alltraps>

000000800420d184 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d184:	6a 00                	pushq  $0x0
  800420d186:	6a 26                	pushq  $0x26
  800420d188:	eb 46                	jmp    800420d1d0 <_alltraps>

000000800420d18a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d18a:	6a 00                	pushq  $0x0
  800420d18c:	6a 27                	pushq  $0x27
  800420d18e:	eb 40                	jmp    800420d1d0 <_alltraps>

000000800420d190 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d190:	6a 00                	pushq  $0x0
  800420d192:	6a 28                	pushq  $0x28
  800420d194:	eb 3a                	jmp    800420d1d0 <_alltraps>

000000800420d196 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d196:	6a 00                	pushq  $0x0
  800420d198:	6a 29                	pushq  $0x29
  800420d19a:	eb 34                	jmp    800420d1d0 <_alltraps>

000000800420d19c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d19c:	6a 00                	pushq  $0x0
  800420d19e:	6a 2a                	pushq  $0x2a
  800420d1a0:	eb 2e                	jmp    800420d1d0 <_alltraps>

000000800420d1a2 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d1a2:	6a 00                	pushq  $0x0
  800420d1a4:	6a 2b                	pushq  $0x2b
  800420d1a6:	eb 28                	jmp    800420d1d0 <_alltraps>

000000800420d1a8 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d1a8:	6a 00                	pushq  $0x0
  800420d1aa:	6a 2c                	pushq  $0x2c
  800420d1ac:	eb 22                	jmp    800420d1d0 <_alltraps>

000000800420d1ae <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d1ae:	6a 00                	pushq  $0x0
  800420d1b0:	6a 2d                	pushq  $0x2d
  800420d1b2:	eb 1c                	jmp    800420d1d0 <_alltraps>

000000800420d1b4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d1b4:	6a 00                	pushq  $0x0
  800420d1b6:	6a 2e                	pushq  $0x2e
  800420d1b8:	eb 16                	jmp    800420d1d0 <_alltraps>

000000800420d1ba <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d1ba:	6a 00                	pushq  $0x0
  800420d1bc:	6a 2f                	pushq  $0x2f
  800420d1be:	eb 10                	jmp    800420d1d0 <_alltraps>

000000800420d1c0 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d1c0:	6a 00                	pushq  $0x0
  800420d1c2:	6a 30                	pushq  $0x30
  800420d1c4:	eb 0a                	jmp    800420d1d0 <_alltraps>

000000800420d1c6 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d1c6:	68 f4 01 00 00       	pushq  $0x1f4
  800420d1cb:	eb 03                	jmp    800420d1d0 <_alltraps>
  800420d1cd:	0f 1f 00             	nopl   (%rax)

000000800420d1d0 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d1d0:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d1d4:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d1d8:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d1db:	48 83 ec 78          	sub    $0x78,%rsp
  800420d1df:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d1e4:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d1e9:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d1ee:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d1f3:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d1f8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d1fd:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d202:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d207:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d20c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d211:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d216:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d21b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d220:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d225:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d229:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d22e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d230:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d232:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d234:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d236:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d238:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d23b:	e8 c0 f7 ff ff       	callq  800420ca00 <trap>

000000800420d240 <spin>:
spin:	jmp spin
  800420d240:	eb fe                	jmp    800420d240 <spin>

000000800420d242 <xchg>:
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d242:	55                   	push   %rbp
  800420d243:	48 89 e5             	mov    %rsp,%rbp
  800420d246:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d24a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d24e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	__asm __volatile("lock; xchgl %0, %1":
  800420d251:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d255:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d258:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d25c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d25f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return result;
  800420d262:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d265:	c9                   	leaveq 
  800420d266:	c3                   	retq   

000000800420d267 <unlock_kernel>:
  800420d267:	55                   	push   %rbp
  800420d268:	48 89 e5             	mov    %rsp,%rbp
  800420d26b:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  800420d272:	00 00 00 
  800420d275:	48 b8 e4 77 21 04 80 	movabs $0x80042177e4,%rax
  800420d27c:	00 00 00 
  800420d27f:	ff d0                	callq  *%rax
  800420d281:	f3 90                	pause  
  800420d283:	5d                   	pop    %rbp
  800420d284:	c3                   	retq   

000000800420d285 <sched_yield>:
  800420d285:	55                   	push   %rbp
  800420d286:	48 89 e5             	mov    %rsp,%rbp
  800420d289:	48 83 ec 10          	sub    $0x10,%rsp
  800420d28d:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d294:	00 00 00 
  800420d297:	ff d0                	callq  *%rax
  800420d299:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d2a0:	00 00 00 
  800420d2a3:	48 98                	cltq   
  800420d2a5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2a9:	48 89 c1             	mov    %rax,%rcx
  800420d2ac:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2b0:	48 01 c8             	add    %rcx,%rax
  800420d2b3:	48 01 d0             	add    %rdx,%rax
  800420d2b6:	48 83 c0 08          	add    $0x8,%rax
  800420d2ba:	48 8b 00             	mov    (%rax),%rax
  800420d2bd:	48 85 c0             	test   %rax,%rax
  800420d2c0:	74 60                	je     800420d322 <sched_yield+0x9d>
  800420d2c2:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d2c9:	00 00 00 
  800420d2cc:	ff d0                	callq  *%rax
  800420d2ce:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d2d5:	00 00 00 
  800420d2d8:	48 98                	cltq   
  800420d2da:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2de:	48 89 c1             	mov    %rax,%rcx
  800420d2e1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2e5:	48 01 c8             	add    %rcx,%rax
  800420d2e8:	48 01 d0             	add    %rdx,%rax
  800420d2eb:	48 83 c0 08          	add    $0x8,%rax
  800420d2ef:	48 8b 00             	mov    (%rax),%rax
  800420d2f2:	48 89 c2             	mov    %rax,%rdx
  800420d2f5:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d2fc:	00 00 00 
  800420d2ff:	48 8b 00             	mov    (%rax),%rax
  800420d302:	48 29 c2             	sub    %rax,%rdx
  800420d305:	48 89 d0             	mov    %rdx,%rax
  800420d308:	48 c1 f8 03          	sar    $0x3,%rax
  800420d30c:	48 89 c2             	mov    %rax,%rdx
  800420d30f:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420d316:	fa a4 4f 
  800420d319:	48 0f af c2          	imul   %rdx,%rax
  800420d31d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d320:	eb 07                	jmp    800420d329 <sched_yield+0xa4>
  800420d322:	c7 45 fc ff 03 00 00 	movl   $0x3ff,-0x4(%rbp)
  800420d329:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800420d330:	eb 75                	jmp    800420d3a7 <sched_yield+0x122>
  800420d332:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d335:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420d338:	01 c2                	add    %eax,%edx
  800420d33a:	89 d0                	mov    %edx,%eax
  800420d33c:	c1 f8 1f             	sar    $0x1f,%eax
  800420d33f:	c1 e8 16             	shr    $0x16,%eax
  800420d342:	01 c2                	add    %eax,%edx
  800420d344:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420d34a:	29 c2                	sub    %eax,%edx
  800420d34c:	89 d0                	mov    %edx,%eax
  800420d34e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420d351:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d358:	00 00 00 
  800420d35b:	48 8b 10             	mov    (%rax),%rdx
  800420d35e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d361:	48 98                	cltq   
  800420d363:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d36a:	48 01 d0             	add    %rdx,%rax
  800420d36d:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d373:	83 f8 02             	cmp    $0x2,%eax
  800420d376:	75 2b                	jne    800420d3a3 <sched_yield+0x11e>
  800420d378:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d37f:	00 00 00 
  800420d382:	48 8b 10             	mov    (%rax),%rdx
  800420d385:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d388:	48 98                	cltq   
  800420d38a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d391:	48 01 d0             	add    %rdx,%rax
  800420d394:	48 89 c7             	mov    %rax,%rdi
  800420d397:	48 b8 43 90 20 04 80 	movabs $0x8004209043,%rax
  800420d39e:	00 00 00 
  800420d3a1:	ff d0                	callq  *%rax
  800420d3a3:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420d3a7:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%rbp)
  800420d3ae:	7e 82                	jle    800420d332 <sched_yield+0xad>
  800420d3b0:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d3b7:	00 00 00 
  800420d3ba:	ff d0                	callq  *%rax
  800420d3bc:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d3c3:	00 00 00 
  800420d3c6:	48 98                	cltq   
  800420d3c8:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3cc:	48 89 c1             	mov    %rax,%rcx
  800420d3cf:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3d3:	48 01 c8             	add    %rcx,%rax
  800420d3d6:	48 01 d0             	add    %rdx,%rax
  800420d3d9:	48 83 c0 08          	add    $0x8,%rax
  800420d3dd:	48 8b 00             	mov    (%rax),%rax
  800420d3e0:	48 85 c0             	test   %rax,%rax
  800420d3e3:	74 7a                	je     800420d45f <sched_yield+0x1da>
  800420d3e5:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d3ec:	00 00 00 
  800420d3ef:	ff d0                	callq  *%rax
  800420d3f1:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d3f8:	00 00 00 
  800420d3fb:	48 98                	cltq   
  800420d3fd:	48 c1 e0 03          	shl    $0x3,%rax
  800420d401:	48 89 c1             	mov    %rax,%rcx
  800420d404:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d408:	48 01 c8             	add    %rcx,%rax
  800420d40b:	48 01 d0             	add    %rdx,%rax
  800420d40e:	48 83 c0 08          	add    $0x8,%rax
  800420d412:	48 8b 00             	mov    (%rax),%rax
  800420d415:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d41b:	83 f8 03             	cmp    $0x3,%eax
  800420d41e:	75 3f                	jne    800420d45f <sched_yield+0x1da>
  800420d420:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d427:	00 00 00 
  800420d42a:	ff d0                	callq  *%rax
  800420d42c:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d433:	00 00 00 
  800420d436:	48 98                	cltq   
  800420d438:	48 c1 e0 03          	shl    $0x3,%rax
  800420d43c:	48 89 c1             	mov    %rax,%rcx
  800420d43f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d443:	48 01 c8             	add    %rcx,%rax
  800420d446:	48 01 d0             	add    %rdx,%rax
  800420d449:	48 83 c0 08          	add    $0x8,%rax
  800420d44d:	48 8b 00             	mov    (%rax),%rax
  800420d450:	48 89 c7             	mov    %rax,%rdi
  800420d453:	48 b8 43 90 20 04 80 	movabs $0x8004209043,%rax
  800420d45a:	00 00 00 
  800420d45d:	ff d0                	callq  *%rax
  800420d45f:	48 b8 6d d4 20 04 80 	movabs $0x800420d46d,%rax
  800420d466:	00 00 00 
  800420d469:	ff d0                	callq  *%rax
  800420d46b:	c9                   	leaveq 
  800420d46c:	c3                   	retq   

000000800420d46d <sched_halt>:
  800420d46d:	55                   	push   %rbp
  800420d46e:	48 89 e5             	mov    %rsp,%rbp
  800420d471:	48 83 ec 20          	sub    $0x20,%rsp
  800420d475:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420d47c:	eb 79                	jmp    800420d4f7 <sched_halt+0x8a>
  800420d47e:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d485:	00 00 00 
  800420d488:	48 8b 10             	mov    (%rax),%rdx
  800420d48b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d48e:	48 98                	cltq   
  800420d490:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d497:	48 01 d0             	add    %rdx,%rax
  800420d49a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d4a0:	83 f8 02             	cmp    $0x2,%eax
  800420d4a3:	74 5f                	je     800420d504 <sched_halt+0x97>
  800420d4a5:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d4ac:	00 00 00 
  800420d4af:	48 8b 10             	mov    (%rax),%rdx
  800420d4b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d4b5:	48 98                	cltq   
  800420d4b7:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d4be:	48 01 d0             	add    %rdx,%rax
  800420d4c1:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d4c7:	83 f8 03             	cmp    $0x3,%eax
  800420d4ca:	74 38                	je     800420d504 <sched_halt+0x97>
  800420d4cc:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d4d3:	00 00 00 
  800420d4d6:	48 8b 10             	mov    (%rax),%rdx
  800420d4d9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d4dc:	48 98                	cltq   
  800420d4de:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d4e5:	48 01 d0             	add    %rdx,%rax
  800420d4e8:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d4ee:	83 f8 01             	cmp    $0x1,%eax
  800420d4f1:	74 11                	je     800420d504 <sched_halt+0x97>
  800420d4f3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420d4f7:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420d4fe:	0f 8e 7a ff ff ff    	jle    800420d47e <sched_halt+0x11>
  800420d504:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420d50b:	75 2e                	jne    800420d53b <sched_halt+0xce>
  800420d50d:	48 bf 20 a6 21 04 80 	movabs $0x800421a620,%rdi
  800420d514:	00 00 00 
  800420d517:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d51c:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420d523:	00 00 00 
  800420d526:	ff d2                	callq  *%rdx
  800420d528:	bf 00 00 00 00       	mov    $0x0,%edi
  800420d52d:	48 b8 99 1b 20 04 80 	movabs $0x8004201b99,%rax
  800420d534:	00 00 00 
  800420d537:	ff d0                	callq  *%rax
  800420d539:	eb ed                	jmp    800420d528 <sched_halt+0xbb>
  800420d53b:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d542:	00 00 00 
  800420d545:	ff d0                	callq  *%rax
  800420d547:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d54e:	00 00 00 
  800420d551:	48 98                	cltq   
  800420d553:	48 c1 e0 03          	shl    $0x3,%rax
  800420d557:	48 89 c1             	mov    %rax,%rcx
  800420d55a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d55e:	48 01 c8             	add    %rcx,%rax
  800420d561:	48 01 d0             	add    %rdx,%rax
  800420d564:	48 83 c0 08          	add    $0x8,%rax
  800420d568:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d56f:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420d576:	00 00 00 
  800420d579:	48 8b 00             	mov    (%rax),%rax
  800420d57c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420d580:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420d587:	00 00 00 
  800420d58a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420d58e:	77 32                	ja     800420d5c2 <sched_halt+0x155>
  800420d590:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d594:	48 89 c1             	mov    %rax,%rcx
  800420d597:	48 ba 50 a6 21 04 80 	movabs $0x800421a650,%rdx
  800420d59e:	00 00 00 
  800420d5a1:	be 88 00 00 00       	mov    $0x88,%esi
  800420d5a6:	48 bf 74 a6 21 04 80 	movabs $0x800421a674,%rdi
  800420d5ad:	00 00 00 
  800420d5b0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d5b5:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420d5bc:	00 00 00 
  800420d5bf:	41 ff d0             	callq  *%r8
  800420d5c2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420d5c9:	ff ff ff 
  800420d5cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d5d0:	48 01 d0             	add    %rdx,%rax
  800420d5d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420d5d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d5db:	0f 22 d8             	mov    %rax,%cr3
  800420d5de:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d5e5:	00 00 00 
  800420d5e8:	ff d0                	callq  *%rax
  800420d5ea:	48 98                	cltq   
  800420d5ec:	48 c1 e0 03          	shl    $0x3,%rax
  800420d5f0:	48 89 c2             	mov    %rax,%rdx
  800420d5f3:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d5f7:	48 01 d0             	add    %rdx,%rax
  800420d5fa:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d601:	00 00 00 
  800420d604:	48 01 d0             	add    %rdx,%rax
  800420d607:	48 83 c0 04          	add    $0x4,%rax
  800420d60b:	be 02 00 00 00       	mov    $0x2,%esi
  800420d610:	48 89 c7             	mov    %rax,%rdi
  800420d613:	48 b8 42 d2 20 04 80 	movabs $0x800420d242,%rax
  800420d61a:	00 00 00 
  800420d61d:	ff d0                	callq  *%rax
  800420d61f:	48 b8 67 d2 20 04 80 	movabs $0x800420d267,%rax
  800420d626:	00 00 00 
  800420d629:	ff d0                	callq  *%rax
  800420d62b:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d632:	00 00 00 
  800420d635:	ff d0                	callq  *%rax
  800420d637:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d63e:	00 00 00 
  800420d641:	48 98                	cltq   
  800420d643:	48 c1 e0 03          	shl    $0x3,%rax
  800420d647:	48 89 c1             	mov    %rax,%rcx
  800420d64a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d64e:	48 01 c8             	add    %rcx,%rax
  800420d651:	48 01 d0             	add    %rdx,%rax
  800420d654:	48 83 c0 10          	add    $0x10,%rax
  800420d658:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420d65c:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420d663:	48 89 c4             	mov    %rax,%rsp
  800420d666:	6a 00                	pushq  $0x0
  800420d668:	6a 00                	pushq  $0x0
  800420d66a:	fb                   	sti    
  800420d66b:	f4                   	hlt    
  800420d66c:	c9                   	leaveq 
  800420d66d:	c3                   	retq   

000000800420d66e <pa2page>:
  800420d66e:	55                   	push   %rbp
  800420d66f:	48 89 e5             	mov    %rsp,%rbp
  800420d672:	48 83 ec 10          	sub    $0x10,%rsp
  800420d676:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420d67a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d67e:	48 c1 e8 0c          	shr    $0xc,%rax
  800420d682:	48 89 c2             	mov    %rax,%rdx
  800420d685:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420d68c:	00 00 00 
  800420d68f:	48 8b 00             	mov    (%rax),%rax
  800420d692:	48 39 c2             	cmp    %rax,%rdx
  800420d695:	72 2a                	jb     800420d6c1 <pa2page+0x53>
  800420d697:	48 ba 88 a6 21 04 80 	movabs $0x800421a688,%rdx
  800420d69e:	00 00 00 
  800420d6a1:	be 5b 00 00 00       	mov    $0x5b,%esi
  800420d6a6:	48 bf a7 a6 21 04 80 	movabs $0x800421a6a7,%rdi
  800420d6ad:	00 00 00 
  800420d6b0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d6b5:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420d6bc:	00 00 00 
  800420d6bf:	ff d1                	callq  *%rcx
  800420d6c1:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  800420d6c8:	00 00 00 
  800420d6cb:	48 8b 00             	mov    (%rax),%rax
  800420d6ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420d6d2:	48 c1 ea 0c          	shr    $0xc,%rdx
  800420d6d6:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d6da:	48 01 d0             	add    %rdx,%rax
  800420d6dd:	c9                   	leaveq 
  800420d6de:	c3                   	retq   

000000800420d6df <sys_cputs>:
  800420d6df:	55                   	push   %rbp
  800420d6e0:	48 89 e5             	mov    %rsp,%rbp
  800420d6e3:	48 83 ec 10          	sub    $0x10,%rsp
  800420d6e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420d6eb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420d6ef:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d6f6:	00 00 00 
  800420d6f9:	ff d0                	callq  *%rax
  800420d6fb:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d702:	00 00 00 
  800420d705:	48 98                	cltq   
  800420d707:	48 c1 e0 03          	shl    $0x3,%rax
  800420d70b:	48 89 c1             	mov    %rax,%rcx
  800420d70e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d712:	48 01 c8             	add    %rcx,%rax
  800420d715:	48 01 d0             	add    %rdx,%rax
  800420d718:	48 83 c0 08          	add    $0x8,%rax
  800420d71c:	48 8b 00             	mov    (%rax),%rax
  800420d71f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420d723:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420d727:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d72c:	48 89 c7             	mov    %rax,%rdi
  800420d72f:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d736:	00 00 00 
  800420d739:	ff d0                	callq  *%rax
  800420d73b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420d73f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d743:	48 89 c6             	mov    %rax,%rsi
  800420d746:	48 bf b6 a6 21 04 80 	movabs $0x800421a6b6,%rdi
  800420d74d:	00 00 00 
  800420d750:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d755:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420d75c:	00 00 00 
  800420d75f:	ff d1                	callq  *%rcx
  800420d761:	c9                   	leaveq 
  800420d762:	c3                   	retq   

000000800420d763 <sys_cgetc>:
  800420d763:	55                   	push   %rbp
  800420d764:	48 89 e5             	mov    %rsp,%rbp
  800420d767:	48 b8 ed 11 20 04 80 	movabs $0x80042011ed,%rax
  800420d76e:	00 00 00 
  800420d771:	ff d0                	callq  *%rax
  800420d773:	5d                   	pop    %rbp
  800420d774:	c3                   	retq   

000000800420d775 <sys_getenvid>:
  800420d775:	55                   	push   %rbp
  800420d776:	48 89 e5             	mov    %rsp,%rbp
  800420d779:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d780:	00 00 00 
  800420d783:	ff d0                	callq  *%rax
  800420d785:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d78c:	00 00 00 
  800420d78f:	48 98                	cltq   
  800420d791:	48 c1 e0 03          	shl    $0x3,%rax
  800420d795:	48 89 c1             	mov    %rax,%rcx
  800420d798:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d79c:	48 01 c8             	add    %rcx,%rax
  800420d79f:	48 01 d0             	add    %rdx,%rax
  800420d7a2:	48 83 c0 08          	add    $0x8,%rax
  800420d7a6:	48 8b 00             	mov    (%rax),%rax
  800420d7a9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d7af:	5d                   	pop    %rbp
  800420d7b0:	c3                   	retq   

000000800420d7b1 <sys_env_destroy>:
  800420d7b1:	55                   	push   %rbp
  800420d7b2:	48 89 e5             	mov    %rsp,%rbp
  800420d7b5:	48 83 ec 20          	sub    $0x20,%rsp
  800420d7b9:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d7bc:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d7c0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d7c3:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d7c8:	48 89 ce             	mov    %rcx,%rsi
  800420d7cb:	89 c7                	mov    %eax,%edi
  800420d7cd:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d7d4:	00 00 00 
  800420d7d7:	ff d0                	callq  *%rax
  800420d7d9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d7dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d7e0:	79 05                	jns    800420d7e7 <sys_env_destroy+0x36>
  800420d7e2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d7e5:	eb 18                	jmp    800420d7ff <sys_env_destroy+0x4e>
  800420d7e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d7eb:	48 89 c7             	mov    %rax,%rdi
  800420d7ee:	48 b8 78 8e 20 04 80 	movabs $0x8004208e78,%rax
  800420d7f5:	00 00 00 
  800420d7f8:	ff d0                	callq  *%rax
  800420d7fa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d7ff:	c9                   	leaveq 
  800420d800:	c3                   	retq   

000000800420d801 <sys_yield>:
  800420d801:	55                   	push   %rbp
  800420d802:	48 89 e5             	mov    %rsp,%rbp
  800420d805:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  800420d80c:	00 00 00 
  800420d80f:	ff d0                	callq  *%rax

000000800420d811 <sys_exofork>:
  800420d811:	55                   	push   %rbp
  800420d812:	48 89 e5             	mov    %rsp,%rbp
  800420d815:	53                   	push   %rbx
  800420d816:	48 83 ec 18          	sub    $0x18,%rsp
  800420d81a:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d821:	00 00 00 
  800420d824:	ff d0                	callq  *%rax
  800420d826:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d82d:	00 00 00 
  800420d830:	48 98                	cltq   
  800420d832:	48 c1 e0 03          	shl    $0x3,%rax
  800420d836:	48 89 c1             	mov    %rax,%rcx
  800420d839:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d83d:	48 01 c8             	add    %rcx,%rax
  800420d840:	48 01 d0             	add    %rdx,%rax
  800420d843:	48 83 c0 08          	add    $0x8,%rax
  800420d847:	48 8b 00             	mov    (%rax),%rax
  800420d84a:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420d850:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420d854:	89 d6                	mov    %edx,%esi
  800420d856:	48 89 c7             	mov    %rax,%rdi
  800420d859:	48 b8 d5 82 20 04 80 	movabs $0x80042082d5,%rax
  800420d860:	00 00 00 
  800420d863:	ff d0                	callq  *%rax
  800420d865:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420d868:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420d86c:	79 05                	jns    800420d873 <sys_exofork+0x62>
  800420d86e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d871:	eb 6c                	jmp    800420d8df <sys_exofork+0xce>
  800420d873:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d877:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420d87e:	00 00 00 
  800420d881:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420d885:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d88c:	00 00 00 
  800420d88f:	ff d0                	callq  *%rax
  800420d891:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d898:	00 00 00 
  800420d89b:	48 98                	cltq   
  800420d89d:	48 c1 e0 03          	shl    $0x3,%rax
  800420d8a1:	48 89 c1             	mov    %rax,%rcx
  800420d8a4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d8a8:	48 01 c8             	add    %rcx,%rax
  800420d8ab:	48 01 d0             	add    %rdx,%rax
  800420d8ae:	48 83 c0 08          	add    $0x8,%rax
  800420d8b2:	48 8b 00             	mov    (%rax),%rax
  800420d8b5:	48 89 da             	mov    %rbx,%rdx
  800420d8b8:	48 89 c6             	mov    %rax,%rsi
  800420d8bb:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d8c0:	48 89 d7             	mov    %rdx,%rdi
  800420d8c3:	48 89 c1             	mov    %rax,%rcx
  800420d8c6:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d8c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d8cd:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420d8d4:	00 
  800420d8d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d8d9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d8df:	48 83 c4 18          	add    $0x18,%rsp
  800420d8e3:	5b                   	pop    %rbx
  800420d8e4:	5d                   	pop    %rbp
  800420d8e5:	c3                   	retq   

000000800420d8e6 <sys_env_set_status>:
  800420d8e6:	55                   	push   %rbp
  800420d8e7:	48 89 e5             	mov    %rsp,%rbp
  800420d8ea:	48 83 ec 20          	sub    $0x20,%rsp
  800420d8ee:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d8f1:	89 75 e8             	mov    %esi,-0x18(%rbp)
  800420d8f4:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d8f8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d8fb:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d900:	48 89 ce             	mov    %rcx,%rsi
  800420d903:	89 c7                	mov    %eax,%edi
  800420d905:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d90c:	00 00 00 
  800420d90f:	ff d0                	callq  *%rax
  800420d911:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d914:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d918:	79 05                	jns    800420d91f <sys_env_set_status+0x39>
  800420d91a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d91d:	eb 25                	jmp    800420d944 <sys_env_set_status+0x5e>
  800420d91f:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420d923:	74 0d                	je     800420d932 <sys_env_set_status+0x4c>
  800420d925:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420d929:	74 07                	je     800420d932 <sys_env_set_status+0x4c>
  800420d92b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420d930:	eb 12                	jmp    800420d944 <sys_env_set_status+0x5e>
  800420d932:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d936:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420d939:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
  800420d93f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d944:	c9                   	leaveq 
  800420d945:	c3                   	retq   

000000800420d946 <sys_env_set_trapframe>:
  800420d946:	55                   	push   %rbp
  800420d947:	48 89 e5             	mov    %rsp,%rbp
  800420d94a:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420d951:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420d957:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420d95e:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420d965:	00 00 00 
  800420d968:	ff d0                	callq  *%rax
  800420d96a:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d971:	00 00 00 
  800420d974:	48 98                	cltq   
  800420d976:	48 c1 e0 03          	shl    $0x3,%rax
  800420d97a:	48 89 c1             	mov    %rax,%rcx
  800420d97d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d981:	48 01 c8             	add    %rcx,%rax
  800420d984:	48 01 d0             	add    %rdx,%rax
  800420d987:	48 83 c0 08          	add    $0x8,%rax
  800420d98b:	48 8b 00             	mov    (%rax),%rax
  800420d98e:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420d995:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d99a:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420d99f:	48 89 c7             	mov    %rax,%rdi
  800420d9a2:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420d9a9:	00 00 00 
  800420d9ac:	ff d0                	callq  *%rax
  800420d9ae:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420d9b5:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420d9bc:	48 89 c6             	mov    %rax,%rsi
  800420d9bf:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d9c4:	48 89 d7             	mov    %rdx,%rdi
  800420d9c7:	48 89 c1             	mov    %rax,%rcx
  800420d9ca:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d9cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d9d1:	80 cc 02             	or     $0x2,%ah
  800420d9d4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420d9d8:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420d9dc:	83 c8 03             	or     $0x3,%eax
  800420d9df:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  800420d9e3:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d9e7:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420d9ed:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d9f2:	48 89 ce             	mov    %rcx,%rsi
  800420d9f5:	89 c7                	mov    %eax,%edi
  800420d9f7:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420d9fe:	00 00 00 
  800420da01:	ff d0                	callq  *%rax
  800420da03:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da06:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da0a:	79 05                	jns    800420da11 <sys_env_set_trapframe+0xcb>
  800420da0c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da0f:	eb 21                	jmp    800420da32 <sys_env_set_trapframe+0xec>
  800420da11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420da15:	48 89 c2             	mov    %rax,%rdx
  800420da18:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420da1f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420da24:	48 89 d7             	mov    %rdx,%rdi
  800420da27:	48 89 c1             	mov    %rax,%rcx
  800420da2a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420da2d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da32:	c9                   	leaveq 
  800420da33:	c3                   	retq   

000000800420da34 <sys_env_set_pgfault_upcall>:
  800420da34:	55                   	push   %rbp
  800420da35:	48 89 e5             	mov    %rsp,%rbp
  800420da38:	48 83 ec 20          	sub    $0x20,%rsp
  800420da3c:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420da3f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420da43:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420da47:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420da4a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420da4f:	48 89 ce             	mov    %rcx,%rsi
  800420da52:	89 c7                	mov    %eax,%edi
  800420da54:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420da5b:	00 00 00 
  800420da5e:	ff d0                	callq  *%rax
  800420da60:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da63:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da67:	79 05                	jns    800420da6e <sys_env_set_pgfault_upcall+0x3a>
  800420da69:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da6c:	eb 14                	jmp    800420da82 <sys_env_set_pgfault_upcall+0x4e>
  800420da6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420da72:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420da76:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
  800420da7d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da82:	c9                   	leaveq 
  800420da83:	c3                   	retq   

000000800420da84 <sys_page_alloc>:
  800420da84:	55                   	push   %rbp
  800420da85:	48 89 e5             	mov    %rsp,%rbp
  800420da88:	48 83 ec 30          	sub    $0x30,%rsp
  800420da8c:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420da8f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420da93:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800420da96:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420da9a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420da9d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420daa2:	48 89 ce             	mov    %rcx,%rsi
  800420daa5:	89 c7                	mov    %eax,%edi
  800420daa7:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420daae:	00 00 00 
  800420dab1:	ff d0                	callq  *%rax
  800420dab3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dab6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420daba:	79 08                	jns    800420dac4 <sys_page_alloc+0x40>
  800420dabc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dabf:	e9 a7 00 00 00       	jmpq   800420db6b <sys_page_alloc+0xe7>
  800420dac4:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420dac7:	f7 d0                	not    %eax
  800420dac9:	83 e0 05             	and    $0x5,%eax
  800420dacc:	85 c0                	test   %eax,%eax
  800420dace:	75 0c                	jne    800420dadc <sys_page_alloc+0x58>
  800420dad0:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420dad3:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dad8:	85 c0                	test   %eax,%eax
  800420dada:	74 0a                	je     800420dae6 <sys_page_alloc+0x62>
  800420dadc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dae1:	e9 85 00 00 00       	jmpq   800420db6b <sys_page_alloc+0xe7>
  800420dae6:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420daed:	00 00 00 
  800420daf0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420daf4:	76 07                	jbe    800420dafd <sys_page_alloc+0x79>
  800420daf6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dafb:	eb 6e                	jmp    800420db6b <sys_page_alloc+0xe7>
  800420dafd:	bf 01 00 00 00       	mov    $0x1,%edi
  800420db02:	48 b8 e0 2f 20 04 80 	movabs $0x8004202fe0,%rax
  800420db09:	00 00 00 
  800420db0c:	ff d0                	callq  *%rax
  800420db0e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420db12:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420db17:	75 07                	jne    800420db20 <sys_page_alloc+0x9c>
  800420db19:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420db1e:	eb 4b                	jmp    800420db6b <sys_page_alloc+0xe7>
  800420db20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420db24:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420db2b:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420db2e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420db32:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420db36:	48 89 c7             	mov    %rax,%rdi
  800420db39:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420db40:	00 00 00 
  800420db43:	ff d0                	callq  *%rax
  800420db45:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420db48:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420db4c:	79 18                	jns    800420db66 <sys_page_alloc+0xe2>
  800420db4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420db52:	48 89 c7             	mov    %rax,%rdi
  800420db55:	48 b8 92 30 20 04 80 	movabs $0x8004203092,%rax
  800420db5c:	00 00 00 
  800420db5f:	ff d0                	callq  *%rax
  800420db61:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420db64:	eb 05                	jmp    800420db6b <sys_page_alloc+0xe7>
  800420db66:	b8 00 00 00 00       	mov    $0x0,%eax
  800420db6b:	c9                   	leaveq 
  800420db6c:	c3                   	retq   

000000800420db6d <sys_page_map>:
  800420db6d:	55                   	push   %rbp
  800420db6e:	48 89 e5             	mov    %rsp,%rbp
  800420db71:	48 83 ec 60          	sub    $0x60,%rsp
  800420db75:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420db78:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420db7c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420db7f:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420db83:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
  800420db87:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db8e:	00 00 00 
  800420db91:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420db95:	77 10                	ja     800420dba7 <sys_page_map+0x3a>
  800420db97:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db9e:	00 00 00 
  800420dba1:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420dba5:	76 0a                	jbe    800420dbb1 <sys_page_map+0x44>
  800420dba7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dbac:	e9 3f 01 00 00       	jmpq   800420dcf0 <sys_page_map+0x183>
  800420dbb1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420dbb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420dbb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dbbd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420dbc3:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420dbc7:	75 18                	jne    800420dbe1 <sys_page_map+0x74>
  800420dbc9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420dbcd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420dbd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420dbd5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420dbdb:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420dbdf:	74 0a                	je     800420dbeb <sys_page_map+0x7e>
  800420dbe1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dbe6:	e9 05 01 00 00       	jmpq   800420dcf0 <sys_page_map+0x183>
  800420dbeb:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420dbef:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dbf2:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dbf7:	48 89 ce             	mov    %rcx,%rsi
  800420dbfa:	89 c7                	mov    %eax,%edi
  800420dbfc:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dc03:	00 00 00 
  800420dc06:	ff d0                	callq  *%rax
  800420dc08:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dc0b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc0f:	78 26                	js     800420dc37 <sys_page_map+0xca>
  800420dc11:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420dc15:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420dc18:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dc1d:	48 89 ce             	mov    %rcx,%rsi
  800420dc20:	89 c7                	mov    %eax,%edi
  800420dc22:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dc29:	00 00 00 
  800420dc2c:	ff d0                	callq  *%rax
  800420dc2e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dc31:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc35:	79 08                	jns    800420dc3f <sys_page_map+0xd2>
  800420dc37:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc3a:	e9 b1 00 00 00       	jmpq   800420dcf0 <sys_page_map+0x183>
  800420dc3f:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc42:	f7 d0                	not    %eax
  800420dc44:	83 e0 05             	and    $0x5,%eax
  800420dc47:	85 c0                	test   %eax,%eax
  800420dc49:	75 0c                	jne    800420dc57 <sys_page_map+0xea>
  800420dc4b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc4e:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dc53:	85 c0                	test   %eax,%eax
  800420dc55:	74 0a                	je     800420dc61 <sys_page_map+0xf4>
  800420dc57:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc5c:	e9 8f 00 00 00       	jmpq   800420dcf0 <sys_page_map+0x183>
  800420dc61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dc65:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dc6c:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420dc70:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420dc74:	48 89 ce             	mov    %rcx,%rsi
  800420dc77:	48 89 c7             	mov    %rax,%rdi
  800420dc7a:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420dc81:	00 00 00 
  800420dc84:	ff d0                	callq  *%rax
  800420dc86:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420dc8a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420dc8f:	75 07                	jne    800420dc98 <sys_page_map+0x12b>
  800420dc91:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc96:	eb 58                	jmp    800420dcf0 <sys_page_map+0x183>
  800420dc98:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc9b:	83 e0 02             	and    $0x2,%eax
  800420dc9e:	85 c0                	test   %eax,%eax
  800420dca0:	74 16                	je     800420dcb8 <sys_page_map+0x14b>
  800420dca2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420dca6:	48 8b 00             	mov    (%rax),%rax
  800420dca9:	83 e0 02             	and    $0x2,%eax
  800420dcac:	48 85 c0             	test   %rax,%rax
  800420dcaf:	75 07                	jne    800420dcb8 <sys_page_map+0x14b>
  800420dcb1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dcb6:	eb 38                	jmp    800420dcf0 <sys_page_map+0x183>
  800420dcb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420dcbc:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dcc3:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420dcc6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420dcca:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420dcce:	48 89 c7             	mov    %rax,%rdi
  800420dcd1:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420dcd8:	00 00 00 
  800420dcdb:	ff d0                	callq  *%rax
  800420dcdd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dce0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dce4:	79 05                	jns    800420dceb <sys_page_map+0x17e>
  800420dce6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dce9:	eb 05                	jmp    800420dcf0 <sys_page_map+0x183>
  800420dceb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dcf0:	c9                   	leaveq 
  800420dcf1:	c3                   	retq   

000000800420dcf2 <sys_page_unmap>:
  800420dcf2:	55                   	push   %rbp
  800420dcf3:	48 89 e5             	mov    %rsp,%rbp
  800420dcf6:	48 83 ec 20          	sub    $0x20,%rsp
  800420dcfa:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420dcfd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420dd01:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420dd05:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dd08:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dd0d:	48 89 ce             	mov    %rcx,%rsi
  800420dd10:	89 c7                	mov    %eax,%edi
  800420dd12:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dd19:	00 00 00 
  800420dd1c:	ff d0                	callq  *%rax
  800420dd1e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dd21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dd25:	79 05                	jns    800420dd2c <sys_page_unmap+0x3a>
  800420dd27:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dd2a:	eb 4b                	jmp    800420dd77 <sys_page_unmap+0x85>
  800420dd2c:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dd33:	00 00 00 
  800420dd36:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420dd3a:	77 0e                	ja     800420dd4a <sys_page_unmap+0x58>
  800420dd3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420dd40:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420dd45:	48 85 c0             	test   %rax,%rax
  800420dd48:	74 07                	je     800420dd51 <sys_page_unmap+0x5f>
  800420dd4a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dd4f:	eb 26                	jmp    800420dd77 <sys_page_unmap+0x85>
  800420dd51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dd55:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dd5c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420dd60:	48 89 d6             	mov    %rdx,%rsi
  800420dd63:	48 89 c7             	mov    %rax,%rdi
  800420dd66:	48 b8 4d 3f 20 04 80 	movabs $0x8004203f4d,%rax
  800420dd6d:	00 00 00 
  800420dd70:	ff d0                	callq  *%rax
  800420dd72:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dd77:	c9                   	leaveq 
  800420dd78:	c3                   	retq   

000000800420dd79 <sys_ipc_try_send>:
  800420dd79:	55                   	push   %rbp
  800420dd7a:	48 89 e5             	mov    %rsp,%rbp
  800420dd7d:	53                   	push   %rbx
  800420dd7e:	48 83 ec 58          	sub    $0x58,%rsp
  800420dd82:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420dd85:	89 75 b8             	mov    %esi,-0x48(%rbp)
  800420dd88:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420dd8c:	89 4d ac             	mov    %ecx,-0x54(%rbp)
  800420dd8f:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420dd93:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dd96:	ba 00 00 00 00       	mov    $0x0,%edx
  800420dd9b:	48 89 ce             	mov    %rcx,%rsi
  800420dd9e:	89 c7                	mov    %eax,%edi
  800420dda0:	48 b8 46 7f 20 04 80 	movabs $0x8004207f46,%rax
  800420dda7:	00 00 00 
  800420ddaa:	ff d0                	callq  *%rax
  800420ddac:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420ddaf:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420ddb3:	79 08                	jns    800420ddbd <sys_ipc_try_send+0x44>
  800420ddb5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420ddb8:	e9 58 06 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420ddbd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ddc1:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420ddc8:	83 f0 01             	xor    $0x1,%eax
  800420ddcb:	84 c0                	test   %al,%al
  800420ddcd:	74 0a                	je     800420ddd9 <sys_ipc_try_send+0x60>
  800420ddcf:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420ddd4:	e9 3c 06 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420ddd9:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420dde0:	00 00 00 
  800420dde3:	ff d0                	callq  *%rax
  800420dde5:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ddec:	00 00 00 
  800420ddef:	48 98                	cltq   
  800420ddf1:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddf5:	48 89 c1             	mov    %rax,%rcx
  800420ddf8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ddfc:	48 01 c8             	add    %rcx,%rax
  800420ddff:	48 01 d0             	add    %rdx,%rax
  800420de02:	48 83 c0 08          	add    $0x8,%rax
  800420de06:	48 8b 00             	mov    (%rax),%rax
  800420de09:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420de0f:	83 f8 03             	cmp    $0x3,%eax
  800420de12:	0f 85 7b 01 00 00    	jne    800420df93 <sys_ipc_try_send+0x21a>
  800420de18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420de1c:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420de23:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420de2a:	00 00 00 
  800420de2d:	48 39 c2             	cmp    %rax,%rdx
  800420de30:	0f 87 5d 01 00 00    	ja     800420df93 <sys_ipc_try_send+0x21a>
  800420de36:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420de3d:	00 00 00 
  800420de40:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420de44:	77 35                	ja     800420de7b <sys_ipc_try_send+0x102>
  800420de46:	48 b9 bb a6 21 04 80 	movabs $0x800421a6bb,%rcx
  800420de4d:	00 00 00 
  800420de50:	48 ba d4 a6 21 04 80 	movabs $0x800421a6d4,%rdx
  800420de57:	00 00 00 
  800420de5a:	be 9f 01 00 00       	mov    $0x19f,%esi
  800420de5f:	48 bf e9 a6 21 04 80 	movabs $0x800421a6e9,%rdi
  800420de66:	00 00 00 
  800420de69:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de6e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420de75:	00 00 00 
  800420de78:	41 ff d0             	callq  *%r8
  800420de7b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420de7f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420de83:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420de8a:	00 00 00 
  800420de8d:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420de91:	77 32                	ja     800420dec5 <sys_ipc_try_send+0x14c>
  800420de93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420de97:	48 89 c1             	mov    %rax,%rcx
  800420de9a:	48 ba 00 a7 21 04 80 	movabs $0x800421a700,%rdx
  800420dea1:	00 00 00 
  800420dea4:	be a0 01 00 00       	mov    $0x1a0,%esi
  800420dea9:	48 bf e9 a6 21 04 80 	movabs $0x800421a6e9,%rdi
  800420deb0:	00 00 00 
  800420deb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420deb8:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420debf:	00 00 00 
  800420dec2:	41 ff d0             	callq  *%r8
  800420dec5:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420decc:	ff ff ff 
  800420decf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ded3:	48 01 d0             	add    %rdx,%rax
  800420ded6:	48 89 c7             	mov    %rax,%rdi
  800420ded9:	48 b8 6e d6 20 04 80 	movabs $0x800420d66e,%rax
  800420dee0:	00 00 00 
  800420dee3:	ff d0                	callq  *%rax
  800420dee5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420dee9:	8b 4d ac             	mov    -0x54(%rbp),%ecx
  800420deec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420def0:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420def7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420defb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420df02:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  800420df06:	48 89 c7             	mov    %rax,%rdi
  800420df09:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420df10:	00 00 00 
  800420df13:	ff d0                	callq  *%rax
  800420df15:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420df18:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420df1c:	79 63                	jns    800420df81 <sys_ipc_try_send+0x208>
  800420df1e:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420df25:	00 00 00 
  800420df28:	ff d0                	callq  *%rax
  800420df2a:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420df31:	00 00 00 
  800420df34:	48 98                	cltq   
  800420df36:	48 c1 e0 03          	shl    $0x3,%rax
  800420df3a:	48 89 c1             	mov    %rax,%rcx
  800420df3d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df41:	48 01 c8             	add    %rcx,%rax
  800420df44:	48 01 d0             	add    %rdx,%rax
  800420df47:	48 83 c0 08          	add    $0x8,%rax
  800420df4b:	48 8b 00             	mov    (%rax),%rax
  800420df4e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420df54:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420df57:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420df5b:	89 c6                	mov    %eax,%esi
  800420df5d:	48 bf 28 a7 21 04 80 	movabs $0x800421a728,%rdi
  800420df64:	00 00 00 
  800420df67:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df6c:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  800420df73:	00 00 00 
  800420df76:	41 ff d0             	callq  *%r8
  800420df79:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420df7c:	e9 94 04 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420df81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420df85:	8b 55 ac             	mov    -0x54(%rbp),%edx
  800420df88:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420df8e:	e9 f1 03 00 00       	jmpq   800420e384 <sys_ipc_try_send+0x60b>
  800420df93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420df97:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420df9d:	83 f8 03             	cmp    $0x3,%eax
  800420dfa0:	0f 85 4c 01 00 00    	jne    800420e0f2 <sys_ipc_try_send+0x379>
  800420dfa6:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dfad:	00 00 00 
  800420dfb0:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420dfb4:	0f 87 38 01 00 00    	ja     800420e0f2 <sys_ipc_try_send+0x379>
  800420dfba:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420dfc1:	00 00 00 
  800420dfc4:	ff d0                	callq  *%rax
  800420dfc6:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420dfcd:	00 00 00 
  800420dfd0:	48 98                	cltq   
  800420dfd2:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfd6:	48 89 c1             	mov    %rax,%rcx
  800420dfd9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dfdd:	48 01 c8             	add    %rcx,%rax
  800420dfe0:	48 01 d0             	add    %rdx,%rax
  800420dfe3:	48 83 c0 08          	add    $0x8,%rax
  800420dfe7:	48 8b 00             	mov    (%rax),%rax
  800420dfea:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dff1:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420dff5:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420dff9:	48 89 ce             	mov    %rcx,%rsi
  800420dffc:	48 89 c7             	mov    %rax,%rdi
  800420dfff:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420e006:	00 00 00 
  800420e009:	ff d0                	callq  *%rax
  800420e00b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e00f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420e014:	75 61                	jne    800420e077 <sys_ipc_try_send+0x2fe>
  800420e016:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e01d:	00 00 00 
  800420e020:	ff d0                	callq  *%rax
  800420e022:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e029:	00 00 00 
  800420e02c:	48 98                	cltq   
  800420e02e:	48 c1 e0 03          	shl    $0x3,%rax
  800420e032:	48 89 c1             	mov    %rax,%rcx
  800420e035:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e039:	48 01 c8             	add    %rcx,%rax
  800420e03c:	48 01 d0             	add    %rdx,%rax
  800420e03f:	48 83 c0 08          	add    $0x8,%rax
  800420e043:	48 8b 00             	mov    (%rax),%rax
  800420e046:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e04c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420e050:	89 c6                	mov    %eax,%esi
  800420e052:	48 bf 68 a7 21 04 80 	movabs $0x800421a768,%rdi
  800420e059:	00 00 00 
  800420e05c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e061:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420e068:	00 00 00 
  800420e06b:	ff d1                	callq  *%rcx
  800420e06d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e072:	e9 9e 03 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420e077:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420e07a:	83 e0 02             	and    $0x2,%eax
  800420e07d:	85 c0                	test   %eax,%eax
  800420e07f:	74 6c                	je     800420e0ed <sys_ipc_try_send+0x374>
  800420e081:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e085:	48 8b 00             	mov    (%rax),%rax
  800420e088:	83 e0 02             	and    $0x2,%eax
  800420e08b:	48 85 c0             	test   %rax,%rax
  800420e08e:	75 5d                	jne    800420e0ed <sys_ipc_try_send+0x374>
  800420e090:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e097:	00 00 00 
  800420e09a:	ff d0                	callq  *%rax
  800420e09c:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e0a3:	00 00 00 
  800420e0a6:	48 98                	cltq   
  800420e0a8:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0ac:	48 89 c1             	mov    %rax,%rcx
  800420e0af:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0b3:	48 01 c8             	add    %rcx,%rax
  800420e0b6:	48 01 d0             	add    %rdx,%rax
  800420e0b9:	48 83 c0 08          	add    $0x8,%rax
  800420e0bd:	48 8b 00             	mov    (%rax),%rax
  800420e0c0:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e0c6:	89 c6                	mov    %eax,%esi
  800420e0c8:	48 bf a0 a7 21 04 80 	movabs $0x800421a7a0,%rdi
  800420e0cf:	00 00 00 
  800420e0d2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e0d7:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420e0de:	00 00 00 
  800420e0e1:	ff d2                	callq  *%rdx
  800420e0e3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e0e8:	e9 28 03 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420e0ed:	e9 92 02 00 00       	jmpq   800420e384 <sys_ipc_try_send+0x60b>
  800420e0f2:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e0f9:	00 00 00 
  800420e0fc:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e100:	0f 87 70 02 00 00    	ja     800420e376 <sys_ipc_try_send+0x5fd>
  800420e106:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e10a:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e111:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e118:	00 00 00 
  800420e11b:	48 39 c2             	cmp    %rax,%rdx
  800420e11e:	0f 87 52 02 00 00    	ja     800420e376 <sys_ipc_try_send+0x5fd>
  800420e124:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420e127:	f7 d0                	not    %eax
  800420e129:	83 e0 05             	and    $0x5,%eax
  800420e12c:	85 c0                	test   %eax,%eax
  800420e12e:	75 0c                	jne    800420e13c <sys_ipc_try_send+0x3c3>
  800420e130:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420e133:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e138:	85 c0                	test   %eax,%eax
  800420e13a:	74 60                	je     800420e19c <sys_ipc_try_send+0x423>
  800420e13c:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e143:	00 00 00 
  800420e146:	ff d0                	callq  *%rax
  800420e148:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e14f:	00 00 00 
  800420e152:	48 98                	cltq   
  800420e154:	48 c1 e0 03          	shl    $0x3,%rax
  800420e158:	48 89 c1             	mov    %rax,%rcx
  800420e15b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e15f:	48 01 c8             	add    %rcx,%rax
  800420e162:	48 01 d0             	add    %rdx,%rax
  800420e165:	48 83 c0 08          	add    $0x8,%rax
  800420e169:	48 8b 00             	mov    (%rax),%rax
  800420e16c:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e172:	8b 55 ac             	mov    -0x54(%rbp),%edx
  800420e175:	89 c6                	mov    %eax,%esi
  800420e177:	48 bf e8 a7 21 04 80 	movabs $0x800421a7e8,%rdi
  800420e17e:	00 00 00 
  800420e181:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e186:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420e18d:	00 00 00 
  800420e190:	ff d1                	callq  *%rcx
  800420e192:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e197:	e9 79 02 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420e19c:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e1a3:	00 00 00 
  800420e1a6:	ff d0                	callq  *%rax
  800420e1a8:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e1af:	00 00 00 
  800420e1b2:	48 98                	cltq   
  800420e1b4:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1b8:	48 89 c1             	mov    %rax,%rcx
  800420e1bb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1bf:	48 01 c8             	add    %rcx,%rax
  800420e1c2:	48 01 d0             	add    %rdx,%rax
  800420e1c5:	48 83 c0 08          	add    $0x8,%rax
  800420e1c9:	48 8b 00             	mov    (%rax),%rax
  800420e1cc:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e1d3:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e1d7:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e1db:	48 89 ce             	mov    %rcx,%rsi
  800420e1de:	48 89 c7             	mov    %rax,%rdi
  800420e1e1:	48 b8 c2 3e 20 04 80 	movabs $0x8004203ec2,%rax
  800420e1e8:	00 00 00 
  800420e1eb:	ff d0                	callq  *%rax
  800420e1ed:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e1f1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420e1f6:	75 61                	jne    800420e259 <sys_ipc_try_send+0x4e0>
  800420e1f8:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e1ff:	00 00 00 
  800420e202:	ff d0                	callq  *%rax
  800420e204:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e20b:	00 00 00 
  800420e20e:	48 98                	cltq   
  800420e210:	48 c1 e0 03          	shl    $0x3,%rax
  800420e214:	48 89 c1             	mov    %rax,%rcx
  800420e217:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e21b:	48 01 c8             	add    %rcx,%rax
  800420e21e:	48 01 d0             	add    %rdx,%rax
  800420e221:	48 83 c0 08          	add    $0x8,%rax
  800420e225:	48 8b 00             	mov    (%rax),%rax
  800420e228:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e22e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420e232:	89 c6                	mov    %eax,%esi
  800420e234:	48 bf 68 a7 21 04 80 	movabs $0x800421a768,%rdi
  800420e23b:	00 00 00 
  800420e23e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e243:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  800420e24a:	00 00 00 
  800420e24d:	ff d1                	callq  *%rcx
  800420e24f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e254:	e9 bc 01 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420e259:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420e25c:	83 e0 02             	and    $0x2,%eax
  800420e25f:	85 c0                	test   %eax,%eax
  800420e261:	74 6c                	je     800420e2cf <sys_ipc_try_send+0x556>
  800420e263:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e267:	48 8b 00             	mov    (%rax),%rax
  800420e26a:	83 e0 02             	and    $0x2,%eax
  800420e26d:	48 85 c0             	test   %rax,%rax
  800420e270:	75 5d                	jne    800420e2cf <sys_ipc_try_send+0x556>
  800420e272:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e279:	00 00 00 
  800420e27c:	ff d0                	callq  *%rax
  800420e27e:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e285:	00 00 00 
  800420e288:	48 98                	cltq   
  800420e28a:	48 c1 e0 03          	shl    $0x3,%rax
  800420e28e:	48 89 c1             	mov    %rax,%rcx
  800420e291:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e295:	48 01 c8             	add    %rcx,%rax
  800420e298:	48 01 d0             	add    %rdx,%rax
  800420e29b:	48 83 c0 08          	add    $0x8,%rax
  800420e29f:	48 8b 00             	mov    (%rax),%rax
  800420e2a2:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e2a8:	89 c6                	mov    %eax,%esi
  800420e2aa:	48 bf a0 a7 21 04 80 	movabs $0x800421a7a0,%rdi
  800420e2b1:	00 00 00 
  800420e2b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e2b9:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420e2c0:	00 00 00 
  800420e2c3:	ff d2                	callq  *%rdx
  800420e2c5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e2ca:	e9 46 01 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420e2cf:	8b 4d ac             	mov    -0x54(%rbp),%ecx
  800420e2d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e2d6:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e2dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e2e1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e2e8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  800420e2ec:	48 89 c7             	mov    %rax,%rdi
  800420e2ef:	48 b8 52 3b 20 04 80 	movabs $0x8004203b52,%rax
  800420e2f6:	00 00 00 
  800420e2f9:	ff d0                	callq  *%rax
  800420e2fb:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e2fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e302:	79 63                	jns    800420e367 <sys_ipc_try_send+0x5ee>
  800420e304:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e30b:	00 00 00 
  800420e30e:	ff d0                	callq  *%rax
  800420e310:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e317:	00 00 00 
  800420e31a:	48 98                	cltq   
  800420e31c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e320:	48 89 c1             	mov    %rax,%rcx
  800420e323:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e327:	48 01 c8             	add    %rcx,%rax
  800420e32a:	48 01 d0             	add    %rdx,%rax
  800420e32d:	48 83 c0 08          	add    $0x8,%rax
  800420e331:	48 8b 00             	mov    (%rax),%rax
  800420e334:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e33a:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e33d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420e341:	89 c6                	mov    %eax,%esi
  800420e343:	48 bf 28 a7 21 04 80 	movabs $0x800421a728,%rdi
  800420e34a:	00 00 00 
  800420e34d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e352:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  800420e359:	00 00 00 
  800420e35c:	41 ff d0             	callq  *%r8
  800420e35f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e362:	e9 ae 00 00 00       	jmpq   800420e415 <sys_ipc_try_send+0x69c>
  800420e367:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e36b:	8b 55 ac             	mov    -0x54(%rbp),%edx
  800420e36e:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e374:	eb 0e                	jmp    800420e384 <sys_ipc_try_send+0x60b>
  800420e376:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e37a:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e381:	00 00 00 
  800420e384:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e388:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
  800420e38f:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  800420e393:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e39a:	00 00 00 
  800420e39d:	ff d0                	callq  *%rax
  800420e39f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e3a6:	00 00 00 
  800420e3a9:	48 98                	cltq   
  800420e3ab:	48 c1 e0 03          	shl    $0x3,%rax
  800420e3af:	48 89 c1             	mov    %rax,%rcx
  800420e3b2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e3b6:	48 01 c8             	add    %rcx,%rax
  800420e3b9:	48 01 d0             	add    %rdx,%rax
  800420e3bc:	48 83 c0 08          	add    $0x8,%rax
  800420e3c0:	48 8b 00             	mov    (%rax),%rax
  800420e3c3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e3c9:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
  800420e3cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e3d3:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420e3d6:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420e3dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e3e0:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e3e7:	00 
  800420e3e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e3ec:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e3f3:	00 00 00 
  800420e3f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e3fa:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420e400:	83 f8 03             	cmp    $0x3,%eax
  800420e403:	75 0b                	jne    800420e410 <sys_ipc_try_send+0x697>
  800420e405:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e409:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420e40c:	48 89 50 40          	mov    %rdx,0x40(%rax)
  800420e410:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e415:	48 83 c4 58          	add    $0x58,%rsp
  800420e419:	5b                   	pop    %rbx
  800420e41a:	5d                   	pop    %rbp
  800420e41b:	c3                   	retq   

000000800420e41c <sys_ipc_recv>:
  800420e41c:	55                   	push   %rbp
  800420e41d:	48 89 e5             	mov    %rsp,%rbp
  800420e420:	48 83 ec 10          	sub    $0x10,%rsp
  800420e424:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e428:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e42f:	00 00 00 
  800420e432:	ff d0                	callq  *%rax
  800420e434:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e43b:	00 00 00 
  800420e43e:	48 98                	cltq   
  800420e440:	48 c1 e0 03          	shl    $0x3,%rax
  800420e444:	48 89 c1             	mov    %rax,%rcx
  800420e447:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e44b:	48 01 c8             	add    %rcx,%rax
  800420e44e:	48 01 d0             	add    %rdx,%rax
  800420e451:	48 83 c0 08          	add    $0x8,%rax
  800420e455:	48 8b 00             	mov    (%rax),%rax
  800420e458:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e45f:	84 c0                	test   %al,%al
  800420e461:	74 2a                	je     800420e48d <sys_ipc_recv+0x71>
  800420e463:	48 ba 10 a8 21 04 80 	movabs $0x800421a810,%rdx
  800420e46a:	00 00 00 
  800420e46d:	be fd 01 00 00       	mov    $0x1fd,%esi
  800420e472:	48 bf e9 a6 21 04 80 	movabs $0x800421a6e9,%rdi
  800420e479:	00 00 00 
  800420e47c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e481:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  800420e488:	00 00 00 
  800420e48b:	ff d1                	callq  *%rcx
  800420e48d:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e494:	00 00 00 
  800420e497:	ff d0                	callq  *%rax
  800420e499:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e4a0:	00 00 00 
  800420e4a3:	48 98                	cltq   
  800420e4a5:	48 c1 e0 03          	shl    $0x3,%rax
  800420e4a9:	48 89 c1             	mov    %rax,%rcx
  800420e4ac:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e4b0:	48 01 c8             	add    %rcx,%rax
  800420e4b3:	48 01 d0             	add    %rdx,%rax
  800420e4b6:	48 83 c0 08          	add    $0x8,%rax
  800420e4ba:	48 8b 00             	mov    (%rax),%rax
  800420e4bd:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
  800420e4c4:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e4cb:	00 00 00 
  800420e4ce:	ff d0                	callq  *%rax
  800420e4d0:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e4d7:	00 00 00 
  800420e4da:	48 98                	cltq   
  800420e4dc:	48 c1 e0 03          	shl    $0x3,%rax
  800420e4e0:	48 89 c1             	mov    %rax,%rcx
  800420e4e3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e4e7:	48 01 c8             	add    %rcx,%rax
  800420e4ea:	48 01 d0             	add    %rdx,%rax
  800420e4ed:	48 83 c0 08          	add    $0x8,%rax
  800420e4f1:	48 8b 00             	mov    (%rax),%rax
  800420e4f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e4f8:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
  800420e4ff:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e506:	00 00 00 
  800420e509:	ff d0                	callq  *%rax
  800420e50b:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e512:	00 00 00 
  800420e515:	48 98                	cltq   
  800420e517:	48 c1 e0 03          	shl    $0x3,%rax
  800420e51b:	48 89 c1             	mov    %rax,%rcx
  800420e51e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e522:	48 01 c8             	add    %rcx,%rax
  800420e525:	48 01 d0             	add    %rdx,%rax
  800420e528:	48 83 c0 08          	add    $0x8,%rax
  800420e52c:	48 8b 00             	mov    (%rax),%rax
  800420e52f:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e536:	00 00 00 
  800420e539:	48 b8 85 d2 20 04 80 	movabs $0x800420d285,%rax
  800420e540:	00 00 00 
  800420e543:	ff d0                	callq  *%rax

000000800420e545 <sys_time_msec>:
  800420e545:	55                   	push   %rbp
  800420e546:	48 89 e5             	mov    %rsp,%rbp
  800420e549:	48 b8 30 8c 21 04 80 	movabs $0x8004218c30,%rax
  800420e550:	00 00 00 
  800420e553:	ff d0                	callq  *%rax
  800420e555:	5d                   	pop    %rbp
  800420e556:	c3                   	retq   

000000800420e557 <sys_net_transmit>:
  800420e557:	55                   	push   %rbp
  800420e558:	48 89 e5             	mov    %rsp,%rbp
  800420e55b:	48 83 ec 10          	sub    $0x10,%rsp
  800420e55f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e563:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e567:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e56e:	00 00 00 
  800420e571:	ff d0                	callq  *%rax
  800420e573:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e57a:	00 00 00 
  800420e57d:	48 98                	cltq   
  800420e57f:	48 c1 e0 03          	shl    $0x3,%rax
  800420e583:	48 89 c1             	mov    %rax,%rcx
  800420e586:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e58a:	48 01 c8             	add    %rcx,%rax
  800420e58d:	48 01 d0             	add    %rdx,%rax
  800420e590:	48 83 c0 08          	add    $0x8,%rax
  800420e594:	48 8b 00             	mov    (%rax),%rax
  800420e597:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e59b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e59f:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e5a4:	48 89 c7             	mov    %rax,%rdi
  800420e5a7:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e5ae:	00 00 00 
  800420e5b1:	ff d0                	callq  *%rax
  800420e5b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e5b7:	89 c2                	mov    %eax,%edx
  800420e5b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e5bd:	89 d6                	mov    %edx,%esi
  800420e5bf:	48 89 c7             	mov    %rax,%rdi
  800420e5c2:	48 b8 b9 7d 21 04 80 	movabs $0x8004217db9,%rax
  800420e5c9:	00 00 00 
  800420e5cc:	ff d0                	callq  *%rax
  800420e5ce:	c9                   	leaveq 
  800420e5cf:	c3                   	retq   

000000800420e5d0 <sys_net_receive>:
  800420e5d0:	55                   	push   %rbp
  800420e5d1:	48 89 e5             	mov    %rsp,%rbp
  800420e5d4:	48 83 ec 10          	sub    $0x10,%rsp
  800420e5d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e5dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e5e0:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420e5e7:	00 00 00 
  800420e5ea:	ff d0                	callq  *%rax
  800420e5ec:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e5f3:	00 00 00 
  800420e5f6:	48 98                	cltq   
  800420e5f8:	48 c1 e0 03          	shl    $0x3,%rax
  800420e5fc:	48 89 c1             	mov    %rax,%rcx
  800420e5ff:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e603:	48 01 c8             	add    %rcx,%rax
  800420e606:	48 01 d0             	add    %rdx,%rax
  800420e609:	48 83 c0 08          	add    $0x8,%rax
  800420e60d:	48 8b 00             	mov    (%rax),%rax
  800420e610:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e614:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e618:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420e61d:	48 89 c7             	mov    %rax,%rdi
  800420e620:	48 b8 a4 42 20 04 80 	movabs $0x80042042a4,%rax
  800420e627:	00 00 00 
  800420e62a:	ff d0                	callq  *%rax
  800420e62c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e630:	89 c2                	mov    %eax,%edx
  800420e632:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e636:	89 d6                	mov    %edx,%esi
  800420e638:	48 89 c7             	mov    %rax,%rdi
  800420e63b:	48 b8 28 7f 21 04 80 	movabs $0x8004217f28,%rax
  800420e642:	00 00 00 
  800420e645:	ff d0                	callq  *%rax
  800420e647:	c9                   	leaveq 
  800420e648:	c3                   	retq   

000000800420e649 <syscall>:
  800420e649:	55                   	push   %rbp
  800420e64a:	48 89 e5             	mov    %rsp,%rbp
  800420e64d:	48 83 ec 30          	sub    $0x30,%rsp
  800420e651:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e655:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e659:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420e65d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420e661:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420e665:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
  800420e669:	48 83 7d f8 10       	cmpq   $0x10,-0x8(%rbp)
  800420e66e:	0f 87 0d 02 00 00    	ja     800420e881 <syscall+0x238>
  800420e674:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e678:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420e67f:	00 
  800420e680:	48 b8 28 a8 21 04 80 	movabs $0x800421a828,%rax
  800420e687:	00 00 00 
  800420e68a:	48 01 d0             	add    %rdx,%rax
  800420e68d:	48 8b 00             	mov    (%rax),%rax
  800420e690:	ff e0                	jmpq   *%rax
  800420e692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e696:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e69a:	48 89 d6             	mov    %rdx,%rsi
  800420e69d:	48 89 c7             	mov    %rax,%rdi
  800420e6a0:	48 b8 df d6 20 04 80 	movabs $0x800420d6df,%rax
  800420e6a7:	00 00 00 
  800420e6aa:	ff d0                	callq  *%rax
  800420e6ac:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e6b1:	e9 d2 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e6b6:	48 b8 63 d7 20 04 80 	movabs $0x800420d763,%rax
  800420e6bd:	00 00 00 
  800420e6c0:	ff d0                	callq  *%rax
  800420e6c2:	48 98                	cltq   
  800420e6c4:	e9 bf 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e6c9:	48 b8 75 d7 20 04 80 	movabs $0x800420d775,%rax
  800420e6d0:	00 00 00 
  800420e6d3:	ff d0                	callq  *%rax
  800420e6d5:	48 98                	cltq   
  800420e6d7:	e9 ac 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e6dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e6e0:	89 c7                	mov    %eax,%edi
  800420e6e2:	48 b8 b1 d7 20 04 80 	movabs $0x800420d7b1,%rax
  800420e6e9:	00 00 00 
  800420e6ec:	ff d0                	callq  *%rax
  800420e6ee:	48 98                	cltq   
  800420e6f0:	e9 93 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e6f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e6f9:	89 c2                	mov    %eax,%edx
  800420e6fb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420e6ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e703:	48 89 ce             	mov    %rcx,%rsi
  800420e706:	89 c7                	mov    %eax,%edi
  800420e708:	48 b8 84 da 20 04 80 	movabs $0x800420da84,%rax
  800420e70f:	00 00 00 
  800420e712:	ff d0                	callq  *%rax
  800420e714:	48 98                	cltq   
  800420e716:	e9 6d 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e71b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e71f:	89 c7                	mov    %eax,%edi
  800420e721:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420e725:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e729:	89 c2                	mov    %eax,%edx
  800420e72b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420e72f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e733:	41 89 f8             	mov    %edi,%r8d
  800420e736:	89 c7                	mov    %eax,%edi
  800420e738:	48 b8 6d db 20 04 80 	movabs $0x800420db6d,%rax
  800420e73f:	00 00 00 
  800420e742:	ff d0                	callq  *%rax
  800420e744:	48 98                	cltq   
  800420e746:	e9 3d 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e74b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e74f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e753:	48 89 d6             	mov    %rdx,%rsi
  800420e756:	89 c7                	mov    %eax,%edi
  800420e758:	48 b8 f2 dc 20 04 80 	movabs $0x800420dcf2,%rax
  800420e75f:	00 00 00 
  800420e762:	ff d0                	callq  *%rax
  800420e764:	48 98                	cltq   
  800420e766:	e9 1d 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e76b:	48 b8 11 d8 20 04 80 	movabs $0x800420d811,%rax
  800420e772:	00 00 00 
  800420e775:	ff d0                	callq  *%rax
  800420e777:	48 98                	cltq   
  800420e779:	e9 0a 01 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e77e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e782:	89 c2                	mov    %eax,%edx
  800420e784:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e788:	89 d6                	mov    %edx,%esi
  800420e78a:	89 c7                	mov    %eax,%edi
  800420e78c:	48 b8 e6 d8 20 04 80 	movabs $0x800420d8e6,%rax
  800420e793:	00 00 00 
  800420e796:	ff d0                	callq  *%rax
  800420e798:	48 98                	cltq   
  800420e79a:	e9 e9 00 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e79f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e7a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e7a7:	48 89 d6             	mov    %rdx,%rsi
  800420e7aa:	89 c7                	mov    %eax,%edi
  800420e7ac:	48 b8 46 d9 20 04 80 	movabs $0x800420d946,%rax
  800420e7b3:	00 00 00 
  800420e7b6:	ff d0                	callq  *%rax
  800420e7b8:	48 98                	cltq   
  800420e7ba:	e9 c9 00 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e7bf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e7c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e7c7:	48 89 d6             	mov    %rdx,%rsi
  800420e7ca:	89 c7                	mov    %eax,%edi
  800420e7cc:	48 b8 34 da 20 04 80 	movabs $0x800420da34,%rax
  800420e7d3:	00 00 00 
  800420e7d6:	ff d0                	callq  *%rax
  800420e7d8:	48 98                	cltq   
  800420e7da:	e9 a9 00 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e7df:	48 b8 01 d8 20 04 80 	movabs $0x800420d801,%rax
  800420e7e6:	00 00 00 
  800420e7e9:	ff d0                	callq  *%rax
  800420e7eb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e7f0:	e9 93 00 00 00       	jmpq   800420e888 <syscall+0x23f>
  800420e7f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e7f9:	89 c1                	mov    %eax,%ecx
  800420e7fb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e7ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e803:	89 c6                	mov    %eax,%esi
  800420e805:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e809:	89 c7                	mov    %eax,%edi
  800420e80b:	48 b8 79 dd 20 04 80 	movabs $0x800420dd79,%rax
  800420e812:	00 00 00 
  800420e815:	ff d0                	callq  *%rax
  800420e817:	48 98                	cltq   
  800420e819:	eb 6d                	jmp    800420e888 <syscall+0x23f>
  800420e81b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e81f:	48 89 c7             	mov    %rax,%rdi
  800420e822:	48 b8 1c e4 20 04 80 	movabs $0x800420e41c,%rax
  800420e829:	00 00 00 
  800420e82c:	ff d0                	callq  *%rax
  800420e82e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e833:	eb 53                	jmp    800420e888 <syscall+0x23f>
  800420e835:	48 b8 45 e5 20 04 80 	movabs $0x800420e545,%rax
  800420e83c:	00 00 00 
  800420e83f:	ff d0                	callq  *%rax
  800420e841:	48 98                	cltq   
  800420e843:	eb 43                	jmp    800420e888 <syscall+0x23f>
  800420e845:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e849:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e84d:	48 89 d6             	mov    %rdx,%rsi
  800420e850:	48 89 c7             	mov    %rax,%rdi
  800420e853:	48 b8 57 e5 20 04 80 	movabs $0x800420e557,%rax
  800420e85a:	00 00 00 
  800420e85d:	ff d0                	callq  *%rax
  800420e85f:	48 98                	cltq   
  800420e861:	eb 25                	jmp    800420e888 <syscall+0x23f>
  800420e863:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e867:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e86b:	48 89 d6             	mov    %rdx,%rsi
  800420e86e:	48 89 c7             	mov    %rax,%rdi
  800420e871:	48 b8 d0 e5 20 04 80 	movabs $0x800420e5d0,%rax
  800420e878:	00 00 00 
  800420e87b:	ff d0                	callq  *%rax
  800420e87d:	48 98                	cltq   
  800420e87f:	eb 07                	jmp    800420e888 <syscall+0x23f>
  800420e881:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
  800420e888:	c9                   	leaveq 
  800420e889:	c3                   	retq   

000000800420e88a <list_func_die>:
  800420e88a:	55                   	push   %rbp
  800420e88b:	48 89 e5             	mov    %rsp,%rbp
  800420e88e:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420e895:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420e89c:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420e8a3:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420e8aa:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e8b1:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420e8b8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e8bc:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e8c3:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e8ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e8ce:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420e8d5:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e8dc:	48 89 d1             	mov    %rdx,%rcx
  800420e8df:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e8e4:	48 89 ce             	mov    %rcx,%rsi
  800420e8e7:	48 89 c7             	mov    %rax,%rdi
  800420e8ea:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  800420e8f1:	00 00 00 
  800420e8f4:	ff d0                	callq  *%rax
  800420e8f6:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420e8fd:	00 
  800420e8fe:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e905:	00 
  800420e906:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e90d:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e911:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420e915:	74 0a                	je     800420e921 <list_func_die+0x97>
  800420e917:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e91c:	e9 cd 06 00 00       	jmpq   800420efee <list_func_die+0x764>
  800420e921:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420e928:	ba 38 00 00 00       	mov    $0x38,%edx
  800420e92d:	be 00 00 00 00       	mov    $0x0,%esi
  800420e932:	48 89 c7             	mov    %rax,%rdi
  800420e935:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  800420e93c:	00 00 00 
  800420e93f:	ff d0                	callq  *%rax
  800420e941:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e948:	be 11 00 00 00       	mov    $0x11,%esi
  800420e94d:	48 89 c7             	mov    %rax,%rdi
  800420e950:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420e957:	00 00 00 
  800420e95a:	ff d0                	callq  *%rax
  800420e95c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420e960:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e967:	be 12 00 00 00       	mov    $0x12,%esi
  800420e96c:	48 89 c7             	mov    %rax,%rdi
  800420e96f:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420e976:	00 00 00 
  800420e979:	ff d0                	callq  *%rax
  800420e97b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420e97f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420e984:	0f 84 5f 06 00 00    	je     800420efe9 <list_func_die+0x75f>
  800420e98a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e98e:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e992:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e999:	0f 83 4a 06 00 00    	jae    800420efe9 <list_func_die+0x75f>
  800420e99f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420e9a4:	0f 84 3f 06 00 00    	je     800420efe9 <list_func_die+0x75f>
  800420e9aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e9ae:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e9b2:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e9b9:	0f 86 2a 06 00 00    	jbe    800420efe9 <list_func_die+0x75f>
  800420e9bf:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e9c6:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e9cd:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e9d4:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e9db:	48 89 10             	mov    %rdx,(%rax)
  800420e9de:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e9e5:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e9ec:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e9f3:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420e9f7:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e9fe:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420ea05:	48 89 c7             	mov    %rax,%rdi
  800420ea08:	48 b8 7f 00 21 04 80 	movabs $0x800421007f,%rax
  800420ea0f:	00 00 00 
  800420ea12:	ff d0                	callq  *%rax
  800420ea14:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420ea1b:	89 42 18             	mov    %eax,0x18(%rdx)
  800420ea1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ea22:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420ea26:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ea2d:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420ea31:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ea38:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420ea3f:	48 85 c0             	test   %rax,%rax
  800420ea42:	75 35                	jne    800420ea79 <list_func_die+0x1ef>
  800420ea44:	48 b9 e0 ab 21 04 80 	movabs $0x800421abe0,%rcx
  800420ea4b:	00 00 00 
  800420ea4e:	48 ba ec ab 21 04 80 	movabs $0x800421abec,%rdx
  800420ea55:	00 00 00 
  800420ea58:	be 95 00 00 00       	mov    $0x95,%esi
  800420ea5d:	48 bf 01 ac 21 04 80 	movabs $0x800421ac01,%rdi
  800420ea64:	00 00 00 
  800420ea67:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea6c:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420ea73:	00 00 00 
  800420ea76:	41 ff d0             	callq  *%r8
  800420ea79:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ea80:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420ea87:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420ea8e:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420ea95:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420ea9a:	48 89 c7             	mov    %rax,%rdi
  800420ea9d:	48 b8 e0 58 21 04 80 	movabs $0x80042158e0,%rax
  800420eaa4:	00 00 00 
  800420eaa7:	ff d0                	callq  *%rax
  800420eaa9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420eab0:	89 c2                	mov    %eax,%edx
  800420eab2:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eab9:	89 50 08             	mov    %edx,0x8(%rax)
  800420eabc:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eac3:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420eaca:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ead1:	00 00 00 
  800420ead4:	48 8b 00             	mov    (%rax),%rax
  800420ead7:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420eade:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420eae5:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420eae9:	48 89 c7             	mov    %rax,%rdi
  800420eaec:	48 b8 90 25 21 04 80 	movabs $0x8004212590,%rax
  800420eaf3:	00 00 00 
  800420eaf6:	ff d0                	callq  *%rax
  800420eaf8:	83 f8 04             	cmp    $0x4,%eax
  800420eafb:	0f 84 e1 04 00 00    	je     800420efe2 <list_func_die+0x758>
  800420eb01:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420eb08:	48 83 f8 05          	cmp    $0x5,%rax
  800420eb0c:	74 05                	je     800420eb13 <list_func_die+0x289>
  800420eb0e:	e9 cf 04 00 00       	jmpq   800420efe2 <list_func_die+0x758>
  800420eb13:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420eb1a:	be 49 00 00 00       	mov    $0x49,%esi
  800420eb1f:	48 89 c7             	mov    %rax,%rdi
  800420eb22:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420eb29:	00 00 00 
  800420eb2c:	ff d0                	callq  *%rax
  800420eb2e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420eb32:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420eb37:	0f 84 d7 00 00 00    	je     800420ec14 <list_func_die+0x38a>
  800420eb3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420eb41:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420eb45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb49:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420eb4d:	48 01 d0             	add    %rdx,%rax
  800420eb50:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420eb54:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420eb5b:	00 00 00 
  800420eb5e:	48 8b 08             	mov    (%rax),%rcx
  800420eb61:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420eb68:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420eb6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420eb70:	48 8b 38             	mov    (%rax),%rdi
  800420eb73:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420eb77:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420eb7b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420eb80:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420eb84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420eb89:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420eb8d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420eb92:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420eb96:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420eb9b:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420eb9f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420eba4:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420eba8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420ebad:	48 89 cf             	mov    %rcx,%rdi
  800420ebb0:	48 b8 b6 21 21 04 80 	movabs $0x80042121b6,%rax
  800420ebb7:	00 00 00 
  800420ebba:	ff d0                	callq  *%rax
  800420ebbc:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ebc3:	be 0b 00 00 00       	mov    $0xb,%esi
  800420ebc8:	48 89 c7             	mov    %rax,%rdi
  800420ebcb:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420ebd2:	00 00 00 
  800420ebd5:	ff d0                	callq  *%rax
  800420ebd7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ebdb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ebe0:	74 0e                	je     800420ebf0 <list_func_die+0x366>
  800420ebe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ebe6:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ebea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ebee:	eb 24                	jmp    800420ec14 <list_func_die+0x38a>
  800420ebf0:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ebf7:	be 49 00 00 00       	mov    $0x49,%esi
  800420ebfc:	48 89 c7             	mov    %rax,%rdi
  800420ebff:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420ec06:	00 00 00 
  800420ec09:	ff d0                	callq  *%rax
  800420ec0b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ec0f:	e9 1e ff ff ff       	jmpq   800420eb32 <list_func_die+0x2a8>
  800420ec14:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ec1b:	00 
  800420ec1c:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ec23:	be 02 00 00 00       	mov    $0x2,%esi
  800420ec28:	48 89 c7             	mov    %rax,%rdi
  800420ec2b:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420ec32:	00 00 00 
  800420ec35:	ff d0                	callq  *%rax
  800420ec37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ec3b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ec40:	0f 84 a2 00 00 00    	je     800420ece8 <list_func_die+0x45e>
  800420ec46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ec4a:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420ec4e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420ec52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ec56:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420ec5a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420ec5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ec62:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420ec66:	48 83 f8 03          	cmp    $0x3,%rax
  800420ec6a:	72 7c                	jb     800420ece8 <list_func_die+0x45e>
  800420ec6c:	48 83 f8 04          	cmp    $0x4,%rax
  800420ec70:	76 06                	jbe    800420ec78 <list_func_die+0x3ee>
  800420ec72:	48 83 f8 0a          	cmp    $0xa,%rax
  800420ec76:	75 70                	jne    800420ece8 <list_func_die+0x45e>
  800420ec78:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420ec7f:	00 
  800420ec80:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420ec84:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420ec88:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420ec8c:	0f b6 00             	movzbl (%rax),%eax
  800420ec8f:	88 45 af             	mov    %al,-0x51(%rbp)
  800420ec92:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420ec97:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420ec9b:	75 4a                	jne    800420ece7 <list_func_die+0x45d>
  800420ec9d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420eca1:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420eca8:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420ecaf:	48 89 c7             	mov    %rax,%rdi
  800420ecb2:	48 b8 15 0f 21 04 80 	movabs $0x8004210f15,%rax
  800420ecb9:	00 00 00 
  800420ecbc:	ff d0                	callq  *%rax
  800420ecbe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420ecc2:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420ecc9:	48 89 c2             	mov    %rax,%rdx
  800420eccc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420ecd0:	48 29 c2             	sub    %rax,%rdx
  800420ecd3:	48 89 d0             	mov    %rdx,%rax
  800420ecd6:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420ecda:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420ece1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420ece5:	eb 00                	jmp    800420ece7 <list_func_die+0x45d>
  800420ece7:	90                   	nop
  800420ece8:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ecef:	8b 48 28             	mov    0x28(%rax),%ecx
  800420ecf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ecf6:	89 c2                	mov    %eax,%edx
  800420ecf8:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ecff:	48 63 c9             	movslq %ecx,%rcx
  800420ed02:	48 83 c1 08          	add    $0x8,%rcx
  800420ed06:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420ed0a:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed11:	8b 50 28             	mov    0x28(%rax),%edx
  800420ed14:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed1b:	48 63 d2             	movslq %edx,%rdx
  800420ed1e:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420ed22:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ed26:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420ed2b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed32:	8b 40 28             	mov    0x28(%rax),%eax
  800420ed35:	8d 50 01             	lea    0x1(%rax),%edx
  800420ed38:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed3f:	89 50 28             	mov    %edx,0x28(%rax)
  800420ed42:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ed49:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420ed50:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420ed55:	48 89 ce             	mov    %rcx,%rsi
  800420ed58:	48 89 c7             	mov    %rax,%rdi
  800420ed5b:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  800420ed62:	00 00 00 
  800420ed65:	ff d0                	callq  *%rax
  800420ed67:	e9 40 02 00 00       	jmpq   800420efac <list_func_die+0x722>
  800420ed6c:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420ed73:	48 83 f8 05          	cmp    $0x5,%rax
  800420ed77:	74 05                	je     800420ed7e <list_func_die+0x4f4>
  800420ed79:	e9 64 02 00 00       	jmpq   800420efe2 <list_func_die+0x758>
  800420ed7e:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ed85:	be 49 00 00 00       	mov    $0x49,%esi
  800420ed8a:	48 89 c7             	mov    %rax,%rdi
  800420ed8d:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420ed94:	00 00 00 
  800420ed97:	ff d0                	callq  *%rax
  800420ed99:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ed9d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420eda2:	0f 84 b1 00 00 00    	je     800420ee59 <list_func_die+0x5cf>
  800420eda8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420edac:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420edb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420edb4:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420edb8:	48 01 d0             	add    %rdx,%rax
  800420edbb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420edbf:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420edc6:	00 00 00 
  800420edc9:	48 8b 08             	mov    (%rax),%rcx
  800420edcc:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420edd3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420edd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420eddb:	48 8b 38             	mov    (%rax),%rdi
  800420edde:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420ede2:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420ede6:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420edeb:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420edef:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420edf4:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420edf8:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420edfd:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420ee01:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420ee06:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420ee0a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420ee0f:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420ee13:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420ee18:	48 89 cf             	mov    %rcx,%rdi
  800420ee1b:	48 b8 b6 21 21 04 80 	movabs $0x80042121b6,%rax
  800420ee22:	00 00 00 
  800420ee25:	ff d0                	callq  *%rax
  800420ee27:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ee2e:	be 0b 00 00 00       	mov    $0xb,%esi
  800420ee33:	48 89 c7             	mov    %rax,%rdi
  800420ee36:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420ee3d:	00 00 00 
  800420ee40:	ff d0                	callq  *%rax
  800420ee42:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ee46:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ee4b:	74 0c                	je     800420ee59 <list_func_die+0x5cf>
  800420ee4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ee51:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ee55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ee59:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ee60:	00 
  800420ee61:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ee68:	be 02 00 00 00       	mov    $0x2,%esi
  800420ee6d:	48 89 c7             	mov    %rax,%rdi
  800420ee70:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  800420ee77:	00 00 00 
  800420ee7a:	ff d0                	callq  *%rax
  800420ee7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ee80:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ee85:	0f 84 a2 00 00 00    	je     800420ef2d <list_func_die+0x6a3>
  800420ee8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ee8f:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420ee93:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420ee97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ee9b:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420ee9f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420eea3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eea7:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420eeab:	48 83 f8 03          	cmp    $0x3,%rax
  800420eeaf:	72 7c                	jb     800420ef2d <list_func_die+0x6a3>
  800420eeb1:	48 83 f8 04          	cmp    $0x4,%rax
  800420eeb5:	76 06                	jbe    800420eebd <list_func_die+0x633>
  800420eeb7:	48 83 f8 0a          	cmp    $0xa,%rax
  800420eebb:	75 70                	jne    800420ef2d <list_func_die+0x6a3>
  800420eebd:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420eec4:	00 
  800420eec5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eec9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420eecd:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420eed1:	0f b6 00             	movzbl (%rax),%eax
  800420eed4:	88 45 97             	mov    %al,-0x69(%rbp)
  800420eed7:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420eedc:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420eee0:	75 4a                	jne    800420ef2c <list_func_die+0x6a2>
  800420eee2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420eee6:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420eeed:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420eef4:	48 89 c7             	mov    %rax,%rdi
  800420eef7:	48 b8 15 0f 21 04 80 	movabs $0x8004210f15,%rax
  800420eefe:	00 00 00 
  800420ef01:	ff d0                	callq  *%rax
  800420ef03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420ef07:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420ef0e:	48 89 c2             	mov    %rax,%rdx
  800420ef11:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ef15:	48 29 c2             	sub    %rax,%rdx
  800420ef18:	48 89 d0             	mov    %rdx,%rax
  800420ef1b:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420ef1f:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420ef26:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420ef2a:	eb 00                	jmp    800420ef2c <list_func_die+0x6a2>
  800420ef2c:	90                   	nop
  800420ef2d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ef34:	8b 48 28             	mov    0x28(%rax),%ecx
  800420ef37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ef3b:	89 c2                	mov    %eax,%edx
  800420ef3d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ef44:	48 63 c9             	movslq %ecx,%rcx
  800420ef47:	48 83 c1 08          	add    $0x8,%rcx
  800420ef4b:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420ef4f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ef56:	8b 50 28             	mov    0x28(%rax),%edx
  800420ef59:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ef60:	48 63 d2             	movslq %edx,%rdx
  800420ef63:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420ef67:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ef6b:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420ef70:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ef77:	8b 40 28             	mov    0x28(%rax),%eax
  800420ef7a:	8d 50 01             	lea    0x1(%rax),%edx
  800420ef7d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ef84:	89 50 28             	mov    %edx,0x28(%rax)
  800420ef87:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ef8e:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420ef95:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420ef9a:	48 89 ce             	mov    %rcx,%rsi
  800420ef9d:	48 89 c7             	mov    %rax,%rdi
  800420efa0:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  800420efa7:	00 00 00 
  800420efaa:	ff d0                	callq  *%rax
  800420efac:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420efb3:	00 00 00 
  800420efb6:	48 8b 00             	mov    (%rax),%rax
  800420efb9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420efbd:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420efc4:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420efcb:	48 89 c7             	mov    %rax,%rdi
  800420efce:	48 b8 4c 23 21 04 80 	movabs $0x800421234c,%rax
  800420efd5:	00 00 00 
  800420efd8:	ff d0                	callq  *%rax
  800420efda:	85 c0                	test   %eax,%eax
  800420efdc:	0f 84 8a fd ff ff    	je     800420ed6c <list_func_die+0x4e2>
  800420efe2:	b8 01 00 00 00       	mov    $0x1,%eax
  800420efe7:	eb 05                	jmp    800420efee <list_func_die+0x764>
  800420efe9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420efee:	c9                   	leaveq 
  800420efef:	c3                   	retq   

000000800420eff0 <debuginfo_rip>:
  800420eff0:	55                   	push   %rbp
  800420eff1:	48 89 e5             	mov    %rsp,%rbp
  800420eff4:	53                   	push   %rbx
  800420eff5:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420effc:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420f003:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420f00a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420f011:	00 
  800420f012:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420f019:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f01d:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f024:	48 bb 12 ac 21 04 80 	movabs $0x800421ac12,%rbx
  800420f02b:	00 00 00 
  800420f02e:	48 89 18             	mov    %rbx,(%rax)
  800420f031:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f038:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420f03f:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f046:	48 bb 12 ac 21 04 80 	movabs $0x800421ac12,%rbx
  800420f04d:	00 00 00 
  800420f050:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420f054:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f05b:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420f062:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f069:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f070:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f074:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f07b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f082:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420f089:	00 00 00 
  800420f08c:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420f093:	76 13                	jbe    800420f0a8 <debuginfo_rip+0xb8>
  800420f095:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420f09c:	00 00 00 
  800420f09f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f0a3:	e9 04 01 00 00       	jmpq   800420f1ac <debuginfo_rip+0x1bc>
  800420f0a8:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420f0af:	00 00 00 
  800420f0b2:	ff d0                	callq  *%rax
  800420f0b4:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420f0bb:	00 00 00 
  800420f0be:	48 98                	cltq   
  800420f0c0:	48 c1 e0 03          	shl    $0x3,%rax
  800420f0c4:	48 89 c1             	mov    %rax,%rcx
  800420f0c7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f0cb:	48 01 c8             	add    %rcx,%rax
  800420f0ce:	48 01 d0             	add    %rdx,%rax
  800420f0d1:	48 83 c0 08          	add    $0x8,%rax
  800420f0d5:	48 8b 10             	mov    (%rax),%rdx
  800420f0d8:	48 b8 98 f2 49 04 80 	movabs $0x800449f298,%rax
  800420f0df:	00 00 00 
  800420f0e2:	48 8b 00             	mov    (%rax),%rax
  800420f0e5:	48 39 c2             	cmp    %rax,%rdx
  800420f0e8:	0f 84 83 00 00 00    	je     800420f171 <debuginfo_rip+0x181>
  800420f0ee:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420f0f5:	00 00 00 
  800420f0f8:	ff d0                	callq  *%rax
  800420f0fa:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420f101:	00 00 00 
  800420f104:	48 98                	cltq   
  800420f106:	48 c1 e0 03          	shl    $0x3,%rax
  800420f10a:	48 89 c1             	mov    %rax,%rcx
  800420f10d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f111:	48 01 c8             	add    %rcx,%rax
  800420f114:	48 01 d0             	add    %rdx,%rax
  800420f117:	48 83 c0 08          	add    $0x8,%rax
  800420f11b:	48 8b 00             	mov    (%rax),%rax
  800420f11e:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f125:	48 89 c7             	mov    %rax,%rdi
  800420f128:	48 b8 db 5a 21 04 80 	movabs $0x8004215adb,%rax
  800420f12f:	00 00 00 
  800420f132:	ff d0                	callq  *%rax
  800420f134:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420f13b:	00 00 00 
  800420f13e:	ff d0                	callq  *%rax
  800420f140:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420f147:	00 00 00 
  800420f14a:	48 98                	cltq   
  800420f14c:	48 c1 e0 03          	shl    $0x3,%rax
  800420f150:	48 89 c1             	mov    %rax,%rcx
  800420f153:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f157:	48 01 c8             	add    %rcx,%rax
  800420f15a:	48 01 d0             	add    %rdx,%rax
  800420f15d:	48 83 c0 08          	add    $0x8,%rax
  800420f161:	48 8b 10             	mov    (%rax),%rdx
  800420f164:	48 b8 98 f2 49 04 80 	movabs $0x800449f298,%rax
  800420f16b:	00 00 00 
  800420f16e:	48 89 10             	mov    %rdx,(%rax)
  800420f171:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800420f178:	00 00 00 
  800420f17b:	ff d0                	callq  *%rax
  800420f17d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420f184:	00 00 00 
  800420f187:	48 98                	cltq   
  800420f189:	48 c1 e0 03          	shl    $0x3,%rax
  800420f18d:	48 89 c1             	mov    %rax,%rcx
  800420f190:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f194:	48 01 c8             	add    %rcx,%rax
  800420f197:	48 01 d0             	add    %rdx,%rax
  800420f19a:	48 83 c0 08          	add    $0x8,%rax
  800420f19e:	48 8b 00             	mov    (%rax),%rax
  800420f1a1:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f1a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f1ac:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f1b3:	00 00 00 
  800420f1b6:	48 8b 00             	mov    (%rax),%rax
  800420f1b9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1bd:	48 89 d6             	mov    %rdx,%rsi
  800420f1c0:	48 89 c7             	mov    %rax,%rdi
  800420f1c3:	48 b8 c4 11 21 04 80 	movabs $0x80042111c4,%rax
  800420f1ca:	00 00 00 
  800420f1cd:	ff d0                	callq  *%rax
  800420f1cf:	48 bf 1c ac 21 04 80 	movabs $0x800421ac1c,%rdi
  800420f1d6:	00 00 00 
  800420f1d9:	48 b8 5b 5a 21 04 80 	movabs $0x8004215a5b,%rax
  800420f1e0:	00 00 00 
  800420f1e3:	ff d0                	callq  *%rax
  800420f1e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f1e9:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f1f0:	00 00 00 
  800420f1f3:	48 8b 00             	mov    (%rax),%rax
  800420f1f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f1fa:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420f1fe:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420f202:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f209:	00 00 00 
  800420f20c:	48 8b 00             	mov    (%rax),%rax
  800420f20f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f213:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420f217:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f21b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f222:	00 00 00 
  800420f225:	48 8b 00             	mov    (%rax),%rax
  800420f228:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420f22c:	48 85 c0             	test   %rax,%rax
  800420f22f:	75 35                	jne    800420f266 <debuginfo_rip+0x276>
  800420f231:	48 b9 28 ac 21 04 80 	movabs $0x800421ac28,%rcx
  800420f238:	00 00 00 
  800420f23b:	48 ba ec ab 21 04 80 	movabs $0x800421abec,%rdx
  800420f242:	00 00 00 
  800420f245:	be 40 01 00 00       	mov    $0x140,%esi
  800420f24a:	48 bf 01 ac 21 04 80 	movabs $0x800421ac01,%rdi
  800420f251:	00 00 00 
  800420f254:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f259:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800420f260:	00 00 00 
  800420f263:	41 ff d0             	callq  *%r8
  800420f266:	e9 6f 01 00 00       	jmpq   800420f3da <debuginfo_rip+0x3ea>
  800420f26b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f272:	00 00 00 
  800420f275:	48 8b 00             	mov    (%rax),%rax
  800420f278:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420f27c:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420f283:	be 00 00 00 00       	mov    $0x0,%esi
  800420f288:	48 89 c7             	mov    %rax,%rdi
  800420f28b:	48 b8 4c 23 21 04 80 	movabs $0x800421234c,%rax
  800420f292:	00 00 00 
  800420f295:	ff d0                	callq  *%rax
  800420f297:	83 f8 04             	cmp    $0x4,%eax
  800420f29a:	75 05                	jne    800420f2a1 <debuginfo_rip+0x2b1>
  800420f29c:	e9 39 01 00 00       	jmpq   800420f3da <debuginfo_rip+0x3ea>
  800420f2a1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f2a5:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420f2ac:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420f2b3:	00 00 00 00 
  800420f2b7:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f2be:	00 00 00 
  800420f2c1:	48 8b 00             	mov    (%rax),%rax
  800420f2c4:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420f2cb:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420f2d2:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420f2d6:	48 89 c7             	mov    %rax,%rdi
  800420f2d9:	48 b8 90 25 21 04 80 	movabs $0x8004212590,%rax
  800420f2e0:	00 00 00 
  800420f2e3:	ff d0                	callq  *%rax
  800420f2e5:	83 f8 04             	cmp    $0x4,%eax
  800420f2e8:	75 05                	jne    800420f2ef <debuginfo_rip+0x2ff>
  800420f2ea:	e9 eb 00 00 00       	jmpq   800420f3da <debuginfo_rip+0x3ea>
  800420f2ef:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f2f3:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f2fa:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f301:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f308:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f30f:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420f316:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f31d:	48 89 ce             	mov    %rcx,%rsi
  800420f320:	48 89 c7             	mov    %rax,%rdi
  800420f323:	48 b8 8a e8 20 04 80 	movabs $0x800420e88a,%rax
  800420f32a:	00 00 00 
  800420f32d:	ff d0                	callq  *%rax
  800420f32f:	85 c0                	test   %eax,%eax
  800420f331:	74 30                	je     800420f363 <debuginfo_rip+0x373>
  800420f333:	90                   	nop
  800420f334:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f33b:	00 00 00 
  800420f33e:	48 8b 00             	mov    (%rax),%rax
  800420f341:	be 00 00 00 00       	mov    $0x0,%esi
  800420f346:	48 89 c7             	mov    %rax,%rdi
  800420f349:	48 b8 68 4c 21 04 80 	movabs $0x8004214c68,%rax
  800420f350:	00 00 00 
  800420f353:	ff d0                	callq  *%rax
  800420f355:	83 f8 01             	cmp    $0x1,%eax
  800420f358:	0f 85 bb 00 00 00    	jne    800420f419 <debuginfo_rip+0x429>
  800420f35e:	e9 ac 00 00 00       	jmpq   800420f40f <debuginfo_rip+0x41f>
  800420f363:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f36a:	00 00 00 
  800420f36d:	48 8b 00             	mov    (%rax),%rax
  800420f370:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420f374:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420f37b:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420f382:	48 89 c7             	mov    %rax,%rdi
  800420f385:	48 b8 4c 23 21 04 80 	movabs $0x800421234c,%rax
  800420f38c:	00 00 00 
  800420f38f:	ff d0                	callq  *%rax
  800420f391:	85 c0                	test   %eax,%eax
  800420f393:	79 02                	jns    800420f397 <debuginfo_rip+0x3a7>
  800420f395:	eb 43                	jmp    800420f3da <debuginfo_rip+0x3ea>
  800420f397:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420f39e:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420f3a5:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f3aa:	48 89 ce             	mov    %rcx,%rsi
  800420f3ad:	48 89 c7             	mov    %rax,%rdi
  800420f3b0:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  800420f3b7:	00 00 00 
  800420f3ba:	ff d0                	callq  *%rax
  800420f3bc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f3c0:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f3c7:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f3ce:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f3d5:	e9 2e ff ff ff       	jmpq   800420f308 <debuginfo_rip+0x318>
  800420f3da:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f3e1:	00 00 00 
  800420f3e4:	48 8b 00             	mov    (%rax),%rax
  800420f3e7:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420f3eb:	48 89 d6             	mov    %rdx,%rsi
  800420f3ee:	48 89 c7             	mov    %rax,%rdi
  800420f3f1:	48 b8 a6 12 21 04 80 	movabs $0x80042112a6,%rax
  800420f3f8:	00 00 00 
  800420f3fb:	ff d0                	callq  *%rax
  800420f3fd:	85 c0                	test   %eax,%eax
  800420f3ff:	0f 84 66 fe ff ff    	je     800420f26b <debuginfo_rip+0x27b>
  800420f405:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f40a:	e9 a0 00 00 00       	jmpq   800420f4af <debuginfo_rip+0x4bf>
  800420f40f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f414:	e9 96 00 00 00       	jmpq   800420f4af <debuginfo_rip+0x4bf>
  800420f419:	48 b8 80 c6 22 04 80 	movabs $0x800422c680,%rax
  800420f420:	00 00 00 
  800420f423:	48 8b 08             	mov    (%rax),%rcx
  800420f426:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f42d:	00 00 00 
  800420f430:	48 8b 10             	mov    (%rax),%rdx
  800420f433:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f43a:	00 00 00 
  800420f43d:	48 8b 00             	mov    (%rax),%rax
  800420f440:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420f447:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f44d:	48 89 c7             	mov    %rax,%rdi
  800420f450:	48 b8 d1 27 21 04 80 	movabs $0x80042127d1,%rax
  800420f457:	00 00 00 
  800420f45a:	ff d0                	callq  *%rax
  800420f45c:	85 c0                	test   %eax,%eax
  800420f45e:	75 4a                	jne    800420f4aa <debuginfo_rip+0x4ba>
  800420f460:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f467:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420f46e:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f475:	00 00 00 
  800420f478:	48 8b 30             	mov    (%rax),%rsi
  800420f47b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f482:	00 00 00 
  800420f485:	48 8b 00             	mov    (%rax),%rax
  800420f488:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f48f:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420f495:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f49b:	48 89 c7             	mov    %rax,%rdi
  800420f49e:	48 b8 dd 3a 21 04 80 	movabs $0x8004213add,%rax
  800420f4a5:	00 00 00 
  800420f4a8:	ff d0                	callq  *%rax
  800420f4aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f4af:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420f4b6:	5b                   	pop    %rbx
  800420f4b7:	5d                   	pop    %rbp
  800420f4b8:	c3                   	retq   

000000800420f4b9 <printnum>:
  800420f4b9:	55                   	push   %rbp
  800420f4ba:	48 89 e5             	mov    %rsp,%rbp
  800420f4bd:	53                   	push   %rbx
  800420f4be:	48 83 ec 38          	sub    $0x38,%rsp
  800420f4c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f4c6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420f4ca:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420f4ce:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420f4d1:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420f4d5:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420f4d9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420f4dc:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420f4e0:	77 3b                	ja     800420f51d <printnum+0x64>
  800420f4e2:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420f4e5:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420f4e9:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420f4ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f4f0:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f4f5:	48 f7 f3             	div    %rbx
  800420f4f8:	48 89 c2             	mov    %rax,%rdx
  800420f4fb:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420f4fe:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f501:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f505:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f509:	41 89 f9             	mov    %edi,%r9d
  800420f50c:	48 89 c7             	mov    %rax,%rdi
  800420f50f:	48 b8 b9 f4 20 04 80 	movabs $0x800420f4b9,%rax
  800420f516:	00 00 00 
  800420f519:	ff d0                	callq  *%rax
  800420f51b:	eb 1e                	jmp    800420f53b <printnum+0x82>
  800420f51d:	eb 12                	jmp    800420f531 <printnum+0x78>
  800420f51f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f523:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420f526:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f52a:	48 89 ce             	mov    %rcx,%rsi
  800420f52d:	89 d7                	mov    %edx,%edi
  800420f52f:	ff d0                	callq  *%rax
  800420f531:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420f535:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420f539:	7f e4                	jg     800420f51f <printnum+0x66>
  800420f53b:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420f53e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f542:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f547:	48 f7 f1             	div    %rcx
  800420f54a:	48 89 d0             	mov    %rdx,%rax
  800420f54d:	48 ba 30 ae 21 04 80 	movabs $0x800421ae30,%rdx
  800420f554:	00 00 00 
  800420f557:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420f55b:	0f be d0             	movsbl %al,%edx
  800420f55e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f562:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f566:	48 89 ce             	mov    %rcx,%rsi
  800420f569:	89 d7                	mov    %edx,%edi
  800420f56b:	ff d0                	callq  *%rax
  800420f56d:	48 83 c4 38          	add    $0x38,%rsp
  800420f571:	5b                   	pop    %rbx
  800420f572:	5d                   	pop    %rbp
  800420f573:	c3                   	retq   

000000800420f574 <getuint>:
  800420f574:	55                   	push   %rbp
  800420f575:	48 89 e5             	mov    %rsp,%rbp
  800420f578:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f57c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f580:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f583:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f587:	7e 52                	jle    800420f5db <getuint+0x67>
  800420f589:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f58d:	8b 00                	mov    (%rax),%eax
  800420f58f:	83 f8 30             	cmp    $0x30,%eax
  800420f592:	73 24                	jae    800420f5b8 <getuint+0x44>
  800420f594:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f598:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f59c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5a0:	8b 00                	mov    (%rax),%eax
  800420f5a2:	89 c0                	mov    %eax,%eax
  800420f5a4:	48 01 d0             	add    %rdx,%rax
  800420f5a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f5ab:	8b 12                	mov    (%rdx),%edx
  800420f5ad:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f5b0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f5b4:	89 0a                	mov    %ecx,(%rdx)
  800420f5b6:	eb 17                	jmp    800420f5cf <getuint+0x5b>
  800420f5b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5bc:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f5c0:	48 89 d0             	mov    %rdx,%rax
  800420f5c3:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f5c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f5cb:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f5cf:	48 8b 00             	mov    (%rax),%rax
  800420f5d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f5d6:	e9 a3 00 00 00       	jmpq   800420f67e <getuint+0x10a>
  800420f5db:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f5df:	74 4f                	je     800420f630 <getuint+0xbc>
  800420f5e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5e5:	8b 00                	mov    (%rax),%eax
  800420f5e7:	83 f8 30             	cmp    $0x30,%eax
  800420f5ea:	73 24                	jae    800420f610 <getuint+0x9c>
  800420f5ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5f0:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f5f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5f8:	8b 00                	mov    (%rax),%eax
  800420f5fa:	89 c0                	mov    %eax,%eax
  800420f5fc:	48 01 d0             	add    %rdx,%rax
  800420f5ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f603:	8b 12                	mov    (%rdx),%edx
  800420f605:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f608:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f60c:	89 0a                	mov    %ecx,(%rdx)
  800420f60e:	eb 17                	jmp    800420f627 <getuint+0xb3>
  800420f610:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f614:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f618:	48 89 d0             	mov    %rdx,%rax
  800420f61b:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f61f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f623:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f627:	48 8b 00             	mov    (%rax),%rax
  800420f62a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f62e:	eb 4e                	jmp    800420f67e <getuint+0x10a>
  800420f630:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f634:	8b 00                	mov    (%rax),%eax
  800420f636:	83 f8 30             	cmp    $0x30,%eax
  800420f639:	73 24                	jae    800420f65f <getuint+0xeb>
  800420f63b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f63f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f643:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f647:	8b 00                	mov    (%rax),%eax
  800420f649:	89 c0                	mov    %eax,%eax
  800420f64b:	48 01 d0             	add    %rdx,%rax
  800420f64e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f652:	8b 12                	mov    (%rdx),%edx
  800420f654:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f657:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f65b:	89 0a                	mov    %ecx,(%rdx)
  800420f65d:	eb 17                	jmp    800420f676 <getuint+0x102>
  800420f65f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f663:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f667:	48 89 d0             	mov    %rdx,%rax
  800420f66a:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f66e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f672:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f676:	8b 00                	mov    (%rax),%eax
  800420f678:	89 c0                	mov    %eax,%eax
  800420f67a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f67e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f682:	c9                   	leaveq 
  800420f683:	c3                   	retq   

000000800420f684 <getint>:
  800420f684:	55                   	push   %rbp
  800420f685:	48 89 e5             	mov    %rsp,%rbp
  800420f688:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420f68c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f690:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f693:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f697:	7e 52                	jle    800420f6eb <getint+0x67>
  800420f699:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f69d:	8b 00                	mov    (%rax),%eax
  800420f69f:	83 f8 30             	cmp    $0x30,%eax
  800420f6a2:	73 24                	jae    800420f6c8 <getint+0x44>
  800420f6a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6a8:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f6ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6b0:	8b 00                	mov    (%rax),%eax
  800420f6b2:	89 c0                	mov    %eax,%eax
  800420f6b4:	48 01 d0             	add    %rdx,%rax
  800420f6b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f6bb:	8b 12                	mov    (%rdx),%edx
  800420f6bd:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f6c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f6c4:	89 0a                	mov    %ecx,(%rdx)
  800420f6c6:	eb 17                	jmp    800420f6df <getint+0x5b>
  800420f6c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6cc:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f6d0:	48 89 d0             	mov    %rdx,%rax
  800420f6d3:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f6d7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f6db:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f6df:	48 8b 00             	mov    (%rax),%rax
  800420f6e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f6e6:	e9 a3 00 00 00       	jmpq   800420f78e <getint+0x10a>
  800420f6eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f6ef:	74 4f                	je     800420f740 <getint+0xbc>
  800420f6f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6f5:	8b 00                	mov    (%rax),%eax
  800420f6f7:	83 f8 30             	cmp    $0x30,%eax
  800420f6fa:	73 24                	jae    800420f720 <getint+0x9c>
  800420f6fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f700:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f704:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f708:	8b 00                	mov    (%rax),%eax
  800420f70a:	89 c0                	mov    %eax,%eax
  800420f70c:	48 01 d0             	add    %rdx,%rax
  800420f70f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f713:	8b 12                	mov    (%rdx),%edx
  800420f715:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f718:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f71c:	89 0a                	mov    %ecx,(%rdx)
  800420f71e:	eb 17                	jmp    800420f737 <getint+0xb3>
  800420f720:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f724:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f728:	48 89 d0             	mov    %rdx,%rax
  800420f72b:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f72f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f733:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f737:	48 8b 00             	mov    (%rax),%rax
  800420f73a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f73e:	eb 4e                	jmp    800420f78e <getint+0x10a>
  800420f740:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f744:	8b 00                	mov    (%rax),%eax
  800420f746:	83 f8 30             	cmp    $0x30,%eax
  800420f749:	73 24                	jae    800420f76f <getint+0xeb>
  800420f74b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f74f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f753:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f757:	8b 00                	mov    (%rax),%eax
  800420f759:	89 c0                	mov    %eax,%eax
  800420f75b:	48 01 d0             	add    %rdx,%rax
  800420f75e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f762:	8b 12                	mov    (%rdx),%edx
  800420f764:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f767:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f76b:	89 0a                	mov    %ecx,(%rdx)
  800420f76d:	eb 17                	jmp    800420f786 <getint+0x102>
  800420f76f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f773:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420f777:	48 89 d0             	mov    %rdx,%rax
  800420f77a:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420f77e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f782:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f786:	8b 00                	mov    (%rax),%eax
  800420f788:	48 98                	cltq   
  800420f78a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f78e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f792:	c9                   	leaveq 
  800420f793:	c3                   	retq   

000000800420f794 <vprintfmt>:
  800420f794:	55                   	push   %rbp
  800420f795:	48 89 e5             	mov    %rsp,%rbp
  800420f798:	41 54                	push   %r12
  800420f79a:	53                   	push   %rbx
  800420f79b:	48 83 ec 60          	sub    $0x60,%rsp
  800420f79f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420f7a3:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420f7a7:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f7ab:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420f7af:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f7b3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420f7b7:	48 8b 0a             	mov    (%rdx),%rcx
  800420f7ba:	48 89 08             	mov    %rcx,(%rax)
  800420f7bd:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420f7c1:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420f7c5:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420f7c9:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f7cd:	eb 17                	jmp    800420f7e6 <vprintfmt+0x52>
  800420f7cf:	85 db                	test   %ebx,%ebx
  800420f7d1:	0f 84 cc 04 00 00    	je     800420fca3 <vprintfmt+0x50f>
  800420f7d7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f7db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f7df:	48 89 d6             	mov    %rdx,%rsi
  800420f7e2:	89 df                	mov    %ebx,%edi
  800420f7e4:	ff d0                	callq  *%rax
  800420f7e6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f7ea:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f7ee:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f7f2:	0f b6 00             	movzbl (%rax),%eax
  800420f7f5:	0f b6 d8             	movzbl %al,%ebx
  800420f7f8:	83 fb 25             	cmp    $0x25,%ebx
  800420f7fb:	75 d2                	jne    800420f7cf <vprintfmt+0x3b>
  800420f7fd:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420f801:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420f808:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f80f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420f816:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800420f81d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f821:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f825:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f829:	0f b6 00             	movzbl (%rax),%eax
  800420f82c:	0f b6 d8             	movzbl %al,%ebx
  800420f82f:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420f832:	83 f8 55             	cmp    $0x55,%eax
  800420f835:	0f 87 34 04 00 00    	ja     800420fc6f <vprintfmt+0x4db>
  800420f83b:	89 c0                	mov    %eax,%eax
  800420f83d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f844:	00 
  800420f845:	48 b8 58 ae 21 04 80 	movabs $0x800421ae58,%rax
  800420f84c:	00 00 00 
  800420f84f:	48 01 d0             	add    %rdx,%rax
  800420f852:	48 8b 00             	mov    (%rax),%rax
  800420f855:	ff e0                	jmpq   *%rax
  800420f857:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800420f85b:	eb c0                	jmp    800420f81d <vprintfmt+0x89>
  800420f85d:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800420f861:	eb ba                	jmp    800420f81d <vprintfmt+0x89>
  800420f863:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800420f86a:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420f86d:	89 d0                	mov    %edx,%eax
  800420f86f:	c1 e0 02             	shl    $0x2,%eax
  800420f872:	01 d0                	add    %edx,%eax
  800420f874:	01 c0                	add    %eax,%eax
  800420f876:	01 d8                	add    %ebx,%eax
  800420f878:	83 e8 30             	sub    $0x30,%eax
  800420f87b:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f87e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f882:	0f b6 00             	movzbl (%rax),%eax
  800420f885:	0f be d8             	movsbl %al,%ebx
  800420f888:	83 fb 2f             	cmp    $0x2f,%ebx
  800420f88b:	7e 0c                	jle    800420f899 <vprintfmt+0x105>
  800420f88d:	83 fb 39             	cmp    $0x39,%ebx
  800420f890:	7f 07                	jg     800420f899 <vprintfmt+0x105>
  800420f892:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800420f897:	eb d1                	jmp    800420f86a <vprintfmt+0xd6>
  800420f899:	eb 58                	jmp    800420f8f3 <vprintfmt+0x15f>
  800420f89b:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f89e:	83 f8 30             	cmp    $0x30,%eax
  800420f8a1:	73 17                	jae    800420f8ba <vprintfmt+0x126>
  800420f8a3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f8a7:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f8aa:	89 c0                	mov    %eax,%eax
  800420f8ac:	48 01 d0             	add    %rdx,%rax
  800420f8af:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f8b2:	83 c2 08             	add    $0x8,%edx
  800420f8b5:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f8b8:	eb 0f                	jmp    800420f8c9 <vprintfmt+0x135>
  800420f8ba:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f8be:	48 89 d0             	mov    %rdx,%rax
  800420f8c1:	48 83 c2 08          	add    $0x8,%rdx
  800420f8c5:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f8c9:	8b 00                	mov    (%rax),%eax
  800420f8cb:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f8ce:	eb 23                	jmp    800420f8f3 <vprintfmt+0x15f>
  800420f8d0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f8d4:	79 0c                	jns    800420f8e2 <vprintfmt+0x14e>
  800420f8d6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  800420f8dd:	e9 3b ff ff ff       	jmpq   800420f81d <vprintfmt+0x89>
  800420f8e2:	e9 36 ff ff ff       	jmpq   800420f81d <vprintfmt+0x89>
  800420f8e7:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  800420f8ee:	e9 2a ff ff ff       	jmpq   800420f81d <vprintfmt+0x89>
  800420f8f3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f8f7:	79 12                	jns    800420f90b <vprintfmt+0x177>
  800420f8f9:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f8fc:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420f8ff:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f906:	e9 12 ff ff ff       	jmpq   800420f81d <vprintfmt+0x89>
  800420f90b:	e9 0d ff ff ff       	jmpq   800420f81d <vprintfmt+0x89>
  800420f910:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800420f914:	e9 04 ff ff ff       	jmpq   800420f81d <vprintfmt+0x89>
  800420f919:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f91c:	83 f8 30             	cmp    $0x30,%eax
  800420f91f:	73 17                	jae    800420f938 <vprintfmt+0x1a4>
  800420f921:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f925:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f928:	89 c0                	mov    %eax,%eax
  800420f92a:	48 01 d0             	add    %rdx,%rax
  800420f92d:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f930:	83 c2 08             	add    $0x8,%edx
  800420f933:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f936:	eb 0f                	jmp    800420f947 <vprintfmt+0x1b3>
  800420f938:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f93c:	48 89 d0             	mov    %rdx,%rax
  800420f93f:	48 83 c2 08          	add    $0x8,%rdx
  800420f943:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f947:	8b 10                	mov    (%rax),%edx
  800420f949:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f94d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f951:	48 89 ce             	mov    %rcx,%rsi
  800420f954:	89 d7                	mov    %edx,%edi
  800420f956:	ff d0                	callq  *%rax
  800420f958:	e9 40 03 00 00       	jmpq   800420fc9d <vprintfmt+0x509>
  800420f95d:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f960:	83 f8 30             	cmp    $0x30,%eax
  800420f963:	73 17                	jae    800420f97c <vprintfmt+0x1e8>
  800420f965:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f969:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f96c:	89 c0                	mov    %eax,%eax
  800420f96e:	48 01 d0             	add    %rdx,%rax
  800420f971:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f974:	83 c2 08             	add    $0x8,%edx
  800420f977:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f97a:	eb 0f                	jmp    800420f98b <vprintfmt+0x1f7>
  800420f97c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420f980:	48 89 d0             	mov    %rdx,%rax
  800420f983:	48 83 c2 08          	add    $0x8,%rdx
  800420f987:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f98b:	8b 18                	mov    (%rax),%ebx
  800420f98d:	85 db                	test   %ebx,%ebx
  800420f98f:	79 02                	jns    800420f993 <vprintfmt+0x1ff>
  800420f991:	f7 db                	neg    %ebx
  800420f993:	83 fb 15             	cmp    $0x15,%ebx
  800420f996:	7f 16                	jg     800420f9ae <vprintfmt+0x21a>
  800420f998:	48 b8 80 ad 21 04 80 	movabs $0x800421ad80,%rax
  800420f99f:	00 00 00 
  800420f9a2:	48 63 d3             	movslq %ebx,%rdx
  800420f9a5:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420f9a9:	4d 85 e4             	test   %r12,%r12
  800420f9ac:	75 2e                	jne    800420f9dc <vprintfmt+0x248>
  800420f9ae:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f9b2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f9b6:	89 d9                	mov    %ebx,%ecx
  800420f9b8:	48 ba 41 ae 21 04 80 	movabs $0x800421ae41,%rdx
  800420f9bf:	00 00 00 
  800420f9c2:	48 89 c7             	mov    %rax,%rdi
  800420f9c5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f9ca:	49 b8 ac fc 20 04 80 	movabs $0x800420fcac,%r8
  800420f9d1:	00 00 00 
  800420f9d4:	41 ff d0             	callq  *%r8
  800420f9d7:	e9 c1 02 00 00       	jmpq   800420fc9d <vprintfmt+0x509>
  800420f9dc:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f9e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f9e4:	4c 89 e1             	mov    %r12,%rcx
  800420f9e7:	48 ba 4a ae 21 04 80 	movabs $0x800421ae4a,%rdx
  800420f9ee:	00 00 00 
  800420f9f1:	48 89 c7             	mov    %rax,%rdi
  800420f9f4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f9f9:	49 b8 ac fc 20 04 80 	movabs $0x800420fcac,%r8
  800420fa00:	00 00 00 
  800420fa03:	41 ff d0             	callq  *%r8
  800420fa06:	e9 92 02 00 00       	jmpq   800420fc9d <vprintfmt+0x509>
  800420fa0b:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fa0e:	83 f8 30             	cmp    $0x30,%eax
  800420fa11:	73 17                	jae    800420fa2a <vprintfmt+0x296>
  800420fa13:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420fa17:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fa1a:	89 c0                	mov    %eax,%eax
  800420fa1c:	48 01 d0             	add    %rdx,%rax
  800420fa1f:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420fa22:	83 c2 08             	add    $0x8,%edx
  800420fa25:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420fa28:	eb 0f                	jmp    800420fa39 <vprintfmt+0x2a5>
  800420fa2a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420fa2e:	48 89 d0             	mov    %rdx,%rax
  800420fa31:	48 83 c2 08          	add    $0x8,%rdx
  800420fa35:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420fa39:	4c 8b 20             	mov    (%rax),%r12
  800420fa3c:	4d 85 e4             	test   %r12,%r12
  800420fa3f:	75 0a                	jne    800420fa4b <vprintfmt+0x2b7>
  800420fa41:	49 bc 4d ae 21 04 80 	movabs $0x800421ae4d,%r12
  800420fa48:	00 00 00 
  800420fa4b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420fa4f:	7e 3f                	jle    800420fa90 <vprintfmt+0x2fc>
  800420fa51:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800420fa55:	74 39                	je     800420fa90 <vprintfmt+0x2fc>
  800420fa57:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420fa5a:	48 98                	cltq   
  800420fa5c:	48 89 c6             	mov    %rax,%rsi
  800420fa5f:	4c 89 e7             	mov    %r12,%rdi
  800420fa62:	48 b8 ad 00 21 04 80 	movabs $0x80042100ad,%rax
  800420fa69:	00 00 00 
  800420fa6c:	ff d0                	callq  *%rax
  800420fa6e:	29 45 dc             	sub    %eax,-0x24(%rbp)
  800420fa71:	eb 17                	jmp    800420fa8a <vprintfmt+0x2f6>
  800420fa73:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800420fa77:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420fa7b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fa7f:	48 89 ce             	mov    %rcx,%rsi
  800420fa82:	89 d7                	mov    %edx,%edi
  800420fa84:	ff d0                	callq  *%rax
  800420fa86:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420fa8a:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420fa8e:	7f e3                	jg     800420fa73 <vprintfmt+0x2df>
  800420fa90:	eb 37                	jmp    800420fac9 <vprintfmt+0x335>
  800420fa92:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800420fa96:	74 1e                	je     800420fab6 <vprintfmt+0x322>
  800420fa98:	83 fb 1f             	cmp    $0x1f,%ebx
  800420fa9b:	7e 05                	jle    800420faa2 <vprintfmt+0x30e>
  800420fa9d:	83 fb 7e             	cmp    $0x7e,%ebx
  800420faa0:	7e 14                	jle    800420fab6 <vprintfmt+0x322>
  800420faa2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420faa6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420faaa:	48 89 d6             	mov    %rdx,%rsi
  800420faad:	bf 3f 00 00 00       	mov    $0x3f,%edi
  800420fab2:	ff d0                	callq  *%rax
  800420fab4:	eb 0f                	jmp    800420fac5 <vprintfmt+0x331>
  800420fab6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420faba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fabe:	48 89 d6             	mov    %rdx,%rsi
  800420fac1:	89 df                	mov    %ebx,%edi
  800420fac3:	ff d0                	callq  *%rax
  800420fac5:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420fac9:	4c 89 e0             	mov    %r12,%rax
  800420facc:	4c 8d 60 01          	lea    0x1(%rax),%r12
  800420fad0:	0f b6 00             	movzbl (%rax),%eax
  800420fad3:	0f be d8             	movsbl %al,%ebx
  800420fad6:	85 db                	test   %ebx,%ebx
  800420fad8:	74 10                	je     800420faea <vprintfmt+0x356>
  800420fada:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420fade:	78 b2                	js     800420fa92 <vprintfmt+0x2fe>
  800420fae0:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  800420fae4:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420fae8:	79 a8                	jns    800420fa92 <vprintfmt+0x2fe>
  800420faea:	eb 16                	jmp    800420fb02 <vprintfmt+0x36e>
  800420faec:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420faf0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420faf4:	48 89 d6             	mov    %rdx,%rsi
  800420faf7:	bf 20 00 00 00       	mov    $0x20,%edi
  800420fafc:	ff d0                	callq  *%rax
  800420fafe:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420fb02:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420fb06:	7f e4                	jg     800420faec <vprintfmt+0x358>
  800420fb08:	e9 90 01 00 00       	jmpq   800420fc9d <vprintfmt+0x509>
  800420fb0d:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420fb11:	be 03 00 00 00       	mov    $0x3,%esi
  800420fb16:	48 89 c7             	mov    %rax,%rdi
  800420fb19:	48 b8 84 f6 20 04 80 	movabs $0x800420f684,%rax
  800420fb20:	00 00 00 
  800420fb23:	ff d0                	callq  *%rax
  800420fb25:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fb29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb2d:	48 85 c0             	test   %rax,%rax
  800420fb30:	79 1d                	jns    800420fb4f <vprintfmt+0x3bb>
  800420fb32:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fb36:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fb3a:	48 89 d6             	mov    %rdx,%rsi
  800420fb3d:	bf 2d 00 00 00       	mov    $0x2d,%edi
  800420fb42:	ff d0                	callq  *%rax
  800420fb44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb48:	48 f7 d8             	neg    %rax
  800420fb4b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fb4f:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420fb56:	e9 d5 00 00 00       	jmpq   800420fc30 <vprintfmt+0x49c>
  800420fb5b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420fb5f:	be 03 00 00 00       	mov    $0x3,%esi
  800420fb64:	48 89 c7             	mov    %rax,%rdi
  800420fb67:	48 b8 74 f5 20 04 80 	movabs $0x800420f574,%rax
  800420fb6e:	00 00 00 
  800420fb71:	ff d0                	callq  *%rax
  800420fb73:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fb77:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420fb7e:	e9 ad 00 00 00       	jmpq   800420fc30 <vprintfmt+0x49c>
  800420fb83:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420fb87:	be 03 00 00 00       	mov    $0x3,%esi
  800420fb8c:	48 89 c7             	mov    %rax,%rdi
  800420fb8f:	48 b8 74 f5 20 04 80 	movabs $0x800420f574,%rax
  800420fb96:	00 00 00 
  800420fb99:	ff d0                	callq  *%rax
  800420fb9b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fb9f:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  800420fba6:	e9 85 00 00 00       	jmpq   800420fc30 <vprintfmt+0x49c>
  800420fbab:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fbaf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fbb3:	48 89 d6             	mov    %rdx,%rsi
  800420fbb6:	bf 30 00 00 00       	mov    $0x30,%edi
  800420fbbb:	ff d0                	callq  *%rax
  800420fbbd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fbc1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fbc5:	48 89 d6             	mov    %rdx,%rsi
  800420fbc8:	bf 78 00 00 00       	mov    $0x78,%edi
  800420fbcd:	ff d0                	callq  *%rax
  800420fbcf:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fbd2:	83 f8 30             	cmp    $0x30,%eax
  800420fbd5:	73 17                	jae    800420fbee <vprintfmt+0x45a>
  800420fbd7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420fbdb:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fbde:	89 c0                	mov    %eax,%eax
  800420fbe0:	48 01 d0             	add    %rdx,%rax
  800420fbe3:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420fbe6:	83 c2 08             	add    $0x8,%edx
  800420fbe9:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420fbec:	eb 0f                	jmp    800420fbfd <vprintfmt+0x469>
  800420fbee:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420fbf2:	48 89 d0             	mov    %rdx,%rax
  800420fbf5:	48 83 c2 08          	add    $0x8,%rdx
  800420fbf9:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420fbfd:	48 8b 00             	mov    (%rax),%rax
  800420fc00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fc04:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420fc0b:	eb 23                	jmp    800420fc30 <vprintfmt+0x49c>
  800420fc0d:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420fc11:	be 03 00 00 00       	mov    $0x3,%esi
  800420fc16:	48 89 c7             	mov    %rax,%rdi
  800420fc19:	48 b8 74 f5 20 04 80 	movabs $0x800420f574,%rax
  800420fc20:	00 00 00 
  800420fc23:	ff d0                	callq  *%rax
  800420fc25:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fc29:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420fc30:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800420fc35:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800420fc38:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800420fc3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc3f:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420fc43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fc47:	45 89 c1             	mov    %r8d,%r9d
  800420fc4a:	41 89 f8             	mov    %edi,%r8d
  800420fc4d:	48 89 c7             	mov    %rax,%rdi
  800420fc50:	48 b8 b9 f4 20 04 80 	movabs $0x800420f4b9,%rax
  800420fc57:	00 00 00 
  800420fc5a:	ff d0                	callq  *%rax
  800420fc5c:	eb 3f                	jmp    800420fc9d <vprintfmt+0x509>
  800420fc5e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fc62:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fc66:	48 89 d6             	mov    %rdx,%rsi
  800420fc69:	89 df                	mov    %ebx,%edi
  800420fc6b:	ff d0                	callq  *%rax
  800420fc6d:	eb 2e                	jmp    800420fc9d <vprintfmt+0x509>
  800420fc6f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fc73:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fc77:	48 89 d6             	mov    %rdx,%rsi
  800420fc7a:	bf 25 00 00 00       	mov    $0x25,%edi
  800420fc7f:	ff d0                	callq  *%rax
  800420fc81:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420fc86:	eb 05                	jmp    800420fc8d <vprintfmt+0x4f9>
  800420fc88:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420fc8d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fc91:	48 83 e8 01          	sub    $0x1,%rax
  800420fc95:	0f b6 00             	movzbl (%rax),%eax
  800420fc98:	3c 25                	cmp    $0x25,%al
  800420fc9a:	75 ec                	jne    800420fc88 <vprintfmt+0x4f4>
  800420fc9c:	90                   	nop
  800420fc9d:	90                   	nop
  800420fc9e:	e9 43 fb ff ff       	jmpq   800420f7e6 <vprintfmt+0x52>
  800420fca3:	48 83 c4 60          	add    $0x60,%rsp
  800420fca7:	5b                   	pop    %rbx
  800420fca8:	41 5c                	pop    %r12
  800420fcaa:	5d                   	pop    %rbp
  800420fcab:	c3                   	retq   

000000800420fcac <printfmt>:
  800420fcac:	55                   	push   %rbp
  800420fcad:	48 89 e5             	mov    %rsp,%rbp
  800420fcb0:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420fcb7:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420fcbe:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420fcc5:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420fccc:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420fcd3:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420fcda:	84 c0                	test   %al,%al
  800420fcdc:	74 20                	je     800420fcfe <printfmt+0x52>
  800420fcde:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420fce2:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420fce6:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420fcea:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420fcee:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420fcf2:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420fcf6:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420fcfa:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420fcfe:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420fd05:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420fd0c:	00 00 00 
  800420fd0f:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420fd16:	00 00 00 
  800420fd19:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420fd1d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420fd24:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420fd2b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420fd32:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  800420fd39:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800420fd40:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420fd47:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420fd4e:	48 89 c7             	mov    %rax,%rdi
  800420fd51:	48 b8 94 f7 20 04 80 	movabs $0x800420f794,%rax
  800420fd58:	00 00 00 
  800420fd5b:	ff d0                	callq  *%rax
  800420fd5d:	c9                   	leaveq 
  800420fd5e:	c3                   	retq   

000000800420fd5f <sprintputch>:
  800420fd5f:	55                   	push   %rbp
  800420fd60:	48 89 e5             	mov    %rsp,%rbp
  800420fd63:	48 83 ec 10          	sub    $0x10,%rsp
  800420fd67:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420fd6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fd6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fd72:	8b 40 10             	mov    0x10(%rax),%eax
  800420fd75:	8d 50 01             	lea    0x1(%rax),%edx
  800420fd78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fd7c:	89 50 10             	mov    %edx,0x10(%rax)
  800420fd7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fd83:	48 8b 10             	mov    (%rax),%rdx
  800420fd86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fd8a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420fd8e:	48 39 c2             	cmp    %rax,%rdx
  800420fd91:	73 17                	jae    800420fdaa <sprintputch+0x4b>
  800420fd93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fd97:	48 8b 00             	mov    (%rax),%rax
  800420fd9a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800420fd9e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fda2:	48 89 0a             	mov    %rcx,(%rdx)
  800420fda5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420fda8:	88 10                	mov    %dl,(%rax)
  800420fdaa:	c9                   	leaveq 
  800420fdab:	c3                   	retq   

000000800420fdac <vsnprintf>:
  800420fdac:	55                   	push   %rbp
  800420fdad:	48 89 e5             	mov    %rsp,%rbp
  800420fdb0:	48 83 ec 50          	sub    $0x50,%rsp
  800420fdb4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420fdb8:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800420fdbb:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420fdbf:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420fdc3:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800420fdc7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420fdcb:	48 8b 0a             	mov    (%rdx),%rcx
  800420fdce:	48 89 08             	mov    %rcx,(%rax)
  800420fdd1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fdd5:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fdd9:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fddd:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fde1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fde5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fde9:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420fdec:	48 98                	cltq   
  800420fdee:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420fdf2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fdf6:	48 01 d0             	add    %rdx,%rax
  800420fdf9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fdfd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420fe04:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420fe09:	74 06                	je     800420fe11 <vsnprintf+0x65>
  800420fe0b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420fe0f:	7f 07                	jg     800420fe18 <vsnprintf+0x6c>
  800420fe11:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420fe16:	eb 2f                	jmp    800420fe47 <vsnprintf+0x9b>
  800420fe18:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420fe1c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420fe20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420fe24:	48 89 c6             	mov    %rax,%rsi
  800420fe27:	48 bf 5f fd 20 04 80 	movabs $0x800420fd5f,%rdi
  800420fe2e:	00 00 00 
  800420fe31:	48 b8 94 f7 20 04 80 	movabs $0x800420f794,%rax
  800420fe38:	00 00 00 
  800420fe3b:	ff d0                	callq  *%rax
  800420fe3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420fe41:	c6 00 00             	movb   $0x0,(%rax)
  800420fe44:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420fe47:	c9                   	leaveq 
  800420fe48:	c3                   	retq   

000000800420fe49 <snprintf>:
  800420fe49:	55                   	push   %rbp
  800420fe4a:	48 89 e5             	mov    %rsp,%rbp
  800420fe4d:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800420fe54:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800420fe5b:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  800420fe61:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420fe68:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420fe6f:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420fe76:	84 c0                	test   %al,%al
  800420fe78:	74 20                	je     800420fe9a <snprintf+0x51>
  800420fe7a:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420fe7e:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420fe82:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420fe86:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420fe8a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420fe8e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420fe92:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420fe96:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420fe9a:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  800420fea1:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800420fea8:	00 00 00 
  800420feab:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420feb2:	00 00 00 
  800420feb5:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420feb9:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420fec0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420fec7:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420fece:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420fed5:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420fedc:	48 8b 0a             	mov    (%rdx),%rcx
  800420fedf:	48 89 08             	mov    %rcx,(%rax)
  800420fee2:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fee6:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420feea:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420feee:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fef2:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  800420fef9:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800420ff00:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800420ff06:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420ff0d:	48 89 c7             	mov    %rax,%rdi
  800420ff10:	48 b8 ac fd 20 04 80 	movabs $0x800420fdac,%rax
  800420ff17:	00 00 00 
  800420ff1a:	ff d0                	callq  *%rax
  800420ff1c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  800420ff22:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800420ff28:	c9                   	leaveq 
  800420ff29:	c3                   	retq   

000000800420ff2a <readline>:
  800420ff2a:	55                   	push   %rbp
  800420ff2b:	48 89 e5             	mov    %rsp,%rbp
  800420ff2e:	48 83 ec 20          	sub    $0x20,%rsp
  800420ff32:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ff36:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ff3b:	74 22                	je     800420ff5f <readline+0x35>
  800420ff3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff41:	48 89 c6             	mov    %rax,%rsi
  800420ff44:	48 bf 08 b1 21 04 80 	movabs $0x800421b108,%rdi
  800420ff4b:	00 00 00 
  800420ff4e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ff53:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420ff5a:	00 00 00 
  800420ff5d:	ff d2                	callq  *%rdx
  800420ff5f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420ff66:	bf 00 00 00 00       	mov    $0x0,%edi
  800420ff6b:	48 b8 7a 13 20 04 80 	movabs $0x800420137a,%rax
  800420ff72:	00 00 00 
  800420ff75:	ff d0                	callq  *%rax
  800420ff77:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800420ff7a:	48 b8 58 13 20 04 80 	movabs $0x8004201358,%rax
  800420ff81:	00 00 00 
  800420ff84:	ff d0                	callq  *%rax
  800420ff86:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420ff89:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800420ff8d:	79 30                	jns    800420ffbf <readline+0x95>
  800420ff8f:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  800420ff93:	74 20                	je     800420ffb5 <readline+0x8b>
  800420ff95:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420ff98:	89 c6                	mov    %eax,%esi
  800420ff9a:	48 bf 0b b1 21 04 80 	movabs $0x800421b10b,%rdi
  800420ffa1:	00 00 00 
  800420ffa4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ffa9:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800420ffb0:	00 00 00 
  800420ffb3:	ff d2                	callq  *%rdx
  800420ffb5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ffba:	e9 be 00 00 00       	jmpq   800421007d <readline+0x153>
  800420ffbf:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800420ffc3:	74 06                	je     800420ffcb <readline+0xa1>
  800420ffc5:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  800420ffc9:	75 26                	jne    800420fff1 <readline+0xc7>
  800420ffcb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ffcf:	7e 20                	jle    800420fff1 <readline+0xc7>
  800420ffd1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420ffd5:	74 11                	je     800420ffe8 <readline+0xbe>
  800420ffd7:	bf 08 00 00 00       	mov    $0x8,%edi
  800420ffdc:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  800420ffe3:	00 00 00 
  800420ffe6:	ff d0                	callq  *%rax
  800420ffe8:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  800420ffec:	e9 87 00 00 00       	jmpq   8004210078 <readline+0x14e>
  800420fff1:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420fff5:	7e 3f                	jle    8004210036 <readline+0x10c>
  800420fff7:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  800420fffe:	7f 36                	jg     8004210036 <readline+0x10c>
  8004210000:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210004:	74 11                	je     8004210017 <readline+0xed>
  8004210006:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210009:	89 c7                	mov    %eax,%edi
  800421000b:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  8004210012:	00 00 00 
  8004210015:	ff d0                	callq  *%rax
  8004210017:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421001a:	8d 50 01             	lea    0x1(%rax),%edx
  800421001d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004210020:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004210023:	89 d1                	mov    %edx,%ecx
  8004210025:	48 ba a0 f2 49 04 80 	movabs $0x800449f2a0,%rdx
  800421002c:	00 00 00 
  800421002f:	48 98                	cltq   
  8004210031:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004210034:	eb 42                	jmp    8004210078 <readline+0x14e>
  8004210036:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  800421003a:	74 06                	je     8004210042 <readline+0x118>
  800421003c:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  8004210040:	75 36                	jne    8004210078 <readline+0x14e>
  8004210042:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210046:	74 11                	je     8004210059 <readline+0x12f>
  8004210048:	bf 0a 00 00 00       	mov    $0xa,%edi
  800421004d:	48 b8 3a 13 20 04 80 	movabs $0x800420133a,%rax
  8004210054:	00 00 00 
  8004210057:	ff d0                	callq  *%rax
  8004210059:	48 ba a0 f2 49 04 80 	movabs $0x800449f2a0,%rdx
  8004210060:	00 00 00 
  8004210063:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210066:	48 98                	cltq   
  8004210068:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  800421006c:	48 b8 a0 f2 49 04 80 	movabs $0x800449f2a0,%rax
  8004210073:	00 00 00 
  8004210076:	eb 05                	jmp    800421007d <readline+0x153>
  8004210078:	e9 fd fe ff ff       	jmpq   800420ff7a <readline+0x50>
  800421007d:	c9                   	leaveq 
  800421007e:	c3                   	retq   

000000800421007f <strlen>:
  800421007f:	55                   	push   %rbp
  8004210080:	48 89 e5             	mov    %rsp,%rbp
  8004210083:	48 83 ec 18          	sub    $0x18,%rsp
  8004210087:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421008b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210092:	eb 09                	jmp    800421009d <strlen+0x1e>
  8004210094:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210098:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800421009d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100a1:	0f b6 00             	movzbl (%rax),%eax
  80042100a4:	84 c0                	test   %al,%al
  80042100a6:	75 ec                	jne    8004210094 <strlen+0x15>
  80042100a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042100ab:	c9                   	leaveq 
  80042100ac:	c3                   	retq   

00000080042100ad <strnlen>:
  80042100ad:	55                   	push   %rbp
  80042100ae:	48 89 e5             	mov    %rsp,%rbp
  80042100b1:	48 83 ec 20          	sub    $0x20,%rsp
  80042100b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042100b9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042100bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042100c4:	eb 0e                	jmp    80042100d4 <strnlen+0x27>
  80042100c6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042100ca:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042100cf:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  80042100d4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042100d9:	74 0b                	je     80042100e6 <strnlen+0x39>
  80042100db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100df:	0f b6 00             	movzbl (%rax),%eax
  80042100e2:	84 c0                	test   %al,%al
  80042100e4:	75 e0                	jne    80042100c6 <strnlen+0x19>
  80042100e6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042100e9:	c9                   	leaveq 
  80042100ea:	c3                   	retq   

00000080042100eb <strcpy>:
  80042100eb:	55                   	push   %rbp
  80042100ec:	48 89 e5             	mov    %rsp,%rbp
  80042100ef:	48 83 ec 20          	sub    $0x20,%rsp
  80042100f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042100f7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042100fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210103:	90                   	nop
  8004210104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210108:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421010c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210110:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210114:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210118:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800421011c:	0f b6 12             	movzbl (%rdx),%edx
  800421011f:	88 10                	mov    %dl,(%rax)
  8004210121:	0f b6 00             	movzbl (%rax),%eax
  8004210124:	84 c0                	test   %al,%al
  8004210126:	75 dc                	jne    8004210104 <strcpy+0x19>
  8004210128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421012c:	c9                   	leaveq 
  800421012d:	c3                   	retq   

000000800421012e <strcat>:
  800421012e:	55                   	push   %rbp
  800421012f:	48 89 e5             	mov    %rsp,%rbp
  8004210132:	48 83 ec 20          	sub    $0x20,%rsp
  8004210136:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421013a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421013e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210142:	48 89 c7             	mov    %rax,%rdi
  8004210145:	48 b8 7f 00 21 04 80 	movabs $0x800421007f,%rax
  800421014c:	00 00 00 
  800421014f:	ff d0                	callq  *%rax
  8004210151:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004210154:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210157:	48 63 d0             	movslq %eax,%rdx
  800421015a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421015e:	48 01 c2             	add    %rax,%rdx
  8004210161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210165:	48 89 c6             	mov    %rax,%rsi
  8004210168:	48 89 d7             	mov    %rdx,%rdi
  800421016b:	48 b8 eb 00 21 04 80 	movabs $0x80042100eb,%rax
  8004210172:	00 00 00 
  8004210175:	ff d0                	callq  *%rax
  8004210177:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421017b:	c9                   	leaveq 
  800421017c:	c3                   	retq   

000000800421017d <strncpy>:
  800421017d:	55                   	push   %rbp
  800421017e:	48 89 e5             	mov    %rsp,%rbp
  8004210181:	48 83 ec 28          	sub    $0x28,%rsp
  8004210185:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210189:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421018d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210191:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210195:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210199:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042101a0:	00 
  80042101a1:	eb 2a                	jmp    80042101cd <strncpy+0x50>
  80042101a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101a7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042101ab:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042101af:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042101b3:	0f b6 12             	movzbl (%rdx),%edx
  80042101b6:	88 10                	mov    %dl,(%rax)
  80042101b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042101bc:	0f b6 00             	movzbl (%rax),%eax
  80042101bf:	84 c0                	test   %al,%al
  80042101c1:	74 05                	je     80042101c8 <strncpy+0x4b>
  80042101c3:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  80042101c8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042101cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042101d1:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042101d5:	72 cc                	jb     80042101a3 <strncpy+0x26>
  80042101d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042101db:	c9                   	leaveq 
  80042101dc:	c3                   	retq   

00000080042101dd <strlcpy>:
  80042101dd:	55                   	push   %rbp
  80042101de:	48 89 e5             	mov    %rsp,%rbp
  80042101e1:	48 83 ec 28          	sub    $0x28,%rsp
  80042101e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042101e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042101ed:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042101f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042101f9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042101fe:	74 3d                	je     800421023d <strlcpy+0x60>
  8004210200:	eb 1d                	jmp    800421021f <strlcpy+0x42>
  8004210202:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210206:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421020a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421020e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210212:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210216:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800421021a:	0f b6 12             	movzbl (%rdx),%edx
  800421021d:	88 10                	mov    %dl,(%rax)
  800421021f:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210224:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210229:	74 0b                	je     8004210236 <strlcpy+0x59>
  800421022b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421022f:	0f b6 00             	movzbl (%rax),%eax
  8004210232:	84 c0                	test   %al,%al
  8004210234:	75 cc                	jne    8004210202 <strlcpy+0x25>
  8004210236:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421023a:	c6 00 00             	movb   $0x0,(%rax)
  800421023d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210245:	48 29 c2             	sub    %rax,%rdx
  8004210248:	48 89 d0             	mov    %rdx,%rax
  800421024b:	c9                   	leaveq 
  800421024c:	c3                   	retq   

000000800421024d <strcmp>:
  800421024d:	55                   	push   %rbp
  800421024e:	48 89 e5             	mov    %rsp,%rbp
  8004210251:	48 83 ec 10          	sub    $0x10,%rsp
  8004210255:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210259:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421025d:	eb 0a                	jmp    8004210269 <strcmp+0x1c>
  800421025f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210264:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421026d:	0f b6 00             	movzbl (%rax),%eax
  8004210270:	84 c0                	test   %al,%al
  8004210272:	74 12                	je     8004210286 <strcmp+0x39>
  8004210274:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210278:	0f b6 10             	movzbl (%rax),%edx
  800421027b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421027f:	0f b6 00             	movzbl (%rax),%eax
  8004210282:	38 c2                	cmp    %al,%dl
  8004210284:	74 d9                	je     800421025f <strcmp+0x12>
  8004210286:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421028a:	0f b6 00             	movzbl (%rax),%eax
  800421028d:	0f b6 d0             	movzbl %al,%edx
  8004210290:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210294:	0f b6 00             	movzbl (%rax),%eax
  8004210297:	0f b6 c0             	movzbl %al,%eax
  800421029a:	29 c2                	sub    %eax,%edx
  800421029c:	89 d0                	mov    %edx,%eax
  800421029e:	c9                   	leaveq 
  800421029f:	c3                   	retq   

00000080042102a0 <strncmp>:
  80042102a0:	55                   	push   %rbp
  80042102a1:	48 89 e5             	mov    %rsp,%rbp
  80042102a4:	48 83 ec 18          	sub    $0x18,%rsp
  80042102a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042102ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042102b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042102b4:	eb 0f                	jmp    80042102c5 <strncmp+0x25>
  80042102b6:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  80042102bb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042102c0:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042102c5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042102ca:	74 1d                	je     80042102e9 <strncmp+0x49>
  80042102cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042102d0:	0f b6 00             	movzbl (%rax),%eax
  80042102d3:	84 c0                	test   %al,%al
  80042102d5:	74 12                	je     80042102e9 <strncmp+0x49>
  80042102d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042102db:	0f b6 10             	movzbl (%rax),%edx
  80042102de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042102e2:	0f b6 00             	movzbl (%rax),%eax
  80042102e5:	38 c2                	cmp    %al,%dl
  80042102e7:	74 cd                	je     80042102b6 <strncmp+0x16>
  80042102e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042102ee:	75 07                	jne    80042102f7 <strncmp+0x57>
  80042102f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042102f5:	eb 18                	jmp    800421030f <strncmp+0x6f>
  80042102f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042102fb:	0f b6 00             	movzbl (%rax),%eax
  80042102fe:	0f b6 d0             	movzbl %al,%edx
  8004210301:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210305:	0f b6 00             	movzbl (%rax),%eax
  8004210308:	0f b6 c0             	movzbl %al,%eax
  800421030b:	29 c2                	sub    %eax,%edx
  800421030d:	89 d0                	mov    %edx,%eax
  800421030f:	c9                   	leaveq 
  8004210310:	c3                   	retq   

0000008004210311 <strchr>:
  8004210311:	55                   	push   %rbp
  8004210312:	48 89 e5             	mov    %rsp,%rbp
  8004210315:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210319:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421031d:	89 f0                	mov    %esi,%eax
  800421031f:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210322:	eb 17                	jmp    800421033b <strchr+0x2a>
  8004210324:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210328:	0f b6 00             	movzbl (%rax),%eax
  800421032b:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800421032e:	75 06                	jne    8004210336 <strchr+0x25>
  8004210330:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210334:	eb 15                	jmp    800421034b <strchr+0x3a>
  8004210336:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421033b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421033f:	0f b6 00             	movzbl (%rax),%eax
  8004210342:	84 c0                	test   %al,%al
  8004210344:	75 de                	jne    8004210324 <strchr+0x13>
  8004210346:	b8 00 00 00 00       	mov    $0x0,%eax
  800421034b:	c9                   	leaveq 
  800421034c:	c3                   	retq   

000000800421034d <strfind>:
  800421034d:	55                   	push   %rbp
  800421034e:	48 89 e5             	mov    %rsp,%rbp
  8004210351:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210355:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210359:	89 f0                	mov    %esi,%eax
  800421035b:	88 45 f4             	mov    %al,-0xc(%rbp)
  800421035e:	eb 13                	jmp    8004210373 <strfind+0x26>
  8004210360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210364:	0f b6 00             	movzbl (%rax),%eax
  8004210367:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800421036a:	75 02                	jne    800421036e <strfind+0x21>
  800421036c:	eb 10                	jmp    800421037e <strfind+0x31>
  800421036e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210373:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210377:	0f b6 00             	movzbl (%rax),%eax
  800421037a:	84 c0                	test   %al,%al
  800421037c:	75 e2                	jne    8004210360 <strfind+0x13>
  800421037e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210382:	c9                   	leaveq 
  8004210383:	c3                   	retq   

0000008004210384 <memset>:
  8004210384:	55                   	push   %rbp
  8004210385:	48 89 e5             	mov    %rsp,%rbp
  8004210388:	48 83 ec 18          	sub    $0x18,%rsp
  800421038c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210390:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210393:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210397:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421039c:	75 06                	jne    80042103a4 <memset+0x20>
  800421039e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042103a2:	eb 69                	jmp    800421040d <memset+0x89>
  80042103a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042103a8:	83 e0 03             	and    $0x3,%eax
  80042103ab:	48 85 c0             	test   %rax,%rax
  80042103ae:	75 48                	jne    80042103f8 <memset+0x74>
  80042103b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042103b4:	83 e0 03             	and    $0x3,%eax
  80042103b7:	48 85 c0             	test   %rax,%rax
  80042103ba:	75 3c                	jne    80042103f8 <memset+0x74>
  80042103bc:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  80042103c3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042103c6:	c1 e0 18             	shl    $0x18,%eax
  80042103c9:	89 c2                	mov    %eax,%edx
  80042103cb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042103ce:	c1 e0 10             	shl    $0x10,%eax
  80042103d1:	09 c2                	or     %eax,%edx
  80042103d3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042103d6:	c1 e0 08             	shl    $0x8,%eax
  80042103d9:	09 d0                	or     %edx,%eax
  80042103db:	09 45 f4             	or     %eax,-0xc(%rbp)
  80042103de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042103e2:	48 c1 e8 02          	shr    $0x2,%rax
  80042103e6:	48 89 c1             	mov    %rax,%rcx
  80042103e9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042103ed:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042103f0:	48 89 d7             	mov    %rdx,%rdi
  80042103f3:	fc                   	cld    
  80042103f4:	f3 ab                	rep stos %eax,%es:(%rdi)
  80042103f6:	eb 11                	jmp    8004210409 <memset+0x85>
  80042103f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042103fc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042103ff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004210403:	48 89 d7             	mov    %rdx,%rdi
  8004210406:	fc                   	cld    
  8004210407:	f3 aa                	rep stos %al,%es:(%rdi)
  8004210409:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421040d:	c9                   	leaveq 
  800421040e:	c3                   	retq   

000000800421040f <memmove>:
  800421040f:	55                   	push   %rbp
  8004210410:	48 89 e5             	mov    %rsp,%rbp
  8004210413:	48 83 ec 28          	sub    $0x28,%rsp
  8004210417:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421041b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421041f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210423:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210427:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421042b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421042f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210433:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210437:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800421043b:	0f 83 88 00 00 00    	jae    80042104c9 <memmove+0xba>
  8004210441:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210445:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210449:	48 01 d0             	add    %rdx,%rax
  800421044c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210450:	76 77                	jbe    80042104c9 <memmove+0xba>
  8004210452:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210456:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421045a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421045e:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004210462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210466:	83 e0 03             	and    $0x3,%eax
  8004210469:	48 85 c0             	test   %rax,%rax
  800421046c:	75 3b                	jne    80042104a9 <memmove+0x9a>
  800421046e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210472:	83 e0 03             	and    $0x3,%eax
  8004210475:	48 85 c0             	test   %rax,%rax
  8004210478:	75 2f                	jne    80042104a9 <memmove+0x9a>
  800421047a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421047e:	83 e0 03             	and    $0x3,%eax
  8004210481:	48 85 c0             	test   %rax,%rax
  8004210484:	75 23                	jne    80042104a9 <memmove+0x9a>
  8004210486:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421048a:	48 83 e8 04          	sub    $0x4,%rax
  800421048e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210492:	48 83 ea 04          	sub    $0x4,%rdx
  8004210496:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421049a:	48 c1 e9 02          	shr    $0x2,%rcx
  800421049e:	48 89 c7             	mov    %rax,%rdi
  80042104a1:	48 89 d6             	mov    %rdx,%rsi
  80042104a4:	fd                   	std    
  80042104a5:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  80042104a7:	eb 1d                	jmp    80042104c6 <memmove+0xb7>
  80042104a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104ad:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042104b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042104b5:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  80042104b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104bd:	48 89 d7             	mov    %rdx,%rdi
  80042104c0:	48 89 c1             	mov    %rax,%rcx
  80042104c3:	fd                   	std    
  80042104c4:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  80042104c6:	fc                   	cld    
  80042104c7:	eb 57                	jmp    8004210520 <memmove+0x111>
  80042104c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042104cd:	83 e0 03             	and    $0x3,%eax
  80042104d0:	48 85 c0             	test   %rax,%rax
  80042104d3:	75 36                	jne    800421050b <memmove+0xfc>
  80042104d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104d9:	83 e0 03             	and    $0x3,%eax
  80042104dc:	48 85 c0             	test   %rax,%rax
  80042104df:	75 2a                	jne    800421050b <memmove+0xfc>
  80042104e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104e5:	83 e0 03             	and    $0x3,%eax
  80042104e8:	48 85 c0             	test   %rax,%rax
  80042104eb:	75 1e                	jne    800421050b <memmove+0xfc>
  80042104ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104f1:	48 c1 e8 02          	shr    $0x2,%rax
  80042104f5:	48 89 c1             	mov    %rax,%rcx
  80042104f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042104fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210500:	48 89 c7             	mov    %rax,%rdi
  8004210503:	48 89 d6             	mov    %rdx,%rsi
  8004210506:	fc                   	cld    
  8004210507:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210509:	eb 15                	jmp    8004210520 <memmove+0x111>
  800421050b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421050f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210513:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210517:	48 89 c7             	mov    %rax,%rdi
  800421051a:	48 89 d6             	mov    %rdx,%rsi
  800421051d:	fc                   	cld    
  800421051e:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210520:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210524:	c9                   	leaveq 
  8004210525:	c3                   	retq   

0000008004210526 <memcpy>:
  8004210526:	55                   	push   %rbp
  8004210527:	48 89 e5             	mov    %rsp,%rbp
  800421052a:	48 83 ec 18          	sub    $0x18,%rsp
  800421052e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210532:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210536:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421053a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421053e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004210542:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210546:	48 89 ce             	mov    %rcx,%rsi
  8004210549:	48 89 c7             	mov    %rax,%rdi
  800421054c:	48 b8 0f 04 21 04 80 	movabs $0x800421040f,%rax
  8004210553:	00 00 00 
  8004210556:	ff d0                	callq  *%rax
  8004210558:	c9                   	leaveq 
  8004210559:	c3                   	retq   

000000800421055a <memcmp>:
  800421055a:	55                   	push   %rbp
  800421055b:	48 89 e5             	mov    %rsp,%rbp
  800421055e:	48 83 ec 28          	sub    $0x28,%rsp
  8004210562:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210566:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421056a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421056e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210572:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210576:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421057a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421057e:	eb 36                	jmp    80042105b6 <memcmp+0x5c>
  8004210580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210584:	0f b6 10             	movzbl (%rax),%edx
  8004210587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421058b:	0f b6 00             	movzbl (%rax),%eax
  800421058e:	38 c2                	cmp    %al,%dl
  8004210590:	74 1a                	je     80042105ac <memcmp+0x52>
  8004210592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210596:	0f b6 00             	movzbl (%rax),%eax
  8004210599:	0f b6 d0             	movzbl %al,%edx
  800421059c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105a0:	0f b6 00             	movzbl (%rax),%eax
  80042105a3:	0f b6 c0             	movzbl %al,%eax
  80042105a6:	29 c2                	sub    %eax,%edx
  80042105a8:	89 d0                	mov    %edx,%eax
  80042105aa:	eb 20                	jmp    80042105cc <memcmp+0x72>
  80042105ac:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042105b1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042105b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042105ba:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042105be:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042105c2:	48 85 c0             	test   %rax,%rax
  80042105c5:	75 b9                	jne    8004210580 <memcmp+0x26>
  80042105c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042105cc:	c9                   	leaveq 
  80042105cd:	c3                   	retq   

00000080042105ce <memfind>:
  80042105ce:	55                   	push   %rbp
  80042105cf:	48 89 e5             	mov    %rsp,%rbp
  80042105d2:	48 83 ec 28          	sub    $0x28,%rsp
  80042105d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042105da:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042105dd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042105e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042105e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042105e9:	48 01 d0             	add    %rdx,%rax
  80042105ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042105f0:	eb 15                	jmp    8004210607 <memfind+0x39>
  80042105f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105f6:	0f b6 10             	movzbl (%rax),%edx
  80042105f9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042105fc:	38 c2                	cmp    %al,%dl
  80042105fe:	75 02                	jne    8004210602 <memfind+0x34>
  8004210600:	eb 0f                	jmp    8004210611 <memfind+0x43>
  8004210602:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210607:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421060b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421060f:	72 e1                	jb     80042105f2 <memfind+0x24>
  8004210611:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210615:	c9                   	leaveq 
  8004210616:	c3                   	retq   

0000008004210617 <strtol>:
  8004210617:	55                   	push   %rbp
  8004210618:	48 89 e5             	mov    %rsp,%rbp
  800421061b:	48 83 ec 34          	sub    $0x34,%rsp
  800421061f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210623:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210627:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421062a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210631:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210638:	00 
  8004210639:	eb 05                	jmp    8004210640 <strtol+0x29>
  800421063b:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210640:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210644:	0f b6 00             	movzbl (%rax),%eax
  8004210647:	3c 20                	cmp    $0x20,%al
  8004210649:	74 f0                	je     800421063b <strtol+0x24>
  800421064b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421064f:	0f b6 00             	movzbl (%rax),%eax
  8004210652:	3c 09                	cmp    $0x9,%al
  8004210654:	74 e5                	je     800421063b <strtol+0x24>
  8004210656:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421065a:	0f b6 00             	movzbl (%rax),%eax
  800421065d:	3c 2b                	cmp    $0x2b,%al
  800421065f:	75 07                	jne    8004210668 <strtol+0x51>
  8004210661:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210666:	eb 17                	jmp    800421067f <strtol+0x68>
  8004210668:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421066c:	0f b6 00             	movzbl (%rax),%eax
  800421066f:	3c 2d                	cmp    $0x2d,%al
  8004210671:	75 0c                	jne    800421067f <strtol+0x68>
  8004210673:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210678:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  800421067f:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210683:	74 06                	je     800421068b <strtol+0x74>
  8004210685:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210689:	75 28                	jne    80042106b3 <strtol+0x9c>
  800421068b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421068f:	0f b6 00             	movzbl (%rax),%eax
  8004210692:	3c 30                	cmp    $0x30,%al
  8004210694:	75 1d                	jne    80042106b3 <strtol+0x9c>
  8004210696:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421069a:	48 83 c0 01          	add    $0x1,%rax
  800421069e:	0f b6 00             	movzbl (%rax),%eax
  80042106a1:	3c 78                	cmp    $0x78,%al
  80042106a3:	75 0e                	jne    80042106b3 <strtol+0x9c>
  80042106a5:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  80042106aa:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  80042106b1:	eb 2c                	jmp    80042106df <strtol+0xc8>
  80042106b3:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042106b7:	75 19                	jne    80042106d2 <strtol+0xbb>
  80042106b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042106bd:	0f b6 00             	movzbl (%rax),%eax
  80042106c0:	3c 30                	cmp    $0x30,%al
  80042106c2:	75 0e                	jne    80042106d2 <strtol+0xbb>
  80042106c4:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042106c9:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  80042106d0:	eb 0d                	jmp    80042106df <strtol+0xc8>
  80042106d2:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042106d6:	75 07                	jne    80042106df <strtol+0xc8>
  80042106d8:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  80042106df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042106e3:	0f b6 00             	movzbl (%rax),%eax
  80042106e6:	3c 2f                	cmp    $0x2f,%al
  80042106e8:	7e 1d                	jle    8004210707 <strtol+0xf0>
  80042106ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042106ee:	0f b6 00             	movzbl (%rax),%eax
  80042106f1:	3c 39                	cmp    $0x39,%al
  80042106f3:	7f 12                	jg     8004210707 <strtol+0xf0>
  80042106f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042106f9:	0f b6 00             	movzbl (%rax),%eax
  80042106fc:	0f be c0             	movsbl %al,%eax
  80042106ff:	83 e8 30             	sub    $0x30,%eax
  8004210702:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210705:	eb 4e                	jmp    8004210755 <strtol+0x13e>
  8004210707:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421070b:	0f b6 00             	movzbl (%rax),%eax
  800421070e:	3c 60                	cmp    $0x60,%al
  8004210710:	7e 1d                	jle    800421072f <strtol+0x118>
  8004210712:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210716:	0f b6 00             	movzbl (%rax),%eax
  8004210719:	3c 7a                	cmp    $0x7a,%al
  800421071b:	7f 12                	jg     800421072f <strtol+0x118>
  800421071d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210721:	0f b6 00             	movzbl (%rax),%eax
  8004210724:	0f be c0             	movsbl %al,%eax
  8004210727:	83 e8 57             	sub    $0x57,%eax
  800421072a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421072d:	eb 26                	jmp    8004210755 <strtol+0x13e>
  800421072f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210733:	0f b6 00             	movzbl (%rax),%eax
  8004210736:	3c 40                	cmp    $0x40,%al
  8004210738:	7e 48                	jle    8004210782 <strtol+0x16b>
  800421073a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421073e:	0f b6 00             	movzbl (%rax),%eax
  8004210741:	3c 5a                	cmp    $0x5a,%al
  8004210743:	7f 3d                	jg     8004210782 <strtol+0x16b>
  8004210745:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210749:	0f b6 00             	movzbl (%rax),%eax
  800421074c:	0f be c0             	movsbl %al,%eax
  800421074f:	83 e8 37             	sub    $0x37,%eax
  8004210752:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210755:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210758:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421075b:	7c 02                	jl     800421075f <strtol+0x148>
  800421075d:	eb 23                	jmp    8004210782 <strtol+0x16b>
  800421075f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210764:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210767:	48 98                	cltq   
  8004210769:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  800421076e:	48 89 c2             	mov    %rax,%rdx
  8004210771:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210774:	48 98                	cltq   
  8004210776:	48 01 d0             	add    %rdx,%rax
  8004210779:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421077d:	e9 5d ff ff ff       	jmpq   80042106df <strtol+0xc8>
  8004210782:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210787:	74 0b                	je     8004210794 <strtol+0x17d>
  8004210789:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421078d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210791:	48 89 10             	mov    %rdx,(%rax)
  8004210794:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210798:	74 09                	je     80042107a3 <strtol+0x18c>
  800421079a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421079e:	48 f7 d8             	neg    %rax
  80042107a1:	eb 04                	jmp    80042107a7 <strtol+0x190>
  80042107a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107a7:	c9                   	leaveq 
  80042107a8:	c3                   	retq   

00000080042107a9 <strstr>:
  80042107a9:	55                   	push   %rbp
  80042107aa:	48 89 e5             	mov    %rsp,%rbp
  80042107ad:	48 83 ec 30          	sub    $0x30,%rsp
  80042107b1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042107b5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042107b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042107bd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042107c1:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042107c5:	0f b6 00             	movzbl (%rax),%eax
  80042107c8:	88 45 ff             	mov    %al,-0x1(%rbp)
  80042107cb:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  80042107cf:	75 06                	jne    80042107d7 <strstr+0x2e>
  80042107d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042107d5:	eb 6b                	jmp    8004210842 <strstr+0x99>
  80042107d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042107db:	48 89 c7             	mov    %rax,%rdi
  80042107de:	48 b8 7f 00 21 04 80 	movabs $0x800421007f,%rax
  80042107e5:	00 00 00 
  80042107e8:	ff d0                	callq  *%rax
  80042107ea:	48 98                	cltq   
  80042107ec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042107f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042107f4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042107f8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042107fc:	0f b6 00             	movzbl (%rax),%eax
  80042107ff:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004210802:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  8004210806:	75 07                	jne    800421080f <strstr+0x66>
  8004210808:	b8 00 00 00 00       	mov    $0x0,%eax
  800421080d:	eb 33                	jmp    8004210842 <strstr+0x99>
  800421080f:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004210813:	3a 45 ff             	cmp    -0x1(%rbp),%al
  8004210816:	75 d8                	jne    80042107f0 <strstr+0x47>
  8004210818:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421081c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  8004210820:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210824:	48 89 ce             	mov    %rcx,%rsi
  8004210827:	48 89 c7             	mov    %rax,%rdi
  800421082a:	48 b8 a0 02 21 04 80 	movabs $0x80042102a0,%rax
  8004210831:	00 00 00 
  8004210834:	ff d0                	callq  *%rax
  8004210836:	85 c0                	test   %eax,%eax
  8004210838:	75 b6                	jne    80042107f0 <strstr+0x47>
  800421083a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421083e:	48 83 e8 01          	sub    $0x1,%rax
  8004210842:	c9                   	leaveq 
  8004210843:	c3                   	retq   

0000008004210844 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004210844:	55                   	push   %rbp
  8004210845:	48 89 e5             	mov    %rsp,%rbp
  8004210848:	48 83 ec 24          	sub    $0x24,%rsp
  800421084c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210850:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210854:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210857:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421085b:	48 8b 10             	mov    (%rax),%rdx
  800421085e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210862:	48 01 d0             	add    %rdx,%rax
  8004210865:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210869:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210870:	00 
	switch (bytes_to_read) {
  8004210871:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210874:	83 f8 02             	cmp    $0x2,%eax
  8004210877:	0f 84 ab 00 00 00    	je     8004210928 <_dwarf_read_lsb+0xe4>
  800421087d:	83 f8 02             	cmp    $0x2,%eax
  8004210880:	7f 0e                	jg     8004210890 <_dwarf_read_lsb+0x4c>
  8004210882:	83 f8 01             	cmp    $0x1,%eax
  8004210885:	0f 84 b3 00 00 00    	je     800421093e <_dwarf_read_lsb+0xfa>
  800421088b:	e9 d9 00 00 00       	jmpq   8004210969 <_dwarf_read_lsb+0x125>
  8004210890:	83 f8 04             	cmp    $0x4,%eax
  8004210893:	74 65                	je     80042108fa <_dwarf_read_lsb+0xb6>
  8004210895:	83 f8 08             	cmp    $0x8,%eax
  8004210898:	0f 85 cb 00 00 00    	jne    8004210969 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800421089e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108a2:	48 83 c0 04          	add    $0x4,%rax
  80042108a6:	0f b6 00             	movzbl (%rax),%eax
  80042108a9:	0f b6 c0             	movzbl %al,%eax
  80042108ac:	48 c1 e0 20          	shl    $0x20,%rax
  80042108b0:	48 89 c2             	mov    %rax,%rdx
  80042108b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108b7:	48 83 c0 05          	add    $0x5,%rax
  80042108bb:	0f b6 00             	movzbl (%rax),%eax
  80042108be:	0f b6 c0             	movzbl %al,%eax
  80042108c1:	48 c1 e0 28          	shl    $0x28,%rax
  80042108c5:	48 09 d0             	or     %rdx,%rax
  80042108c8:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042108cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108d0:	48 83 c0 06          	add    $0x6,%rax
  80042108d4:	0f b6 00             	movzbl (%rax),%eax
  80042108d7:	0f b6 c0             	movzbl %al,%eax
  80042108da:	48 c1 e0 30          	shl    $0x30,%rax
  80042108de:	48 89 c2             	mov    %rax,%rdx
  80042108e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108e5:	48 83 c0 07          	add    $0x7,%rax
  80042108e9:	0f b6 00             	movzbl (%rax),%eax
  80042108ec:	0f b6 c0             	movzbl %al,%eax
  80042108ef:	48 c1 e0 38          	shl    $0x38,%rax
  80042108f3:	48 09 d0             	or     %rdx,%rax
  80042108f6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042108fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108fe:	48 83 c0 02          	add    $0x2,%rax
  8004210902:	0f b6 00             	movzbl (%rax),%eax
  8004210905:	0f b6 c0             	movzbl %al,%eax
  8004210908:	48 c1 e0 10          	shl    $0x10,%rax
  800421090c:	48 89 c2             	mov    %rax,%rdx
  800421090f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210913:	48 83 c0 03          	add    $0x3,%rax
  8004210917:	0f b6 00             	movzbl (%rax),%eax
  800421091a:	0f b6 c0             	movzbl %al,%eax
  800421091d:	48 c1 e0 18          	shl    $0x18,%rax
  8004210921:	48 09 d0             	or     %rdx,%rax
  8004210924:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210928:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421092c:	48 83 c0 01          	add    $0x1,%rax
  8004210930:	0f b6 00             	movzbl (%rax),%eax
  8004210933:	0f b6 c0             	movzbl %al,%eax
  8004210936:	48 c1 e0 08          	shl    $0x8,%rax
  800421093a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421093e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210942:	0f b6 00             	movzbl (%rax),%eax
  8004210945:	0f b6 c0             	movzbl %al,%eax
  8004210948:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421094c:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  800421094d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210951:	48 8b 10             	mov    (%rax),%rdx
  8004210954:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210957:	48 98                	cltq   
  8004210959:	48 01 c2             	add    %rax,%rdx
  800421095c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210960:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210963:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210967:	eb 05                	jmp    800421096e <_dwarf_read_lsb+0x12a>
		return (0);
  8004210969:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421096e:	c9                   	leaveq 
  800421096f:	c3                   	retq   

0000008004210970 <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  8004210970:	55                   	push   %rbp
  8004210971:	48 89 e5             	mov    %rsp,%rbp
  8004210974:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210978:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421097c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800421097f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210983:	48 8b 00             	mov    (%rax),%rax
  8004210986:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800421098a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210991:	00 
	switch (bytes_to_read) {
  8004210992:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210995:	83 f8 02             	cmp    $0x2,%eax
  8004210998:	0f 84 ab 00 00 00    	je     8004210a49 <_dwarf_decode_lsb+0xd9>
  800421099e:	83 f8 02             	cmp    $0x2,%eax
  80042109a1:	7f 0e                	jg     80042109b1 <_dwarf_decode_lsb+0x41>
  80042109a3:	83 f8 01             	cmp    $0x1,%eax
  80042109a6:	0f 84 b3 00 00 00    	je     8004210a5f <_dwarf_decode_lsb+0xef>
  80042109ac:	e9 d9 00 00 00       	jmpq   8004210a8a <_dwarf_decode_lsb+0x11a>
  80042109b1:	83 f8 04             	cmp    $0x4,%eax
  80042109b4:	74 65                	je     8004210a1b <_dwarf_decode_lsb+0xab>
  80042109b6:	83 f8 08             	cmp    $0x8,%eax
  80042109b9:	0f 85 cb 00 00 00    	jne    8004210a8a <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042109bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109c3:	48 83 c0 04          	add    $0x4,%rax
  80042109c7:	0f b6 00             	movzbl (%rax),%eax
  80042109ca:	0f b6 c0             	movzbl %al,%eax
  80042109cd:	48 c1 e0 20          	shl    $0x20,%rax
  80042109d1:	48 89 c2             	mov    %rax,%rdx
  80042109d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109d8:	48 83 c0 05          	add    $0x5,%rax
  80042109dc:	0f b6 00             	movzbl (%rax),%eax
  80042109df:	0f b6 c0             	movzbl %al,%eax
  80042109e2:	48 c1 e0 28          	shl    $0x28,%rax
  80042109e6:	48 09 d0             	or     %rdx,%rax
  80042109e9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042109ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109f1:	48 83 c0 06          	add    $0x6,%rax
  80042109f5:	0f b6 00             	movzbl (%rax),%eax
  80042109f8:	0f b6 c0             	movzbl %al,%eax
  80042109fb:	48 c1 e0 30          	shl    $0x30,%rax
  80042109ff:	48 89 c2             	mov    %rax,%rdx
  8004210a02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a06:	48 83 c0 07          	add    $0x7,%rax
  8004210a0a:	0f b6 00             	movzbl (%rax),%eax
  8004210a0d:	0f b6 c0             	movzbl %al,%eax
  8004210a10:	48 c1 e0 38          	shl    $0x38,%rax
  8004210a14:	48 09 d0             	or     %rdx,%rax
  8004210a17:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210a1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a1f:	48 83 c0 02          	add    $0x2,%rax
  8004210a23:	0f b6 00             	movzbl (%rax),%eax
  8004210a26:	0f b6 c0             	movzbl %al,%eax
  8004210a29:	48 c1 e0 10          	shl    $0x10,%rax
  8004210a2d:	48 89 c2             	mov    %rax,%rdx
  8004210a30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a34:	48 83 c0 03          	add    $0x3,%rax
  8004210a38:	0f b6 00             	movzbl (%rax),%eax
  8004210a3b:	0f b6 c0             	movzbl %al,%eax
  8004210a3e:	48 c1 e0 18          	shl    $0x18,%rax
  8004210a42:	48 09 d0             	or     %rdx,%rax
  8004210a45:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210a49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a4d:	48 83 c0 01          	add    $0x1,%rax
  8004210a51:	0f b6 00             	movzbl (%rax),%eax
  8004210a54:	0f b6 c0             	movzbl %al,%eax
  8004210a57:	48 c1 e0 08          	shl    $0x8,%rax
  8004210a5b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004210a5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a63:	0f b6 00             	movzbl (%rax),%eax
  8004210a66:	0f b6 c0             	movzbl %al,%eax
  8004210a69:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210a6d:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  8004210a6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a72:	48 8b 10             	mov    (%rax),%rdx
  8004210a75:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210a78:	48 98                	cltq   
  8004210a7a:	48 01 c2             	add    %rax,%rdx
  8004210a7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a81:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210a84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a88:	eb 05                	jmp    8004210a8f <_dwarf_decode_lsb+0x11f>
		return (0);
  8004210a8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004210a8f:	c9                   	leaveq 
  8004210a90:	c3                   	retq   

0000008004210a91 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004210a91:	55                   	push   %rbp
  8004210a92:	48 89 e5             	mov    %rsp,%rbp
  8004210a95:	48 83 ec 24          	sub    $0x24,%rsp
  8004210a99:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210a9d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210aa1:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210aa4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210aa8:	48 8b 10             	mov    (%rax),%rdx
  8004210aab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210aaf:	48 01 d0             	add    %rdx,%rax
  8004210ab2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  8004210ab6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210ab9:	83 f8 02             	cmp    $0x2,%eax
  8004210abc:	74 35                	je     8004210af3 <_dwarf_read_msb+0x62>
  8004210abe:	83 f8 02             	cmp    $0x2,%eax
  8004210ac1:	7f 0a                	jg     8004210acd <_dwarf_read_msb+0x3c>
  8004210ac3:	83 f8 01             	cmp    $0x1,%eax
  8004210ac6:	74 18                	je     8004210ae0 <_dwarf_read_msb+0x4f>
  8004210ac8:	e9 53 01 00 00       	jmpq   8004210c20 <_dwarf_read_msb+0x18f>
  8004210acd:	83 f8 04             	cmp    $0x4,%eax
  8004210ad0:	74 49                	je     8004210b1b <_dwarf_read_msb+0x8a>
  8004210ad2:	83 f8 08             	cmp    $0x8,%eax
  8004210ad5:	0f 84 96 00 00 00    	je     8004210b71 <_dwarf_read_msb+0xe0>
  8004210adb:	e9 40 01 00 00       	jmpq   8004210c20 <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  8004210ae0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ae4:	0f b6 00             	movzbl (%rax),%eax
  8004210ae7:	0f b6 c0             	movzbl %al,%eax
  8004210aea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210aee:	e9 34 01 00 00       	jmpq   8004210c27 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004210af3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210af7:	48 83 c0 01          	add    $0x1,%rax
  8004210afb:	0f b6 00             	movzbl (%rax),%eax
  8004210afe:	0f b6 d0             	movzbl %al,%edx
  8004210b01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b05:	0f b6 00             	movzbl (%rax),%eax
  8004210b08:	0f b6 c0             	movzbl %al,%eax
  8004210b0b:	48 c1 e0 08          	shl    $0x8,%rax
  8004210b0f:	48 09 d0             	or     %rdx,%rax
  8004210b12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210b16:	e9 0c 01 00 00       	jmpq   8004210c27 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004210b1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b1f:	48 83 c0 03          	add    $0x3,%rax
  8004210b23:	0f b6 00             	movzbl (%rax),%eax
  8004210b26:	0f b6 c0             	movzbl %al,%eax
  8004210b29:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210b2d:	48 83 c2 02          	add    $0x2,%rdx
  8004210b31:	0f b6 12             	movzbl (%rdx),%edx
  8004210b34:	0f b6 d2             	movzbl %dl,%edx
  8004210b37:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210b3b:	48 09 d0             	or     %rdx,%rax
  8004210b3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004210b42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b46:	48 83 c0 01          	add    $0x1,%rax
  8004210b4a:	0f b6 00             	movzbl (%rax),%eax
  8004210b4d:	0f b6 c0             	movzbl %al,%eax
  8004210b50:	48 c1 e0 10          	shl    $0x10,%rax
  8004210b54:	48 89 c2             	mov    %rax,%rdx
  8004210b57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b5b:	0f b6 00             	movzbl (%rax),%eax
  8004210b5e:	0f b6 c0             	movzbl %al,%eax
  8004210b61:	48 c1 e0 18          	shl    $0x18,%rax
  8004210b65:	48 09 d0             	or     %rdx,%rax
  8004210b68:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210b6c:	e9 b6 00 00 00       	jmpq   8004210c27 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004210b71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b75:	48 83 c0 07          	add    $0x7,%rax
  8004210b79:	0f b6 00             	movzbl (%rax),%eax
  8004210b7c:	0f b6 c0             	movzbl %al,%eax
  8004210b7f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210b83:	48 83 c2 06          	add    $0x6,%rdx
  8004210b87:	0f b6 12             	movzbl (%rdx),%edx
  8004210b8a:	0f b6 d2             	movzbl %dl,%edx
  8004210b8d:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210b91:	48 09 d0             	or     %rdx,%rax
  8004210b94:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210b98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b9c:	48 83 c0 05          	add    $0x5,%rax
  8004210ba0:	0f b6 00             	movzbl (%rax),%eax
  8004210ba3:	0f b6 c0             	movzbl %al,%eax
  8004210ba6:	48 c1 e0 10          	shl    $0x10,%rax
  8004210baa:	48 89 c2             	mov    %rax,%rdx
  8004210bad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210bb1:	48 83 c0 04          	add    $0x4,%rax
  8004210bb5:	0f b6 00             	movzbl (%rax),%eax
  8004210bb8:	0f b6 c0             	movzbl %al,%eax
  8004210bbb:	48 c1 e0 18          	shl    $0x18,%rax
  8004210bbf:	48 09 d0             	or     %rdx,%rax
  8004210bc2:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004210bc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210bca:	48 83 c0 03          	add    $0x3,%rax
  8004210bce:	0f b6 00             	movzbl (%rax),%eax
  8004210bd1:	0f b6 c0             	movzbl %al,%eax
  8004210bd4:	48 c1 e0 20          	shl    $0x20,%rax
  8004210bd8:	48 89 c2             	mov    %rax,%rdx
  8004210bdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210bdf:	48 83 c0 02          	add    $0x2,%rax
  8004210be3:	0f b6 00             	movzbl (%rax),%eax
  8004210be6:	0f b6 c0             	movzbl %al,%eax
  8004210be9:	48 c1 e0 28          	shl    $0x28,%rax
  8004210bed:	48 09 d0             	or     %rdx,%rax
  8004210bf0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004210bf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210bf8:	48 83 c0 01          	add    $0x1,%rax
  8004210bfc:	0f b6 00             	movzbl (%rax),%eax
  8004210bff:	0f b6 c0             	movzbl %al,%eax
  8004210c02:	48 c1 e0 30          	shl    $0x30,%rax
  8004210c06:	48 89 c2             	mov    %rax,%rdx
  8004210c09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c0d:	0f b6 00             	movzbl (%rax),%eax
  8004210c10:	0f b6 c0             	movzbl %al,%eax
  8004210c13:	48 c1 e0 38          	shl    $0x38,%rax
  8004210c17:	48 09 d0             	or     %rdx,%rax
  8004210c1a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210c1e:	eb 07                	jmp    8004210c27 <_dwarf_read_msb+0x196>
	default:
		return (0);
  8004210c20:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210c25:	eb 1a                	jmp    8004210c41 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  8004210c27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c2b:	48 8b 10             	mov    (%rax),%rdx
  8004210c2e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210c31:	48 98                	cltq   
  8004210c33:	48 01 c2             	add    %rax,%rdx
  8004210c36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c3a:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210c3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210c41:	c9                   	leaveq 
  8004210c42:	c3                   	retq   

0000008004210c43 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  8004210c43:	55                   	push   %rbp
  8004210c44:	48 89 e5             	mov    %rsp,%rbp
  8004210c47:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210c4b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c4f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004210c52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c56:	48 8b 00             	mov    (%rax),%rax
  8004210c59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210c5d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210c64:	00 
	switch (bytes_to_read) {
  8004210c65:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210c68:	83 f8 02             	cmp    $0x2,%eax
  8004210c6b:	74 35                	je     8004210ca2 <_dwarf_decode_msb+0x5f>
  8004210c6d:	83 f8 02             	cmp    $0x2,%eax
  8004210c70:	7f 0a                	jg     8004210c7c <_dwarf_decode_msb+0x39>
  8004210c72:	83 f8 01             	cmp    $0x1,%eax
  8004210c75:	74 18                	je     8004210c8f <_dwarf_decode_msb+0x4c>
  8004210c77:	e9 53 01 00 00       	jmpq   8004210dcf <_dwarf_decode_msb+0x18c>
  8004210c7c:	83 f8 04             	cmp    $0x4,%eax
  8004210c7f:	74 49                	je     8004210cca <_dwarf_decode_msb+0x87>
  8004210c81:	83 f8 08             	cmp    $0x8,%eax
  8004210c84:	0f 84 96 00 00 00    	je     8004210d20 <_dwarf_decode_msb+0xdd>
  8004210c8a:	e9 40 01 00 00       	jmpq   8004210dcf <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  8004210c8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c93:	0f b6 00             	movzbl (%rax),%eax
  8004210c96:	0f b6 c0             	movzbl %al,%eax
  8004210c99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210c9d:	e9 34 01 00 00       	jmpq   8004210dd6 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004210ca2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ca6:	48 83 c0 01          	add    $0x1,%rax
  8004210caa:	0f b6 00             	movzbl (%rax),%eax
  8004210cad:	0f b6 d0             	movzbl %al,%edx
  8004210cb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cb4:	0f b6 00             	movzbl (%rax),%eax
  8004210cb7:	0f b6 c0             	movzbl %al,%eax
  8004210cba:	48 c1 e0 08          	shl    $0x8,%rax
  8004210cbe:	48 09 d0             	or     %rdx,%rax
  8004210cc1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210cc5:	e9 0c 01 00 00       	jmpq   8004210dd6 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004210cca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cce:	48 83 c0 03          	add    $0x3,%rax
  8004210cd2:	0f b6 00             	movzbl (%rax),%eax
  8004210cd5:	0f b6 c0             	movzbl %al,%eax
  8004210cd8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210cdc:	48 83 c2 02          	add    $0x2,%rdx
  8004210ce0:	0f b6 12             	movzbl (%rdx),%edx
  8004210ce3:	0f b6 d2             	movzbl %dl,%edx
  8004210ce6:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210cea:	48 09 d0             	or     %rdx,%rax
  8004210ced:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004210cf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cf5:	48 83 c0 01          	add    $0x1,%rax
  8004210cf9:	0f b6 00             	movzbl (%rax),%eax
  8004210cfc:	0f b6 c0             	movzbl %al,%eax
  8004210cff:	48 c1 e0 10          	shl    $0x10,%rax
  8004210d03:	48 89 c2             	mov    %rax,%rdx
  8004210d06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d0a:	0f b6 00             	movzbl (%rax),%eax
  8004210d0d:	0f b6 c0             	movzbl %al,%eax
  8004210d10:	48 c1 e0 18          	shl    $0x18,%rax
  8004210d14:	48 09 d0             	or     %rdx,%rax
  8004210d17:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210d1b:	e9 b6 00 00 00       	jmpq   8004210dd6 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004210d20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d24:	48 83 c0 07          	add    $0x7,%rax
  8004210d28:	0f b6 00             	movzbl (%rax),%eax
  8004210d2b:	0f b6 c0             	movzbl %al,%eax
  8004210d2e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210d32:	48 83 c2 06          	add    $0x6,%rdx
  8004210d36:	0f b6 12             	movzbl (%rdx),%edx
  8004210d39:	0f b6 d2             	movzbl %dl,%edx
  8004210d3c:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210d40:	48 09 d0             	or     %rdx,%rax
  8004210d43:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210d47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d4b:	48 83 c0 05          	add    $0x5,%rax
  8004210d4f:	0f b6 00             	movzbl (%rax),%eax
  8004210d52:	0f b6 c0             	movzbl %al,%eax
  8004210d55:	48 c1 e0 10          	shl    $0x10,%rax
  8004210d59:	48 89 c2             	mov    %rax,%rdx
  8004210d5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d60:	48 83 c0 04          	add    $0x4,%rax
  8004210d64:	0f b6 00             	movzbl (%rax),%eax
  8004210d67:	0f b6 c0             	movzbl %al,%eax
  8004210d6a:	48 c1 e0 18          	shl    $0x18,%rax
  8004210d6e:	48 09 d0             	or     %rdx,%rax
  8004210d71:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004210d75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d79:	48 83 c0 03          	add    $0x3,%rax
  8004210d7d:	0f b6 00             	movzbl (%rax),%eax
  8004210d80:	0f b6 c0             	movzbl %al,%eax
  8004210d83:	48 c1 e0 20          	shl    $0x20,%rax
  8004210d87:	48 89 c2             	mov    %rax,%rdx
  8004210d8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d8e:	48 83 c0 02          	add    $0x2,%rax
  8004210d92:	0f b6 00             	movzbl (%rax),%eax
  8004210d95:	0f b6 c0             	movzbl %al,%eax
  8004210d98:	48 c1 e0 28          	shl    $0x28,%rax
  8004210d9c:	48 09 d0             	or     %rdx,%rax
  8004210d9f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004210da3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210da7:	48 83 c0 01          	add    $0x1,%rax
  8004210dab:	0f b6 00             	movzbl (%rax),%eax
  8004210dae:	0f b6 c0             	movzbl %al,%eax
  8004210db1:	48 c1 e0 30          	shl    $0x30,%rax
  8004210db5:	48 89 c2             	mov    %rax,%rdx
  8004210db8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210dbc:	0f b6 00             	movzbl (%rax),%eax
  8004210dbf:	0f b6 c0             	movzbl %al,%eax
  8004210dc2:	48 c1 e0 38          	shl    $0x38,%rax
  8004210dc6:	48 09 d0             	or     %rdx,%rax
  8004210dc9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210dcd:	eb 07                	jmp    8004210dd6 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  8004210dcf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210dd4:	eb 1a                	jmp    8004210df0 <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  8004210dd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210dda:	48 8b 10             	mov    (%rax),%rdx
  8004210ddd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210de0:	48 98                	cltq   
  8004210de2:	48 01 c2             	add    %rax,%rdx
  8004210de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210de9:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210dec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210df0:	c9                   	leaveq 
  8004210df1:	c3                   	retq   

0000008004210df2 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210df2:	55                   	push   %rbp
  8004210df3:	48 89 e5             	mov    %rsp,%rbp
  8004210df6:	48 83 ec 30          	sub    $0x30,%rsp
  8004210dfa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210dfe:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004210e02:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210e09:	00 
	uint8_t b;
	int shift = 0;
  8004210e0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210e11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210e15:	48 8b 10             	mov    (%rax),%rdx
  8004210e18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e1c:	48 01 d0             	add    %rdx,%rax
  8004210e1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e27:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210e2b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210e2f:	0f b6 00             	movzbl (%rax),%eax
  8004210e32:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210e35:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210e39:	83 e0 7f             	and    $0x7f,%eax
  8004210e3c:	89 c2                	mov    %eax,%edx
  8004210e3e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e41:	89 c1                	mov    %eax,%ecx
  8004210e43:	d3 e2                	shl    %cl,%edx
  8004210e45:	89 d0                	mov    %edx,%eax
  8004210e47:	48 98                	cltq   
  8004210e49:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210e4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210e51:	48 8b 00             	mov    (%rax),%rax
  8004210e54:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210e58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210e5c:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210e5f:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210e63:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210e67:	84 c0                	test   %al,%al
  8004210e69:	78 b8                	js     8004210e23 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004210e6b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210e6f:	7f 1f                	jg     8004210e90 <_dwarf_read_sleb128+0x9e>
  8004210e71:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210e75:	83 e0 40             	and    $0x40,%eax
  8004210e78:	85 c0                	test   %eax,%eax
  8004210e7a:	74 14                	je     8004210e90 <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004210e7c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e7f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210e84:	89 c1                	mov    %eax,%ecx
  8004210e86:	d3 e2                	shl    %cl,%edx
  8004210e88:	89 d0                	mov    %edx,%eax
  8004210e8a:	48 98                	cltq   
  8004210e8c:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004210e90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210e94:	c9                   	leaveq 
  8004210e95:	c3                   	retq   

0000008004210e96 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210e96:	55                   	push   %rbp
  8004210e97:	48 89 e5             	mov    %rsp,%rbp
  8004210e9a:	48 83 ec 30          	sub    $0x30,%rsp
  8004210e9e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210ea2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004210ea6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210ead:	00 
	uint8_t b;
	int shift = 0;
  8004210eae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210eb5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210eb9:	48 8b 10             	mov    (%rax),%rdx
  8004210ebc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ec0:	48 01 d0             	add    %rdx,%rax
  8004210ec3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210ec7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ecb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210ecf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210ed3:	0f b6 00             	movzbl (%rax),%eax
  8004210ed6:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210ed9:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210edd:	83 e0 7f             	and    $0x7f,%eax
  8004210ee0:	89 c2                	mov    %eax,%edx
  8004210ee2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210ee5:	89 c1                	mov    %eax,%ecx
  8004210ee7:	d3 e2                	shl    %cl,%edx
  8004210ee9:	89 d0                	mov    %edx,%eax
  8004210eeb:	48 98                	cltq   
  8004210eed:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210ef1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210ef5:	48 8b 00             	mov    (%rax),%rax
  8004210ef8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210efc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210f00:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210f03:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210f07:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210f0b:	84 c0                	test   %al,%al
  8004210f0d:	78 b8                	js     8004210ec7 <_dwarf_read_uleb128+0x31>

	return (ret);
  8004210f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210f13:	c9                   	leaveq 
  8004210f14:	c3                   	retq   

0000008004210f15 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004210f15:	55                   	push   %rbp
  8004210f16:	48 89 e5             	mov    %rsp,%rbp
  8004210f19:	48 83 ec 28          	sub    $0x28,%rsp
  8004210f1d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004210f21:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210f28:	00 
	uint8_t b;
	int shift = 0;
  8004210f29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210f30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f34:	48 8b 00             	mov    (%rax),%rax
  8004210f37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f3f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210f43:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210f47:	0f b6 00             	movzbl (%rax),%eax
  8004210f4a:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210f4d:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210f51:	83 e0 7f             	and    $0x7f,%eax
  8004210f54:	89 c2                	mov    %eax,%edx
  8004210f56:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210f59:	89 c1                	mov    %eax,%ecx
  8004210f5b:	d3 e2                	shl    %cl,%edx
  8004210f5d:	89 d0                	mov    %edx,%eax
  8004210f5f:	48 98                	cltq   
  8004210f61:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210f65:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210f69:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210f6d:	84 c0                	test   %al,%al
  8004210f6f:	78 ca                	js     8004210f3b <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004210f71:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210f75:	7f 1f                	jg     8004210f96 <_dwarf_decode_sleb128+0x81>
  8004210f77:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210f7b:	83 e0 40             	and    $0x40,%eax
  8004210f7e:	85 c0                	test   %eax,%eax
  8004210f80:	74 14                	je     8004210f96 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004210f82:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210f85:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210f8a:	89 c1                	mov    %eax,%ecx
  8004210f8c:	d3 e2                	shl    %cl,%edx
  8004210f8e:	89 d0                	mov    %edx,%eax
  8004210f90:	48 98                	cltq   
  8004210f92:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004210f96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f9a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210f9e:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210fa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210fa5:	c9                   	leaveq 
  8004210fa6:	c3                   	retq   

0000008004210fa7 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004210fa7:	55                   	push   %rbp
  8004210fa8:	48 89 e5             	mov    %rsp,%rbp
  8004210fab:	48 83 ec 28          	sub    $0x28,%rsp
  8004210faf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004210fb3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210fba:	00 
	uint8_t b;
	int shift = 0;
  8004210fbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210fc2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210fc6:	48 8b 00             	mov    (%rax),%rax
  8004210fc9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210fcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fd1:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210fd5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210fd9:	0f b6 00             	movzbl (%rax),%eax
  8004210fdc:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210fdf:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210fe3:	83 e0 7f             	and    $0x7f,%eax
  8004210fe6:	89 c2                	mov    %eax,%edx
  8004210fe8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210feb:	89 c1                	mov    %eax,%ecx
  8004210fed:	d3 e2                	shl    %cl,%edx
  8004210fef:	89 d0                	mov    %edx,%eax
  8004210ff1:	48 98                	cltq   
  8004210ff3:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210ff7:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210ffb:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210fff:	84 c0                	test   %al,%al
  8004211001:	78 ca                	js     8004210fcd <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004211003:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211007:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421100b:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421100e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211012:	c9                   	leaveq 
  8004211013:	c3                   	retq   

0000008004211014 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004211014:	55                   	push   %rbp
  8004211015:	48 89 e5             	mov    %rsp,%rbp
  8004211018:	48 83 ec 28          	sub    $0x28,%rsp
  800421101c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211020:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211024:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004211028:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421102c:	48 8b 10             	mov    (%rax),%rdx
  800421102f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211033:	48 01 d0             	add    %rdx,%rax
  8004211036:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421103a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421103e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211042:	eb 17                	jmp    800421105b <_dwarf_read_string+0x47>
		src++;
  8004211044:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211049:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421104d:	48 8b 00             	mov    (%rax),%rax
  8004211050:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211054:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211058:	48 89 10             	mov    %rdx,(%rax)
	while (*src != '\0' && *offsetp < size) {
  800421105b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421105f:	0f b6 00             	movzbl (%rax),%eax
  8004211062:	84 c0                	test   %al,%al
  8004211064:	74 0d                	je     8004211073 <_dwarf_read_string+0x5f>
  8004211066:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421106a:	48 8b 00             	mov    (%rax),%rax
  800421106d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211071:	72 d1                	jb     8004211044 <_dwarf_read_string+0x30>
	}

	if (*src == '\0' && *offsetp < size)
  8004211073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211077:	0f b6 00             	movzbl (%rax),%eax
  800421107a:	84 c0                	test   %al,%al
  800421107c:	75 1f                	jne    800421109d <_dwarf_read_string+0x89>
  800421107e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211082:	48 8b 00             	mov    (%rax),%rax
  8004211085:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211089:	73 12                	jae    800421109d <_dwarf_read_string+0x89>
		(*offsetp)++;
  800421108b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421108f:	48 8b 00             	mov    (%rax),%rax
  8004211092:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211096:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421109a:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421109d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  80042110a1:	c9                   	leaveq 
  80042110a2:	c3                   	retq   

00000080042110a3 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  80042110a3:	55                   	push   %rbp
  80042110a4:	48 89 e5             	mov    %rsp,%rbp
  80042110a7:	48 83 ec 28          	sub    $0x28,%rsp
  80042110ab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042110af:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042110b3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  80042110b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110bb:	48 8b 10             	mov    (%rax),%rdx
  80042110be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110c2:	48 01 d0             	add    %rdx,%rax
  80042110c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042110c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042110cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  80042110d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110d5:	48 8b 10             	mov    (%rax),%rdx
  80042110d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110dc:	48 01 c2             	add    %rax,%rdx
  80042110df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110e3:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042110e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  80042110ea:	c9                   	leaveq 
  80042110eb:	c3                   	retq   

00000080042110ec <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  80042110ec:	55                   	push   %rbp
  80042110ed:	48 89 e5             	mov    %rsp,%rbp
  80042110f0:	48 83 ec 20          	sub    $0x20,%rsp
  80042110f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  80042110f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211100:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211105:	75 35                	jne    800421113c <_dwarf_elf_get_byte_order+0x50>
  8004211107:	48 b9 20 b1 21 04 80 	movabs $0x800421b120,%rcx
  800421110e:	00 00 00 
  8004211111:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004211118:	00 00 00 
  800421111b:	be 29 01 00 00       	mov    $0x129,%esi
  8004211120:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004211127:	00 00 00 
  800421112a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421112f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211136:	00 00 00 
  8004211139:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  800421113c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211140:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004211144:	0f b6 c0             	movzbl %al,%eax
  8004211147:	83 f8 02             	cmp    $0x2,%eax
  800421114a:	75 07                	jne    8004211153 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  800421114c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211151:	eb 05                	jmp    8004211158 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004211153:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004211158:	c9                   	leaveq 
  8004211159:	c3                   	retq   

000000800421115a <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  800421115a:	55                   	push   %rbp
  800421115b:	48 89 e5             	mov    %rsp,%rbp
  800421115e:	48 83 ec 20          	sub    $0x20,%rsp
  8004211162:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004211166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421116a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  800421116e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211173:	75 35                	jne    80042111aa <_dwarf_elf_get_pointer_size+0x50>
  8004211175:	48 b9 20 b1 21 04 80 	movabs $0x800421b120,%rcx
  800421117c:	00 00 00 
  800421117f:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004211186:	00 00 00 
  8004211189:	be 3f 01 00 00       	mov    $0x13f,%esi
  800421118e:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004211195:	00 00 00 
  8004211198:	b8 00 00 00 00       	mov    $0x0,%eax
  800421119d:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042111a4:	00 00 00 
  80042111a7:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  80042111aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042111ae:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  80042111b2:	3c 01                	cmp    $0x1,%al
  80042111b4:	75 07                	jne    80042111bd <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  80042111b6:	b8 04 00 00 00       	mov    $0x4,%eax
  80042111bb:	eb 05                	jmp    80042111c2 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  80042111bd:	b8 08 00 00 00       	mov    $0x8,%eax
}
  80042111c2:	c9                   	leaveq 
  80042111c3:	c3                   	retq   

00000080042111c4 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  80042111c4:	55                   	push   %rbp
  80042111c5:	48 89 e5             	mov    %rsp,%rbp
  80042111c8:	53                   	push   %rbx
  80042111c9:	48 83 ec 18          	sub    $0x18,%rsp
  80042111cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042111d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  80042111d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042111d9:	ba 60 00 00 00       	mov    $0x60,%edx
  80042111de:	be 00 00 00 00       	mov    $0x0,%esi
  80042111e3:	48 89 c7             	mov    %rax,%rdi
  80042111e6:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042111ed:	00 00 00 
  80042111f0:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  80042111f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042111f6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  80042111fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211201:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004211208:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004211209:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421120d:	48 89 c7             	mov    %rax,%rdi
  8004211210:	48 b8 5a 11 21 04 80 	movabs $0x800421115a,%rax
  8004211217:	00 00 00 
  800421121a:	ff d0                	callq  *%rax
  800421121c:	0f b6 d0             	movzbl %al,%edx
  800421121f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211223:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211226:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421122a:	48 89 c7             	mov    %rax,%rdi
  800421122d:	48 b8 ec 10 21 04 80 	movabs $0x80042110ec,%rax
  8004211234:	00 00 00 
  8004211237:	ff d0                	callq  *%rax
  8004211239:	85 c0                	test   %eax,%eax
  800421123b:	75 26                	jne    8004211263 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  800421123d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211241:	48 b9 91 0a 21 04 80 	movabs $0x8004210a91,%rcx
  8004211248:	00 00 00 
  800421124b:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  800421124f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211253:	48 bb 43 0c 21 04 80 	movabs $0x8004210c43,%rbx
  800421125a:	00 00 00 
  800421125d:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211261:	eb 24                	jmp    8004211287 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211267:	48 b9 44 08 21 04 80 	movabs $0x8004210844,%rcx
  800421126e:	00 00 00 
  8004211271:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211275:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211279:	48 be 70 09 21 04 80 	movabs $0x8004210970,%rsi
  8004211280:	00 00 00 
  8004211283:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211287:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421128b:	48 89 c7             	mov    %rax,%rdi
  800421128e:	48 b8 91 27 21 04 80 	movabs $0x8004212791,%rax
  8004211295:	00 00 00 
  8004211298:	ff d0                	callq  *%rax
	return 0;
  800421129a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421129f:	48 83 c4 18          	add    $0x18,%rsp
  80042112a3:	5b                   	pop    %rbx
  80042112a4:	5d                   	pop    %rbp
  80042112a5:	c3                   	retq   

00000080042112a6 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  80042112a6:	55                   	push   %rbp
  80042112a7:	48 89 e5             	mov    %rsp,%rbp
  80042112aa:	48 83 ec 20          	sub    $0x20,%rsp
  80042112ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042112b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  80042112b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112ba:	48 8b 10             	mov    (%rax),%rdx
  80042112bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112c1:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042112c5:	48 39 c2             	cmp    %rax,%rdx
  80042112c8:	76 0a                	jbe    80042112d4 <_get_next_cu+0x2e>
		return -1;
  80042112ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042112cf:	e9 6b 01 00 00       	jmpq   800421143f <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  80042112d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112d8:	48 8b 00             	mov    (%rax),%rax
  80042112db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  80042112df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042112e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042112e7:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  80042112eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112ef:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042112f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042112f7:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042112fb:	48 89 d1             	mov    %rdx,%rcx
  80042112fe:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211302:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211307:	48 89 cf             	mov    %rcx,%rdi
  800421130a:	ff d0                	callq  *%rax
  800421130c:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  800421130f:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004211313:	75 2a                	jne    800421133f <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004211315:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211319:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421131d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211321:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211325:	48 89 d1             	mov    %rdx,%rcx
  8004211328:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800421132c:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211331:	48 89 cf             	mov    %rcx,%rdi
  8004211334:	ff d0                	callq  *%rax
  8004211336:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211339:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  800421133d:	eb 04                	jmp    8004211343 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  800421133f:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004211343:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211347:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  800421134b:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  800421134e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211351:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211355:	48 01 c2             	add    %rax,%rdx
  8004211358:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421135c:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  800421135f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211363:	48 8b 10             	mov    (%rax),%rdx
  8004211366:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421136a:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  800421136e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211371:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211375:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211378:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  800421137c:	75 07                	jne    8004211385 <_get_next_cu+0xdf>
  800421137e:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211383:	eb 05                	jmp    800421138a <_get_next_cu+0xe4>
  8004211385:	b8 0c 00 00 00       	mov    $0xc,%eax
  800421138a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421138e:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211391:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211395:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211399:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421139d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042113a1:	48 89 d1             	mov    %rdx,%rcx
  80042113a4:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042113a8:	ba 02 00 00 00       	mov    $0x2,%edx
  80042113ad:	48 89 cf             	mov    %rcx,%rdi
  80042113b0:	ff d0                	callq  *%rax
  80042113b2:	89 c2                	mov    %eax,%edx
  80042113b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042113b8:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  80042113bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113c0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042113c4:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  80042113c8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042113cc:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  80042113d0:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042113d4:	48 89 cf             	mov    %rcx,%rdi
  80042113d7:	ff d0                	callq  *%rax
  80042113d9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042113dd:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  80042113e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113e5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042113e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042113ed:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042113f1:	48 89 d1             	mov    %rdx,%rcx
  80042113f4:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042113f8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042113fd:	48 89 cf             	mov    %rcx,%rdi
  8004211400:	ff d0                	callq  *%rax
  8004211402:	89 c2                	mov    %eax,%edx
  8004211404:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211408:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  800421140b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421140f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211413:	66 83 f8 01          	cmp    $0x1,%ax
  8004211417:	76 0e                	jbe    8004211427 <_get_next_cu+0x181>
  8004211419:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421141d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211421:	66 83 f8 04          	cmp    $0x4,%ax
  8004211425:	76 07                	jbe    800421142e <_get_next_cu+0x188>
		return -1;
  8004211427:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421142c:	eb 11                	jmp    800421143f <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  800421142e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211432:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211436:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  800421143a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421143f:	c9                   	leaveq 
  8004211440:	c3                   	retq   

0000008004211441 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  8004211441:	55                   	push   %rbp
  8004211442:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211445:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211449:	0f b6 c8             	movzbl %al,%ecx
  800421144c:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  8004211450:	0f b7 d0             	movzwl %ax,%edx
  8004211453:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211457:	48 89 c6             	mov    %rax,%rsi
  800421145a:	48 bf 52 b1 21 04 80 	movabs $0x800421b152,%rdi
  8004211461:	00 00 00 
  8004211464:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211469:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  8004211470:	00 00 00 
  8004211473:	41 ff d0             	callq  *%r8
}
  8004211476:	5d                   	pop    %rbp
  8004211477:	c3                   	retq   

0000008004211478 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211478:	55                   	push   %rbp
  8004211479:	48 89 e5             	mov    %rsp,%rbp
  800421147c:	48 83 ec 60          	sub    $0x60,%rsp
  8004211480:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211484:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211488:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  800421148c:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004211490:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211495:	75 35                	jne    80042114cc <_dwarf_abbrev_parse+0x54>
  8004211497:	48 b9 61 b1 21 04 80 	movabs $0x800421b161,%rcx
  800421149e:	00 00 00 
  80042114a1:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  80042114a8:	00 00 00 
  80042114ab:	be a4 01 00 00       	mov    $0x1a4,%esi
  80042114b0:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  80042114b7:	00 00 00 
  80042114ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042114bf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042114c6:	00 00 00 
  80042114c9:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  80042114cc:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  80042114d1:	75 35                	jne    8004211508 <_dwarf_abbrev_parse+0x90>
  80042114d3:	48 b9 6d b1 21 04 80 	movabs $0x800421b16d,%rcx
  80042114da:	00 00 00 
  80042114dd:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  80042114e4:	00 00 00 
  80042114e7:	be a5 01 00 00       	mov    $0x1a5,%esi
  80042114ec:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  80042114f3:	00 00 00 
  80042114f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042114fb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211502:	00 00 00 
  8004211505:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211508:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421150c:	48 8b 10             	mov    (%rax),%rdx
  800421150f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211513:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211517:	48 39 c2             	cmp    %rax,%rdx
  800421151a:	72 0a                	jb     8004211526 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  800421151c:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211521:	e9 d3 01 00 00       	jmpq   80042116f9 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211526:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421152a:	48 8b 00             	mov    (%rax),%rax
  800421152d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  8004211531:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211535:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211539:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421153d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211541:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211545:	48 89 d6             	mov    %rdx,%rsi
  8004211548:	48 89 c7             	mov    %rax,%rdi
  800421154b:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004211552:	00 00 00 
  8004211555:	ff d0                	callq  *%rax
  8004211557:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  800421155b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211560:	75 15                	jne    8004211577 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004211562:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211566:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  800421156d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211572:	e9 82 01 00 00       	jmpq   80042116f9 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211577:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421157b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421157f:	48 89 d6             	mov    %rdx,%rsi
  8004211582:	48 89 c7             	mov    %rax,%rdi
  8004211585:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  800421158c:	00 00 00 
  800421158f:	ff d0                	callq  *%rax
  8004211591:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211595:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211599:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421159d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  80042115a1:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042115a5:	ba 01 00 00 00       	mov    $0x1,%edx
  80042115aa:	48 89 cf             	mov    %rcx,%rdi
  80042115ad:	ff d0                	callq  *%rax
  80042115af:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  80042115b2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042115b6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042115ba:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  80042115bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042115c1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042115c5:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  80042115c9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042115cd:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  80042115d1:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  80042115d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042115d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042115dc:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  80042115e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042115e4:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  80042115eb:	00 
	abp->ab_atnum    = 0;
  80042115ec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042115f0:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  80042115f7:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  80042115f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042115fc:	48 8b 00             	mov    (%rax),%rax
  80042115ff:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211603:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211607:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421160b:	48 89 d6             	mov    %rdx,%rsi
  800421160e:	48 89 c7             	mov    %rax,%rdi
  8004211611:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004211618:	00 00 00 
  800421161b:	ff d0                	callq  *%rax
  800421161d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211621:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211625:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211629:	48 89 d6             	mov    %rdx,%rsi
  800421162c:	48 89 c7             	mov    %rax,%rdi
  800421162f:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004211636:	00 00 00 
  8004211639:	ff d0                	callq  *%rax
  800421163b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  800421163f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211644:	0f 84 89 00 00 00    	je     80042116d3 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  800421164a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421164e:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211652:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211656:	48 89 d0             	mov    %rdx,%rax
  8004211659:	48 01 c0             	add    %rax,%rax
  800421165c:	48 01 d0             	add    %rdx,%rax
  800421165f:	48 c1 e0 03          	shl    $0x3,%rax
  8004211663:	48 01 c8             	add    %rcx,%rax
  8004211666:	48 8d 50 30          	lea    0x30(%rax),%rdx
  800421166a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421166e:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  8004211671:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211675:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211679:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  800421167d:	48 89 d0             	mov    %rdx,%rax
  8004211680:	48 01 c0             	add    %rax,%rax
  8004211683:	48 01 d0             	add    %rdx,%rax
  8004211686:	48 c1 e0 03          	shl    $0x3,%rax
  800421168a:	48 01 c8             	add    %rcx,%rax
  800421168d:	48 8d 50 38          	lea    0x38(%rax),%rdx
  8004211691:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211695:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211698:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421169c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042116a0:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042116a4:	48 89 d0             	mov    %rdx,%rax
  80042116a7:	48 01 c0             	add    %rax,%rax
  80042116aa:	48 01 d0             	add    %rdx,%rax
  80042116ad:	48 c1 e0 03          	shl    $0x3,%rax
  80042116b1:	48 01 c8             	add    %rcx,%rax
  80042116b4:	48 8d 50 40          	lea    0x40(%rax),%rdx
  80042116b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042116bc:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  80042116bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042116c3:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042116c7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042116cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042116cf:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  80042116d3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042116d8:	0f 85 1a ff ff ff    	jne    80042115f8 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  80042116de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042116e2:	48 8b 00             	mov    (%rax),%rax
  80042116e5:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  80042116e9:	48 89 c2             	mov    %rax,%rdx
  80042116ec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042116f0:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  80042116f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042116f9:	c9                   	leaveq 
  80042116fa:	c3                   	retq   

00000080042116fb <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  80042116fb:	55                   	push   %rbp
  80042116fc:	48 89 e5             	mov    %rsp,%rbp
  80042116ff:	48 83 ec 70          	sub    $0x70,%rsp
  8004211703:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211707:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421170b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  800421170f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211714:	75 0a                	jne    8004211720 <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004211716:	b8 04 00 00 00       	mov    $0x4,%eax
  800421171b:	e9 0a 01 00 00       	jmpq   800421182a <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  8004211720:	48 bf 78 b1 21 04 80 	movabs $0x800421b178,%rdi
  8004211727:	00 00 00 
  800421172a:	48 b8 5b 5a 21 04 80 	movabs $0x8004215a5b,%rax
  8004211731:	00 00 00 
  8004211734:	ff d0                	callq  *%rax
  8004211736:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  800421173a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421173f:	75 35                	jne    8004211776 <_dwarf_abbrev_find+0x7b>
  8004211741:	48 b9 6d b1 21 04 80 	movabs $0x800421b16d,%rcx
  8004211748:	00 00 00 
  800421174b:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004211752:	00 00 00 
  8004211755:	be e5 01 00 00       	mov    $0x1e5,%esi
  800421175a:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004211761:	00 00 00 
  8004211764:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211769:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211770:	00 00 00 
  8004211773:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211776:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421177a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  800421177e:	e9 8d 00 00 00       	jmpq   8004211810 <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004211783:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211787:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421178b:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  800421178f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211793:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004211797:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421179b:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  800421179f:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  80042117a4:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  80042117a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042117ad:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  80042117b1:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042117b6:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  80042117ba:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  80042117bf:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  80042117c3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  80042117c8:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  80042117cc:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  80042117d1:	48 89 c7             	mov    %rax,%rdi
  80042117d4:	48 b8 78 14 21 04 80 	movabs $0x8004211478,%rax
  80042117db:	00 00 00 
  80042117de:	ff d0                	callq  *%rax
  80042117e0:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  80042117e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042117e7:	74 05                	je     80042117ee <_dwarf_abbrev_find+0xf3>
			return (ret);
  80042117e9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042117ec:	eb 3c                	jmp    800421182a <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  80042117ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042117f2:	48 8b 00             	mov    (%rax),%rax
  80042117f5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042117f9:	75 07                	jne    8004211802 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  80042117fb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211800:	eb 28                	jmp    800421182a <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004211802:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211806:	48 8b 00             	mov    (%rax),%rax
  8004211809:	48 85 c0             	test   %rax,%rax
  800421180c:	75 02                	jne    8004211810 <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  800421180e:	eb 15                	jmp    8004211825 <_dwarf_abbrev_find+0x12a>
	while (offset < ds->ds_size) {
  8004211810:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211814:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211818:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421181c:	48 39 c2             	cmp    %rax,%rdx
  800421181f:	0f 87 5e ff ff ff    	ja     8004211783 <_dwarf_abbrev_find+0x88>
		}
	}

	return DW_DLE_NO_ENTRY;
  8004211825:	b8 04 00 00 00       	mov    $0x4,%eax
}
  800421182a:	c9                   	leaveq 
  800421182b:	c3                   	retq   

000000800421182c <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  800421182c:	55                   	push   %rbp
  800421182d:	48 89 e5             	mov    %rsp,%rbp
  8004211830:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  8004211837:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800421183e:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004211845:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  800421184c:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  8004211853:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  800421185a:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  8004211861:	48 bf 86 b1 21 04 80 	movabs $0x800421b186,%rdi
  8004211868:	00 00 00 
  800421186b:	48 b8 5b 5a 21 04 80 	movabs $0x8004215a5b,%rax
  8004211872:	00 00 00 
  8004211875:	ff d0                	callq  *%rax
  8004211877:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  800421187b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421187f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211883:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  8004211887:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800421188e:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004211892:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  8004211895:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  800421189c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042118a3:	ba 60 00 00 00       	mov    $0x60,%edx
  80042118a8:	be 00 00 00 00       	mov    $0x0,%esi
  80042118ad:	48 89 c7             	mov    %rax,%rdi
  80042118b0:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042118b7:	00 00 00 
  80042118ba:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  80042118bc:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042118c3:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  80042118ca:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042118d1:	48 8b 00             	mov    (%rax),%rax
  80042118d4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  80042118d8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042118df:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042118e3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  80042118e7:	8b 45 10             	mov    0x10(%rbp),%eax
  80042118ea:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  80042118ed:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  80042118f4:	00 

	switch (form) {
  80042118f5:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  80042118fc:	20 
  80042118fd:	0f 87 82 04 00 00    	ja     8004211d85 <_dwarf_attr_init+0x559>
  8004211903:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421190a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004211911:	00 
  8004211912:	48 b8 b0 b1 21 04 80 	movabs $0x800421b1b0,%rax
  8004211919:	00 00 00 
  800421191c:	48 01 d0             	add    %rdx,%rax
  800421191f:	48 8b 00             	mov    (%rax),%rax
  8004211922:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004211924:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421192b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421192f:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211936:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800421193a:	0f b6 d2             	movzbl %dl,%edx
  800421193d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211944:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211948:	48 89 cf             	mov    %rcx,%rdi
  800421194b:	ff d0                	callq  *%rax
  800421194d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211951:	e9 37 04 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004211956:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421195d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211961:	48 89 d6             	mov    %rdx,%rsi
  8004211964:	48 89 c7             	mov    %rax,%rdi
  8004211967:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  800421196e:	00 00 00 
  8004211971:	ff d0                	callq  *%rax
  8004211973:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211977:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421197b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211982:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211986:	48 89 ce             	mov    %rcx,%rsi
  8004211989:	48 89 c7             	mov    %rax,%rdi
  800421198c:	48 b8 a3 10 21 04 80 	movabs $0x80042110a3,%rax
  8004211993:	00 00 00 
  8004211996:	ff d0                	callq  *%rax
  8004211998:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421199c:	e9 ec 03 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042119a1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042119a8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042119ac:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042119b3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042119b7:	ba 01 00 00 00       	mov    $0x1,%edx
  80042119bc:	48 89 cf             	mov    %rcx,%rdi
  80042119bf:	ff d0                	callq  *%rax
  80042119c1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042119c5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042119c9:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042119d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119d4:	48 89 ce             	mov    %rcx,%rsi
  80042119d7:	48 89 c7             	mov    %rax,%rdi
  80042119da:	48 b8 a3 10 21 04 80 	movabs $0x80042110a3,%rax
  80042119e1:	00 00 00 
  80042119e4:	ff d0                	callq  *%rax
  80042119e6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042119ea:	e9 9e 03 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042119ef:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042119f6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042119fa:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211a01:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211a05:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211a0a:	48 89 cf             	mov    %rcx,%rdi
  8004211a0d:	ff d0                	callq  *%rax
  8004211a0f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211a13:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211a17:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211a1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a22:	48 89 ce             	mov    %rcx,%rsi
  8004211a25:	48 89 c7             	mov    %rax,%rdi
  8004211a28:	48 b8 a3 10 21 04 80 	movabs $0x80042110a3,%rax
  8004211a2f:	00 00 00 
  8004211a32:	ff d0                	callq  *%rax
  8004211a34:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211a38:	e9 50 03 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211a3d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211a44:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211a48:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211a4f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211a53:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211a58:	48 89 cf             	mov    %rcx,%rdi
  8004211a5b:	ff d0                	callq  *%rax
  8004211a5d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211a61:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211a65:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211a6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a70:	48 89 ce             	mov    %rcx,%rsi
  8004211a73:	48 89 c7             	mov    %rax,%rdi
  8004211a76:	48 b8 a3 10 21 04 80 	movabs $0x80042110a3,%rax
  8004211a7d:	00 00 00 
  8004211a80:	ff d0                	callq  *%rax
  8004211a82:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211a86:	e9 02 03 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004211a8b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211a92:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211a96:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211a9d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211aa1:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211aa6:	48 89 cf             	mov    %rcx,%rdi
  8004211aa9:	ff d0                	callq  *%rax
  8004211aab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211aaf:	e9 d9 02 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004211ab4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211abb:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211abf:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211ac6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211aca:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211acf:	48 89 cf             	mov    %rcx,%rdi
  8004211ad2:	ff d0                	callq  *%rax
  8004211ad4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211ad8:	e9 b0 02 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211add:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211ae4:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211ae8:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211aef:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211af3:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211af8:	48 89 cf             	mov    %rcx,%rdi
  8004211afb:	ff d0                	callq  *%rax
  8004211afd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211b01:	e9 87 02 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  8004211b06:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211b0d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211b11:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211b18:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211b1c:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211b21:	48 89 cf             	mov    %rcx,%rdi
  8004211b24:	ff d0                	callq  *%rax
  8004211b26:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211b2a:	e9 5e 02 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  8004211b2f:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211b36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b3a:	48 89 d6             	mov    %rdx,%rsi
  8004211b3d:	48 89 c7             	mov    %rax,%rdi
  8004211b40:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004211b47:	00 00 00 
  8004211b4a:	ff d0                	callq  *%rax
  8004211b4c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  8004211b53:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004211b5a:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  8004211b61:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211b68:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211b6f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211b76:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211b7d:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004211b84:	4d 89 c1             	mov    %r8,%r9
  8004211b87:	49 89 f8             	mov    %rdi,%r8
  8004211b8a:	48 89 c7             	mov    %rax,%rdi
  8004211b8d:	48 b8 2c 18 21 04 80 	movabs $0x800421182c,%rax
  8004211b94:	00 00 00 
  8004211b97:	ff d0                	callq  *%rax
  8004211b99:	e9 1d 03 00 00       	jmpq   8004211ebb <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  8004211b9e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211ba5:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211ba9:	66 83 f8 02          	cmp    $0x2,%ax
  8004211bad:	75 2f                	jne    8004211bde <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004211baf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211bb6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211bba:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211bc1:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004211bc5:	0f b6 d2             	movzbl %dl,%edx
  8004211bc8:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211bcf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211bd3:	48 89 cf             	mov    %rcx,%rdi
  8004211bd6:	ff d0                	callq  *%rax
  8004211bd8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004211bdc:	eb 39                	jmp    8004211c17 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  8004211bde:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211be5:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211be9:	66 83 f8 03          	cmp    $0x3,%ax
  8004211bed:	75 28                	jne    8004211c17 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004211bef:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211bf6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211bfa:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211bfe:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211c05:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211c09:	48 89 cf             	mov    %rcx,%rdi
  8004211c0c:	ff d0                	callq  *%rax
  8004211c0e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211c12:	e9 76 01 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
  8004211c17:	e9 71 01 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004211c1c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211c23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c27:	48 89 d6             	mov    %rdx,%rsi
  8004211c2a:	48 89 c7             	mov    %rax,%rdi
  8004211c2d:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004211c34:	00 00 00 
  8004211c37:	ff d0                	callq  *%rax
  8004211c39:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211c3d:	e9 4b 01 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  8004211c42:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211c49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c4d:	48 89 d6             	mov    %rdx,%rsi
  8004211c50:	48 89 c7             	mov    %rax,%rdi
  8004211c53:	48 b8 f2 0d 21 04 80 	movabs $0x8004210df2,%rax
  8004211c5a:	00 00 00 
  8004211c5d:	ff d0                	callq  *%rax
  8004211c5f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211c63:	e9 25 01 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004211c68:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211c6f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211c73:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211c77:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211c7e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211c82:	48 89 cf             	mov    %rcx,%rdi
  8004211c85:	ff d0                	callq  *%rax
  8004211c87:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211c8b:	e9 fd 00 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  8004211c90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211c94:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004211c98:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211c9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ca3:	48 89 ce             	mov    %rcx,%rsi
  8004211ca6:	48 89 c7             	mov    %rax,%rdi
  8004211ca9:	48 b8 14 10 21 04 80 	movabs $0x8004211014,%rax
  8004211cb0:	00 00 00 
  8004211cb3:	ff d0                	callq  *%rax
  8004211cb5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211cb9:	e9 cf 00 00 00       	jmpq   8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004211cbe:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211cc5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211cc9:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211ccd:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211cd4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211cd8:	48 89 cf             	mov    %rcx,%rdi
  8004211cdb:	ff d0                	callq  *%rax
  8004211cdd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  8004211ce1:	48 bf 92 b1 21 04 80 	movabs $0x800421b192,%rdi
  8004211ce8:	00 00 00 
  8004211ceb:	48 b8 5b 5a 21 04 80 	movabs $0x8004215a5b,%rax
  8004211cf2:	00 00 00 
  8004211cf5:	ff d0                	callq  *%rax
  8004211cf7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  8004211cfb:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211d00:	75 35                	jne    8004211d37 <_dwarf_attr_init+0x50b>
  8004211d02:	48 b9 9d b1 21 04 80 	movabs $0x800421b19d,%rcx
  8004211d09:	00 00 00 
  8004211d0c:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004211d13:	00 00 00 
  8004211d16:	be 51 02 00 00       	mov    $0x251,%esi
  8004211d1b:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004211d22:	00 00 00 
  8004211d25:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d2a:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211d31:	00 00 00 
  8004211d34:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  8004211d37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211d3b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004211d3f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004211d43:	48 01 d0             	add    %rdx,%rax
  8004211d46:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211d4a:	eb 41                	jmp    8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004211d4c:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004211d53:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004211d54:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211d58:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d63:	48 89 ce             	mov    %rcx,%rsi
  8004211d66:	48 89 c7             	mov    %rax,%rdi
  8004211d69:	48 b8 a3 10 21 04 80 	movabs $0x80042110a3,%rax
  8004211d70:	00 00 00 
  8004211d73:	ff d0                	callq  *%rax
  8004211d75:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211d79:	eb 12                	jmp    8004211d8d <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  8004211d7b:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004211d82:	00 
		break;
  8004211d83:	eb 08                	jmp    8004211d8d <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004211d85:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  8004211d8c:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  8004211d8d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211d91:	0f 85 21 01 00 00    	jne    8004211eb8 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  8004211d97:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  8004211d9e:	09 
  8004211d9f:	74 1e                	je     8004211dbf <_dwarf_attr_init+0x593>
  8004211da1:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  8004211da8:	0a 
  8004211da9:	74 14                	je     8004211dbf <_dwarf_attr_init+0x593>
  8004211dab:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  8004211db2:	03 
  8004211db3:	74 0a                	je     8004211dbf <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  8004211db5:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  8004211dbc:	04 
  8004211dbd:	75 10                	jne    8004211dcf <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  8004211dbf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004211dc3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  8004211dc7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211dcb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  8004211dcf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004211dd3:	48 83 f8 03          	cmp    $0x3,%rax
  8004211dd7:	75 39                	jne    8004211e12 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  8004211dd9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211ddd:	48 83 f8 08          	cmp    $0x8,%rax
  8004211de1:	74 1c                	je     8004211dff <_dwarf_attr_init+0x5d3>
  8004211de3:	48 83 f8 0e          	cmp    $0xe,%rax
  8004211de7:	74 02                	je     8004211deb <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  8004211de9:	eb 27                	jmp    8004211e12 <_dwarf_attr_init+0x5e6>
				ret_die->die_name = atref.u[1].s;
  8004211deb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211def:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211df6:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211dfd:	eb 13                	jmp    8004211e12 <_dwarf_attr_init+0x5e6>
				ret_die->die_name = atref.u[0].s;
  8004211dff:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211e03:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211e0a:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211e11:	90                   	nop
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004211e12:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211e19:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211e20:	8d 48 01             	lea    0x1(%rax),%ecx
  8004211e23:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004211e2a:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004211e30:	0f b6 c0             	movzbl %al,%eax
  8004211e33:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211e3a:	48 63 d0             	movslq %eax,%rdx
  8004211e3d:	48 89 d0             	mov    %rdx,%rax
  8004211e40:	48 01 c0             	add    %rax,%rax
  8004211e43:	48 01 d0             	add    %rdx,%rax
  8004211e46:	48 c1 e0 05          	shl    $0x5,%rax
  8004211e4a:	48 01 c8             	add    %rcx,%rax
  8004211e4d:	48 05 70 03 00 00    	add    $0x370,%rax
  8004211e53:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004211e5a:	48 89 10             	mov    %rdx,(%rax)
  8004211e5d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004211e64:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004211e68:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004211e6c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004211e70:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004211e74:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004211e78:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004211e7c:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004211e80:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211e84:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004211e88:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211e8c:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004211e90:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004211e94:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004211e98:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211e9c:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004211ea0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004211ea4:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004211ea8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004211eac:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004211eb0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211eb4:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004211eb8:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004211ebb:	c9                   	leaveq 
  8004211ebc:	c3                   	retq   

0000008004211ebd <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004211ebd:	55                   	push   %rbp
  8004211ebe:	48 89 e5             	mov    %rsp,%rbp
  8004211ec1:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  8004211ec8:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004211ecf:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004211ed6:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004211edd:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004211ee3:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004211eea:	00 
  8004211eeb:	75 35                	jne    8004211f22 <dwarf_search_die_within_cu+0x65>
  8004211eed:	48 b9 b8 b2 21 04 80 	movabs $0x800421b2b8,%rcx
  8004211ef4:	00 00 00 
  8004211ef7:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004211efe:	00 00 00 
  8004211f01:	be 86 02 00 00       	mov    $0x286,%esi
  8004211f06:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004211f0d:	00 00 00 
  8004211f10:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f15:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211f1c:	00 00 00 
  8004211f1f:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004211f22:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004211f29:	00 
  8004211f2a:	75 35                	jne    8004211f61 <dwarf_search_die_within_cu+0xa4>
  8004211f2c:	48 b9 bc b2 21 04 80 	movabs $0x800421b2bc,%rcx
  8004211f33:	00 00 00 
  8004211f36:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004211f3d:	00 00 00 
  8004211f40:	be 88 02 00 00       	mov    $0x288,%esi
  8004211f45:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004211f4c:	00 00 00 
  8004211f4f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f54:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004211f5b:	00 00 00 
  8004211f5e:	41 ff d0             	callq  *%r8

	level = 1;
  8004211f61:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211f68:	e9 17 02 00 00       	jmpq   8004212184 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004211f6d:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211f74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004211f78:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211f7f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211f83:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004211f8a:	48 89 d6             	mov    %rdx,%rsi
  8004211f8d:	48 89 c7             	mov    %rax,%rdi
  8004211f90:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004211f97:	00 00 00 
  8004211f9a:	ff d0                	callq  *%rax
  8004211f9c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004211fa0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211fa5:	75 22                	jne    8004211fc9 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004211fa7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211fab:	74 09                	je     8004211fb6 <dwarf_search_die_within_cu+0xf9>
  8004211fad:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211fb4:	75 0a                	jne    8004211fc0 <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004211fb6:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211fbb:	e9 f4 01 00 00       	jmpq   80042121b4 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004211fc0:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004211fc4:	e9 bb 01 00 00       	jmpq   8004212184 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004211fc9:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211fd0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211fd4:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211fdb:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004211fdf:	48 89 34 24          	mov    %rsi,(%rsp)
  8004211fe3:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004211fe7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004211fec:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004211ff0:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004211ff5:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004211ff9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004211ffe:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004212002:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004212007:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  800421200b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004212010:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004212014:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212019:	48 89 ce             	mov    %rcx,%rsi
  800421201c:	48 89 c7             	mov    %rax,%rdi
  800421201f:	48 b8 fb 16 21 04 80 	movabs $0x80042116fb,%rax
  8004212026:	00 00 00 
  8004212029:	ff d0                	callq  *%rax
  800421202b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421202e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212032:	74 08                	je     800421203c <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004212034:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212037:	e9 78 01 00 00       	jmpq   80042121b4 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  800421203c:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212043:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212047:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  800421204a:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212051:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212055:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212059:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212060:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004212064:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  800421206b:	b8 66 00 00 00       	mov    $0x66,%eax
  8004212070:	48 89 d6             	mov    %rdx,%rsi
  8004212073:	48 89 c1             	mov    %rax,%rcx
  8004212076:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212079:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212080:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004212087:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  800421208e:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212095:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212099:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042120a0:	e9 8e 00 00 00       	jmpq   8004212133 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  80042120a5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042120a8:	48 63 d0             	movslq %eax,%rdx
  80042120ab:	48 89 d0             	mov    %rdx,%rax
  80042120ae:	48 01 c0             	add    %rax,%rax
  80042120b1:	48 01 d0             	add    %rdx,%rax
  80042120b4:	48 c1 e0 03          	shl    $0x3,%rax
  80042120b8:	48 01 e8             	add    %rbp,%rax
  80042120bb:	48 2d 18 03 00 00    	sub    $0x318,%rax
  80042120c1:	48 8b 08             	mov    (%rax),%rcx
  80042120c4:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  80042120cb:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042120ce:	48 63 d0             	movslq %eax,%rdx
  80042120d1:	48 89 d0             	mov    %rdx,%rax
  80042120d4:	48 01 c0             	add    %rax,%rax
  80042120d7:	48 01 d0             	add    %rdx,%rax
  80042120da:	48 c1 e0 03          	shl    $0x3,%rax
  80042120de:	48 83 c0 30          	add    $0x30,%rax
  80042120e2:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  80042120e6:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  80042120ed:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  80042120f4:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042120fb:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004212102:	49 89 c9             	mov    %rcx,%r9
  8004212105:	49 89 f8             	mov    %rdi,%r8
  8004212108:	48 89 d1             	mov    %rdx,%rcx
  800421210b:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  800421210f:	48 89 c7             	mov    %rax,%rdi
  8004212112:	48 b8 2c 18 21 04 80 	movabs $0x800421182c,%rax
  8004212119:	00 00 00 
  800421211c:	ff d0                	callq  *%rax
  800421211e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212121:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212125:	74 08                	je     800421212f <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004212127:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421212a:	e9 85 00 00 00       	jmpq   80042121b4 <dwarf_search_die_within_cu+0x2f7>
		for(i=0; i < ab.ab_atnum; i++)
  800421212f:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004212133:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212136:	48 63 d0             	movslq %eax,%rdx
  8004212139:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004212140:	48 39 c2             	cmp    %rax,%rdx
  8004212143:	0f 82 5c ff ff ff    	jb     80042120a5 <dwarf_search_die_within_cu+0x1e8>
		}

		ret_die->die_next_off = offset;
  8004212149:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004212150:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212157:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  800421215b:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212162:	74 19                	je     800421217d <dwarf_search_die_within_cu+0x2c0>
  8004212164:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212168:	7e 13                	jle    800421217d <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  800421216a:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212171:	3c 01                	cmp    $0x1,%al
  8004212173:	75 06                	jne    800421217b <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004212175:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212179:	eb 09                	jmp    8004212184 <dwarf_search_die_within_cu+0x2c7>
  800421217b:	eb 07                	jmp    8004212184 <dwarf_search_die_within_cu+0x2c7>
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  800421217d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212182:	eb 30                	jmp    80042121b4 <dwarf_search_die_within_cu+0x2f7>
	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212184:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004212188:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800421218f:	48 39 c2             	cmp    %rax,%rdx
  8004212192:	76 1b                	jbe    80042121af <dwarf_search_die_within_cu+0x2f2>
  8004212194:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800421219b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421219f:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  80042121a6:	48 39 c2             	cmp    %rax,%rdx
  80042121a9:	0f 87 be fd ff ff    	ja     8004211f6d <dwarf_search_die_within_cu+0xb0>
		}
	}

	return (DW_DLE_NO_ENTRY);
  80042121af:	b8 04 00 00 00       	mov    $0x4,%eax
}
  80042121b4:	c9                   	leaveq 
  80042121b5:	c3                   	retq   

00000080042121b6 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  80042121b6:	55                   	push   %rbp
  80042121b7:	48 89 e5             	mov    %rsp,%rbp
  80042121ba:	48 83 ec 60          	sub    $0x60,%rsp
  80042121be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042121c2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042121c6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  80042121ca:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042121cf:	75 35                	jne    8004212206 <dwarf_offdie+0x50>
  80042121d1:	48 b9 b8 b2 21 04 80 	movabs $0x800421b2b8,%rcx
  80042121d8:	00 00 00 
  80042121db:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  80042121e2:	00 00 00 
  80042121e5:	be c4 02 00 00       	mov    $0x2c4,%esi
  80042121ea:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  80042121f1:	00 00 00 
  80042121f4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042121f9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212200:	00 00 00 
  8004212203:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212206:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421220b:	75 35                	jne    8004212242 <dwarf_offdie+0x8c>
  800421220d:	48 b9 bc b2 21 04 80 	movabs $0x800421b2bc,%rcx
  8004212214:	00 00 00 
  8004212217:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  800421221e:	00 00 00 
  8004212221:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004212226:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  800421222d:	00 00 00 
  8004212230:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212235:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421223c:	00 00 00 
  800421223f:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004212242:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004212246:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421224a:	76 66                	jbe    80042122b2 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  800421224c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004212250:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212254:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212258:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  800421225c:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212260:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212264:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212269:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  800421226d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212272:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212276:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  800421227b:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  800421227f:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212284:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212288:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  800421228d:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004212291:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004212296:	b9 00 00 00 00       	mov    $0x0,%ecx
  800421229b:	48 89 c7             	mov    %rax,%rdi
  800421229e:	48 b8 bd 1e 21 04 80 	movabs $0x8004211ebd,%rax
  80042122a5:	00 00 00 
  80042122a8:	ff d0                	callq  *%rax
  80042122aa:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  80042122ad:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042122b0:	eb 05                	jmp    80042122b7 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  80042122b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042122b7:	c9                   	leaveq 
  80042122b8:	c3                   	retq   

00000080042122b9 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  80042122b9:	55                   	push   %rbp
  80042122ba:	48 89 e5             	mov    %rsp,%rbp
  80042122bd:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042122c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042122c5:	89 f0                	mov    %esi,%eax
  80042122c7:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  80042122cb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042122d2:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  80042122d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042122da:	eb 57                	jmp    8004212333 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  80042122dc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042122e0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042122e3:	48 63 d0             	movslq %eax,%rdx
  80042122e6:	48 89 d0             	mov    %rdx,%rax
  80042122e9:	48 01 c0             	add    %rax,%rax
  80042122ec:	48 01 d0             	add    %rdx,%rax
  80042122ef:	48 c1 e0 05          	shl    $0x5,%rax
  80042122f3:	48 01 c8             	add    %rcx,%rax
  80042122f6:	48 05 80 03 00 00    	add    $0x380,%rax
  80042122fc:	48 8b 10             	mov    (%rax),%rdx
  80042122ff:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212303:	48 39 c2             	cmp    %rax,%rdx
  8004212306:	75 27                	jne    800421232f <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212308:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421230b:	48 63 d0             	movslq %eax,%rdx
  800421230e:	48 89 d0             	mov    %rdx,%rax
  8004212311:	48 01 c0             	add    %rax,%rax
  8004212314:	48 01 d0             	add    %rdx,%rax
  8004212317:	48 c1 e0 05          	shl    $0x5,%rax
  800421231b:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004212322:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212326:	48 01 d0             	add    %rdx,%rax
  8004212329:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  800421232d:	eb 17                	jmp    8004212346 <_dwarf_attr_find+0x8d>
	for(i=0; i < die->die_attr_count; i++)
  800421232f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004212333:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212337:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  800421233e:	0f b6 c0             	movzbl %al,%eax
  8004212341:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004212344:	7f 96                	jg     80042122dc <_dwarf_attr_find+0x23>
		}
	}

	return myat;
  8004212346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421234a:	c9                   	leaveq 
  800421234b:	c3                   	retq   

000000800421234c <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  800421234c:	55                   	push   %rbp
  800421234d:	48 89 e5             	mov    %rsp,%rbp
  8004212350:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212354:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212358:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421235c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212360:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212364:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212369:	75 35                	jne    80042123a0 <dwarf_siblingof+0x54>
  800421236b:	48 b9 b8 b2 21 04 80 	movabs $0x800421b2b8,%rcx
  8004212372:	00 00 00 
  8004212375:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  800421237c:	00 00 00 
  800421237f:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212384:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  800421238b:	00 00 00 
  800421238e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212393:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421239a:	00 00 00 
  800421239d:	41 ff d0             	callq  *%r8
	assert(ret_die);
  80042123a0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042123a5:	75 35                	jne    80042123dc <dwarf_siblingof+0x90>
  80042123a7:	48 b9 bc b2 21 04 80 	movabs $0x800421b2bc,%rcx
  80042123ae:	00 00 00 
  80042123b1:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  80042123b8:	00 00 00 
  80042123bb:	be ed 02 00 00       	mov    $0x2ed,%esi
  80042123c0:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  80042123c7:	00 00 00 
  80042123ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042123cf:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042123d6:	00 00 00 
  80042123d9:	41 ff d0             	callq  *%r8
	assert(cu);
  80042123dc:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042123e1:	75 35                	jne    8004212418 <dwarf_siblingof+0xcc>
  80042123e3:	48 b9 c4 b2 21 04 80 	movabs $0x800421b2c4,%rcx
  80042123ea:	00 00 00 
  80042123ed:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  80042123f4:	00 00 00 
  80042123f7:	be ee 02 00 00       	mov    $0x2ee,%esi
  80042123fc:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004212403:	00 00 00 
  8004212406:	b8 00 00 00 00       	mov    $0x0,%eax
  800421240b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212412:	00 00 00 
  8004212415:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212418:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421241d:	75 65                	jne    8004212484 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  800421241f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212423:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212427:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421242b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421242f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212433:	48 8b 38             	mov    (%rax),%rdi
  8004212436:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421243a:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800421243e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212443:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212447:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800421244c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004212450:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212455:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212459:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800421245e:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004212462:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212467:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421246b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212470:	48 89 cf             	mov    %rcx,%rdi
  8004212473:	48 b8 b6 21 21 04 80 	movabs $0x80042121b6,%rax
  800421247a:	00 00 00 
  800421247d:	ff d0                	callq  *%rax
  800421247f:	e9 0a 01 00 00       	jmpq   800421258e <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212484:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  800421248b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421248f:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212493:	84 c0                	test   %al,%al
  8004212495:	75 0e                	jne    80042124a5 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212497:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421249b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421249f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042124a3:	eb 6b                	jmp    8004212510 <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  80042124a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042124a9:	be 01 00 00 00       	mov    $0x1,%esi
  80042124ae:	48 89 c7             	mov    %rax,%rdi
  80042124b1:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  80042124b8:	00 00 00 
  80042124bb:	ff d0                	callq  *%rax
  80042124bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042124c1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042124c6:	74 35                	je     80042124fd <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  80042124c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124cc:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042124d0:	48 83 f8 10          	cmp    $0x10,%rax
  80042124d4:	74 19                	je     80042124ef <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  80042124d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124da:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042124de:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042124e2:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042124e6:	48 01 d0             	add    %rdx,%rax
  80042124e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042124ed:	eb 21                	jmp    8004212510 <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  80042124ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124f3:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042124f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042124fb:	eb 13                	jmp    8004212510 <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  80042124fd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212501:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212505:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212509:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004212510:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212513:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212517:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800421251b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  800421251f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212523:	4c 8b 00             	mov    (%rax),%r8
  8004212526:	4c 89 04 24          	mov    %r8,(%rsp)
  800421252a:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421252e:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004212533:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212537:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  800421253c:	4c 8b 40 18          	mov    0x18(%rax),%r8
  8004212540:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212545:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212549:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  800421254e:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004212552:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004212557:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421255b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212560:	48 b8 bd 1e 21 04 80 	movabs $0x8004211ebd,%rax
  8004212567:	00 00 00 
  800421256a:	ff d0                	callq  *%rax
  800421256c:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  800421256f:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004212573:	75 07                	jne    800421257c <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212575:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421257a:	eb 12                	jmp    800421258e <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  800421257c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212580:	74 07                	je     8004212589 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004212582:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212587:	eb 05                	jmp    800421258e <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212589:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421258e:	c9                   	leaveq 
  800421258f:	c3                   	retq   

0000008004212590 <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004212590:	55                   	push   %rbp
  8004212591:	48 89 e5             	mov    %rsp,%rbp
  8004212594:	48 83 ec 70          	sub    $0x70,%rsp
  8004212598:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421259c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042125a0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042125a4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  80042125a8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042125ad:	75 35                	jne    80042125e4 <dwarf_child+0x54>
  80042125af:	48 b9 c7 b2 21 04 80 	movabs $0x800421b2c7,%rcx
  80042125b6:	00 00 00 
  80042125b9:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  80042125c0:	00 00 00 
  80042125c3:	be 1c 03 00 00       	mov    $0x31c,%esi
  80042125c8:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  80042125cf:	00 00 00 
  80042125d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042125d7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042125de:	00 00 00 
  80042125e1:	41 ff d0             	callq  *%r8
	assert(ret_die);
  80042125e4:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042125e9:	75 35                	jne    8004212620 <dwarf_child+0x90>
  80042125eb:	48 b9 bc b2 21 04 80 	movabs $0x800421b2bc,%rcx
  80042125f2:	00 00 00 
  80042125f5:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  80042125fc:	00 00 00 
  80042125ff:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004212604:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  800421260b:	00 00 00 
  800421260e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212613:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421261a:	00 00 00 
  800421261d:	41 ff d0             	callq  *%r8
	assert(dbg);
  8004212620:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212625:	75 35                	jne    800421265c <dwarf_child+0xcc>
  8004212627:	48 b9 b8 b2 21 04 80 	movabs $0x800421b2b8,%rcx
  800421262e:	00 00 00 
  8004212631:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004212638:	00 00 00 
  800421263b:	be 1e 03 00 00       	mov    $0x31e,%esi
  8004212640:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004212647:	00 00 00 
  800421264a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421264f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212656:	00 00 00 
  8004212659:	41 ff d0             	callq  *%r8
	assert(cu);
  800421265c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004212661:	75 35                	jne    8004212698 <dwarf_child+0x108>
  8004212663:	48 b9 c4 b2 21 04 80 	movabs $0x800421b2c4,%rcx
  800421266a:	00 00 00 
  800421266d:	48 ba 2a b1 21 04 80 	movabs $0x800421b12a,%rdx
  8004212674:	00 00 00 
  8004212677:	be 1f 03 00 00       	mov    $0x31f,%esi
  800421267c:	48 bf 3f b1 21 04 80 	movabs $0x800421b13f,%rdi
  8004212683:	00 00 00 
  8004212686:	b8 00 00 00 00       	mov    $0x0,%eax
  800421268b:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004212692:	00 00 00 
  8004212695:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212698:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421269c:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042126a0:	84 c0                	test   %al,%al
  80042126a2:	75 0a                	jne    80042126ae <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  80042126a4:	b8 04 00 00 00       	mov    $0x4,%eax
  80042126a9:	e9 84 00 00 00       	jmpq   8004212732 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  80042126ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042126b2:	48 8b 70 08          	mov    0x8(%rax),%rsi
  80042126b6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042126ba:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  80042126be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042126c2:	48 8b 08             	mov    (%rax),%rcx
  80042126c5:	48 89 0c 24          	mov    %rcx,(%rsp)
  80042126c9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042126cd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  80042126d2:	48 8b 48 10          	mov    0x10(%rax),%rcx
  80042126d6:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  80042126db:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042126df:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  80042126e4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042126e8:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  80042126ed:	48 8b 48 28          	mov    0x28(%rax),%rcx
  80042126f1:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  80042126f6:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042126fa:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042126ff:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212704:	48 b8 bd 1e 21 04 80 	movabs $0x8004211ebd,%rax
  800421270b:	00 00 00 
  800421270e:	ff d0                	callq  *%rax
  8004212710:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004212713:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212717:	75 07                	jne    8004212720 <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212719:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421271e:	eb 12                	jmp    8004212732 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  8004212720:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212724:	74 07                	je     800421272d <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004212726:	b8 01 00 00 00       	mov    $0x1,%eax
  800421272b:	eb 05                	jmp    8004212732 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  800421272d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212732:	c9                   	leaveq 
  8004212733:	c3                   	retq   

0000008004212734 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004212734:	55                   	push   %rbp
  8004212735:	48 89 e5             	mov    %rsp,%rbp
  8004212738:	48 83 ec 20          	sub    $0x20,%rsp
  800421273c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  8004212740:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212744:	48 8b 00             	mov    (%rax),%rax
  8004212747:	48 89 c7             	mov    %rax,%rdi
  800421274a:	48 b8 5b 5a 21 04 80 	movabs $0x8004215a5b,%rax
  8004212751:	00 00 00 
  8004212754:	ff d0                	callq  *%rax
  8004212756:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  800421275a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421275e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212762:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212766:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  800421276a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421276e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212772:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212776:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  800421277a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421277e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004212782:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212786:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  800421278a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421278f:	c9                   	leaveq 
  8004212790:	c3                   	retq   

0000008004212791 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  8004212791:	55                   	push   %rbp
  8004212792:	48 89 e5             	mov    %rsp,%rbp
  8004212795:	48 83 ec 08          	sub    $0x8,%rsp
  8004212799:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  800421279d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042127a1:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  80042127a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042127ab:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  80042127b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042127b5:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  80042127bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042127bf:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  80042127c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042127c9:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  80042127cf:	c9                   	leaveq 
  80042127d0:	c3                   	retq   

00000080042127d1 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  80042127d1:	55                   	push   %rbp
  80042127d2:	48 89 e5             	mov    %rsp,%rbp
  80042127d5:	48 83 ec 40          	sub    $0x40,%rsp
  80042127d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042127dd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042127e1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042127e5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042127e9:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  80042127ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042127f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  80042127f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042127f9:	ba 80 00 00 00       	mov    $0x80,%edx
  80042127fe:	be 00 00 00 00       	mov    $0x0,%esi
  8004212803:	48 89 c7             	mov    %rax,%rdi
  8004212806:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  800421280d:	00 00 00 
  8004212810:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004212812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212816:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421281a:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  800421281e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212823:	75 07                	jne    800421282c <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  8004212825:	b8 01 00 00 00       	mov    $0x1,%eax
  800421282a:	eb 75                	jmp    80042128a1 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  800421282c:	eb 59                	jmp    8004212887 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  800421282e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004212832:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421283a:	be 01 00 00 00       	mov    $0x1,%esi
  800421283f:	48 89 c7             	mov    %rax,%rdi
  8004212842:	48 b8 e6 49 21 04 80 	movabs $0x80042149e6,%rax
  8004212849:	00 00 00 
  800421284c:	ff d0                	callq  *%rax
  800421284e:	85 c0                	test   %eax,%eax
  8004212850:	79 07                	jns    8004212859 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004212852:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212857:	eb 48                	jmp    80042128a1 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212859:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421285d:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212861:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212865:	77 20                	ja     8004212887 <dwarf_get_fde_at_pc+0xb6>
  8004212867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421286b:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  800421286f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212873:	48 8b 40 38          	mov    0x38(%rax),%rax
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212877:	48 01 d0             	add    %rdx,%rax
  800421287a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421287e:	76 07                	jbe    8004212887 <dwarf_get_fde_at_pc+0xb6>
			return (DW_DLV_OK);
  8004212880:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212885:	eb 1a                	jmp    80042128a1 <dwarf_get_fde_at_pc+0xd0>
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212887:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421288b:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800421288f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212893:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004212897:	48 39 c2             	cmp    %rax,%rdx
  800421289a:	72 92                	jb     800421282e <dwarf_get_fde_at_pc+0x5d>
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  800421289c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  80042128a1:	c9                   	leaveq 
  80042128a2:	c3                   	retq   

00000080042128a3 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  80042128a3:	55                   	push   %rbp
  80042128a4:	48 89 e5             	mov    %rsp,%rbp
  80042128a7:	53                   	push   %rbx
  80042128a8:	48 83 ec 38          	sub    $0x38,%rsp
  80042128ac:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042128b0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042128b4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042128b8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  80042128bc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042128c1:	75 35                	jne    80042128f8 <_dwarf_frame_regtable_copy+0x55>
  80042128c3:	48 b9 da b2 21 04 80 	movabs $0x800421b2da,%rcx
  80042128ca:	00 00 00 
  80042128cd:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  80042128d4:	00 00 00 
  80042128d7:	be 57 00 00 00       	mov    $0x57,%esi
  80042128dc:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  80042128e3:	00 00 00 
  80042128e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042128eb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042128f2:	00 00 00 
  80042128f5:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  80042128f8:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042128fd:	75 35                	jne    8004212934 <_dwarf_frame_regtable_copy+0x91>
  80042128ff:	48 b9 12 b3 21 04 80 	movabs $0x800421b312,%rcx
  8004212906:	00 00 00 
  8004212909:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  8004212910:	00 00 00 
  8004212913:	be 58 00 00 00       	mov    $0x58,%esi
  8004212918:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  800421291f:	00 00 00 
  8004212922:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212927:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421292e:	00 00 00 
  8004212931:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  8004212934:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212938:	48 8b 00             	mov    (%rax),%rax
  800421293b:	48 85 c0             	test   %rax,%rax
  800421293e:	75 39                	jne    8004212979 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  8004212940:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212944:	48 bb e0 f6 49 04 80 	movabs $0x800449f6e0,%rbx
  800421294b:	00 00 00 
  800421294e:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004212951:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212955:	48 8b 00             	mov    (%rax),%rax
  8004212958:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421295c:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  8004212960:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  8004212964:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212968:	48 8b 00             	mov    (%rax),%rax
  800421296b:	48 bb e0 d7 69 04 80 	movabs $0x800469d7e0,%rbx
  8004212972:	00 00 00 
  8004212975:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004212979:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421297d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212981:	48 8b 00             	mov    (%rax),%rax
  8004212984:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212989:	48 89 ce             	mov    %rcx,%rsi
  800421298c:	48 89 c7             	mov    %rax,%rdi
  800421298f:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  8004212996:	00 00 00 
  8004212999:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421299b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042129a2:	eb 5a                	jmp    80042129fe <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  80042129a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042129a8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042129ac:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042129af:	48 63 d0             	movslq %eax,%rdx
  80042129b2:	48 89 d0             	mov    %rdx,%rax
  80042129b5:	48 01 c0             	add    %rax,%rax
  80042129b8:	48 01 d0             	add    %rdx,%rax
  80042129bb:	48 c1 e0 03          	shl    $0x3,%rax
  80042129bf:	48 01 c1             	add    %rax,%rcx
  80042129c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042129c6:	48 8b 00             	mov    (%rax),%rax
  80042129c9:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042129cd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042129d0:	48 63 d0             	movslq %eax,%rdx
  80042129d3:	48 89 d0             	mov    %rdx,%rax
  80042129d6:	48 01 c0             	add    %rax,%rax
  80042129d9:	48 01 d0             	add    %rdx,%rax
  80042129dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042129e0:	48 01 f0             	add    %rsi,%rax
  80042129e3:	ba 18 00 00 00       	mov    $0x18,%edx
  80042129e8:	48 89 ce             	mov    %rcx,%rsi
  80042129eb:	48 89 c7             	mov    %rax,%rdi
  80042129ee:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  80042129f5:	00 00 00 
  80042129f8:	ff d0                	callq  *%rax
		     i < src->rt3_reg_table_size; i++)
  80042129fa:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042129fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212a02:	48 8b 00             	mov    (%rax),%rax
  8004212a05:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212a09:	0f b7 c0             	movzwl %ax,%eax
  8004212a0c:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004212a0f:	7e 10                	jle    8004212a21 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  8004212a11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212a15:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212a19:	0f b7 c0             	movzwl %ax,%eax
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212a1c:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004212a1f:	7f 83                	jg     80042129a4 <_dwarf_frame_regtable_copy+0x101>
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004212a21:	eb 32                	jmp    8004212a55 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  8004212a23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212a27:	48 8b 00             	mov    (%rax),%rax
  8004212a2a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212a2e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004212a31:	48 63 d0             	movslq %eax,%rdx
  8004212a34:	48 89 d0             	mov    %rdx,%rax
  8004212a37:	48 01 c0             	add    %rax,%rax
  8004212a3a:	48 01 d0             	add    %rdx,%rax
  8004212a3d:	48 c1 e0 03          	shl    $0x3,%rax
  8004212a41:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004212a45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212a49:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		(*dest)->rt3_rules[i].dw_regnum =
  8004212a4d:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004212a51:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004212a55:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212a59:	48 8b 00             	mov    (%rax),%rax
  8004212a5c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212a60:	0f b7 c0             	movzwl %ax,%eax
  8004212a63:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004212a66:	7f bb                	jg     8004212a23 <_dwarf_frame_regtable_copy+0x180>

	return (DW_DLE_NONE);
  8004212a68:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212a6d:	48 83 c4 38          	add    $0x38,%rsp
  8004212a71:	5b                   	pop    %rbx
  8004212a72:	5d                   	pop    %rbp
  8004212a73:	c3                   	retq   

0000008004212a74 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  8004212a74:	55                   	push   %rbp
  8004212a75:	48 89 e5             	mov    %rsp,%rbp
  8004212a78:	53                   	push   %rbx
  8004212a79:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  8004212a80:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004212a84:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  8004212a88:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  8004212a8c:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  8004212a90:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  8004212a97:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  8004212a9e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  8004212aa5:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004212aac:	00 
  8004212aad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212ab1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  8004212ab5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212ab9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212abd:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  8004212ac0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212ac4:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212ac8:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  8004212acc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212ad0:	48 89 c7             	mov    %rax,%rdi
  8004212ad3:	48 b8 a3 28 21 04 80 	movabs $0x80042128a3,%rax
  8004212ada:	00 00 00 
  8004212add:	ff d0                	callq  *%rax
	p = insts;
  8004212adf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004212ae3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  8004212ae7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212aeb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004212aef:	48 01 d0             	add    %rdx,%rax
  8004212af2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  8004212af6:	e9 3a 0d 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  8004212afb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212aff:	0f b6 00             	movzbl (%rax),%eax
  8004212b02:	84 c0                	test   %al,%al
  8004212b04:	75 11                	jne    8004212b17 <_dwarf_frame_run_inst+0xa3>
			p++;
  8004212b06:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212b0a:	48 83 c0 01          	add    $0x1,%rax
  8004212b0e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  8004212b12:	e9 1e 0d 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  8004212b17:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212b1b:	0f b6 00             	movzbl (%rax),%eax
  8004212b1e:	83 e0 c0             	and    $0xffffffc0,%eax
  8004212b21:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  8004212b24:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212b28:	0f b6 00             	movzbl (%rax),%eax
  8004212b2b:	83 e0 3f             	and    $0x3f,%eax
  8004212b2e:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  8004212b31:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212b35:	48 83 c0 01          	add    $0x1,%rax
  8004212b39:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  8004212b3d:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  8004212b41:	0f 84 a1 01 00 00    	je     8004212ce8 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  8004212b47:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004212b4b:	3d 80 00 00 00       	cmp    $0x80,%eax
  8004212b50:	74 38                	je     8004212b8a <_dwarf_frame_run_inst+0x116>
  8004212b52:	3d c0 00 00 00       	cmp    $0xc0,%eax
  8004212b57:	0f 84 01 01 00 00    	je     8004212c5e <_dwarf_frame_run_inst+0x1ea>
  8004212b5d:	83 f8 40             	cmp    $0x40,%eax
  8004212b60:	0f 85 71 01 00 00    	jne    8004212cd7 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  8004212b66:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212b6a:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212b71:	ff 
  8004212b72:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  8004212b76:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212b7a:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212b7e:	73 05                	jae    8004212b85 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  8004212b80:	e9 be 0c 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004212b85:	e9 59 01 00 00       	jmpq   8004212ce3 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004212b8a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212b8e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212b92:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004212b95:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212b99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b9d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212ba1:	66 39 c2             	cmp    %ax,%dx
  8004212ba4:	72 0c                	jb     8004212bb2 <_dwarf_frame_run_inst+0x13e>
  8004212ba6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212bad:	e9 91 0c 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  8004212bb2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bb6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212bba:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212bbe:	48 89 d0             	mov    %rdx,%rax
  8004212bc1:	48 01 c0             	add    %rax,%rax
  8004212bc4:	48 01 d0             	add    %rdx,%rax
  8004212bc7:	48 c1 e0 03          	shl    $0x3,%rax
  8004212bcb:	48 01 c8             	add    %rcx,%rax
  8004212bce:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  8004212bd1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bd5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212bd9:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212bdd:	48 89 d0             	mov    %rdx,%rax
  8004212be0:	48 01 c0             	add    %rax,%rax
  8004212be3:	48 01 d0             	add    %rdx,%rax
  8004212be6:	48 c1 e0 03          	shl    $0x3,%rax
  8004212bea:	48 01 c8             	add    %rcx,%rax
  8004212bed:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  8004212bf1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bf5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212bf9:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212bfd:	48 89 d0             	mov    %rdx,%rax
  8004212c00:	48 01 c0             	add    %rax,%rax
  8004212c03:	48 01 d0             	add    %rdx,%rax
  8004212c06:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c0a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212c0e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212c12:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212c16:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004212c1a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c1e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c22:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212c26:	48 89 d0             	mov    %rdx,%rax
  8004212c29:	48 01 c0             	add    %rax,%rax
  8004212c2c:	48 01 d0             	add    %rdx,%rax
  8004212c2f:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c33:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  8004212c37:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212c3b:	48 89 c7             	mov    %rax,%rdi
  8004212c3e:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004212c45:	00 00 00 
  8004212c48:	ff d0                	callq  *%rax
  8004212c4a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004212c51:	48 0f af c2          	imul   %rdx,%rax
			        RL[low6].dw_offset_or_block_len =
  8004212c55:	48 89 43 08          	mov    %rax,0x8(%rbx)
			        break;
  8004212c59:	e9 85 00 00 00       	jmpq   8004212ce3 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  8004212c5e:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212c62:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212c66:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004212c69:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212c6d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c71:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212c75:	66 39 c2             	cmp    %ax,%dx
  8004212c78:	72 0c                	jb     8004212c86 <_dwarf_frame_run_inst+0x212>
  8004212c7a:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212c81:	e9 bd 0b 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004212c86:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212c8a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c8e:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212c92:	48 89 d0             	mov    %rdx,%rax
  8004212c95:	48 01 c0             	add    %rax,%rax
  8004212c98:	48 01 d0             	add    %rdx,%rax
  8004212c9b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c9f:	48 01 c1             	add    %rax,%rcx
  8004212ca2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ca6:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212caa:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212cae:	48 89 d0             	mov    %rdx,%rax
  8004212cb1:	48 01 c0             	add    %rax,%rax
  8004212cb4:	48 01 d0             	add    %rdx,%rax
  8004212cb7:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cbb:	48 01 f0             	add    %rsi,%rax
  8004212cbe:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212cc3:	48 89 ce             	mov    %rcx,%rsi
  8004212cc6:	48 89 c7             	mov    %rax,%rdi
  8004212cc9:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  8004212cd0:	00 00 00 
  8004212cd3:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  8004212cd5:	eb 0c                	jmp    8004212ce3 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004212cd7:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  8004212cde:	e9 60 0b 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  8004212ce3:	e9 4d 0b 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  8004212ce8:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212cec:	83 f8 16             	cmp    $0x16,%eax
  8004212cef:	0f 87 37 0b 00 00    	ja     800421382c <_dwarf_frame_run_inst+0xdb8>
  8004212cf5:	89 c0                	mov    %eax,%eax
  8004212cf7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004212cfe:	00 
  8004212cff:	48 b8 20 b3 21 04 80 	movabs $0x800421b320,%rax
  8004212d06:	00 00 00 
  8004212d09:	48 01 d0             	add    %rdx,%rax
  8004212d0c:	48 8b 00             	mov    (%rax),%rax
  8004212d0f:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  8004212d11:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d15:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212d19:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212d1d:	8b 4a 28             	mov    0x28(%rdx),%ecx
  8004212d20:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212d24:	89 ce                	mov    %ecx,%esi
  8004212d26:	48 89 d7             	mov    %rdx,%rdi
  8004212d29:	ff d0                	callq  *%rax
  8004212d2b:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212d2f:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212d33:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212d37:	73 05                	jae    8004212d3e <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004212d39:	e9 05 0b 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212d3e:	e9 f2 0a 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  8004212d43:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d47:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212d4b:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212d4f:	be 01 00 00 00       	mov    $0x1,%esi
  8004212d54:	48 89 d7             	mov    %rdx,%rdi
  8004212d57:	ff d0                	callq  *%rax
  8004212d59:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212d60:	ff 
  8004212d61:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212d65:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212d69:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212d6d:	73 05                	jae    8004212d74 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  8004212d6f:	e9 cf 0a 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212d74:	e9 bc 0a 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004212d79:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d7d:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212d81:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212d85:	be 02 00 00 00       	mov    $0x2,%esi
  8004212d8a:	48 89 d7             	mov    %rdx,%rdi
  8004212d8d:	ff d0                	callq  *%rax
  8004212d8f:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212d96:	ff 
  8004212d97:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212d9b:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212d9f:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212da3:	73 05                	jae    8004212daa <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  8004212da5:	e9 99 0a 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212daa:	e9 86 0a 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  8004212daf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212db3:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212db7:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212dbb:	be 04 00 00 00       	mov    $0x4,%esi
  8004212dc0:	48 89 d7             	mov    %rdx,%rdi
  8004212dc3:	ff d0                	callq  *%rax
  8004212dc5:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212dcc:	ff 
  8004212dcd:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212dd1:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212dd5:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212dd9:	73 05                	jae    8004212de0 <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  8004212ddb:	e9 63 0a 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004212de0:	e9 50 0a 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004212de5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212de9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212ded:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212df0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212df4:	48 89 c7             	mov    %rax,%rdi
  8004212df7:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004212dfe:	00 00 00 
  8004212e01:	ff d0                	callq  *%rax
  8004212e03:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212e07:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e0b:	48 89 c7             	mov    %rax,%rdi
  8004212e0e:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004212e15:	00 00 00 
  8004212e18:	ff d0                	callq  *%rax
  8004212e1a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212e1e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e22:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212e26:	0f b7 c0             	movzwl %ax,%eax
  8004212e29:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212e2d:	77 0c                	ja     8004212e3b <_dwarf_frame_run_inst+0x3c7>
  8004212e2f:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212e36:	e9 08 0a 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004212e3b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e3f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212e43:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e47:	48 89 d0             	mov    %rdx,%rax
  8004212e4a:	48 01 c0             	add    %rax,%rax
  8004212e4d:	48 01 d0             	add    %rdx,%rax
  8004212e50:	48 c1 e0 03          	shl    $0x3,%rax
  8004212e54:	48 01 c8             	add    %rcx,%rax
  8004212e57:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004212e5a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e5e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212e62:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e66:	48 89 d0             	mov    %rdx,%rax
  8004212e69:	48 01 c0             	add    %rax,%rax
  8004212e6c:	48 01 d0             	add    %rdx,%rax
  8004212e6f:	48 c1 e0 03          	shl    $0x3,%rax
  8004212e73:	48 01 c8             	add    %rcx,%rax
  8004212e76:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004212e7a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e7e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212e82:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e86:	48 89 d0             	mov    %rdx,%rax
  8004212e89:	48 01 c0             	add    %rax,%rax
  8004212e8c:	48 01 d0             	add    %rdx,%rax
  8004212e8f:	48 c1 e0 03          	shl    $0x3,%rax
  8004212e93:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212e97:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212e9b:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212e9f:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004212ea3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ea7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212eab:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212eaf:	48 89 d0             	mov    %rdx,%rax
  8004212eb2:	48 01 c0             	add    %rax,%rax
  8004212eb5:	48 01 d0             	add    %rdx,%rax
  8004212eb8:	48 c1 e0 03          	shl    $0x3,%rax
  8004212ebc:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212ec0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004212ec7:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004212ecc:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004212ed0:	e9 60 09 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004212ed5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212ed9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212edd:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212ee0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212ee4:	48 89 c7             	mov    %rax,%rdi
  8004212ee7:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004212eee:	00 00 00 
  8004212ef1:	ff d0                	callq  *%rax
  8004212ef3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212ef7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212efb:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212eff:	0f b7 c0             	movzwl %ax,%eax
  8004212f02:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212f06:	77 0c                	ja     8004212f14 <_dwarf_frame_run_inst+0x4a0>
  8004212f08:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212f0f:	e9 2f 09 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004212f14:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212f18:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f1c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f20:	48 89 d0             	mov    %rdx,%rax
  8004212f23:	48 01 c0             	add    %rax,%rax
  8004212f26:	48 01 d0             	add    %rdx,%rax
  8004212f29:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f2d:	48 01 c1             	add    %rax,%rcx
  8004212f30:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f34:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212f38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f3c:	48 89 d0             	mov    %rdx,%rax
  8004212f3f:	48 01 c0             	add    %rax,%rax
  8004212f42:	48 01 d0             	add    %rdx,%rax
  8004212f45:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f49:	48 01 f0             	add    %rsi,%rax
  8004212f4c:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212f51:	48 89 ce             	mov    %rcx,%rsi
  8004212f54:	48 89 c7             	mov    %rax,%rdi
  8004212f57:	48 b8 26 05 21 04 80 	movabs $0x8004210526,%rax
  8004212f5e:	00 00 00 
  8004212f61:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004212f63:	e9 cd 08 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004212f68:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212f6c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212f70:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212f73:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212f77:	48 89 c7             	mov    %rax,%rdi
  8004212f7a:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004212f81:	00 00 00 
  8004212f84:	ff d0                	callq  *%rax
  8004212f86:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212f8a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f8e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212f92:	0f b7 c0             	movzwl %ax,%eax
  8004212f95:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212f99:	77 0c                	ja     8004212fa7 <_dwarf_frame_run_inst+0x533>
  8004212f9b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212fa2:	e9 9c 08 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004212fa7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fab:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212faf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212fb3:	48 89 d0             	mov    %rdx,%rax
  8004212fb6:	48 01 c0             	add    %rax,%rax
  8004212fb9:	48 01 d0             	add    %rdx,%rax
  8004212fbc:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fc0:	48 01 c8             	add    %rcx,%rax
  8004212fc3:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004212fc6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fca:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212fce:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212fd2:	48 89 d0             	mov    %rdx,%rax
  8004212fd5:	48 01 c0             	add    %rax,%rax
  8004212fd8:	48 01 d0             	add    %rdx,%rax
  8004212fdb:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fdf:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212fe3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212fe7:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004212feb:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212fef:	e9 41 08 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004212ff4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212ff8:	48 89 c7             	mov    %rax,%rdi
  8004212ffb:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213002:	00 00 00 
  8004213005:	ff d0                	callq  *%rax
  8004213007:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421300b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421300f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213013:	0f b7 c0             	movzwl %ax,%eax
  8004213016:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421301a:	77 0c                	ja     8004213028 <_dwarf_frame_run_inst+0x5b4>
  800421301c:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213023:	e9 1b 08 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213028:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421302c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213030:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213034:	48 89 d0             	mov    %rdx,%rax
  8004213037:	48 01 c0             	add    %rax,%rax
  800421303a:	48 01 d0             	add    %rdx,%rax
  800421303d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213041:	48 01 c8             	add    %rcx,%rax
  8004213044:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004213047:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421304b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421304f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213053:	48 89 d0             	mov    %rdx,%rax
  8004213056:	48 01 c0             	add    %rax,%rax
  8004213059:	48 01 d0             	add    %rdx,%rax
  800421305c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213060:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213064:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213068:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  800421306c:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213070:	e9 c0 07 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004213075:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213079:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421307d:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213080:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213084:	48 89 c7             	mov    %rax,%rdi
  8004213087:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  800421308e:	00 00 00 
  8004213091:	ff d0                	callq  *%rax
  8004213093:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004213097:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421309b:	48 89 c7             	mov    %rax,%rdi
  800421309e:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  80042130a5:	00 00 00 
  80042130a8:	ff d0                	callq  *%rax
  80042130aa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042130ae:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130b2:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042130b6:	0f b7 c0             	movzwl %ax,%eax
  80042130b9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042130bd:	77 0c                	ja     80042130cb <_dwarf_frame_run_inst+0x657>
  80042130bf:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042130c6:	e9 78 07 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042130cb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130cf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042130d3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042130d7:	48 89 d0             	mov    %rdx,%rax
  80042130da:	48 01 c0             	add    %rax,%rax
  80042130dd:	48 01 d0             	add    %rdx,%rax
  80042130e0:	48 c1 e0 03          	shl    $0x3,%rax
  80042130e4:	48 01 c8             	add    %rcx,%rax
  80042130e7:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  80042130ea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130ee:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042130f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042130f6:	48 89 d0             	mov    %rdx,%rax
  80042130f9:	48 01 c0             	add    %rax,%rax
  80042130fc:	48 01 d0             	add    %rdx,%rax
  80042130ff:	48 c1 e0 03          	shl    $0x3,%rax
  8004213103:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213107:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421310b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800421310f:	e9 21 07 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004213114:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213118:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800421311c:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004213120:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213124:	48 89 c7             	mov    %rax,%rdi
  8004213127:	48 b8 a3 28 21 04 80 	movabs $0x80042128a3,%rax
  800421312e:	00 00 00 
  8004213131:	ff d0                	callq  *%rax
			break;
  8004213133:	e9 fd 06 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004213138:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421313c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213140:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004213143:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004213147:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800421314b:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800421314f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213153:	48 89 c7             	mov    %rax,%rdi
  8004213156:	48 b8 a3 28 21 04 80 	movabs $0x80042128a3,%rax
  800421315d:	00 00 00 
  8004213160:	ff d0                	callq  *%rax
			break;
  8004213162:	e9 ce 06 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004213167:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421316b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421316f:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213172:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213176:	48 89 c7             	mov    %rax,%rdi
  8004213179:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213180:	00 00 00 
  8004213183:	ff d0                	callq  *%rax
  8004213185:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213189:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421318d:	48 89 c7             	mov    %rax,%rdi
  8004213190:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213197:	00 00 00 
  800421319a:	ff d0                	callq  *%rax
  800421319c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  80042131a0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131a4:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042131a7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131ab:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  80042131af:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131b3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042131b7:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  80042131bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131bf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042131c3:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042131c7:	e9 69 06 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  80042131cc:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042131d0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042131d4:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042131d7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131db:	48 89 c7             	mov    %rax,%rdi
  80042131de:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  80042131e5:	00 00 00 
  80042131e8:	ff d0                	callq  *%rax
  80042131ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  80042131ee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042131f6:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  80042131fa:	e9 36 06 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  80042131ff:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213203:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213207:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  800421320a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421320e:	48 89 c7             	mov    %rax,%rdi
  8004213211:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213218:	00 00 00 
  800421321b:	ff d0                	callq  *%rax
  800421321d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213221:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213225:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213228:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421322c:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213230:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213234:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213238:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800421323c:	e9 f4 05 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004213241:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213245:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213249:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  800421324c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213250:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213253:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213257:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  800421325b:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  800421325f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213263:	48 89 c7             	mov    %rax,%rdi
  8004213266:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  800421326d:	00 00 00 
  8004213270:	ff d0                	callq  *%rax
  8004213272:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213276:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421327a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421327e:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213282:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213286:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421328a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421328e:	48 01 d0             	add    %rdx,%rax
  8004213291:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213295:	e9 9b 05 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  800421329a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421329e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042132a2:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042132a5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042132a9:	48 89 c7             	mov    %rax,%rdi
  80042132ac:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  80042132b3:	00 00 00 
  80042132b6:	ff d0                	callq  *%rax
  80042132b8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042132bc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132c0:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042132c4:	0f b7 c0             	movzwl %ax,%eax
  80042132c7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042132cb:	77 0c                	ja     80042132d9 <_dwarf_frame_run_inst+0x865>
  80042132cd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042132d4:	e9 6a 05 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042132d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132dd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132e1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132e5:	48 89 d0             	mov    %rdx,%rax
  80042132e8:	48 01 c0             	add    %rax,%rax
  80042132eb:	48 01 d0             	add    %rdx,%rax
  80042132ee:	48 c1 e0 03          	shl    $0x3,%rax
  80042132f2:	48 01 c8             	add    %rcx,%rax
  80042132f5:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  80042132f8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132fc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213300:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213304:	48 89 d0             	mov    %rdx,%rax
  8004213307:	48 01 c0             	add    %rax,%rax
  800421330a:	48 01 d0             	add    %rdx,%rax
  800421330d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213311:	48 01 c8             	add    %rcx,%rax
  8004213314:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213318:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421331c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213320:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213324:	48 89 d0             	mov    %rdx,%rax
  8004213327:	48 01 c0             	add    %rax,%rax
  800421332a:	48 01 d0             	add    %rdx,%rax
  800421332d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213331:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213335:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213339:	48 89 c7             	mov    %rax,%rdi
  800421333c:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213343:	00 00 00 
  8004213346:	ff d0                	callq  *%rax
			RL[reg].dw_offset_or_block_len =
  8004213348:	48 89 43 08          	mov    %rax,0x8(%rbx)
			RL[reg].dw_block_ptr = p;
  800421334c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213350:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213354:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213358:	48 89 d0             	mov    %rdx,%rax
  800421335b:	48 01 c0             	add    %rax,%rax
  800421335e:	48 01 d0             	add    %rdx,%rax
  8004213361:	48 c1 e0 03          	shl    $0x3,%rax
  8004213365:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213369:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421336d:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213371:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213375:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213379:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421337d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213381:	48 89 d0             	mov    %rdx,%rax
  8004213384:	48 01 c0             	add    %rax,%rax
  8004213387:	48 01 d0             	add    %rdx,%rax
  800421338a:	48 c1 e0 03          	shl    $0x3,%rax
  800421338e:	48 01 f0             	add    %rsi,%rax
  8004213391:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213395:	48 01 c8             	add    %rcx,%rax
  8004213398:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800421339c:	e9 94 04 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  80042133a1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042133a5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042133a9:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042133ac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042133b0:	48 89 c7             	mov    %rax,%rdi
  80042133b3:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  80042133ba:	00 00 00 
  80042133bd:	ff d0                	callq  *%rax
  80042133bf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042133c3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042133c7:	48 89 c7             	mov    %rax,%rdi
  80042133ca:	48 b8 15 0f 21 04 80 	movabs $0x8004210f15,%rax
  80042133d1:	00 00 00 
  80042133d4:	ff d0                	callq  *%rax
  80042133d6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042133da:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133de:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042133e2:	0f b7 c0             	movzwl %ax,%eax
  80042133e5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042133e9:	77 0c                	ja     80042133f7 <_dwarf_frame_run_inst+0x983>
  80042133eb:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042133f2:	e9 4c 04 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042133f7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133fb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133ff:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213403:	48 89 d0             	mov    %rdx,%rax
  8004213406:	48 01 c0             	add    %rax,%rax
  8004213409:	48 01 d0             	add    %rdx,%rax
  800421340c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213410:	48 01 c8             	add    %rcx,%rax
  8004213413:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213416:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421341a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421341e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213422:	48 89 d0             	mov    %rdx,%rax
  8004213425:	48 01 c0             	add    %rax,%rax
  8004213428:	48 01 d0             	add    %rdx,%rax
  800421342b:	48 c1 e0 03          	shl    $0x3,%rax
  800421342f:	48 01 c8             	add    %rcx,%rax
  8004213432:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213436:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421343a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421343e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213442:	48 89 d0             	mov    %rdx,%rax
  8004213445:	48 01 c0             	add    %rax,%rax
  8004213448:	48 01 d0             	add    %rdx,%rax
  800421344b:	48 c1 e0 03          	shl    $0x3,%rax
  800421344f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213453:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213457:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421345b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800421345f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213463:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213467:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421346b:	48 89 d0             	mov    %rdx,%rax
  800421346e:	48 01 c0             	add    %rax,%rax
  8004213471:	48 01 d0             	add    %rdx,%rax
  8004213474:	48 c1 e0 03          	shl    $0x3,%rax
  8004213478:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421347c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213483:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213488:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800421348c:	e9 a4 03 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004213491:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213495:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213499:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421349c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042134a0:	48 89 c7             	mov    %rax,%rdi
  80042134a3:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  80042134aa:	00 00 00 
  80042134ad:	ff d0                	callq  *%rax
  80042134af:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042134b3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042134b7:	48 89 c7             	mov    %rax,%rdi
  80042134ba:	48 b8 15 0f 21 04 80 	movabs $0x8004210f15,%rax
  80042134c1:	00 00 00 
  80042134c4:	ff d0                	callq  *%rax
  80042134c6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  80042134ca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134ce:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042134d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134d5:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  80042134d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134dd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134e1:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  80042134e5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134e9:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  80042134f0:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  80042134f5:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042134f9:	e9 37 03 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  80042134fe:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213502:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213506:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213509:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421350d:	48 89 c7             	mov    %rax,%rdi
  8004213510:	48 b8 15 0f 21 04 80 	movabs $0x8004210f15,%rax
  8004213517:	00 00 00 
  800421351a:	ff d0                	callq  *%rax
  800421351c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213520:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213524:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213527:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421352b:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  800421352f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213533:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421353a:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  800421353f:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213543:	e9 ed 02 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213548:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421354c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213550:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213553:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213557:	48 89 c7             	mov    %rax,%rdi
  800421355a:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213561:	00 00 00 
  8004213564:	ff d0                	callq  *%rax
  8004213566:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800421356a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421356e:	48 89 c7             	mov    %rax,%rdi
  8004213571:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213578:	00 00 00 
  800421357b:	ff d0                	callq  *%rax
  800421357d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213581:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213585:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213589:	0f b7 c0             	movzwl %ax,%eax
  800421358c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213590:	77 0c                	ja     800421359e <_dwarf_frame_run_inst+0xb2a>
  8004213592:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213599:	e9 a5 02 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421359e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135a2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135a6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042135aa:	48 89 d0             	mov    %rdx,%rax
  80042135ad:	48 01 c0             	add    %rax,%rax
  80042135b0:	48 01 d0             	add    %rdx,%rax
  80042135b3:	48 c1 e0 03          	shl    $0x3,%rax
  80042135b7:	48 01 c8             	add    %rcx,%rax
  80042135ba:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042135bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135c1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135c5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042135c9:	48 89 d0             	mov    %rdx,%rax
  80042135cc:	48 01 c0             	add    %rax,%rax
  80042135cf:	48 01 d0             	add    %rdx,%rax
  80042135d2:	48 c1 e0 03          	shl    $0x3,%rax
  80042135d6:	48 01 c8             	add    %rcx,%rax
  80042135d9:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042135dd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135e1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135e5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042135e9:	48 89 d0             	mov    %rdx,%rax
  80042135ec:	48 01 c0             	add    %rax,%rax
  80042135ef:	48 01 d0             	add    %rdx,%rax
  80042135f2:	48 c1 e0 03          	shl    $0x3,%rax
  80042135f6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042135fa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042135fe:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213602:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213606:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421360a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421360e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213612:	48 89 d0             	mov    %rdx,%rax
  8004213615:	48 01 c0             	add    %rax,%rax
  8004213618:	48 01 d0             	add    %rdx,%rax
  800421361b:	48 c1 e0 03          	shl    $0x3,%rax
  800421361f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213623:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421362a:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800421362f:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213633:	e9 fd 01 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004213638:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421363c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213640:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213643:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213647:	48 89 c7             	mov    %rax,%rdi
  800421364a:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213651:	00 00 00 
  8004213654:	ff d0                	callq  *%rax
  8004213656:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421365a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421365e:	48 89 c7             	mov    %rax,%rdi
  8004213661:	48 b8 15 0f 21 04 80 	movabs $0x8004210f15,%rax
  8004213668:	00 00 00 
  800421366b:	ff d0                	callq  *%rax
  800421366d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213671:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213675:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213679:	0f b7 c0             	movzwl %ax,%eax
  800421367c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213680:	77 0c                	ja     800421368e <_dwarf_frame_run_inst+0xc1a>
  8004213682:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213689:	e9 b5 01 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421368e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213692:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213696:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421369a:	48 89 d0             	mov    %rdx,%rax
  800421369d:	48 01 c0             	add    %rax,%rax
  80042136a0:	48 01 d0             	add    %rdx,%rax
  80042136a3:	48 c1 e0 03          	shl    $0x3,%rax
  80042136a7:	48 01 c8             	add    %rcx,%rax
  80042136aa:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042136ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136b1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136b5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042136b9:	48 89 d0             	mov    %rdx,%rax
  80042136bc:	48 01 c0             	add    %rax,%rax
  80042136bf:	48 01 d0             	add    %rdx,%rax
  80042136c2:	48 c1 e0 03          	shl    $0x3,%rax
  80042136c6:	48 01 c8             	add    %rcx,%rax
  80042136c9:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042136cd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136d1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136d5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042136d9:	48 89 d0             	mov    %rdx,%rax
  80042136dc:	48 01 c0             	add    %rax,%rax
  80042136df:	48 01 d0             	add    %rdx,%rax
  80042136e2:	48 c1 e0 03          	shl    $0x3,%rax
  80042136e6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042136ea:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042136ee:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042136f2:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  80042136f6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136fa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136fe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213702:	48 89 d0             	mov    %rdx,%rax
  8004213705:	48 01 c0             	add    %rax,%rax
  8004213708:	48 01 d0             	add    %rdx,%rax
  800421370b:	48 c1 e0 03          	shl    $0x3,%rax
  800421370f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213713:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421371a:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800421371f:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213723:	e9 0d 01 00 00       	jmpq   8004213835 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004213728:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421372c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213730:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213733:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213737:	48 89 c7             	mov    %rax,%rdi
  800421373a:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004213741:	00 00 00 
  8004213744:	ff d0                	callq  *%rax
  8004213746:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421374a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421374e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213752:	0f b7 c0             	movzwl %ax,%eax
  8004213755:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213759:	77 0c                	ja     8004213767 <_dwarf_frame_run_inst+0xcf3>
  800421375b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213762:	e9 dc 00 00 00       	jmpq   8004213843 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213767:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421376b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421376f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213773:	48 89 d0             	mov    %rdx,%rax
  8004213776:	48 01 c0             	add    %rax,%rax
  8004213779:	48 01 d0             	add    %rdx,%rax
  800421377c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213780:	48 01 c8             	add    %rcx,%rax
  8004213783:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004213786:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421378a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421378e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213792:	48 89 d0             	mov    %rdx,%rax
  8004213795:	48 01 c0             	add    %rax,%rax
  8004213798:	48 01 d0             	add    %rdx,%rax
  800421379b:	48 c1 e0 03          	shl    $0x3,%rax
  800421379f:	48 01 c8             	add    %rcx,%rax
  80042137a2:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  80042137a6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137aa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042137ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042137b2:	48 89 d0             	mov    %rdx,%rax
  80042137b5:	48 01 c0             	add    %rax,%rax
  80042137b8:	48 01 d0             	add    %rdx,%rax
  80042137bb:	48 c1 e0 03          	shl    $0x3,%rax
  80042137bf:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  80042137c3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042137c7:	48 89 c7             	mov    %rax,%rdi
  80042137ca:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  80042137d1:	00 00 00 
  80042137d4:	ff d0                	callq  *%rax
			RL[reg].dw_offset_or_block_len =
  80042137d6:	48 89 43 08          	mov    %rax,0x8(%rbx)
			RL[reg].dw_block_ptr = p;
  80042137da:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137de:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042137e2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042137e6:	48 89 d0             	mov    %rdx,%rax
  80042137e9:	48 01 c0             	add    %rax,%rax
  80042137ec:	48 01 d0             	add    %rdx,%rax
  80042137ef:	48 c1 e0 03          	shl    $0x3,%rax
  80042137f3:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042137f7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042137fb:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  80042137ff:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213803:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213807:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421380b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421380f:	48 89 d0             	mov    %rdx,%rax
  8004213812:	48 01 c0             	add    %rax,%rax
  8004213815:	48 01 d0             	add    %rdx,%rax
  8004213818:	48 c1 e0 03          	shl    $0x3,%rax
  800421381c:	48 01 f0             	add    %rsi,%rax
  800421381f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213823:	48 01 c8             	add    %rcx,%rax
  8004213826:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800421382a:	eb 09                	jmp    8004213835 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  800421382c:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  8004213833:	eb 0e                	jmp    8004213843 <_dwarf_frame_run_inst+0xdcf>
	while (p < pe) {
  8004213835:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213839:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421383d:	0f 82 b8 f2 ff ff    	jb     8004212afb <_dwarf_frame_run_inst+0x87>
		}
	}

program_done:
	return (ret);
  8004213843:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  8004213846:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  800421384d:	5b                   	pop    %rbx
  800421384e:	5d                   	pop    %rbp
  800421384f:	c3                   	retq   

0000008004213850 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004213850:	55                   	push   %rbp
  8004213851:	48 89 e5             	mov    %rsp,%rbp
  8004213854:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004213858:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421385c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213860:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213864:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213868:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  800421386c:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  8004213870:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213875:	75 35                	jne    80042138ac <_dwarf_frame_get_internal_table+0x5c>
  8004213877:	48 b9 d8 b3 21 04 80 	movabs $0x800421b3d8,%rcx
  800421387e:	00 00 00 
  8004213881:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  8004213888:	00 00 00 
  800421388b:	be 83 01 00 00       	mov    $0x183,%esi
  8004213890:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  8004213897:	00 00 00 
  800421389a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421389f:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042138a6:	00 00 00 
  80042138a9:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  80042138ac:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042138b1:	75 35                	jne    80042138e8 <_dwarf_frame_get_internal_table+0x98>
  80042138b3:	48 b9 e7 b3 21 04 80 	movabs $0x800421b3e7,%rcx
  80042138ba:	00 00 00 
  80042138bd:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  80042138c4:	00 00 00 
  80042138c7:	be 86 01 00 00       	mov    $0x186,%esi
  80042138cc:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  80042138d3:	00 00 00 
  80042138d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042138db:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042138e2:	00 00 00 
  80042138e5:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  80042138e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042138ec:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042138f0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  80042138f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042138f8:	ba 18 00 00 00       	mov    $0x18,%edx
  80042138fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004213902:	48 89 c7             	mov    %rax,%rdi
  8004213905:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  800421390c:	00 00 00 
  800421390f:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  8004213911:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213915:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213919:	0f b7 d0             	movzwl %ax,%edx
  800421391c:	48 89 d0             	mov    %rdx,%rax
  800421391f:	48 01 c0             	add    %rax,%rax
  8004213922:	48 01 d0             	add    %rdx,%rax
  8004213925:	48 c1 e0 03          	shl    $0x3,%rax
  8004213929:	48 89 c2             	mov    %rax,%rdx
  800421392c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213930:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213934:	be 00 00 00 00       	mov    $0x0,%esi
  8004213939:	48 89 c7             	mov    %rax,%rdi
  800421393c:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  8004213943:	00 00 00 
  8004213946:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213948:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421394f:	eb 2f                	jmp    8004213980 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004213951:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213955:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213959:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421395c:	48 63 d0             	movslq %eax,%rdx
  800421395f:	48 89 d0             	mov    %rdx,%rax
  8004213962:	48 01 c0             	add    %rax,%rax
  8004213965:	48 01 d0             	add    %rdx,%rax
  8004213968:	48 c1 e0 03          	shl    $0x3,%rax
  800421396c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213970:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213974:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  8004213978:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800421397c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004213980:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213984:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213988:	0f b7 c0             	movzwl %ax,%eax
  800421398b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421398e:	7f c1                	jg     8004213951 <_dwarf_frame_get_internal_table+0x101>

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  8004213990:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213994:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213998:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  800421399c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042139a1:	75 35                	jne    80042139d8 <_dwarf_frame_get_internal_table+0x188>
  80042139a3:	48 b9 f3 b3 21 04 80 	movabs $0x800421b3f3,%rcx
  80042139aa:	00 00 00 
  80042139ad:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  80042139b4:	00 00 00 
  80042139b7:	be 95 01 00 00       	mov    $0x195,%esi
  80042139bc:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  80042139c3:	00 00 00 
  80042139c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042139cb:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042139d2:	00 00 00 
  80042139d5:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  80042139d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139dc:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042139e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139e4:	4c 8b 40 38          	mov    0x38(%rax),%r8
  80042139e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139ec:	48 8b 48 70          	mov    0x70(%rax),%rcx
  80042139f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139f4:	48 8b 50 68          	mov    0x68(%rax),%rdx
  80042139f8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042139fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213a00:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  8004213a04:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004213a09:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  8004213a0d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004213a12:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004213a19:	ff ff 
  8004213a1b:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  8004213a22:	00 
  8004213a23:	48 89 c7             	mov    %rax,%rdi
  8004213a26:	48 b8 74 2a 21 04 80 	movabs $0x8004212a74,%rax
  8004213a2d:	00 00 00 
  8004213a30:	ff d0                	callq  *%rax
  8004213a32:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004213a35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213a39:	74 08                	je     8004213a43 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  8004213a3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004213a3e:	e9 98 00 00 00       	jmpq   8004213adb <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  8004213a43:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213a47:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213a4b:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004213a4f:	77 6f                	ja     8004213ac0 <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  8004213a51:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213a55:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004213a59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213a5d:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004213a61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213a65:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004213a69:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213a6d:	48 8b 48 58          	mov    0x58(%rax),%rcx
  8004213a71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213a75:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004213a79:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004213a7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213a81:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  8004213a85:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004213a8a:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  8004213a8e:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004213a93:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  8004213a97:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004213a9c:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004213aa0:	4d 89 d0             	mov    %r10,%r8
  8004213aa3:	48 89 c7             	mov    %rax,%rdi
  8004213aa6:	48 b8 74 2a 21 04 80 	movabs $0x8004212a74,%rax
  8004213aad:	00 00 00 
  8004213ab0:	ff d0                	callq  *%rax
  8004213ab2:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  8004213ab5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213ab9:	74 05                	je     8004213ac0 <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  8004213abb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004213abe:	eb 1b                	jmp    8004213adb <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  8004213ac0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213ac4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004213ac8:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  8004213acb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004213acf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004213ad3:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004213ad6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213adb:	c9                   	leaveq 
  8004213adc:	c3                   	retq   

0000008004213add <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  8004213add:	55                   	push   %rbp
  8004213ade:	48 89 e5             	mov    %rsp,%rbp
  8004213ae1:	48 83 ec 50          	sub    $0x50,%rsp
  8004213ae5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004213ae9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004213aed:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004213af1:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004213af5:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  8004213af9:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  8004213afd:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004213b02:	74 07                	je     8004213b0b <dwarf_get_fde_info_for_all_regs+0x2e>
  8004213b04:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004213b09:	75 0a                	jne    8004213b15 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004213b0b:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213b10:	e9 eb 02 00 00       	jmpq   8004213e00 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  8004213b15:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213b1a:	75 35                	jne    8004213b51 <dwarf_get_fde_info_for_all_regs+0x74>
  8004213b1c:	48 b9 e7 b3 21 04 80 	movabs $0x800421b3e7,%rcx
  8004213b23:	00 00 00 
  8004213b26:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  8004213b2d:	00 00 00 
  8004213b30:	be bf 01 00 00       	mov    $0x1bf,%esi
  8004213b35:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  8004213b3c:	00 00 00 
  8004213b3f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213b44:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004213b4b:	00 00 00 
  8004213b4e:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004213b51:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213b55:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213b59:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004213b5d:	77 19                	ja     8004213b78 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  8004213b5f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213b63:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004213b67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213b6b:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004213b6f:	48 01 d0             	add    %rdx,%rax
	if (pc_requested < fde->fde_initloc ||
  8004213b72:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004213b76:	77 0a                	ja     8004213b82 <dwarf_get_fde_info_for_all_regs+0xa5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  8004213b78:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213b7d:	e9 7e 02 00 00       	jmpq   8004213e00 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004213b82:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004213b86:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004213b8a:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004213b8e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213b92:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213b9a:	4d 89 c1             	mov    %r8,%r9
  8004213b9d:	49 89 f8             	mov    %rdi,%r8
  8004213ba0:	48 89 c7             	mov    %rax,%rdi
  8004213ba3:	48 b8 50 38 21 04 80 	movabs $0x8004213850,%rax
  8004213baa:	00 00 00 
  8004213bad:	ff d0                	callq  *%rax
  8004213baf:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  8004213bb2:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004213bb6:	74 0a                	je     8004213bc2 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  8004213bb8:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213bbd:	e9 3e 02 00 00       	jmpq   8004213e00 <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  8004213bc2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213bc6:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213bca:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  8004213bce:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  8004213bd3:	0f 87 b1 00 00 00    	ja     8004213c8a <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  8004213bd9:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  8004213bdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213be1:	0f b6 00             	movzbl (%rax),%eax
		reg_table->rules[cfa].dw_offset_relevant =
  8004213be4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213be8:	48 63 c9             	movslq %ecx,%rcx
  8004213beb:	48 83 c1 01          	add    $0x1,%rcx
  8004213bef:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213bf3:	48 01 ca             	add    %rcx,%rdx
  8004213bf6:	88 02                	mov    %al,(%rdx)
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  8004213bf8:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213bfc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c00:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004213c04:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213c08:	48 63 c9             	movslq %ecx,%rcx
  8004213c0b:	48 83 c1 01          	add    $0x1,%rcx
  8004213c0f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213c13:	48 01 ca             	add    %rcx,%rdx
  8004213c16:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004213c19:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213c1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c21:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213c25:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213c29:	48 63 c9             	movslq %ecx,%rcx
  8004213c2c:	48 83 c1 01          	add    $0x1,%rcx
  8004213c30:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213c34:	48 01 ca             	add    %rcx,%rdx
  8004213c37:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004213c3b:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213c3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c43:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213c47:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213c4b:	48 63 c9             	movslq %ecx,%rcx
  8004213c4e:	48 83 c1 01          	add    $0x1,%rcx
  8004213c52:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213c56:	48 01 ca             	add    %rcx,%rdx
  8004213c59:	48 83 c2 08          	add    $0x8,%rdx
  8004213c5d:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  8004213c60:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004213c64:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004213c68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c6c:	48 63 d2             	movslq %edx,%rdx
  8004213c6f:	48 83 c2 01          	add    $0x1,%rdx
  8004213c73:	48 c1 e2 04          	shl    $0x4,%rdx
  8004213c77:	48 01 d0             	add    %rdx,%rax
  8004213c7a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004213c7e:	48 8b 00             	mov    (%rax),%rax
  8004213c81:	48 89 01             	mov    %rax,(%rcx)
  8004213c84:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  8004213c88:	eb 3c                	jmp    8004213cc6 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004213c8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c8e:	0f b6 10             	movzbl (%rax),%edx
		reg_table->cfa_rule.dw_offset_relevant =
  8004213c91:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213c95:	88 10                	mov    %dl,(%rax)
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  8004213c97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c9b:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  8004213c9f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213ca3:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  8004213ca6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213caa:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  8004213cae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213cb2:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  8004213cb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213cba:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004213cbe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213cc2:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004213cc6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004213ccd:	e9 fd 00 00 00       	jmpq   8004213dcf <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  8004213cd2:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  8004213cd6:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213cd9:	75 05                	jne    8004213ce0 <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  8004213cdb:	e9 eb 00 00 00       	jmpq   8004213dcb <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  8004213ce0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ce4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ce8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213ceb:	48 63 d0             	movslq %eax,%rdx
  8004213cee:	48 89 d0             	mov    %rdx,%rax
  8004213cf1:	48 01 c0             	add    %rax,%rax
  8004213cf4:	48 01 d0             	add    %rdx,%rax
  8004213cf7:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cfb:	48 01 c8             	add    %rcx,%rax
  8004213cfe:	0f b6 00             	movzbl (%rax),%eax
		reg_table->rules[i].dw_offset_relevant =
  8004213d01:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213d05:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213d08:	48 63 c9             	movslq %ecx,%rcx
  8004213d0b:	48 83 c1 01          	add    $0x1,%rcx
  8004213d0f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213d13:	48 01 ca             	add    %rcx,%rdx
  8004213d16:	88 02                	mov    %al,(%rdx)
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  8004213d18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213d1c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d20:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213d23:	48 63 d0             	movslq %eax,%rdx
  8004213d26:	48 89 d0             	mov    %rdx,%rax
  8004213d29:	48 01 c0             	add    %rax,%rax
  8004213d2c:	48 01 d0             	add    %rdx,%rax
  8004213d2f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d33:	48 01 c8             	add    %rcx,%rax
  8004213d36:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		reg_table->rules[i].dw_value_type =
  8004213d3a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213d3e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213d41:	48 63 c9             	movslq %ecx,%rcx
  8004213d44:	48 83 c1 01          	add    $0x1,%rcx
  8004213d48:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213d4c:	48 01 ca             	add    %rcx,%rdx
  8004213d4f:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004213d52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213d56:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d5a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213d5d:	48 63 d0             	movslq %eax,%rdx
  8004213d60:	48 89 d0             	mov    %rdx,%rax
  8004213d63:	48 01 c0             	add    %rax,%rax
  8004213d66:	48 01 d0             	add    %rdx,%rax
  8004213d69:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d6d:	48 01 c8             	add    %rcx,%rax
  8004213d70:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213d74:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213d78:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213d7b:	48 63 c9             	movslq %ecx,%rcx
  8004213d7e:	48 83 c1 01          	add    $0x1,%rcx
  8004213d82:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213d86:	48 01 ca             	add    %rcx,%rdx
  8004213d89:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  8004213d8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213d91:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d95:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213d98:	48 63 d0             	movslq %eax,%rdx
  8004213d9b:	48 89 d0             	mov    %rdx,%rax
  8004213d9e:	48 01 c0             	add    %rax,%rax
  8004213da1:	48 01 d0             	add    %rdx,%rax
  8004213da4:	48 c1 e0 03          	shl    $0x3,%rax
  8004213da8:	48 01 c8             	add    %rcx,%rax
  8004213dab:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset =
  8004213daf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213db3:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213db6:	48 63 c9             	movslq %ecx,%rcx
  8004213db9:	48 83 c1 01          	add    $0x1,%rcx
  8004213dbd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213dc1:	48 01 ca             	add    %rcx,%rdx
  8004213dc4:	48 83 c2 08          	add    $0x8,%rdx
  8004213dc8:	48 89 02             	mov    %rax,(%rdx)
	     i++) {
  8004213dcb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004213dcf:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004213dd3:	7f 14                	jg     8004213de9 <dwarf_get_fde_info_for_all_regs+0x30c>
  8004213dd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213dd9:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004213ddd:	0f b7 c0             	movzwl %ax,%eax
  8004213de0:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213de3:	0f 8f e9 fe ff ff    	jg     8004213cd2 <dwarf_get_fde_info_for_all_regs+0x1f5>
	}

	if (row_pc) *row_pc = pc;
  8004213de9:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004213dee:	74 0b                	je     8004213dfb <dwarf_get_fde_info_for_all_regs+0x31e>
  8004213df0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213df4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213df8:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  8004213dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213e00:	c9                   	leaveq 
  8004213e01:	c3                   	retq   

0000008004213e02 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004213e02:	55                   	push   %rbp
  8004213e03:	48 89 e5             	mov    %rsp,%rbp
  8004213e06:	48 83 ec 40          	sub    $0x40,%rsp
  8004213e0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213e0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213e12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213e16:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004213e1a:	44 89 c0             	mov    %r8d,%eax
  8004213e1d:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004213e21:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004213e24:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004213e28:	75 0a                	jne    8004213e34 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004213e2a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213e2f:	e9 e6 01 00 00       	jmpq   800421401a <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004213e34:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213e38:	83 e0 f0             	and    $0xfffffff0,%eax
  8004213e3b:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004213e3e:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004213e42:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213e46:	83 f8 0c             	cmp    $0xc,%eax
  8004213e49:	0f 87 72 01 00 00    	ja     8004213fc1 <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004213e4f:	89 c0                	mov    %eax,%eax
  8004213e51:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213e58:	00 
  8004213e59:	48 b8 00 b4 21 04 80 	movabs $0x800421b400,%rax
  8004213e60:	00 00 00 
  8004213e63:	48 01 d0             	add    %rdx,%rax
  8004213e66:	48 8b 00             	mov    (%rax),%rax
  8004213e69:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004213e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213e6f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213e73:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004213e77:	8b 52 28             	mov    0x28(%rdx),%edx
  8004213e7a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213e7e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213e82:	48 89 cf             	mov    %rcx,%rdi
  8004213e85:	ff d0                	callq  *%rax
  8004213e87:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213e8b:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213e8e:	e9 35 01 00 00       	jmpq   8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004213e93:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213e9b:	48 89 d6             	mov    %rdx,%rsi
  8004213e9e:	48 89 c7             	mov    %rax,%rdi
  8004213ea1:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004213ea8:	00 00 00 
  8004213eab:	ff d0                	callq  *%rax
  8004213ead:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213eb1:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213eb4:	e9 0f 01 00 00       	jmpq   8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004213eb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ebd:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213ec1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213ec5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213ec9:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213ece:	48 89 cf             	mov    %rcx,%rdi
  8004213ed1:	ff d0                	callq  *%rax
  8004213ed3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213ed7:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213eda:	e9 e9 00 00 00       	jmpq   8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004213edf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ee3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213ee7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213eeb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213eef:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213ef4:	48 89 cf             	mov    %rcx,%rdi
  8004213ef7:	ff d0                	callq  *%rax
  8004213ef9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213efd:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213f00:	e9 c3 00 00 00       	jmpq   8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004213f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f09:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f0d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213f11:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213f15:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213f1a:	48 89 cf             	mov    %rcx,%rdi
  8004213f1d:	ff d0                	callq  *%rax
  8004213f1f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213f23:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213f26:	e9 9d 00 00 00       	jmpq   8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004213f2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213f33:	48 89 d6             	mov    %rdx,%rsi
  8004213f36:	48 89 c7             	mov    %rax,%rdi
  8004213f39:	48 b8 f2 0d 21 04 80 	movabs $0x8004210df2,%rax
  8004213f40:	00 00 00 
  8004213f43:	ff d0                	callq  *%rax
  8004213f45:	48 89 c2             	mov    %rax,%rdx
  8004213f48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213f4c:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213f4f:	eb 77                	jmp    8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004213f51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f55:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f59:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213f5d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213f61:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213f66:	48 89 cf             	mov    %rcx,%rdi
  8004213f69:	ff d0                	callq  *%rax
  8004213f6b:	48 0f bf d0          	movswq %ax,%rdx
  8004213f6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213f73:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213f76:	eb 50                	jmp    8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004213f78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f7c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f80:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213f84:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213f88:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213f8d:	48 89 cf             	mov    %rcx,%rdi
  8004213f90:	ff d0                	callq  *%rax
  8004213f92:	48 63 d0             	movslq %eax,%rdx
  8004213f95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213f99:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213f9c:	eb 2a                	jmp    8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004213f9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fa2:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213fa6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213faa:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213fae:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213fb3:	48 89 cf             	mov    %rcx,%rdi
  8004213fb6:	ff d0                	callq  *%rax
  8004213fb8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213fbc:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004213fbf:	eb 07                	jmp    8004213fc8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213fc1:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213fc6:	eb 52                	jmp    800421401a <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004213fc8:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004213fcc:	75 47                	jne    8004214015 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004213fce:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213fd2:	83 f8 01             	cmp    $0x1,%eax
  8004213fd5:	7c 3d                	jl     8004214014 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213fd7:	83 f8 04             	cmp    $0x4,%eax
  8004213fda:	7e 0a                	jle    8004213fe6 <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004213fdc:	83 e8 09             	sub    $0x9,%eax
  8004213fdf:	83 f8 03             	cmp    $0x3,%eax
  8004213fe2:	77 30                	ja     8004214014 <_dwarf_frame_read_lsb_encoded+0x212>
  8004213fe4:	eb 17                	jmp    8004213ffd <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004213fe6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213fea:	48 8b 10             	mov    (%rax),%rdx
  8004213fed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213ff1:	48 01 c2             	add    %rax,%rdx
  8004213ff4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213ff8:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213ffb:	eb 18                	jmp    8004214015 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004213ffd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214001:	48 8b 10             	mov    (%rax),%rdx
  8004214004:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214008:	48 01 c2             	add    %rax,%rdx
  800421400b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421400f:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214012:	eb 01                	jmp    8004214015 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004214014:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004214015:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421401a:	c9                   	leaveq 
  800421401b:	c3                   	retq   

000000800421401c <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  800421401c:	55                   	push   %rbp
  800421401d:	48 89 e5             	mov    %rsp,%rbp
  8004214020:	48 83 ec 50          	sub    $0x50,%rsp
  8004214024:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214028:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421402c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004214030:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214034:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214038:	48 85 c0             	test   %rax,%rax
  800421403b:	74 0f                	je     800421404c <_dwarf_frame_parse_lsb_cie_augment+0x30>
  800421403d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214041:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214045:	0f b6 00             	movzbl (%rax),%eax
  8004214048:	3c 7a                	cmp    $0x7a,%al
  800421404a:	74 35                	je     8004214081 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  800421404c:	48 b9 68 b4 21 04 80 	movabs $0x800421b468,%rcx
  8004214053:	00 00 00 
  8004214056:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  800421405d:	00 00 00 
  8004214060:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004214065:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  800421406c:	00 00 00 
  800421406f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214074:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421407b:	00 00 00 
  800421407e:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214081:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214085:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214089:	48 83 c0 01          	add    $0x1,%rax
  800421408d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004214091:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214095:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214099:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  800421409d:	e9 af 00 00 00       	jmpq   8004214151 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  80042140a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042140a6:	0f b6 00             	movzbl (%rax),%eax
  80042140a9:	0f b6 c0             	movzbl %al,%eax
  80042140ac:	83 f8 50             	cmp    $0x50,%eax
  80042140af:	74 18                	je     80042140c9 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  80042140b1:	83 f8 52             	cmp    $0x52,%eax
  80042140b4:	74 77                	je     800421412d <_dwarf_frame_parse_lsb_cie_augment+0x111>
  80042140b6:	83 f8 4c             	cmp    $0x4c,%eax
  80042140b9:	0f 85 86 00 00 00    	jne    8004214145 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  80042140bf:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  80042140c4:	e9 83 00 00 00       	jmpq   800421414c <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  80042140c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042140cd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042140d1:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  80042140d5:	0f b6 00             	movzbl (%rax),%eax
  80042140d8:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  80042140db:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042140e2:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042140e3:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  80042140e8:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  80042140ec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042140f0:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  80042140f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140f8:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042140fc:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214100:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214106:	48 89 c7             	mov    %rax,%rdi
  8004214109:	48 b8 02 3e 21 04 80 	movabs $0x8004213e02,%rax
  8004214110:	00 00 00 
  8004214113:	ff d0                	callq  *%rax
  8004214115:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004214118:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800421411c:	74 05                	je     8004214123 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  800421411e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214121:	eb 42                	jmp    8004214165 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004214123:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214127:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  800421412b:	eb 1f                	jmp    800421414c <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  800421412d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214131:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214135:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214139:	0f b6 10             	movzbl (%rax),%edx
  800421413c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214140:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004214143:	eb 07                	jmp    800421414c <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214145:	b8 14 00 00 00       	mov    $0x14,%eax
  800421414a:	eb 19                	jmp    8004214165 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  800421414c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	while (*aug_p != '\0') {
  8004214151:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214155:	0f b6 00             	movzbl (%rax),%eax
  8004214158:	84 c0                	test   %al,%al
  800421415a:	0f 85 42 ff ff ff    	jne    80042140a2 <_dwarf_frame_parse_lsb_cie_augment+0x86>
	}

	return (DW_DLE_NONE);
  8004214160:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214165:	c9                   	leaveq 
  8004214166:	c3                   	retq   

0000008004214167 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004214167:	55                   	push   %rbp
  8004214168:	48 89 e5             	mov    %rsp,%rbp
  800421416b:	48 83 ec 60          	sub    $0x60,%rsp
  800421416f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214173:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214177:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421417b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421417f:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004214183:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214188:	75 35                	jne    80042141bf <_dwarf_frame_set_cie+0x58>
  800421418a:	48 b9 9d b4 21 04 80 	movabs $0x800421b49d,%rcx
  8004214191:	00 00 00 
  8004214194:	48 ba e7 b2 21 04 80 	movabs $0x800421b2e7,%rdx
  800421419b:	00 00 00 
  800421419e:	be 7b 02 00 00       	mov    $0x27b,%esi
  80042141a3:	48 bf fc b2 21 04 80 	movabs $0x800421b2fc,%rdi
  80042141aa:	00 00 00 
  80042141ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042141b2:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042141b9:	00 00 00 
  80042141bc:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  80042141bf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042141c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  80042141c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141cb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042141cf:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  80042141d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141d6:	48 8b 10             	mov    (%rax),%rdx
  80042141d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141dd:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042141e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042141e5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042141e9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042141ed:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042141f1:	48 89 d1             	mov    %rdx,%rcx
  80042141f4:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042141f8:	ba 04 00 00 00       	mov    $0x4,%edx
  80042141fd:	48 89 cf             	mov    %rcx,%rdi
  8004214200:	ff d0                	callq  *%rax
  8004214202:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214206:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421420b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421420f:	75 2e                	jne    800421423f <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004214211:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214218:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421421c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214220:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214224:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214228:	48 89 d1             	mov    %rdx,%rcx
  800421422b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800421422f:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214234:	48 89 cf             	mov    %rcx,%rdi
  8004214237:	ff d0                	callq  *%rax
  8004214239:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421423d:	eb 07                	jmp    8004214246 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  800421423f:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214246:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421424a:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421424e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214252:	48 8b 00             	mov    (%rax),%rax
  8004214255:	48 29 c2             	sub    %rax,%rdx
  8004214258:	48 89 d0             	mov    %rdx,%rax
  800421425b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421425f:	73 0a                	jae    800421426b <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214261:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214266:	e9 5d 03 00 00       	jmpq   80042145c8 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  800421426b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421426f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214273:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214277:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421427b:	48 89 d1             	mov    %rdx,%rcx
  800421427e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214281:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214285:	48 89 cf             	mov    %rcx,%rdi
  8004214288:	ff d0                	callq  *%rax
	cie->cie_length = length;
  800421428a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421428e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214292:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214296:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421429a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421429e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042142a2:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042142a6:	48 89 d1             	mov    %rdx,%rcx
  80042142a9:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042142ad:	ba 01 00 00 00       	mov    $0x1,%edx
  80042142b2:	48 89 cf             	mov    %rcx,%rdi
  80042142b5:	ff d0                	callq  *%rax
  80042142b7:	89 c2                	mov    %eax,%edx
  80042142b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142bd:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  80042142c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142c5:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  80042142c9:	66 83 f8 01          	cmp    $0x1,%ax
  80042142cd:	74 26                	je     80042142f5 <_dwarf_frame_set_cie+0x18e>
  80042142cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142d3:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  80042142d7:	66 83 f8 03          	cmp    $0x3,%ax
  80042142db:	74 18                	je     80042142f5 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  80042142dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142e1:	0f b7 40 20          	movzwl 0x20(%rax),%eax
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  80042142e5:	66 83 f8 04          	cmp    $0x4,%ax
  80042142e9:	74 0a                	je     80042142f5 <_dwarf_frame_set_cie+0x18e>
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  80042142eb:	b8 16 00 00 00       	mov    $0x16,%eax
  80042142f0:	e9 d3 02 00 00       	jmpq   80042145c8 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042142f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042142f9:	48 8b 10             	mov    (%rax),%rdx
  80042142fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214300:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214304:	48 01 d0             	add    %rdx,%rax
  8004214307:	48 89 c2             	mov    %rax,%rdx
  800421430a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421430e:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214312:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214316:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421431a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  800421431e:	90                   	nop
  800421431f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214323:	48 8b 00             	mov    (%rax),%rax
  8004214326:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800421432a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421432e:	48 89 0a             	mov    %rcx,(%rdx)
  8004214331:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214335:	48 01 d0             	add    %rdx,%rax
  8004214338:	0f b6 00             	movzbl (%rax),%eax
  800421433b:	84 c0                	test   %al,%al
  800421433d:	75 e0                	jne    800421431f <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  800421433f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214343:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214347:	0f b6 00             	movzbl (%rax),%eax
  800421434a:	84 c0                	test   %al,%al
  800421434c:	74 48                	je     8004214396 <_dwarf_frame_set_cie+0x22f>
  800421434e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214352:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214356:	0f b6 00             	movzbl (%rax),%eax
  8004214359:	3c 7a                	cmp    $0x7a,%al
  800421435b:	74 39                	je     8004214396 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  800421435d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214361:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214365:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214369:	75 07                	jne    8004214372 <_dwarf_frame_set_cie+0x20b>
  800421436b:	b8 04 00 00 00       	mov    $0x4,%eax
  8004214370:	eb 05                	jmp    8004214377 <_dwarf_frame_set_cie+0x210>
  8004214372:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214377:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  800421437a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421437e:	48 8b 40 18          	mov    0x18(%rax),%rax
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214382:	48 01 c2             	add    %rax,%rdx
  8004214385:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214389:	48 89 10             	mov    %rdx,(%rax)
		return (DW_DLE_NONE);
  800421438c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214391:	e9 32 02 00 00       	jmpq   80042145c8 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214396:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421439a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421439e:	48 be a5 b4 21 04 80 	movabs $0x800421b4a5,%rsi
  80042143a5:	00 00 00 
  80042143a8:	48 89 c7             	mov    %rax,%rdi
  80042143ab:	48 b8 a9 07 21 04 80 	movabs $0x80042107a9,%rax
  80042143b2:	00 00 00 
  80042143b5:	ff d0                	callq  *%rax
  80042143b7:	48 85 c0             	test   %rax,%rax
  80042143ba:	74 28                	je     80042143e4 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042143bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143c0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042143c4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042143c8:	8b 52 28             	mov    0x28(%rdx),%edx
  80042143cb:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042143cf:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042143d3:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042143d7:	48 89 cf             	mov    %rcx,%rdi
  80042143da:	ff d0                	callq  *%rax
  80042143dc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042143e0:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042143e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143e8:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042143ec:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042143f0:	48 89 d6             	mov    %rdx,%rsi
  80042143f3:	48 89 c7             	mov    %rax,%rdi
  80042143f6:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  80042143fd:	00 00 00 
  8004214400:	ff d0                	callq  *%rax
  8004214402:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214406:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421440a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421440e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214412:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214416:	48 89 d6             	mov    %rdx,%rsi
  8004214419:	48 89 c7             	mov    %rax,%rdi
  800421441c:	48 b8 f2 0d 21 04 80 	movabs $0x8004210df2,%rax
  8004214423:	00 00 00 
  8004214426:	ff d0                	callq  *%rax
  8004214428:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421442c:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  8004214430:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214434:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214438:	66 83 f8 01          	cmp    $0x1,%ax
  800421443c:	75 2b                	jne    8004214469 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  800421443e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214442:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214446:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421444a:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421444e:	48 89 d1             	mov    %rdx,%rcx
  8004214451:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214455:	ba 01 00 00 00       	mov    $0x1,%edx
  800421445a:	48 89 cf             	mov    %rcx,%rdi
  800421445d:	ff d0                	callq  *%rax
  800421445f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214463:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214467:	eb 26                	jmp    800421448f <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214469:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421446d:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214471:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214475:	48 89 d6             	mov    %rdx,%rsi
  8004214478:	48 89 c7             	mov    %rax,%rdi
  800421447b:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  8004214482:	00 00 00 
  8004214485:	ff d0                	callq  *%rax
  8004214487:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421448b:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  800421448f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214493:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214497:	0f b6 00             	movzbl (%rax),%eax
  800421449a:	3c 7a                	cmp    $0x7a,%al
  800421449c:	0f 85 93 00 00 00    	jne    8004214535 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042144a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144a6:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042144aa:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042144ae:	48 89 d6             	mov    %rdx,%rsi
  80042144b1:	48 89 c7             	mov    %rax,%rdi
  80042144b4:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  80042144bb:	00 00 00 
  80042144be:	ff d0                	callq  *%rax
  80042144c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042144c4:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042144c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042144cc:	48 8b 10             	mov    (%rax),%rdx
  80042144cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144d3:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042144d7:	48 01 d0             	add    %rdx,%rax
  80042144da:	48 89 c2             	mov    %rax,%rdx
  80042144dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144e1:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  80042144e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042144e9:	48 8b 10             	mov    (%rax),%rdx
  80042144ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144f0:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042144f4:	48 01 c2             	add    %rax,%rdx
  80042144f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042144fb:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  80042144fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214502:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214506:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421450a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421450e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214512:	48 89 ce             	mov    %rcx,%rsi
  8004214515:	48 89 c7             	mov    %rax,%rdi
  8004214518:	48 b8 1c 40 21 04 80 	movabs $0x800421401c,%rax
  800421451f:	00 00 00 
  8004214522:	ff d0                	callq  *%rax
  8004214524:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214527:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421452b:	74 08                	je     8004214535 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  800421452d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214530:	e9 93 00 00 00       	jmpq   80042145c8 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214535:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214539:	48 8b 10             	mov    (%rax),%rdx
  800421453c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214540:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214544:	48 01 d0             	add    %rdx,%rax
  8004214547:	48 89 c2             	mov    %rax,%rdx
  800421454a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421454e:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004214552:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214556:	75 2a                	jne    8004214582 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004214558:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421455c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214560:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214564:	48 01 c2             	add    %rax,%rdx
  8004214567:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421456b:	48 8b 00             	mov    (%rax),%rax
  800421456e:	48 29 c2             	sub    %rax,%rdx
  8004214571:	48 89 d0             	mov    %rdx,%rax
  8004214574:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214578:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421457c:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004214580:	eb 28                	jmp    80042145aa <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004214582:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214586:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421458a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421458e:	48 01 c2             	add    %rax,%rdx
  8004214591:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214595:	48 8b 00             	mov    (%rax),%rax
  8004214598:	48 29 c2             	sub    %rax,%rdx
  800421459b:	48 89 d0             	mov    %rdx,%rax
  800421459e:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042145a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145a6:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  80042145aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042145ae:	48 8b 10             	mov    (%rax),%rdx
  80042145b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145b5:	48 8b 40 70          	mov    0x70(%rax),%rax
  80042145b9:	48 01 c2             	add    %rax,%rdx
  80042145bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042145c0:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  80042145c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042145c8:	c9                   	leaveq 
  80042145c9:	c3                   	retq   

00000080042145ca <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  80042145ca:	55                   	push   %rbp
  80042145cb:	48 89 e5             	mov    %rsp,%rbp
  80042145ce:	48 83 ec 70          	sub    $0x70,%rsp
  80042145d2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042145d6:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042145da:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042145de:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042145e2:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  80042145e6:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  80042145ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042145ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  80042145f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145f6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042145fa:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042145fd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214601:	48 8b 10             	mov    (%rax),%rdx
  8004214604:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214608:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421460c:	48 01 d0             	add    %rdx,%rax
  800421460f:	48 89 c2             	mov    %rax,%rdx
  8004214612:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214616:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  800421461a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421461e:	48 8b 10             	mov    (%rax),%rdx
  8004214621:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214625:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214629:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421462d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214631:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214635:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214639:	48 89 d1             	mov    %rdx,%rcx
  800421463c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214640:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214645:	48 89 cf             	mov    %rcx,%rdi
  8004214648:	ff d0                	callq  *%rax
  800421464a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  800421464e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214653:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214657:	75 2e                	jne    8004214687 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  8004214659:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214660:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214664:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214668:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421466c:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214670:	48 89 d1             	mov    %rdx,%rcx
  8004214673:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214677:	ba 08 00 00 00       	mov    $0x8,%edx
  800421467c:	48 89 cf             	mov    %rcx,%rdi
  800421467f:	ff d0                	callq  *%rax
  8004214681:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214685:	eb 07                	jmp    800421468e <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004214687:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  800421468e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214692:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214696:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421469a:	48 8b 00             	mov    (%rax),%rax
  800421469d:	48 29 c2             	sub    %rax,%rdx
  80042146a0:	48 89 d0             	mov    %rdx,%rax
  80042146a3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042146a7:	73 0a                	jae    80042146b3 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042146a9:	b8 12 00 00 00       	mov    $0x12,%eax
  80042146ae:	e9 ca 02 00 00       	jmpq   800421497d <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  80042146b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146b7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042146bb:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  80042146bf:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042146c3:	74 5e                	je     8004214723 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042146c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146cd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042146d1:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042146d5:	48 89 d1             	mov    %rdx,%rcx
  80042146d8:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042146dc:	ba 04 00 00 00       	mov    $0x4,%edx
  80042146e1:	48 89 cf             	mov    %rcx,%rdi
  80042146e4:	ff d0                	callq  *%rax
  80042146e6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042146ea:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  80042146ee:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042146f2:	48 8b 10             	mov    (%rax),%rdx
  80042146f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146f9:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042146fd:	48 29 c2             	sub    %rax,%rdx
  8004214700:	48 89 d0             	mov    %rdx,%rax
  8004214703:	48 83 e8 04          	sub    $0x4,%rax
  8004214707:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  800421470b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421470f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214713:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214717:	75 3d                	jne    8004214756 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214719:	b8 13 00 00 00       	mov    $0x13,%eax
  800421471e:	e9 5a 02 00 00       	jmpq   800421497d <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  8004214723:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214727:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421472b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421472f:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214733:	48 89 d1             	mov    %rdx,%rcx
  8004214736:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214739:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421473d:	48 89 cf             	mov    %rcx,%rdi
  8004214740:	ff d0                	callq  *%rax
  8004214742:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214746:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  800421474a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421474e:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214752:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004214756:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421475a:	0f 84 c9 00 00 00    	je     8004214829 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214760:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214764:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214768:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421476c:	48 8b 00             	mov    (%rax),%rax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421476f:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214773:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214777:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421477b:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800421477f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214783:	48 8b 40 38          	mov    0x38(%rax),%rax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214787:	48 89 c2             	mov    %rax,%rdx
  800421478a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800421478e:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214792:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214796:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800421479a:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421479e:	48 89 c7             	mov    %rax,%rdi
  80042147a1:	48 b8 02 3e 21 04 80 	movabs $0x8004213e02,%rax
  80042147a8:	00 00 00 
  80042147ab:	ff d0                	callq  *%rax
  80042147ad:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  80042147b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042147b4:	74 08                	je     80042147be <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  80042147b6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042147b9:	e9 bf 01 00 00       	jmpq   800421497d <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  80042147be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042147c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147c6:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  80042147ca:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042147ce:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042147d2:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  80042147d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147da:	48 8b 40 38          	mov    0x38(%rax),%rax
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042147de:	48 89 c2             	mov    %rax,%rdx
  80042147e1:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042147e5:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  80042147e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147ed:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042147f1:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042147f5:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  80042147fb:	48 89 c7             	mov    %rax,%rdi
  80042147fe:	48 b8 02 3e 21 04 80 	movabs $0x8004213e02,%rax
  8004214805:	00 00 00 
  8004214808:	ff d0                	callq  *%rax
  800421480a:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  800421480d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214811:	74 08                	je     800421481b <_dwarf_frame_set_fde+0x251>
			return (ret);
  8004214813:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214816:	e9 62 01 00 00       	jmpq   800421497d <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  800421481b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421481f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214823:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004214827:	eb 50                	jmp    8004214879 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214829:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421482d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214831:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214835:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214838:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421483c:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214840:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214844:	48 89 cf             	mov    %rcx,%rdi
  8004214847:	ff d0                	callq  *%rax
  8004214849:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421484d:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214851:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214855:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214859:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421485d:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214860:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214864:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214868:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421486c:	48 89 cf             	mov    %rcx,%rdi
  800421486f:	ff d0                	callq  *%rax
  8004214871:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214875:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  8004214879:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421487d:	74 6b                	je     80042148ea <_dwarf_frame_set_fde+0x320>
  800421487f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214883:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214887:	0f b6 00             	movzbl (%rax),%eax
  800421488a:	3c 7a                	cmp    $0x7a,%al
  800421488c:	75 5c                	jne    80042148ea <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421488e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214892:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214896:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421489a:	48 89 d6             	mov    %rdx,%rsi
  800421489d:	48 89 c7             	mov    %rax,%rdi
  80042148a0:	48 b8 96 0e 21 04 80 	movabs $0x8004210e96,%rax
  80042148a7:	00 00 00 
  80042148aa:	ff d0                	callq  *%rax
  80042148ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042148b0:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042148b4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042148b8:	48 8b 10             	mov    (%rax),%rdx
  80042148bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148bf:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042148c3:	48 01 d0             	add    %rdx,%rax
  80042148c6:	48 89 c2             	mov    %rax,%rdx
  80042148c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148cd:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  80042148d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042148d5:	48 8b 10             	mov    (%rax),%rdx
  80042148d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148dc:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042148e0:	48 01 c2             	add    %rax,%rdx
  80042148e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042148e7:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042148ea:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042148ee:	48 8b 10             	mov    (%rax),%rdx
  80042148f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148f5:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042148f9:	48 01 d0             	add    %rdx,%rax
  80042148fc:	48 89 c2             	mov    %rax,%rdx
  80042148ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214903:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  8004214907:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421490b:	75 2a                	jne    8004214937 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  800421490d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214911:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214919:	48 01 c2             	add    %rax,%rdx
  800421491c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214920:	48 8b 00             	mov    (%rax),%rax
  8004214923:	48 29 c2             	sub    %rax,%rdx
  8004214926:	48 89 d0             	mov    %rdx,%rax
  8004214929:	48 8d 50 04          	lea    0x4(%rax),%rdx
  800421492d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214931:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004214935:	eb 28                	jmp    800421495f <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  8004214937:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421493b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421493f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214943:	48 01 c2             	add    %rax,%rdx
  8004214946:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421494a:	48 8b 00             	mov    (%rax),%rax
  800421494d:	48 29 c2             	sub    %rax,%rdx
  8004214950:	48 89 d0             	mov    %rdx,%rax
  8004214953:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214957:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421495b:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  800421495f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214963:	48 8b 10             	mov    (%rax),%rdx
  8004214966:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421496a:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421496e:	48 01 c2             	add    %rax,%rdx
  8004214971:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214975:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214978:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421497d:	c9                   	leaveq 
  800421497e:	c3                   	retq   

000000800421497f <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800421497f:	55                   	push   %rbp
  8004214980:	48 89 e5             	mov    %rsp,%rbp
  8004214983:	48 83 ec 20          	sub    $0x20,%rsp
  8004214987:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421498b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  800421498f:	48 b8 a0 f6 49 04 80 	movabs $0x800449f6a0,%rax
  8004214996:	00 00 00 
  8004214999:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  800421499d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149a1:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042149a5:	48 85 c0             	test   %rax,%rax
  80042149a8:	74 07                	je     80042149b1 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  80042149aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042149af:	eb 33                	jmp    80042149e4 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  80042149b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149b5:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  80042149b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042149bd:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  80042149c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042149c5:	48 b9 20 de 69 04 80 	movabs $0x800469de20,%rcx
  80042149cc:	00 00 00 
  80042149cf:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  80042149d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042149db:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  80042149df:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042149e4:	c9                   	leaveq 
  80042149e5:	c3                   	retq   

00000080042149e6 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  80042149e6:	55                   	push   %rbp
  80042149e7:	48 89 e5             	mov    %rsp,%rbp
  80042149ea:	48 83 ec 60          	sub    $0x60,%rsp
  80042149ee:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042149f2:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042149f5:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042149f9:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  80042149fd:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214a04:	00 00 00 
  8004214a07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  8004214a0b:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004214a12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a16:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214a1a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  8004214a1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a22:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214a26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214a2a:	48 39 c2             	cmp    %rax,%rdx
  8004214a2d:	0f 86 fe 01 00 00    	jbe    8004214c31 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  8004214a33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214a37:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  8004214a3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a3f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a43:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a47:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a4b:	48 89 d1             	mov    %rdx,%rcx
  8004214a4e:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004214a52:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214a57:	48 89 cf             	mov    %rcx,%rdi
  8004214a5a:	ff d0                	callq  *%rax
  8004214a5c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  8004214a60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214a65:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214a69:	75 2e                	jne    8004214a99 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  8004214a6b:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  8004214a72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a76:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a7a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a7e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a82:	48 89 d1             	mov    %rdx,%rcx
  8004214a85:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004214a89:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214a8e:	48 89 cf             	mov    %rcx,%rdi
  8004214a91:	ff d0                	callq  *%rax
  8004214a93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214a97:	eb 07                	jmp    8004214aa0 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  8004214a99:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  8004214aa0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214aa4:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214aa8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214aac:	48 29 c2             	sub    %rax,%rdx
  8004214aaf:	48 89 d0             	mov    %rdx,%rax
  8004214ab2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214ab6:	72 0d                	jb     8004214ac5 <_dwarf_get_next_fde+0xdf>
  8004214ab8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214abd:	75 10                	jne    8004214acf <_dwarf_get_next_fde+0xe9>
  8004214abf:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004214ac3:	75 0a                	jne    8004214acf <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214ac5:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214aca:	e9 67 01 00 00       	jmpq   8004214c36 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  8004214acf:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004214ad3:	74 11                	je     8004214ae6 <_dwarf_get_next_fde+0x100>
  8004214ad5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214ada:	75 0a                	jne    8004214ae6 <_dwarf_get_next_fde+0x100>
			return(-1);
  8004214adc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214ae1:	e9 50 01 00 00       	jmpq   8004214c36 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  8004214ae6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214aea:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214aee:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214af2:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214af6:	48 89 d1             	mov    %rdx,%rcx
  8004214af9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214afc:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004214b00:	48 89 cf             	mov    %rcx,%rdi
  8004214b03:	ff d0                	callq  *%rax
  8004214b05:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  8004214b09:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004214b0d:	74 79                	je     8004214b88 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  8004214b0f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004214b14:	75 32                	jne    8004214b48 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004214b16:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214b1a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004214b1e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214b22:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004214b26:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004214b2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214b2e:	49 89 f8             	mov    %rdi,%r8
  8004214b31:	48 89 c7             	mov    %rax,%rdi
  8004214b34:	48 b8 67 41 21 04 80 	movabs $0x8004214167,%rax
  8004214b3b:	00 00 00 
  8004214b3e:	ff d0                	callq  *%rax
  8004214b40:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004214b43:	e9 c8 00 00 00       	jmpq   8004214c10 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  8004214b48:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214b4c:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004214b50:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004214b54:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214b58:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214b5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214b60:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214b64:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214b68:	4d 89 c1             	mov    %r8,%r9
  8004214b6b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004214b71:	48 89 c7             	mov    %rax,%rdi
  8004214b74:	48 b8 ca 45 21 04 80 	movabs $0x80042145ca,%rax
  8004214b7b:	00 00 00 
  8004214b7e:	ff d0                	callq  *%rax
  8004214b80:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004214b83:	e9 88 00 00 00       	jmpq   8004214c10 <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004214b88:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214b8c:	75 0b                	jne    8004214b99 <_dwarf_get_next_fde+0x1b3>
  8004214b8e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214b93:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004214b97:	74 0d                	je     8004214ba6 <_dwarf_get_next_fde+0x1c0>
  8004214b99:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004214b9d:	75 36                	jne    8004214bd5 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  8004214b9f:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  8004214ba4:	75 2f                	jne    8004214bd5 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004214ba6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214baa:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004214bae:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214bb2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004214bb6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004214bba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214bbe:	49 89 f8             	mov    %rdi,%r8
  8004214bc1:	48 89 c7             	mov    %rax,%rdi
  8004214bc4:	48 b8 67 41 21 04 80 	movabs $0x8004214167,%rax
  8004214bcb:	00 00 00 
  8004214bce:	ff d0                	callq  *%rax
  8004214bd0:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004214bd3:	eb 3b                	jmp    8004214c10 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  8004214bd5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214bd9:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004214bdd:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004214be1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214be5:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214be9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214bed:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214bf1:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214bf5:	4d 89 c1             	mov    %r8,%r9
  8004214bf8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004214bfe:	48 89 c7             	mov    %rax,%rdi
  8004214c01:	48 b8 ca 45 21 04 80 	movabs $0x80042145ca,%rax
  8004214c08:	00 00 00 
  8004214c0b:	ff d0                	callq  *%rax
  8004214c0d:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  8004214c10:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004214c14:	74 07                	je     8004214c1d <_dwarf_get_next_fde+0x237>
			return(-1);
  8004214c16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214c1b:	eb 19                	jmp    8004214c36 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  8004214c1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214c21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  8004214c25:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214c29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c2d:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  8004214c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214c36:	c9                   	leaveq 
  8004214c37:	c3                   	retq   

0000008004214c38 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  8004214c38:	55                   	push   %rbp
  8004214c39:	48 89 e5             	mov    %rsp,%rbp
  8004214c3c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004214c40:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214c44:	89 f0                	mov    %esi,%eax
  8004214c46:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004214c4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c4e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214c52:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  8004214c56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c5a:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  8004214c5e:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004214c62:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004214c66:	c9                   	leaveq 
  8004214c67:	c3                   	retq   

0000008004214c68 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004214c68:	55                   	push   %rbp
  8004214c69:	48 89 e5             	mov    %rsp,%rbp
  8004214c6c:	48 83 ec 10          	sub    $0x10,%rsp
  8004214c70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004214c74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  8004214c78:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214c7d:	75 0a                	jne    8004214c89 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004214c7f:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214c84:	e9 85 00 00 00       	jmpq   8004214d0e <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004214c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214c8d:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214c91:	48 85 c0             	test   %rax,%rax
  8004214c94:	75 25                	jne    8004214cbb <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  8004214c96:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214c9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214c9e:	48 89 d6             	mov    %rdx,%rsi
  8004214ca1:	48 89 c7             	mov    %rax,%rdi
  8004214ca4:	48 b8 7f 49 21 04 80 	movabs $0x800421497f,%rax
  8004214cab:	00 00 00 
  8004214cae:	ff d0                	callq  *%rax
  8004214cb0:	85 c0                	test   %eax,%eax
  8004214cb2:	74 07                	je     8004214cbb <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  8004214cb4:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214cb9:	eb 53                	jmp    8004214d0e <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  8004214cbb:	48 bf a0 c6 22 04 80 	movabs $0x800422c6a0,%rdi
  8004214cc2:	00 00 00 
  8004214cc5:	48 b8 34 27 21 04 80 	movabs $0x8004212734,%rax
  8004214ccc:	00 00 00 
  8004214ccf:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  8004214cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214cd5:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  8004214cdc:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004214cdd:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214ce4:	00 00 00 
  8004214ce7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214cef:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  8004214cf3:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214cfa:	00 00 00 
  8004214cfd:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214d05:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  8004214d09:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214d0e:	c9                   	leaveq 
  8004214d0f:	c3                   	retq   

0000008004214d10 <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004214d10:	55                   	push   %rbp
  8004214d11:	48 89 e5             	mov    %rsp,%rbp
  8004214d14:	53                   	push   %rbx
  8004214d15:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004214d1c:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004214d20:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004214d24:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004214d2b:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  8004214d32:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004214d39:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  8004214d40:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d44:	48 83 c0 48          	add    $0x48,%rax
  8004214d48:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004214d4c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004214d53:	00 
  8004214d54:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004214d5b:	00 
  8004214d5c:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004214d63:	00 
  8004214d64:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004214d6b:	00 
  8004214d6c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214d70:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214d74:	0f b6 c0             	movzbl %al,%eax
  8004214d77:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004214d7a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004214d81:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214d88:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004214d8f:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214d96:	e9 0a 05 00 00       	jmpq   80042152a5 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  8004214d9b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214da2:	0f b6 00             	movzbl (%rax),%eax
  8004214da5:	84 c0                	test   %al,%al
  8004214da7:	0f 85 78 01 00 00    	jne    8004214f25 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  8004214dad:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214db4:	48 83 c0 01          	add    $0x1,%rax
  8004214db8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  8004214dbf:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004214dc6:	48 89 c7             	mov    %rax,%rdi
  8004214dc9:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004214dd0:	00 00 00 
  8004214dd3:	ff d0                	callq  *%rax
  8004214dd5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  8004214dd9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214de0:	0f b6 00             	movzbl (%rax),%eax
  8004214de3:	0f b6 c0             	movzbl %al,%eax
  8004214de6:	83 f8 02             	cmp    $0x2,%eax
  8004214de9:	74 7a                	je     8004214e65 <_dwarf_lineno_run_program+0x155>
  8004214deb:	83 f8 03             	cmp    $0x3,%eax
  8004214dee:	0f 84 b3 00 00 00    	je     8004214ea7 <_dwarf_lineno_run_program+0x197>
  8004214df4:	83 f8 01             	cmp    $0x1,%eax
  8004214df7:	0f 85 09 01 00 00    	jne    8004214f06 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  8004214dfd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214e04:	48 83 c0 01          	add    $0x1,%rax
  8004214e08:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  8004214e0f:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  8004214e16:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004214e1d:	00 
  8004214e1e:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004214e25:	00 
  8004214e26:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004214e2d:	00 
  8004214e2e:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004214e35:	00 
  8004214e36:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214e3a:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214e3e:	0f b6 c0             	movzbl %al,%eax
  8004214e41:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004214e44:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004214e4b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214e52:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004214e59:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004214e60:	e9 bb 00 00 00       	jmpq   8004214f20 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004214e65:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214e6c:	48 83 c0 01          	add    $0x1,%rax
  8004214e70:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004214e77:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214e7e:	00 00 00 
  8004214e81:	48 8b 00             	mov    (%rax),%rax
  8004214e84:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214e88:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004214e8c:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004214e90:	0f b6 ca             	movzbl %dl,%ecx
  8004214e93:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004214e9a:	89 ce                	mov    %ecx,%esi
  8004214e9c:	48 89 d7             	mov    %rdx,%rdi
  8004214e9f:	ff d0                	callq  *%rax
  8004214ea1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004214ea5:	eb 79                	jmp    8004214f20 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  8004214ea7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214eae:	48 83 c0 01          	add    $0x1,%rax
  8004214eb2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004214eb9:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214ec0:	00 00 00 
  8004214ec3:	48 8b 08             	mov    (%rax),%rcx
  8004214ec6:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004214ecd:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004214ed4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214ed8:	49 89 c8             	mov    %rcx,%r8
  8004214edb:	48 89 d1             	mov    %rdx,%rcx
  8004214ede:	ba 00 00 00 00       	mov    $0x0,%edx
  8004214ee3:	48 89 c7             	mov    %rax,%rdi
  8004214ee6:	48 b8 c8 52 21 04 80 	movabs $0x80042152c8,%rax
  8004214eed:	00 00 00 
  8004214ef0:	ff d0                	callq  *%rax
  8004214ef2:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004214ef5:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004214ef9:	74 09                	je     8004214f04 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  8004214efb:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004214efc:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004214eff:	e9 ba 03 00 00       	jmpq   80042152be <_dwarf_lineno_run_program+0x5ae>
				break;
  8004214f04:	eb 1a                	jmp    8004214f20 <_dwarf_lineno_run_program+0x210>
				p += opsize;
  8004214f06:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004214f0d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214f11:	48 01 d0             	add    %rdx,%rax
  8004214f14:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004214f1b:	e9 85 03 00 00       	jmpq   80042152a5 <_dwarf_lineno_run_program+0x595>
  8004214f20:	e9 80 03 00 00       	jmpq   80042152a5 <_dwarf_lineno_run_program+0x595>
		} else if (*p > 0 && *p < li->li_opbase) {
  8004214f25:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214f2c:	0f b6 00             	movzbl (%rax),%eax
  8004214f2f:	84 c0                	test   %al,%al
  8004214f31:	0f 84 3c 02 00 00    	je     8004215173 <_dwarf_lineno_run_program+0x463>
  8004214f37:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214f3e:	0f b6 10             	movzbl (%rax),%edx
  8004214f41:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004214f45:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214f49:	38 c2                	cmp    %al,%dl
  8004214f4b:	0f 83 22 02 00 00    	jae    8004215173 <_dwarf_lineno_run_program+0x463>
			switch (*p++) {
  8004214f51:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214f58:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214f5c:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004214f63:	0f b6 00             	movzbl (%rax),%eax
  8004214f66:	0f b6 c0             	movzbl %al,%eax
  8004214f69:	83 f8 0c             	cmp    $0xc,%eax
  8004214f6c:	0f 87 fb 01 00 00    	ja     800421516d <_dwarf_lineno_run_program+0x45d>
  8004214f72:	89 c0                	mov    %eax,%eax
  8004214f74:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214f7b:	00 
  8004214f7c:	48 b8 a8 b4 21 04 80 	movabs $0x800421b4a8,%rax
  8004214f83:	00 00 00 
  8004214f86:	48 01 d0             	add    %rdx,%rax
  8004214f89:	48 8b 00             	mov    (%rax),%rax
  8004214f8c:	ff e0                	jmpq   *%rax
				APPEND_ROW;
  8004214f8e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004214f95:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004214f99:	73 0a                	jae    8004214fa5 <_dwarf_lineno_run_program+0x295>
  8004214f9b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214fa0:	e9 19 03 00 00       	jmpq   80042152be <_dwarf_lineno_run_program+0x5ae>
  8004214fa5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fa9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214fad:	48 89 10             	mov    %rdx,(%rax)
  8004214fb0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fb4:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214fbb:	00 
  8004214fbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fc0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214fc4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214fc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fcc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214fd0:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214fd4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214fd8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fdc:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214fe0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fe4:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004214fe7:	89 50 28             	mov    %edx,0x28(%rax)
  8004214fea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fee:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004214ff1:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214ff4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ff8:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004214ffb:	89 50 30             	mov    %edx,0x30(%rax)
  8004214ffe:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215002:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215009:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421500d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215011:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004215018:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  800421501f:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004215026:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  800421502d:	e9 3c 01 00 00       	jmpq   800421516e <_dwarf_lineno_run_program+0x45e>
				address += _dwarf_decode_uleb128(&p) *
  8004215032:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215039:	48 89 c7             	mov    %rax,%rdi
  800421503c:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004215043:	00 00 00 
  8004215046:	ff d0                	callq  *%rax
					li->li_minlen;
  8004215048:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421504c:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				address += _dwarf_decode_uleb128(&p) *
  8004215050:	0f b6 d2             	movzbl %dl,%edx
  8004215053:	48 0f af c2          	imul   %rdx,%rax
  8004215057:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  800421505b:	e9 0e 01 00 00       	jmpq   800421516e <_dwarf_lineno_run_program+0x45e>
				line += _dwarf_decode_sleb128(&p);
  8004215060:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215067:	48 89 c7             	mov    %rax,%rdi
  800421506a:	48 b8 15 0f 21 04 80 	movabs $0x8004210f15,%rax
  8004215071:	00 00 00 
  8004215074:	ff d0                	callq  *%rax
  8004215076:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  800421507a:	e9 ef 00 00 00       	jmpq   800421516e <_dwarf_lineno_run_program+0x45e>
				file = _dwarf_decode_uleb128(&p);
  800421507f:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215086:	48 89 c7             	mov    %rax,%rdi
  8004215089:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004215090:	00 00 00 
  8004215093:	ff d0                	callq  *%rax
  8004215095:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004215099:	e9 d0 00 00 00       	jmpq   800421516e <_dwarf_lineno_run_program+0x45e>
				column = _dwarf_decode_uleb128(&p);
  800421509e:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042150a5:	48 89 c7             	mov    %rax,%rdi
  80042150a8:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  80042150af:	00 00 00 
  80042150b2:	ff d0                	callq  *%rax
  80042150b4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  80042150b8:	e9 b1 00 00 00       	jmpq   800421516e <_dwarf_lineno_run_program+0x45e>
				is_stmt = !is_stmt;
  80042150bd:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042150c1:	0f 94 c0             	sete   %al
  80042150c4:	0f b6 c0             	movzbl %al,%eax
  80042150c7:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  80042150ca:	e9 9f 00 00 00       	jmpq   800421516e <_dwarf_lineno_run_program+0x45e>
				basic_block = 1;
  80042150cf:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  80042150d6:	e9 93 00 00 00       	jmpq   800421516e <_dwarf_lineno_run_program+0x45e>
				address += ADDRESS(255);
  80042150db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042150df:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042150e3:	0f b6 c0             	movzbl %al,%eax
  80042150e6:	ba ff 00 00 00       	mov    $0xff,%edx
  80042150eb:	89 d1                	mov    %edx,%ecx
  80042150ed:	29 c1                	sub    %eax,%ecx
  80042150ef:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042150f3:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042150f7:	0f b6 d8             	movzbl %al,%ebx
  80042150fa:	89 c8                	mov    %ecx,%eax
  80042150fc:	99                   	cltd   
  80042150fd:	f7 fb                	idiv   %ebx
  80042150ff:	89 c2                	mov    %eax,%edx
  8004215101:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215105:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215109:	0f b6 c0             	movzbl %al,%eax
  800421510c:	0f af c2             	imul   %edx,%eax
  800421510f:	48 98                	cltq   
  8004215111:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215115:	eb 57                	jmp    800421516e <_dwarf_lineno_run_program+0x45e>
				address += dbg->decode(&p, 2);
  8004215117:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421511e:	00 00 00 
  8004215121:	48 8b 00             	mov    (%rax),%rax
  8004215124:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215128:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  800421512f:	be 02 00 00 00       	mov    $0x2,%esi
  8004215134:	48 89 d7             	mov    %rdx,%rdi
  8004215137:	ff d0                	callq  *%rax
  8004215139:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  800421513d:	eb 2f                	jmp    800421516e <_dwarf_lineno_run_program+0x45e>
				prologue_end = 1;
  800421513f:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004215146:	eb 26                	jmp    800421516e <_dwarf_lineno_run_program+0x45e>
				epilogue_begin = 1;
  8004215148:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  800421514f:	eb 1d                	jmp    800421516e <_dwarf_lineno_run_program+0x45e>
				isa = _dwarf_decode_uleb128(&p);
  8004215151:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215158:	48 89 c7             	mov    %rax,%rdi
  800421515b:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004215162:	00 00 00 
  8004215165:	ff d0                	callq  *%rax
  8004215167:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  800421516b:	eb 01                	jmp    800421516e <_dwarf_lineno_run_program+0x45e>
				break;
  800421516d:	90                   	nop
		} else {
  800421516e:	e9 32 01 00 00       	jmpq   80042152a5 <_dwarf_lineno_run_program+0x595>
			line += LINE(*p);
  8004215173:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215177:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  800421517b:	0f be c8             	movsbl %al,%ecx
  800421517e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215185:	0f b6 00             	movzbl (%rax),%eax
  8004215188:	0f b6 d0             	movzbl %al,%edx
  800421518b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421518f:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215193:	0f b6 c0             	movzbl %al,%eax
  8004215196:	29 c2                	sub    %eax,%edx
  8004215198:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421519c:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042151a0:	0f b6 f0             	movzbl %al,%esi
  80042151a3:	89 d0                	mov    %edx,%eax
  80042151a5:	99                   	cltd   
  80042151a6:	f7 fe                	idiv   %esi
  80042151a8:	89 d0                	mov    %edx,%eax
  80042151aa:	01 c8                	add    %ecx,%eax
  80042151ac:	48 98                	cltq   
  80042151ae:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  80042151b2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042151b9:	0f b6 00             	movzbl (%rax),%eax
  80042151bc:	0f b6 d0             	movzbl %al,%edx
  80042151bf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042151c3:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042151c7:	0f b6 c0             	movzbl %al,%eax
  80042151ca:	89 d1                	mov    %edx,%ecx
  80042151cc:	29 c1                	sub    %eax,%ecx
  80042151ce:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042151d2:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042151d6:	0f b6 d8             	movzbl %al,%ebx
  80042151d9:	89 c8                	mov    %ecx,%eax
  80042151db:	99                   	cltd   
  80042151dc:	f7 fb                	idiv   %ebx
  80042151de:	89 c2                	mov    %eax,%edx
  80042151e0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042151e4:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  80042151e8:	0f b6 c0             	movzbl %al,%eax
  80042151eb:	0f af c2             	imul   %edx,%eax
  80042151ee:	48 98                	cltq   
  80042151f0:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  80042151f4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042151fb:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042151ff:	73 0a                	jae    800421520b <_dwarf_lineno_run_program+0x4fb>
  8004215201:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215206:	e9 b3 00 00 00       	jmpq   80042152be <_dwarf_lineno_run_program+0x5ae>
  800421520b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421520f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215213:	48 89 10             	mov    %rdx,(%rax)
  8004215216:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421521a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215221:	00 
  8004215222:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215226:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421522a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421522e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215232:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215236:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421523a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421523e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215242:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215246:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421524a:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421524d:	89 50 28             	mov    %edx,0x28(%rax)
  8004215250:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215254:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215257:	89 50 2c             	mov    %edx,0x2c(%rax)
  800421525a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421525e:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215261:	89 50 30             	mov    %edx,0x30(%rax)
  8004215264:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215268:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  800421526f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215273:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215277:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  800421527e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215285:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  800421528c:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004215293:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421529a:	48 83 c0 01          	add    $0x1,%rax
  800421529e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	while (p < pe) {
  80042152a5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042152ac:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  80042152b3:	0f 82 e2 fa ff ff    	jb     8004214d9b <_dwarf_lineno_run_program+0x8b>
	return (DW_DLE_NONE);
  80042152b9:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  80042152be:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  80042152c5:	5b                   	pop    %rbx
  80042152c6:	5d                   	pop    %rbp
  80042152c7:	c3                   	retq   

00000080042152c8 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  80042152c8:	55                   	push   %rbp
  80042152c9:	48 89 e5             	mov    %rsp,%rbp
  80042152cc:	53                   	push   %rbx
  80042152cd:	48 83 ec 48          	sub    $0x48,%rsp
  80042152d1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042152d5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042152d9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042152dd:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  80042152e1:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  80042152e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042152e9:	48 8b 00             	mov    (%rax),%rax
  80042152ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  80042152f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042152f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  80042152f8:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  80042152fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215300:	48 89 c7             	mov    %rax,%rdi
  8004215303:	48 b8 7f 00 21 04 80 	movabs $0x800421007f,%rax
  800421530a:	00 00 00 
  800421530d:	ff d0                	callq  *%rax
  800421530f:	48 98                	cltq   
  8004215311:	48 83 c0 01          	add    $0x1,%rax
  8004215315:	48 01 d8             	add    %rbx,%rax
  8004215318:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  800421531c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215320:	48 89 c7             	mov    %rax,%rdi
  8004215323:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  800421532a:	00 00 00 
  800421532d:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  800421532f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215333:	48 89 c7             	mov    %rax,%rdi
  8004215336:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  800421533d:	00 00 00 
  8004215340:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215342:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215346:	48 89 c7             	mov    %rax,%rdi
  8004215349:	48 b8 a7 0f 21 04 80 	movabs $0x8004210fa7,%rax
  8004215350:	00 00 00 
  8004215353:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215355:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215359:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421535d:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004215360:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215365:	48 83 c4 48          	add    $0x48,%rsp
  8004215369:	5b                   	pop    %rbx
  800421536a:	5d                   	pop    %rbp
  800421536b:	c3                   	retq   

000000800421536c <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  800421536c:	55                   	push   %rbp
  800421536d:	48 89 e5             	mov    %rsp,%rbp
  8004215370:	53                   	push   %rbx
  8004215371:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215378:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  800421537f:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215386:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  800421538d:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215394:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  800421539b:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  80042153a2:	00 
  80042153a3:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  80042153aa:	00 
  80042153ab:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  80042153b2:	00 
  80042153b3:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042153ba:	00 
  80042153bb:	48 b8 10 b5 21 04 80 	movabs $0x800421b510,%rax
  80042153c2:	00 00 00 
  80042153c5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  80042153c9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  80042153cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  80042153d1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042153d8:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  80042153df:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  80042153e3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042153e8:	75 35                	jne    800421541f <_dwarf_lineno_init+0xb3>
  80042153ea:	48 b9 1c b5 21 04 80 	movabs $0x800421b51c,%rcx
  80042153f1:	00 00 00 
  80042153f4:	48 ba 27 b5 21 04 80 	movabs $0x800421b527,%rdx
  80042153fb:	00 00 00 
  80042153fe:	be 13 01 00 00       	mov    $0x113,%esi
  8004215403:	48 bf 3c b5 21 04 80 	movabs $0x800421b53c,%rdi
  800421540a:	00 00 00 
  800421540d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215412:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215419:	00 00 00 
  800421541c:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  800421541f:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215426:	00 00 00 
  8004215429:	48 8b 00             	mov    (%rax),%rax
  800421542c:	48 85 c0             	test   %rax,%rax
  800421542f:	75 35                	jne    8004215466 <_dwarf_lineno_init+0xfa>
  8004215431:	48 b9 53 b5 21 04 80 	movabs $0x800421b553,%rcx
  8004215438:	00 00 00 
  800421543b:	48 ba 27 b5 21 04 80 	movabs $0x800421b527,%rdx
  8004215442:	00 00 00 
  8004215445:	be 14 01 00 00       	mov    $0x114,%esi
  800421544a:	48 bf 3c b5 21 04 80 	movabs $0x800421b53c,%rdi
  8004215451:	00 00 00 
  8004215454:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215459:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215460:	00 00 00 
  8004215463:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215466:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421546a:	48 89 c7             	mov    %rax,%rdi
  800421546d:	48 b8 34 27 21 04 80 	movabs $0x8004212734,%rax
  8004215474:	00 00 00 
  8004215477:	ff d0                	callq  *%rax
  8004215479:	85 c0                	test   %eax,%eax
  800421547b:	74 0a                	je     8004215487 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  800421547d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215482:	e9 4f 04 00 00       	jmpq   80042158d6 <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215487:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421548e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004215492:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215499:	00 00 00 
  800421549c:	48 8b 00             	mov    (%rax),%rax
  800421549f:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042154a3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042154a7:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042154ab:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042154b2:	ba 04 00 00 00       	mov    $0x4,%edx
  80042154b7:	48 89 cf             	mov    %rcx,%rdi
  80042154ba:	ff d0                	callq  *%rax
  80042154bc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  80042154c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042154c5:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042154c9:	75 37                	jne    8004215502 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  80042154cb:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  80042154d2:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042154d9:	00 00 00 
  80042154dc:	48 8b 00             	mov    (%rax),%rax
  80042154df:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042154e3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042154e7:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042154eb:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042154f2:	ba 08 00 00 00       	mov    $0x8,%edx
  80042154f7:	48 89 cf             	mov    %rcx,%rdi
  80042154fa:	ff d0                	callq  *%rax
  80042154fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215500:	eb 07                	jmp    8004215509 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215502:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215509:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421550d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215511:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215518:	48 29 c2             	sub    %rax,%rdx
  800421551b:	48 89 d0             	mov    %rdx,%rax
  800421551e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215522:	73 0a                	jae    800421552e <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215524:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215529:	e9 a8 03 00 00       	jmpq   80042158d6 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  800421552e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215532:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215536:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215539:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004215540:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215544:	48 01 d0             	add    %rdx,%rax
  8004215547:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  800421554b:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215552:	00 00 00 
  8004215555:	48 8b 00             	mov    (%rax),%rax
  8004215558:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421555c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215560:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215564:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421556b:	ba 02 00 00 00       	mov    $0x2,%edx
  8004215570:	48 89 cf             	mov    %rcx,%rdi
  8004215573:	ff d0                	callq  *%rax
  8004215575:	89 c2                	mov    %eax,%edx
  8004215577:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421557b:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  800421557f:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215586:	00 00 00 
  8004215589:	48 8b 00             	mov    (%rax),%rax
  800421558c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215590:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215594:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215598:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421559b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042155a2:	48 89 cf             	mov    %rcx,%rdi
  80042155a5:	ff d0                	callq  *%rax
  80042155a7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042155ab:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  80042155af:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042155b6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  80042155ba:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042155c1:	00 00 00 
  80042155c4:	48 8b 00             	mov    (%rax),%rax
  80042155c7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042155cb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042155cf:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042155d3:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042155da:	ba 01 00 00 00       	mov    $0x1,%edx
  80042155df:	48 89 cf             	mov    %rcx,%rdi
  80042155e2:	ff d0                	callq  *%rax
  80042155e4:	89 c2                	mov    %eax,%edx
  80042155e6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042155ea:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  80042155ed:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042155f4:	00 00 00 
  80042155f7:	48 8b 00             	mov    (%rax),%rax
  80042155fa:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042155fe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215602:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215606:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421560d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215612:	48 89 cf             	mov    %rcx,%rdi
  8004215615:	ff d0                	callq  *%rax
  8004215617:	89 c2                	mov    %eax,%edx
  8004215619:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421561d:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004215620:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215627:	00 00 00 
  800421562a:	48 8b 00             	mov    (%rax),%rax
  800421562d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215631:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215635:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215639:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215640:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215645:	48 89 cf             	mov    %rcx,%rdi
  8004215648:	ff d0                	callq  *%rax
  800421564a:	89 c2                	mov    %eax,%edx
  800421564c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215650:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004215653:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421565a:	00 00 00 
  800421565d:	48 8b 00             	mov    (%rax),%rax
  8004215660:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215664:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215668:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421566c:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215673:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215678:	48 89 cf             	mov    %rcx,%rdi
  800421567b:	ff d0                	callq  *%rax
  800421567d:	89 c2                	mov    %eax,%edx
  800421567f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215683:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215686:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421568d:	00 00 00 
  8004215690:	48 8b 00             	mov    (%rax),%rax
  8004215693:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215697:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421569b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421569f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042156a6:	ba 01 00 00 00       	mov    $0x1,%edx
  80042156ab:	48 89 cf             	mov    %rcx,%rdi
  80042156ae:	ff d0                	callq  *%rax
  80042156b0:	89 c2                	mov    %eax,%edx
  80042156b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042156b6:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  80042156b9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042156bd:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042156c1:	8d 50 fb             	lea    -0x5(%rax),%edx
  80042156c4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042156c8:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042156cc:	0f b6 c0             	movzbl %al,%eax
  80042156cf:	83 e8 01             	sub    $0x1,%eax
  80042156d2:	39 c2                	cmp    %eax,%edx
  80042156d4:	7d 0c                	jge    80042156e2 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042156d6:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042156dd:	e9 f1 01 00 00       	jmpq   80042158d3 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  80042156e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042156e6:	48 bb 60 e4 69 04 80 	movabs $0x800469e460,%rbx
  80042156ed:	00 00 00 
  80042156f0:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  80042156f4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  80042156fb:	eb 41                	jmp    800421573e <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  80042156fd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215701:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215705:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004215708:	48 98                	cltq   
  800421570a:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800421570e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215715:	00 00 00 
  8004215718:	48 8b 00             	mov    (%rax),%rax
  800421571b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421571f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215723:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215727:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421572e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215733:	48 89 cf             	mov    %rcx,%rdi
  8004215736:	ff d0                	callq  *%rax
  8004215738:	88 03                	mov    %al,(%rbx)
	for (i = 1; i < li->li_opbase; i++)
  800421573a:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800421573e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215742:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215746:	0f b6 c0             	movzbl %al,%eax
  8004215749:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  800421574c:	7f af                	jg     80042156fd <_dwarf_lineno_init+0x391>

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  800421574e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215755:	00 
	p = ds->ds_data + offset;
  8004215756:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421575a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421575e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215765:	48 01 d0             	add    %rdx,%rax
  8004215768:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  800421576f:	eb 1f                	jmp    8004215790 <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  8004215771:	90                   	nop
  8004215772:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215779:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421577d:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215784:	0f b6 00             	movzbl (%rax),%eax
  8004215787:	84 c0                	test   %al,%al
  8004215789:	75 e7                	jne    8004215772 <_dwarf_lineno_init+0x406>
			;
		length++;
  800421578b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	while (*p != '\0') {
  8004215790:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215797:	0f b6 00             	movzbl (%rax),%eax
  800421579a:	84 c0                	test   %al,%al
  800421579c:	75 d3                	jne    8004215771 <_dwarf_lineno_init+0x405>
	}
	li->li_inclen = length;
  800421579e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042157a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042157a6:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  80042157aa:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042157b1:	48 89 c2             	mov    %rax,%rdx
  80042157b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042157b8:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042157bc:	48 29 c2             	sub    %rax,%rdx
  80042157bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042157c3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042157c7:	48 98                	cltq   
  80042157c9:	48 39 c2             	cmp    %rax,%rdx
  80042157cc:	7e 0c                	jle    80042157da <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042157ce:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042157d5:	e9 f9 00 00 00       	jmpq   80042158d3 <_dwarf_lineno_init+0x567>
	}
	p++;
  80042157da:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042157e1:	48 83 c0 01          	add    $0x1,%rax
  80042157e5:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  80042157ec:	eb 3c                	jmp    800421582a <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  80042157ee:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042157f5:	00 00 00 
  80042157f8:	48 8b 08             	mov    (%rax),%rcx
  80042157fb:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004215802:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004215809:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421580d:	49 89 c8             	mov    %rcx,%r8
  8004215810:	48 89 d1             	mov    %rdx,%rcx
  8004215813:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215818:	48 89 c7             	mov    %rax,%rdi
  800421581b:	48 b8 c8 52 21 04 80 	movabs $0x80042152c8,%rax
  8004215822:	00 00 00 
  8004215825:	ff d0                	callq  *%rax
  8004215827:	89 45 dc             	mov    %eax,-0x24(%rbp)
	while (*p != '\0') {
  800421582a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215831:	0f b6 00             	movzbl (%rax),%eax
  8004215834:	84 c0                	test   %al,%al
  8004215836:	75 b6                	jne    80042157ee <_dwarf_lineno_init+0x482>
		//p++;
	}

	p++;
  8004215838:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421583f:	48 83 c0 01          	add    $0x1,%rax
  8004215843:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  800421584a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215851:	48 89 c2             	mov    %rax,%rdx
  8004215854:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215858:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421585c:	48 29 c2             	sub    %rax,%rdx
  800421585f:	48 89 d0             	mov    %rdx,%rax
  8004215862:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004215866:	48 89 c2             	mov    %rax,%rdx
  8004215869:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421586d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215871:	48 39 c2             	cmp    %rax,%rdx
  8004215874:	74 09                	je     800421587f <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215876:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  800421587d:	eb 54                	jmp    80042158d3 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  800421587f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215883:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215887:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421588b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  800421588f:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004215896:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  800421589d:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  80042158a4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042158a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042158ac:	4d 89 c1             	mov    %r8,%r9
  80042158af:	49 89 f8             	mov    %rdi,%r8
  80042158b2:	48 89 c7             	mov    %rax,%rdi
  80042158b5:	48 b8 10 4d 21 04 80 	movabs $0x8004214d10,%rax
  80042158bc:	00 00 00 
  80042158bf:	ff d0                	callq  *%rax
  80042158c1:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  80042158c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042158c8:	74 02                	je     80042158cc <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  80042158ca:	eb 07                	jmp    80042158d3 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  80042158cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042158d1:	eb 03                	jmp    80042158d6 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  80042158d3:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  80042158d6:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  80042158dd:	5b                   	pop    %rbx
  80042158de:	5d                   	pop    %rbp
  80042158df:	c3                   	retq   

00000080042158e0 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042158e0:	55                   	push   %rbp
  80042158e1:	48 89 e5             	mov    %rsp,%rbp
  80042158e4:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  80042158eb:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042158f2:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042158f9:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004215900:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  8004215907:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  800421590e:	00 
  800421590f:	75 35                	jne    8004215946 <dwarf_srclines+0x66>
  8004215911:	48 b9 5f b5 21 04 80 	movabs $0x800421b55f,%rcx
  8004215918:	00 00 00 
  800421591b:	48 ba 27 b5 21 04 80 	movabs $0x800421b527,%rdx
  8004215922:	00 00 00 
  8004215925:	be 9a 01 00 00       	mov    $0x19a,%esi
  800421592a:	48 bf 3c b5 21 04 80 	movabs $0x800421b53c,%rdi
  8004215931:	00 00 00 
  8004215934:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215939:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004215940:	00 00 00 
  8004215943:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004215946:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  800421594d:	00 
  800421594e:	75 35                	jne    8004215985 <dwarf_srclines+0xa5>
  8004215950:	48 b9 63 b5 21 04 80 	movabs $0x800421b563,%rcx
  8004215957:	00 00 00 
  800421595a:	48 ba 27 b5 21 04 80 	movabs $0x800421b527,%rdx
  8004215961:	00 00 00 
  8004215964:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004215969:	48 bf 3c b5 21 04 80 	movabs $0x800421b53c,%rdi
  8004215970:	00 00 00 
  8004215973:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215978:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421597f:	00 00 00 
  8004215982:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004215985:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421598c:	ba 88 00 00 00       	mov    $0x88,%edx
  8004215991:	be 00 00 00 00       	mov    $0x0,%esi
  8004215996:	48 89 c7             	mov    %rax,%rdi
  8004215999:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  80042159a0:	00 00 00 
  80042159a3:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  80042159a5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042159ac:	be 10 00 00 00       	mov    $0x10,%esi
  80042159b1:	48 89 c7             	mov    %rax,%rdi
  80042159b4:	48 b8 b9 22 21 04 80 	movabs $0x80042122b9,%rax
  80042159bb:	00 00 00 
  80042159be:	ff d0                	callq  *%rax
  80042159c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042159c4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042159c9:	75 0a                	jne    80042159d5 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042159cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042159d0:	e9 84 00 00 00       	jmpq   8004215a59 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  80042159d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042159d9:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042159dd:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  80042159e4:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  80042159eb:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  80042159f2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042159f9:	49 89 f8             	mov    %rdi,%r8
  80042159fc:	48 89 c7             	mov    %rax,%rdi
  80042159ff:	48 b8 6c 53 21 04 80 	movabs $0x800421536c,%rax
  8004215a06:	00 00 00 
  8004215a09:	ff d0                	callq  *%rax
  8004215a0b:	85 c0                	test   %eax,%eax
  8004215a0d:	74 07                	je     8004215a16 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  8004215a0f:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215a14:	eb 43                	jmp    8004215a59 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004215a16:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004215a1d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004215a21:	48 89 10             	mov    %rdx,(%rax)
  8004215a24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215a28:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215a2c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215a30:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215a34:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215a38:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215a3c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215a40:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215a44:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215a48:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215a4c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215a50:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004215a54:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215a59:	c9                   	leaveq 
  8004215a5a:	c3                   	retq   

0000008004215a5b <_dwarf_find_section>:
  8004215a5b:	55                   	push   %rbp
  8004215a5c:	48 89 e5             	mov    %rsp,%rbp
  8004215a5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004215a63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215a67:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004215a6e:	00 
  8004215a6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215a76:	eb 57                	jmp    8004215acf <_dwarf_find_section+0x74>
  8004215a78:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215a7f:	00 00 00 
  8004215a82:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215a85:	48 63 d2             	movslq %edx,%rdx
  8004215a88:	48 c1 e2 05          	shl    $0x5,%rdx
  8004215a8c:	48 01 d0             	add    %rdx,%rax
  8004215a8f:	48 8b 00             	mov    (%rax),%rax
  8004215a92:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215a96:	48 89 d6             	mov    %rdx,%rsi
  8004215a99:	48 89 c7             	mov    %rax,%rdi
  8004215a9c:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004215aa3:	00 00 00 
  8004215aa6:	ff d0                	callq  *%rax
  8004215aa8:	85 c0                	test   %eax,%eax
  8004215aaa:	75 1f                	jne    8004215acb <_dwarf_find_section+0x70>
  8004215aac:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215aaf:	48 98                	cltq   
  8004215ab1:	48 c1 e0 05          	shl    $0x5,%rax
  8004215ab5:	48 89 c2             	mov    %rax,%rdx
  8004215ab8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215abf:	00 00 00 
  8004215ac2:	48 01 d0             	add    %rdx,%rax
  8004215ac5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215ac9:	eb 0a                	jmp    8004215ad5 <_dwarf_find_section+0x7a>
  8004215acb:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004215acf:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215ad3:	7e a3                	jle    8004215a78 <_dwarf_find_section+0x1d>
  8004215ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215ad9:	c9                   	leaveq 
  8004215ada:	c3                   	retq   

0000008004215adb <find_debug_sections>:
  8004215adb:	55                   	push   %rbp
  8004215adc:	48 89 e5             	mov    %rsp,%rbp
  8004215adf:	48 83 ec 40          	sub    $0x40,%rsp
  8004215ae3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215ae7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215aeb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215aef:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  8004215af6:	00 
  8004215af7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215afb:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004215aff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215b03:	48 01 d0             	add    %rdx,%rax
  8004215b06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004215b0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215b0e:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004215b12:	0f b7 c0             	movzwl %ax,%eax
  8004215b15:	48 c1 e0 06          	shl    $0x6,%rax
  8004215b19:	48 89 c2             	mov    %rax,%rdx
  8004215b1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215b20:	48 01 d0             	add    %rdx,%rax
  8004215b23:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215b27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215b2b:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004215b2f:	0f b7 c0             	movzwl %ax,%eax
  8004215b32:	48 c1 e0 06          	shl    $0x6,%rax
  8004215b36:	48 89 c2             	mov    %rax,%rdx
  8004215b39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215b3d:	48 01 d0             	add    %rdx,%rax
  8004215b40:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215b44:	e9 4b 02 00 00       	jmpq   8004215d94 <find_debug_sections+0x2b9>
  8004215b49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215b4d:	8b 00                	mov    (%rax),%eax
  8004215b4f:	89 c2                	mov    %eax,%edx
  8004215b51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215b55:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004215b59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215b5d:	48 01 c8             	add    %rcx,%rax
  8004215b60:	48 01 d0             	add    %rdx,%rax
  8004215b63:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215b67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b6b:	48 be 6b b5 21 04 80 	movabs $0x800421b56b,%rsi
  8004215b72:	00 00 00 
  8004215b75:	48 89 c7             	mov    %rax,%rdi
  8004215b78:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004215b7f:	00 00 00 
  8004215b82:	ff d0                	callq  *%rax
  8004215b84:	85 c0                	test   %eax,%eax
  8004215b86:	75 4b                	jne    8004215bd3 <find_debug_sections+0xf8>
  8004215b88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215b8c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215b93:	00 00 00 
  8004215b96:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215b9a:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ba1:	00 00 00 
  8004215ba4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215ba8:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215bac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215bb0:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215bb4:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215bbb:	00 00 00 
  8004215bbe:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215bc6:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215bca:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215bce:	e9 bc 01 00 00       	jmpq   8004215d8f <find_debug_sections+0x2b4>
  8004215bd3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215bd7:	48 be 77 b5 21 04 80 	movabs $0x800421b577,%rsi
  8004215bde:	00 00 00 
  8004215be1:	48 89 c7             	mov    %rax,%rdi
  8004215be4:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004215beb:	00 00 00 
  8004215bee:	ff d0                	callq  *%rax
  8004215bf0:	85 c0                	test   %eax,%eax
  8004215bf2:	75 4b                	jne    8004215c3f <find_debug_sections+0x164>
  8004215bf4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215bf8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215bff:	00 00 00 
  8004215c02:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215c06:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215c0d:	00 00 00 
  8004215c10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215c14:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215c18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215c1c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215c20:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215c27:	00 00 00 
  8004215c2a:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004215c2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215c32:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215c36:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215c3a:	e9 50 01 00 00       	jmpq   8004215d8f <find_debug_sections+0x2b4>
  8004215c3f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215c43:	48 be 8f b5 21 04 80 	movabs $0x800421b58f,%rsi
  8004215c4a:	00 00 00 
  8004215c4d:	48 89 c7             	mov    %rax,%rdi
  8004215c50:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004215c57:	00 00 00 
  8004215c5a:	ff d0                	callq  *%rax
  8004215c5c:	85 c0                	test   %eax,%eax
  8004215c5e:	75 4b                	jne    8004215cab <find_debug_sections+0x1d0>
  8004215c60:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215c64:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215c6b:	00 00 00 
  8004215c6e:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004215c72:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215c79:	00 00 00 
  8004215c7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215c80:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215c84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215c88:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215c8c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215c93:	00 00 00 
  8004215c96:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004215c9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215c9e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215ca2:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215ca6:	e9 e4 00 00 00       	jmpq   8004215d8f <find_debug_sections+0x2b4>
  8004215cab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215caf:	48 be 85 b5 21 04 80 	movabs $0x800421b585,%rsi
  8004215cb6:	00 00 00 
  8004215cb9:	48 89 c7             	mov    %rax,%rdi
  8004215cbc:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004215cc3:	00 00 00 
  8004215cc6:	ff d0                	callq  *%rax
  8004215cc8:	85 c0                	test   %eax,%eax
  8004215cca:	75 53                	jne    8004215d1f <find_debug_sections+0x244>
  8004215ccc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215cd0:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215cd4:	48 89 c2             	mov    %rax,%rdx
  8004215cd7:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215cde:	00 00 00 
  8004215ce1:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004215ce5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215ce9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215ced:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215cf4:	00 00 00 
  8004215cf7:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004215cfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215cff:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215d03:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d0a:	00 00 00 
  8004215d0d:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004215d11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215d15:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215d19:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215d1d:	eb 70                	jmp    8004215d8f <find_debug_sections+0x2b4>
  8004215d1f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d23:	48 be 9b b5 21 04 80 	movabs $0x800421b59b,%rsi
  8004215d2a:	00 00 00 
  8004215d2d:	48 89 c7             	mov    %rax,%rdi
  8004215d30:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004215d37:	00 00 00 
  8004215d3a:	ff d0                	callq  *%rax
  8004215d3c:	85 c0                	test   %eax,%eax
  8004215d3e:	75 4f                	jne    8004215d8f <find_debug_sections+0x2b4>
  8004215d40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215d44:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d4b:	00 00 00 
  8004215d4e:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004215d55:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d5c:	00 00 00 
  8004215d5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215d63:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004215d6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215d6e:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215d72:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215d79:	00 00 00 
  8004215d7c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004215d83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215d87:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215d8b:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215d8f:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004215d94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215d98:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004215d9c:	0f 82 a7 fd ff ff    	jb     8004215b49 <find_debug_sections+0x6e>
  8004215da2:	c9                   	leaveq 
  8004215da3:	c3                   	retq   

0000008004215da4 <read_section_headers>:
  8004215da4:	55                   	push   %rbp
  8004215da5:	48 89 e5             	mov    %rsp,%rbp
  8004215da8:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  8004215daf:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004215db6:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  8004215dbd:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004215dc4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215dc9:	ba 14 00 00 00       	mov    $0x14,%edx
  8004215dce:	48 89 f7             	mov    %rsi,%rdi
  8004215dd1:	48 89 d1             	mov    %rdx,%rcx
  8004215dd4:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  8004215dd7:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004215dde:	00 
  8004215ddf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215de3:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004215dea:	48 01 d0             	add    %rdx,%rax
  8004215ded:	48 83 e8 01          	sub    $0x1,%rax
  8004215df1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215df5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215df9:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215dfe:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004215e02:	48 89 d0             	mov    %rdx,%rax
  8004215e05:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215e09:	48 29 c2             	sub    %rax,%rdx
  8004215e0c:	48 89 d0             	mov    %rdx,%rax
  8004215e0f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215e13:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004215e1a:	00 00 00 00 
  8004215e1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215e22:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215e26:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004215e2d:	00 
  8004215e2e:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004215e35:	00 00 00 
  8004215e38:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004215e3f:	75 11                	jne    8004215e52 <read_section_headers+0xae>
  8004215e41:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215e48:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215e4c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215e50:	eb 26                	jmp    8004215e78 <read_section_headers+0xd4>
  8004215e52:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215e59:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004215e5d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215e64:	48 01 c2             	add    %rax,%rdx
  8004215e67:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004215e6e:	ff ff ff 
  8004215e71:	48 01 d0             	add    %rdx,%rax
  8004215e74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215e78:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215e7f:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004215e83:	0f b7 c0             	movzwl %ax,%eax
  8004215e86:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004215e89:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215e90:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004215e94:	0f b7 c0             	movzwl %ax,%eax
  8004215e97:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004215e9a:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215ea1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004215ea5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004215ea8:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004215eac:	48 63 f0             	movslq %eax,%rsi
  8004215eaf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215eb3:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215eba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215ebe:	48 89 c7             	mov    %rax,%rdi
  8004215ec1:	48 b8 e3 64 21 04 80 	movabs $0x80042164e3,%rax
  8004215ec8:	00 00 00 
  8004215ecb:	ff d0                	callq  *%rax
  8004215ecd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215ed1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004215ed5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215ed9:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215edf:	48 89 c2             	mov    %rax,%rdx
  8004215ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215ee6:	48 29 d0             	sub    %rdx,%rax
  8004215ee9:	48 89 c2             	mov    %rax,%rdx
  8004215eec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215ef0:	48 01 d0             	add    %rdx,%rax
  8004215ef3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004215ef7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215efe:	eb 24                	jmp    8004215f24 <read_section_headers+0x180>
  8004215f00:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f03:	48 98                	cltq   
  8004215f05:	48 c1 e0 06          	shl    $0x6,%rax
  8004215f09:	48 89 c2             	mov    %rax,%rdx
  8004215f0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215f10:	48 01 c2             	add    %rax,%rdx
  8004215f13:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f16:	48 98                	cltq   
  8004215f18:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004215f1f:	ff 
  8004215f20:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004215f24:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f27:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004215f2a:	7c d4                	jl     8004215f00 <read_section_headers+0x15c>
  8004215f2c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215f30:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004215f34:	0f b7 c0             	movzwl %ax,%eax
  8004215f37:	48 98                	cltq   
  8004215f39:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f40:	ff 
  8004215f41:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004215f45:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215f4c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215f50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215f54:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215f58:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215f5c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004215f60:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004215f67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215f6b:	48 01 c8             	add    %rcx,%rax
  8004215f6e:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215f75:	48 89 c7             	mov    %rax,%rdi
  8004215f78:	48 b8 e3 64 21 04 80 	movabs $0x80042164e3,%rax
  8004215f7f:	00 00 00 
  8004215f82:	ff d0                	callq  *%rax
  8004215f84:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215f88:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215f8c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215f90:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f94:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004215f98:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004215f9c:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215fa2:	48 29 c2             	sub    %rax,%rdx
  8004215fa5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215fa9:	48 01 c2             	add    %rax,%rdx
  8004215fac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215fb0:	48 01 d0             	add    %rdx,%rax
  8004215fb3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004215fb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215fbe:	e9 04 05 00 00       	jmpq   80042164c7 <read_section_headers+0x723>
  8004215fc3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fc6:	48 98                	cltq   
  8004215fc8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fcf:	ff 
  8004215fd0:	8b 00                	mov    (%rax),%eax
  8004215fd2:	89 c2                	mov    %eax,%edx
  8004215fd4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004215fd8:	48 01 d0             	add    %rdx,%rax
  8004215fdb:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004215fdf:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215fe6:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004215feb:	48 85 c0             	test   %rax,%rax
  8004215fee:	74 35                	je     8004216025 <read_section_headers+0x281>
  8004215ff0:	48 b9 a6 b5 21 04 80 	movabs $0x800421b5a6,%rcx
  8004215ff7:	00 00 00 
  8004215ffa:	48 ba bf b5 21 04 80 	movabs $0x800421b5bf,%rdx
  8004216001:	00 00 00 
  8004216004:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004216009:	48 bf d4 b5 21 04 80 	movabs $0x800421b5d4,%rdi
  8004216010:	00 00 00 
  8004216013:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216018:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421601f:	00 00 00 
  8004216022:	41 ff d0             	callq  *%r8
  8004216025:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421602c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216030:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216034:	48 be 6b b5 21 04 80 	movabs $0x800421b56b,%rsi
  800421603b:	00 00 00 
  800421603e:	48 89 c7             	mov    %rax,%rdi
  8004216041:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004216048:	00 00 00 
  800421604b:	ff d0                	callq  *%rax
  800421604d:	85 c0                	test   %eax,%eax
  800421604f:	0f 85 d8 00 00 00    	jne    800421612d <read_section_headers+0x389>
  8004216055:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216058:	48 98                	cltq   
  800421605a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216061:	ff 
  8004216062:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216066:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216069:	48 98                	cltq   
  800421606b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216072:	ff 
  8004216073:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216077:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421607e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216082:	48 01 c8             	add    %rcx,%rax
  8004216085:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421608c:	48 89 c7             	mov    %rax,%rdi
  800421608f:	48 b8 e3 64 21 04 80 	movabs $0x80042164e3,%rax
  8004216096:	00 00 00 
  8004216099:	ff d0                	callq  *%rax
  800421609b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421609e:	48 98                	cltq   
  80042160a0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042160a7:	ff 
  80042160a8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042160ac:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160af:	48 98                	cltq   
  80042160b1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042160b8:	ff 
  80042160b9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160bd:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042160c1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042160c5:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042160cb:	48 29 c2             	sub    %rax,%rdx
  80042160ce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042160d2:	48 01 c2             	add    %rax,%rdx
  80042160d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042160d9:	48 01 c2             	add    %rax,%rdx
  80042160dc:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160e3:	00 00 00 
  80042160e6:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042160ea:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160f1:	00 00 00 
  80042160f4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042160f8:	48 89 c2             	mov    %rax,%rdx
  80042160fb:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216102:	00 00 00 
  8004216105:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216109:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421610c:	48 98                	cltq   
  800421610e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216115:	ff 
  8004216116:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421611a:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216121:	00 00 00 
  8004216124:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216128:	e9 96 03 00 00       	jmpq   80042164c3 <read_section_headers+0x71f>
  800421612d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216131:	48 be 77 b5 21 04 80 	movabs $0x800421b577,%rsi
  8004216138:	00 00 00 
  800421613b:	48 89 c7             	mov    %rax,%rdi
  800421613e:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004216145:	00 00 00 
  8004216148:	ff d0                	callq  *%rax
  800421614a:	85 c0                	test   %eax,%eax
  800421614c:	0f 85 de 00 00 00    	jne    8004216230 <read_section_headers+0x48c>
  8004216152:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216155:	48 98                	cltq   
  8004216157:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421615e:	ff 
  800421615f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216163:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216166:	48 98                	cltq   
  8004216168:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421616f:	ff 
  8004216170:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216174:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421617b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421617f:	48 01 c8             	add    %rcx,%rax
  8004216182:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216189:	48 89 c7             	mov    %rax,%rdi
  800421618c:	48 b8 e3 64 21 04 80 	movabs $0x80042164e3,%rax
  8004216193:	00 00 00 
  8004216196:	ff d0                	callq  *%rax
  8004216198:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421619b:	48 98                	cltq   
  800421619d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042161a4:	ff 
  80042161a5:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042161a9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042161ac:	48 98                	cltq   
  80042161ae:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042161b5:	ff 
  80042161b6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042161ba:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042161c1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042161c8:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042161ce:	48 29 c2             	sub    %rax,%rdx
  80042161d1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042161d5:	48 01 c2             	add    %rax,%rdx
  80042161d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042161dc:	48 01 c2             	add    %rax,%rdx
  80042161df:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042161e6:	00 00 00 
  80042161e9:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042161ed:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042161f4:	00 00 00 
  80042161f7:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042161fb:	48 89 c2             	mov    %rax,%rdx
  80042161fe:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216205:	00 00 00 
  8004216208:	48 89 50 30          	mov    %rdx,0x30(%rax)
  800421620c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421620f:	48 98                	cltq   
  8004216211:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216218:	ff 
  8004216219:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421621d:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216224:	00 00 00 
  8004216227:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421622b:	e9 93 02 00 00       	jmpq   80042164c3 <read_section_headers+0x71f>
  8004216230:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216234:	48 be 8f b5 21 04 80 	movabs $0x800421b58f,%rsi
  800421623b:	00 00 00 
  800421623e:	48 89 c7             	mov    %rax,%rdi
  8004216241:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  8004216248:	00 00 00 
  800421624b:	ff d0                	callq  *%rax
  800421624d:	85 c0                	test   %eax,%eax
  800421624f:	0f 85 de 00 00 00    	jne    8004216333 <read_section_headers+0x58f>
  8004216255:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216258:	48 98                	cltq   
  800421625a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216261:	ff 
  8004216262:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216266:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216269:	48 98                	cltq   
  800421626b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216272:	ff 
  8004216273:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216277:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421627e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216282:	48 01 c8             	add    %rcx,%rax
  8004216285:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421628c:	48 89 c7             	mov    %rax,%rdi
  800421628f:	48 b8 e3 64 21 04 80 	movabs $0x80042164e3,%rax
  8004216296:	00 00 00 
  8004216299:	ff d0                	callq  *%rax
  800421629b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421629e:	48 98                	cltq   
  80042162a0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042162a7:	ff 
  80042162a8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042162ac:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042162af:	48 98                	cltq   
  80042162b1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042162b8:	ff 
  80042162b9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042162bd:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  80042162c4:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042162cb:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042162d1:	48 29 c2             	sub    %rax,%rdx
  80042162d4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042162d8:	48 01 c2             	add    %rax,%rdx
  80042162db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042162df:	48 01 c2             	add    %rax,%rdx
  80042162e2:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042162e9:	00 00 00 
  80042162ec:	48 89 50 68          	mov    %rdx,0x68(%rax)
  80042162f0:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042162f7:	00 00 00 
  80042162fa:	48 8b 40 68          	mov    0x68(%rax),%rax
  80042162fe:	48 89 c2             	mov    %rax,%rdx
  8004216301:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216308:	00 00 00 
  800421630b:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421630f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216312:	48 98                	cltq   
  8004216314:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421631b:	ff 
  800421631c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216320:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216327:	00 00 00 
  800421632a:	48 89 50 78          	mov    %rdx,0x78(%rax)
  800421632e:	e9 90 01 00 00       	jmpq   80042164c3 <read_section_headers+0x71f>
  8004216333:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216337:	48 be 85 b5 21 04 80 	movabs $0x800421b585,%rsi
  800421633e:	00 00 00 
  8004216341:	48 89 c7             	mov    %rax,%rdi
  8004216344:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  800421634b:	00 00 00 
  800421634e:	ff d0                	callq  *%rax
  8004216350:	85 c0                	test   %eax,%eax
  8004216352:	75 65                	jne    80042163b9 <read_section_headers+0x615>
  8004216354:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216357:	48 98                	cltq   
  8004216359:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216360:	ff 
  8004216361:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216365:	48 89 c2             	mov    %rax,%rdx
  8004216368:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421636f:	00 00 00 
  8004216372:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216376:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421637d:	00 00 00 
  8004216380:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216384:	48 89 c2             	mov    %rax,%rdx
  8004216387:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421638e:	00 00 00 
  8004216391:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216395:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216398:	48 98                	cltq   
  800421639a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042163a1:	ff 
  80042163a2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042163a6:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042163ad:	00 00 00 
  80042163b0:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042163b4:	e9 0a 01 00 00       	jmpq   80042164c3 <read_section_headers+0x71f>
  80042163b9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042163bd:	48 be 9b b5 21 04 80 	movabs $0x800421b59b,%rsi
  80042163c4:	00 00 00 
  80042163c7:	48 89 c7             	mov    %rax,%rdi
  80042163ca:	48 b8 4d 02 21 04 80 	movabs $0x800421024d,%rax
  80042163d1:	00 00 00 
  80042163d4:	ff d0                	callq  *%rax
  80042163d6:	85 c0                	test   %eax,%eax
  80042163d8:	0f 85 e5 00 00 00    	jne    80042164c3 <read_section_headers+0x71f>
  80042163de:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042163e1:	48 98                	cltq   
  80042163e3:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042163ea:	ff 
  80042163eb:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042163ef:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042163f2:	48 98                	cltq   
  80042163f4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042163fb:	ff 
  80042163fc:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216400:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216407:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421640b:	48 01 c8             	add    %rcx,%rax
  800421640e:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216415:	48 89 c7             	mov    %rax,%rdi
  8004216418:	48 b8 e3 64 21 04 80 	movabs $0x80042164e3,%rax
  800421641f:	00 00 00 
  8004216422:	ff d0                	callq  *%rax
  8004216424:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216427:	48 98                	cltq   
  8004216429:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216430:	ff 
  8004216431:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216435:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216438:	48 98                	cltq   
  800421643a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216441:	ff 
  8004216442:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216446:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421644d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216454:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  800421645a:	48 29 c2             	sub    %rax,%rdx
  800421645d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216461:	48 01 c2             	add    %rax,%rdx
  8004216464:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216468:	48 01 c2             	add    %rax,%rdx
  800421646b:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216472:	00 00 00 
  8004216475:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800421647c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216483:	00 00 00 
  8004216486:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800421648d:	48 89 c2             	mov    %rax,%rdx
  8004216490:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216497:	00 00 00 
  800421649a:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  80042164a1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042164a4:	48 98                	cltq   
  80042164a6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042164ad:	ff 
  80042164ae:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042164b2:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042164b9:	00 00 00 
  80042164bc:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  80042164c3:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042164c7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042164ca:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  80042164cd:	0f 8c f0 fa ff ff    	jl     8004215fc3 <read_section_headers+0x21f>
  80042164d3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042164d7:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042164de:	48 01 d0             	add    %rdx,%rax
  80042164e1:	c9                   	leaveq 
  80042164e2:	c3                   	retq   

00000080042164e3 <readseg>:
  80042164e3:	55                   	push   %rbp
  80042164e4:	48 89 e5             	mov    %rsp,%rbp
  80042164e7:	48 83 ec 30          	sub    $0x30,%rsp
  80042164eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042164ef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042164f3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042164f7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042164fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042164ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216503:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216507:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421650b:	48 01 d0             	add    %rdx,%rax
  800421650e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216512:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216516:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421651b:	48 85 c0             	test   %rax,%rax
  800421651e:	74 35                	je     8004216555 <readseg+0x72>
  8004216520:	48 b9 e5 b5 21 04 80 	movabs $0x800421b5e5,%rcx
  8004216527:	00 00 00 
  800421652a:	48 ba bf b5 21 04 80 	movabs $0x800421b5bf,%rdx
  8004216531:	00 00 00 
  8004216534:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216539:	48 bf d4 b5 21 04 80 	movabs $0x800421b5d4,%rdi
  8004216540:	00 00 00 
  8004216543:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216548:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421654f:	00 00 00 
  8004216552:	41 ff d0             	callq  *%r8
  8004216555:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  800421655c:	ff 
  800421655d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216561:	48 c1 e8 09          	shr    $0x9,%rax
  8004216565:	48 83 c0 01          	add    $0x1,%rax
  8004216569:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421656d:	eb 3c                	jmp    80042165ab <readseg+0xc8>
  800421656f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216573:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216577:	48 89 d6             	mov    %rdx,%rsi
  800421657a:	48 89 c7             	mov    %rax,%rdi
  800421657d:	48 b8 73 66 21 04 80 	movabs $0x8004216673,%rax
  8004216584:	00 00 00 
  8004216587:	ff d0                	callq  *%rax
  8004216589:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004216590:	00 
  8004216591:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216595:	48 8b 00             	mov    (%rax),%rax
  8004216598:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  800421659f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042165a3:	48 89 10             	mov    %rdx,(%rax)
  80042165a6:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042165ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042165af:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042165b3:	72 ba                	jb     800421656f <readseg+0x8c>
  80042165b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042165b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042165be:	48 89 c2             	mov    %rax,%rdx
  80042165c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042165c5:	48 01 d0             	add    %rdx,%rax
  80042165c8:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  80042165ce:	76 2f                	jbe    80042165ff <readseg+0x11c>
  80042165d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042165d4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042165d8:	48 89 d6             	mov    %rdx,%rsi
  80042165db:	48 89 c7             	mov    %rax,%rdi
  80042165de:	48 b8 73 66 21 04 80 	movabs $0x8004216673,%rax
  80042165e5:	00 00 00 
  80042165e8:	ff d0                	callq  *%rax
  80042165ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042165ee:	48 8b 00             	mov    (%rax),%rax
  80042165f1:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  80042165f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042165fc:	48 89 10             	mov    %rdx,(%rax)
  80042165ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216603:	48 8b 00             	mov    (%rax),%rax
  8004216606:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421660b:	48 85 c0             	test   %rax,%rax
  800421660e:	74 35                	je     8004216645 <readseg+0x162>
  8004216610:	48 b9 f8 b5 21 04 80 	movabs $0x800421b5f8,%rcx
  8004216617:	00 00 00 
  800421661a:	48 ba bf b5 21 04 80 	movabs $0x800421b5bf,%rdx
  8004216621:	00 00 00 
  8004216624:	be da 00 00 00       	mov    $0xda,%esi
  8004216629:	48 bf d4 b5 21 04 80 	movabs $0x800421b5d4,%rdi
  8004216630:	00 00 00 
  8004216633:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216638:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421663f:	00 00 00 
  8004216642:	41 ff d0             	callq  *%r8
  8004216645:	c9                   	leaveq 
  8004216646:	c3                   	retq   

0000008004216647 <waitdisk>:
  8004216647:	55                   	push   %rbp
  8004216648:	48 89 e5             	mov    %rsp,%rbp
  800421664b:	48 83 ec 10          	sub    $0x10,%rsp
  800421664f:	90                   	nop
  8004216650:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216657:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421665a:	89 c2                	mov    %eax,%edx
  800421665c:	ec                   	in     (%dx),%al
  800421665d:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004216660:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216664:	0f b6 c0             	movzbl %al,%eax
  8004216667:	25 c0 00 00 00       	and    $0xc0,%eax
  800421666c:	83 f8 40             	cmp    $0x40,%eax
  800421666f:	75 df                	jne    8004216650 <waitdisk+0x9>
  8004216671:	c9                   	leaveq 
  8004216672:	c3                   	retq   

0000008004216673 <readsect>:
  8004216673:	55                   	push   %rbp
  8004216674:	48 89 e5             	mov    %rsp,%rbp
  8004216677:	48 83 ec 60          	sub    $0x60,%rsp
  800421667b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421667f:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004216683:	48 b8 47 66 21 04 80 	movabs $0x8004216647,%rax
  800421668a:	00 00 00 
  800421668d:	ff d0                	callq  *%rax
  800421668f:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004216696:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800421669a:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800421669e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042166a1:	ee                   	out    %al,(%dx)
  80042166a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042166a6:	0f b6 c0             	movzbl %al,%eax
  80042166a9:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  80042166b0:	88 45 f3             	mov    %al,-0xd(%rbp)
  80042166b3:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042166b7:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042166ba:	ee                   	out    %al,(%dx)
  80042166bb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042166bf:	48 c1 e8 08          	shr    $0x8,%rax
  80042166c3:	0f b6 c0             	movzbl %al,%eax
  80042166c6:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  80042166cd:	88 45 eb             	mov    %al,-0x15(%rbp)
  80042166d0:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042166d4:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042166d7:	ee                   	out    %al,(%dx)
  80042166d8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042166dc:	48 c1 e8 10          	shr    $0x10,%rax
  80042166e0:	0f b6 c0             	movzbl %al,%eax
  80042166e3:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  80042166ea:	88 45 e3             	mov    %al,-0x1d(%rbp)
  80042166ed:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042166f1:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042166f4:	ee                   	out    %al,(%dx)
  80042166f5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042166f9:	48 c1 e8 18          	shr    $0x18,%rax
  80042166fd:	83 c8 e0             	or     $0xffffffe0,%eax
  8004216700:	0f b6 c0             	movzbl %al,%eax
  8004216703:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  800421670a:	88 45 db             	mov    %al,-0x25(%rbp)
  800421670d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004216711:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216714:	ee                   	out    %al,(%dx)
  8004216715:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  800421671c:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004216720:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216724:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216727:	ee                   	out    %al,(%dx)
  8004216728:	48 b8 47 66 21 04 80 	movabs $0x8004216647,%rax
  800421672f:	00 00 00 
  8004216732:	ff d0                	callq  *%rax
  8004216734:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  800421673b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421673f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004216743:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  800421674a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421674d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004216751:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004216754:	48 89 ce             	mov    %rcx,%rsi
  8004216757:	48 89 f7             	mov    %rsi,%rdi
  800421675a:	89 c1                	mov    %eax,%ecx
  800421675c:	fc                   	cld    
  800421675d:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  800421675f:	89 c8                	mov    %ecx,%eax
  8004216761:	48 89 fe             	mov    %rdi,%rsi
  8004216764:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004216768:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800421676b:	c9                   	leaveq 
  800421676c:	c3                   	retq   
  800421676d:	0f 1f 00             	nopl   (%rax)

0000008004216770 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216770:	fa                   	cli    
	xorw    %ax, %ax
  8004216771:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004216773:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216775:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216777:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216779:	0f 01 16             	lgdt   (%rsi)
  800421677c:	e0 70                	loopne 80042167ee <start64+0x10>
	movl    %cr0, %eax
  800421677e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216781:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004216785:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004216788:	ea                   	(bad)  
  8004216789:	1d                   	.byte 0x1d
  800421678a:	70 08                	jo     8004216794 <start32+0x7>
	...

000000800421678d <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  800421678d:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216791:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216793:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216795:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216797:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  800421679b:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  800421679d:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
  800421679f:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif

	movl %eax,%cr4
  80042167a4:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  80042167a7:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421d86e <bootstack+0x186e>
	movl    %cr0, %eax
  80042167ae:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  80042167b1:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  80042167b4:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  80042167b7:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  80042167bc:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  80042167bf:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  80042167c4:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  80042167c6:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  80042167ca:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  80042167cc:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  80042167cf:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  80042167d4:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  80042167d7:	ea                   	(bad)  
  80042167d8:	6e                   	outsb  %ds:(%rsi),(%dx)
  80042167d9:	70 00                	jo     80042167db <start32+0x4e>
  80042167db:	00 08                	add    %cl,(%rax)
	...

00000080042167de <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  80042167de:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042167e2:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042167e4:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042167e6:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  80042167e8:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  80042167ec:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  80042167ee:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  80042167f0:	48 a1 d8 d5 69 04 80 	movabs 0x800469d5d8,%rax
  80042167f7:	00 00 00 
	movq    %rax,%rsp
  80042167fa:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  80042167fd:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  8004216804:	48 b8 1e 05 20 04 80 	movabs $0x800420051e,%rax
  800421680b:	00 00 00 
	call    *%rax
  800421680e:	ff d0                	callq  *%rax

0000008004216810 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004216810:	eb fe                	jmp    8004216810 <spin>
  8004216812:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004216818 <gdt>:
	...
  8004216820:	ff                   	(bad)  
  8004216821:	ff 00                	incl   (%rax)
  8004216823:	00 00                	add    %al,(%rax)
  8004216825:	9a                   	(bad)  
  8004216826:	af                   	scas   %es:(%rdi),%eax
  8004216827:	00 ff                	add    %bh,%bh
  8004216829:	ff 00                	incl   (%rax)
  800421682b:	00 00                	add    %al,(%rax)
  800421682d:	92                   	xchg   %eax,%edx
  800421682e:	af                   	scas   %es:(%rdi),%eax
	...

0000008004216830 <gdtdesc>:
  8004216830:	17                   	(bad)  
  8004216831:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  8004216837:	90                   	nop

0000008004216838 <gdt32>:
	...
  8004216840:	ff                   	(bad)  
  8004216841:	ff 00                	incl   (%rax)
  8004216843:	00 00                	add    %al,(%rax)
  8004216845:	9a                   	(bad)  
  8004216846:	cf                   	iret   
  8004216847:	00 ff                	add    %bh,%bh
  8004216849:	ff 00                	incl   (%rax)
  800421684b:	00 00                	add    %al,(%rax)
  800421684d:	92                   	xchg   %eax,%edx
  800421684e:	cf                   	iret   
	...

0000008004216850 <gdt32desc>:
  8004216850:	17                   	(bad)  
  8004216851:	00 c8                	add    %cl,%al
  8004216853:	70 00                	jo     8004216855 <gdt32desc+0x5>
	...

0000008004216856 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  8004216856:	90                   	nop

0000008004216857 <sum>:
  8004216857:	55                   	push   %rbp
  8004216858:	48 89 e5             	mov    %rsp,%rbp
  800421685b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421685f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216863:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004216866:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421686d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004216874:	eb 1a                	jmp    8004216890 <sum+0x39>
  8004216876:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216879:	48 63 d0             	movslq %eax,%rdx
  800421687c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216880:	48 01 d0             	add    %rdx,%rax
  8004216883:	0f b6 00             	movzbl (%rax),%eax
  8004216886:	0f b6 c0             	movzbl %al,%eax
  8004216889:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421688c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004216890:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216893:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216896:	7c de                	jl     8004216876 <sum+0x1f>
  8004216898:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421689b:	c9                   	leaveq 
  800421689c:	c3                   	retq   

000000800421689d <mpsearch1>:
  800421689d:	55                   	push   %rbp
  800421689e:	48 89 e5             	mov    %rsp,%rbp
  80042168a1:	48 83 ec 40          	sub    $0x40,%rsp
  80042168a5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042168a9:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042168ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042168b0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042168b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042168b8:	48 c1 e8 0c          	shr    $0xc,%rax
  80042168bc:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042168bf:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042168c2:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042168c9:	00 00 00 
  80042168cc:	48 8b 00             	mov    (%rax),%rax
  80042168cf:	48 39 c2             	cmp    %rax,%rdx
  80042168d2:	72 32                	jb     8004216906 <mpsearch1+0x69>
  80042168d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042168d8:	48 89 c1             	mov    %rax,%rcx
  80042168db:	48 ba 18 b6 21 04 80 	movabs $0x800421b618,%rdx
  80042168e2:	00 00 00 
  80042168e5:	be 74 00 00 00       	mov    $0x74,%esi
  80042168ea:	48 bf 3b b6 21 04 80 	movabs $0x800421b63b,%rdi
  80042168f1:	00 00 00 
  80042168f4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168f9:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004216900:	00 00 00 
  8004216903:	41 ff d0             	callq  *%r8
  8004216906:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421690d:	00 00 00 
  8004216910:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216914:	48 01 d0             	add    %rdx,%rax
  8004216917:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421691b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421691e:	48 63 d0             	movslq %eax,%rdx
  8004216921:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216925:	48 01 d0             	add    %rdx,%rax
  8004216928:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421692c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216930:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216934:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004216937:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421693a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004216941:	00 00 00 
  8004216944:	48 8b 00             	mov    (%rax),%rax
  8004216947:	48 39 c2             	cmp    %rax,%rdx
  800421694a:	72 32                	jb     800421697e <mpsearch1+0xe1>
  800421694c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216950:	48 89 c1             	mov    %rax,%rcx
  8004216953:	48 ba 18 b6 21 04 80 	movabs $0x800421b618,%rdx
  800421695a:	00 00 00 
  800421695d:	be 74 00 00 00       	mov    $0x74,%esi
  8004216962:	48 bf 3b b6 21 04 80 	movabs $0x800421b63b,%rdi
  8004216969:	00 00 00 
  800421696c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216971:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004216978:	00 00 00 
  800421697b:	41 ff d0             	callq  *%r8
  800421697e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216985:	00 00 00 
  8004216988:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421698c:	48 01 d0             	add    %rdx,%rax
  800421698f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216993:	eb 4d                	jmp    80042169e2 <mpsearch1+0x145>
  8004216995:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216999:	ba 04 00 00 00       	mov    $0x4,%edx
  800421699e:	48 be 4e b6 21 04 80 	movabs $0x800421b64e,%rsi
  80042169a5:	00 00 00 
  80042169a8:	48 89 c7             	mov    %rax,%rdi
  80042169ab:	48 b8 5a 05 21 04 80 	movabs $0x800421055a,%rax
  80042169b2:	00 00 00 
  80042169b5:	ff d0                	callq  *%rax
  80042169b7:	85 c0                	test   %eax,%eax
  80042169b9:	75 22                	jne    80042169dd <mpsearch1+0x140>
  80042169bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042169bf:	be 10 00 00 00       	mov    $0x10,%esi
  80042169c4:	48 89 c7             	mov    %rax,%rdi
  80042169c7:	48 b8 57 68 21 04 80 	movabs $0x8004216857,%rax
  80042169ce:	00 00 00 
  80042169d1:	ff d0                	callq  *%rax
  80042169d3:	84 c0                	test   %al,%al
  80042169d5:	75 06                	jne    80042169dd <mpsearch1+0x140>
  80042169d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042169db:	eb 14                	jmp    80042169f1 <mpsearch1+0x154>
  80042169dd:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  80042169e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042169e6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042169ea:	72 a9                	jb     8004216995 <mpsearch1+0xf8>
  80042169ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042169f1:	c9                   	leaveq 
  80042169f2:	c3                   	retq   

00000080042169f3 <mpsearch>:
  80042169f3:	55                   	push   %rbp
  80042169f4:	48 89 e5             	mov    %rsp,%rbp
  80042169f7:	48 83 ec 30          	sub    $0x30,%rsp
  80042169fb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004216a02:	00 
  8004216a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216a07:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216a0b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004216a0e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216a11:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004216a18:	00 00 00 
  8004216a1b:	48 8b 00             	mov    (%rax),%rax
  8004216a1e:	48 39 c2             	cmp    %rax,%rdx
  8004216a21:	72 32                	jb     8004216a55 <mpsearch+0x62>
  8004216a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216a27:	48 89 c1             	mov    %rax,%rcx
  8004216a2a:	48 ba 18 b6 21 04 80 	movabs $0x800421b618,%rdx
  8004216a31:	00 00 00 
  8004216a34:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004216a39:	48 bf 3b b6 21 04 80 	movabs $0x800421b63b,%rdi
  8004216a40:	00 00 00 
  8004216a43:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216a48:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004216a4f:	00 00 00 
  8004216a52:	41 ff d0             	callq  *%r8
  8004216a55:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216a5c:	00 00 00 
  8004216a5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216a63:	48 01 d0             	add    %rdx,%rax
  8004216a66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216a6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216a6e:	48 83 c0 0e          	add    $0xe,%rax
  8004216a72:	0f b7 00             	movzwl (%rax),%eax
  8004216a75:	0f b7 c0             	movzwl %ax,%eax
  8004216a78:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216a7b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004216a7f:	74 2c                	je     8004216aad <mpsearch+0xba>
  8004216a81:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  8004216a85:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216a88:	be 00 04 00 00       	mov    $0x400,%esi
  8004216a8d:	48 89 c7             	mov    %rax,%rdi
  8004216a90:	48 b8 9d 68 21 04 80 	movabs $0x800421689d,%rax
  8004216a97:	00 00 00 
  8004216a9a:	ff d0                	callq  *%rax
  8004216a9c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216aa0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216aa5:	74 49                	je     8004216af0 <mpsearch+0xfd>
  8004216aa7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216aab:	eb 59                	jmp    8004216b06 <mpsearch+0x113>
  8004216aad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216ab1:	48 83 c0 13          	add    $0x13,%rax
  8004216ab5:	0f b7 00             	movzwl (%rax),%eax
  8004216ab8:	0f b7 c0             	movzwl %ax,%eax
  8004216abb:	c1 e0 0a             	shl    $0xa,%eax
  8004216abe:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216ac1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216ac4:	2d 00 04 00 00       	sub    $0x400,%eax
  8004216ac9:	89 c0                	mov    %eax,%eax
  8004216acb:	be 00 04 00 00       	mov    $0x400,%esi
  8004216ad0:	48 89 c7             	mov    %rax,%rdi
  8004216ad3:	48 b8 9d 68 21 04 80 	movabs $0x800421689d,%rax
  8004216ada:	00 00 00 
  8004216add:	ff d0                	callq  *%rax
  8004216adf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216ae3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216ae8:	74 06                	je     8004216af0 <mpsearch+0xfd>
  8004216aea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216aee:	eb 16                	jmp    8004216b06 <mpsearch+0x113>
  8004216af0:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216af5:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  8004216afa:	48 b8 9d 68 21 04 80 	movabs $0x800421689d,%rax
  8004216b01:	00 00 00 
  8004216b04:	ff d0                	callq  *%rax
  8004216b06:	c9                   	leaveq 
  8004216b07:	c3                   	retq   

0000008004216b08 <mpconfig>:
  8004216b08:	55                   	push   %rbp
  8004216b09:	48 89 e5             	mov    %rsp,%rbp
  8004216b0c:	48 83 ec 30          	sub    $0x30,%rsp
  8004216b10:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004216b14:	48 b8 f3 69 21 04 80 	movabs $0x80042169f3,%rax
  8004216b1b:	00 00 00 
  8004216b1e:	ff d0                	callq  *%rax
  8004216b20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216b24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004216b29:	75 0a                	jne    8004216b35 <mpconfig+0x2d>
  8004216b2b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b30:	e9 f6 01 00 00       	jmpq   8004216d2b <mpconfig+0x223>
  8004216b35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216b39:	8b 40 04             	mov    0x4(%rax),%eax
  8004216b3c:	85 c0                	test   %eax,%eax
  8004216b3e:	74 0c                	je     8004216b4c <mpconfig+0x44>
  8004216b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216b44:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004216b48:	84 c0                	test   %al,%al
  8004216b4a:	74 25                	je     8004216b71 <mpconfig+0x69>
  8004216b4c:	48 bf 58 b6 21 04 80 	movabs $0x800421b658,%rdi
  8004216b53:	00 00 00 
  8004216b56:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b5b:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216b62:	00 00 00 
  8004216b65:	ff d2                	callq  *%rdx
  8004216b67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b6c:	e9 ba 01 00 00       	jmpq   8004216d2b <mpconfig+0x223>
  8004216b71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216b75:	8b 40 04             	mov    0x4(%rax),%eax
  8004216b78:	89 c0                	mov    %eax,%eax
  8004216b7a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216b7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216b82:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216b86:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004216b89:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216b8c:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004216b93:	00 00 00 
  8004216b96:	48 8b 00             	mov    (%rax),%rax
  8004216b99:	48 39 c2             	cmp    %rax,%rdx
  8004216b9c:	72 32                	jb     8004216bd0 <mpconfig+0xc8>
  8004216b9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216ba2:	48 89 c1             	mov    %rax,%rcx
  8004216ba5:	48 ba 18 b6 21 04 80 	movabs $0x800421b618,%rdx
  8004216bac:	00 00 00 
  8004216baf:	be ad 00 00 00       	mov    $0xad,%esi
  8004216bb4:	48 bf 3b b6 21 04 80 	movabs $0x800421b63b,%rdi
  8004216bbb:	00 00 00 
  8004216bbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216bc3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004216bca:	00 00 00 
  8004216bcd:	41 ff d0             	callq  *%r8
  8004216bd0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216bd7:	00 00 00 
  8004216bda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216bde:	48 01 d0             	add    %rdx,%rax
  8004216be1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216be5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216be9:	ba 04 00 00 00       	mov    $0x4,%edx
  8004216bee:	48 be 85 b6 21 04 80 	movabs $0x800421b685,%rsi
  8004216bf5:	00 00 00 
  8004216bf8:	48 89 c7             	mov    %rax,%rdi
  8004216bfb:	48 b8 5a 05 21 04 80 	movabs $0x800421055a,%rax
  8004216c02:	00 00 00 
  8004216c05:	ff d0                	callq  *%rax
  8004216c07:	85 c0                	test   %eax,%eax
  8004216c09:	74 25                	je     8004216c30 <mpconfig+0x128>
  8004216c0b:	48 bf 90 b6 21 04 80 	movabs $0x800421b690,%rdi
  8004216c12:	00 00 00 
  8004216c15:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c1a:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216c21:	00 00 00 
  8004216c24:	ff d2                	callq  *%rdx
  8004216c26:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c2b:	e9 fb 00 00 00       	jmpq   8004216d2b <mpconfig+0x223>
  8004216c30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216c34:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004216c38:	0f b7 d0             	movzwl %ax,%edx
  8004216c3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216c3f:	89 d6                	mov    %edx,%esi
  8004216c41:	48 89 c7             	mov    %rax,%rdi
  8004216c44:	48 b8 57 68 21 04 80 	movabs $0x8004216857,%rax
  8004216c4b:	00 00 00 
  8004216c4e:	ff d0                	callq  *%rax
  8004216c50:	84 c0                	test   %al,%al
  8004216c52:	74 25                	je     8004216c79 <mpconfig+0x171>
  8004216c54:	48 bf c8 b6 21 04 80 	movabs $0x800421b6c8,%rdi
  8004216c5b:	00 00 00 
  8004216c5e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c63:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216c6a:	00 00 00 
  8004216c6d:	ff d2                	callq  *%rdx
  8004216c6f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c74:	e9 b2 00 00 00       	jmpq   8004216d2b <mpconfig+0x223>
  8004216c79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216c7d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216c81:	3c 01                	cmp    $0x1,%al
  8004216c83:	74 3b                	je     8004216cc0 <mpconfig+0x1b8>
  8004216c85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216c89:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216c8d:	3c 04                	cmp    $0x4,%al
  8004216c8f:	74 2f                	je     8004216cc0 <mpconfig+0x1b8>
  8004216c91:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216c95:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216c99:	0f b6 c0             	movzbl %al,%eax
  8004216c9c:	89 c6                	mov    %eax,%esi
  8004216c9e:	48 bf f0 b6 21 04 80 	movabs $0x800421b6f0,%rdi
  8004216ca5:	00 00 00 
  8004216ca8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216cad:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216cb4:	00 00 00 
  8004216cb7:	ff d2                	callq  *%rdx
  8004216cb9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216cbe:	eb 6b                	jmp    8004216d2b <mpconfig+0x223>
  8004216cc0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216cc4:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  8004216cc8:	0f b7 c0             	movzwl %ax,%eax
  8004216ccb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216ccf:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  8004216cd3:	0f b7 ca             	movzwl %dx,%ecx
  8004216cd6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216cda:	48 01 ca             	add    %rcx,%rdx
  8004216cdd:	89 c6                	mov    %eax,%esi
  8004216cdf:	48 89 d7             	mov    %rdx,%rdi
  8004216ce2:	48 b8 57 68 21 04 80 	movabs $0x8004216857,%rax
  8004216ce9:	00 00 00 
  8004216cec:	ff d0                	callq  *%rax
  8004216cee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216cf2:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  8004216cf6:	38 d0                	cmp    %dl,%al
  8004216cf8:	74 22                	je     8004216d1c <mpconfig+0x214>
  8004216cfa:	48 bf 10 b7 21 04 80 	movabs $0x800421b710,%rdi
  8004216d01:	00 00 00 
  8004216d04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d09:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216d10:	00 00 00 
  8004216d13:	ff d2                	callq  *%rdx
  8004216d15:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d1a:	eb 0f                	jmp    8004216d2b <mpconfig+0x223>
  8004216d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216d24:	48 89 10             	mov    %rdx,(%rax)
  8004216d27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216d2b:	c9                   	leaveq 
  8004216d2c:	c3                   	retq   

0000008004216d2d <mp_init>:
  8004216d2d:	55                   	push   %rbp
  8004216d2e:	48 89 e5             	mov    %rsp,%rbp
  8004216d31:	53                   	push   %rbx
  8004216d32:	48 83 ec 58          	sub    $0x58,%rsp
  8004216d36:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004216d3d:	00 00 00 
  8004216d40:	48 bb 20 f0 69 04 80 	movabs $0x800469f020,%rbx
  8004216d47:	00 00 00 
  8004216d4a:	48 89 18             	mov    %rbx,(%rax)
  8004216d4d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004216d51:	48 89 c7             	mov    %rax,%rdi
  8004216d54:	48 b8 08 6b 21 04 80 	movabs $0x8004216b08,%rax
  8004216d5b:	00 00 00 
  8004216d5e:	ff d0                	callq  *%rax
  8004216d60:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216d64:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216d69:	75 05                	jne    8004216d70 <mp_init+0x43>
  8004216d6b:	e9 d2 03 00 00       	jmpq   8004217142 <mp_init+0x415>
  8004216d70:	48 b8 00 f0 69 04 80 	movabs $0x800469f000,%rax
  8004216d77:	00 00 00 
  8004216d7a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216d80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d84:	8b 40 24             	mov    0x24(%rax),%eax
  8004216d87:	89 c2                	mov    %eax,%edx
  8004216d89:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004216d90:	00 00 00 
  8004216d93:	48 89 10             	mov    %rdx,(%rax)
  8004216d96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d9a:	48 83 c0 2c          	add    $0x2c,%rax
  8004216d9e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216da2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004216da9:	e9 17 02 00 00       	jmpq   8004216fc5 <mp_init+0x298>
  8004216dae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216db2:	0f b6 00             	movzbl (%rax),%eax
  8004216db5:	0f b6 c0             	movzbl %al,%eax
  8004216db8:	85 c0                	test   %eax,%eax
  8004216dba:	74 16                	je     8004216dd2 <mp_init+0xa5>
  8004216dbc:	85 c0                	test   %eax,%eax
  8004216dbe:	0f 88 b8 01 00 00    	js     8004216f7c <mp_init+0x24f>
  8004216dc4:	83 f8 04             	cmp    $0x4,%eax
  8004216dc7:	0f 8f af 01 00 00    	jg     8004216f7c <mp_init+0x24f>
  8004216dcd:	e9 a3 01 00 00       	jmpq   8004216f75 <mp_init+0x248>
  8004216dd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216dd6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216dda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216dde:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216de2:	0f b6 c0             	movzbl %al,%eax
  8004216de5:	83 e0 02             	and    $0x2,%eax
  8004216de8:	85 c0                	test   %eax,%eax
  8004216dea:	74 51                	je     8004216e3d <mp_init+0x110>
  8004216dec:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216df3:	00 00 00 
  8004216df6:	8b 00                	mov    (%rax),%eax
  8004216df8:	48 98                	cltq   
  8004216dfa:	48 c1 e0 03          	shl    $0x3,%rax
  8004216dfe:	48 89 c2             	mov    %rax,%rdx
  8004216e01:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216e05:	48 01 d0             	add    %rdx,%rax
  8004216e08:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004216e0f:	00 00 00 
  8004216e12:	48 01 c2             	add    %rax,%rdx
  8004216e15:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004216e1c:	00 00 00 
  8004216e1f:	48 89 10             	mov    %rdx,(%rax)
  8004216e22:	48 bf 3d b7 21 04 80 	movabs $0x800421b73d,%rdi
  8004216e29:	00 00 00 
  8004216e2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216e31:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216e38:	00 00 00 
  8004216e3b:	ff d2                	callq  *%rdx
  8004216e3d:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216e44:	00 00 00 
  8004216e47:	8b 00                	mov    (%rax),%eax
  8004216e49:	83 f8 03             	cmp    $0x3,%eax
  8004216e4c:	0f 8f f4 00 00 00    	jg     8004216f46 <mp_init+0x219>
  8004216e52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e56:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004216e5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e5e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216e62:	0f b6 f0             	movzbl %al,%esi
  8004216e65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e69:	8b 78 08             	mov    0x8(%rax),%edi
  8004216e6c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e70:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004216e74:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e78:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004216e7c:	0f b6 c8             	movzbl %al,%ecx
  8004216e7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e83:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216e87:	0f b6 d0             	movzbl %al,%edx
  8004216e8a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e8e:	0f b6 00             	movzbl (%rax),%eax
  8004216e91:	0f b6 c0             	movzbl %al,%eax
  8004216e94:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004216e99:	89 34 24             	mov    %esi,(%rsp)
  8004216e9c:	41 89 f9             	mov    %edi,%r9d
  8004216e9f:	4d 89 d0             	mov    %r10,%r8
  8004216ea2:	89 c6                	mov    %eax,%esi
  8004216ea4:	48 bf 50 b7 21 04 80 	movabs $0x800421b750,%rdi
  8004216eab:	00 00 00 
  8004216eae:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216eb3:	49 ba 90 95 20 04 80 	movabs $0x8004209590,%r10
  8004216eba:	00 00 00 
  8004216ebd:	41 ff d2             	callq  *%r10
  8004216ec0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ec4:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216ec8:	0f b6 c0             	movzbl %al,%eax
  8004216ecb:	83 e0 01             	and    $0x1,%eax
  8004216ece:	85 c0                	test   %eax,%eax
  8004216ed0:	74 57                	je     8004216f29 <mp_init+0x1fc>
  8004216ed2:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216ed9:	00 00 00 
  8004216edc:	8b 30                	mov    (%rax),%esi
  8004216ede:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216ee5:	00 00 00 
  8004216ee8:	8b 00                	mov    (%rax),%eax
  8004216eea:	89 c2                	mov    %eax,%edx
  8004216eec:	48 b9 20 f0 69 04 80 	movabs $0x800469f020,%rcx
  8004216ef3:	00 00 00 
  8004216ef6:	48 63 c6             	movslq %esi,%rax
  8004216ef9:	48 c1 e0 03          	shl    $0x3,%rax
  8004216efd:	48 89 c6             	mov    %rax,%rsi
  8004216f00:	48 c1 e6 04          	shl    $0x4,%rsi
  8004216f04:	48 01 f0             	add    %rsi,%rax
  8004216f07:	48 01 c8             	add    %rcx,%rax
  8004216f0a:	88 10                	mov    %dl,(%rax)
  8004216f0c:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216f13:	00 00 00 
  8004216f16:	8b 00                	mov    (%rax),%eax
  8004216f18:	8d 50 01             	lea    0x1(%rax),%edx
  8004216f1b:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216f22:	00 00 00 
  8004216f25:	89 10                	mov    %edx,(%rax)
  8004216f27:	eb 45                	jmp    8004216f6e <mp_init+0x241>
  8004216f29:	48 bf a0 b7 21 04 80 	movabs $0x800421b7a0,%rdi
  8004216f30:	00 00 00 
  8004216f33:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216f38:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216f3f:	00 00 00 
  8004216f42:	ff d2                	callq  *%rdx
  8004216f44:	eb 28                	jmp    8004216f6e <mp_init+0x241>
  8004216f46:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216f4a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216f4e:	0f b6 c0             	movzbl %al,%eax
  8004216f51:	89 c6                	mov    %eax,%esi
  8004216f53:	48 bf d0 b7 21 04 80 	movabs $0x800421b7d0,%rdi
  8004216f5a:	00 00 00 
  8004216f5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216f62:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216f69:	00 00 00 
  8004216f6c:	ff d2                	callq  *%rdx
  8004216f6e:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004216f73:	eb 4c                	jmp    8004216fc1 <mp_init+0x294>
  8004216f75:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004216f7a:	eb 45                	jmp    8004216fc1 <mp_init+0x294>
  8004216f7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216f80:	0f b6 00             	movzbl (%rax),%eax
  8004216f83:	0f b6 c0             	movzbl %al,%eax
  8004216f86:	89 c6                	mov    %eax,%esi
  8004216f88:	48 bf f8 b7 21 04 80 	movabs $0x800421b7f8,%rdi
  8004216f8f:	00 00 00 
  8004216f92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216f97:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004216f9e:	00 00 00 
  8004216fa1:	ff d2                	callq  *%rdx
  8004216fa3:	48 b8 00 f0 69 04 80 	movabs $0x800469f000,%rax
  8004216faa:	00 00 00 
  8004216fad:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004216fb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216fb7:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216fbb:	0f b7 c0             	movzwl %ax,%eax
  8004216fbe:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216fc1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004216fc5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216fc9:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216fcd:	0f b7 c0             	movzwl %ax,%eax
  8004216fd0:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216fd3:	0f 87 d5 fd ff ff    	ja     8004216dae <mp_init+0x81>
  8004216fd9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004216fe0:	eb 53                	jmp    8004217035 <mp_init+0x308>
  8004216fe2:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004216fe9:	00 00 00 
  8004216fec:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004216fef:	48 c1 e0 03          	shl    $0x3,%rax
  8004216ff3:	48 89 c1             	mov    %rax,%rcx
  8004216ff6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216ffa:	48 01 c8             	add    %rcx,%rax
  8004216ffd:	48 01 d0             	add    %rdx,%rax
  8004217000:	48 83 c0 70          	add    $0x70,%rax
  8004217004:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004217008:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800421700f:	00 00 00 
  8004217012:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217015:	48 c1 e0 03          	shl    $0x3,%rax
  8004217019:	48 89 c1             	mov    %rax,%rcx
  800421701c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217020:	48 01 c8             	add    %rcx,%rax
  8004217023:	48 01 d0             	add    %rdx,%rax
  8004217026:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421702a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217031:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217035:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217039:	76 a7                	jbe    8004216fe2 <mp_init+0x2b5>
  800421703b:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004217042:	00 00 00 
  8004217045:	48 8b 00             	mov    (%rax),%rax
  8004217048:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  800421704f:	48 b8 00 f0 69 04 80 	movabs $0x800469f000,%rax
  8004217056:	00 00 00 
  8004217059:	8b 00                	mov    (%rax),%eax
  800421705b:	85 c0                	test   %eax,%eax
  800421705d:	75 41                	jne    80042170a0 <mp_init+0x373>
  800421705f:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004217066:	00 00 00 
  8004217069:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  800421706f:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004217076:	00 00 00 
  8004217079:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217080:	48 bf 18 b8 21 04 80 	movabs $0x800421b818,%rdi
  8004217087:	00 00 00 
  800421708a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421708f:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004217096:	00 00 00 
  8004217099:	ff d2                	callq  *%rdx
  800421709b:	e9 a2 00 00 00       	jmpq   8004217142 <mp_init+0x415>
  80042170a0:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  80042170a7:	00 00 00 
  80042170aa:	8b 10                	mov    (%rax),%edx
  80042170ac:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  80042170b3:	00 00 00 
  80042170b6:	48 8b 00             	mov    (%rax),%rax
  80042170b9:	0f b6 00             	movzbl (%rax),%eax
  80042170bc:	0f b6 c0             	movzbl %al,%eax
  80042170bf:	89 c6                	mov    %eax,%esi
  80042170c1:	48 bf 44 b8 21 04 80 	movabs $0x800421b844,%rdi
  80042170c8:	00 00 00 
  80042170cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042170d0:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  80042170d7:	00 00 00 
  80042170da:	ff d1                	callq  *%rcx
  80042170dc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042170e0:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042170e4:	84 c0                	test   %al,%al
  80042170e6:	74 5a                	je     8004217142 <mp_init+0x415>
  80042170e8:	48 bf 68 b8 21 04 80 	movabs $0x800421b868,%rdi
  80042170ef:	00 00 00 
  80042170f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042170f7:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  80042170fe:	00 00 00 
  8004217101:	ff d2                	callq  *%rdx
  8004217103:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  800421710a:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800421710e:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004217112:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217115:	ee                   	out    %al,(%dx)
  8004217116:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800421711d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217120:	89 c2                	mov    %eax,%edx
  8004217122:	ec                   	in     (%dx),%al
  8004217123:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004217126:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  800421712a:	83 c8 01             	or     $0x1,%eax
  800421712d:	0f b6 c0             	movzbl %al,%eax
  8004217130:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004217137:	88 45 bb             	mov    %al,-0x45(%rbp)
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800421713a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  800421713e:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217141:	ee                   	out    %al,(%dx)
  8004217142:	48 83 c4 58          	add    $0x58,%rsp
  8004217146:	5b                   	pop    %rbx
  8004217147:	5d                   	pop    %rbp
  8004217148:	c3                   	retq   

0000008004217149 <lapicw>:
  8004217149:	55                   	push   %rbp
  800421714a:	48 89 e5             	mov    %rsp,%rbp
  800421714d:	48 83 ec 08          	sub    $0x8,%rsp
  8004217151:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217154:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004217157:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  800421715e:	00 00 00 
  8004217161:	48 8b 00             	mov    (%rax),%rax
  8004217164:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217167:	48 63 d2             	movslq %edx,%rdx
  800421716a:	48 c1 e2 02          	shl    $0x2,%rdx
  800421716e:	48 01 c2             	add    %rax,%rdx
  8004217171:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217174:	89 02                	mov    %eax,(%rdx)
  8004217176:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  800421717d:	00 00 00 
  8004217180:	48 8b 00             	mov    (%rax),%rax
  8004217183:	48 83 c0 20          	add    $0x20,%rax
  8004217187:	8b 00                	mov    (%rax),%eax
  8004217189:	c9                   	leaveq 
  800421718a:	c3                   	retq   

000000800421718b <lapic_init>:
  800421718b:	55                   	push   %rbp
  800421718c:	48 89 e5             	mov    %rsp,%rbp
  800421718f:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004217196:	00 00 00 
  8004217199:	48 8b 00             	mov    (%rax),%rax
  800421719c:	48 85 c0             	test   %rax,%rax
  800421719f:	75 05                	jne    80042171a6 <lapic_init+0x1b>
  80042171a1:	e9 da 01 00 00       	jmpq   8004217380 <lapic_init+0x1f5>
  80042171a6:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  80042171ad:	00 00 00 
  80042171b0:	48 8b 00             	mov    (%rax),%rax
  80042171b3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042171b8:	48 89 c7             	mov    %rax,%rdi
  80042171bb:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  80042171c2:	00 00 00 
  80042171c5:	ff d0                	callq  *%rax
  80042171c7:	48 ba 08 00 6e 04 80 	movabs $0x80046e0008,%rdx
  80042171ce:	00 00 00 
  80042171d1:	48 89 02             	mov    %rax,(%rdx)
  80042171d4:	be 27 01 00 00       	mov    $0x127,%esi
  80042171d9:	bf 3c 00 00 00       	mov    $0x3c,%edi
  80042171de:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042171e5:	00 00 00 
  80042171e8:	ff d0                	callq  *%rax
  80042171ea:	be 0b 00 00 00       	mov    $0xb,%esi
  80042171ef:	bf f8 00 00 00       	mov    $0xf8,%edi
  80042171f4:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042171fb:	00 00 00 
  80042171fe:	ff d0                	callq  *%rax
  8004217200:	be 20 00 02 00       	mov    $0x20020,%esi
  8004217205:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421720a:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217211:	00 00 00 
  8004217214:	ff d0                	callq  *%rax
  8004217216:	be 80 96 98 00       	mov    $0x989680,%esi
  800421721b:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004217220:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217227:	00 00 00 
  800421722a:	ff d0                	callq  *%rax
  800421722c:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004217233:	00 00 00 
  8004217236:	ff d0                	callq  *%rax
  8004217238:	48 98                	cltq   
  800421723a:	48 c1 e0 03          	shl    $0x3,%rax
  800421723e:	48 89 c2             	mov    %rax,%rdx
  8004217241:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217245:	48 01 d0             	add    %rdx,%rax
  8004217248:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800421724f:	00 00 00 
  8004217252:	48 01 c2             	add    %rax,%rdx
  8004217255:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  800421725c:	00 00 00 
  800421725f:	48 8b 00             	mov    (%rax),%rax
  8004217262:	48 39 c2             	cmp    %rax,%rdx
  8004217265:	74 16                	je     800421727d <lapic_init+0xf2>
  8004217267:	be 00 00 01 00       	mov    $0x10000,%esi
  800421726c:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217271:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217278:	00 00 00 
  800421727b:	ff d0                	callq  *%rax
  800421727d:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217282:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217287:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  800421728e:	00 00 00 
  8004217291:	ff d0                	callq  *%rax
  8004217293:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  800421729a:	00 00 00 
  800421729d:	48 8b 00             	mov    (%rax),%rax
  80042172a0:	48 83 c0 30          	add    $0x30,%rax
  80042172a4:	8b 00                	mov    (%rax),%eax
  80042172a6:	c1 e8 10             	shr    $0x10,%eax
  80042172a9:	0f b6 c0             	movzbl %al,%eax
  80042172ac:	83 f8 03             	cmp    $0x3,%eax
  80042172af:	76 16                	jbe    80042172c7 <lapic_init+0x13c>
  80042172b1:	be 00 00 01 00       	mov    $0x10000,%esi
  80042172b6:	bf d0 00 00 00       	mov    $0xd0,%edi
  80042172bb:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042172c2:	00 00 00 
  80042172c5:	ff d0                	callq  *%rax
  80042172c7:	be 33 00 00 00       	mov    $0x33,%esi
  80042172cc:	bf dc 00 00 00       	mov    $0xdc,%edi
  80042172d1:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042172d8:	00 00 00 
  80042172db:	ff d0                	callq  *%rax
  80042172dd:	be 00 00 00 00       	mov    $0x0,%esi
  80042172e2:	bf a0 00 00 00       	mov    $0xa0,%edi
  80042172e7:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042172ee:	00 00 00 
  80042172f1:	ff d0                	callq  *%rax
  80042172f3:	be 00 00 00 00       	mov    $0x0,%esi
  80042172f8:	bf a0 00 00 00       	mov    $0xa0,%edi
  80042172fd:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217304:	00 00 00 
  8004217307:	ff d0                	callq  *%rax
  8004217309:	be 00 00 00 00       	mov    $0x0,%esi
  800421730e:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217313:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  800421731a:	00 00 00 
  800421731d:	ff d0                	callq  *%rax
  800421731f:	be 00 00 00 00       	mov    $0x0,%esi
  8004217324:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217329:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217330:	00 00 00 
  8004217333:	ff d0                	callq  *%rax
  8004217335:	be 00 85 08 00       	mov    $0x88500,%esi
  800421733a:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421733f:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217346:	00 00 00 
  8004217349:	ff d0                	callq  *%rax
  800421734b:	90                   	nop
  800421734c:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  8004217353:	00 00 00 
  8004217356:	48 8b 00             	mov    (%rax),%rax
  8004217359:	48 05 00 03 00 00    	add    $0x300,%rax
  800421735f:	8b 00                	mov    (%rax),%eax
  8004217361:	25 00 10 00 00       	and    $0x1000,%eax
  8004217366:	85 c0                	test   %eax,%eax
  8004217368:	75 e2                	jne    800421734c <lapic_init+0x1c1>
  800421736a:	be 00 00 00 00       	mov    $0x0,%esi
  800421736f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217374:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  800421737b:	00 00 00 
  800421737e:	ff d0                	callq  *%rax
  8004217380:	5d                   	pop    %rbp
  8004217381:	c3                   	retq   

0000008004217382 <cpunum>:
  8004217382:	55                   	push   %rbp
  8004217383:	48 89 e5             	mov    %rsp,%rbp
  8004217386:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  800421738d:	00 00 00 
  8004217390:	48 8b 00             	mov    (%rax),%rax
  8004217393:	48 85 c0             	test   %rax,%rax
  8004217396:	74 18                	je     80042173b0 <cpunum+0x2e>
  8004217398:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  800421739f:	00 00 00 
  80042173a2:	48 8b 00             	mov    (%rax),%rax
  80042173a5:	48 83 c0 20          	add    $0x20,%rax
  80042173a9:	8b 00                	mov    (%rax),%eax
  80042173ab:	c1 e8 18             	shr    $0x18,%eax
  80042173ae:	eb 05                	jmp    80042173b5 <cpunum+0x33>
  80042173b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173b5:	5d                   	pop    %rbp
  80042173b6:	c3                   	retq   

00000080042173b7 <lapic_eoi>:
  80042173b7:	55                   	push   %rbp
  80042173b8:	48 89 e5             	mov    %rsp,%rbp
  80042173bb:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  80042173c2:	00 00 00 
  80042173c5:	48 8b 00             	mov    (%rax),%rax
  80042173c8:	48 85 c0             	test   %rax,%rax
  80042173cb:	74 16                	je     80042173e3 <lapic_eoi+0x2c>
  80042173cd:	be 00 00 00 00       	mov    $0x0,%esi
  80042173d2:	bf 2c 00 00 00       	mov    $0x2c,%edi
  80042173d7:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042173de:	00 00 00 
  80042173e1:	ff d0                	callq  *%rax
  80042173e3:	5d                   	pop    %rbp
  80042173e4:	c3                   	retq   

00000080042173e5 <microdelay>:
  80042173e5:	55                   	push   %rbp
  80042173e6:	48 89 e5             	mov    %rsp,%rbp
  80042173e9:	48 83 ec 04          	sub    $0x4,%rsp
  80042173ed:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042173f0:	c9                   	leaveq 
  80042173f1:	c3                   	retq   

00000080042173f2 <lapic_startap>:
  80042173f2:	55                   	push   %rbp
  80042173f3:	48 89 e5             	mov    %rsp,%rbp
  80042173f6:	48 83 ec 40          	sub    $0x40,%rsp
  80042173fa:	89 f8                	mov    %edi,%eax
  80042173fc:	89 75 c8             	mov    %esi,-0x38(%rbp)
  80042173ff:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004217402:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004217409:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  800421740d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217411:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217414:	ee                   	out    %al,(%dx)
  8004217415:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  800421741c:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217420:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217424:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217427:	ee                   	out    %al,(%dx)
  8004217428:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  800421742f:	00 
  8004217430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217434:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217438:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421743b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421743e:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004217445:	00 00 00 
  8004217448:	48 8b 00             	mov    (%rax),%rax
  800421744b:	48 39 c2             	cmp    %rax,%rdx
  800421744e:	72 32                	jb     8004217482 <lapic_startap+0x90>
  8004217450:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217454:	48 89 c1             	mov    %rax,%rcx
  8004217457:	48 ba b0 b8 21 04 80 	movabs $0x800421b8b0,%rdx
  800421745e:	00 00 00 
  8004217461:	be 99 00 00 00       	mov    $0x99,%esi
  8004217466:	48 bf d3 b8 21 04 80 	movabs $0x800421b8d3,%rdi
  800421746d:	00 00 00 
  8004217470:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217475:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  800421747c:	00 00 00 
  800421747f:	41 ff d0             	callq  *%r8
  8004217482:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217489:	00 00 00 
  800421748c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217490:	48 01 d0             	add    %rdx,%rax
  8004217493:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217497:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421749b:	66 c7 00 00 00       	movw   $0x0,(%rax)
  80042174a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042174a4:	48 8d 50 02          	lea    0x2(%rax),%rdx
  80042174a8:	8b 45 c8             	mov    -0x38(%rbp),%eax
  80042174ab:	c1 e8 04             	shr    $0x4,%eax
  80042174ae:	66 89 02             	mov    %ax,(%rdx)
  80042174b1:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042174b5:	c1 e0 18             	shl    $0x18,%eax
  80042174b8:	89 c6                	mov    %eax,%esi
  80042174ba:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042174bf:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042174c6:	00 00 00 
  80042174c9:	ff d0                	callq  *%rax
  80042174cb:	be 00 c5 00 00       	mov    $0xc500,%esi
  80042174d0:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042174d5:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  80042174dc:	00 00 00 
  80042174df:	ff d0                	callq  *%rax
  80042174e1:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042174e6:	48 b8 e5 73 21 04 80 	movabs $0x80042173e5,%rax
  80042174ed:	00 00 00 
  80042174f0:	ff d0                	callq  *%rax
  80042174f2:	be 00 85 00 00       	mov    $0x8500,%esi
  80042174f7:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042174fc:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217503:	00 00 00 
  8004217506:	ff d0                	callq  *%rax
  8004217508:	bf 64 00 00 00       	mov    $0x64,%edi
  800421750d:	48 b8 e5 73 21 04 80 	movabs $0x80042173e5,%rax
  8004217514:	00 00 00 
  8004217517:	ff d0                	callq  *%rax
  8004217519:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217520:	eb 4b                	jmp    800421756d <lapic_startap+0x17b>
  8004217522:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217526:	c1 e0 18             	shl    $0x18,%eax
  8004217529:	89 c6                	mov    %eax,%esi
  800421752b:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217530:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217537:	00 00 00 
  800421753a:	ff d0                	callq  *%rax
  800421753c:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421753f:	c1 e8 0c             	shr    $0xc,%eax
  8004217542:	80 cc 06             	or     $0x6,%ah
  8004217545:	89 c6                	mov    %eax,%esi
  8004217547:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421754c:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217553:	00 00 00 
  8004217556:	ff d0                	callq  *%rax
  8004217558:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421755d:	48 b8 e5 73 21 04 80 	movabs $0x80042173e5,%rax
  8004217564:	00 00 00 
  8004217567:	ff d0                	callq  *%rax
  8004217569:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421756d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217571:	7e af                	jle    8004217522 <lapic_startap+0x130>
  8004217573:	c9                   	leaveq 
  8004217574:	c3                   	retq   

0000008004217575 <lapic_ipi>:
  8004217575:	55                   	push   %rbp
  8004217576:	48 89 e5             	mov    %rsp,%rbp
  8004217579:	48 83 ec 08          	sub    $0x8,%rsp
  800421757d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217580:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217583:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217588:	89 c6                	mov    %eax,%esi
  800421758a:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421758f:	48 b8 49 71 21 04 80 	movabs $0x8004217149,%rax
  8004217596:	00 00 00 
  8004217599:	ff d0                	callq  *%rax
  800421759b:	90                   	nop
  800421759c:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  80042175a3:	00 00 00 
  80042175a6:	48 8b 00             	mov    (%rax),%rax
  80042175a9:	48 05 00 03 00 00    	add    $0x300,%rax
  80042175af:	8b 00                	mov    (%rax),%eax
  80042175b1:	25 00 10 00 00       	and    $0x1000,%eax
  80042175b6:	85 c0                	test   %eax,%eax
  80042175b8:	75 e2                	jne    800421759c <lapic_ipi+0x27>
  80042175ba:	c9                   	leaveq 
  80042175bb:	c3                   	retq   

00000080042175bc <xchg>:
xchg(volatile uint32_t *addr,uint32_t newval){
  80042175bc:	55                   	push   %rbp
  80042175bd:	48 89 e5             	mov    %rsp,%rbp
  80042175c0:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042175c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042175c8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	__asm __volatile("lock; xchgl %0, %1":
  80042175cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042175cf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042175d2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042175d6:	f0 87 02             	lock xchg %eax,(%rdx)
  80042175d9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return result;
  80042175dc:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042175df:	c9                   	leaveq 
  80042175e0:	c3                   	retq   

00000080042175e1 <get_caller_pcs>:
  80042175e1:	55                   	push   %rbp
  80042175e2:	48 89 e5             	mov    %rsp,%rbp
  80042175e5:	48 83 ec 28          	sub    $0x28,%rsp
  80042175e9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042175ed:	48 89 e8             	mov    %rbp,%rax
  80042175f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  80042175f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042175f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042175fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004217603:	eb 45                	jmp    800421764a <get_caller_pcs+0x69>
  8004217605:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421760a:	74 44                	je     8004217650 <get_caller_pcs+0x6f>
  800421760c:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217613:	00 00 00 
  8004217616:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421761a:	76 34                	jbe    8004217650 <get_caller_pcs+0x6f>
  800421761c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421761f:	48 98                	cltq   
  8004217621:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217628:	00 
  8004217629:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421762d:	48 01 c2             	add    %rax,%rdx
  8004217630:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217634:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217638:	48 89 02             	mov    %rax,(%rdx)
  800421763b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421763f:	48 8b 00             	mov    (%rax),%rax
  8004217642:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217646:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421764a:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  800421764e:	7e b5                	jle    8004217605 <get_caller_pcs+0x24>
  8004217650:	eb 1f                	jmp    8004217671 <get_caller_pcs+0x90>
  8004217652:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217655:	48 98                	cltq   
  8004217657:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421765e:	00 
  800421765f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217663:	48 01 d0             	add    %rdx,%rax
  8004217666:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421766d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217671:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217675:	7e db                	jle    8004217652 <get_caller_pcs+0x71>
  8004217677:	c9                   	leaveq 
  8004217678:	c3                   	retq   

0000008004217679 <holding>:
  8004217679:	55                   	push   %rbp
  800421767a:	48 89 e5             	mov    %rsp,%rbp
  800421767d:	53                   	push   %rbx
  800421767e:	48 83 ec 18          	sub    $0x18,%rsp
  8004217682:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217686:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421768a:	8b 00                	mov    (%rax),%eax
  800421768c:	85 c0                	test   %eax,%eax
  800421768e:	74 3d                	je     80042176cd <holding+0x54>
  8004217690:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217694:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004217698:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800421769f:	00 00 00 
  80042176a2:	ff d0                	callq  *%rax
  80042176a4:	48 98                	cltq   
  80042176a6:	48 c1 e0 03          	shl    $0x3,%rax
  80042176aa:	48 89 c2             	mov    %rax,%rdx
  80042176ad:	48 c1 e2 04          	shl    $0x4,%rdx
  80042176b1:	48 01 d0             	add    %rdx,%rax
  80042176b4:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042176bb:	00 00 00 
  80042176be:	48 01 d0             	add    %rdx,%rax
  80042176c1:	48 39 c3             	cmp    %rax,%rbx
  80042176c4:	75 07                	jne    80042176cd <holding+0x54>
  80042176c6:	b8 01 00 00 00       	mov    $0x1,%eax
  80042176cb:	eb 05                	jmp    80042176d2 <holding+0x59>
  80042176cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176d2:	48 83 c4 18          	add    $0x18,%rsp
  80042176d6:	5b                   	pop    %rbx
  80042176d7:	5d                   	pop    %rbp
  80042176d8:	c3                   	retq   

00000080042176d9 <__spin_initlock>:
  80042176d9:	55                   	push   %rbp
  80042176da:	48 89 e5             	mov    %rsp,%rbp
  80042176dd:	48 83 ec 10          	sub    $0x10,%rsp
  80042176e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042176e5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042176e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042176ed:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042176f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042176f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042176fb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042176ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217703:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421770a:	00 
  800421770b:	c9                   	leaveq 
  800421770c:	c3                   	retq   

000000800421770d <spin_lock>:
  800421770d:	55                   	push   %rbp
  800421770e:	48 89 e5             	mov    %rsp,%rbp
  8004217711:	53                   	push   %rbx
  8004217712:	48 83 ec 18          	sub    $0x18,%rsp
  8004217716:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421771a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421771e:	48 89 c7             	mov    %rax,%rdi
  8004217721:	48 b8 79 76 21 04 80 	movabs $0x8004217679,%rax
  8004217728:	00 00 00 
  800421772b:	ff d0                	callq  *%rax
  800421772d:	85 c0                	test   %eax,%eax
  800421772f:	74 44                	je     8004217775 <spin_lock+0x68>
  8004217731:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217735:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217739:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004217740:	00 00 00 
  8004217743:	ff d0                	callq  *%rax
  8004217745:	49 89 d8             	mov    %rbx,%r8
  8004217748:	89 c1                	mov    %eax,%ecx
  800421774a:	48 ba f8 b8 21 04 80 	movabs $0x800421b8f8,%rdx
  8004217751:	00 00 00 
  8004217754:	be 42 00 00 00       	mov    $0x42,%esi
  8004217759:	48 bf 22 b9 21 04 80 	movabs $0x800421b922,%rdi
  8004217760:	00 00 00 
  8004217763:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217768:	49 b9 e4 05 20 04 80 	movabs $0x80042005e4,%r9
  800421776f:	00 00 00 
  8004217772:	41 ff d1             	callq  *%r9
  8004217775:	eb 02                	jmp    8004217779 <spin_lock+0x6c>
  8004217777:	f3 90                	pause  
  8004217779:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421777d:	be 01 00 00 00       	mov    $0x1,%esi
  8004217782:	48 89 c7             	mov    %rax,%rdi
  8004217785:	48 b8 bc 75 21 04 80 	movabs $0x80042175bc,%rax
  800421778c:	00 00 00 
  800421778f:	ff d0                	callq  *%rax
  8004217791:	85 c0                	test   %eax,%eax
  8004217793:	75 e2                	jne    8004217777 <spin_lock+0x6a>
  8004217795:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  800421779c:	00 00 00 
  800421779f:	ff d0                	callq  *%rax
  80042177a1:	48 98                	cltq   
  80042177a3:	48 c1 e0 03          	shl    $0x3,%rax
  80042177a7:	48 89 c2             	mov    %rax,%rdx
  80042177aa:	48 c1 e2 04          	shl    $0x4,%rdx
  80042177ae:	48 01 d0             	add    %rdx,%rax
  80042177b1:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042177b8:	00 00 00 
  80042177bb:	48 01 c2             	add    %rax,%rdx
  80042177be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042177c2:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042177c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042177ca:	48 83 c0 18          	add    $0x18,%rax
  80042177ce:	48 89 c7             	mov    %rax,%rdi
  80042177d1:	48 b8 e1 75 21 04 80 	movabs $0x80042175e1,%rax
  80042177d8:	00 00 00 
  80042177db:	ff d0                	callq  *%rax
  80042177dd:	48 83 c4 18          	add    $0x18,%rsp
  80042177e1:	5b                   	pop    %rbx
  80042177e2:	5d                   	pop    %rbp
  80042177e3:	c3                   	retq   

00000080042177e4 <spin_unlock>:
  80042177e4:	55                   	push   %rbp
  80042177e5:	48 89 e5             	mov    %rsp,%rbp
  80042177e8:	41 54                	push   %r12
  80042177ea:	53                   	push   %rbx
  80042177eb:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  80042177f2:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  80042177f9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217800:	48 89 c7             	mov    %rax,%rdi
  8004217803:	48 b8 79 76 21 04 80 	movabs $0x8004217679,%rax
  800421780a:	00 00 00 
  800421780d:	ff d0                	callq  *%rax
  800421780f:	85 c0                	test   %eax,%eax
  8004217811:	0f 85 d2 01 00 00    	jne    80042179e9 <spin_unlock+0x205>
  8004217817:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421781e:	48 8d 48 18          	lea    0x18(%rax),%rcx
  8004217822:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004217829:	ba 28 00 00 00       	mov    $0x28,%edx
  800421782e:	48 89 ce             	mov    %rcx,%rsi
  8004217831:	48 89 c7             	mov    %rax,%rdi
  8004217834:	48 b8 0f 04 21 04 80 	movabs $0x800421040f,%rax
  800421783b:	00 00 00 
  800421783e:	ff d0                	callq  *%rax
  8004217840:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217847:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421784b:	48 85 c0             	test   %rax,%rax
  800421784e:	75 39                	jne    8004217889 <spin_unlock+0xa5>
  8004217850:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217857:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421785b:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  8004217862:	00 00 00 
  8004217865:	ff d0                	callq  *%rax
  8004217867:	48 89 da             	mov    %rbx,%rdx
  800421786a:	89 c6                	mov    %eax,%esi
  800421786c:	48 bf 38 b9 21 04 80 	movabs $0x800421b938,%rdi
  8004217873:	00 00 00 
  8004217876:	b8 00 00 00 00       	mov    $0x0,%eax
  800421787b:	48 b9 90 95 20 04 80 	movabs $0x8004209590,%rcx
  8004217882:	00 00 00 
  8004217885:	ff d1                	callq  *%rcx
  8004217887:	eb 4d                	jmp    80042178d6 <spin_unlock+0xf2>
  8004217889:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217890:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004217894:	0f b6 00             	movzbl (%rax),%eax
  8004217897:	44 0f b6 e0          	movzbl %al,%r12d
  800421789b:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042178a2:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042178a6:	48 b8 82 73 21 04 80 	movabs $0x8004217382,%rax
  80042178ad:	00 00 00 
  80042178b0:	ff d0                	callq  *%rax
  80042178b2:	44 89 e1             	mov    %r12d,%ecx
  80042178b5:	48 89 da             	mov    %rbx,%rdx
  80042178b8:	89 c6                	mov    %eax,%esi
  80042178ba:	48 bf 78 b9 21 04 80 	movabs $0x800421b978,%rdi
  80042178c1:	00 00 00 
  80042178c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178c9:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  80042178d0:	00 00 00 
  80042178d3:	41 ff d0             	callq  *%r8
  80042178d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042178dd:	e9 c3 00 00 00       	jmpq   80042179a5 <spin_unlock+0x1c1>
  80042178e2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042178e5:	48 98                	cltq   
  80042178e7:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042178ee:	89 c0                	mov    %eax,%eax
  80042178f0:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  80042178f7:	48 89 d6             	mov    %rdx,%rsi
  80042178fa:	48 89 c7             	mov    %rax,%rdi
  80042178fd:	48 b8 f0 ef 20 04 80 	movabs $0x800420eff0,%rax
  8004217904:	00 00 00 
  8004217907:	ff d0                	callq  *%rax
  8004217909:	85 c0                	test   %eax,%eax
  800421790b:	78 6b                	js     8004217978 <spin_unlock+0x194>
  800421790d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217910:	48 98                	cltq   
  8004217912:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217919:	89 c2                	mov    %eax,%edx
  800421791b:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  8004217922:	48 29 c2             	sub    %rax,%rdx
  8004217925:	49 89 d0             	mov    %rdx,%r8
  8004217928:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  800421792f:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  8004217935:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  800421793b:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  8004217942:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217945:	48 98                	cltq   
  8004217947:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421794e:	4c 89 04 24          	mov    %r8,(%rsp)
  8004217952:	49 89 f9             	mov    %rdi,%r9
  8004217955:	41 89 f0             	mov    %esi,%r8d
  8004217958:	89 c6                	mov    %eax,%esi
  800421795a:	48 bf ae b9 21 04 80 	movabs $0x800421b9ae,%rdi
  8004217961:	00 00 00 
  8004217964:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217969:	49 ba 90 95 20 04 80 	movabs $0x8004209590,%r10
  8004217970:	00 00 00 
  8004217973:	41 ff d2             	callq  *%r10
  8004217976:	eb 29                	jmp    80042179a1 <spin_unlock+0x1bd>
  8004217978:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421797b:	48 98                	cltq   
  800421797d:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217984:	89 c6                	mov    %eax,%esi
  8004217986:	48 bf c5 b9 21 04 80 	movabs $0x800421b9c5,%rdi
  800421798d:	00 00 00 
  8004217990:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217995:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  800421799c:	00 00 00 
  800421799f:	ff d2                	callq  *%rdx
  80042179a1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042179a5:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  80042179a9:	7f 14                	jg     80042179bf <spin_unlock+0x1db>
  80042179ab:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042179ae:	48 98                	cltq   
  80042179b0:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042179b7:	85 c0                	test   %eax,%eax
  80042179b9:	0f 85 23 ff ff ff    	jne    80042178e2 <spin_unlock+0xfe>
  80042179bf:	48 ba cd b9 21 04 80 	movabs $0x800421b9cd,%rdx
  80042179c6:	00 00 00 
  80042179c9:	be 6c 00 00 00       	mov    $0x6c,%esi
  80042179ce:	48 bf 22 b9 21 04 80 	movabs $0x800421b922,%rdi
  80042179d5:	00 00 00 
  80042179d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179dd:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  80042179e4:	00 00 00 
  80042179e7:	ff d1                	callq  *%rcx
  80042179e9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042179f0:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  80042179f7:	00 
  80042179f8:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042179ff:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004217a06:	00 
  8004217a07:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217a0e:	be 00 00 00 00       	mov    $0x0,%esi
  8004217a13:	48 89 c7             	mov    %rax,%rdi
  8004217a16:	48 b8 bc 75 21 04 80 	movabs $0x80042175bc,%rax
  8004217a1d:	00 00 00 
  8004217a20:	ff d0                	callq  *%rax
  8004217a22:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004217a29:	5b                   	pop    %rbx
  8004217a2a:	41 5c                	pop    %r12
  8004217a2c:	5d                   	pop    %rbp
  8004217a2d:	c3                   	retq   

0000008004217a2e <e1000_attach>:
  8004217a2e:	55                   	push   %rbp
  8004217a2f:	48 89 e5             	mov    %rsp,%rbp
  8004217a32:	48 83 ec 40          	sub    $0x40,%rsp
  8004217a36:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004217a3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217a3e:	48 89 c7             	mov    %rax,%rdi
  8004217a41:	48 b8 eb 88 21 04 80 	movabs $0x80042188eb,%rax
  8004217a48:	00 00 00 
  8004217a4b:	ff d0                	callq  *%rax
  8004217a4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217a51:	8b 40 30             	mov    0x30(%rax),%eax
  8004217a54:	89 c2                	mov    %eax,%edx
  8004217a56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217a5a:	8b 40 18             	mov    0x18(%rax),%eax
  8004217a5d:	89 c0                	mov    %eax,%eax
  8004217a5f:	48 89 d6             	mov    %rdx,%rsi
  8004217a62:	48 89 c7             	mov    %rax,%rdi
  8004217a65:	48 b8 8f 40 20 04 80 	movabs $0x800420408f,%rax
  8004217a6c:	00 00 00 
  8004217a6f:	ff d0                	callq  *%rax
  8004217a71:	48 ba 20 f7 49 04 80 	movabs $0x800449f720,%rdx
  8004217a78:	00 00 00 
  8004217a7b:	48 89 02             	mov    %rax,(%rdx)
  8004217a7e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217a85:	e9 a9 00 00 00       	jmpq   8004217b33 <e1000_attach+0x105>
  8004217a8a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217a8d:	48 98                	cltq   
  8004217a8f:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  8004217a96:	48 b8 40 f8 49 04 80 	movabs $0x800449f840,%rax
  8004217a9d:	00 00 00 
  8004217aa0:	48 01 d0             	add    %rdx,%rax
  8004217aa3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217aa7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217aae:	00 00 00 
  8004217ab1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  8004217ab5:	77 32                	ja     8004217ae9 <e1000_attach+0xbb>
  8004217ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217abb:	48 89 c1             	mov    %rax,%rcx
  8004217abe:	48 ba e0 b9 21 04 80 	movabs $0x800421b9e0,%rdx
  8004217ac5:	00 00 00 
  8004217ac8:	be 97 00 00 00       	mov    $0x97,%esi
  8004217acd:	48 bf 04 ba 21 04 80 	movabs $0x800421ba04,%rdi
  8004217ad4:	00 00 00 
  8004217ad7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217adc:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217ae3:	00 00 00 
  8004217ae6:	41 ff d0             	callq  *%r8
  8004217ae9:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004217af0:	ff ff ff 
  8004217af3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217af7:	48 01 c2             	add    %rax,%rdx
  8004217afa:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217b01:	00 00 00 
  8004217b04:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217b07:	48 63 c9             	movslq %ecx,%rcx
  8004217b0a:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217b0e:	48 01 c8             	add    %rcx,%rax
  8004217b11:	48 89 10             	mov    %rdx,(%rax)
  8004217b14:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217b1b:	00 00 00 
  8004217b1e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217b21:	48 63 d2             	movslq %edx,%rdx
  8004217b24:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217b28:	48 01 d0             	add    %rdx,%rax
  8004217b2b:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  8004217b2f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217b33:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004217b37:	0f 8e 4d ff ff ff    	jle    8004217a8a <e1000_attach+0x5c>
  8004217b3d:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217b44:	00 00 00 
  8004217b47:	48 8b 00             	mov    (%rax),%rax
  8004217b4a:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004217b51:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217b58:	00 00 00 
  8004217b5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004217b5f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217b66:	00 00 00 
  8004217b69:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004217b6d:	77 32                	ja     8004217ba1 <e1000_attach+0x173>
  8004217b6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217b73:	48 89 c1             	mov    %rax,%rcx
  8004217b76:	48 ba e0 b9 21 04 80 	movabs $0x800421b9e0,%rdx
  8004217b7d:	00 00 00 
  8004217b80:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004217b85:	48 bf 04 ba 21 04 80 	movabs $0x800421ba04,%rdi
  8004217b8c:	00 00 00 
  8004217b8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b94:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217b9b:	00 00 00 
  8004217b9e:	41 ff d0             	callq  *%r8
  8004217ba1:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004217ba8:	ff ff ff 
  8004217bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217baf:	48 01 c8             	add    %rcx,%rax
  8004217bb2:	89 02                	mov    %eax,(%rdx)
  8004217bb4:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217bbb:	00 00 00 
  8004217bbe:	48 8b 00             	mov    (%rax),%rax
  8004217bc1:	48 05 08 38 00 00    	add    $0x3808,%rax
  8004217bc7:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  8004217bcd:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217bd4:	00 00 00 
  8004217bd7:	48 8b 00             	mov    (%rax),%rax
  8004217bda:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004217be1:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217be8:	00 00 00 
  8004217beb:	48 8b 00             	mov    (%rax),%rax
  8004217bee:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217bf5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217bfa:	89 01                	mov    %eax,(%rcx)
  8004217bfc:	89 02                	mov    %eax,(%rdx)
  8004217bfe:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217c05:	00 00 00 
  8004217c08:	48 8b 00             	mov    (%rax),%rax
  8004217c0b:	48 05 00 04 00 00    	add    $0x400,%rax
  8004217c11:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  8004217c17:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217c1e:	00 00 00 
  8004217c21:	48 8b 00             	mov    (%rax),%rax
  8004217c24:	48 05 10 04 00 00    	add    $0x410,%rax
  8004217c2a:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004217c30:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217c37:	e9 8e 00 00 00       	jmpq   8004217cca <e1000_attach+0x29c>
  8004217c3c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217c3f:	48 98                	cltq   
  8004217c41:	48 c1 e0 0b          	shl    $0xb,%rax
  8004217c45:	48 89 c2             	mov    %rax,%rdx
  8004217c48:	48 b8 a0 95 4a 04 80 	movabs $0x80044a95a0,%rax
  8004217c4f:	00 00 00 
  8004217c52:	48 01 d0             	add    %rdx,%rax
  8004217c55:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217c59:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217c60:	00 00 00 
  8004217c63:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004217c67:	77 32                	ja     8004217c9b <e1000_attach+0x26d>
  8004217c69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217c6d:	48 89 c1             	mov    %rax,%rcx
  8004217c70:	48 ba e0 b9 21 04 80 	movabs $0x800421b9e0,%rdx
  8004217c77:	00 00 00 
  8004217c7a:	be b8 00 00 00       	mov    $0xb8,%esi
  8004217c7f:	48 bf 04 ba 21 04 80 	movabs $0x800421ba04,%rdi
  8004217c86:	00 00 00 
  8004217c89:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c8e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217c95:	00 00 00 
  8004217c98:	41 ff d0             	callq  *%r8
  8004217c9b:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004217ca2:	ff ff ff 
  8004217ca5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217ca9:	48 01 c2             	add    %rax,%rdx
  8004217cac:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217cb3:	00 00 00 
  8004217cb6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217cb9:	48 63 c9             	movslq %ecx,%rcx
  8004217cbc:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217cc0:	48 01 c8             	add    %rcx,%rax
  8004217cc3:	48 89 10             	mov    %rdx,(%rax)
  8004217cc6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217cca:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  8004217cd1:	0f 8e 65 ff ff ff    	jle    8004217c3c <e1000_attach+0x20e>
  8004217cd7:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217cde:	00 00 00 
  8004217ce1:	48 8b 00             	mov    (%rax),%rax
  8004217ce4:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  8004217ceb:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217cf2:	00 00 00 
  8004217cf5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217cf9:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217d00:	00 00 00 
  8004217d03:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004217d07:	77 32                	ja     8004217d3b <e1000_attach+0x30d>
  8004217d09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217d0d:	48 89 c1             	mov    %rax,%rcx
  8004217d10:	48 ba e0 b9 21 04 80 	movabs $0x800421b9e0,%rdx
  8004217d17:	00 00 00 
  8004217d1a:	be ba 00 00 00       	mov    $0xba,%esi
  8004217d1f:	48 bf 04 ba 21 04 80 	movabs $0x800421ba04,%rdi
  8004217d26:	00 00 00 
  8004217d29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d2e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004217d35:	00 00 00 
  8004217d38:	41 ff d0             	callq  *%r8
  8004217d3b:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004217d42:	ff ff ff 
  8004217d45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217d49:	48 01 c8             	add    %rcx,%rax
  8004217d4c:	89 02                	mov    %eax,(%rdx)
  8004217d4e:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217d55:	00 00 00 
  8004217d58:	48 8b 00             	mov    (%rax),%rax
  8004217d5b:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004217d61:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004217d67:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217d6e:	00 00 00 
  8004217d71:	48 8b 00             	mov    (%rax),%rax
  8004217d74:	48 05 10 28 00 00    	add    $0x2810,%rax
  8004217d7a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217d80:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217d87:	00 00 00 
  8004217d8a:	48 8b 00             	mov    (%rax),%rax
  8004217d8d:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217d93:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004217d99:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217da0:	00 00 00 
  8004217da3:	48 8b 00             	mov    (%rax),%rax
  8004217da6:	48 05 00 01 00 00    	add    $0x100,%rax
  8004217dac:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  8004217db2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217db7:	c9                   	leaveq 
  8004217db8:	c3                   	retq   

0000008004217db9 <e1000_transmit>:
  8004217db9:	55                   	push   %rbp
  8004217dba:	48 89 e5             	mov    %rsp,%rbp
  8004217dbd:	48 83 ec 20          	sub    $0x20,%rsp
  8004217dc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217dc5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217dc8:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217dcf:	00 00 00 
  8004217dd2:	48 8b 00             	mov    (%rax),%rax
  8004217dd5:	48 85 c0             	test   %rax,%rax
  8004217dd8:	74 09                	je     8004217de3 <e1000_transmit+0x2a>
  8004217dda:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004217de1:	76 0a                	jbe    8004217ded <e1000_transmit+0x34>
  8004217de3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004217de8:	e9 39 01 00 00       	jmpq   8004217f26 <e1000_transmit+0x16d>
  8004217ded:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217df4:	00 00 00 
  8004217df7:	48 8b 00             	mov    (%rax),%rax
  8004217dfa:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004217e00:	8b 00                	mov    (%rax),%eax
  8004217e02:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217e05:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217e0c:	00 00 00 
  8004217e0f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217e12:	48 63 d2             	movslq %edx,%rdx
  8004217e15:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217e19:	48 01 d0             	add    %rdx,%rax
  8004217e1c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217e20:	0f b6 c0             	movzbl %al,%eax
  8004217e23:	83 e0 01             	and    $0x1,%eax
  8004217e26:	85 c0                	test   %eax,%eax
  8004217e28:	75 25                	jne    8004217e4f <e1000_transmit+0x96>
  8004217e2a:	48 bf 14 ba 21 04 80 	movabs $0x800421ba14,%rdi
  8004217e31:	00 00 00 
  8004217e34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e39:	48 ba 90 95 20 04 80 	movabs $0x8004209590,%rdx
  8004217e40:	00 00 00 
  8004217e43:	ff d2                	callq  *%rdx
  8004217e45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e4a:	e9 d7 00 00 00       	jmpq   8004217f26 <e1000_transmit+0x16d>
  8004217e4f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217e52:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217e55:	48 98                	cltq   
  8004217e57:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004217e5e:	48 b8 40 f8 49 04 80 	movabs $0x800449f840,%rax
  8004217e65:	00 00 00 
  8004217e68:	48 01 c1             	add    %rax,%rcx
  8004217e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e6f:	48 89 c6             	mov    %rax,%rsi
  8004217e72:	48 89 cf             	mov    %rcx,%rdi
  8004217e75:	48 b8 0f 04 21 04 80 	movabs $0x800421040f,%rax
  8004217e7c:	00 00 00 
  8004217e7f:	ff d0                	callq  *%rax
  8004217e81:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217e84:	48 ba 30 f7 49 04 80 	movabs $0x800449f730,%rdx
  8004217e8b:	00 00 00 
  8004217e8e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217e91:	48 63 c9             	movslq %ecx,%rcx
  8004217e94:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217e98:	48 01 ca             	add    %rcx,%rdx
  8004217e9b:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004217e9f:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217ea6:	00 00 00 
  8004217ea9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217eac:	48 63 d2             	movslq %edx,%rdx
  8004217eaf:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217eb3:	48 01 d0             	add    %rdx,%rax
  8004217eb6:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217eba:	83 e0 fe             	and    $0xfffffffe,%eax
  8004217ebd:	89 c2                	mov    %eax,%edx
  8004217ebf:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217ec6:	00 00 00 
  8004217ec9:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217ecc:	48 63 c9             	movslq %ecx,%rcx
  8004217ecf:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217ed3:	48 01 c8             	add    %rcx,%rax
  8004217ed6:	88 50 0c             	mov    %dl,0xc(%rax)
  8004217ed9:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217ee0:	00 00 00 
  8004217ee3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217ee6:	48 63 d2             	movslq %edx,%rdx
  8004217ee9:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217eed:	48 01 d0             	add    %rdx,%rax
  8004217ef0:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  8004217ef4:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217efb:	00 00 00 
  8004217efe:	48 8b 00             	mov    (%rax),%rax
  8004217f01:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217f08:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f0b:	8d 50 01             	lea    0x1(%rax),%edx
  8004217f0e:	89 d0                	mov    %edx,%eax
  8004217f10:	c1 f8 1f             	sar    $0x1f,%eax
  8004217f13:	c1 e8 1c             	shr    $0x1c,%eax
  8004217f16:	01 c2                	add    %eax,%edx
  8004217f18:	83 e2 0f             	and    $0xf,%edx
  8004217f1b:	29 c2                	sub    %eax,%edx
  8004217f1d:	89 d0                	mov    %edx,%eax
  8004217f1f:	89 01                	mov    %eax,(%rcx)
  8004217f21:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f26:	c9                   	leaveq 
  8004217f27:	c3                   	retq   

0000008004217f28 <e1000_receive>:
  8004217f28:	55                   	push   %rbp
  8004217f29:	48 89 e5             	mov    %rsp,%rbp
  8004217f2c:	48 83 ec 20          	sub    $0x20,%rsp
  8004217f30:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217f34:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217f37:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217f3e:	00 00 00 
  8004217f41:	48 8b 00             	mov    (%rax),%rax
  8004217f44:	48 85 c0             	test   %rax,%rax
  8004217f47:	75 0a                	jne    8004217f53 <e1000_receive+0x2b>
  8004217f49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f4e:	e9 59 01 00 00       	jmpq   80042180ac <e1000_receive+0x184>
  8004217f53:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217f5a:	00 00 00 
  8004217f5d:	48 8b 00             	mov    (%rax),%rax
  8004217f60:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217f66:	8b 00                	mov    (%rax),%eax
  8004217f68:	8d 48 01             	lea    0x1(%rax),%ecx
  8004217f6b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004217f70:	89 c8                	mov    %ecx,%eax
  8004217f72:	f7 e2                	mul    %edx
  8004217f74:	89 d0                	mov    %edx,%eax
  8004217f76:	c1 e8 06             	shr    $0x6,%eax
  8004217f79:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004217f7f:	29 c1                	sub    %eax,%ecx
  8004217f81:	89 c8                	mov    %ecx,%eax
  8004217f83:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217f86:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217f8d:	00 00 00 
  8004217f90:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217f93:	48 63 d2             	movslq %edx,%rdx
  8004217f96:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217f9a:	48 01 d0             	add    %rdx,%rax
  8004217f9d:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217fa1:	0f b6 c0             	movzbl %al,%eax
  8004217fa4:	83 e0 01             	and    $0x1,%eax
  8004217fa7:	85 c0                	test   %eax,%eax
  8004217fa9:	75 0a                	jne    8004217fb5 <e1000_receive+0x8d>
  8004217fab:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217fb0:	e9 f7 00 00 00       	jmpq   80042180ac <e1000_receive+0x184>
  8004217fb5:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217fbc:	00 00 00 
  8004217fbf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217fc2:	48 63 d2             	movslq %edx,%rdx
  8004217fc5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217fc9:	48 01 d0             	add    %rdx,%rax
  8004217fcc:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217fd0:	0f b6 c0             	movzbl %al,%eax
  8004217fd3:	83 e0 02             	and    $0x2,%eax
  8004217fd6:	85 c0                	test   %eax,%eax
  8004217fd8:	75 35                	jne    800421800f <e1000_receive+0xe7>
  8004217fda:	48 b9 28 ba 21 04 80 	movabs $0x800421ba28,%rcx
  8004217fe1:	00 00 00 
  8004217fe4:	48 ba 52 ba 21 04 80 	movabs $0x800421ba52,%rdx
  8004217feb:	00 00 00 
  8004217fee:	be ef 00 00 00       	mov    $0xef,%esi
  8004217ff3:	48 bf 04 ba 21 04 80 	movabs $0x800421ba04,%rdi
  8004217ffa:	00 00 00 
  8004217ffd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218002:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004218009:	00 00 00 
  800421800c:	41 ff d0             	callq  *%r8
  800421800f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218012:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218015:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  800421801c:	00 00 00 
  800421801f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218022:	48 63 d2             	movslq %edx,%rdx
  8004218025:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218029:	48 01 d0             	add    %rdx,%rax
  800421802c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218030:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004218034:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218038:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421803b:	39 c2                	cmp    %eax,%edx
  800421803d:	0f 46 c2             	cmovbe %edx,%eax
  8004218040:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218043:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218046:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218049:	48 98                	cltq   
  800421804b:	48 c1 e0 0b          	shl    $0xb,%rax
  800421804f:	48 89 c1             	mov    %rax,%rcx
  8004218052:	48 b8 a0 95 4a 04 80 	movabs $0x80044a95a0,%rax
  8004218059:	00 00 00 
  800421805c:	48 01 c1             	add    %rax,%rcx
  800421805f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218063:	48 89 ce             	mov    %rcx,%rsi
  8004218066:	48 89 c7             	mov    %rax,%rdi
  8004218069:	48 b8 0f 04 21 04 80 	movabs $0x800421040f,%rax
  8004218070:	00 00 00 
  8004218073:	ff d0                	callq  *%rax
  8004218075:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  800421807c:	00 00 00 
  800421807f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218082:	48 63 d2             	movslq %edx,%rdx
  8004218085:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218089:	48 01 d0             	add    %rdx,%rax
  800421808c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004218090:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004218097:	00 00 00 
  800421809a:	48 8b 00             	mov    (%rax),%rax
  800421809d:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  80042180a4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042180a7:	89 02                	mov    %eax,(%rdx)
  80042180a9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042180ac:	c9                   	leaveq 
  80042180ad:	c3                   	retq   

00000080042180ae <pci_conf1_set_addr>:
  80042180ae:	55                   	push   %rbp
  80042180af:	48 89 e5             	mov    %rsp,%rbp
  80042180b2:	48 83 ec 20          	sub    $0x20,%rsp
  80042180b6:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042180b9:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042180bc:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  80042180bf:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  80042180c2:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  80042180c9:	76 35                	jbe    8004218100 <pci_conf1_set_addr+0x52>
  80042180cb:	48 b9 68 ba 21 04 80 	movabs $0x800421ba68,%rcx
  80042180d2:	00 00 00 
  80042180d5:	48 ba 72 ba 21 04 80 	movabs $0x800421ba72,%rdx
  80042180dc:	00 00 00 
  80042180df:	be 31 00 00 00       	mov    $0x31,%esi
  80042180e4:	48 bf 87 ba 21 04 80 	movabs $0x800421ba87,%rdi
  80042180eb:	00 00 00 
  80042180ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042180f3:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042180fa:	00 00 00 
  80042180fd:	41 ff d0             	callq  *%r8
  8004218100:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004218104:	76 35                	jbe    800421813b <pci_conf1_set_addr+0x8d>
  8004218106:	48 b9 95 ba 21 04 80 	movabs $0x800421ba95,%rcx
  800421810d:	00 00 00 
  8004218110:	48 ba 72 ba 21 04 80 	movabs $0x800421ba72,%rdx
  8004218117:	00 00 00 
  800421811a:	be 32 00 00 00       	mov    $0x32,%esi
  800421811f:	48 bf 87 ba 21 04 80 	movabs $0x800421ba87,%rdi
  8004218126:	00 00 00 
  8004218129:	b8 00 00 00 00       	mov    $0x0,%eax
  800421812e:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004218135:	00 00 00 
  8004218138:	41 ff d0             	callq  *%r8
  800421813b:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  800421813f:	76 35                	jbe    8004218176 <pci_conf1_set_addr+0xc8>
  8004218141:	48 b9 9e ba 21 04 80 	movabs $0x800421ba9e,%rcx
  8004218148:	00 00 00 
  800421814b:	48 ba 72 ba 21 04 80 	movabs $0x800421ba72,%rdx
  8004218152:	00 00 00 
  8004218155:	be 33 00 00 00       	mov    $0x33,%esi
  800421815a:	48 bf 87 ba 21 04 80 	movabs $0x800421ba87,%rdi
  8004218161:	00 00 00 
  8004218164:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218169:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  8004218170:	00 00 00 
  8004218173:	41 ff d0             	callq  *%r8
  8004218176:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  800421817d:	76 35                	jbe    80042181b4 <pci_conf1_set_addr+0x106>
  800421817f:	48 b9 a7 ba 21 04 80 	movabs $0x800421baa7,%rcx
  8004218186:	00 00 00 
  8004218189:	48 ba 72 ba 21 04 80 	movabs $0x800421ba72,%rdx
  8004218190:	00 00 00 
  8004218193:	be 34 00 00 00       	mov    $0x34,%esi
  8004218198:	48 bf 87 ba 21 04 80 	movabs $0x800421ba87,%rdi
  800421819f:	00 00 00 
  80042181a2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181a7:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042181ae:	00 00 00 
  80042181b1:	41 ff d0             	callq  *%r8
  80042181b4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042181b7:	83 e0 03             	and    $0x3,%eax
  80042181ba:	85 c0                	test   %eax,%eax
  80042181bc:	74 35                	je     80042181f3 <pci_conf1_set_addr+0x145>
  80042181be:	48 b9 b4 ba 21 04 80 	movabs $0x800421bab4,%rcx
  80042181c5:	00 00 00 
  80042181c8:	48 ba 72 ba 21 04 80 	movabs $0x800421ba72,%rdx
  80042181cf:	00 00 00 
  80042181d2:	be 35 00 00 00       	mov    $0x35,%esi
  80042181d7:	48 bf 87 ba 21 04 80 	movabs $0x800421ba87,%rdi
  80042181de:	00 00 00 
  80042181e1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181e6:	49 b8 e4 05 20 04 80 	movabs $0x80042005e4,%r8
  80042181ed:	00 00 00 
  80042181f0:	41 ff d0             	callq  *%r8
  80042181f3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042181f6:	c1 e0 10             	shl    $0x10,%eax
  80042181f9:	89 c2                	mov    %eax,%edx
  80042181fb:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042181fe:	c1 e0 0b             	shl    $0xb,%eax
  8004218201:	09 c2                	or     %eax,%edx
  8004218203:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218206:	c1 e0 08             	shl    $0x8,%eax
  8004218209:	09 d0                	or     %edx,%eax
  800421820b:	0b 45 e0             	or     -0x20(%rbp),%eax
  800421820e:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004218213:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218216:	48 b8 e4 c7 22 04 80 	movabs $0x800422c7e4,%rax
  800421821d:	00 00 00 
  8004218220:	8b 00                	mov    (%rax),%eax
  8004218222:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218225:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218228:	89 45 f4             	mov    %eax,-0xc(%rbp)
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  800421822b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421822e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218231:	ef                   	out    %eax,(%dx)
  8004218232:	c9                   	leaveq 
  8004218233:	c3                   	retq   

0000008004218234 <pci_conf_read>:
  8004218234:	55                   	push   %rbp
  8004218235:	48 89 e5             	mov    %rsp,%rbp
  8004218238:	48 83 ec 20          	sub    $0x20,%rsp
  800421823c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218240:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218243:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218247:	8b 50 0c             	mov    0xc(%rax),%edx
  800421824a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421824e:	8b 70 08             	mov    0x8(%rax),%esi
  8004218251:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218255:	48 8b 00             	mov    (%rax),%rax
  8004218258:	8b 40 08             	mov    0x8(%rax),%eax
  800421825b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800421825e:	89 c7                	mov    %eax,%edi
  8004218260:	48 b8 ae 80 21 04 80 	movabs $0x80042180ae,%rax
  8004218267:	00 00 00 
  800421826a:	ff d0                	callq  *%rax
  800421826c:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004218273:	00 00 00 
  8004218276:	8b 00                	mov    (%rax),%eax
  8004218278:	89 45 fc             	mov    %eax,-0x4(%rbp)
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  800421827b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421827e:	89 c2                	mov    %eax,%edx
  8004218280:	ed                   	in     (%dx),%eax
  8004218281:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218284:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218287:	c9                   	leaveq 
  8004218288:	c3                   	retq   

0000008004218289 <pci_conf_write>:
  8004218289:	55                   	push   %rbp
  800421828a:	48 89 e5             	mov    %rsp,%rbp
  800421828d:	48 83 ec 20          	sub    $0x20,%rsp
  8004218291:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218295:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218298:	89 55 e0             	mov    %edx,-0x20(%rbp)
  800421829b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421829f:	8b 50 0c             	mov    0xc(%rax),%edx
  80042182a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042182a6:	8b 70 08             	mov    0x8(%rax),%esi
  80042182a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042182ad:	48 8b 00             	mov    (%rax),%rax
  80042182b0:	8b 40 08             	mov    0x8(%rax),%eax
  80042182b3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  80042182b6:	89 c7                	mov    %eax,%edi
  80042182b8:	48 b8 ae 80 21 04 80 	movabs $0x80042180ae,%rax
  80042182bf:	00 00 00 
  80042182c2:	ff d0                	callq  *%rax
  80042182c4:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  80042182cb:	00 00 00 
  80042182ce:	8b 00                	mov    (%rax),%eax
  80042182d0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042182d3:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042182d6:	89 45 f8             	mov    %eax,-0x8(%rbp)
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  80042182d9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042182dc:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042182df:	ef                   	out    %eax,(%dx)
  80042182e0:	c9                   	leaveq 
  80042182e1:	c3                   	retq   

00000080042182e2 <pci_attach_match>:
  80042182e2:	55                   	push   %rbp
  80042182e3:	48 89 e5             	mov    %rsp,%rbp
  80042182e6:	48 83 ec 30          	sub    $0x30,%rsp
  80042182ea:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042182ed:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042182f0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  80042182f4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  80042182f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042182ff:	e9 aa 00 00 00       	jmpq   80042183ae <pci_attach_match+0xcc>
  8004218304:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218307:	48 c1 e0 04          	shl    $0x4,%rax
  800421830b:	48 89 c2             	mov    %rax,%rdx
  800421830e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218312:	48 01 d0             	add    %rdx,%rax
  8004218315:	8b 00                	mov    (%rax),%eax
  8004218317:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421831a:	0f 85 8a 00 00 00    	jne    80042183aa <pci_attach_match+0xc8>
  8004218320:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218323:	48 c1 e0 04          	shl    $0x4,%rax
  8004218327:	48 89 c2             	mov    %rax,%rdx
  800421832a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421832e:	48 01 d0             	add    %rdx,%rax
  8004218331:	8b 40 04             	mov    0x4(%rax),%eax
  8004218334:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218337:	75 71                	jne    80042183aa <pci_attach_match+0xc8>
  8004218339:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421833c:	48 c1 e0 04          	shl    $0x4,%rax
  8004218340:	48 89 c2             	mov    %rax,%rdx
  8004218343:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218347:	48 01 d0             	add    %rdx,%rax
  800421834a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421834e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218352:	48 89 d7             	mov    %rdx,%rdi
  8004218355:	ff d0                	callq  *%rax
  8004218357:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421835a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421835e:	7e 05                	jle    8004218365 <pci_attach_match+0x83>
  8004218360:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218363:	eb 6c                	jmp    80042183d1 <pci_attach_match+0xef>
  8004218365:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218369:	79 3f                	jns    80042183aa <pci_attach_match+0xc8>
  800421836b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421836e:	48 c1 e0 04          	shl    $0x4,%rax
  8004218372:	48 89 c2             	mov    %rax,%rdx
  8004218375:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218379:	48 01 d0             	add    %rdx,%rax
  800421837c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218380:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218383:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218386:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218389:	41 89 f0             	mov    %esi,%r8d
  800421838c:	89 c6                	mov    %eax,%esi
  800421838e:	48 bf c8 ba 21 04 80 	movabs $0x800421bac8,%rdi
  8004218395:	00 00 00 
  8004218398:	b8 00 00 00 00       	mov    $0x0,%eax
  800421839d:	49 b9 90 95 20 04 80 	movabs $0x8004209590,%r9
  80042183a4:	00 00 00 
  80042183a7:	41 ff d1             	callq  *%r9
  80042183aa:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042183ae:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042183b1:	48 c1 e0 04          	shl    $0x4,%rax
  80042183b5:	48 89 c2             	mov    %rax,%rdx
  80042183b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042183bc:	48 01 d0             	add    %rdx,%rax
  80042183bf:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042183c3:	48 85 c0             	test   %rax,%rax
  80042183c6:	0f 85 38 ff ff ff    	jne    8004218304 <pci_attach_match+0x22>
  80042183cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183d1:	c9                   	leaveq 
  80042183d2:	c3                   	retq   

00000080042183d3 <pci_attach>:
  80042183d3:	55                   	push   %rbp
  80042183d4:	48 89 e5             	mov    %rsp,%rbp
  80042183d7:	48 83 ec 10          	sub    $0x10,%rsp
  80042183db:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042183df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042183e3:	8b 40 14             	mov    0x14(%rax),%eax
  80042183e6:	c1 e8 10             	shr    $0x10,%eax
  80042183e9:	0f b6 c0             	movzbl %al,%eax
  80042183ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042183f0:	8b 52 14             	mov    0x14(%rdx),%edx
  80042183f3:	89 d7                	mov    %edx,%edi
  80042183f5:	c1 ef 18             	shr    $0x18,%edi
  80042183f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042183fc:	48 89 d1             	mov    %rdx,%rcx
  80042183ff:	48 ba 00 c8 22 04 80 	movabs $0x800422c800,%rdx
  8004218406:	00 00 00 
  8004218409:	89 c6                	mov    %eax,%esi
  800421840b:	48 b8 e2 82 21 04 80 	movabs $0x80042182e2,%rax
  8004218412:	00 00 00 
  8004218415:	ff d0                	callq  *%rax
  8004218417:	85 c0                	test   %eax,%eax
  8004218419:	75 39                	jne    8004218454 <pci_attach+0x81>
  800421841b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421841f:	8b 40 10             	mov    0x10(%rax),%eax
  8004218422:	c1 e8 10             	shr    $0x10,%eax
  8004218425:	89 c6                	mov    %eax,%esi
  8004218427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421842b:	8b 40 10             	mov    0x10(%rax),%eax
  800421842e:	0f b7 c0             	movzwl %ax,%eax
  8004218431:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218435:	48 89 d1             	mov    %rdx,%rcx
  8004218438:	48 ba 20 c8 22 04 80 	movabs $0x800422c820,%rdx
  800421843f:	00 00 00 
  8004218442:	89 c7                	mov    %eax,%edi
  8004218444:	48 b8 e2 82 21 04 80 	movabs $0x80042182e2,%rax
  800421844b:	00 00 00 
  800421844e:	ff d0                	callq  *%rax
  8004218450:	85 c0                	test   %eax,%eax
  8004218452:	74 07                	je     800421845b <pci_attach+0x88>
  8004218454:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218459:	eb 05                	jmp    8004218460 <pci_attach+0x8d>
  800421845b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218460:	c9                   	leaveq 
  8004218461:	c3                   	retq   

0000008004218462 <pci_print_func>:
  8004218462:	55                   	push   %rbp
  8004218463:	48 89 e5             	mov    %rsp,%rbp
  8004218466:	48 83 ec 40          	sub    $0x40,%rsp
  800421846a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421846e:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  8004218475:	00 00 00 
  8004218478:	48 8b 00             	mov    (%rax),%rax
  800421847b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421847f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218483:	8b 40 14             	mov    0x14(%rax),%eax
  8004218486:	c1 e8 18             	shr    $0x18,%eax
  8004218489:	83 f8 06             	cmp    $0x6,%eax
  800421848c:	77 20                	ja     80042184ae <pci_print_func+0x4c>
  800421848e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218492:	8b 40 14             	mov    0x14(%rax),%eax
  8004218495:	c1 e8 18             	shr    $0x18,%eax
  8004218498:	89 c2                	mov    %eax,%edx
  800421849a:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  80042184a1:	00 00 00 
  80042184a4:	89 d2                	mov    %edx,%edx
  80042184a6:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042184aa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042184ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184b2:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  80042184b6:	0f b6 f8             	movzbl %al,%edi
  80042184b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184bd:	8b 40 14             	mov    0x14(%rax),%eax
  80042184c0:	c1 e8 10             	shr    $0x10,%eax
  80042184c3:	0f b6 f0             	movzbl %al,%esi
  80042184c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184ca:	8b 40 14             	mov    0x14(%rax),%eax
  80042184cd:	c1 e8 18             	shr    $0x18,%eax
  80042184d0:	41 89 c1             	mov    %eax,%r9d
  80042184d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184d7:	8b 40 10             	mov    0x10(%rax),%eax
  80042184da:	c1 e8 10             	shr    $0x10,%eax
  80042184dd:	41 89 c2             	mov    %eax,%r10d
  80042184e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184e4:	8b 40 10             	mov    0x10(%rax),%eax
  80042184e7:	44 0f b7 c0          	movzwl %ax,%r8d
  80042184eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184ef:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042184f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184f6:	8b 50 08             	mov    0x8(%rax),%edx
  80042184f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042184fd:	48 8b 00             	mov    (%rax),%rax
  8004218500:	8b 40 08             	mov    0x8(%rax),%eax
  8004218503:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218507:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  800421850b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218510:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218514:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218518:	45 89 d1             	mov    %r10d,%r9d
  800421851b:	89 c6                	mov    %eax,%esi
  800421851d:	48 bf 68 bb 21 04 80 	movabs $0x800421bb68,%rdi
  8004218524:	00 00 00 
  8004218527:	b8 00 00 00 00       	mov    $0x0,%eax
  800421852c:	49 ba 90 95 20 04 80 	movabs $0x8004209590,%r10
  8004218533:	00 00 00 
  8004218536:	41 ff d2             	callq  *%r10
  8004218539:	c9                   	leaveq 
  800421853a:	c3                   	retq   

000000800421853b <pci_scan_bus>:
  800421853b:	55                   	push   %rbp
  800421853c:	48 89 e5             	mov    %rsp,%rbp
  800421853f:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218546:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421854d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218554:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218558:	ba 50 00 00 00       	mov    $0x50,%edx
  800421855d:	be 00 00 00 00       	mov    $0x0,%esi
  8004218562:	48 89 c7             	mov    %rax,%rdi
  8004218565:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  800421856c:	00 00 00 
  800421856f:	ff d0                	callq  *%rax
  8004218571:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218578:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421857c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218583:	e9 22 02 00 00       	jmpq   80042187aa <pci_scan_bus+0x26f>
  8004218588:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421858c:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218591:	48 89 c7             	mov    %rax,%rdi
  8004218594:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  800421859b:	00 00 00 
  800421859e:	ff d0                	callq  *%rax
  80042185a0:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042185a3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042185a6:	c1 e8 10             	shr    $0x10,%eax
  80042185a9:	83 e0 7f             	and    $0x7f,%eax
  80042185ac:	83 f8 01             	cmp    $0x1,%eax
  80042185af:	0f 87 ec 01 00 00    	ja     80042187a1 <pci_scan_bus+0x266>
  80042185b5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042185b9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042185bd:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042185c4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042185c8:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  80042185cf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042185d3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042185da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042185de:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  80042185e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042185e9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042185f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042185f4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  80042185fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042185ff:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004218606:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421860a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218611:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218615:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421861c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218620:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218627:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  800421862e:	00 00 00 
  8004218631:	e9 45 01 00 00       	jmpq   800421877b <pci_scan_bus+0x240>
  8004218636:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421863d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218644:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421864b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004218652:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004218659:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004218660:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004218667:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421866e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004218675:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421867c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004218683:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421868a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004218691:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004218695:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800421869c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042186a0:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042186a7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042186ab:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042186b2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042186b6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  80042186bd:	be 00 00 00 00       	mov    $0x0,%esi
  80042186c2:	48 89 c7             	mov    %rax,%rdi
  80042186c5:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  80042186cc:	00 00 00 
  80042186cf:	ff d0                	callq  *%rax
  80042186d1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  80042186d7:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  80042186dd:	0f b7 c0             	movzwl %ax,%eax
  80042186e0:	3d ff ff 00 00       	cmp    $0xffff,%eax
  80042186e5:	0f 84 81 00 00 00    	je     800421876c <pci_scan_bus+0x231>
  80042186eb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042186f2:	be 3c 00 00 00       	mov    $0x3c,%esi
  80042186f7:	48 89 c7             	mov    %rax,%rdi
  80042186fa:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  8004218701:	00 00 00 
  8004218704:	ff d0                	callq  *%rax
  8004218706:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218709:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421870c:	88 45 98             	mov    %al,-0x68(%rbp)
  800421870f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218716:	be 08 00 00 00       	mov    $0x8,%esi
  800421871b:	48 89 c7             	mov    %rax,%rdi
  800421871e:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  8004218725:	00 00 00 
  8004218728:	ff d0                	callq  *%rax
  800421872a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218730:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  8004218737:	00 00 00 
  800421873a:	8b 00                	mov    (%rax),%eax
  800421873c:	85 c0                	test   %eax,%eax
  800421873e:	74 16                	je     8004218756 <pci_scan_bus+0x21b>
  8004218740:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218747:	48 89 c7             	mov    %rax,%rdi
  800421874a:	48 b8 62 84 21 04 80 	movabs $0x8004218462,%rax
  8004218751:	00 00 00 
  8004218754:	ff d0                	callq  *%rax
  8004218756:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421875d:	48 89 c7             	mov    %rax,%rdi
  8004218760:	48 b8 d3 83 21 04 80 	movabs $0x80042183d3,%rax
  8004218767:	00 00 00 
  800421876a:	ff d0                	callq  *%rax
  800421876c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004218772:	83 c0 01             	add    $0x1,%eax
  8004218775:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421877b:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004218781:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218784:	25 00 00 80 00       	and    $0x800000,%eax
  8004218789:	85 c0                	test   %eax,%eax
  800421878b:	74 07                	je     8004218794 <pci_scan_bus+0x259>
  800421878d:	b8 08 00 00 00       	mov    $0x8,%eax
  8004218792:	eb 05                	jmp    8004218799 <pci_scan_bus+0x25e>
  8004218794:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218799:	39 c2                	cmp    %eax,%edx
  800421879b:	0f 82 95 fe ff ff    	jb     8004218636 <pci_scan_bus+0xfb>
  80042187a1:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042187a4:	83 c0 01             	add    $0x1,%eax
  80042187a7:	89 45 a8             	mov    %eax,-0x58(%rbp)
  80042187aa:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042187ad:	83 f8 1f             	cmp    $0x1f,%eax
  80042187b0:	0f 86 d2 fd ff ff    	jbe    8004218588 <pci_scan_bus+0x4d>
  80042187b6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042187b9:	c9                   	leaveq 
  80042187ba:	c3                   	retq   

00000080042187bb <pci_bridge_attach>:
  80042187bb:	55                   	push   %rbp
  80042187bc:	48 89 e5             	mov    %rsp,%rbp
  80042187bf:	48 83 ec 30          	sub    $0x30,%rsp
  80042187c3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042187c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187cb:	be 1c 00 00 00       	mov    $0x1c,%esi
  80042187d0:	48 89 c7             	mov    %rax,%rdi
  80042187d3:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  80042187da:	00 00 00 
  80042187dd:	ff d0                	callq  *%rax
  80042187df:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042187e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187e6:	be 18 00 00 00       	mov    $0x18,%esi
  80042187eb:	48 89 c7             	mov    %rax,%rdi
  80042187ee:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  80042187f5:	00 00 00 
  80042187f8:	ff d0                	callq  *%rax
  80042187fa:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042187fd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218800:	83 e0 0f             	and    $0xf,%eax
  8004218803:	83 f8 01             	cmp    $0x1,%eax
  8004218806:	75 40                	jne    8004218848 <pci_bridge_attach+0x8d>
  8004218808:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421880c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421880f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218813:	8b 50 08             	mov    0x8(%rax),%edx
  8004218816:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421881a:	48 8b 00             	mov    (%rax),%rax
  800421881d:	8b 40 08             	mov    0x8(%rax),%eax
  8004218820:	89 c6                	mov    %eax,%esi
  8004218822:	48 bf a8 bb 21 04 80 	movabs $0x800421bba8,%rdi
  8004218829:	00 00 00 
  800421882c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218831:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  8004218838:	00 00 00 
  800421883b:	41 ff d0             	callq  *%r8
  800421883e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218843:	e9 a1 00 00 00       	jmpq   80042188e9 <pci_bridge_attach+0x12e>
  8004218848:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421884c:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218851:	be 00 00 00 00       	mov    $0x0,%esi
  8004218856:	48 89 c7             	mov    %rax,%rdi
  8004218859:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  8004218860:	00 00 00 
  8004218863:	ff d0                	callq  *%rax
  8004218865:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218869:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421886d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218870:	c1 e8 08             	shr    $0x8,%eax
  8004218873:	0f b6 c0             	movzbl %al,%eax
  8004218876:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004218879:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  8004218880:	00 00 00 
  8004218883:	8b 00                	mov    (%rax),%eax
  8004218885:	85 c0                	test   %eax,%eax
  8004218887:	74 48                	je     80042188d1 <pci_bridge_attach+0x116>
  8004218889:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421888c:	c1 e8 10             	shr    $0x10,%eax
  800421888f:	0f b6 f8             	movzbl %al,%edi
  8004218892:	8b 75 e8             	mov    -0x18(%rbp),%esi
  8004218895:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218899:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421889c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042188a0:	8b 50 08             	mov    0x8(%rax),%edx
  80042188a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042188a7:	48 8b 00             	mov    (%rax),%rax
  80042188aa:	8b 40 08             	mov    0x8(%rax),%eax
  80042188ad:	41 89 f9             	mov    %edi,%r9d
  80042188b0:	41 89 f0             	mov    %esi,%r8d
  80042188b3:	89 c6                	mov    %eax,%esi
  80042188b5:	48 bf e0 bb 21 04 80 	movabs $0x800421bbe0,%rdi
  80042188bc:	00 00 00 
  80042188bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042188c4:	49 ba 90 95 20 04 80 	movabs $0x8004209590,%r10
  80042188cb:	00 00 00 
  80042188ce:	41 ff d2             	callq  *%r10
  80042188d1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042188d5:	48 89 c7             	mov    %rax,%rdi
  80042188d8:	48 b8 3b 85 21 04 80 	movabs $0x800421853b,%rax
  80042188df:	00 00 00 
  80042188e2:	ff d0                	callq  *%rax
  80042188e4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042188e9:	c9                   	leaveq 
  80042188ea:	c3                   	retq   

00000080042188eb <pci_func_enable>:
  80042188eb:	55                   	push   %rbp
  80042188ec:	48 89 e5             	mov    %rsp,%rbp
  80042188ef:	48 83 ec 40          	sub    $0x40,%rsp
  80042188f3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042188f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042188fb:	ba 07 00 00 00       	mov    $0x7,%edx
  8004218900:	be 04 00 00 00       	mov    $0x4,%esi
  8004218905:	48 89 c7             	mov    %rax,%rdi
  8004218908:	48 b8 89 82 21 04 80 	movabs $0x8004218289,%rax
  800421890f:	00 00 00 
  8004218912:	ff d0                	callq  *%rax
  8004218914:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  800421891b:	e9 ee 01 00 00       	jmpq   8004218b0e <pci_func_enable+0x223>
  8004218920:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218923:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218927:	89 d6                	mov    %edx,%esi
  8004218929:	48 89 c7             	mov    %rax,%rdi
  800421892c:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  8004218933:	00 00 00 
  8004218936:	ff d0                	callq  *%rax
  8004218938:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421893b:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  8004218942:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004218945:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218949:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  800421894e:	89 ce                	mov    %ecx,%esi
  8004218950:	48 89 c7             	mov    %rax,%rdi
  8004218953:	48 b8 89 82 21 04 80 	movabs $0x8004218289,%rax
  800421895a:	00 00 00 
  800421895d:	ff d0                	callq  *%rax
  800421895f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218962:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218966:	89 d6                	mov    %edx,%esi
  8004218968:	48 89 c7             	mov    %rax,%rdi
  800421896b:	48 b8 34 82 21 04 80 	movabs $0x8004218234,%rax
  8004218972:	00 00 00 
  8004218975:	ff d0                	callq  *%rax
  8004218977:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421897a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800421897e:	75 05                	jne    8004218985 <pci_func_enable+0x9a>
  8004218980:	e9 83 01 00 00       	jmpq   8004218b08 <pci_func_enable+0x21d>
  8004218985:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218988:	83 e8 10             	sub    $0x10,%eax
  800421898b:	c1 e8 02             	shr    $0x2,%eax
  800421898e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218991:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218994:	83 e0 01             	and    $0x1,%eax
  8004218997:	85 c0                	test   %eax,%eax
  8004218999:	75 65                	jne    8004218a00 <pci_func_enable+0x115>
  800421899b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421899e:	83 e0 06             	and    $0x6,%eax
  80042189a1:	83 f8 04             	cmp    $0x4,%eax
  80042189a4:	75 07                	jne    80042189ad <pci_func_enable+0xc2>
  80042189a6:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  80042189ad:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042189b0:	83 e0 f0             	and    $0xfffffff0,%eax
  80042189b3:	f7 d8                	neg    %eax
  80042189b5:	23 45 e8             	and    -0x18(%rbp),%eax
  80042189b8:	83 e0 f0             	and    $0xfffffff0,%eax
  80042189bb:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042189be:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042189c1:	83 e0 f0             	and    $0xfffffff0,%eax
  80042189c4:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042189c7:	48 b8 a0 d5 69 04 80 	movabs $0x800469d5a0,%rax
  80042189ce:	00 00 00 
  80042189d1:	8b 00                	mov    (%rax),%eax
  80042189d3:	85 c0                	test   %eax,%eax
  80042189d5:	74 7a                	je     8004218a51 <pci_func_enable+0x166>
  80042189d7:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042189da:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042189dd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042189e0:	89 c6                	mov    %eax,%esi
  80042189e2:	48 bf 10 bc 21 04 80 	movabs $0x800421bc10,%rdi
  80042189e9:	00 00 00 
  80042189ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189f1:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  80042189f8:	00 00 00 
  80042189fb:	41 ff d0             	callq  *%r8
  80042189fe:	eb 51                	jmp    8004218a51 <pci_func_enable+0x166>
  8004218a00:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218a03:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218a06:	f7 d8                	neg    %eax
  8004218a08:	23 45 e8             	and    -0x18(%rbp),%eax
  8004218a0b:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218a0e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218a11:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218a14:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218a17:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218a1a:	48 b8 a0 d5 69 04 80 	movabs $0x800469d5a0,%rax
  8004218a21:	00 00 00 
  8004218a24:	8b 00                	mov    (%rax),%eax
  8004218a26:	85 c0                	test   %eax,%eax
  8004218a28:	74 27                	je     8004218a51 <pci_func_enable+0x166>
  8004218a2a:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004218a2d:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218a30:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218a33:	89 c6                	mov    %eax,%esi
  8004218a35:	48 bf 38 bc 21 04 80 	movabs $0x800421bc38,%rdi
  8004218a3c:	00 00 00 
  8004218a3f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a44:	49 b8 90 95 20 04 80 	movabs $0x8004209590,%r8
  8004218a4b:	00 00 00 
  8004218a4e:	41 ff d0             	callq  *%r8
  8004218a51:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004218a54:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004218a57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218a5b:	89 ce                	mov    %ecx,%esi
  8004218a5d:	48 89 c7             	mov    %rax,%rdi
  8004218a60:	48 b8 89 82 21 04 80 	movabs $0x8004218289,%rax
  8004218a67:	00 00 00 
  8004218a6a:	ff d0                	callq  *%rax
  8004218a6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218a70:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218a73:	48 63 d2             	movslq %edx,%rdx
  8004218a76:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  8004218a7a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004218a7d:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004218a81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218a85:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218a88:	48 63 d2             	movslq %edx,%rdx
  8004218a8b:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  8004218a8f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218a92:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  8004218a95:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004218a99:	74 6d                	je     8004218b08 <pci_func_enable+0x21d>
  8004218a9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004218a9f:	75 67                	jne    8004218b08 <pci_func_enable+0x21d>
  8004218aa1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218aa5:	8b 40 10             	mov    0x10(%rax),%eax
  8004218aa8:	c1 e8 10             	shr    $0x10,%eax
  8004218aab:	41 89 c0             	mov    %eax,%r8d
  8004218aae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ab2:	8b 40 10             	mov    0x10(%rax),%eax
  8004218ab5:	0f b7 f8             	movzwl %ax,%edi
  8004218ab8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218abc:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218abf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ac3:	8b 50 08             	mov    0x8(%rax),%edx
  8004218ac6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218aca:	48 8b 00             	mov    (%rax),%rax
  8004218acd:	8b 40 08             	mov    0x8(%rax),%eax
  8004218ad0:	8b 75 f0             	mov    -0x10(%rbp),%esi
  8004218ad3:	89 74 24 10          	mov    %esi,0x10(%rsp)
  8004218ad7:	8b 75 f4             	mov    -0xc(%rbp),%esi
  8004218ada:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218ade:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004218ae1:	89 34 24             	mov    %esi,(%rsp)
  8004218ae4:	45 89 c1             	mov    %r8d,%r9d
  8004218ae7:	41 89 f8             	mov    %edi,%r8d
  8004218aea:	89 c6                	mov    %eax,%esi
  8004218aec:	48 bf 60 bc 21 04 80 	movabs $0x800421bc60,%rdi
  8004218af3:	00 00 00 
  8004218af6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218afb:	49 ba 90 95 20 04 80 	movabs $0x8004209590,%r10
  8004218b02:	00 00 00 
  8004218b05:	41 ff d2             	callq  *%r10
  8004218b08:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b0b:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004218b0e:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  8004218b12:	0f 86 08 fe ff ff    	jbe    8004218920 <pci_func_enable+0x35>
  8004218b18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218b1c:	8b 40 10             	mov    0x10(%rax),%eax
  8004218b1f:	c1 e8 10             	shr    $0x10,%eax
  8004218b22:	89 c7                	mov    %eax,%edi
  8004218b24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218b28:	8b 40 10             	mov    0x10(%rax),%eax
  8004218b2b:	0f b7 f0             	movzwl %ax,%esi
  8004218b2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218b32:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218b35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218b39:	8b 50 08             	mov    0x8(%rax),%edx
  8004218b3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218b40:	48 8b 00             	mov    (%rax),%rax
  8004218b43:	8b 40 08             	mov    0x8(%rax),%eax
  8004218b46:	41 89 f9             	mov    %edi,%r9d
  8004218b49:	41 89 f0             	mov    %esi,%r8d
  8004218b4c:	89 c6                	mov    %eax,%esi
  8004218b4e:	48 bf c0 bc 21 04 80 	movabs $0x800421bcc0,%rdi
  8004218b55:	00 00 00 
  8004218b58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b5d:	49 ba 90 95 20 04 80 	movabs $0x8004209590,%r10
  8004218b64:	00 00 00 
  8004218b67:	41 ff d2             	callq  *%r10
  8004218b6a:	c9                   	leaveq 
  8004218b6b:	c3                   	retq   

0000008004218b6c <pci_init>:
  8004218b6c:	55                   	push   %rbp
  8004218b6d:	48 89 e5             	mov    %rsp,%rbp
  8004218b70:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218b75:	be 00 00 00 00       	mov    $0x0,%esi
  8004218b7a:	48 bf b0 d5 69 04 80 	movabs $0x800469d5b0,%rdi
  8004218b81:	00 00 00 
  8004218b84:	48 b8 84 03 21 04 80 	movabs $0x8004210384,%rax
  8004218b8b:	00 00 00 
  8004218b8e:	ff d0                	callq  *%rax
  8004218b90:	48 bf b0 d5 69 04 80 	movabs $0x800469d5b0,%rdi
  8004218b97:	00 00 00 
  8004218b9a:	48 b8 3b 85 21 04 80 	movabs $0x800421853b,%rax
  8004218ba1:	00 00 00 
  8004218ba4:	ff d0                	callq  *%rax
  8004218ba6:	5d                   	pop    %rbp
  8004218ba7:	c3                   	retq   

0000008004218ba8 <time_init>:
  8004218ba8:	55                   	push   %rbp
  8004218ba9:	48 89 e5             	mov    %rsp,%rbp
  8004218bac:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218bb3:	00 00 00 
  8004218bb6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218bbc:	5d                   	pop    %rbp
  8004218bbd:	c3                   	retq   

0000008004218bbe <time_tick>:
  8004218bbe:	55                   	push   %rbp
  8004218bbf:	48 89 e5             	mov    %rsp,%rbp
  8004218bc2:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218bc9:	00 00 00 
  8004218bcc:	8b 00                	mov    (%rax),%eax
  8004218bce:	8d 50 01             	lea    0x1(%rax),%edx
  8004218bd1:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218bd8:	00 00 00 
  8004218bdb:	89 10                	mov    %edx,(%rax)
  8004218bdd:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218be4:	00 00 00 
  8004218be7:	8b 10                	mov    (%rax),%edx
  8004218be9:	89 d0                	mov    %edx,%eax
  8004218beb:	c1 e0 02             	shl    $0x2,%eax
  8004218bee:	01 d0                	add    %edx,%eax
  8004218bf0:	01 c0                	add    %eax,%eax
  8004218bf2:	89 c2                	mov    %eax,%edx
  8004218bf4:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218bfb:	00 00 00 
  8004218bfe:	8b 00                	mov    (%rax),%eax
  8004218c00:	39 c2                	cmp    %eax,%edx
  8004218c02:	73 2a                	jae    8004218c2e <time_tick+0x70>
  8004218c04:	48 ba ef bc 21 04 80 	movabs $0x800421bcef,%rdx
  8004218c0b:	00 00 00 
  8004218c0e:	be 14 00 00 00       	mov    $0x14,%esi
  8004218c13:	48 bf 0a bd 21 04 80 	movabs $0x800421bd0a,%rdi
  8004218c1a:	00 00 00 
  8004218c1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c22:	48 b9 e4 05 20 04 80 	movabs $0x80042005e4,%rcx
  8004218c29:	00 00 00 
  8004218c2c:	ff d1                	callq  *%rcx
  8004218c2e:	5d                   	pop    %rbp
  8004218c2f:	c3                   	retq   

0000008004218c30 <time_msec>:
  8004218c30:	55                   	push   %rbp
  8004218c31:	48 89 e5             	mov    %rsp,%rbp
  8004218c34:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218c3b:	00 00 00 
  8004218c3e:	8b 10                	mov    (%rax),%edx
  8004218c40:	89 d0                	mov    %edx,%eax
  8004218c42:	c1 e0 02             	shl    $0x2,%eax
  8004218c45:	01 d0                	add    %edx,%eax
  8004218c47:	01 c0                	add    %eax,%eax
  8004218c49:	5d                   	pop    %rbp
  8004218c4a:	c3                   	retq   
